[
    {
        "number": 0,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 0.5) == False",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    paren_groups = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_groups.append(paren_string[i:])\n        elif paren_string[i] == ')':\n            if len(paren_groups) > 0:\n                paren_groups.pop()\n            else:\n                return []\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return round(number, -1)\n",
        "test": "assert     truncate_number(1.3) == 1.3",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if operations[0] == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     below_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return (sum([(x - mean) ** 2 for x in numbers]) / len(numbers)) ** 0.5\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 5.0",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5, 2, 3, 4, 5]",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ')\n    paren_string = paren_string.replace('[','[ ')\n    paren_string = paren_string.replace(']','] ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('{','{ ')\n    paren_string = paren_string.replace('}','} ",
        "test": "assert     parse_nested_parens(\"((()))\") == [2, 3]",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"], \"z\") == [\"z\"]",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (numbers[0], sum(numbers[1:]))\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        if i == len(numbers) - 1:\n            break\n        else:\n            for j in range(i + 1, len(numbers)):\n                if numbers[j] > numbers[i]:\n                    max_list.append(numbers[j])\n    return max_list\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 7",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Find the longest palindrome that begins with a supplied string\n    longest_palindrome = ''\n    for i in range(len(string)):\n        # Find the longest palindrome that begins with a supplied string\n        if is_palindrome(string[:i] + string[i+1:]):\n            longest_palindrome = string[:i] + string[i+1:]\n    return longest_palindrome\n",
        "test": "assert     make_palindrome(\"abcd\") == \"abcd\"",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\"",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) == 2:\n        return strings[0] if strings[0] > strings[1] else strings[1]\n    if len(strings) == 3:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] else strings[1]\n    if len(strings) == 4:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] else strings[1]\n    if len(strings) == 5:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] else strings[1]\n    if len(strings) == 6:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] else strings[1]\n    if len(strings) == 7:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] else strings[1]\n    if len(strings) == 8:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] and strings[6] > strings[7] else strings[1]\n    if len(strings) == 9:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] and strings[6] > strings[7] and strings[7] > strings[8] else strings[1]\n    if len(strings) == 10:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] and strings[6] > strings[7] and strings[7] > strings[8] and strings[8] > strings[9] else strings[1]\n    if len(strings) == 11:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] and strings[6] > strings[7] and strings[7] > strings[8] and strings[8] > strings[9] and strings[9] > strings[10] else strings[1]\n    if len(strings) == 12:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] and strings[6] > strings[7] and strings[7] > strings[8] and strings[8] > strings[9] and strings[9] > strings[10] and strings[10] > strings[11] else strings[1]\n    if len(strings) == 13:\n        return strings[0] if strings[0] > strings[1] and strings[1] > strings[2] and strings[2] > strings[3] and strings[3] > strings[4] and strings[4] > strings[5] and strings[5] > strings[6] and strings[6] > strings[7] and strings[7",
        "test": "assert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"z\"",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a + b, a)\n",
        "test": "assert     greatest_common_divisor(2, 3) == 1",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    prefixes = []\n    for i in range(1, len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abab\") == [\"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return''.join(str(i) for i in range(n))\n",
        "test": "assert     string_sequence(3) == \"3\"",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n",
        "test": "assert     count_distinct_characters(\"abcd\") == 2",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # TODO: implement this function\n    # return [int(x) for x in music_string.split('|')]\n    return [int(x) for x in music_string.split('|')]\n",
        "test": "assert     parse_music('o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"abc\", \"bc\") == 1",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    return numbers\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\"",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    smallest_difference = float('inf')\n    smallest_number = float('inf')\n    for number in numbers:\n        difference = abs(number - smallest_number)\n        if difference < smallest_difference:\n            smallest_difference = difference\n            smallest_number = number\n    return smallest_number, smallest_difference\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == (1, 3)",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [n / (n - 1) for n in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"abc\") == 3",
        "num_ids": 75,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "test": "assert     largest_divisor(4) == 4",
        "num_ids": 99,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return factorize(n//2) + [2]\n    else:\n        return factorize(n//2) + factorize(n%2)\n",
        "test": "assert     factorize(1) == [1]",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # TODO: Write your code here\n    return numbers\n",
        "test": "assert     remove_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, ",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return string.lower() + string.upper()\n",
        "test": "assert     flip_case(\"AaBbCcDdEeFf\") == \"AaBbCcDdEeFf\"",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"",
        "num_ids": 122,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"], \"z\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return max([abs(poly(xs, x)) for x in xs])\n",
        "test": "assert     find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 3,
        "answer": "    l_copy = l.copy()\n    for i in range(len(l_copy)):\n        if l_copy[i] % 3 == 0:\n            l_copy[i] = l_copy[i] // 3\n    return l_copy\n",
        "test": "assert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,44",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 123, 123, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 133, 133, 134, 135, 135, 136, 137, 137, 138, 138, 139, 139, 140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 147, 147, 148, 149, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 27",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n % 7 == 0:\n        return 0\n    elif n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    else:\n        return 3\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    even_indices = []\n    odd_indices = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n    return even_indices + odd_indices\n",
        "test": "assert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"\") == \"\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(3) == 2",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 4]) == False",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum(1 for car in range(n) if car_race_collision(car+1))\n",
        "test": "assert car_race_collision(4) == 0",
        "num_ids": 79,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1, 2, 3, 4, 5, 6]) == [1, 3, 6, 10, 15, 21]",
        "num_ids": 125,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "    # TODO: Write your code here\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,10]) == False",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return str(x // base) + change_base(x % base, base)\n",
        "test": "assert     change_base(1, 10) == \"1\"",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return (a*h)/2\n",
        "test": "assert     triangle_area(3, 3) == 6",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2 - 1)])/2\n    else:\n        return l[int(len(l)/2)]\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    text = text.lower()\n    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"race a car\") == True",
        "num_ids": 87,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return pow(n, p, n)\n",
        "test": "assert     modp(2, 6) == 2",
        "num_ids": 60,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"abc\") == \"a\"",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n",
        "test": "assert     remove_vowels(\"Hello world\") == \"olleH wldr\"",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return all(x < t for x in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 4) == False",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 51,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return s0 == s1\n",
        "test": "assert     same_chars(\"a\", \"a\") == True",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(0) == 0",
        "num_ids": 84,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for bracket in brackets:\n        if bracket == \"<\":\n            if bracket == \">\":\n                return False\n            else:\n                return True\n        elif bracket == \">\":\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<\") == True",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(l) == 0:\n        return True\n    if l[0] < l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == True",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Find the largest prime factor of n\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    # n = 2 * 3 * 5 * 7 * 11 ",
        "test": "assert     largest_prime_factor(7) == 2",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(range(1, n+1))\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"(()(\") == True",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [x[1] for x in reversed(xs)]\n",
        "test": "assert     derivative(xs=[1, 2, 3, 4, 5, 6]) == [0, 0, 0, 0, 0, 0]",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"o\") == 0, \"o is not a vowel\"",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return x[-shift:] + x[:-shift]\n",
        "test": "assert     circular_shift(123, 4) == '4'",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"123456789\") == 12",
        "num_ids": 72,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # your code here\n    return 0\n",
        "test": "assert     fruit_distribution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 3,
        "answer": "    if not arr:\n        return []\n    \n    arr.sort()\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) % 2 == 0:\n        return arr[len(arr) // 2]\n    \n    return arr[len(arr) // 2 - 1]\n",
        "test": "assert     pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # Your code here\n    if len(lst) == 0:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        if lst[0] > lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    else:\n        if lst[0] > lst[1]:\n            return lst[0]\n        elif lst[0] > lst[2]:\n            return lst[0]\n        else:\n            return lst[1]\n",
        "test": "assert     search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == -1",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    return sorted(lst, key=lambda x: x, reverse=True)\n",
        "test": "assert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b) / 2, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(1, 3, 2) == -1",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # Write your code here.\n    if q == []:\n        return False\n    if q[0] == q[-1]:\n        return True\n    if q[0] < q[-1]:\n        return will_it_fly(q[1:-1], w)\n    else:\n        return will_it_fly(q[1:], w)\n",
        "test": "assert     will_it_fly(q,w) == False",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if arr[0] == arr[-1]:\n        return 1\n    if arr[0] > arr[-1]:\n        return smallest_change(arr[1:])\n    else:\n        return smallest_change(arr[:-1])\n",
        "test": "assert     smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 10",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    lst1 = list(lst1)\n    lst2 = list(lst2)\n    if len(lst1)!= len(lst2):\n        return lst1\n    else:\n        return lst1 + lst2\n",
        "test": "assert     total_match([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,40",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(1) == True",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return is_simple_power(x, 1)\n    if n == 3:\n        return is_simple_power(x, 2)\n    if n == 4:\n        return is_simple_power(x, 3)\n    if n == 5:\n        return is_simple_power(x, 4)\n    if n == 6:\n        return is_simple_power(x, 5)\n    if n == 7:\n        return is_simple_power(x, 6)\n    if n == 8:\n        return is_simple_power(x, 7)\n    if n == 9:\n        return is_simple_power(x, 8)\n    if n == 10:\n        return is_simple_power(x, 9)\n    if n == 11:\n        return is_simple_power(x, 10)\n    if n == 12:\n        return is_simple_power(x, 11)\n    if n == 13:\n        return is_simple_power(x, 12)\n    if n == 14:\n        return is_simple_power(x, 13)\n    if n == 15:\n        return is_simple_power(x, 14)\n    if n == 16:\n        return is_simple_power(x, 15)\n    if n == 17:\n        return is_simple_power(x, 16)\n    if n == 18:\n        return is_simple_power(x, 17)\n    if n == 19:\n        return is_simple_power(x, 18)\n    if n == 20:\n        return is_simple_power(x, 19)\n    if n == 21:\n        return is_simple_power(x, 20)\n    if n == 22:\n        return is_simple_power(x, 21)\n    if n == 23:\n        return is_simple_power(x, 22)\n    if n == 24:\n        return is_simple_power(x, 23)\n    if n == 25:\n        return is_simple_power(x, 24)\n    if n == 26:\n        return is_simple_power(x, 25)\n    if n == 27:\n        return is_simple_power(x, 26)\n    if n == 28:\n        return is_simple_power(x, 27)\n    if n == 29:\n        return is_simple_power(x, 28)\n    if n == 30:\n        return is_simple_power(x, 29)\n    if n == 31:\n        return is_simple_power(x, 30)\n    if n == 32:\n        return is_simple_power(x, 31)\n    if n == 33:\n        return is_simple_power(x, 32)\n    if n == 34:\n        return is_simple_power(x, 33)\n    if n == 35:\n        return is_simple_power(x, 34)\n    if n == 36:\n        return is_simple_power(x, 35)\n    if n == 37:\n        return is_simple_power(x, 36)\n    if n == 38:\n        return is_simple_power(x, 37)\n    if n == 39:\n        return is_simple_power(x, 38)\n    if n == 40:\n        return is_simple_power(x, 39)\n    if n == 41:\n        return is_simple_power(x, 40)\n    if n == 42:\n        return is_simple_power(x, 41)\n    if n == 43:\n        return is_simple_power(x, 42)\n    if n == 44:\n        return is_simple_power(x, 43)\n    if n == 45:\n        return is_simple_power(x, 44)\n    if n == 46:\n        return is_simple_power(x, 45)\n    if n == 47:\n        return is_simple_power(x, 46)\n    if n == 48:\n        return is_simple_power(x, 47)\n    if n == 49:\n        return is_simple_power(x, 48)\n    if n == 50:\n        return is_simple_power(x, 49)\n    if n == 51:\n        return is_simple_power(x, 50)\n    if n == 52:\n        return is_simple",
        "test": "assert     is_simple_power(2, 2) == True",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if a == 0:\n        return True\n    elif a == 1:\n        return False\n    elif a == 2:\n        return True\n    elif a == 3:\n        return False\n    elif a == 4:\n        return True\n    elif a == 5:\n        return False\n    elif a == 6:\n        return True\n    elif a == 7:\n        return False\n    elif a == 8:\n        return True\n    elif a == 9:\n        return False\n    elif a == 10:\n        return True\n    elif a == 11:\n        return False\n    elif a == 12:\n        return True\n    elif a == 13:\n        return False\n    elif a == 14:\n        return True\n    elif a == 15:\n        return False\n    elif a == 16:\n        return True\n    elif a == 17:\n        return False\n    elif a == 18:\n        return True\n    elif a == 19:\n        return False\n    elif a == 20:\n        return True\n    elif a == 21:\n        return False\n    elif a == 22:\n        return True\n    elif a == 23:\n        return False\n    elif a == 24:\n        return True\n    elif a == 25:\n        return False\n    elif a == 26:\n        return True\n    elif a == 27:\n        return False\n    elif a == 28:\n        return True\n    elif a == 29:\n        return False\n    elif a == 30:\n        return True\n    elif a == 31:\n        return False\n    elif a == 32:\n        return True\n    elif a == 33:\n        return False\n    elif a == 34:\n        return True\n    elif a == 35:\n        return False\n    elif a == 36:\n        return True\n    elif a == 37:\n        return False\n    elif a == 38:\n        return True\n    elif a == 39:\n        return False\n    elif a == 40:\n        return True\n    elif a == 41:\n        return False\n    elif a == 42:\n        return True\n    elif a == 43:\n        return False\n    elif a == 44:\n        return True\n    elif a == 45:\n        return False\n    elif a == 46:\n        return True\n    elif a == 47:\n        return False\n    elif a == 48:\n        return True\n    elif a == 49:\n        return False\n    elif a == 50:\n        return True\n    elif a == 51:\n        return False\n    elif a == 52:\n        return True\n    elif a == 53:\n        return False\n    elif a == 54:\n        return True\n    elif a == 55:\n        return False\n    elif a == 56:\n        return True\n    elif a == 57:\n        return False\n    elif a == 58:\n        return True\n    elif a == 59:\n        return False\n    elif a == 60:\n        return True\n    elif a == 61:\n        return False\n    elif a == 62:\n        return True\n    elif a == 63:\n        return False\n    elif a == 64:\n        return True\n    elif a == 65:\n        return False\n    elif a == 66:\n        return True\n    elif a == 67:\n        return False\n    elif a == 68:\n        return True\n    elif a == 69:\n        return False\n    elif a == 70:\n        return True\n    elif a == 71:\n        return False\n    elif a == 72:\n        return True\n    elif a == 73:\n        return False\n    elif a == 74:\n        return True\n    elif a == 75:\n        return False\n    elif a == 76:\n        return True\n    elif a == 77:\n        return False\n    elif a == 78:\n        return True\n    elif a == 79:\n        return False\n    elif a == 80:\n        return True\n    elif a == 81:\n        return False\n    elif a == 82:\n        return True\n    elif a == 83:\n        return False\n    elif a == 84:\n        return True\n    elif a =",
        "test": "assert     iscube(4) == True",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    if num == \"\":\n        return 0\n    if num[0] == \"0\":\n        return 0\n    if num[0] == \"1\":\n        return 1\n    if num[0] == \"2\":\n        return 2\n    if num[0] == \"3\":\n        return 3\n    if num[0] == \"4\":\n        return 4\n    if num[0] == \"5\":\n        return 5\n    if num[0] == \"6\":\n        return 6\n    if num[0] == \"7\":\n        return 7\n    if num[0] == \"8\":\n        return 8\n    if num[0] == \"9\":\n        return 9\n    if num[0] == \"A\":\n        return 10\n    if num[0] == \"B\":\n        return 11\n    if num[0] == \"C\":\n        return 12\n    if num[0] == \"D\":\n        return 13\n    if num[0] == \"E\":\n        return 14\n    if num[0] == \"F\":\n        return 15\n    if num[0] == \"0\":\n        return 0\n    if num[0] == \"1\":\n        return 1\n    if num[0] == \"2\":\n        return 2\n    if num[0] == \"3\":\n        return 3\n    if num[0] == \"4\":\n        return 4\n    if num[0] == \"5\":\n        return 5\n    if num[0] == \"6\":\n        return 6\n    if num[0] == \"7\":\n        return 7\n    if num[0] == \"8\":\n        return 8\n    if num[0] == \"9\":\n        return 9\n    if num[0] == \"A\":\n        return 10\n    if num[0] == \"B\":\n        return 11\n    if num[0] == \"C\":\n        return 12\n    if num[0] == \"D\":\n        return 13\n    if num[0] == \"E\":\n        return 14\n    if num[0] == \"F\":\n        return 15\n    if num[0] == \"0\":\n        return 0\n    if num[0] == \"1\":\n        return 1\n    if num[0] == \"2\":\n        return 2\n    if num[0] == \"3\":\n        return 3\n    if num[0] == \"4\":\n        return 4\n    if num[0] == \"5\":\n        return 5\n    if num[0] == \"6\":\n        return 6\n    if num[0] == \"7\":\n        return 7\n    if num[0] == \"8\":\n        return 8\n    if num[0] == \"9\":\n        return 9\n    if num[0] == \"A\":\n        return 10\n    if num[0] == \"B\":\n        return 11\n    if num[0] == \"C\":\n        return 12\n    if num[0] == \"D\":\n        return 13\n    if num[0] == \"E\":\n        return 14\n    if num[0] == \"F\":\n        return 15\n    if num[0] == \"0\":\n        return 0\n    if num[0] == \"1\":\n        return 1\n    if num[0] == \"2\":\n        return 2\n    if num[0] == \"3\":\n        return 3\n    if num[0] == \"4\":\n        return 4\n    if num[0] == \"5\":\n        return 5\n    if num[0] == \"6\":\n        return 6\n    if num[0] == \"7\":\n        return 7\n    if num[0] == \"8\":\n        return 8\n    if num[0] == \"9\":\n        return 9\n    if num[0] == \"A\":\n        return 10\n    if num[0] == \"B\":\n        return 11\n    if num[0] == \"C\":\n        return 12\n    if num[0] == \"D\":\n        return 13\n    if num[0] == \"E\":\n        return 14\n    if num[0] == \"F\":\n        return 15\n    if num[0] == \"0\":\n        return 0\n    if num[0] == \"1\":\n        return 1\n    if num[0] == \"2\":\n        return 2\n    i",
        "test": "assert     hex_key(3) == 7",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n",
        "test": "assert     is_happy('a') == True",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # TODO: Write your code here\n    # TODO: Remove pass and write your code here\n    pass\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return True if string[0] == string[1] else False\n    if len(string) == 3:\n        return True if string[0] == string[1] and string[1] == string[2] else False\n    if len(string) == 4:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] else False\n    if len(string) == 5:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] else False\n    if len(string) == 6:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] else False\n    if len(string) == 7:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] else False\n    if len(string) == 8:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7] else False\n    if len(string) == 9:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7] and string[7] == string[8] else False\n    if len(string) == 10:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7] and string[7] == string[8] and string[8] == string[9] else False\n    if len(string) == 11:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7] and string[7] == string[8] and string[8] == string[9] and string[9] == string[10] else False\n    if len(string) == 12:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7] and string[7] == string[8] and string[8] == string[9] and string[9] == string[10] and string[10] == string[11] else False\n    if len(string) == 13:\n        return True if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7] and string[7] == string[8] and string[8] == string[9] and string[9] == string[10] and string[10] == string[11] and string[11] == string[12] else False\n    if len(string) == 14:\n        return True if string[0] == string[1] an",
        "test": "assert     prime_length(\"123456789\") == False",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(1 for i in range(n) if i % 10 == 1)\n",
        "test": "assert     starts_one_ends(1) == 0",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    sum = 0\n    while N:\n        sum += N % 2\n        N //= 2\n    return str(sum)\n",
        "test": "assert     solve(3) == 2",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return even + odd\n",
        "test": "assert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return''.join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle(\"A string, with words separated by whitespace.\") == \"AString,withWordsSeparatedByWhitespace\"",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    lst.sort(key=lambda x: x[0])\n    return [(x[0], x[1]) for x in lst]\n",
        "test": "assert     get_row([1,2,3,4,5], 5) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # TODO: Write your code here\n    if len(array) == 0:\n        return array\n    \n    if len(array) == 1:\n        return array\n    \n    if array[0] % 2 == 0:\n        return sort_array(array[1:]) + [array[0]] + sort_array(array[:1])\n    else:\n        return sort_array(array[1:]) + [array[0]] + sort_array(array[:1]) + [array[0]]\n",
        "test": "assert     sort_array
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Create a function encrypt that takes a string as an argument and\n    # returns a string encrypted with the alphabet being rotated. \n    # The alphabet should be rotated in a manner such that the letters \n    # shift down by two multiplied to two places.\n    # For example:\n    # encrypt('hi') returns 'lm'\n    # encrypt('asdfghjkl') returns 'ewhjklnop'\n    # encrypt('gf') returns 'kj'\n    # encrypt('et') returns 'ix'\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n    # Hint: Use the function encrypt() to create a function that rotates \n    # the letters of a string.\n    #\n",
        "test": "assert     encrypt(\"hello\") == \"hlelo\"",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    \n    # TODO: Write your code here\n    if len(lst) == 0:\n        return None\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if lst[0] > lst[1]:\n        return lst[0]\n    \n    return lst[1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 11",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    count = 0\n    for word in S.split():\n        if word[0] == '?' or word[0] == '!':\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"I am not bored\") == 0",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if x == y == z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return True\n",
        "test": "assert     any_int(1, 2, 3) == True",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    message = message.lower()\n    message = message.replace('a', 'e')\n    message = message.replace('e', 'a')\n    message = message.replace('i', 'o')\n    message = message.replace('o', 'i')\n    message = message.replace('u', 'o')\n    message = message.replace('u', 'i')\n    message = message.replace('y', 'i')\n    message = message.replace('i', 'y')\n    message = message.replace('o', 'i')\n    message = message.replace('o', 'y')\n    message = message.replace('u', 'i')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n    message = message.replace('i', 'y')\n    message = message.replace('i', 'u')\n    message = message.replace('o', 'y')\n    message = message.replace('o', 'u')\n    message = message.replace('u', 'y')\n    messag",
        "test": "assert     encode(\"Hello World\") == \"eLlO wOrD lUeD\"",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Your code here\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            continue\n        for j in range(i+1, len(lst)):\n            if lst[j] == 0:\n                continue\n            if lst[i] % lst[j] == 0:\n                lst[i] = lst[j]\n                lst[j] = 0\n    return sum(lst)\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.lower() not in dict.keys():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"}) == True",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    prime_numbers = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Write your code here.\n    return a*b\n",
        "test": "assert     multiply(2, 3) == 6",
        "num_ids": 67,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper('AaA') == 2",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    if value == \"\":\n        return 0\n    if value.isdigit():\n        return int(value)\n    else:\n        return closest_integer(value.replace(\".\", \"\"))\n",
        "test": "assert     closest_integer(\"-14.5\") == -15",
        "num_ids": 78,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n//2] + make_a_pile(n//2)\n    else:\n        return [n//2] + make_a_pile(n//2) + [n//2]\n",
        "test": "assert     make_a_pile(4) == 4",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return s.split(\",\")\n",
        "test": "assert     words_string(\"hello,world\") == [\"hello\", \"world\"]",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if x > y:\n        return choose_num(x, y - 1)\n    elif x == y:\n        return x\n    else:\n        return choose_num(x - 1, y)\n",
        "test": "assert     choose_num(0, 1) == 1",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return \"0b\" + str(n)\n    if n < m:\n        return \"-\" + str(n)\n    if n > 0:\n        return str(n) + \"b\"\n    if n < 0:\n        return str(n) + \"-\" + str(m)\n",
        "test": "assert ",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # TODO: Write your code here\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n",
        "test": "assert     unique_digits
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    arr.sort()\n    arr.reverse()\n    return arr\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    factorial = [1]\n    for i in range(1, n+1):\n        factorial.append(factorial[i-1]*i)\n    return factorial\n",
        "test": "assert     f(3) == 6",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    even_odd_palindrome = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindrome.append(i)\n        else:\n            odd_palindrome = i\n            even_odd_palindrome.append(odd_palindrome)\n    return even_odd_palindrome\n",
        "test": "assert     even_odd_palindrome(4) == (1, 3)",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 3,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] == arr[1]\n    if len(arr) == 2:\n        return arr[0] < arr[1]\n    if len(arr) == 3:\n        return arr[0] > arr[1] and arr[1] > arr[2]\n    if len(arr) == 4:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3]\n    if len(arr) == 5:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4]\n    if len(arr) == 6:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5]\n    if len(arr) == 7:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6]\n    if len(arr) == 8:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7]\n    if len(arr) == 9:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6] and arr[6] < arr[7] and arr[7] < arr[8]\n    if len(arr) == 10:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9]\n    if len(arr) == 11:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6] and arr[6] < arr[7] and arr[7] < arr[8] and arr[8] < arr[9] and arr[9] < arr[10]\n    if len(arr) == 12:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11]\n    if len(arr) == 13:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6] and arr[6] < arr[7] and arr[7] < arr[8] and arr[8] < arr[9] and arr[9] < arr[10] and arr[10] < arr[11] and arr[11] < arr[12]\n    if len(arr) == 14:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > ar",
        "test": "assert ",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "    # Your code here\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == lst2[i] % 2:\n            return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]) == \"NO\", \"exchange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7])\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(s)!= len(c):\n        return None\n    if len(s) == 1:\n        return (s,False)\n    if s[0] == c[0]:\n        return (s[1:],True)\n    else:\n        return (s[1:],False)\n",
        "test": "assert     reverse_delete(\"abcd\", \"a\") == (\"dc\", True)",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [str(len(i)) for i in lst if i[0] in '1234567']\n",
        "test": "assert     odd_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # O(n) time complexity, O(n) space complexity\n    # O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) time complexity, O(n) space complexity\n    # O(n) tim",
        "test": "assert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == 0",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    \n    # get the number of rows and columns\n    rows, cols = len(grid), len(grid[0])\n    \n    # initialize the buckets\n    buckets = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    # fill the buckets\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i][j] = 1\n                for k in range(cols):\n                    if grid[i][k] == 1:\n                        buckets[i][k] = 1\n    \n    # get the number of buckets\n    buckets_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if buckets[i][j] == 1:\n                buckets_count += 1\n    \n    # get the number of buckets that can be used\n    buckets_capacity = math.ceil(buckets_count/bucket_capacity)\n    \n    # return the number of buckets that can be used\n    return buckets_capacity\n",
        "test": "assert     max_fill(grid, capacity) == 1",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "    # Your code here\n    arr.sort()\n    return arr\n",
        "test": "assert     sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(s) == 0:\n        return []\n    \n    # if the string is empty, return an empty list\n    if len(s) == 0:\n        return []\n    \n    # if the string is not a string, return an empty list\n    if not isinstance(s, str):\n        return []\n    \n    # if the string is a string, return a list of all words in the string\n    if isinstance(s, str):\n        return list(s)\n    \n    # if the string is a list, return a list of all words in the string\n    if isinstance(s, list):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a tuple, return a list of all words in the string\n    if isinstance(s, tuple):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a set, return a list of all words in the string\n    if isinstance(s, set):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # if the string is a frozenset, return a list of all words in the string\n    if isinstance(s, frozenset):\n        return [word for word in s if word.isalpha()]\n    \n    # i",
        "test": "assert     select_words(\"abcdefghijklmnopqrstuvwxyz\", 6) == [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"xy\"]",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    vowels = \"aeiouAEIOU\"\n    vowels_index = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_index += 1\n    if vowels_index == 0:\n        return \"\"\n    else:\n        return word[vowels_index - 1]\n",
        "test": "assert     get_closest_vowel(\"a\") == \"a\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    # Runtime: O(n)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    # Brute force\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_good(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0",
        "test": "assert     match_parens(['(())', '()()']) == 'No'",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    ",
        "test": "assert ",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    odd = 0\n    even = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return odd + even\n",
        "test": "assert     solution([1,2,3,4,5,6,7,8,9,10]) == 55",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # O(n) time | O(1) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    # O(n) space\n    ",
        "test": "assert     add_elements([1, 2, 3, 4, 5], 5) == 6",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    odd_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd_list.append(i)\n        else:\n            if i % 3 == 0:\n                odd_list.append(i)\n            else:\n                odd_list.append(i*2)\n    return odd_list\n",
        "test": "assert ",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not date:\n        return False\n    if not date.isdigit():\n        return False\n    if len(date)!= 10:\n        return False\n    if not date[0].isdigit():\n        return False\n    if not date[1].isdigit():\n        return False\n    if not date[2].isdigit():\n        return False\n    if not date[3].isdigit():\n        return False\n    if not date[4].isdigit():\n        return False\n    if not date[5].isdigit():\n        return False\n    if not date[6].isdigit():\n        return False\n    if not date[7].isdigit():\n        return False\n    if not date[8].isdigit():\n        return False\n    if not date[9].isdigit():\n        return False\n    if not date[10].isdigit():\n        return False\n    if not date[11].isdigit():\n        return False\n    if not date[12].isdigit():\n        return False\n    if not date[13].isdigit():\n        return False\n    if not date[14].isdigit():\n        return False\n    if not date[15].isdigit():\n        return False\n    if not date[16].isdigit():\n        return False\n    if not date[17].isdigit():\n        return False\n    if not date[18].isdigit():\n        return False\n    if not date[19].isdigit():\n        return False\n    if not date[20].isdigit():\n        return False\n    if not date[21].isdigit():\n        return False\n    if not date[22].isdigit():\n        return False\n    if not date[23].isdigit():\n        return False\n    if not date[24].isdigit():\n        return False\n    if not date[25].isdigit():\n        return False\n    if not date[26].isdigit():\n        return False\n    if not date[27].isdigit():\n        return False\n    if not date[28].isdigit():\n        return False\n    if not date[29].isdigit():\n        return False\n    if not date[30].isdigit():\n        return False\n    if not date[31].isdigit():\n        return False\n    if not date[32].isdigit():\n        return False\n    if not date[33].isdigit():\n        return False\n    if not date[34].isdigit():\n        return False\n    if not date[35].isdigit():\n        return False\n    if not date[36].isdigit():\n        return False\n    if not date[37].isdigit():\n        return False\n    if not date[38].isdigit():\n        return False\n    if not date[39].isdigit():\n        return False\n    if not date[40].isdigit():\n        return False\n    if not date[41].isdigit():\n        return False\n    if not date[42].isdigit():\n        return False\n    if not date[43].isdigit():\n        return False\n    if not date[44].isdigit():\n        return False\n    if not date[45].isdigit():\n        return False\n    if not date[46].isdigit():\n        return False\n    if not date[47].isdigit():\n        return False\n    if not date[48].isdigit():\n        return False\n    if not date[49].isdigit():\n        return False\n    if not date[50].isdigit():\n        return False\n    if not date[51].isdigit():\n        return False\n    if not date[52].isdigit():\n        return False\n    if not date[53].isdigit():\n        return False\n    if not date[54].isdigit():\n        return False\n    if not date[55].isdigit():\n        return False\n    if not date[56].isdigit():\n        return False\n    if not date[57].isdigit():\n        return False\n    if not date[58].isdigit():\n        return False\n    if not date[59].isdigit():\n        return False\n    if not date[60].isdigit():\n        return False\n    if not date[61].isdigi",
        "test": "assert     valid_date(\"01-01-2000-01-01-01\") == True",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    txt = txt.lower()\n    txt = txt.replace('.', ',')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replace('.','')\n    txt = txt.replace(',','')\n    txt = txt.replace('!','')\n    txt = txt.replace('?','')\n    txt = txt.replace('\"','')\n    txt = txt.replace('(','')\n    txt = txt.replace(')','')\n    txt = txt.replace('-','')\n    txt = txt.replac",
        "test": "assert     split_words('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst) == 1:\n        return True\n    if lst[0] == lst[1]:\n        return False\n    if lst[0] < lst[1]:\n        return False\n    return is_sorted([lst[0], lst[1]])\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == False",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # write your code here\n    if interval1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection(1, 3) == (1, 3)",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return prod_signs(arr[1:]) + prod_signs(arr[:-1])\n",
        "test": "assert     prod_signs([1, -1, 0, -1, 0, -1]) == 0",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    if not grid:\n        return []\n    if not grid[0]:\n        return []\n    \n    lst_A = []\n    lst_B = []\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                lst_A.append(j)\n                lst_B.append(i)\n    \n    lst_A.sort()\n    lst_B.sort()\n    \n    for i in range(len(lst_A)):\n        if lst_A[i] < lst_B[i]:\n            lst_A[i] = lst_B[i]\n    \n    return lst_A\n",
        "test": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 0) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    elif n == 3:\n        return [1, 1, 2]\n    elif n == 4:\n        return [1, 3, 3, 3]\n    elif n == 5:\n        return [1, 3, 3, 3, 3]\n    elif n == 6:\n        return [1, 3, 3, 3, 3, 3]\n    elif n == 7:\n        return [1, 3, 3, 3, 3, 3, 3]\n    elif n == 8:\n        return [1, 3, 3, 3, 3, 3, 3, 3, 3]\n    elif n == 9:\n        return [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3",
        "test": "assert ",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n    return n * digits(n-1)\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if string == '':\n        return True\n    if string[0] == '[':\n        if string[-1] == ']':\n            return is_nested(string[1:-1])\n        else:\n            return False\n    if string[0] == '{':\n        if string[-1] == '}':\n            return is_nested(string[1:-1])\n        else:\n            return False\n    if string[0] == ']':\n        if string[-1] == '[':\n            return is_nested(string[1:-1])\n        else:\n            return False\n    if string[0] == '}':\n        if string[-1] == '{':\n            return is_nested(string[1:-1])\n        else:\n            return False\n    return False\n",
        "test": "assert     is_nested('[{}]') == True",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n",
        "test": "assert     sum_squares([1, 2, 3, 4, -5, 6]) == -10",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return txt[-1] in string.ascii_letters\n",
        "test": "assert     check_if_last_char_is_a_letter(\"hello world\") == False",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    # TODO: Write your code here\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        return arr[0]\n    if arr[0] < arr[1]:\n        return arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            return arr[i]\n    return -1\n",
        "test": "assert     can_arrange
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n    if lst[0] < lst[1]:\n        return (lst[0], lst[1])\n    else:\n        return (lst[1], lst[0])\n",
        "test": "assert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8]) == (-1, -8)",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    elif type(a) == float or type(a) == int:\n        return a if a > b else b\n    elif type(a) == str:\n        return a if a > b else b\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 1) == 1",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even(n // 2)\n    else:\n        return is_equal_to_sum_even(3 * n + 1)\n",
        "test": "assert     is_equal_to_sum_even(0) == False",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    text = text",
        "test": "assert     fix_spaces(\"  hello  world  \") == \"hello-hello-world\"",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[0] == '_':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '..':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '..':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'",
        "test": "assert     file_name_check('abc.txt') == 'No'",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n    return sum\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 210",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    sentence = sentence.split()\n    return \" \".join(sentence)\n",
        "test": "assert     words_in_sentence(\"hello world\") == \"hello world\"",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == 'x':\n        return simplify(x, n[1:])\n    if n[0] == '/':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == '*':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == 'x':\n        return simplify(x, n[1:])\n    if n[0] == '/':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == '*':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == 'x':\n        return simplify(x, n[1:])\n    if n[0] == '/':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == '*':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == 'x':\n        return simplify(x, n[1:])\n    if n[0] == '/':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == '*':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == 'x':\n        return simplify(x, n[1:])\n    if n[0] == '/':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == '*':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == 'x':\n        return simplify(x, n[1:])\n    if n[0] == '/':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n[1:])\n    if n[0] == '*':\n        return simplify(x, n[1:])\n    if n[0] == '+':\n        return simplify(x, n[1:])\n    if n[0] == '-':\n        return simplify(x, n[1:])\n    if n[0] == '^':\n        return simplify(x, n",
        "test": "assert     simplify(\"1/2\", \"4\") == False",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return nums\n",
        "test": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 7",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Write your code here\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15]) == 3",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    a = [1] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return sum(a)\n",
        "test": "assert ",
        "num_ids": 45,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    return ()\n",
        "test": "assert     bf('Uranus', 'Neptune') == ('Uranus', 'Neptune')",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 3,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert     x_or_y(2, 2, 3) == 3",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for i in lst:\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    \n    # your code here\n    \n    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare",
        "num_ids": 2049,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    # TODO: Remove pass and write your code here\n    pass\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheese', 'StuFfed', 'Cheese']) == 'SErviNGSliCes'",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(a)!= len(b):\n        return False\n    if a == b:\n        return True\n    if len(a) == 1:\n        return False\n    if a[0] == b[0]:\n        return cycpattern_check(a[1:], b[1:])\n    else:\n        return cycpattern_check(a[1:], b[1:]) or cycpattern_check(a[1:], b[1:]) or cycpattern_check(a[1:], b[1:])\n",
        "test": "assert     cycpattern_check(\"abcdefg\", \"abcdefg\") == True",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in range(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(0) == (0, 0)",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    roman_numeral = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XI',\n        12: 'XII',\n        13: 'XIII',\n        14: 'XIV',\n        15: 'XV',\n        16: 'XVI',\n        17: 'XVII',\n        18: 'XVIII',\n        19: 'XIX',\n        20: 'XX',\n        30: 'XXI',\n        40: 'XXII',\n        50: 'XXIII',\n        60: 'XXIV',\n        70: 'XXV',\n        80: 'XXVI',\n        90: 'XXVII',\n        100: 'XXVIII',\n        200: 'XXIX',\n        300: 'XXX',\n        400: 'XL',\n        500: 'L',\n        600: 'LX',\n        700: 'LXX',\n        800: 'LXXX',\n        900: 'LXL',\n        1000: 'LXIII',\n        2000: 'LXIV',\n        3000: 'LXV',\n        4000: 'LXVI',\n        5000: 'LXVII',\n        6000: 'LXVIII',\n        7000: 'LXIX',\n        8000: 'LXXI',\n        9000: 'LXXII',\n        10000: 'LXXIII',\n        11000: 'LXXIV',\n        12000: 'LXXV',\n        13000: 'LXXVI',\n        14000: 'LXXVII',\n        15000: 'LXXVIII',\n        16000: 'LXXIX',\n        17000: 'LXXXI',\n        18000: 'LXXXII',\n        19000: 'LXXXIII',\n        20000: 'LXXXIV',\n        30000: 'LXXXV',\n        40000: 'LXXXVI',\n        50000: 'LXXXVII',\n        60000: 'LXXXVIII',\n        70000: 'LXXXIX',\n        80000: 'LXXI',\n        90000: 'LXXII',\n        100000: 'LXXIII',\n        110000: 'LXXIV',\n        120000: 'LXXV',\n        130000: 'LXXVI',\n        140000: 'LXXVII',\n        150000: 'LXXVIII',\n        160000: 'LXXIX',\n        170000: 'LXXXI',\n        180000: 'LXXXII',\n        190000: 'LXXXIII',\n        20000: 'LXXXIV',\n        30000: 'LXXXV',\n        40000: 'LXXXVI',\n        50000: 'LXXXVII',\n        60000: 'LXXXVIII',\n        70000: 'LXXXIX',\n        80000: 'LXXI',\n        90000: 'LXXII',\n        100000: 'LXXIII',\n        110000: 'LXXIV',\n        120000: 'LXXV',\n        130000: 'LXXVI',\n        140000: 'LXXVII',\n        150000: 'LXXVIII',\n        160000: 'LXXIX',\n        170000: 'LXXXI',\n        180000: 'LXXXII',\n        190000: 'LXXXIII',\n        20000: 'LXXXIV',\n        30000: 'LXXXV',\n        40000: 'LXXXVI',\n        50000: 'LXXXVII',\n        60000: 'LXXXVIII',\n        70000: 'LXXXIX',\n        80000: 'LXXI',\n        90000: 'LXXII',\n        100000: 'LXXIII',\n        110000: 'LXXIV',\n        120000: 'LXXV',\n        130000: 'LXXVI',\n        140000: 'LXXVII',\n        150000: 'LXXVIII',\n        160000: 'LXXIX',\n        170000: 'LXXXI',\n        180000: 'LXXXII',\n        190000: 'LXXXIII',\n        20000: 'LXXXIV'",
        "test": "assert     int_to_mini_roman(40) == \"XCIX\"",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a == b and b == c:\n        return True\n    elif a == b or a == c or b == c:\n        return False\n    else:\n        return True\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == True",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"k\"",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if remaining < need:\n        return [need, remaining]\n    else:\n        return [need, remaining - need]\n",
        "test": "assert     eat(1, 1, 0) == [1, 1]",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Implement the algebra operation.\n    # TODO: Return the evaluation of the algebra expression.\n    pass\n",
        "test": "assert     do_algebra([1, 2, 3], [4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not s:\n        return \"\"\n    if len(s) == 1:\n        return s[0].upper() + s[0].lower()\n    else:\n        return solve(s[1:]) + solve(s[0].lower() + s[1:])\n",
        "test": "assert     solve(\"a\") == \"Aa\"",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n",
        "test": "assert     string_to_md5('abc') == 'a3b5c6d8f9'",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [int(x) for x in str(a) + str(b)]\n",
        "test": "assert     generate_integers(10, 10) == [10]",
        "num_ids": 105,
        "indeed": false
    }
]