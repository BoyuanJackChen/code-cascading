[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # check all numbers are between 0 and 1\n    for element in numbers:\n        if element < 0.0 or element > 1.0:\n            return False\n    # find all numbers whose distance is closer to each other\n    # to 0.0\n    # this is an easy way to test if two numbers are closer than given threshold\n    close_elements = [element for element in numbers if abs(element - 0.0) <= threshold]\n    # return whether any two elements are closer than threshold\n    return len(close_elements) > 0\n",
        "test": "assert     has_close_elements([2,4,3], 2) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Initialize the output\n    output = []\n",
        "test": "assert     separate_paren_groups(\"(((()()))((()))(())())()(()())()\") == [\"(((()()))((()))(())()()()(()())()\")]"
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    \n    truncated_number = int(number)\n    return truncated_number\n",
        "test": "assert     truncate_number(1.00) == 1"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if operations[0] == 0:\n        return False\n    elif operations[0] < 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     below_zero([0, 0, 1, 0, 0]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    sum = 0\n    for number in numbers:\n        sum += abs(number - mean(numbers))\n    mean = sum / len(numbers)\n    sum = 0\n    for number in numbers:\n        sum += (number - mean)**2\n    mean = sum / len(numbers)\n    return mean\n",
        "test": "assert         mean_absolute_deviation([2,4,6,8,10,12]) == 9.8"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers))\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # If there is only one group, output it as it is.\n    # If there is more than one group, output the deepest level.\n    if paren_string == '':\n        return [1]\n",
        "test": "assert     parse_nested_parens(\"(()()())\") == [2, 3]"
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    filtered_list = []\n    for string in strings:\n        string = string.lower()\n        if substring.lower() in string.lower():\n            filtered_list.append(string)\n    return filtered_list\n",
        "test": "assert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"a\") == [\"dog\"]"
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    if len(numbers) == 0:\n        return (0, 1)\n",
        "test": "assert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 1, 2, 3, 4]) == (18, 504)"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    max_numbers = []\n    for i in range(len(numbers)):\n        index = i\n        while index >= 0:\n            if numbers[index] > numbers[i]:\n                index -= 1\n            else:\n                break\n        max_numbers.append(numbers[i])\n    return max_numbers\n",
        "test": "assert     isinstance(rolling_max([2,1,3,3]), List) == True"
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    length = len(string)\n    # if the string is already a palindrome, return it\n    if is_palindrome(string) == True:\n        return string\n",
        "test": "assert     is_palindrome(\"bab\") == True"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    x = 0\n    for i in range(len(a)):\n        if a[i] == '0':\n            x ^= 0b111\n        elif a[i] == '1':\n            x ^= 0b11\n        else:\n            raise ValueError('invalid character')\n    for i in range(len(b)):\n        if b[i] == '0':\n            x ^= 0b111\n        elif b[i] == '1':\n            x ^= 0b11\n        else:\n            raise ValueError('invalid character')\n    return '{0:0>32b}'.format(x)[::-1]\n",
        "test": "assert     string_xor(string_xor(\"0101111111\", \"1111111111\"), \"111011\") == \"100000000\""
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    s = 0\n    while a!= 0:\n        s = a % b\n        a = a // b\n    return s\n",
        "test": "assert     greatest_common_divisor(10, 20) == 10"
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    prefixes = []\n    if string.startswith((\"a\", \"b\", \"c\")):\n        prefixes.append(string)\n    else:\n        for i in range(len(string) - 1, 0, -1):\n            if string[:i] not in prefixes:\n                prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n < 0:\n        raise ValueError('string_sequence argument must be non-negative')\n    elif n <= 0:\n        return '0'\n    else:\n        return''.join(str(num) for num in range(n))\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    count = 0\n    for char in string:\n        if char not in {'A', 'Z'}:\n            count += 1\n    return count\n",
        "test": "assert     count_distinct_characters('a') == 1, 'test: count_distinct_characters(test)'"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # TODO\n    return []\n",
        "test": "assert         parse_music(\"o.o|.o.o\") == [0, 0, 0, 0, 0]"
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    # 1. find the first position of the substring.\n    # 2. go through the string and check if substring is in the given substring\n    # 3. if yes, add the count to the count of how many times it appears\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            print(i, string[i:i+len(substring)])\n            return i\n        i += 1\n    return 0",
        "test": "assert     how_many_times('abc', 'bc') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return numbers.split(' ')[::-1]\n",
        "test": "assert     sort_numbers('0 1 9 3 5 7 4 8 9 2') == '0 2 3 4 5 6 7 8 9 9 9 7'"
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return sorted(numbers)[-2], sorted(numbers)[-1]\n",
        "test": "assert     find_closest_elements([5,4,3,2,1]) == (4, 5), \"Closest number is: 4\""
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return [n / max(numbers) for n in numbers]\n",
        "test": "assert     rescale_to_unit(np.array([0, 2])) == [0.0, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, int):\n            new_values.append(value)\n        else:\n            new_values.append(None)\n    return new_values",
        "test": "assert     filter_integers([0,1,2,3,4,5]) == [0,1,2,3,4,5]"
    },
    {
        "number": 23,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n",
        "test": "assert     strlen(\" \")"
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    for i in range(2,n):\n        if n%i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(2) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    assert n > 0\n",
        "test": "assert "
    },
    {
        "number": 26,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    seen = set()\n    removed_numbers = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            removed_numbers.append(num)\n    return removed_numbers\n",
        "test": "assert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"test\") == \"TEST\""
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\""
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n",
        "test": "assert     filter_by_prefix([], \"\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [num for num in l if num>0]\n",
        "test": "assert get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n < 2:\n        return False\n    i = 3\n    while i <= n / 2:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    x = 0\n    for i in range(len(xs)):\n        if (i % 2 == 0):\n            x = xs[i]\n        else:\n            x = xs[i] * xs[i]\n    return x\n",
        "test": "assert     find_zero([1, 0, 2, 0, 2]) == 2.0"
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if len(l) % 3 == 0:\n        return l\n    if l[-1] % 3 == 0:\n        return l\n    else:\n        for i in range(len(l)):\n            if l[i] % 3 == 0:\n                l[i] = l[i] // 3\n            else:\n                l[i] = l[i] % 3\n    return l\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)\n    return max(l)",
        "test": "assert     max_element([-3]) == -3"
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if n%5==0 or n%7==0 or n%11==0:\n        return (n//10)*2\n    elif n%5==1:\n        return n//10\n    elif n%11==1:\n        return n//10+1\n    else:\n        return n//10+3\n",
        "test": "assert     fizz_buzz(11) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    print(l)\n    a = []\n    for i in range(0,len(l),2):\n        a.append(l[i])\n        a.append(l[i+1])\n    print(a)\n    return a\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # remove unnecessary group.\n    groups = [group for group in s.split(encode_cyclic(s)) if len(group) > 1]\n    # if group has more than one element, then group must be a string of length 3.\n    if len(groups) > 1:\n        return \"\".join(groups[1])\n    else:\n        return groups[0]",
        "test": "assert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if n < 0 or n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    left, right = 0, 1\n    if n == 3:\n        return 3\n",
        "test": "assert     prime_fib(2) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    #find three distinct numbers in the list\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([3, 3, 3]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    car_lanes = int(math.log2(n))\n    collision_count = 0\n    for car in range(1, car_lanes+1):\n        if car % 2 == 0:\n            for lane in range(car_lanes):\n                if car - lane == car_lanes:\n                    collision_count += 1\n        else:\n            for lane in range(car_lanes):\n                if car - lane == car_lanes:\n                    collision_count += 1\n    return collision_count\n",
        "test": "assert     car_race_collision(3) == 1"
    },
    {
        "number": 42,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    c = 0\n    for item in l:\n        c += item\n        if c == 0:\n            return True\n        elif c == 1:\n            return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([2, 3, 4, 6, 5, 7]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return format(x, 'b')\n",
        "test": "assert     change_base(0, 1) == '0'"
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return 0.5*(a*a+h*h)\n",
        "test": "assert     triangle_area(5, 5) == 25"
    },
    {
        "number": 46,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(1) == 1"
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return round(sorted(l)[len(l) // 2], 0)\n",
        "test": "assert     median([1, 2, 3]), \"Error: median values not passed\""
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    s = text.lower()\n    return s == s[::-1]",
        "test": "assert     is_palindrome(\"mj\") == False"
    },
    {
        "number": 49,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return pow(n, p-2, p)\n",
        "test": "assert     modp(1,2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'"
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # if input is empty string, return empty string.\n    if not text:\n        return ''\n    # make string immutable and return it.\n    text = str(text)\n    return text.replace(\" \", \"\")\n    \n",
        "test": "assert     remove_vowels('aIsoK') == 'aIsoK'"
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\ndef greater_or_equal_to_threshold(l: list, th):\n    \"\"\"Return True if all numbers in the list l are greater than or equal to th.\n    >>> greater_or_equal_to_threshold([1, 2, 4, 10], 5)\n    True\n    >>> greater_or_equal_to_threshold([1, 20, 4, 10], 100)\n    False\n    \"\"\"\n    for i in l:\n        if i >= th:\n            return False\n    return True\n",
        "test": "assert     below_threshold(l=[5, 1, 2, 6, 7], t=4) is False"
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return x+y\n",
        "test": "assert         add(1, 7) == 8"
    },
    {
        "number": 54,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n    \n",
        "test": "assert     same_chars(\"Aa\", \"Aa\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    for bracket in brackets:\n        if bracket in \"[{}]\":\n            return True\n",
        "test": "assert     correct_bracketing(\"[1]\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return l[:] == sorted(l)[::-1]\n",
        "test": "assert     monotonic([\"a\", \"a\", \"b\", \"b\", \"a\"]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = list(l1_set.intersection(l2_set))\n    return sorted(common)\n",
        "test": "assert     common([1, 2, 3], [1, 3]) == [1, 3]"
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    prime = 2\n    while prime < n:\n        if n % prime == 0:\n            n = n // prime\n        else:\n            prime += 1\n    return prime\n",
        "test": "assert     largest_prime_factor(4) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "test": "assert     sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return all(c in brackets for c in \"()())\")\n",
        "test": "assert     correct_bracketing('(())')"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    xs = [x - 1 for x in xs]\n    xs = [x / 2 for x in xs]\n    return xs\n",
        "test": "assert     derivative([]) == []"
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     (fibfib(0) == 0)"
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    import string\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     (\"e\" in \"hello world\") == True, \"Expected 'e' to be present\""
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    shift_x = shift % len(x)\n    if shift_x > 0:\n        x = x[:-shift_x] + x[-shift_x:]\n    else:\n        x = x[:-shift_x] + x[-shift_x:]\n    return x",
        "test": "assert     circular_shift(123, -2) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return sum(ord(s[i]) - ord(s[i].upper()) for i in range(len(s)))\n",
        "test": "assert         digitSum('A') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    number_of_apples = s.count(\"a\")\n    number_of_oranges = s.count(\"o\")\n    number_of_mango = s.count(\"m\")\n    total_fruits = number_of_apples + number_of_oranges + number_of_mango\n    return total_fruits\n",
        "test": "assert     fruit_distribution('AAB',1) == 0, 'The number of apples are not 1'"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def search(arr, value):\n        if not arr:\n            return []\n        if arr[0] == value:\n            return [arr[0], arr[1]]\n        if arr[0] % 2:\n            index = search(arr[1:] + [arr[0] - value % 2], value)\n            index.append(arr[0])\n            return index\n",
        "test": "assert     pluck([1, 2, 3]) == [1, 2]"
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return max(lst, key=lambda num: num if num >= 0 else -1)\n",
        "test": "assert     search([7]) == 7"
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    \n    # Sort the integers in reverse order\n    lst.sort(reverse=True)\n    \n    # Sort the list in original order\n    return lst[::-1]\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if a == b and b == c:\n        return round(sqrt((b * b) - (a * a)), 2)\n    elif a!= b!= c or b!= c!= a or a!= c!= a:\n        return -1\n    else:\n        return round((b * b) - (a * a), 2)\n",
        "test": "assert     triangle_area(4, 3, 6) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert     will_it_fly(q=[[1,2,3],[4,5,6],[1,2,3]],'w') == True, \"q has to be a palindrome\""
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if not arr:\n        return 0\n    n = len(arr)\n    min_change = float('inf')\n    i = 0\n    while i < n:\n        min_change = min(min_change, arr[i] - arr[i - 1])\n        i += 1\n    return min_change\n",
        "test": "assert "
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    # We have a number of elements and the inner list has all unique characters\n    # and all characters are unique.\n",
        "test": "assert     total_match([\"hey\", \"hallo\", \"that\", \"is\", \"boob\", \"roi\"], "
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return ((a % 1000) > 1) or (a % 100 == 0) or (a % 10 == 0)\n",
        "test": "assert is_multiply_prime(2) == True"
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # ======================================================\n    # COMPLETE THIS PART\n    \n    # ======================================================\n    # Write your code here.\n    # return True if x is a simple power of n and False if x is not simple power\n    return (n**int(str(x)[::-1])) % 10 == 0\n    \n    pass",
        "test": "assert     is_simple_power(18, 0) == True"
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return isinstance(a, int) and (a >= 1 and a <= 180)\n",
        "test": "assert     iscube(3) == True"
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return len([x for x in str(num) if x.isnumeric()])\n",
        "test": "assert     hex_key(1) == 1, \"1 is not a prime number\""
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    \n    # assume the decimal is integer\n    \n    binary_number = \"\"\n    for i in range(len(str(decimal))):\n        #print(i)\n        if i % 2 == 0:\n            binary_number += '0'\n        else:\n            binary_number += '1'\n    \n    return binary_number\n",
        "test": "assert     decimal_to_binary(0) == '0'"
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    s = list(s)\n    n = len(s)\n    for i in range(n - 3):\n        if s[i]!= s[i + 3] and s[i]!= s[i + 2] and s[i]!= s[i + 1] and s[i]!= s[i + 3]:\n            return False\n    return True\n",
        "test": "assert     is_happy('ab') == True"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    numerical_grades = []\n    for grade in grades:\n        if grade > 3.0:\n            numerical_grades.append('D')\n        elif grade > 2.0:\n            numerical_grades.append('B')\n        elif grade > 1.0:\n            numerical_grades.append('C')\n        elif grade > 0.7:\n            numerical_grades.append('D')\n        elif grade > 0.0:\n            numerical_grades.append('E')\n    return numerical_grades\n",
        "test": "assert     (numerical_letter_grade([]) == [])"
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if len(string) <= 1:\n        return False\n    elif string[0] == string[-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     prime_length(\"a\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    result = 0\n    if n < 1:\n        return 0\n    for i in range(1, n + 1):\n        if i % 10 == 1:\n            result += 1\n        if i % 10 == 0:\n            result += 1\n    return result\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    def bin2hex(n):\n        res = ''\n        while n!= 0:\n            res = str(n % 2) + res\n            n //= 2\n        return res\n    def hex2bin(n):\n        res = ''\n        while n!= 0:\n            res = chr(int(res, 2) + 1) + res\n            n //= 16\n        return res\n    def digits(n):\n        return bin2hex(n)[::-1]\n    \n    n = int(N)\n    if n == 0:\n        return '0'\n    \n    result = []\n    for i in range(1, n + 1):\n        result.append(digits(i))\n    \n    result = ''.join(result)\n    \n    return result\n    \n",
        "test": "assert     solve(1) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    lst_copy = lst[:]\n    for i in range(len(lst_copy)//2):\n        if lst_copy[i] % 2!= 0:\n            lst_copy[i], lst_copy[i+1] = lst_copy[i+1], lst_copy[i]\n    return lst_copy\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # your code here\n    pass\n",
        "test": "assert     anti_shuffle(\"one two three four five\") == \"one2three4five\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return [(x, y) for x, y in sorted(zip(lst, range(len(lst))), reverse=True, key=lambda item: item[0] * 100 + item[1]))\n",
        "test": "assert get_row([1,2,3,4], 4) == [(1, 2), (2, 3)]"
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    def sort_list(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = int(len(arr)/2)\n        a = sort_list(arr[:mid])\n        b = sort_list(arr[mid:])\n        return merge(a, b)\n    return sort_list(array)\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    def encrypt_alphabet(s):\n        \"\"\"Create a function encrypt that takes a string as an argument \n        and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters \n        shift down by two multiplied to two places.\n        For example:\n        encrypt('hi') returns 'lm'\n        encrypt('asdfghjkl') returns 'ewhjklnop'\n        encrypt('gf') returns 'kj'\n        encrypt('et') returns 'ix'\n        \"\"\"\n        # STEP 1: get the original string\n        s = s.lower()\n        \n        # STEP 2: create a new string\n        new_s = \"\"\n        \n        # STEP 3: for each character in the original string\n        for char in s:\n            # STEP 4: add it to the new string\n            new_s += char * 2\n        \n        # STEP 5: return the new string\n        return new_s\n    \n    # STEP 6: create an alphabet string\n    new_alphabet = \"\"\n    \n    # STEP 7: create a new string\n    new_string = \"\"\n    \n    # STEP 8: for each character in the original string\n    for char in s:\n        # STEP 9: add it to the new string\n        new_string += encrypt_alphabet(char)\n    \n    # STEP 10: return the new string\n    return new_string\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return sorted(lst)[1]\n",
        "test": "assert     next_smallest([1,5,2,3,4]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    bored_dict = dict()\n    for word in S.split('.'):\n        if word in bored_dict:\n            bored_dict[word] += 1\n        else:\n            bored_dict[word] = 1\n    return len(bored_dict)\n",
        "test": "assert     is_bored('I am happy.')"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = (x+y+z) == int(x+y+z)\n    return result\n",
        "test": "assert     any_int(1, 2, 3) == True, '1'"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    message = message.lower()\n    vowels = set('aeiouAEIOU')\n    message = re.sub('[^A-Za-z0-9]', '', message)\n    \n    i = 0\n    while i < len(message):\n        letter = message[i]\n        if letter.isalpha():\n            if letter in vowels:\n                message = message[:i] + message[i].upper() + message[i+1:]\n            else:\n                message = message[:i] + letter + message[i+1:]\n        i += 1\n        \n    return message\n",
        "test": "assert     encode(message = \"A drum starts with a drum of EADS, but a drum of DIE SAD.\", "
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    # Base case:\n    if len(lst) == 0:\n        return 0\n    \n    # Initialize a new list that will contain the largest prime value\n    # If the length of the list is 0,\n    # return the largest prime value.\n    if len(lst) == 1:\n        return lst[0]\n    \n    # Start at the first element of the list.\n    num = lst[0]\n    \n    # Iterate through the rest of the list.\n    for i in range(1, len(lst)):\n        # If the first element of the list is not a prime,\n        # return the largest prime value.\n        if lst[i] > num:\n            return num\n        \n        # Increment the value of the first element of the list.\n        num = num * lst[i]\n    \n    # If the loop finishes, return the sum of the last element of the list.\n    return num\n    \n",
        "test": "assert skjkasdkd,'skjkasdkd list is empty'"
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return all([type(k).__name__ in [\"str\", \"unicode\"] for k in dict.keys()])\n",
        "test": "assert     check_dict_case({'1':'1'}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    prime_numbers = []\n    for i in range(2,n):\n        if(is_prime(i)):\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    while b!=0:\n        i=b%10\n        b//=10\n        a=a*i\n    return a\n",
        "test": "assert     multiply(2, 3) == 6"
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    # YOUR CODE HERE\n    return round(max(list(map(int,list(map(float,str(value)))))),1)\n    #raise NotImplementedError\n",
        "test": "assert     closest_integer(\"1\") == 1"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    piles = [0, 1, 2]\n    while piles[n] < n:\n        piles.append(piles[n] + n)\n        n = n + 2\n    return piles[:n]\n",
        "test": "assert "
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    words = []\n    for i in s.split(\",\"):\n        for j in i.split():\n            words.append(j.strip(\" \").strip(\"'\").strip('\"').strip(\",\"))\n    return words\n",
        "test": "assert     words_string(\"hello\") == [\"hello\"]"
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if x%2==0:\n        return x\n    else:\n        num = (x+y)\n        if num % 2 == 0:\n            return num\n        else:\n            return -1\n",
        "test": "assert     choose_num(0, 3) == 0"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # Time O(n+m)\n    # Space O(1)\n    # We compute the average of the integers from n through m. \n    # Then return the binary representation of this average.\n    # Time O(n+m)\n    # Space O(1)\n    if n < m:\n        return -1\n",
        "test": "assert     rounded_avg(2,3) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # Get number of digits in each element\n    s = set()\n    for digit in x:\n        s.add(int(str(digit)[0] + str(digit)[1]))\n    # Return list of digits without any odd digits\n    return [digit for digit in s if digit % 2!= 0]",
        "test": "assert     unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def by_index(arr):\n        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [f\"{arr[0]}\"]\n        tmp = arr[::-1]\n        return by_index(tmp)\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    factorial = [1]\n    for i in range(2, n+1):\n        factorial = [factorial[j] * i for j in range(len(factorial))]\n    return factorial\n",
        "test": "assert     f(4) == [24, 12, 6, 4]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    even_odd = []\n    start, end = 1, n\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    count = 0\n    for x in arr:\n        if x > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([1, 2, 3, -1, -2, -3]) == 3, \"Expected 3\""
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    #your code here\n    sorted_list=sorted(arr)\n    for i in range(1,len(arr)):\n        if sorted_list[i]<=sorted_list[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([1,2,3,4,5]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i]%2 == lst2[i]%2:\n                lst2[i] = lst1[i]\n        return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\", 'exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\"'"
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    count = {}\n    for letter in test.lower():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    return count\n",
        "test": "assert     histogram(\"test\") == {'t': 1, 'e': 1, 'a': 1, 't': 1, 'e': 1, 't': 1, 'a': 1, 'e': 1, 'r': 1, 't': 1, 'e': 1, 't': 1, 'a': 1, 't': 1, 'r': 1, 'e': 1, 'w': 2, 't': 1, 'a': 1, 'w': 2}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    def isPalindrome(s):\n        i = 0\n        j = len(s) - 1\n        \n        while i <= j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n    def isPalindrome2(s):\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n    def delete_one_word(s,c):\n        \"\"\"Task\n        We have two strings s and c, you have to delete all the characters in s that are equal to any character in c\n        then check if the result string is palindrome.\n        A string is called palindrome if it reads the same backward as forward.\n        You should return a tuple containing the result string and True/False for the check.\n        Example\n        For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n        For s = \"abcdef\", c = \"b\",  the result should be ('acdef',False)\n        For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n        \"\"\"\n        i = 0\n        j = len(s) - 1\n        result = \"\"\n        while i < j:\n            if s[i] == c:\n                result += s[i]\n                i += 1\n            else:\n                result += s[j]\n                j -= 1\n        if isPalindrome(result):\n            return result,True\n        else:\n            return result,False\n    \n    if len(s) == 0:\n        return \"\",False\n    if c == s[0]:\n        result = s[1:]\n        if isPalindrome(result):\n            return result,True\n        else:\n            return result,False\n    else:\n        result,check = delete_one_word(s,c)\n        if check:\n            return result,True\n        else:\n            return result,False\n    \ndef reverse_solution(s):\n    \"\"\"Task\n    We are given a string s, you have to reverse it forward, backward, forward and backward.\n    The result should be the same as the input string.\n    The input string needs to be given as an array.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", the result should be ('edcba',False)\n    For s = \"abcdef\", the result should be ('cdefed',False)\n    For s = \"abcdedcba\", the result should be ('dedcba',True)\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < len(s):\n        result += s[i]\n        i += 1\n    if len(result) == 0:\n        return \"\",False\n    else:\n        return result,True\n        \ndef substring(s,t):\n    \"\"\"Task\n    We are given two strings s and t, you have to find all the characters in the string s that are not in the string t.\n    You should return a tuple containing the result string and a list of all the characters in the string s that are not in the string t.\n    Example\n    For s = \"abcdef\", t = \"abc\", the result should be ('abcdef',['a','b'])\n    For s = \"abcdef\", t = \"bc\", the result should be ('abcdef',['b','c'])\n    For s = \"abcdef\", t = \"abcdedcba\", the result should be ('abcdef',['d','c'])\n    \"\"\"\n    if len(s) < len(t):\n        return (f\"Not enough characters to substrings of {t}\")\n    elif len(s) > len(t):\n        return (f\"Not enough characters to substrings of {t}\")\n    \n    i = 0\n    j = 0\n    result = []\n    while i < len(s):\n        result.append(s[i])\n        i += 1\n        if s[i] not in t:\n            j += 1\n    if j == len(t):\n        return result,s\n    else:\n        result2 = []\n        i2 = 0\n        while ",
        "test": "assert     reverse_delete('abcd', 'd') == ('abcd', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return [i.replace(i[::2], 'the number of odd elements') for i in lst]\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    # Iterate from the end backwards, to get the minimum subarray\n    # we have to do in O(n)\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    for i in range(len(nums)):\n        left_num = nums[i]\n        left_sum = sum(nums[:i])\n        left_sum_idx = 0\n        for j in range(i, len(nums)):\n            right_num = nums[j]\n            right_sum = sum(nums[j:])\n            right_sum_idx = 0\n            for x in range(j, len(nums)):\n                # Add each value of the current subarray\n                left_sum_idx += min(nums[x-i:x+1])\n                right_sum_idx += min(nums[j-i:j+1])\n            \n            # Update the sum of the current subarray, when we're done adding\n            # values into it\n            left_sum = min(left_sum, right_sum_idx + left_sum)\n        # Update the minimum sum of the subarray\n        left_sum_idx += min(left_sum, right_sum)\n        if left_sum_idx < left_sum:\n            left_sum = left_sum_idx\n    return left_sum\n",
        "test": "assert     minSubArraySum([]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if len(grid) == 0:\n        return 0\n",
        "test": "assert     max_fill(grid = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], capacity = 10) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    arr.sort(reverse = True)\n    for i in arr:\n        if i == 0:\n            continue\n        else:\n            for j in range(count):\n                if i % 2 == 0:\n                    j += 1\n                else:\n                    j -= 1\n        arr[i - 1], arr[count - 1] = arr[count - 1], arr[i - 1]\n    return arr\n",
        "test": "assert     sort_array([0, 0, 0, 1]) == [1, 0, 0, 0]"
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    words = []\n    # Check that the string is non-empty\n    if not s:\n        return words\n    # Check if the string contains letters or spaces\n    for i in range(len(s)):\n        if s[i].isalpha():\n            # Check if the letter is present in the string\n            if s[i].isalpha() and s[i] not in words:\n                words.append(s[i])\n            # Check if the letter is present in the string, but not in the list of words\n            elif s[i].isalpha() and s[i] in words:\n                # Set the value of the counter to zero\n                counter = 0\n                # While the counter is less than the natural number of letters\n                while counter < n:\n                    # If the letter is not present in the string, keep the counter\n                    if s[i].isalpha():\n                        # Increase the counter by one\n                        counter += 1\n                # If the letter is not present, keep the counter\n                    else:\n                        # Increase the counter by one\n                        counter -= 1\n                # If the letter is present, set the counter to the number of the letter in the string\n                if s[i].isalpha():\n                    # Increase the counter by one\n                    counter += 1\n        # Check that the string is not empty\n        elif s[i].isnumeric():\n            # If the string is a number, remove it\n            if s[i].isnumeric():\n                # If the string is a number, remove the number from the string\n                s = s.replace(s[i], \"\")\n    # If the string is empty, return an empty list\n    return words\n",
        "test": "assert     select_words(\"\", 1) == [], \"Selection failed!\""
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    \n    word = word.lower()\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    closest_vowel = ''\n    \n    for i in range(len(word) - 1):\n        if (word[i] in vowels) and (word[i + 1] in vowels):\n            continue\n        if (word[i] in vowels):\n            closest_vowel = closest_vowel + word[i]\n        elif (word[i + 1] in vowels):\n            closest_vowel = closest_vowel + word[i + 1]\n        else:\n            return closest_vowel\n    return closest_vowel\n",
        "test": "assert     get_closest_vowel('greatee') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    def is_balanced(s):\n        balanced = True\n        for c in s:\n            if c not in '()[]{}':\n                balanced = False\n                break\n        return balanced\n    \n    if len(lst) < 2:\n        return 'No'\n    \n    for i in range(len(lst) - 1):\n        if not is_balanced(lst[:i] + lst[i + 1:]):\n            return 'No'\n    \n    return 'Yes'\n",
        "test": "assert     match_parens(['()()', '()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # Your code here\n    return sorted(arr)[-k]\n",
        "test": "assert     maximum([5, 3, 2, 4], 2) == [5, 3]"
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0:\n            odd_sum+=lst[i]\n    return odd_sum\n",
        "test": "assert     solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # NOTE: the number of digits of each element must be smaller than k\n    # TODO: check, if the array has at least two elements\n    # TODO: return the sum of the elements with the kth digits\n    if len(arr) == 0:\n        return 0\n    # NOTE: make sure the array is sorted\n    # TODO: if it is, return a sum of the elements of the sorted array\n    # TODO: if it is not, raise an exception and return zero\n    # TODO: note: if you have a situation where the first element of the array is not the first element of the array, then you have to add the second element of the array\n    # TODO: hint: you can take the min of two elements of the array and return the smaller element\n    # TODO: hint: you can add two elements of the array, return the result of adding the elements of the array\n    \n    # NOTE: this is not elegant, can you figure out how to solve it?\n    # TODO: remember to keep the second element of the array and add the first element of the array\n    # TODO: the number of elements of the array can be shrinked by one element, so it can be much better to sort the array\n    # TODO: you could keep the first element of the array as an index to search the array\n    # TODO: after all the elements, we add the first element to a sum\n    # TODO: return the sum of the elements with the kth digits\n",
        "test": "assert     add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 36"
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    l = [1]\n    while n!= 1:\n        if n % 2 == 0:\n            l.append(3*l[-1])\n            n //= 2\n        else:\n            l.append(5*l[-1])\n            n //= 2\n    return l\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if not date:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date)<1 or int(date)>31:\n        return False\n    if int(date[:2])<=12:\n        return False\n    if int(date[2:])<=30:\n        return False\n    if date[:4]<=12:\n        return False\n    return True\n",
        "test": "assert     valid_date('1-1-2000') == False, \"The given date is not valid!\""
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    txt = txt.replace('\\n','').replace('\\t','')\n    if ',' in txt:\n        txt = txt.split(',')\n        txt = [word for word in txt if word.strip().isalpha()]\n    else:\n        txt = [word.strip().lower() for word in txt.split() if word.strip().isalpha()]\n    return txt\n",
        "test": "assert     split_words('abc') == ['abc']"
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst == lst[::-1]\n",
        "test": "assert     is_sorted([])"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return \"NO\"\n",
        "test": "assert     intersection((1, 2), (2, 4)) == ()"
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    l = []\n    # no return\n    return None\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    if rows < 2: return grid\n    if cols < 2: return grid\n",
        "test": "assert     minPath([[0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]) == [0, 1, 0, 1, 0, 0, 1, 0], \"check failed\""
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    def trib(n):\n        a, b, c = 1, 1, 1\n        if n < 0:\n            return [0]\n        elif n == 0:\n            return [a]\n        elif n == 1:\n            return [a, b]\n        elif n == 2:\n            return [a, b, c]\n        else:\n            for i in range(3, n):\n                a, b, c = b, c, a + b + c\n            return [a, b, c]\n    if n == 0:\n        return []\n    else:\n        return trib(n)\n",
        "test": "assert     tri(4) == tri(4)"
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    s = str(n)\n    num_digits = 0\n    for i in range(len(s)):\n        if i % 2 == 1:\n            num_digits += int(s[i])\n    return num_digits if num_digits % 2 == 1 else 0\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if string == '':\n        return True\n    if string[0] == '[' or string[len(string)-1] == ']':\n        return is_nested(string[1:len(string)-1])\n    else:\n        return False\n",
        "test": "assert     is_nested(\"[[]]\") == True"
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return sum(map(lambda x: x**2, lst))\ndef test():\n    assert sum_squares([1,2,3]) == 14\n    assert sum_squares([1,4,9]) == 98\n    assert sum_squares([1,3,5,7]) == 84\n    assert sum_squares([1.4,4.2,0]) == 29\n    assert sum_squares([-2.4,1,1]) == 6\n    assert sum_squares([-1,0]) == -1\n    assert sum_squares([-1,1,0]) == 0\n    assert sum_squares([0,1,0,1]) == 0\n    assert sum_squares([1]) == 1\n    assert sum_squares([1.4,4.2,0]) == 29.0\n    assert sum_squares([-2.4,1,1]) == 6.0\n    assert sum_squares([-1,0,1,2]) == -3.0\n    assert sum_squares([-1,0,1,2]) == 0.0\n    assert sum_squares([0,1,0,1]) == 0.0\n    assert sum_squares([1,0]) == 0\n    assert sum_squares([1,1,0]) == 1\n    assert sum_squares([1,0,1]) == 1.0\n    assert sum_squares([0,0]) == 0\n    assert sum_squares([0]) == 0\n    assert sum_squares([0.5,0.2,1.4,1.5]) == 0.75\n    assert sum_squares([]) == 0\n    assert sum_squares([1,1]) == 0\n    assert sum_squares([1,1,0,1]) == 1\n    assert sum_squares([1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,0,1]) == 4.0\n    assert sum_squares([1,1,1,1,1,0]) == 9.0\n    assert sum_squares([1.5,0,1,1.5]) == 4.5\n    assert sum_squares([1,1,1,1,1,0,0,1,0,1]) == 5.0\n    assert sum_squares([]) == 0\n    assert sum_squares([1,1,1,1,1,0,0]) == 0\n    assert sum_squares([1,1,1,1,1,1,0,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1",
        "test": "assert     sum_squares(lst) == [5, -8, 0, 0, 0, 0]"
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # Your code here\n    return False if txt[-1] in ['a', 'i', 'o', 'u', 'x'] else True\n",
        "test": "assert     check_if_last_char_is_a_letter('water') == True"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # TODO: Your code here\n    return -1\n",
        "test": "assert     can_arrange([1,2,3,4,5,6]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # Think about why the O(n) algorithm is better.\n    '''\n    if len(lst) == 0:\n        return None, None\n    elif len(lst) == 1:\n        return lst[0], lst[0]\n    else:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] > lst[j] and lst[i] > 0:\n                    return lst[i], lst[j]\n    '''\n",
        "test": "assert     largest_smallest_integers([]) == None"
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if type(a) is str:\n        if type(b) is str:\n            return a\n        return b\n    if type(a) is float or type(a) is complex:\n        return b\n    if type(a) is int or type(a) is long:\n        return b\n    return None\n",
        "test": "assert     compare_one(1, 1) == 1"
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n <= 4:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_equal_to_sum_even(n - 1)\n        else:\n            return False\n",
        "test": "assert     is_equal_to_sum_even(5) == False"
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n <= 0:\n        return 1\n    return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    text_len = len(text)\n    space_count = 0\n    for i in range(text_len):\n        if space_count > 0:\n            if i == 0:\n                text = text[0:i+1] + '-' + text[i+1:]\n            else:\n                text = text[0:i+1] + text[i+1:]\n        else:\n            space_count += 1\n    return text\n    \n    \ndef is_list(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                return False\n        return True\n    return False\n    \n    \ndef is_empty(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) == 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_nth_number(arg, n):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        if n == 0:\n            return len(arg)\n        if len(arg) > n:\n            return get_nth_number(arg[n:], n)\n        if len(arg) == n:\n            return arg[n]\n    return arg\n    \n    \ndef is_iterable(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef is_set(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is set:\n                return True\n        return False\n    return False\n    \n    \ndef is_sequence(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_first_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[0]\n    return arg\n    \n    \ndef get_last_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[-1]\n    return arg\n    \n    \ndef get_first_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.index(l)\n    return arg\n    \n    \ndef get_last_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.inde",
        "test": "assert     fix_spaces('') == '', 'Your code should be passing'"
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    file_name = file_name.strip()\n    if len(file_name) < 3:\n        return 'No'\n    if not file_name.replace('.','').isalpha():\n        return 'No'\n    if file_name.startswith('.'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name.count('.') > 0:\n        return 'No'\n    if file_name.endswith('.'):\n        return 'No'\n    \n    if file_name.startswith('txt'):\n        return 'Yes'\n    if file_name.startswith('exe'):\n        return 'Yes'\n    if file_name.startswith('dll'):\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     file_name_check('1-Mall-1-2021-10-17.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    sums = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sums += i ** 2\n    return sums\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return \" \".join(sentence.split(\" \"))\n",
        "test": "assert     words_in_sentence(\"HELLO WORLD\") == \"HELLO WORLD\""
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    n = float(n)\n    if n.is_integer():\n        if not n:\n            return False\n        if n == 1:\n            return True\n        elif x == '1/1':\n            return True\n        elif n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n    else:\n        if n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n",
        "test": "assert     simplify(1,1) == True"
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    if s % 10!= 0:\n        return sorted(nums)\n    else:\n        return sorted(nums, reverse=True)\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if len(nums) < 1:\n        return 0\n    sum = 0\n    for i in range(0, len(nums)):\n        for j in range(0, len(nums)):\n            if i!= j and nums[i] > nums[j]:\n                sum += 1\n    return sum\n",
        "test": "assert "
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    return len(set(a))\n",
        "test": "assert     get_max_triples(4) == 4"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    name1 = planet1\n    name2 = planet2\n    planet1_orbits = []\n    planet2_orbits = []\n    planet1_orbits.append(name1)\n    planet2_orbits.append(name2)\n    while True:\n        n = len(name1)\n        if n < len(name2):\n            break\n        if name2[n] < name1[n]:\n            name1, name2 = name2, name1[n]\n            name1_orbits = []\n            name2_orbits = []\n            for i in range(n):\n                name1_orbits.append((name1[n-i-1], name1[n-i], name1[n-i-1]+name2[n-i], name1[n-i-1]+name2[n-i], name1[n-i-1]+name2[n-i]-name1[n-i], name1[n-i], name1[n-i-1], name1[n-i-1]+name2[n-i-1], name1[n-i-1]+name2[n-i-1]-name1[n-i-1], name1[n-i-1]+name2[n-i-1]))\n                name2_orbits.append((name2[n-i-1], name2[n-i], name2[n-i-1]+name1[n-i], name2[n-i], name2[n-i-1]+name1[n-i]-name2[n-i], name2[n-i-1]+name1[n-i-1], name2[n-i-1]+name1[n-i-1]-name2[n-i-1], name2[n-i-1]+name1[n-i-1]))\n        elif name1 < name2:\n            name1_orbits.append((name1, name1+name2, name1+name2, name1, name1, name1, name1+name2))\n            name2_orbits.append((name2, name2, name1+name2, name2, name2, name1, name2))\n        else:\n            break\n    planet1_orbits.sort()\n    planet2_orbits.sort()\n    return planet1_orbits, planet2_orbits\ndef cb(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    cb(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    cb(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    cb(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    name1 = planet1\n    name2 = planet2\n    planet1_orbits = []\n    planet2_orbits = []\n    planet1_orbits.append(name1)\n    planet2_orbits.append(name2)\n    while True:\n        n = len(name1)\n        if n < len(name2):\n            break\n        if name2[n] < name1[n]:\n            name1, name2 = name2, name1[n]\n            name1_orbits = []\n            name2_orbits = []\n            for i in range(n):\n                name1_orbits.append((name1[n-i-1], name1[n-i], name1[n-i-1]+name2[n-i], name1[n-i], name1[n-i-1]+name2[n-i], name1[n-i-1]+name2[n-i]-name1[n-i-1], name",
        "test": "assert     bf('Uranus', 'Neptune') == ('Uranus', 'Neptune', 'Mars', 'Saturn', 'Mercury')"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    sort_list = []\n    for word in lst:\n        if len(word)%2 == 0:\n            sort_list.append(word)\n    return sort_lis",
        "test": "assert "
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert         x_or_y(2, 2, 2) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sum([n**2 for n in lst if n%2==1])",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return [abs(guess-score) for guess,score in zip(guess,game)]\n",
        "test": "assert "
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    extensions = [extension.upper() for extension in extensions]\n    if len(extensions) == 0:\n        return class_name\n    max_index = len(extensions) - 1\n    for index in range(len(extensions)):\n        if extensions[index] == extensions[index + 1]:\n            return '{}.{}'.format(class_name, extensions[index])\n        elif extensions[index] > extensions[max_index]:\n            max_index = index\n    return '{}.{}'.format(class_name, extensions[max_index])\n",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    l = len(a)\n    r = len(b)\n    \n    a_len = 0\n    b_len = 0\n    \n    if l>r:\n        return False\n",
        "test": "assert     cycpattern_check('bcgjq', 'zjgq') == False"
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i)%2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n",
        "test": "assert     even_odd_count(10) == (1, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Add 1 for 0-1 digit, just in case the string doesn't start with 0\n    if number == 0:\n        return 'x'\n    # Step 1: number is a positive integer, then go up to 100\n    if number >= 100:\n        # step 2: number is not divisible by 100, then go up to 99\n        if number % 100!= 99:\n            # step 3: number is not divisible by 100, then go up to 99\n            if number % 100 == 99:\n                # step 4: number is divisible by 100 and is not larger than 99, then go up to 99\n                # this is a special case: since we assume the roman numeral is always divisible by 100,\n                # it will not be possible to reach 999 directly, the resultant string will be xi\n                return 'xi' + int_to_mini_roman(number - 100)\n            # step 5: number is divisible by 100, then go up to 99\n            if number % 100 == 99:\n                # step 6: number is divisible by 100 and is not larger than 99, then go up to 99\n                # this is a special case: since we assume the roman numeral is always divisible by 100,\n                # it will not be possible to reach 999 directly, the resultant string will be xi\n                return 'x' + int_to_mini_roman(number - 99)\n        # step 2a: number is divisible by 100, then go up to 99\n        if number % 100 == 99:\n            # step 2b: number is divisible by 100, then go up to 99\n            return 'x' + int_to_mini_roman(number - 99)\n    # step 2: number is not divisible by 100, then go up to 99\n    if number % 100!= 99:\n        # step 2a: number is not divisible by 100, then go up to 99\n        return int_to_mini_roman(number - 100) + 'x'\n    # Step 3: number is divisible by 100 and is not larger than 99, then go up to 99\n    # this is a special case: since we assume the roman numeral is always divisible by 100,\n    # it will not be possible to reach 999 directly, the resultant string will be xi\n    return int_to_mini_roman(number - 99) + 'x'\n",
        "test": "assert     int_to_mini_roman(9) == \"IV\""
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return ((a**2+b**2)**.5 == (c**2+a**2)**.5)\n",
        "test": "assert     right_angle_triangle(5, 6, 7) == False"
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return max(sorted(set(words), key=lambda word:len(word)))\n",
        "test": "assert     find_max([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    remaining -= need\n    \n    if remaining < 0:\n        remaining = 0\n    elif remaining == 0:\n        return [ number, remaining ]\n    elif need < need:\n        remaining = 0\n        need = 0\n    else:\n        remaining = 0\n        need = need\n        \n    # ensure that you have enough remaining carrots\n    if remaining < need:\n        remaining = 0\n    elif remaining == need:\n        remaining = 0\n        need = need - remaining\n        \n    return [ number, remaining ]",
        "test": "assert     eat(5, 2, 4) == [5, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # BASE CASE\n    if operator['*'] == '*':\n        if operand == []:\n            return 0\n        # Case 1:\n        # Sum of both operands is equal to the value of operand\n        if len(operand) == 1:\n            return operand[0]\n        # Case 2:\n        # Sum of both operands is equal to the value of operand multiplied by the number of operands\n        if len(operand) == 2:\n            return operand[0] * operand[1]\n        # Case 3:\n        # Sum of both operands is equal to the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 3:\n            return operand[0] * operand[1] * operand[2]\n        # Case 4:\n        # Sum of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 4:\n            return operand[0] * operand[1] * operand[2] * operand[3]\n    # BASE CASE\n    elif operator['+'] == '+':\n        if operand == []:\n            return 0\n        # Case 1:\n        # Addition of both operands is equal to the value of operand\n        if len(operand) == 1:\n            return operand[0] + operand[0]\n        # Case 2:\n        # Addition of both operands is equal to the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 2:\n            return operand[0] + operand[1]\n        # Case 3:\n        # Addition of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 3:\n            return operand[0] + operand[1] * operand[2]\n        # Case 4:\n        # Addition of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 4:\n            return operand[0] + operand[1] * operand[2] * operand[3]\n    # BASE CASE\n    elif operator['-'] == '-':\n        if operand == []:\n            return 0\n        # Case 1:\n        # Subtraction of both operands is equal to the value of operand\n        if len(operand) == 1:\n            return operand[0] - operand[0]\n        # Case 2:\n        # Subtraction of both operands is equal to the value of operand multiplied by the number of operands\n        if len(operand) == 2:\n            return operand[0] - operand[1]\n        # Case 3:\n        # Subtraction of both operands is equal to the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 3:\n            return operand[0] - operand[1] * operand[2]\n        # Case 4:\n        # Subtraction of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 4:\n            return operand[0] - operand[1] * operand[2] * operand[3]\n",
        "test": "assert     do_algebra("
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == \"\":\n        return solve(s[1:])\n    \n    return solve(s[1:] + s[0].upper() + s[1:])\n",
        "test": "assert     solve('a') == 'a'"
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    import hashlib\n    if not text:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode())\n    return h.hexdigest()\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # if a > b:\n    #     return []\n    #\n    # count = 1\n    # l = []\n    # while count <= b:\n    #     if count % 2 == 0:\n    #         l.append(count)\n    #         count += 1\n    #     else:\n    #         l.append(count)\n    #         count += 1\n    #         # l.append(count)\n    #         # count += 1\n    #\n    # return l\n    return sorted(list(range(a, b+1)))\n",
        "test": "assert     generate_integers(1,5) == [1,2,3,4,5]"
    }
]