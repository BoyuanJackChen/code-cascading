[
    {
        "number": 0,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert not has_close_elements([0.1, 0.9], 0.2)",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    pass\n    # Your code here.\n",
        "test": "assert     separate_paren_groups(\"(hi(hi))\") == [\"(hi\", \"(hi)\"]",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # decimal part of the number\n    decimals = number - math.floor(number)\n    # truncated integer part\n    integer = math.floor(number)\n    return decimals\n",
        "test": "assert     truncate_number(.3) ==.3",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            if balance < 0:\n                return True\n            else:\n                balance += op\n        else:\n            balance += op\n    return balance < 0\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5, 6]) == False",
        "num_ids": 2832,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    assert len(numbers) > 0, \"Cannot calculate Mean Absolute Deviation on an empty list\"\n    m = float(sum(numbers))/len(numbers)\n    return float(sum((abs(x - m) for x in numbers)))/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 0",
        "num_ids": 2140,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    result = []\n    for index, num in enumerate(numbers):\n        if index % 2 == 0:\n            result.append(num)\n        else:\n            result.append(delimeter)\n            result.append(num)\n    return result\n",
        "test": "assert     intersperse([], 1) == []",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    \n    max_nesting = 0\n    nesting_levels = []\n    \n    for paren in paren_string.split(' '):\n        if paren.count('(') == paren.count(')'):\n            nesting_levels.append(paren.count('('))\n            if nesting_levels[-1] > max_nesting:\n                max_nesting = nesting_levels[-1]\n        else:\n            raise Exception(\"Parens do not match\")\n    \n    return nesting_levels\n",
        "test": "assert     parse_nested_parens('(())') == [2]",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"a\", \"ab\", \"ac\"], \"a\") == [\"a\", \"ab\", \"ac\"]",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    sum_numbers, product_numbers = 0, 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    current_max = numbers[0]\n    max_elements = [numbers[0]]\n    for idx in range(1, len(numbers)):\n        current_max = max(current_max, numbers[idx])\n        max_elements.append(current_max)\n    return max_elements\n",
        "test": "assert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    # Find the longest prefix of supplied string that is a palindrome\n    # If there is none, return supplied string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:] + string[:i]\n    return string\n",
        "test": "assert     is_palindrome('mom')",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    # Converting string to list of integers\n    # Using int constructor to convert each character to its ascii value\n    # Using \"^\" operator to perform XOR on each pair\n    return ''.join(format(int(a, 2) ^ int(b, 2), 'b') for a, b in zip(a, b))\n",
        "test": "assert     string_xor('1010101', '1100010') == '0110111'",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    max_len = strings[0]\n    max_len_index = 0\n    for i in range(1, len(strings)):\n        if len(strings[i]) > len(max_len):\n            max_len = strings[i]\n            max_len_index = i\n        elif len(strings[i]) == len(max_len):\n            if strings[i] < max_len:\n                max_len = strings[i]\n                max_len_index = i\n    return max_len\n",
        "test": "assert     longest([\"abc\", \"cba\"]) == \"abc\"",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n",
        "test": "assert     greatest_common_divisor(2, 3) == 1",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('') == []",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return \" \".join([str(x) for x in range(n+1)])\n",
        "test": "assert     string_sequence(1) == '0'",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('PYTHON') == 6",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    total = 0\n    my_list = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            total += 1\n        elif music_string[i] == 'o|':\n            total += 0.5\n        elif music_string[i] == '.|':\n            total += 0.25\n        elif music_string[i] == 'o.':\n            total += 0.25\n        elif music_string[i] == 'o|.':\n            total += 0.125\n        elif music_string[i] == 'o|o':\n            total += 0.0625\n        elif music_string[i] == 'o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o|o|':\n            total += 0.03125\n        my_list.append(total)\n    return my_list\n",
        "test": "assert     parse_music(\"\") == []",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    count = 0\n    if string is None or substring is None:\n        return count\n    if len(substring) == 0:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('aabc', 'abc') == 1",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return \" \".join(sorted(numbers.split(\" \")))\n",
        "test": "assert     sort_numbers(\"\") == \"\"",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n",
        "test": "assert     find_closest_elements([100.1, 101.0, 103.0]) == (100.1, 103.0)",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    assert len(numbers) >= 2\n    rescaled = []\n    max_value = max(numbers)\n    min_value = min(numbers)\n    rescaled = [float(i - min_value) / (max_value - min_value) for i in numbers]\n    return rescaled\n",
        "test": "assert     rescale_to_unit([1.0, 2.0]) == [0.0, 1.0]",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return [num for num in values if isinstance(num, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, \"4\", 5]) == [1, 2, 3, 5]",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    f = []\n    while n % 2 == 0:\n        f.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            f.append(i)\n            n //= i\n    if n > 2:\n        f.append(n)\n    return f\n",
        "test": "assert     factorize(10) == [2,5]",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    i, j = 0, 1\n    while j < len(numbers):\n        if numbers[i] == numbers[j]:\n            j += 1\n        else:\n            i += 1\n            numbers[i] = numbers[j]\n    return numbers[:i + 1]\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    flipped = []\n    for char in string:\n        if char.isupper():\n            flipped.append(char.lower())\n        elif char.islower():\n            flipped.append(char.upper())\n        else:\n            flipped.append(char)\n    return \"\".join(flipped)\n",
        "test": "assert     flip_case(\"a\") == \"A\"",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([])        == \"\"",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"c\") == [\"cat\"]",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     get_positive([])    == []",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2, int(n ** 0.5) + 1):\n            if n % x == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(7) is True",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"Find zero function works only with even number of polynomials.\")\n    # if coeffs[-1] == 0:\n    #     raise ValueError(\"Polynomial has zero as a coefficient.\")\n    for i in range(1, len(xs)):\n        if xs[-i] * xs[-i - 1] < 0:\n            return -xs[-i - 1] / xs[-i]\n    # check for last element, as last element is guaranteed to be non zero\n    if xs[-1] * xs[-1 - 1] < 0:\n        return -xs[-1 - 1] / xs[-1]\n    return None\n",
        "test": "assert     poly([-1, -1], 1) == -1",
        "num_ids": 2474,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    new_list = []\n    for item in l:\n        if item % 3 == 0:\n            new_list.append(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "test": "assert     sort_third([]) == [], \"Incorrect\"",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     [0] == unique([0])",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return str(n).count('7') + str(n).count('7')\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    even = [l[i] for i in range(0, len(l), 2)]\n    odd = [l[i] for i in range(1, len(l), 2)]\n    even.sort()\n    return even + odd\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    groups = [(s[3 * i:3 * i + 3] for i in range(len(s) // 3))]\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"abcabc\") == \"abcabc\"",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_n_minus_1 = 2\n        fib_n_minus_2 = 3\n        for i in range(n-2):\n            fib_n = fib_n_minus_1 + fib_n_minus_2\n            fib_n_minus_2 = fib_n_minus_1\n            fib_n_minus_1 = fib_n\n        return fib_n\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert     triples_sum_to_zero([1, 2, -2, 1, 1, -1]) == True",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    car_arr = [0] * n\n    for i in range(n):\n        car_arr[i] = [[False, 0] for i in range(n)]\n    for i in range(n):\n        car_arr[i][i] = [True, 0]\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] < n:\n                car_arr[i][j][1] += 1\n            if car_arr[j][i][0] and car_arr[j][i][1] < n:\n                car_arr[j][i][1] += 1\n    # check collision\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] > 1:\n                car_arr[i][j][1] -= 2\n    return sum([1 for i in range(n) for j in range(n) if car_arr[i][j][1] > 1])\n",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    # YOUR CODE GOES HERE\n    a = set(l)\n    for i in l:\n        if -i in a:\n            return True\n    return False\n    raise NotImplementedError()\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"list is empty\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    res = \"\"\n    if x == 0:\n        return \"0\"\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res\n",
        "test": "assert     change_base(4, 10) == '4'",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(2, 3)    == 3.0)",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        previous, current = 0, 1\n        for i in range(3, n+1):\n            previous, current = current, previous + current\n        return current\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return (l[m] + l[~m]) / 2\n    \n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    #return is_palin(text[::-1])\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n",
        "test": "assert     is_palindrome(\"\") == True",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp(n-1, p) * p) % p\n    else:\n        return (modp(n/2, p) ** 2) % p\n",
        "test": "assert     modp(0, 11) == 1",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\"",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return all(l <= t for l in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 0) == False",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 1230,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"hello\", \"hellO\") == False",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "test": "assert     fib(1)     == 1",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    bracket_count = 0\n    for i in range(0, len(brackets)):\n        if brackets[i] == '<':\n            bracket_count += 1\n        elif brackets[i] == '>':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    if bracket_count!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert correct_bracketing('<><') == False",
        "num_ids": 2113,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or \\\n           all(l[i] <= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([]) is True, \"Failed: monotonic([]) is True\"",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    l2.sort()\n    i, j = 0, 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            common.append(l1[i])\n            i += 1\n            j += 1\n    return common",
        "test": "assert     common([1, 1, 2, 3, 3], [2, 1, 4, 5]) == [1, 2]",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if n % 2 == 0:\n        return 2\n    else:\n        f = 3\n        while f <= n:\n            if n % f == 0:\n                return f\n            else:\n                f += 2\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\")\")\n        elif bracket == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     not correct_bracketing(\"((()\")",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    result = []\n    for i in range(len(xs) - 1):\n        result.append(xs[i] * i)\n    return result\n",
        "test": "assert ",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    vowels = set('aeiou')\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "test": "assert         vowels_count('a') == 1",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    x, shift = int(x), int(shift)\n    n_digits = x//10 + 1\n    if shift > n_digits:\n        return str(x)[n_digits:][::-1]\n    else:\n        return str(x)[shift:]+str(x)[:shift]\n",
        "test": "assert     circular_shift(12345, 0) == '12345'",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return sum([ord(x)-64 for x in s.upper() if x.isalpha()])\n",
        "test": "assert     digitSum(\"\") == 0, \"test 1\"",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    return s.count('mango') - s.count('apple') - s.count('orange')\n",
        "test": "assert     fruit_distribution('1 2 2', 2) == 0",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return list(filter(lambda x: x % 2 == 0, arr))",
        "test": "assert     [ 2, 0 ] == pluck([ 1, 0, 1, 0, 1 ])",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    '''\n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    pivot = lst[0]\n    \n    #freq = 0\n    freq = lst.count(pivot)\n    \n    if freq == 0:\n        return -1\n    \n    for i in xrange(1, len(lst)):\n        if lst[i] > pivot:\n            freq += 1\n        \n    return pivot if freq > len(lst)/2 else -1\n    '''\n    \n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    pivot = lst[0]\n    \n    #freq = 0\n    freq = lst.count(pivot)\n    \n    if freq == 0:\n        return -1\n    \n    pivotIndex = lst.index(pivot)\n    \n    if pivotIndex > len(lst)/2:\n        return pivot\n    else:\n        return -1\n",
        "test": "assert     search([2, 3, 4, 5, 6]) == -1",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    lst_copy = list(lst)\n    lst_copy.sort()\n    lst_copy.reverse()\n    return lst_copy\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    # Triangle formula\n    # a = b + c\n    # b = a - c\n    # c = a - b\n    # Area =.5 * b * c\n    if a + b < c or a + c < b or b + c < a:\n        return -1\n    return round(.5 * b * c, 2)\n",
        "test": "assert     triangle_area(3, 4, 5) == 10.0",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    a,b,c=0,0,0\n    for i in q:\n        a+=i\n        if a>w:\n            a,b,c=0,0,0\n            break\n    return len(q)>1 and a+b<=w\n",
        "test": "assert     will_it_fly([1,2,3,4], -3) == False,    \"The function should return False\"",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    # compare each element to the next\n    # if there are differences, return the min of the differences\n    diff = []\n    for i, v in enumerate(arr):\n        try:\n            diff.append(abs(v - arr[i + 1]))\n        except IndexError:\n            pass\n    return min(diff)\n",
        "test": "assert     smallest_change([5, 5, 5, 5, 5, 5]) == 0",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    return [i for i in lst1 if len(i) < len(lst2)]\n",
        "test": "assert     total_match(['s', 't', 'r','s'], ['s', 't', 'r','s']) == ['s', 't', 'r','s']",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    for i in range(2, int(a / 2)):\n        if (a % i == 0):\n            return False\n    return True\n",
        "test": "assert     not is_multiply_prime(15)",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if x < n:\n        return False\n    if x % n == 0:\n        return True\n    else:\n        return is_simple_power(x/n, n)",
        "test": "assert     is_simple_power(5, 3) == False",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    \n    if a > 0:\n        return a**3 == int(a**3)\n    else:\n        return a**3 == -int(a**3)\n",
        "test": "assert iscube(1) == True",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    decimal = 0\n    for num in num:\n        num = ord(num)\n        if num in range(65, 91) or num in range(97, 123):\n            if num == 65 or num == 97:\n                decimal += 1\n            else:\n                decimal += 2\n        else:\n            decimal += 1\n    return decimal\n",
        "test": "assert     hex_key('') == 0",
        "num_ids": 2208,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    # return str(bin(decimal).replace(\"0b\", \"\").zfill(8))\n    return \"{0:b}\".format(decimal)\n",
        "test": "assert     decimal_to_binary(0) == \"0\"",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        if len(set(s)) == 1:\n            return True\n        else:\n            return False\n    elif len(s) > 3:\n        if len(set(s[0:3])) == 1 and len(set(s[3:6])) == 1:\n            return is_happy(s[6:])\n        else:\n            return False\n",
        "test": "assert     is_happy(\"\") == False",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'E'}\n    grades = [grade_map[grade] for grade in grades]\n    return grades\n",
        "test": "assert         numerical_letter_grade([]) == []",
        "num_ids": 3131,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "test": "assert     prime_length('short string') == False",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    return sum([1 for i in range(1, n + 1) if (i // 10) % 10 == 1 or (i % 10) == 1])",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    N = str(N)\n    return ''.join(map(str,bin(int(N))[2:]))\n",
        "test": "assert     solve(0) == '0'",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return lst[1::2]\n",
        "test": "assert add([]) == []",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    # use split to separate words, then sort\n    return \" \".join(sorted(s.split()))\n",
        "test": "assert         anti_shuffle(\"\") == \"\"",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    pass\n",
        "test": "assert     [(3, 0), (1, 1), (2, 2), (0, 0)] == get_row([[1, 1, 2], [1, 2, 3], [2, 3, 4]], 1)",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return sorted(array)",
        "test": "assert     sort_array([])    == []",
        "num_ids": 2023,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    rotated = s[1:] + s[0]\n    return rotated\n",
        "test": "assert     encrypt(\"dog\") == \"ogd\"",
        "num_ids": 2201,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n",
        "test": "assert     next_smallest([1, 4, 3, 2, 9, 5, 10, 7]) == 2",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return sum(1 for s in S.split() if s.startswith('I'))",
        "test": "assert     is_bored(\"This is not a sentence.\") == 0",
        "num_ids": 2710,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x):\n        return (x == int(x) and y == int(y) and z == int(z))\n    else:\n        return False\n",
        "test": "assert     any_int(1, 3, 2.1) == False",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    vowels = 'aeiou'\n    translated = ''\n    for i, c in enumerate(message):\n        if c.isalpha() and c.upper() not in vowels:\n            translated += c.upper() if c.islower() else c.lower()\n        elif c.upper() in vowels:\n            vowel = c.upper()\n            translated += vowel[1:] + vowel[0]\n        else:\n            translated += c\n    return translated\n",
        "test": "assert     encode('U D S I N G') == 'u d s i n g'",
        "num_ids": 1987,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    primes = [2,3,5,7]\n    for p in primes:\n        if p in lst:\n            lst.remove(p)\n    \n    # print(lst)\n    \n    r = sum([int(str(n)[0]) for n in lst])\n    # print(r)\n    return r\n",
        "test": "assert     int(\"2\") == 2",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i)!= str:\n            return False\n        if i.isupper():\n            return False\n        if i.islower():\n            pass\n        else:\n            return False\n    return True\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all the strings in the list are in upper case,\n    else return False. The function should return False if the given list is empty.\n    Examples:\n    check_list_case([\"apple\", \"banana\", \"mango\"]) should return True.\n    check_list_case([\"apple\", \"banana\", \"mango\"]) should return False.\n    check_list_case([\"Apple\", \"Banana\", \"Mango\"]) should return False.\n    check_list_case([\"apple\", \"Apple\", \"mango\"]) should return False.\n    check_list_case([\"Apple\", \"Apple\", \"Mango\"]) should return False.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for i in list:\n        if type(i)!= str:\n            return False\n        if i.isupper():\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({'a':'b'}) == True, \"Only string keys are accepted\"",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return [x for x in range(2, n+1) if all(x % y!= 0 for y in range(2, x))]\n",
        "test": "assert     count_up_to(0)     == []",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    a = abs(a)\n    b = abs(b)\n    num = 0\n    while a or b:\n        if a:\n            num += a%10*b\n            a //= 10\n        if b:\n            num += b%10*a\n            b //= 10\n    return num\n",
        "test": "assert     multiply(2, 3) == 6",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0].isupper():\n            return 1\n        else:\n            return 0\n    else:\n        if s[0].isupper():\n            return 1 + count_upper(s[1:])\n        else:\n            return count_upper(s[1:])\n            ",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    import math\n    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"15\") == 15",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n+1) // 2\n        stones.append(n)\n    return stones",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string(\"hello,world,hello,goodbye,world\") == [\"hello\",\"world\",\"hello\",\"goodbye\",\"world\"]",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if x >= y:\n        return -1\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x+1, y)\n    elif x % 2 == 0 and y % 2!= 0:\n        return choose_num(x+1, y)\n    else:\n        return choose_num(x, y-1)\n",
        "test": "assert     choose_num(1, -1) == -1",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return bin(int((m-n+1)*n/2))[2:]",
        "test": "assert     rounded_avg(0, 3) == -1",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    result = []\n    for i in x:\n        if len(str(i)) % 2 == 0:\n            continue\n        else:\n            result.append(i)\n    return sorted(result)\n",
        "test": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    \n    # sort arr\n    arr = sorted(arr)\n",
        "test": "assert     [by_length(range(10, 20)) == ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']]",
        "num_ids": 2389,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    nums = [1] * n\n    for i in range(1, n):\n        nums[i] = nums[i-1] * i\n    return nums\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    evens, odds = 0, 0\n    for x in range(1, n + 1):\n        if str(x) == str(x)[::-1]:\n            if x % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return evens, odds\n",
        "test": "assert     even_odd_palindrome(1) == (0, 1)",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return sum(1 for x in arr if x > 0)\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if not arr:\n        return True\n    N = len(arr)\n    for i in range(N):\n        #check if any permutation of arr[1:N] is sorted\n        perm = arr[1:N]\n        perm.sort()\n        if perm == arr:\n            return True\n        #check if arr[0] is sorted\n        if arr[0] <= arr[i]:\n            return True\n    return False\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 2257,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    \n    count1 = 0\n    count2 = 0\n    for i in lst1:\n        if i%2 == 0:\n            count1 += 1\n    for i in lst2:\n        if i%2 == 0:\n            count2 += 1\n    if count1 == count2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], []) == \"NO\"",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if not test:\n        return {}\n    result = {}\n    test = test.split()\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\n",
        "test": "assert     histogram('a') == {'a':1}",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    result = \"\"\n    for i in s:\n        if i!= c:\n            result = result + i\n    if result[::-1] == result:\n        return (result,True)\n    return (result,False)\n",
        "test": "assert     reverse_delete('a','a') == ('',True)",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    return [len([str(i) for i in range(len(j)) if int(j[i])%2!=0]) for j in lst]\n",
        "test": "assert     odd_count([\"1\"]) == [1]",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    min_sum = nums[0]\n    sum = 0\n    i = 0\n    j = 0\n    while i < len(nums):\n        if sum < 0:\n            sum = nums[i]\n        else:\n            sum += nums[i]\n        min_sum = min(min_sum, sum)\n        i += 1\n    return min_sum\n",
        "test": "assert minSubArraySum([1,2,3]) == 1",
        "num_ids": 2369,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    def dfs(grid, cap, row, col):\n        nonlocal visited\n        if visited[row][col] == -1:\n            return 0\n        if visited[row][col] == 1:\n            return visited[row][col]\n        visited[row][col] = -1\n        # update the capacity\n        new_cap = cap - grid[row][col]\n        if new_cap < 0:\n            return visited[row][col]\n        if row - 1 >= 0:\n            res = dfs(grid, new_cap, row-1, col)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        if row + 1 < len(grid):\n            res = dfs(grid, new_cap, row+1, col)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        if col - 1 >= 0:\n            res = dfs(grid, new_cap, row, col-1)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        if col + 1 < len(grid[0]):\n            res = dfs(grid, new_cap, row, col+1)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        visited[row][col] = 1\n        return visited[row][col]\n    visited = [[-1 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                cap = capacity\n                res += dfs(grid, cap, i, j)\n    return res\n",
        "test": "assert     max_fill([[1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]], 2) == 0",
        "num_ids": 2050,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    ret = []\n    counts = {}\n    for num in arr:\n        bits = bin(num)[2:]\n        count = bits.count('1')\n        if count not in counts:\n            counts[count] = [num]\n        else:\n            counts[count].append(num)\n    for count in sorted(counts.keys()):\n        ret.extend(sorted(counts[count]))\n    return ret\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 3077,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    import re\n    return re.findall(r\"\\w+\", s)\n",
        "test": "assert     select_words(\"\", 1) == []",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    vowels = set('aeiou')\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('code') == 'e'",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')' and len(stack)!= 0:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(')(()))') == 'No'",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    arr = sorted(arr, reverse = True)\n    return arr[:k]\n",
        "test": "assert     maximum([1], 1) == [1]",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2)",
        "test": "assert     [solution([1,2,3,4,5,6]) == 3, solution([1,2,3,4,5,6]) == 6, solution([1,2,3,4,5,6,7,8]) == 5]",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    return result\n",
        "test": "assert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 5 + 4 + 3 + 2 + 1",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n/2) + [n]\n        else:\n            return get_odd_collatz(3*n + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1], \"Error: 1 -> [1]\"",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    months = ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) == 0:\n        return False\n    else:\n        date_split = date.split('-')\n        if len(date_split)!= 3:\n            return False\n        else:\n            if int(date_split[0]) < 1 or int(date_split[0]) > 12:\n                return False\n            if int(date_split[1]) < 1 or int(date_split[1]) > 31:\n                return False\n            if int(date_split[2]) < 1 or int(date_split[2]) > 3000:\n                return False\n            if (int(date_split[0]) == 2 and int(date_split[1]) == 29 and int(date_split[2]) > 0) or (int(date_split[0]) == 4 or int(date_split[0]) == 6 or int(date_split[0]) == 9 or int(date_split[0]) == 11) and int(date_split[1]) < 1 or (int(date_split[0]) == 2 and int(date_split[1]) > 28):\n                return False\n            return True\n",
        "test": "assert     valid_date('12-31-2016') == True",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    txt = txt.lower()\n    for c in \",.!?':;(){}[]-_+= \":\n        txt = txt.replace(c, \" \")\n    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world']",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert         is_sorted([1])",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return \"NO\"\n",
        "test": "assert     intersection((1, 3), (4, 5)) == \"NO\"",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    # arr = list(arr)\n    # arr = list(filter(lambda x: x!= 0, arr))\n    # if len(arr) == 0:\n    #     return None\n    # arr = list(map(lambda x: int(x), arr))\n    # arr = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    # return sum(list(map(lambda x: x * arr.count(x), [1, -1, 0])))\n",
        "test": "assert     prod_signs([]) == None, \"should return None for empty arr\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    if k >= n * m:\n        return None\n",
        "test": "assert     minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1,2,3,4]",
        "num_ids": 2621,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    ans = [1, 1, 1]\n    if n == 0:\n        return ans\n    elif n == 1:\n        return ans\n    else:\n        for i in range(n-2):\n            ans.append(ans[i] + ans[i+1] + ans[i+2])\n    return ans\n",
        "test": "assert     tri(2) == 2",
        "num_ids": 3004,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "test": "assert     digits(1) == 1",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    stack = []\n    open_bracket = ['[', '(', '{']\n    closed_bracket = [']', ')', '}']\n    for char in string:\n        if char in open_bracket:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if char == closed_bracket[open_bracket.index(stack[len(stack)-1])]:\n                    stack.pop()\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_nested('([]{}') == False",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return sum(x**2 for x in lst)\n    \n",
        "test": "assert     sum_squares([0,0]) == 0",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    # method:\n    return not txt[:-1].isalnum() and txt[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter('aabc!') == False",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([2, 5, 6, 8, 9]) == -1",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    max_int = None\n    min_int = None\n    for l in lst:\n        if l < 0:\n            if max_int is None or l > max_int:\n                max_int = l\n        else:\n            if min_int is None or l < min_int:\n                min_int = l\n    return (max_int, min_int)\n",
        "test": "assert     [largest_smallest_integers([-3, -2, -1, 1, 2, 3]) == (-1, 3)]",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if isinstance(a, str) or isinstance(b, str):\n        if float(a) > float(b):\n            return b\n        else:\n            return a\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     compare_one(1.1, 1.0) == 1.1,    '1.1'",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if n < 0:\n        return False\n    if n % 2!= 0:\n        return False\n    return sum([i for i in range(1, n, 2)]) == n\n",
        "test": "assert     not is_equal_to_sum_even(11)",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    text = text.strip()\n    text = text.replace(\" \",\"_\")\n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "test": "assert     fix_spaces(\"Hello\") == \"Hello\"",
        "num_ids": 1876,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    if file_name[0].isalpha() and file_name[1]!= \".\" and (len(file_name) > 3 and file_name[2].isdigit() and file_name[3]!= \".\"):\n        if file_name.count(\".\") == 1 and file_name.split(\".\")[1] in [\"txt\", \"exe\", \"dll\"]:\n            return \"Yes\"\n    return \"No\"\n",
        "test": "assert     file_name_check('asd.1') == 'No', \"file_name_check('asd.1') should be No\"",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    new_lst = [1 if (i%3 == 0) and (i%4!= 0) else i**2 for i in lst]\n    return sum(new_lst)\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    return \"\".join(\n        [word for word in sentence.split(\" \") if len(word) > 0 and is_prime(len(word))]\n    )\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    return eval(str(x)+\"/\"+str(n)) == int(eval(str(x)+\"/\"+str(n)))\n",
        "test": "assert     simplify(\"1/2\", \"1/3\") == False",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    if not nums:\n        return nums\n    sorted_nums = []\n    for i in range(len(nums)):\n        sorted_nums.append([nums[i], i])\n    sorted_nums.sort()\n    return [sorted_nums[i][0] for i in range(len(nums))]\n",
        "test": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return len([n for n in nums if n > 10 and n % 10!= 1 and n % 10!= 3 and n % 10!= 5 and n % 10!= 7 and n % 10!= 9])\n",
        "test": "assert     specialFilter([6, 4, 7, 1, 3, 5, 9, 10]) == 0",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    res = 0\n    a = [i*i - i + 1 for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j] + a[j]) % 3 == 0:\n                res += 1\n    return res\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    # YOUR CODE HERE\n    if planet1 == \"Mercury\":\n        planet1 = 'Sun'\n    if planet2 == \"Mercury\":\n        planet2 = 'Sun'\n    if planet1 == \"Venus\":\n        planet1 = 'Sun'\n    if planet2 == \"Venus\":\n        planet2 = 'Sun'\n    if planet1 == \"Earth\":\n        planet1 = 'Sun'\n    if planet2 == \"Earth\":\n        planet2 = 'Sun'\n    if planet1 == \"Jupiter\":\n        planet1 = 'Saturn'\n    if planet2 == \"Jupiter\":\n        planet2 = 'Saturn'\n    if planet1 == \"Saturn\":\n        planet1 = 'Uranus'\n    if planet2 == \"Saturn\":\n        planet2 = 'Uranus'\n    if planet1 == \"Uranus\":\n        planet1 = 'Neptune'\n    if planet2 == \"Uranus\":\n        planet2 = 'Neptune'\n    if planet1 == \"Neptune\":\n        planet1 = 'Pluto'\n    if planet2 == \"Neptune\":\n        planet2 = 'Pluto'\n    planets = (planet1, planet2)\n    return planets\n",
        "test": "assert     bf('mercury','venus') == ('mercury','venus')",
        "num_ids": 2924,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return sorted(lst, key=len)",
        "test": "assert     sorted_list_sum(['Python', 'Python', 'Python']) == ['Python', 'Python', 'Python']",
        "num_ids": 2141,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if n == 2 or n == 3:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(1, 1, 2) == 1",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    # Convert to set and remove negative numbers\n    lst = set(lst)\n    lst.difference_update([-1, -2])\n    \n    # Square and sum\n    return sum(x**2 for x in lst)\n",
        "test": "assert     double_the_difference([]) == 0, \"Should be 0\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    diff = [0]*len(guess)\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(guess[i]-game[i])\n    return diff\n",
        "test": "assert     compare([9,8,7,6,5,4,3,2,1,0],[9,8,7,6,5,4,3,2,1,0]) == [0,0,0,0,0,0,0,0,0,0]",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if len(extensions) == 1:\n        return class_name + \".\" + extensions[0]\n    elif len(extensions) == 0:\n        return class_name + \".None\"\n    else:\n        strengths = {}\n        for extension in extensions:\n            uppercase = 0\n            lowercase = 0\n            for letter in extension:\n                if letter.isupper():\n                    uppercase += 1\n                elif letter.islower():\n                    lowercase += 1\n            strengths[extension] = (uppercase - lowercase) / len(extension)\n        strongest = max(strengths.keys(), key = strengths.get)\n        return class_name + \".\" + strongest\n",
        "test": "assert     Strongest_Extension('Bananas', ['AbCDefG', 'abcdefg', 'xyz', 'Slices']) == 'Bananas.AbCDefG', 'Wrong'",
        "num_ids": 2396,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return bool(len(a) >= len(b)) and any(b in a for a in (b, a[::-1]))\n",
        "test": "assert     cycpattern_check('a', 'a') == True",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    return len(str(abs(num))[::2]), len(str(abs(num))[1::2])\n",
        "test": "assert     even_odd_count(21) == (1, 1)",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    assert 1 <= number <= 1000, 'Integers 1-1000 only'\n    output = ''\n    # Convert to string\n    while number:\n        if number >= 1000:\n            output += 'M'\n            number -= 1000\n        elif number >= 900:\n            output += 'CM'\n            number -= 900\n        elif number >= 500:\n            output += 'D'\n            number -= 500\n        elif number >= 400:\n            output += 'CD'\n            number -= 400\n        elif number >= 100:\n            output += 'C'\n            number -= 100\n        elif number >= 90:\n            output += 'XC'\n            number -= 90\n        elif number >= 50:\n            output += 'L'\n            number -= 50\n        elif number >= 40:\n            output += 'XL'\n            number -= 40\n        elif number >= 10:\n            output += 'X'\n            number -= 10\n        elif number >= 9:\n            output += 'IX'\n            number -= 9\n        elif number >= 5:\n            output += 'V'\n            number -= 5\n        elif number >= 4:\n            output += 'IV'\n            number -= 4\n        elif number >= 1:\n            output += 'I'\n            number -= 1\n    return output.lower()\n",
        "test": "assert     int_to_mini_roman( 1 )         ==    'i'",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if a == b == c:\n        return True\n    if c**2 == a**2 + b**2:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True, \"Failed the right_angle_triangle test\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    return sorted(words, key=lambda x: len(set(x)))[-1]\n",
        "test": "assert     find_max(['abc', 'abc', 'abc', 'abc', 'abc']) == 'abc'",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    number = min(remaining, need)\n    remaining -= number\n    return [number, remaining]\n",
        "test": "assert     eat(0, 0, 0) == [0,0]",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    return 0\n",
        "test": "assert     do_algebra([ \"*\", \"-\" ], [ 2, 2 ]) == 0",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    res = \"\"\n    for c in s:\n        if c.isalpha():\n            res += c.lower() if c.isupper() else c.upper()\n        else:\n            res += c\n    return res",
        "test": "assert     solve('asdf') == 'ASDF'",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if text is None or text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return [n for n in range(a, b + 1) if n % 2 == 0]",
        "test": "assert     generate_integers(1, 2) == [2]",
        "num_ids": 560,
        "indeed": false
    }
]