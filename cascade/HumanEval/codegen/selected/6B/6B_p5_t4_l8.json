[
    {
        "number": 0,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert not has_close_elements([1, 2, 3], 0.01)",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    parsed_parens = []\n    i = 0\n    while i < len(paren_string):\n        paren_str = \"\"\n        open_count = 0\n        for j in range(i, len(paren_string)):\n            char = paren_string[j]\n            if char == \"(\":\n                open_count += 1\n            elif char == \")\":\n                if open_count == 0:\n                    break\n                else:\n                    open_count -= 1\n            paren_str += char\n        if open_count > 0:\n            raise ValueError(\"Paren groups are not balanced\")\n        i += len(paren_str) + 1\n        parsed_parens.append(paren_str)\n    return parsed_parens\n",
        "test": "assert     separate_paren_groups(\"a(b(c(d)e))\") == [\"a(b(c(d)e))\"]",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    integer, decimals = math.modf(number)\n    return decimals\n",
        "test": "assert     truncate_number(1.1) == 1.0",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,1]) == False",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    # Get mean of the list.\n    mean = sum(numbers) / len(numbers)\n    # Initialize MAD to a very large value\n    mad = float('inf')\n    # For each element of the list\n    for element in numbers:\n        # Calculate MAD for the current element\n        mad = min(abs(element - mean), mad)\n    return mad\n",
        "test": "assert     0.25000 == mean_absolute_deviation([-1, 0, 1, 1])",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    if not numbers:\n        return numbers\n    elif len(numbers) == 1:\n        return [delimeter] + numbers\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3]",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    nest_level = []\n",
        "test": "assert     parse_nested_parens('((()())(()(()()))())') == [6, 5, 4, 3]",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     []    == filter_by_substring(['apple', 'banana', 'orange'], 'z')",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    product = 1\n    sum = 0\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    result = []\n    for i, n in enumerate(numbers):\n        if i == 0:\n            result.append(n)\n        elif n > result[-1]:\n            result.append(n)\n        else:\n            result.append(result[-1])\n    return result\n",
        "test": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not string:\n        return string\n    prefix = ''\n    postfix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[0:i]):\n            prefix = string[0:i]\n            break\n    for i in range(len(string), len(string), -1):\n        if is_palindrome(string[0:i]):\n            postfix = string[0:i]\n            break\n    return prefix + postfix[::-1]",
        "test": "assert     is_palindrome('abcba')",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n",
        "test": "assert     string_xor('10', '11') == '01'",
        "num_ids": 1584,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) is None",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return b if a == 0 else greatest_common_divisor(b % a, a)\n",
        "test": "assert     greatest_common_divisor(0, 2) == 2",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result\n",
        "test": "assert     all_prefixes(\"cat\") == ['c', 'ca', 'cat']",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert     string_sequence(5) == '012345'",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('a') == 1",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    # Your code here\n    return [len(x) for x in music_string.split(' ')]\n",
        "test": "assert     parse_music('oo|') == [1,1,2,3]",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('hello', 'l') == 2",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 1672,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    numbers.sort()\n    n1 = numbers[0]\n    n2 = numbers[1]\n    diff = abs(n1 - n2)\n    for i in range(2, len(numbers)):\n        n = numbers[i]\n        tmp = abs(n1 - n)\n        if tmp < diff:\n            diff = tmp\n            n1 = n2\n            n2 = n\n    return n1, n2\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    rescaled = []\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_ = max_num - min_num\n    if range_ < 1e-10:\n        range_ = 1.0\n    for n in numbers:\n        rescaled.append((n - min_num) / range_)\n    return rescaled\n",
        "test": "assert     rescale_to_unit([0, 1]) == [0, 1]",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "test": "assert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 'a', 4, 5])",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"a\") == 1",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if n % 2 == 0:\n        return [2] * (n // 2)\n    factor = 3\n    factors = []\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n = n // factor\n            if n % factor == 0:\n                factors.append(factor)\n        else:\n            factor += 2\n    return factors\n",
        "test": "assert     [11] == factorize(11)",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    new_list = []\n    for x in numbers:\n        if x not in new_list:\n            new_list.append(x)\n    return new_list\n",
        "test": "assert     remove_duplicates([1, 1, 2]) == [1, 2]",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    upper_to_lower = string.maketrans(\n        str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                      \"abcdefghijklmnopqrstuvwxyz\"))\n    lower_to_upper = string.maketrans(\n        str.maketrans(\"abcdefghijklmnopqrstuvwxyz\",\n                      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    return string.translate(upper_to_lower).translate(lower_to_upper)\n",
        "test": "assert         flip_case('abc') == 'ABC'",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate(['Hello', 'World']) == 'HelloWorld'",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['abc', 'abd', 'abcde'], 'abc') == ['abc', 'abcde']",
        "num_ids": 1741,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([1,2,-3,4,-5]) == [1,2,4]",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    #The second test is redundant, but just to be sure...\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return all(n % i for i in range(2, n))\n",
        "test": "assert     (is_prime(2) == True)",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    s = 0\n    x = 0\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        elif coeff < 0:\n            return None\n        else:\n            s += coeff * x\n            x += 1\n    return s / x\n",
        "test": "assert     poly([1, 0, 1, -1], 1) == 1",
        "num_ids": 1747,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    new_list = []\n    for index in range(len(l)):\n        if index % 3!= 0:\n            new_list.append(l[index])\n        else:\n            new_list.append(l[index])\n    return new_list\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1,1,2,2,3,3,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "test": "assert     max_element([1]) == 1",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    times = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            times += 1\n    return times\n",
        "test": "assert     fizz_buzz(19) == 2",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    # l_odd = [l[i] for i in range(0, len(l), 2)]\n    # l_even = [l[i] for i in range(1, len(l), 2)]\n    # l_even = [l[i] for i in range(len(l))]\n    # l_even = [l[i] for i in range(1, len(l), 2)]\n    # l_even = [l[i] for i in range(len(l))]\n    # l_even = [l[i] for i in range(len(l))]\n    # l_even = [l[i] for i in range(len(l))]\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    # l_odd = [l[i] for i in range(len(l)) if i % 2!= 0]\n    # l_odd.sort()\n    return l_even\n",
        "test": "assert     sort_even([1]) == [1]",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    # decode each group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"ABB\") == \"BBA\"",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    fib = [2, 3]\n    while fib[-1] < n:\n        next_fib = fib[-1] + fib[-2]\n        while not is_prime(next_fib):\n            next_fib += 1\n        fib.append(next_fib)\n    return fib[-1]\n",
        "test": "assert     prime_fib(1) == 3",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    set_1 = set(l)\n    for i in range(len(l) - 2):\n        if -1 * l[i] in set_1:\n            return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    \n    return 0",
        "test": "assert     car_race_collision(4) == 0",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [a+1 for a in l]\n",
        "test": "assert     incr_list([1, 2, 3])    ==    [2, 3, 4]",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    d = {}\n    for n in l:\n        if n not in d:\n            d[n] = 1\n        else:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert     change_base(101, 10)         == '101', \"Check the correctness of the change_base()\"",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(4, 3) == 6",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return b\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        return (sorted_list[length // 2] + sorted_list[length // 2 - 1]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    # will be slow if text is larger than 100 characters\n    # to check the whole string, use slicing\n    if len(text) <= 1:\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False\n",
        "test": "assert     is_palindrome(\"abba\") == True",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return pow(n, p-2, p)\n",
        "test": "assert     modp(3, p=2) == 1",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"a\") == \"f\"",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    vowels = set(list('aeiouAEIOU'))\n    newText = ''\n    for char in text:\n        if char in vowels:\n            newText += char\n    return newText\n",
        "test": "assert     remove_vowels(\"\") ==     \"\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return all(num < t for num in l)\n",
        "test": "assert     type(below_threshold([], 1)) is bool",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return x + y\n",
        "test": "assert     add(5, 3) == 8, \"5 + 3 = 8\"",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    return True\n",
        "test": "assert     same_chars('aa', 'aa') == True",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    bracket_pairs = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\",\n    }\n    stack = []\n    for b in brackets:\n        if b in bracket_pairs:\n            stack.append(b)\n        elif len(stack) == 0 or bracket_pairs[stack.pop()]!= b:\n            return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing('<()>)') == False",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return all(x < y or x > y for x, y in zip(l[:-1], l[1:]))\n",
        "test": "assert     monotonic([1,2,3,4]) == True",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    s = s1 & s2\n    return sorted(s)\n",
        "test": "assert     common(['a', 'b', 'c'], ['d']) == []",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n",
        "test": "assert     sum_to_n(10)         == 55",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     correct_bracketing(\"()\") is True",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    derivatives = [0 for _ in xs]\n    # the code below this line is the same as the code in the book\n    # derivatives[1:] = xs[1:];\n    # derivatives[0] = 1;\n    # for i in range(len(derivatives)):\n    #     for j in range(i + 1, len(derivatives)):\n    #         derivatives[j] = derivatives[j] + xs[i] * derivatives[j - 1]\n    for i in range(1, len(xs)):\n        derivatives[i] = xs[i] * i\n    return derivatives\n",
        "test": "assert     derivative([1, 2, 3]) == [0, 2, 6]",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    vowel_count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u', 'y']:\n            vowel_count += 1\n    return vowel_count\n",
        "test": "assert     vowels_count(\"Sai\") == 2",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    \n    if shift > len(str(x)):\n        shift = shift % len(str(x))\n    \n    x = str(x)\n    return x[-shift:] + x[:-shift]\n",
        "test": "assert     circular_shift(1234567890, 0) == '1234567890'",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return sum(ord(c) for c in s if ord(c) < 128)\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if n < 0 or n % 2!= 0:\n        return \"Your input is not valid!\"\n    total_orange = int(n / 2)\n    total_apple = n - total_orange\n    return n - (total_apple + total_orange)\n",
        "test": "assert         fruit_distribution('orange', 0)     == 0",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not arr:\n        return []\n    arr.sort()\n    first = arr[0]\n    if first % 2 == 0:\n        return [first, arr.index(first)]\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                return [arr[i], arr.index(arr[i])]\n        return []\n",
        "test": "assert     pluck([])     == []",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    # T: O(n), S: O(1)\n    sorted_lst = sorted(lst)\n    for i, num in enumerate(sorted_lst):\n        if i == len(sorted_lst) - 1:\n            return -1\n        if num > 0 and sorted_lst[i+1] > 0 and num >= sorted_lst[i+1]:\n            return num\n",
        "test": "assert     search([0]) == -1",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    res = []\n    for i in range(len(lst)):\n        res.append(min(lst))\n        lst.remove(min(lst))\n    return res\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    a, b, c = sorted([a, b, c])\n    \n    # any two sides can be the hypotenuse\n    if a ** 2 + b ** 2 == c ** 2:\n        return \"%.2f\" % ((a * b) / 2)\n    return -1\n",
        "test": "assert     triangle_area(5,5,5) == 50, \"5,5,5 should be 50\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "test": "assert     will_it_fly([], 10) is True",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    count = 0\n",
        "test": "assert     smallest_change([3, 3]) == 0",
        "num_ids": 1835,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    if len(lst1) < len(lst2):\n        return [x for x in lst1 if len(x) < len(lst2)]\n    else:\n        return [x for x in lst2 if len(x) < len(lst1)]\n",
        "test": "assert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    count = 0\n    for i in range(2, 101):\n        if a % i == 0:\n            count += 1\n            if count > 3:\n                return False\n    return True\n",
        "test": "assert     is_multiply_prime(24) == False",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n == 1:\n        return x == 1\n    return is_simple_power(n, x // n) if x % n == 0 else False\n",
        "test": "assert     not is_simple_power(7, 3)",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return a == a**3\n",
        "test": "assert ico == iscube(64)",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    # your code here\n    import string\n    import math\n    digit_dict = {\"2\":\"abc\", \"3\":\"def\", \"4\":\"ghi\", \"5\":\"jkl\", \"6\":\"mno\", \n    \"7\":\"pqrs\", \"8\":\"tuv\", \"9\":\"wxyz\", \"A\":\"abc\", \"B\":\"def\", \"C\":\"ghi\", \"D\":\"jkl\",\n    \"E\":\"mno\", \"F\":\"pqrs\", \"0\":\"tuv\", \"1\":\"wxyz\"}\n    if len(num) == 0:\n        return 0\n    num_count = 0\n    for c in num:\n        if c not in string.ascii_uppercase:\n            continue\n        else:\n            num_count += 1\n    if num_count % 2 == 0:\n        return int(math.ceil(num_count / 2))\n    else:\n        return int(math.ceil((num_count + 1) / 2))\n",
        "test": "assert     hex_key('123456') ==     0",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    res = []\n    while decimal > 0:\n        if decimal % 2 == 0:\n            res.append(\"0\")\n        else:\n            res.append(\"1\")\n        decimal = decimal // 2\n    return ''.join(reversed(res))\n",
        "test": "assert     decimal_to_binary(8) == \"1000\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    l = len(s)\n    if l<3:\n        return False\n    else:\n        count = 0\n        for i in range(l):\n            if count > 0 and i < l-1 and s[i]==s[i+1]:\n                count += 1\n            else:\n                count = 0\n        return count == 0\n",
        "test": "assert     is_happy('abcd')",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    grades = [float(x) for x in grades]\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades[i] = 'A+'\n        elif grades[i] >= 3.7:\n            grades[i] = 'A'\n        elif grades[i] >= 3.3:\n            grades[i] = 'A-'\n        elif grades[i] >= 3.0:\n            grades[i] = 'B+'\n        elif grades[i] >= 2.7:\n            grades[i] = 'B'\n        elif grades[i] >= 2.3:\n            grades[i] = 'B-'\n        elif grades[i] >= 2.0:\n            grades[i] = 'C+'\n        elif grades[i] >= 1.7:\n            grades[i] = 'C'\n        elif grades[i] >= 1.3:\n            grades[i] = 'C-'\n        elif grades[i] >= 1.0:\n            grades[i] = 'D+'\n        elif grades[i] >= 0.7:\n            grades[i] = 'D'\n        elif grades[i] >= 0.0:\n            grades[i] = 'D-'\n        else:\n            grades[i] = 'F'\n    return grades\n",
        "test": "assert     numerical_letter_grade([]) == [], \"Your function is not correct!\"",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    \"\"\"return True if len(string) is prime else False\"\"\"\n    \"\"\"if len(string) == 1:\n        return False\n    else:\n        if len(string) % 2 == 0:\n            return prime_length(string[1:])\n        else:\n            return prime_length(string[1:]) or prime_length(string[:len(string)-1])\"\"\"\n    if len(string) == 1:\n        return False\n    else:\n        if len(string) % 2 == 0:\n            return prime_length(string[1:])\n        else:\n            return prime_length(string[1:]) or prime_length(string[:len(string)-1])\n",
        "test": "assert     prime_length('foo0') == False,'should be False'",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    # I will never use the \"count_digits\" function,\n    # because it is the inverse of the function itself\n    # (it just counts the number of digits).\n    count = 0\n    for i in range(n+1):\n        if i!= 0 and (i < 10 or i > 99):\n            if i % 10 == 1:\n                count += 1\n            if i % 10 == 0:\n                count += 1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    # return bin(N)\n    return str(bin(N))[2:]",
        "test": "assert     solve(10) == \"1010\"",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return sum(lst[::2])\n",
        "test": "assert         add([2, 6]) == 2",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    row_x = []\n    for row in lst:\n        for i, y in enumerate(row):\n            if y == x:\n                row_x.append((lst.index(row), i))\n    row_x.sort(key = lambda x: x[0])\n    row_x.sort(key = lambda x: x[1])\n    return row_x\n",
        "test": "assert     get_row(",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return sorted(array, reverse=bool(sum(array) % 2))",
        "test": "assert     sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    # append zeros\n    while len(s) < 2:\n        s += '0'\n    # get first two characters\n    first_two = s[0:2]\n    # get last two characters\n    last_two = s[-2:]\n    # get third letter\n    third = s[2]\n    # string to return\n    ret = first_two[1] + third + last_two\n    return ret\n",
        "test": "assert     encrypt('z') == 'ab'",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    # first try sorting the list\n    if lst!= []:\n        lst = sorted(lst)\n        return lst[1]\n    else:\n        return None\n",
        "test": "assert     next_smallest([1, 3, 2, 4]) == 2",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return len([w for w in S.split(\".\") if w == \"I\"])",
        "test": "assert     is_bored(\"Hello I am a lovely girl\") == 0",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return (x==y+z) and (type(x)==int) and (type(y)==int) and (type(z)==int)\n    pass\n",
        "test": "assert     any_int(7, 2, 2) == False",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    #vowels = 'AEIOU'\n    #vowels2 = 'AEIOU'\n    vowels = 'AEIOU'\n    vowels2 = 'AEIOU'\n    swap = lambda x,y: x if x in vowels else y\n    swap2 = lambda x,y: x if x in vowels2 else y\n    lst = []\n    \n    for char in message:\n        if char in vowels:\n            lst.append(swap(char, vowels2[(vowels2.index(char)+2)%5]))\n        else:\n            lst.append(char)\n    return ''.join(lst)\n",
        "test": "assert     encode(\"Abc\") == \"Abc\"",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    res = 0\n    def check_prime(n):\n        if n == 2 or n == 3: return True\n        if n < 2 or n % 2 == 0: return False\n        if n < 9: return True\n        if n % 3 == 0: return False\n        for i in range(5,int(n**0.5)+1,6):\n            if n % i == 0:\n                return False\n        return True\n    for i in lst:\n        temp = str(i)\n        for j in temp:\n            res += int(j)\n    return res\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(dict) == 0:\n        return False\n    return all(isinstance(i,str) for i in dict.keys()) and all(isinstance(i,str) for i in dict.values())\n",
        "test": "assert     check_dict_case({}) == False",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if n < 1:\n        return []\n    array = [2]\n    for i in range(3,n):\n        prime = True\n        for j in array:\n            if j > i:\n                break\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            array.append(i)\n    return array\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    product = 0\n    a = abs(a)\n    b = abs(b)\n    for i in range(a):\n        product = product + b\n    return product\n",
        "test": "assert     multiply(2, 3) == 6",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert     count_upper('12345') == 0",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    value = float(value)\n    rounded = round(value)\n    difference = abs(value - rounded)\n    if rounded > value:\n        return rounded if difference < difference else rounded - 1\n    return rounded if difference < difference else rounded + 1\n",
        "test": "assert     (closest_integer(\"14.5\") == 15)",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    res = [n]\n    while n > 1:\n        if n % 2 == 0:\n            res.append(n // 2)\n            n = n // 2\n        else:\n            res.append(n // 2 + 1)\n            n = n // 2 + 1\n    return res\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    result = []\n    list_string = s.split(\",\")\n    for word in list_string:\n        result.append(word.strip())\n    return result\n",
        "test": "assert     words_string('abc,def,ghi') == ['abc', 'def', 'ghi'], 'incorrect'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return -1\n",
        "test": "assert     (choose_num(10, 10) == -1)",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    if m == n:\n        return '0b1'\n    if m < n:\n        return -1\n    return \"{0:b}\".format(round((n + m) / 2)).zfill(m - n + 1)\n",
        "test": "assert     rounded_avg(3, 4) == -1",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return sorted(set(x))\n    \n    \n",
        "test": "assert     unique_digits([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    return ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n",
        "test": "assert     by_length([9,8,7,6,5,4,3,2,1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Nine']",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    assert(type(n) is int)\n    factorials = [1]\n    for i in range(1,n):\n        factorials.append(i*factorials[-1])\n    return factorials\n",
        "test": "assert         f(1)         == [1]",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if int(str(i)[::-1]) == i:\n            result.append(i)\n    return len(result), len(result) - sum(map(lambda x: x % 2, result))\n",
        "test": "assert         even_odd_palindrome(0) == (0, 0)",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    count = 0\n    for num in arr:\n        num_digits = len(str(abs(num)))\n        if num_digits > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([1,2,3,4,5,6,7,8,9,10]) == 10",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    elif N == 1:\n        return arr[0] < arr[1]\n    # since arr is guaranteed to be non-empty, we know that arr[0] is always smaller\n    # than any element in arr[1:N]\n    smallest = arr[0]\n    for i in range(1, N):\n        if arr[i] < smallest:\n            smallest = arr[i]\n        else:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([3,2,1]) == True, \"Wrong Output\"",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    # Your code here\n    lst1 = [i for i in lst1 if i%2 == 0]\n    lst2 = [i for i in lst2 if i%2 == 0]\n    return \"YES\" if len(lst1) == len(lst2) else \"NO\"",
        "test": "assert     exchange([2,4,6,8], [2,4,6,8]) == \"YES\"",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    d = {}\n    for c in test.split():\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    return d\n    \ndef is_valid_word(word, hand, word_list):\n    \"\"\"\n    Returns True if word is in the word_list and is entirely\n    composed of letters in the hand. Otherwise, returns False.\n    Does not mutate hand or word_list.\n    \n    word: string\n    hand: dictionary (string -> int)\n    word_list: list of lowercase strings\n    returns: boolean\n    \"\"\"\n    count = histogram(word)\n    for key in count:\n        if count[key] > hand.get(key, 0):\n            return False\n    return word in word_list\n",
        "test": "assert     histogram('b') == {'b': 1}",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    return result, result[::-1] == result\n",
        "test": "assert     reverse_delete('hannah', 'hannah') == ('', True)",
        "num_ids": 1561,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return [len(i) - sum(int(j)%2 for j in i) for i in lst]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    sums = [0] * len(nums)\n    for i in range(len(nums)):\n        if sums[i-1] < 0:\n            sums[i] = nums[i]\n        else:\n            sums[i] = sums[i-1] + nums[i]\n    return min(sums)\n",
        "test": "assert     minSubArraySum([5,7,1,2,3,1,1,1]) == 5",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    rows, cols = len(grid), len(grid[0])\n    buckets = [[0 for j in range(cols)] for i in range(rows)]\n",
        "test": "assert     max_fill( [[0,0,0,1,0,0], ",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    sort_order = {\n        'count': lambda elem: bin(elem).count('1'),\n        'decimal': lambda elem: elem\n    }\n    return sorted(arr, key=sort_order['decimal'])\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1930,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    if not s:\n        return []\n    s = s.split()\n    l = []\n    for word in s:\n        if len(word) <= n and sum([1 for c in word if c not in \"aeiouAEIOU\"]) == n:\n            l.append(word)\n    return l\n",
        "test": "assert     select_words(\"\", 2) == []",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    vowels = {\n        'a':0,\n        'e':1,\n        'i':2,\n        'o':3,\n        'u':4\n    }\n    vowel_count = 0\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_count += 1\n        else:\n            break\n    return word[vowel_count]\n",
        "test": "assert     get_closest_vowel(\"APPEAR\") == \"A\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append('(')\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n",
        "test": "assert     match_parens('(()') == 'No'",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if k == 0:\n        return []\n    elif k >= len(arr):\n        return sorted(arr)\n    else:\n        max_index = -1\n        max_val = -float('inf')\n        for i in xrange(len(arr)):\n            if arr[i] > max_val:\n                max_index = i\n                max_val = arr[i]\n        res = [max_val] * k\n        for i in xrange(k):\n            res[i] = arr[max_index]\n            arr.pop(max_index)\n            max_index = -1\n            max_val = -float('inf')\n            for j in xrange(len(arr)):\n                if arr[j] > max_val:\n                    max_index = j\n                    max_val = arr[j]\n        return res\n",
        "test": "assert     maximum([], 0)        == []",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                total += lst[i]\n    return total",
        "test": "assert     solution([1, 2, 3, 4, 5]) == 0",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return sum([num for num in arr[:k] if len(str(num)) <= 2])\n",
        "test": "assert     add_elements([2,1,3,4,5],5) == 15",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    odd_collatz = []\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_collatz.append(i)\n    return sorted(odd_collatz)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    valid_days = []\n    valid_months = ['01', '03', '05', '07', '08', '10', '12']\n    valid_years = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n    valid_dates = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    month_index = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    # First check that the number of days is not less than 1 or higher than 31 days\n    if len(valid_days) > 31:\n        return False\n    elif len(valid_days) < 1:\n        return False\n    # Second check that the number of days is not less than 1 or higher than 30 days\n    elif month == 2 and len(valid_days) > 29:\n        return False\n    # Third check that the number of days is not less than 1 or higher than 29 days\n    elif len(valid_days) < 1:\n        return False\n    # Fourth check that the month should not be less than 1 or higher than 12\n    elif len(valid_months) < 1:\n        return False\n    # Fifth check that the date should be in the format: mm-dd-yyyy\n    elif len(date) > 10 or len(date) < 6:\n        return False\n    # Sixth check that the date is in the format: mm-dd-yyyy\n    elif len(valid_dates) > 10 or len(valid_dates) < 6:\n        return False\n    # Seventh check that the date is in the format: mm/dd/yyyy\n    elif len(valid_years) < 1:\n        return False\n    elif valid_days[0] < 1:\n        return False\n    elif valid_days[0] > 31:\n        return False\n    # Eighth check that the date is in the format: mm/dd/yyyy\n    elif valid_months[month - 1] < 1:\n        return False\n    elif valid_months[month - 1] > 12:\n        return False\n    elif valid_years[year - 1] < 1:\n        return False\n    elif valid_years[year - 1] > 31:\n        return False\n    else:\n        return True\n",
        "test": "assert     valid_date(\"01-02-3\") is False",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words(\"The rain in Spain\") == [\"The\", \"rain\", \"in\", \"Spain\"]",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     (is_sorted([5,4,3,1,2])            == False)",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    if (interval1[1] <= interval2[0]) or (interval2[1] <= interval1[0]):\n        return \"NO\"\n    if (interval1[1] >= interval2[0]) and (interval1[1] <= interval2[1]):\n        return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == 'YES'",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        if i < 0:\n            result *= -1\n        elif i > 0:\n            result *= 1\n    return result\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    N = len(grid)\n    if k == 0:\n        return []\n    if k == 1:\n        return grid[0]\n    if k == 2:\n        return grid[0] + grid[1]\n    \n    def neighbors(x, y, N):\n        for dx, dy in zip((0, 1, 0, -1), (-1, 0, 1, 0)):\n            if 0 <= x + dx < N and 0 <= y + dy < N:\n                yield (x + dx, y + dy)\n    \n    def min_path_value(grid, i, j, k, visited):\n        if k == 1:\n            return grid[i][j]\n        if (i, j, k) in visited:\n            return visited[(i, j, k)]\n        if i == j == 0:\n            visited[(i, j, k)] = min_path_value(grid, i, j, k - 1, visited)\n            return visited[(i, j, k)]\n        visited[(i, j, k)] = min(min_path_value(grid, i, j, k - 1, visited),\n                                 min_path_value(grid, i - 1, j, k - 1, visited) + grid[i - 1][j],\n                                 min_path_value(grid, i, j - 1, k - 1, visited) + grid[i][j - 1])\n        return visited[(i, j, k)]\n    \n    path_values = []\n    for i in range(N):\n        for j in range(N):\n            path_values.append(min_path_value(grid, i, j, k, {}))\n    return path_values\n",
        "test": "assert     [1, 2, 3, 4, 5, 6] == minPath([[1,2,3],[4,5,6]], 2)",
        "num_ids": 2117,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    def trib(n):\n        \"\"\"Tribonacci sequence is a Tribonacci number with 3 numbers, so it's defined \n        by 3 numbers, we have to return the list of first n + 1 numbers of the Tribonacci sequence.\n        \"\"\"\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        else:\n            current = [1, 1, 1]\n            for i in range(3, n + 1):\n                current.append(current[-1] + current[-2] + current[-3])\n            return current\n    return trib(n)\n",
        "test": "assert     7 == tri(6)",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if n < 10:\n        return n\n    else:\n        return (n % 10) * digits(n // 10)\n",
        "test": "assert     digits(1) == 1",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    result = False\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            if depth == 0:\n                return False\n            else:\n                depth -= 1\n    if depth == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_nested(\"[()]\") == True",
        "num_ids": 1852,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return sum([int(math.ceil(x))**2 for x in lst])\n",
        "test": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == 55",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha() and txt[-1] not in \"\":\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('Hello World![]')     == False",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    arr.sort()\n    index = -1\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            index = i\n    if index == -1:\n        return -1\n    return index + 1\n",
        "test": "assert     can_arrange([1,1,1,1]) == -1",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if len(lst) == 0:\n        return None, None\n    elif lst[0] > lst[-1]:\n        return lst[0], lst[-1]\n    else:\n        return lst[-1], lst[0]\n",
        "test": "assert     (largest_smallest_integers([]) == (None, None))",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if a < b:\n        return b\n    elif a > b:\n        return a\n    else:\n        return None\n",
        "test": "assert     compare_one(2.0, 1) == 2",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    sum_of_evens = 0\n    for i in range(1, n):\n        if i % 2 == 0 and n-i in range(1, n):\n            sum_of_evens += i\n    return n == sum_of_evens\n",
        "test": "assert     is_equal_to_sum_even(15) == False",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    text = text.replace(' ', '_')\n    if len(text) > 0 and text[0] == '_' and text[1]!= '_':\n        text = text.replace('__', '-')\n    if len(text) > 0 and text[-1] == '_' and text[-2]!= '_':\n        text = text.replace('_', '')\n    return text\n",
        "test": "assert     fix_spaces(\"\") == \"\"",
        "num_ids": 2780,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    import re\n    import os\n    pattern = re.compile(r'(^[a-zA-Z].*)|(\\.$)|(^$)')\n    if pattern.match(file_name):\n        if not re.search(r'\\d', file_name):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('abc.123') == 'No'",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    res = 0\n    for i in lst:\n        if i % 4 == 0 and i % 3!= 0:\n            res += i**2\n        elif i % 4!= 0 and i % 3 == 0:\n            res += i**3\n        else:\n            res += i\n    return res\n",
        "test": "assert     sum_squares([3, 10, 25, 26, 40, 41, 42, 50, 60, 70, 80, 85, 92, 99, 100, 105]) == 5081",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    ret = \"\"\n    for word in sentence.split():\n        ret += word\n        if len(ret) > 1:\n            for i in range(2, len(ret)):\n                if not is_prime(len(ret) / i):\n                    ret = ret[:len(ret) - i]\n                    break\n    return ret\n",
        "test": "assert     words_in_sentence(\"a\") == \"a\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    try:\n        return True if x.split('/')[1] == n and int(x.split('/')[0]) % int(n) == 0 else False\n    except IndexError:\n        return False\n",
        "test": "assert not simplify(\"3/10\", \"1\")",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return sorted(nums, key=lambda x: sum(int(d) for d in str(abs(x))))\n",
        "test": "assert     order_by_points([0,0,0,0]) == [0, 0, 0, 0]",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0] > 10 and nums[0] % 2 == 1 else 0\n    \n    total = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n            total += 1\n    return total",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0",
        "num_ids": 2393,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    a = [0] * n\n    count = 0\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    '''\n    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    pl1, pl2 = planet1, planet2\n    try:\n        pl1 = planets.index(planet1)\n        pl2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    pl1, pl2 = pl1, pl2\n    if pl1 < pl2:\n        return tuple(planets[i] for i in range(pl1 + 1, pl2))\n    else:\n        return tuple(planets[i] for i in range(pl2 + 1, pl1))\n    '''\n    planets = {'Mercury': 0, 'Venus': 1, 'Earth': 2, 'Mars': 3, 'Jupiter': 4, 'Saturn': 5, 'Uranus': 6, 'Neptune': 7}\n    pl1, pl2 = planets[planet1], planets[planet2]\n    if pl1 < pl2:\n        return tuple(planets[i] for i in planets if i in range(pl1 + 1, pl2))\n    else:\n        return tuple(planets[i] for i in planets if i in range(pl2 + 1, pl1))\n",
        "test": "assert     bf('Venus', 'Mars') == ()",
        "num_ids": 2676,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    def list_sort(lst):\n        def helper(lst):\n            if not lst:\n                return lst\n            elif len(lst) == 1:\n                return lst\n            elif len(lst[0]) % 2 == 0:\n                return helper(lst[1:]) + [lst[0]]\n            elif len(lst[-1]) % 2 == 0:\n                return [lst[-1]] + helper(lst[:-1])\n            else:\n                return helper(lst[1:]) + [lst[0]]\n        return helper(lst)\n    return list_sort(lst)\n",
        "test": "assert     sorted_list_sum(['python', 'python', 'python', 'python']) == ['python', 'python', 'python', 'python']",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x",
        "test": "assert     x_or_y(7, 3, 4) == 3",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return sum([x*x for x in lst if x > 0 and isinstance(x, int)])\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return [abs(x-y) if x==y else x-y for x,y in zip(game,guess)]\n",
        "test": "assert     compare([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 153,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    import re\n    import itertools\n    strength_map = {x:len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)) for x in extensions}\n    return '{0}.{1}'.format(class_name, sorted(strength_map.items(), key = lambda x: (-x[1], x[0]))[0][0])\n    \ndef count_digits(number):\n    \"\"\"Return the number of digits of the given number.\n    For example: count_digits(5) == 1 and count_digits(12) == 2.\"\"\"\n    return len(str(number))\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if b in a:\n        return True\n    for i in range(1,len(a)):\n        if b in a[i:]:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('abc', 'abcdef') == False",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    even = 0\n    odd = 0\n    num = abs(num)\n    while num:\n        digit = num % 10\n        if digit % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return (even, odd)\n",
        "test": "assert     even_odd_count( 0 )    == ( 0, 0 )",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError\n    numerals = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    result = ''\n    for key, value in numerals.items():\n        result += value * (number // key)\n        number %= key\n    return result.lower()\n",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return math.sqrt(a*a + b*b) == c\n",
        "test": "assert     right_angle_triangle(7, 8, 10) == False",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    \"\"\"\n    res = []\n    for word in words:\n        res.append(max(set(word), key=word.count))\n    return res.index(max(res, key=len))\n    \"\"\"\n    return max(words, key=len)\n",
        "test": "assert     find_max(['word', 'word', 'word']) == 'word'",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if number >= need:\n        return [need, remaining - need]\n    elif number <= 0:\n        return [number, 0]\n    else:\n        return [number, remaining - number]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    result = 0\n    return result\n",
        "test": "assert ",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return ''.join(reversed(s.upper()))\n",
        "test": "assert     solve(\"Civic\") == \"CIVIC\"",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    integers = []\n    for i in range(a, b):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers",
        "test": "assert     generate_integers(0, 1) == [0]",
        "num_ids": 999,
        "indeed": false
    }
]