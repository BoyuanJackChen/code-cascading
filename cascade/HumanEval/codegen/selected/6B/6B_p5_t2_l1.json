[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    sorted_numbers = sorted(numbers)\n    for index, number in enumerate(sorted_numbers[:-1]):\n        if abs(number - sorted_numbers[index + 1]) < threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([2, 3, 4, 5], 1.5) is True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    paren_groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        c = paren_string[i]\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                i += 1\n                continue\n            stack.pop()\n        else:\n            i += 1\n        if len(stack) == 0:\n            paren_groups.append(paren_string[:i])\n            paren_string = paren_string[i:]\n            i = 0\n    if len(stack)!= 0:\n        return ''.join(paren_groups)\n    return paren_string\n",
        "test": "assert     separate_paren_groups(\"{{}{}\") == [\"{{}\", \"{}\"]"
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    integer, decimals = math.modf(number)\n    return decimals\n",
        "test": "assert     truncate_number(17.8)    == 17"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # TODO: Complete this function\n    return sum(operations) < 0\n",
        "test": "assert     below_zero([1, 0, 1, 1, 1, -3, 1, 1, -1]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    import numpy as np\n    return np.mean(np.absolute(numbers - np.mean(numbers)))\n",
        "test": "assert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9]) == 2.5"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert     intersperse(numbers=[], delimeter=2) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    max_depth = 0\n    paren_depth = 0\n    max_depth_at_depth = 0\n    nested_parens = []\n",
        "test": "assert     parse_nested_parens(\"(()(()))\") == [1, 1, 1]"
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     len(filter_by_substring([\"Hello world\"], \"Hello\")) == 1"
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n",
        "test": "assert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[0:i]):\n            return string[0:i] + string[0:i][::-1]\n",
        "test": "assert     make_palindrome('tacocat') == 'tacocat'"
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    assert len(a) == len(b)\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    longest_str = None\n    max_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            longest_str = string\n            max_len = len(string)\n    return longest_str\n",
        "test": "assert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"RS\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\""
    },
    {
        "number": 13,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(6, 8) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "assert     all_prefixes(\"de\") == [\"d\", \"de\"]"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n",
        "test": "assert     string_sequence(1)    == \"0 \""
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"ababcd\") == 4"
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = []\n    num_bars = 0\n    bars = []\n    for char in music_string:\n        if char == 'o':\n            num_bars += 1\n        elif char == 'o|':\n            if num_bars > 0:\n                bars.append(num_bars)\n                num_bars = 0\n        elif char == '.':\n            num_bars +=.5\n        elif char == '|':\n            num_bars += 1\n    bars.append(num_bars)\n    return bars\n",
        "test": "assert     parse_music('o|') == [2]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('abcabcabc', 'abc') == 3"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    low_to_high = {'zero': 'zero', 'one': 'one', 'two': 'two', 'three': 'three', 'four': 'four',\n                   'five': 'five','six':'six','seven':'seven', 'eight': 'eight', 'nine': 'nine'}\n    low_to_high_sorted = {}\n    for key, value in low_to_high.items():\n        low_to_high_sorted[value] = key\n",
        "test": "assert     sort_numbers('zero one two three four five six seven eight nine') == '9876543210'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n",
        "test": "assert     find_closest_elements([2, 3, 4, 10, 40, 70, 80]) == (40, 70)"
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [i - minimum for i in numbers]\n",
        "test": "assert     rescale_to_unit([1]) == [0.0]"
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([1,2,3]) == [1,2,3]"
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('peter') == len('peter')"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return int(n / 2)\n",
        "test": "assert     largest_divisor(2) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n < 2:\n        return []\n    i, factors = 2, []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate([\"cat\", \"dog\", \"fish\"]) == \"catdogfish\""
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\") == [\"hello\"]"
    },
    {
        "number": 30,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1, -2, 0, 3, 4, -5]) == [1, 3, 4]"
    },
    {
        "number": 31,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(18) == False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    n = len(xs)\n    if n % 2!= 0 or xs[n // 2] == 0:\n        return None\n    # n is even\n    m = n // 2\n    lhs = poly(xs[:m], xs[m])\n    rhs = poly(xs[m:], xs[m])\n    return xs[m - 1] - (lhs / rhs)\n",
        "test": "assert     poly([1, 1, 1, 1, 1], 2) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    new = []\n    for x in l:\n        if x%3 == 0:\n            new.append(x)\n    for x in l:\n        if x%3!= 0:\n            new.append(x)\n    new.sort()\n    return new",
        "test": "assert     sort_third([2,2,2,2,2]) == [2, 2, 2, 2, 2], \"failed test 2\""
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return list(sorted(set(l)))\n",
        "test": "assert     unique([1, 1, 1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    m = l[0]\n    for i in l[1:]:\n        if i > m:\n            m = i\n    return m\n",
        "test": "assert     max_element([1,2,3,4]) == 4"
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    pass\n    return 0\n",
        "test": "assert     fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    length = len(l)\n    sort = []\n    for i in range(length):\n        if i % 2 == 0:\n            sort.append(l[i])\n        else:\n            sort.append(l[i])\n    sort.sort()\n    return sort\n",
        "test": "assert     sort_even([2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2]"
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[0] + group[-1] + group[1:-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"AB\") == \"AB\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    fib1 = 1\n    fib2 = 1\n    if n == 1:\n        return 2\n    else:\n        for i in range(n - 1):\n            fib1, fib2 = fib2, fib1 + fib2\n        # print(fib2)\n        if is_prime(fib2):\n            return fib2\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Your code here\n    if len(l) < 3:\n        return False\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -4, -4, 7]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-2)\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1]) == [2]"
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[-item] = item\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,-2,-1])"
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert     change_base(0, 10) == '0'"
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(2, 3) == 3"
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # Return median of l if l is length 1, otherwise median of two elements\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0]+l[1])/2\n    # Determine number of elements to sort\n    n = len(l)\n    # Sort l and choose median\n    l.sort()\n    m = n//2\n    if n % 2 == 1:\n        return l[m]\n    else:\n        return (l[m]+l[m-1])/2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abba') == True, 'Example'"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    # Use peasant multiplication\n    r = 1\n    while n > 0:\n        if n % 2 == 1:\n            r = (r * n) % p\n        n //= 2\n    return r\n",
        "test": "assert     modp(0, 255) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"i\") == \"if\""
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    \n    vowels = set('aeiou')\n    new_text = ''.join(i for i in text if i not in vowels)\n    return new_text\n",
        "test": "assert     remove_vowels(\"banana\") == \"bnn\""
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return t not in l\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5, 6], 5) == False"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return s0 == s1\n",
        "test": "assert     same_chars('a', 'a') == True"
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"<\":\n                return False\n            stack.pop()\n    return True\n",
        "test": "assert     correct_bracketing(\"\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    #initialize local variables\n    n = len(l)\n    #if list is empty or only contains one element, return true\n    if n == 0:\n        return True\n    #initialize local variables\n    elif n == 1:\n        return True\n    #if list is even and all elements are equal, return true\n    elif n % 2 == 0 and l[0] == l[n-1]:\n        return True\n    #if list is even and all elements are increasing, return true\n    elif n % 2 == 0 and l[0] < l[n-1]:\n        return True\n    #if list is even and all elements are decreasing, return true\n    elif n % 2 == 0 and l[0] > l[n-1]:\n        return True\n    #if list is odd and all elements are equal, return true\n    elif n % 2 == 1 and l[0] == l[n-1]:\n        return True\n    #if list is odd and all elements are increasing, return true\n    elif n % 2 == 1 and l[0] < l[n-1]:\n        return True\n    #if list is odd and all elements are decreasing, return true\n    elif n % 2 == 1 and l[0] > l[n-1]:\n        return True\n    #otherwise, return false\n    else:\n        return False\n",
        "test": "assert     monotonic([]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']"
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_prime_factor(5) == 5"
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    assert type(n) == int and n >= 0, \"n must be a positive integer\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    b_list = brackets.strip().split(\"()\")\n    return (len(b_list) == 1) or (brackets.count(\"(\") == brackets.count(\")\"))\n",
        "test": "assert     correct_bracketing(\"(())\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    assert isinstance(xs, list)\n    assert len(xs) > 0, \"Coefficients can't be empty.\"\n    assert len(xs) == len(set(xs)), \"Duplicate coefficients are forbidden.\"\n    for x in xs:\n        assert x >= 0, \"Coefficients must be >= 0.\"\n    if len(xs) == 1:\n        return [0]\n    if len(xs) == 2:\n        return [xs[1]]\n    else:\n        return [xs[i] for i in range(1, len(xs))]\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count + 1 if s[-1] in 'y' else count\n",
        "test": "assert     vowels_count('susan') == 2"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    x = str(x)\n    length = len(x)\n    if shift > length:\n        return x[length-1::-1]\n    else:\n        return x[shift:length] + x[0:shift]\n",
        "test": "assert     circular_shift(100, 3) == \"210\""
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return sum(ord(c) - ord('A') for c in s.upper() if c.isupper())\n",
        "test": "assert     digitSum('abcdef') == 15"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    total=n\n    for i in s.split(\" \"):\n        total-=int(i)\n    return total\n",
        "test": "assert     fruit_distribution(\"apples, 2, apples, 3, apples, 4, orange, 3, oranges, 6\", 11) == 1"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    smallest_index = -1\n    smallest_even_value = float(\"inf\")\n",
        "test": "assert     [4, 1] == pluck([2, 3, 4, 1])"
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    value = 1\n    while value < len(lst):\n        if lst.count(value) >= value:\n            return value\n        value += 1\n    return -1\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([5,3,1,2,4]) == [1,2,3,4,5], \"Fail Test 2\""
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    #\n    # Your code here\n    #\n    #\n    return -1\n",
        "test": "assert     triangle_area(5, 2, 3) == -1.0"
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "test": "assert     will_it_fly( [1, 2, 3, 4], 10) == False"
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    num_changes = 0\n    for i in range(len(arr)//2):\n        if arr[i]!= arr[len(arr)-i-1]:\n            num_changes += 1\n    return num_changes\n",
        "test": "assert     smallest_change([1, 3, 5, 4, 2]) == 2"
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    if len(lst1) <= len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert     total_match(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c']"
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_multiply_prime(4)"
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return n**int(math.log(x, n)) == x\n",
        "test": "assert     is_simple_power(9, 4) == False"
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return a == a**3\n",
        "test": "assert     iscube(17) == False"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    num = str(num)\n    count = 0\n    while num:\n        if is_prime(int(num[0])):\n            num = num[1:]\n            count += 1\n        else:\n            num = num[1:]\n    return count\n",
        "test": "assert         hex_key('1AB2') == 6"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    bin_string = \"\"\n    while decimal!= 0:\n        bin_string = str(decimal % 2) + bin_string\n        decimal = decimal / 2\n    bin_string = \"db\" + bin_string + \"db\"\n    return bin_string\n",
        "test": "assert     decimal_to_binary(1) == \"1\""
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(s) >= 3 and all([s.count(s[i:i+3]) == 1 for i in range(len(s))])\n",
        "test": "assert     is_happy(\"a\") == False, \"Wrong!\""
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    grades = [round(x, 2) for x in grades]\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([0.0, 0.0]) == ['E', 'E']"
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    string = string.strip()\n    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        return True\n    for num in range(2, len(string)):\n        if string[num] == string[0] or string[num] == string[-1]:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert     (prime_length('') is True)"
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return sum(1 for i in range(1, 10**n) if str(i).startswith('1') or str(i).endswith('1'))\n",
        "test": "assert     starts_one_ends(0)         == 0"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Write your code here\n    total = 0\n    while N:\n        total += N % 2\n        N //= 2\n    return str(total)",
        "test": "assert     solve(1)     == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    res = []\n    for i in range(len(lst)):\n        if (i % 2 == 0):\n            res.append(lst[i])\n    return sum(res)\n",
        "test": "assert         add([0, 1, 2]) == [0, 2, 4]"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     anti_shuffle(\"Hello World\") ==     \"World Hello\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return sorted(enumerate(lst), key = lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row("
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sorted(array)",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    #make a dict of the alphabet to use\n    alpha = {'a':'abcdefghijklmnopqrstuvwxyz',\n        'b':'abcdefghijklmnopqrstuvwxyzab',\n        'c':'abcdefghijklmnopqrstuvwxyzabc',\n        'd':'abcdefghijklmnopqrstuvwxyzabcd',\n        'e':'abcdefghijklmnopqrstuvwxyzabcde',\n        'f':'abcdefghijklmnopqrstuvwxyzabcdef',\n        'g':'abcdefghijklmnopqrstuvwxyzabcdefg',\n        'h':'abcdefghijklmnopqrstuvwxyzabcdefgh',\n        'i':'abcdefghijklmnopqrstuvwxyzabcdefghi',\n        'j':'abcdefghijklmnopqrstuvwxyzabcdefghij',\n        'k':'abcdefghijklmnopqrstuvwxyzabcdefghijk',\n        'l':'abcdefghijklmnopqrstuvwxyzabcdefghijk',\n        'm':'abcdefghijklmnopqrstuvwxyzabcdefghijkl',\n        'n':'abcdefghijklmnopqrstuvwxyzabcdefghijklm',\n        'o':'abcdefghijklmnopqrstuvwxyzabcdefghijklmn',\n        'p':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnop',\n        'q':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq',\n        'r':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr',\n        's':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        't':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'u':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'v':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'w':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'x':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'y':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'z':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst'}\n    #take the input and make sure it is lowercase\n    s = s.lower()\n    #make a new variable that is the output\n    out = ''\n    #loop through the string\n    for i in range(0, len(s)):\n        #get the letter and make sure it is a letter\n        if s[i] in alpha:\n            #get the index of the letter\n            index = ord(s[i]) - 97\n            #get the alphabet letter\n            letter = alpha[s[i]][(index + 2) % 26]\n            #add the letter to the output\n            out += letter\n    #return the output\n    return out\n",
        "test": "assert     encrypt('a') == 'c'"
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return None\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum(1 for s in S.split('.') if s.startswith('I'))\n",
        "test": "assert     is_bored(\"this is a simple sentence\") == False, \"is_bored('this is a simple sentence')\""
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if int(x) == x and int(y) == y and int(z) == z:\n        return True\n    else:\n        return False\n        \n",
        "test": "assert     any_int(1, 1.1, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    #TODO\n    return message\n",
        "test": "assert     encode('VOWELS') == 'VOWELS'"
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    lst = sorted(lst)\n    for i in lst:\n        if lst.count(i) > 1:\n            lst.remove(i)\n    lst = sorted(lst)\n    answer = 0\n    for i in lst:\n        answer += i\n    return answer\n",
        "test": "assert     1 == skjkasdkd([1])"
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # YOUR CODE GOES HERE #\n    if not dict:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if type(dict[key])!= str:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({1:2}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        primes = [2]\n        i = 3\n        while i < n:\n            for prime in primes:\n                if i % prime == 0:\n                    break\n            else:\n                primes.append(i)\n            i += 2\n        return primes\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    a = abs(a)\n    b = abs(b)\n    result = 0\n    for i in range(a):\n        result += b\n    if a < 0:\n        result = -result\n    return result",
        "test": "assert     multiply(0, 1) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum(s[i] in 'AEIOU' for i in range(len(s)//2))\n",
        "test": "assert     count_upper('abcdef') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    try:\n        if int(value) == round(float(value)):\n            return int(value)\n        else:\n            return round(float(value))\n    except:\n        return 0\n",
        "test": "assert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    s = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n - 1\n        s.append(n)\n    return s\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return s.split(\",\")\n",
        "test": "assert     words_string('hello,world,hi') == ['hello', 'world', 'hi']"
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if x <= 0 or y <= 0:\n        return -1\n    elif x > y:\n        return -1\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                return i\n        return -1\n",
        "test": "assert     choose_num(3, 6) == 4"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if n > m:\n        return -1\n    return int(bin(n + m - 1)[2:])\n",
        "test": "assert     rounded_avg(1, 3) == 1.5"
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sorted([i for i in x if i%2!=0])\n",
        "test": "assert     unique_digits([1, 2, 3]) == [1, 3]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not arr:\n        return []\n    arr = sorted(arr)\n    arr.reverse()\n    digits = [str(i) for i in range(1, 10)]\n    return [digits[int(i)] for i in arr]\n",
        "test": "assert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == \"NineEightSevenSixFiveFourThreeTwoOne\""
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    n_list = []\n    for i in range(1,n+1):\n        if i%2==0:\n            n_list.append(math.factorial(i))\n        else:\n            n_list.append(sum(range(1,i+1)))\n    return n_list\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    res = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            res[i % 2] += 1\n    return tuple(res)\n",
        "test": "assert     even_odd_palindrome(1) == (0, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            if sum([int(digit) for digit in str(num)]) > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(arr)==0:\n        return True\n    temp = arr[0]\n    for i in range(1, len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i]<arr[i+1]:\n                return True\n        if i==len(arr)-1:\n            if arr[i]>arr[i-1]:\n                return True\n        else:\n            if arr[i]>=arr[i-1] and arr[i]<=arr[i+1]:\n                return True\n    return False\n",
        "test": "assert     move_one_ball([1,2,3,4,5]) == True, \"Wrong result\""
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    elif len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    k = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[k]:\n            return \"NO\"\n        k += 1\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2, 4, 4, 5, 8, 10, 11], [0, 1, 4, 5, 6, 9, 11, 11]) == 'NO'"
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    histo = {}\n    for i in test:\n        histo[i] = histo.get(i, 0) + 1\n    return histo\n",
        "test": "assert     histogram(\"a\") == {\"a\": 1}"
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    s = list(s)\n    for x in c:\n        if x in s:\n            while x in s:\n                s.remove(x)\n    if len(s) == 0:\n        return (''.join(s), True)\n    return (''.join(s), False)\n",
        "test": "assert     reverse_delete(\"\", \"\") == ('', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    lst2 = [int(i) for i in lst]\n    lst2 = [str(i) for i in lst2]\n    lst3 = []\n    for i in lst2:\n        lst3.append(len([j for j in i if int(j)%2]))\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(lst3[0],lst3[1],lst3[1],lst3[2])]",
        "test": "assert     odd_count(['12345', '23456', '34567'])    == [5, 10, 15]"
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # O(n) time, O(1) space\n    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([1,2,3,4]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    import math\n    ROW = len(grid)\n    COL = len(grid[0])\n    for i in range(ROW):\n        for j in range(COL):\n            if grid[i][j] == 1:\n                b = math.ceil(capacity/float(j+1))\n                while b > 0:\n                    if j+1 < COL:\n                        grid[i][j+1] -= b\n                        if grid[i][j+1] == 0:\n                            grid[i][j] = 0\n                            break\n                        b = math.ceil(capacity/float(j+2))\n                    else:\n                        grid[i][j] -= b\n                        if grid[i][j] == 0:\n                            grid[i][j-1] = 0\n                            break\n                        b = math.ceil(capacity/float(j+2))\n    if sum(map(sum,grid)) == 0:\n        return 0\n    return grid\n",
        "test": "assert     max_fill(["
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted(arr, key=lambda x: [len(str(bin(x)))-2, x])",
        "test": "assert     [0] == sort_array([0])"
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return [word for word in s.split(\" \") if word.count(\"a\") + word.count(\"e\") + word.count(\"i\") + word.count(\"o\") + word.count(\"u\") == n]\n",
        "test": "assert     select_words(\"cab caab dca cb dc bd\", 2) == [\"caab\"]"
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    import string\n    chars = list(string.ascii_lowercase)\n    for i in range(len(word)-1,-1,-1):\n        if word[i] in chars:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"a\") == \"a\""
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    # Using Stack, time complexity is O(n)\n    stack = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    \n    return 'Yes' if len(stack) == 0 else 'No'",
        "test": "assert     match_parens(['(())', '()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if k > len(arr):\n        return []\n    arr.sort()\n    return arr[len(arr)-k:]\n",
        "test": "assert     maximum([], 0) == []"
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2==0 and lst[i]%2==1])\n",
        "test": "assert     solution([2, 4, 6, 8]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sum(arr[:k])",
        "test": "assert     add_elements([1,1,1,1,1,1], 1) == 5"
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if date:\n        months = ['01','03','05','07','08','10','12']\n        days = [31,30,29,31,30,31,30,31,31,30,31,30]\n        input_year = date.split('-')[2]\n        input_month = date.split('-')[0]\n        input_day = date.split('-')[1]\n        if input_day.isdigit() and input_month.isdigit() and input_year.isdigit():\n            if int(input_year) < 1 or int(input_year) > 9999:\n                return False\n            if int(input_month) < 1 or int(input_month) > 12:\n                return False\n            if int(input_day) < 1 or int(input_day) > days[int(input_month)-1]:\n                return False\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     valid_date('') == False"
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return txt.split()\n    \n",
        "test": "assert     split_words('Hello World') == ['Hello', 'World'], 'fail test 1'"
    },
    {
        "number": 126,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    lst_copy = lst[:] # duplicate the list\n    lst_copy.sort()\n    return lst == lst_copy\n",
        "test": "assert     is_sorted([]) == True, \"is_sorted([]) == True\""
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return 'NO' if interval1[1] <= interval2[0] or interval2[1] <= interval1[0] else 'YES'\n",
        "test": "assert     intersection((1, 3), (2, 3)) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    prod = 1\n    for num in arr:\n        prod *= (num if num > 0 else -num)\n    return prod if arr else None\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    row, col = len(grid), len(grid[0])\n    cost = [[0 for _ in range(col)] for _ in range(row)]\n    cost[0][0] = grid[0][0]\n    for i in range(1, col):\n        cost[0][i] = cost[0][i - 1] + grid[0][i]\n    for i in range(1, row):\n        cost[i][0] = cost[i - 1][0] + grid[i][0]\n    for i in range(1, row):\n        for j in range(1, col):\n            cost[i][j] = min(cost[i - 1][j], cost[i][j - 1]) + grid[i][j]\n    res = [cost[row - 1][col - 1]]\n    for i in range(row - 1, 0, -1):\n        if k > 0:\n            k -= 1\n            res.append(cost[i - 1][col - 1] - cost[i][col - 1])\n    for j in range(col - 1, 0, -1):\n        if k > 0:\n            k -= 1\n            res.append(cost[row - 1][j - 1] - cost[row - 1][j])\n    return res\n",
        "test": "assert     minPath(["
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    def tribonacci(n):\n        tribonacci = [0] * (n + 1)\n        tribonacci[1] = 1\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2]\n            else:\n                tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n        return tribonacci\n    return tribonacci(n)\n",
        "test": "assert     tri(2) == 1 + (2 / 2)"
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n < 10:\n        return n\n    else:\n        n = str(n)\n        odds = 1\n        for c in n[1:]:\n            if int(c) % 2 == 1:\n                odds *= int(c)\n        return odds\n",
        "test": "assert     digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    '''\n    if any(bracket for bracket in string if bracket == '['):\n        return True\n    else:\n        return False\n    '''\n    return any(bracket for bracket in string if bracket == '[' or bracket == ']')\n",
        "test": "assert     is_nested('[]') == True"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    res = 0\n    for num in lst:\n        res += num**2\n    return int(math.ceil(res))\n",
        "test": "assert     sum_squares([0.0, 0.0, 0.0]) == 0.0"
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # your code here\n    if len(txt) == 0:\n        return False\n    else:\n        return (txt[-1].isalpha() and not txt[-1].isnumeric())\n",
        "test": "assert     check_if_last_char_is_a_letter(\"world\")"
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    l = len(arr)\n    if l <= 1:\n        return -1\n    arr.sort()\n    for i in range(l-1):\n        if arr[i] + 1 < arr[i+1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([1,3,2]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if negative_integers == []:\n        return None, None\n    else:\n        return max(negative_integers), min(positive_integers)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    if isinstance(a, str) or isinstance(b, str):\n        return None\n    if a > b:\n        return a\n    return b\n",
        "test": "assert     compare_one(5, 6) == 6"
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return n % 2 == 0 and sum(x for x in range(1, n, 2)) == n\n",
        "test": "assert     not is_equal_to_sum_even(21)"
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"  \", \"-\")\n    \n    return new_text\n",
        "test": "assert     fix_spaces('hello') == 'hello'"
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    \n    #initiate a flag\n    flag = False\n    #strip the file name\n    file_name = file_name.strip()\n    #split the file name into a list of strings\n    file_name_list = file_name.split('.')\n    #check if the file name has 3 digits or not\n    if len(file_name_list[0]) > 3:\n        flag = False\n    else:\n        flag = True\n    #check if the file name contains exactly one dot\n    if file_name.find('.') == -1:\n        flag = False\n    else:\n        flag = True\n    #check if the substring before the dot is not empty\n    if file_name.find('.')!= 0:\n        flag = False\n    else:\n        flag = True\n    #check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    for item in ['txt', 'exe', 'dll']:\n        if file_name.find(item, file_name.find('.') + 1)!= -1:\n            flag = True\n    #if all the conditions above are met, return 'Yes'\n    if flag == True:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check(\"file_name.txt\")    == 'Yes'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    lst = [x**2 if (x%3 == 0 or x%4 == 0) else x for x in lst]\n    return sum(lst)\n",
        "test": "assert     sum_squares([1, 2, 3, 4, 5, 6]) == 22, \"the result should be 22\""
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n",
        "test": "assert     words_in_sentence(\"1\") == \"1\""
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    m = x.split(\"/\")\n    n = n.split(\"/\")\n    if m[1] == n[1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not simplify('2/4', '1/3')"
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return sorted(nums, key=lambda x: sum([int(x) for x in str(abs(x))]))\n",
        "test": "assert     order_by_points([1,3,2,2,5,7,7,8,9]) == [1,2,2,3,5,7,7,8,9]"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    counter = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and (nums[i] % 2 == 1 and nums[0] % 2 == 1) or (nums[i] % 2 == 0 and nums[-1] % 2 == 0):\n            counter += 1\n    return counter\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9, 10]) == 1"
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n",
        "test": "assert     bf('Mercury', 'Mars') ==     ('Mars', 'Mercury', 'Venus', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')"
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    \n    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2, 'A', 'B') == 'A'"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x*x for x in lst if x % 2!= 0])\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return [abs(guess[x]-game[x]) for x in range(len(guess))]\n",
        "test": "assert     compare([1,2,3,4],[1,2,3,4]) == [0, 0, 0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    extensions_strength = {}\n    for extension in extensions:\n        extensions_strength[extension] = 0\n        for i in extension:\n            if i.isupper():\n                extensions_strength[extension] += 1\n            else:\n                extensions_strength[extension] -= 1\n    return class_name + \".\" + max(extensions_strength, key=extensions_strength.get)\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    #logging.info(\"starting\")\n    for _ in range(0,len(b)):\n        if b in a:\n            return True\n        else:\n            a = a[-1] + a[:-1]\n    return False\n",
        "test": "assert         cycpattern_check('a', 'a') == True"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if num < 0:\n        return even_odd_count(-num)\n    if num == 0:\n        return (0, 0)\n    # count odd and even digits\n    odds = []\n    evens = []\n    for i in str(num):\n        if int(i) % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return (len(odds), len(evens))\n",
        "test": "assert     (even_odd_count(1212) == (2,2)), \"1212 should be 1 even and 2 odd digits\""
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = []\n    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    romans = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    for i, num in enumerate(numbers):\n        while number >= num:\n            result.append(romans[i])\n            number -= num\n    return ''.join(result)\n",
        "test": "assert     int_to_mini_roman(1) == \"I\""
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return a**2+b**2 == c**2 or a**2+c**2 == b**2 or b**2+c**2 == a**2\n",
        "test": "assert     right_angle_triangle(3,4,6) == False"
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    temp = []\n    for word in words:\n        temp.append(len(set(word)))\n    return words[temp.index(max(temp))]\n",
        "test": "assert     find_max(['hello', 'world', 'golf', 'python', 'dog']) == 'python'"
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if need <= remaining:\n        return [number + need, remaining - need]\n    return [number, 0]\n",
        "test": "assert     eat(0, 0, 1) == [0, 1]"
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            result = eval(str(result) + operator[i - 1] + str(operand[i]))\n    return result\n",
        "test": "assert     do_algebra(['*', '/'], [3, 2, 1]) == 6"
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return \"\".join(reversed(s.lower()))\n",
        "test": "assert     solve('A') == 'a'"
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if text is None or text == '':\n        return None\n    return md5(text).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    integers = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "test": "assert     generate_integers(3, 7) == [4, 6]"
    }
]