[
    {
        "number": 0,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    numbers = sorted(numbers)\n    for index, number in enumerate(numbers[1:]):\n        if number - numbers[index] <= threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([-1.0, 0.0, 0.1, 0.5, 1.0], 0.2) == True",
        "num_ids": 1708
    },
    {
        "number": 1,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "    paren_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            paren_group.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_group.append(char)\n                paren_stack.pop()\n            else:\n                raise ValueError('No matching opening bracket')\n        elif char =='':\n            continue\n        else:\n            paren_group.append(char)\n    if not paren_stack:\n        return [''.join(paren_group)]\n    else:\n        raise ValueError('No matching opening bracket')\n",
        "test": "assert     separate_paren_groups('((()))') == ['((()))']",
        "num_ids": 2582
    },
    {
        "number": 2,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    # Divide the number by the first highest factor of 10, and take the\n    # modulus to keep only the decimals\n    if number > 0:\n        integer, decimals = divmod(number, 10)\n        return decimals\n    else:\n        # The number is negative, just do the opposite\n        return -truncate_number(-number)\n",
        "test": "assert         truncate_number(9.99999) == truncate_number(9.99999)",
        "num_ids": 1090
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    return any(a < 0 for a in operations)\n",
        "test": "assert     below_zero([10, 10, 10, 10]) == False, '10'",
        "num_ids": 2027
    },
    {
        "number": 4,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    mean_val = sum(numbers) / len(numbers)\n    differences = [abs(n - mean_val) for n in numbers]\n    return sum(differences) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1.0]) == 0.0",
        "num_ids": 1633
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            res.append(numbers[i])\n        else:\n            res.append(numbers[i])\n            res.append(delimeter)\n    return res\n",
        "test": "assert     intersperse([1, 2, 3], \"*\") == [1, \"*\", 2, \"*\", 3]",
        "num_ids": 1678
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "    stack = []\n    max_depth = 0\n    for paren in paren_string.split(' '):\n        if paren == '':\n            continue\n        level = 0\n        for i, c in enumerate(paren):\n            if c == '(':\n                level += 1\n            elif c == ')':\n                level -= 1\n            if level == -1:\n                break\n        if level!= -1:\n            stack.append(level)\n            max_depth = max(max_depth, level)\n    return stack\n",
        "test": "assert     parse_nested_parens('(()') == [1]",
        "num_ids": 1609
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return [x for x in strings if substring in x]\n",
        "test": "assert     len(filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 'z')) == 0",
        "num_ids": 2281
    },
    {
        "number": 8,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for number in numbers:\n        product_ *= number\n    return (sum_, product_)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 1162
    },
    {
        "number": 9,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    length = len(numbers)\n    result = []\n    max_num = 0\n    for i in range(length):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        result.append(max_num)\n    return result\n",
        "test": "assert     rolling_max([])         == []",
        "num_ids": 2196
    },
    {
        "number": 10,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    while not is_palindrome(string):\n        for i in range(len(string) - 1, 0, -1):\n            string = string[:i] + string[i:][::-1]\n    return string\n",
        "test": "assert     is_palindrome('a') == True",
        "num_ids": 1285
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    return ''.join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a,b))\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\"",
        "num_ids": 3246
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    if strings == []:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "test": "assert     longest([]) == None",
        "num_ids": 1074
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    if a == 0 or b == 0:\n        return 1\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n",
        "test": "assert     greatest_common_divisor(3, 3) == 3",
        "num_ids": 793
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    if not string:\n        return []\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 2286
    },
    {
        "number": 15,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result = result + str(i) + \" \"\n    return result.strip()\n",
        "test": "assert     string_sequence(0)         == '0'",
        "num_ids": 983
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    if not string:\n        return 0\n    counts = [0] * 128\n    for c in string:\n        if c.isalpha():\n            counts[ord(c.lower())] += 1\n    return sum(counts)\n",
        "test": "assert     count_distinct_characters(\"\") == 0, \"\"",
        "num_ids": 1018
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    result = []\n    beats = 0\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats += 1\n            i += 1\n        elif music_string[i] == 'o|':\n            beats += 1\n            i += 1\n        elif music_string[i] == '.|':\n            beats += 1\n            i += 1\n        else:\n            result.append(beats)\n            beats = 0\n            i += 1\n    if beats > 0:\n        result.append(beats)\n    return result\n",
        "test": "assert     parse_music('o') == [1]",
        "num_ids": 3501
    },
    {
        "number": 18,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    count = 0\n    for idx, letter in enumerate(string):\n        if string[idx:].startswith(substring):\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"\", \"A\") == 0",
        "num_ids": 1014
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('one') == 'one'",
        "num_ids": 2556
    },
    {
        "number": 20,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    result = sorted(numbers, key=lambda x: (x - min(numbers)) ** 2)\n    return result[0], result[1]\n",
        "test": "assert     find_closest_elements([0, 0]) == (0, 0), \"incorrect result for [0, 0]\"",
        "num_ids": 2323
    },
    {
        "number": 21,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    t = 1.0 / (largest - smallest)\n    return [t * (n - smallest) for n in numbers]\n",
        "test": "assert     rescale_to_unit([0, 1]) == [0, 1]",
        "num_ids": 1683
    },
    {
        "number": 22,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 1323
    },
    {
        "number": 23,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 496
    },
    {
        "number": 24,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    if n % 2 == 0:\n        return n // 2\n    return 1\n",
        "test": "assert     largest_divisor(2) == 1",
        "num_ids": 855
    },
    {
        "number": 25,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    if n < 1:\n        raise ValueError(\"Input number should be greater than 0\")\n    if n == 1:\n        return [1]\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 2067
    },
    {
        "number": 26,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    duplicates = set()\n    result = []\n    for num in numbers:\n        if num not in duplicates:\n            duplicates.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1905
    },
    {
        "number": 27,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"abc\") == \"ABC\"",
        "num_ids": 920
    },
    {
        "number": 28,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 1112
    },
    {
        "number": 29,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['apples', 'oranges', 'bananas'], 'apple') == ['apples']",
        "num_ids": 1146
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert         get_positive([-1, 3, 4, -5, 9]) == [3, 4, 9]",
        "num_ids": 1118
    },
    {
        "number": 31,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(4) == False",
        "num_ids": 1190
    },
    {
        "number": 32,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        if coeff * coeff > 0:\n            if coeff > 0:\n                coeff = -coeff\n            xs[i] = coeff\n            return -coeff / coeff\n    raise Exception('No zero point')\n",
        "test": "assert     poly([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 0",
        "num_ids": 2026
    },
    {
        "number": 33,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    l.sort()\n    return [l[i] if i % 3 == 0 else l[i] if i % 3 == 1 else l[i] if i % 3 == 2 else l[i-1] for i in range(len(l))]\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 2954
    },
    {
        "number": 34,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    # return list(set(l))\n    result = []\n    for item in l:\n        if item not in result:\n            result.append(item)\n    return sorted(result)\n",
        "test": "assert     sorted(unique([1, 2, 3, 4, 5]))    == [1, 2, 3, 4, 5]",
        "num_ids": 1165
    },
    {
        "number": 35,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    return max(l)\n",
        "test": "assert     max_element(['a', 'b', 'c', 'd']) == 'd'",
        "num_ids": 846
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return sum(1 for x in range(1, n) if x % 11 == 0 or x % 13 == 0)\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 954
    },
    {
        "number": 37,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    l2 = []\n    for x in range(len(l)):\n        if x % 2 == 0:\n            l2.append(l[x])\n        else:\n            l2.append(l[x])\n    l2.sort()\n    return l2\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 2020
    },
    {
        "number": 38,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 4145
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "    if n < 2:\n        return n\n    f1, f2 = 1, 1\n    if n == 1:\n        return 2\n    for i in range(2, n):\n        f1, f2 = f2, f1 + f2\n    return f2\n",
        "test": "assert     prime_fib(20) == 6765",
        "num_ids": 2012
    },
    {
        "number": 40,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False, \"should be False\"",
        "num_ids": 1641
    },
    {
        "number": 41,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    collisions = 0\n    # Your code here\n    return collisions",
        "test": "assert         car_race_collision(1) == 0",
        "num_ids": 1471
    },
    {
        "number": 42,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 1031
    },
    {
        "number": 43,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[item] = item\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, -1, 0, 0]) is True",
        "num_ids": 1665
    },
    {
        "number": 44,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if x == 0:\n        return '0'\n    digits = '0123456789ABCDEF'\n    res = ''\n    while x:\n        res = digits[x % base] + res\n        x //= base\n    return res\n",
        "test": "assert     change_base(0, 2) == '0'",
        "num_ids": 1172
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return.5 * a * h\n",
        "test": "assert     triangle_area(10, 5) == 25.0",
        "num_ids": 579
    },
    {
        "number": 46,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    for i in range(5,n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 2075
    },
    {
        "number": 47,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    if len(l) == 0:\n        return None\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2-1] + l[n//2]) / 2.0\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 1048
    },
    {
        "number": 48,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return text[: :-1].lower() == text.lower()\n",
        "test": "assert     is_palindrome('racecar') == True",
        "num_ids": 790
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    n, p = int(n), int(p)\n    if n < 0: n += p\n    if p == 0: raise ValueError(\"modulo cannot be zero\")\n    if n == 0: return 1\n    if n == 1: return (n+p) % p\n    if n%2 == 0: return (modp(n//2, p)**2) % p\n    if p%4 == 3: return (modp((n-1)//4, p)**2) % p\n    return (modp((n-1)//2, p)**2) % p\n",
        "test": "assert     modp(0, 2) == 1",
        "num_ids": 835
    },
    {
        "number": 50,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"hello\") == \"mjqqt\"",
        "num_ids": 901
    },
    {
        "number": 51,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    vowels = 'aeiou'\n    if isinstance(text, str):\n        return ''.join(i for i in text if i not in vowels)\n    else:\n        return None\n",
        "test": "assert remove_vowels(\"\") == \"\"",
        "num_ids": 1288
    },
    {
        "number": 52,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return 0 not in [n for n in l if n < t]\n",
        "test": "assert     below_threshold([], 4) == True, \"WA: Below threshold with empty list\"",
        "num_ids": 1014
    },
    {
        "number": 53,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 396
    },
    {
        "number": 54,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars('spam', 'ham') is False",
        "num_ids": 812
    },
    {
        "number": 55,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 702
    },
    {
        "number": 56,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    opening_brackets = []\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets.append(\"<\")\n        elif c == \">\":\n            if len(opening_brackets) == 0:\n                return False\n            opening_brackets.pop()\n    return len(opening_brackets) == 0\n",
        "test": "assert     correct_bracketing(\"\") == True",
        "num_ids": 2203
    },
    {
        "number": 57,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([]) == True",
        "num_ids": 1092
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(list(s1 & s2))\n",
        "test": "assert     common([1,2,3,4,5], [5,4,3,2,1]) == [1,2,3,4,5]",
        "num_ids": 1226
    },
    {
        "number": 59,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert     5 == largest_prime_factor(25)",
        "num_ids": 843
    },
    {
        "number": 60,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "test": "assert         sum_to_n(1) == 1",
        "num_ids": 711
    },
    {
        "number": 61,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    # Keep track of the \"unmatched\" opening brackets using a list\n    bracket_stack = []\n    for i in range(len(brackets)):\n        bracket = brackets[i]\n        if bracket == \"(\":\n            bracket_stack.append(\"(\")\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            last_bracket = bracket_stack.pop()\n            if last_bracket!= \"(\":\n                return False\n    return len(bracket_stack) == 0\n",
        "test": "assert     correct_bracketing(\"\") == True",
        "num_ids": 1425
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert     derivative([]) == []",
        "num_ids": 761
    },
    {
        "number": 63,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 1515
    },
    {
        "number": 64,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_count = 0\n    for i in s:\n        if i in vowels:\n            vowels_count += 1\n    if s[-1] == \"y\":\n        vowels_count -= 1\n    return vowels_count\n",
        "test": "assert     vowels_count('t') == 0",
        "num_ids": 1150
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "    # Convert to string so we can change individual characters\n    s = str(x)\n    n = len(s)\n    # Cast shift to negative so we can use the % operator\n    shift = -shift % n\n    # Add the string backwards with the shift (we only want the final n-shift)\n    return s[n-shift:] + s[:n-shift]\n",
        "test": "assert     circular_shift(123456789, 3) == 432112345",
        "num_ids": 1205
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    return sum(ord(x) for x in s if x.isupper())\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 842
    },
    {
        "number": 67,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    def num_apples(s,n):\n        return s.count(\"apple\")*n/100\n    def num_oranges(s,n):\n        return s.count(\"orange\")*n/100\n    return num_apples(s,n) + num_oranges(s,n)\n",
        "test": "assert     fruit_distribution(\"0 0\", 0) == 0",
        "num_ids": 2823
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    ans = []\n    for i, v in enumerate(arr):\n        if v%2 == 0 and ans == [] or v < ans[0]:\n            ans = [v, i]\n    return ans if ans else []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 2327
    },
    {
        "number": 69,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    counts = {}\n    for num in lst:\n        if counts.get(num, False):\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    max_num = 0\n    max_freq = 0\n    for num in counts.keys():\n        if counts[num] >= max_freq:\n            max_num = num\n            max_freq = counts[num]\n    return max_num if max_num > 0 else -1\n",
        "test": "assert     search([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -1",
        "num_ids": 2521
    },
    {
        "number": 70,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    lst2 = []\n    sorted(lst)\n    for n in lst:\n        lst2.append(n)\n        lst2.sort()\n    return lst2\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 1636
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    # Your code here\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a + b + c)/2, 2)\n",
        "test": "assert     triangle_area(1,1,10) == -1.0, \"The area of the triangle should be -1.0\"",
        "num_ids": 1234
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    return q[::-1] == q and sum(q) <= w\n",
        "test": "assert     will_it_fly([1,2,3,2,1],7) == False",
        "num_ids": 2514
    },
    {
        "number": 73,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "    if len(arr) == 1:\n        return 0\n    result = 0\n    max_diff = arr[-1] - arr[0]\n    min_diff = abs(arr[-1] - arr[0])\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff > max_diff:\n            max_diff = diff\n        if diff < min_diff:\n            min_diff = diff\n        result += diff\n    return result - max_diff - min_diff\n",
        "test": "assert     smallest_change([1,1,1,1,1]) == 0",
        "num_ids": 2545
    },
    {
        "number": 74,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert     total_match([\"a\", \"b\"], [\"c\", \"d\"]) == [\"a\", \"b\"]",
        "num_ids": 2682
    },
    {
        "number": 75,
        "max_answer_num": 25,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_multiply_prime(13*17) == False",
        "num_ids": 1177
    },
    {
        "number": 76,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x%n!= 0:\n        return False\n    return is_simple_power(x/n, n)",
        "test": "assert     not is_simple_power(26, 7)",
        "num_ids": 931
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    return a ** 3 == int(a ** 3)\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 567
    },
    {
        "number": 78,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    import math\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    def check_hex(num):\n        if len(num)!= 2:\n            return False\n        if num[0] not in \"ABCDEF\":\n            return False\n        if num[1] not in \"0123456789\":\n            return False\n        if int(num[1]) < 0 or int(num[1]) > 7:\n            return False\n        return True\n    def count_hex(num):\n        if check_hex(num):\n            if is_prime(int(num[1])):\n                return 1\n            else:\n                return 0\n        else:\n            return 0\n    if not num:\n        return 0\n    return count_hex(num)\n    ",
        "test": "assert     hex_key(\"\") == 0",
        "num_ids": 2403
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    output = []\n    if decimal == 0:\n        return \"db0\"\n    while decimal > 0:\n        output.append(str(decimal % 2))\n        decimal = decimal // 2\n    output.reverse()\n    return \"db\" + \"\".join(output) + \"db\"\n",
        "test": "assert     decimal_to_binary(0) == 'db0'",
        "num_ids": 1287
    },
    {
        "number": 80,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3 and len(set(s)) == 1:\n        return True\n    return is_happy(s[1:]) if is_happy(s[3:]) and s[0]!= s[1] and s[0]!= s[2] else False\n",
        "test": "assert     is_happy(\"cccrc\") == False",
        "num_ids": 1093
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "    result = []\n    for i in grades:\n        if i >= 4.0:\n            result.append('A+')\n        elif i >= 3.7:\n            result.append('A')\n        elif i >= 3.3:\n            result.append('A-')\n        elif i >= 3.0:\n            result.append('B+')\n        elif i >= 2.7:\n            result.append('B')\n        elif i >= 2.3:\n            result.append('B-')\n        elif i >= 2.0:\n            result.append('C+')\n        elif i >= 1.7:\n            result.append('C')\n        elif i >= 1.3:\n            result.append('C-')\n        elif i >= 1.0:\n            result.append('D+')\n        elif i >= 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 3718
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return True if count == 2 else False\n",
        "test": "assert     prime_length('abcdef') is False",
        "num_ids": 995
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    # Count the number of integers in the interval [1, n] that begin with 1 or\n    # end with 1.\n    if n == 1:\n        return 1\n    # For each i in [1, n], a number that begins with 1 is only valid if its\n    # last digit is 1.\n    count = 0\n    for i in range(1, n + 1):\n        if i < 10:\n            if i == 1:\n                count += 1\n            elif i % 10 == 1:\n                count += 1\n        else:\n            num = i % 10\n            if num == 1:\n                count += 1\n            elif num == 0:\n                if i > 9:\n                    # Only one way to get to an n-digit number with no 0s\n                    count += 1\n            else:\n                # If the last digit is not 0, then all the other digits\n                # can't be 0, so we don't care about that number\n                continue\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 1284
    },
    {
        "number": 84,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    return str(bin(N)[2:])",
        "test": "assert     solve(1)     == \"1\"",
        "num_ids": 1185
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "    newlist = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            newlist.append(lst[i])\n    return newlist\n",
        "test": "assert     add([]) == []",
        "num_ids": 1266
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    # your code here\n    return \" \".join(sorted(s.split()))",
        "test": "assert     anti_shuffle('') == '',     \"anti_shuffle('') == ''\"",
        "num_ids": 1213
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res, key = lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row([], 0) == []",
        "num_ids": 3234
    },
    {
        "number": 88,
        "max_answer_num": 29,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1821
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "    # Only use a subset of the alphabet for the encryption.\n    #   Note: you should not change the alphabet used in your solution.\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    newAlphabet = alphabet[3:] + alphabet[:3]\n    # Encrypt is the same as decrypt except for the numbers.\n    def encrypt(s):\n        if s.isalpha():\n            return newAlphabet[alphabet.index(s.lower()) * 2]\n        else:\n            return s\n    return encrypt(s)\n",
        "test": "assert     encrypt(\"\") == \"\"",
        "num_ids": 1243
    },
    {
        "number": 90,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    return None if len(lst) < 2 else sorted(lst)[1]",
        "test": "assert     next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1348
    },
    {
        "number": 91,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return S.count('I')",
        "test": "assert     is_bored(\"I don't care.\") == True",
        "num_ids": 1997
    },
    {
        "number": 92,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    return (x == (y + z) and type(x) == int)\n    \n",
        "test": "assert     not any_int(2.5, 2.5, 2.5)",
        "num_ids": 1113
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    dictionary = {}\n    for x in range(0,len(message)):\n        dictionary[message[x]] = message[x].swapcase()\n    return ''.join(map(lambda x: dictionary[x], message))\n",
        "test": "assert     encode(\"LOL\") == \"lol\"",
        "num_ids": 1414
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    res = []\n    for n in lst:\n        while n > 0:\n            res.append(n % 10)\n            n //= 10\n        if res[0] == 0 or res[0] == 1:\n            res = res[1:]\n        if all(x > 0 and x <= 9 for x in res):\n            return sum(int(x) for x in res)\n        else:\n            res = []\n    return 0\n",
        "test": "assert     skjkasdkd([1, 2, 3, 4, 5, 6]) == 0",
        "num_ids": 1776
    },
    {
        "number": 95,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if isinstance(key, str):\n            if not key.islower():\n                return False\n        if isinstance(value, str):\n            if not value.islower():\n                return False\n    return True\n",
        "test": "assert     check_dict_case({'a':'b'}) is True",
        "num_ids": 1628
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    primes = [2]\n    for i in range(3,n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert     count_up_to(2) == [2]",
        "num_ids": 1796
    },
    {
        "number": 97,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return a * b\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 973
    },
    {
        "number": 98,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    return sum(map(lambda x: 1 if x.isupper() else 0, s))\n",
        "test": "assert     count_upper(\"111\") == 0",
        "num_ids": 2918
    },
    {
        "number": 99,
        "max_answer_num": 32,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "    import math\n    number = float(value)\n    fractional_part = math.modf(number)[0]\n    integer_part = int(math.floor(number))\n    if fractional_part == 0:\n        return integer_part\n    if fractional_part <.5:\n        return integer_part\n    else:\n        return integer_part + 1\n",
        "test": "assert     closest_integer(\"14\") == 14",
        "num_ids": 1193
    },
    {
        "number": 100,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    level = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        level.append(n)\n    return level\n",
        "test": "assert     make_a_pile(0) == [0]",
        "num_ids": 1265
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string('hello') == ['hello']",
        "num_ids": 1302
    },
    {
        "number": 102,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "    if x%2 == 0 and y%2 == 0 and x <= y:\n        return (x+y-1)/2\n    else:\n        return -1\n",
        "test": "assert     (choose_num(1, 0) == -1)",
        "num_ids": 1039
    },
    {
        "number": 103,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    if m > n:\n        return -1\n    rounded_sum = 0\n    for i in range(n, m + 1):\n        rounded_sum += i\n    return (str(int(round(rounded_sum / (m - n + 1)))) + \"0\" * (m - n + 1))[-m:]\n",
        "test": "assert     rounded_avg(0, 3) == -1",
        "num_ids": 886
    },
    {
        "number": 104,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    return sorted([i for i in x if all([j for j in str(i) if int(j) % 2 == 0])])\n    \n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 1765
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    l = len(arr)\n    if l == 0:\n        return []\n    arr = sorted(arr)\n    if arr[0] <= 0 or arr[0] > 9:\n        return []\n    \n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    nums.reverse()\n    \n    res = []\n    for i in range(l):\n        if arr[i] == 0:\n            continue\n        if arr[i] <= 9 and arr[i] >= 1:\n            res.append(nums[arr[i]-1])\n    return res\n",
        "test": "assert     by_length([9,8,7,6,5,4,3,2,1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']",
        "num_ids": 3055
    },
    {
        "number": 106,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    l = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            l.append(l[-1] * i)\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 1370
    },
    {
        "number": 107,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "    even_num, odd_num = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_num += 1\n            else:\n                odd_num += 1\n    return even_num, odd_num\n",
        "test": "assert     even_odd_palindrome(0) == (0, 0)",
        "num_ids": 1047
    },
    {
        "number": 108,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return sum([1 for num in arr if (num > 0) and (sum(int(i) for i in str(num)) > 0)])\n",
        "test": "assert     count_nums([5, 5, 5]) == 3",
        "num_ids": 1379
    },
    {
        "number": 109,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] <= arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([]) == True, \"returned True when the given array was empty\"",
        "num_ids": 1642
    },
    {
        "number": 110,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    lst2_even = [i for i in lst2 if i%2 == 0]\n    for i in lst1:\n        if i in lst2_even:\n            lst2_even.remove(i)\n        elif i%2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], [1,2,3,4]) == \"NO\"",
        "num_ids": 2116
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    histo = {}\n    max_count = 0\n    for i in test:\n        if i in histo.keys():\n            histo[i] += 1\n        else:\n            histo[i] = 1\n        if histo[i] > max_count:\n            max_count = histo[i]\n    histo = {k: v for k, v in histo.items() if v == max_count}\n    return histo\n",
        "test": "assert     histogram('a') == {'a': 1}",
        "num_ids": 2551
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    if s == \"\":\n        return (s,True)\n    s = list(s)\n    for i in range(0,len(s)):\n        if s[i] == c:\n            del s[i]\n    return (\"\".join(s),s == s[::-1])\n",
        "test": "assert reverse_delete('', 'abc') == ('', True)",
        "num_ids": 3189
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return [len([i for i in x if int(i)%2!= 0]) for x in lst]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 2979
    },
    {
        "number": 114,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    if not nums:\n        return 0\n    min_sum = max_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        max_sum = max(max_sum, min_sum)\n    return max_sum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1854
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "    res = 0\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                # print(i, row[i])\n                res = max(res, math.ceil(row[i] / capacity))\n    return res\n",
        "test": "assert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 3) == 0",
        "num_ids": 2004
    },
    {
        "number": 116,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    counts = []\n    for num in arr:\n        bin_repr = bin(num)[2:]\n        ones = bin_repr.count(\"1\")\n        counts.append([ones, num])\n    return [n[1] for n in sorted(counts)]\n",
        "test": "assert     sort_array([0,1])    == [0,1]",
        "num_ids": 3579
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    list = []\n    if s == '':\n        return []\n    for word in s.split():\n        cnt = 0\n        for c in word:\n            if c not in ['a', 'e', 'i', 'o', 'u']:\n                cnt += 1\n        if cnt == n:\n            list.append(word)\n    return list\n",
        "test": "assert     select_words(s=\"\", n=1) == []",
        "num_ids": 1570
    },
    {
        "number": 118,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    n = len(word)\n    last_vowel = None\n    for i in reversed(range(n)):\n        if word[i] in vowels:\n            last_vowel = word[i]\n            break\n    if last_vowel is None:\n        return \"\"\n    start = n - 1\n    while start >= 0:\n        if word[start] not in vowels:\n            break\n        start -= 1\n    if start == -1:\n        return \"\"\n    min_dist = n\n    ch = ''\n    for i in range(start, n):\n        if word[i] not in vowels:\n            continue\n        curr_dist = abs(start - i)\n        if curr_dist < min_dist:\n            min_dist = curr_dist\n            ch = word[i]\n    return ch\n",
        "test": "assert     get_closest_vowel(\"\") == \"\", \"Fourth test\"",
        "num_ids": 1751
    },
    {
        "number": 119,
        "max_answer_num": 28,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    stack = []\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'No' if stack else 'Yes'\n",
        "test": "assert     match_parens(')(') == 'No'",
        "num_ids": 1297
    },
    {
        "number": 120,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    if not arr:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n    res = [None] * k\n    arr = sorted(arr)\n    for i in range(k):\n        res[i] = arr[len(arr) - i - 1]\n    return res\n",
        "test": "assert     maximum([1], 1) == [1]",
        "num_ids": 1476
    },
    {
        "number": 121,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2])\n",
        "test": "assert     solution([0, 0]) == 0",
        "num_ids": 1221
    },
    {
        "number": 122,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    count = 0\n    result = 0\n    for i in range(k):\n        if i < len(arr):\n            result += arr[i]\n            count += 1\n        else:\n            break\n    result += sum(arr[k:])\n    return result\n",
        "test": "assert     add_elements([0,0], 3) == 0",
        "num_ids": 1136
    },
    {
        "number": 123,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            collatz_sequence.append(n)\n        else:\n            n = 3 * n + 1\n            collatz_sequence.append(n)\n    return collatz_sequence\n",
        "test": "assert     get_odd_collatz(1) == [1], get_odd_collatz(1)",
        "num_ids": 1506
    },
    {
        "number": 124,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    valid_day = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n    valid_year = ['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029']\n    date = date.split('-')\n    if len(date) == 3:\n        if date[0] in months:\n            if date[1] in valid_day:\n                if date[2] in valid_year:\n                    return True\n    return False\n",
        "test": "assert     valid_date(\"-2-2-2012\") == False",
        "num_ids": 2548
    },
    {
        "number": 125,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('The') == ['The']",
        "num_ids": 3605
    },
    {
        "number": 126,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        if lst[0] > lst[1]:\n            return False\n        else:\n            return is_sorted(lst[1:])\n",
        "test": "assert     not is_sorted([1,2,3,1])",
        "num_ids": 1058
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    return \"NO\"\n",
        "test": "assert     intersection((1, 2), (3, 4)) == \"NO\"",
        "num_ids": 1399
    },
    {
        "number": 128,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    if arr == []:\n        return None\n    else:\n        arr_length = len(arr)\n        arr_signs = [0 for i in range(arr_length)]\n        arr_signs[0] = 1\n        for i in range(1, arr_length):\n            if arr[i] < 0:\n                arr_signs[i] = -1\n            elif arr[i] > 0:\n                arr_signs[i] = 1\n        product = 1\n        for i in range(arr_length):\n            product *= arr_signs[i]\n        return product\n",
        "test": "assert     prod_signs([]) == None, \"Check2\"",
        "num_ids": 1416
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    if rows < 2 or cols < 2:\n        return\n    # initialize the answer\n    answer = [0] * k\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                answer[0] = grid[0][0]\n                continue\n            elif i == 0:\n                answer[0] = min(answer[0], grid[i][j-1])\n            elif j == 0:\n                answer[0] = min(answer[0], grid[i-1][j])\n            else:\n                answer[0] = min(answer[0], grid[i][j], grid[i-1][j], grid[i][j-1])\n    return answer\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]",
        "num_ids": 4012
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "    return trib(n)[:-1]\n",
        "test": "assert         tri(4) == 3",
        "num_ids": 1471
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    res = 1\n    while n > 0:\n        res *= n % 10\n        n //= 10\n    return res\n",
        "test": "assert     digits(7) == 7",
        "num_ids": 815
    },
    {
        "number": 132,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    opening = '([{'\n    closing = ')]}'\n    opening_stack = []\n    for bracket in string:\n        if bracket in opening:\n            opening_stack.append(opening.index(bracket))\n        elif bracket in closing:\n            if not opening_stack:\n                return False\n            if closing.index(bracket)!= opening_stack.pop():\n                return False\n    return not opening_stack\n",
        "test": "assert     is_nested('(]') == False, 'is_nested(\"(]\")'",
        "num_ids": 1564
    },
    {
        "number": 133,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    s = 0\n    for i in lst:\n        s += math.ceil(i)**2\n    return s\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1018
    },
    {
        "number": 134,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in txt[:-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('hello world!') == False",
        "num_ids": 1363
    },
    {
        "number": 135,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    \n    length = len(arr)\n    \n    for i in range(length):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([1, 1, 1, 1]) == -1",
        "num_ids": 1010
    },
    {
        "number": 136,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a is None:\n                a = num\n            elif num > a:\n                a = num\n        elif num > 0:\n            if b is None:\n                b = num\n            elif num < b:\n                b = num\n    return (a, b)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1928
    },
    {
        "number": 137,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        a, b = float(a), float(b)\n    elif not isinstance(a, (float, int)):\n        a = float(a)\n    elif not isinstance(b, (float, int)):\n        b = float(b)\n    return max(a, b)\n",
        "test": "assert     compare_one(1, 1.5) == 1.5",
        "num_ids": 1381
    },
    {
        "number": 138,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    return all([\n        n % 2 == 0,\n        n / 2 % 2 == 0,\n        n / 4 % 2 == 0\n    ])",
        "test": "assert     not is_equal_to_sum_even(10)",
        "num_ids": 1117
    },
    {
        "number": 139,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    return 1 if n < 2 else n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 757
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"   \", \"-\")\n    return text\n    \ndef get_num_seqs(num_seqs):\n    \"\"\"\n    Given an integer num_seqs, return a string representing the number \n    of sequences as a number followed by a single character, as in \n    the following examples:\n    get_num_seqs(1) == \"1\"\n    get_num_seqs(2) == \"2\"\n    get_num_seqs(3) == \"3\"\n    \"\"\"\n    if num_seqs == 1:\n        return str(num_seqs)\n    elif num_seqs == 2:\n        return str(num_seqs) + \"_\"\n    else:\n        return str(num_seqs) + \"-\"\n    \ndef extract_spans(span_list):\n    \"\"\"\n    Given a list of pairs of integers, [1, 2], [2, 4], [3, 6]..., \n    extract a list of all consecutive sub-lists. For example, \n    \n    extract_spans([1, 2]) == [[1, 2]]\n    extract_spans([1, 2, 4]) == [[1, 2], [2, 4]]\n    extract_spans([1, 2, 4, 5]) == [[1, 2], [2, 4], [4, 5]]\n    extract_spans([1, 2, 4, 5, 6]) == [[1, 2], [2, 4], [4, 5], [5, 6]]\n    extract_spans([1, 2, 4, 5, 6, 7]) == [[1, 2], [2, 4], [4, 5], [5, 6], [6, 7]]\n    extract_spans([]) == []\n    extract_spans([1,2]) == []\n    extract_spans([1,2,3]) == []\n    \"\"\"\n    \n    def spans_helper(span_list, span):\n        if span_list == []:\n            return [span]\n        elif span_list[0][0] == span[0]:\n            return spans_helper(span_list[1:], span)\n        elif span_list[0][0] < span[0]:\n            return spans_helper(span_list[1:], span)\n        else:\n            return spans_helper(span_list[1:], span) + [span_list[0]]\n    return spans_helper(span_list, [span_list[0], span_list[1]])\n    \ndef get_target_string(span_list, target_label):\n    \"\"\"\n    For a given span_list, extract the string corresponding to the \n    target label, e.g., for span_list = [[1, 2], [3, 5]], target_label = \n    \"NE\" --> \"NE\"\n    target_string(\"NE\", span_list) == \"NE\"\n    \"\"\"\n    return \"\".join([target_label for i, j in span_list])\n",
        "test": "assert     fix_spaces(\"Hello_world\") == \"Hello_world\"",
        "num_ids": 2081
    },
    {
        "number": 141,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    \n    def file_name_checker(file_name):\n        \"\"\"docstring\"\"\"\n        \n        if file_name.isdigit():\n            return 'No'\n        elif '.' not in file_name:\n            return 'No'\n        elif file_name[:file_name.index('.')] == '':\n            return 'No'\n        elif file_name[file_name.index('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    \n    return file_name_checker(file_name)\n    ",
        "test": "assert     file_name_check('abc.123') == 'No'",
        "num_ids": 2230
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    return sum([lst[i]**2 for i in range(len(lst)) if i % 3 == 0 or i % 4 == 0 and i % 3!= 0])\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 2465
    },
    {
        "number": 143,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    return ''.join([word for word in sentence.split(' ') if len(word) > 1])\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 1137
    },
    {
        "number": 144,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "    return eval(str(x) +'/'+ str(n)) == int(eval(str(x) +'/'+ str(n)))\n",
        "test": "assert     simplify(\"4/8\", \"8\") == False",
        "num_ids": 2024
    },
    {
        "number": 145,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    result = sorted(nums, key=lambda x: [int(str(x)[0]), x])\n    return result\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 1838
    },
    {
        "number": 146,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    \n    if nums is None or len(nums) == 0:\n        return 0\n    \n    return sum(1 for num in nums if num > 10 and (int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1))",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9])     == 0",
        "num_ids": 1310
    },
    {
        "number": 147,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    if n < 1:\n        return 0\n    a = [i * i - i + 1 for i in range(n)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1) if (a[i] + a[j] + a[j + 1]) % 3 == 0])\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 1392
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    if planet1 == planet2: return ()\n    if planet1 not in planets or planet2 not in planets: return ()\n    planet1 = planets[planet1]\n    planet2 = planets[planet2]\n    sun = planets[\"Sun\"]\n    bf = lambda p1, p2: (p1[0]+p2[0], p1[1]+p2[1], p1[2]+p2[2])\n    ans = []\n    for p in planets.items():\n        if sun[0]-p[1][0] < p[1][0]-planet2[0] and sun[0]-p[1][0] > planet1[0]-p[1][0] and p[1][1] > planet2[1]:\n            ans.append(p[0])\n    return tuple(sorted(ans))\n",
        "test": "assert     bf('mars', 'jupiter') == ('mars', 'jupiter')",
        "num_ids": 2281
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    def key_sort(word):\n        return len(word)\n    return sorted(lst, key = key_sort)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 2340
    },
    {
        "number": 150,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    #print(n)\n    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \n",
        "test": "assert     x_or_y(3,3,3) == 3",
        "num_ids": 910
    },
    {
        "number": 151,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if not lst:\n        return 0\n    \n    total = 0\n    for x in lst:\n        if x < 0:\n            continue\n        elif not x % 2:\n            total += x*x\n        \n    return total",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1210
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    return [abs(guess[i] - score) for i,score in enumerate(game)]\n",
        "test": "assert     compare([1,2,3],[2,2,2]) == [1,0,1]",
        "num_ids": 2090
    },
    {
        "number": 153,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    extensions_strength = []\n    for extension in extensions:\n        strength = 0\n        for character in extension:\n            if character.isupper():\n                strength += 1\n            elif character.islower():\n                strength -= 1\n        extensions_strength.append(strength)\n    return '%s.%s' % (class_name, extensions[extensions_strength.index(max(extensions_strength))])\n",
        "test": "assert     Strongest_Extension(\"Dots\", ['Dots', 'Dots', 'Dots'])     == 'Dots.Dots'",
        "num_ids": 2625
    },
    {
        "number": 154,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    result = False\n    for i in range(1, len(a)):\n        if b in (a[i:] + a[:i]):\n            result = True\n            break\n    return result\n",
        "test": "assert     not cycpattern_check('hello', 'llohell')",
        "num_ids": 1076
    },
    {
        "number": 155,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = abs(num)\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)\n",
        "test": "assert     even_odd_count(1578) == (1, 3)",
        "num_ids": 1352
    },
    {
        "number": 156,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    if number <= 0:\n        return ''\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xl'\n    if number == 12:\n        return 'xc'\n    if number == 13:\n        return 'xci'\n    if number == 14:\n        return 'xcii'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'x'\n    if number == 30:\n        return 'l'\n    if number == 40:\n        return 'c'\n    if number == 50:\n        return 'd'\n    if number == 60:\n        return 'cd'\n    if number == 70:\n        return 'd'\n    if number == 80:\n        return 'cd'\n    if number == 90:\n        return 'cm'\n    if number == 100:\n        return 'c'\n    if number == 200:\n        return 'cl'\n    if number == 300:\n        return 'cc'\n    if number == 400:\n        return 'cc'\n    if number == 500:\n        return 'cd'\n    if number == 600:\n        return 'cd'\n    if number == 700:\n        return 'd'\n    if number == 800:\n        return 'd'\n    if number == 900:\n        return 'd'\n    if number == 1000:\n        return'm'\n    if number > 1000:\n        return ''\n",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 3356
    },
    {
        "number": 157,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    return (a*a + b*b == c*c) or (b*b + c*c == a*a) or (c*c + a*a == b*b)\n",
        "test": "assert     right_angle_triangle(7, 12, 5) == False",
        "num_ids": 1550
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    l = []\n    for word in words:\n        l.append(len(set(word)))\n    return [s for s,v in sorted(zip(words,l),key=lambda x:x[1])][0]\n",
        "test": "assert     find_max(['c', 'c', 'c', 'c', 'c', 'c', 'c']) == 'c'",
        "num_ids": 3317
    },
    {
        "number": 159,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    \n    # YOUR CODE HERE\n    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 881
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    # YOUR CODE HERE\n    res = 0\n    for op, num in zip(operator, operand):\n        if op == '+':\n            res += num\n        elif op == '-':\n            res -= num\n        elif op == '*':\n            res *= num\n        elif op == '//':\n            res //= num\n        elif op == '**':\n            res **= num\n        else:\n            pass\n    return res\n",
        "test": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"%\",\"**\"], [1,2,3,4,5,6]) == 1",
        "num_ids": 3522
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return ''.join([s[i].lower() if s[i].isalpha() else s[i] for i in range(len(s))])\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 1260
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == string_to_md5(\"\")",
        "num_ids": 1774
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return [ i for i in range(a, b + 1) if (i % 2 == 0 and i > 0) ]",
        "test": "assert generate_integers(10, 1) == []",
        "num_ids": 2055
    }
]