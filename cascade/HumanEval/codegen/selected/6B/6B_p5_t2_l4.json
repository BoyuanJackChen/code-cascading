[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert not has_close_elements([0.1, 0.9], 0.2)"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return split_substrings(paren_string, '()')\n",
        "test": "assert     separate_paren_groups(\"foo(bar(baz)bim\")     == [\"foo\", \"bar\", \"baz\", \"bim\"]"
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return int(number * 10 ** int(math.floor(math.log10(number)))) / 10 ** int(math.floor(math.log10(number)))\n",
        "test": "assert         truncate_number(2.1) == 2.0"
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, -1, -2, -3, 4]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    assert len(numbers) > 0, \"Cannot calculate Mean Absolute Deviation on an empty list\"\n    m = float(sum(numbers))/len(numbers)\n    return float(sum((abs(x - m) for x in numbers)))/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([0, 1, 2, 3]) == 1"
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if not numbers:\n        return []\n    return numbers[:1] + [delimeter] + numbers[1:]\n",
        "test": "assert     intersperse([], 1) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    level_stack = []\n    result = []\n",
        "test": "assert     parse_nested_parens(\"()()\") == [0]"
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"a\", \"ab\", \"ac\"], \"a\") == [\"a\", \"ab\", \"ac\"]"
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    sum_numbers, product_numbers = 0, 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    current_max = numbers[0]\n    max_elements = [numbers[0]]\n    for idx in range(1, len(numbers)):\n        current_max = max(current_max, numbers[idx])\n        max_elements.append(current_max)\n    return max_elements\n",
        "test": "assert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not string:\n        return string\n    # Try to find the prefix that comes before the longest postfix\n    # that is a palindrome.\n    longest_postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_postfix = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_postfix[::-1]\n",
        "test": "assert     is_palindrome('mom')"
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Converting string to list of integers\n    # Using int constructor to convert each character to its ascii value\n    # Using \"^\" operator to perform XOR on each pair\n    return ''.join(format(int(a, 2) ^ int(b, 2), 'b') for a, b in zip(a, b))\n",
        "test": "assert     string_xor('1010101', '1100010') == '0110111'"
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if strings is None or len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert     longest([\"a\", \"abcd\", \"abc\"]) == \"abc\""
    },
    {
        "number": 13,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n",
        "test": "assert     greatest_common_divisor(2, 3) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('') == []"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert "
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('PYTHON') == 6"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = []\n    \n    for i in range(len(music_string)):\n        current_letter = music_string[i]\n        if current_letter == 'o':\n            result.append(4)\n        elif current_letter == 'o|':\n            result.append(2)\n        elif current_letter == 'o|o':\n            result.append(1)\n        elif current_letter == 'o|o|':\n            result.append(0.5)\n        elif current_letter == 'o|o|o':\n            result.append(0.25)\n        elif current_letter == 'o|o|o|':\n            result.append(0.125)\n    \n    return result\n",
        "test": "assert     parse_music('o') == [4]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    count = 0\n    if string is None or substring is None:\n        return count\n    if len(substring) == 0:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"any thing\", \"any\") == 1, \"Expected 1\""
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    numbers = numbers.split(' ')\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "test": "assert     sort_numbers('zero') == 'zero'"
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"At least two elements required\")\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]\n",
        "test": "assert     find_closest_elements([100.1, 101.0, 103.0]) == (100.1, 103.0)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    numbers_min = min(numbers)\n    numbers_max = max(numbers)\n    scaling = 1.0 / (numbers_max - numbers_min)\n    offset = -numbers_min * scaling\n    return [scaling * (number + offset) for number in numbers]\n",
        "test": "assert     rescale_to_unit([1.1, 2.1, 3.1, 4.1, 5.1]) == [0.0, 0.5, 1.0, 1.5, 2.0]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [num for num in values if isinstance(num, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, \"4\", 5]) == [1, 2, 3, 5]"
    },
    {
        "number": 23,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    f = []\n    while n % 2 == 0:\n        f.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            f.append(i)\n            n //= i\n    if n > 2:\n        f.append(n)\n    return f\n",
        "test": "assert     factorize(10) == [2,5]"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return list(set(numbers))\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    flipped = []\n    for char in string:\n        if char.isupper():\n            flipped.append(char.lower())\n        elif char.islower():\n            flipped.append(char.upper())\n        else:\n            flipped.append(char)\n    return \"\".join(flipped)\n",
        "test": "assert     flip_case(\"a\") == \"A\""
    },
    {
        "number": 28,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"\", \"\", \"\", \"\", \"\"]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"c\") == [\"cat\"]"
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     get_positive([])    == []"
    },
    {
        "number": 31,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2, int(n ** 0.5) + 1):\n            if n % x == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(7) is True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if len(xs) % 2 == 1:\n        raise Exception('Find zero takes even polynomial only')\n    n = len(xs) // 2\n    for i in range(1, n):\n        if xs[2 * i - 1] == 0:\n            raise Exception('Invalid polynomial, there is no solution')\n    return (-1 + math.sqrt(1 + 4 * poly(xs, -1))) / 2\n",
        "test": "assert     poly([1, 1, 0, 3], 2) == 3"
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    new_list = []\n    for item in l:\n        if item % 3 == 0:\n            new_list.append(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "test": "assert     sort_third([]) == [], \"Incorrect\""
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     [0] == unique([0])"
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    n = n - 1\n    summation = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            summation += 1\n    return summation\n",
        "test": "assert     fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    even = [l[i] for i in range(0, len(l), 2)]\n    odd = [l[i] for i in range(1, len(l), 2)]\n    even.sort()\n    return even + odd\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    groups = [(s[3 * i:3 * i + 3] for i in range(len(s) // 3))]\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"jqwvz\") == \"axe\""
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_n_minus_1 = 2\n        fib_n_minus_2 = 3\n        for i in range(n-2):\n            fib_n = fib_n_minus_1 + fib_n_minus_2\n            fib_n_minus_2 = fib_n_minus_1\n            fib_n_minus_1 = fib_n\n        return fib_n\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert     triples_sum_to_zero([5, 3, -5, 0, -5]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    car_arr = [0] * n\n    for i in range(n):\n        car_arr[i] = [[False, 0] for i in range(n)]\n    for i in range(n):\n        car_arr[i][i] = [True, 0]\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] < n:\n                car_arr[i][j][1] += 1\n            if car_arr[j][i][0] and car_arr[j][i][1] < n:\n                car_arr[j][i][1] += 1\n    # check collision\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] > 1:\n                car_arr[i][j][1] -= 2\n    return sum([1 for i in range(n) for j in range(n) if car_arr[i][j][1] > 1])\n",
        "test": "assert     car_race_collision(3) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # YOUR CODE GOES HERE\n    a = set(l)\n    for i in l:\n        if -i in a:\n            return True\n    return False\n    raise NotImplementedError()\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"list is empty\""
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    res = \"\"\n    if x == 0:\n        return \"0\"\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res\n",
        "test": "assert     change_base(4, 10) == '4'"
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(2, 3)    == 3.0)"
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(1) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return (l[m] + l[~m]) / 2\n    \n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5"
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    #return is_palin(text[::-1])\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n",
        "test": "assert     is_palindrome(\"\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp(n - 1, p) * p) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\""
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\""
    },
    {
        "number": 52,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 0) == False"
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"hello\", \"hellO\") == False"
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "test": "assert     fib(1)     == 1"
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    bracket_count = 0\n    for i in range(0, len(brackets)):\n        if brackets[i] == '<':\n            bracket_count += 1\n        elif brackets[i] == '>':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    if bracket_count!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     not correct_bracketing(\"<\")"
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or \\\n           all(l[i] <= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([]) is True, \"Failed: monotonic([]) is True\""
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    l2.sort()\n    i, j = 0, 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            common.append(l1[i])\n            i += 1\n            j += 1\n    return common",
        "test": "assert     common([1, 1, 2, 3, 3], [2, 1, 4, 5]) == [1, 2]"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n % 2 == 0:\n        return 2\n    p = 3\n    while n % p!= 0:\n        p += 2\n    return p\n",
        "test": "assert     largest_prime_factor(2) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\")\")\n        elif bracket == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     not correct_bracketing(\"((()\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if xs == []:\n        return []\n    deriv = [xs[0]]\n    for i in range(1, len(xs)):\n        deriv.append(xs[i] * i)\n    return deriv\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # The following solution is not clean, and is not efficient enough.\n    # if n <= 1:\n    #     return n\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    # Using the common formula, we get this:\n    # (n - 1) * (n - 2) * (n - 3)\n    # which is a lot faster than the previous solution.\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    vowels = set('aeiou')\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "test": "assert         vowels_count('a') == 1"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Short circuit for negative shifts\n    if shift < 0:\n        return str(abs(shift)) + str(x)[:len(str(abs(shift)))]\n    # Shift digits\n    shift %= len(str(x))\n    shifted = str(x)[shift:] + str(x)[:shift]\n    return shifted\n",
        "test": "assert     circular_shift(123, 5) == 123"
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum([ord(x)-64 for x in s.upper() if x.isalpha()])\n",
        "test": "assert     digitSum(\"\") == 0, \"test 1\""
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    number_apples = s.split(\" \")[0]\n    number_oranges = s.split(\" \")[1]\n    number_fruits = int(number_apples) + int(number_oranges)\n    return number_fruits - int(number_apples) - int(number_oranges)\n",
        "test": "assert     fruit_distribution('1 2 2', 2) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if not arr: return []\n    return [arr.pop(arr.index(min(filter(lambda x: x % 2 == 0, arr)))), arr.index(min(arr))]\n",
        "test": "assert     [ [2, 1], [4, 1] ]     == pluck([ 2, 2, 4, 5, 6, 7, 8, 9 ])"
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    '''\n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    pivot = lst[0]\n    \n    #freq = 0\n    freq = lst.count(pivot)\n    \n    if freq == 0:\n        return -1\n    \n    for i in xrange(1, len(lst)):\n        if lst[i] > pivot:\n            freq += 1\n        \n    return pivot if freq > len(lst)/2 else -1\n    '''\n    \n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    pivot = lst[0]\n    \n    #freq = 0\n    freq = lst.count(pivot)\n    \n    if freq == 0:\n        return -1\n    \n    pivotIndex = lst.index(pivot)\n    \n    if pivotIndex > len(lst)/2:\n        return pivot\n    else:\n        return -1\n",
        "test": "assert     search([2, 3, 4, 5, 6]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not lst:\n        return []\n    out = []\n    i = 0\n    j = len(lst) - 1\n    minimum = min(lst)\n    maximum = max(lst)\n    while i <= j:\n        if lst[i] == minimum:\n            out.append(maximum)\n            i += 1\n        elif lst[j] == maximum:\n            out.append(minimum)\n            j -= 1\n        else:\n            out.append(lst[i])\n            out.append(lst[j])\n            i += 1\n            j -= 1\n    return out\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if a + b < c or b + c < a or a + c < b:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n",
        "test": "assert     triangle_area(2, 2, 3) == 0.83"
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # return ''.join(map(str,sorted(q))).lower() == ''.join(map(str,sorted(q))).lower()\n    return (sorted(q) == sorted(q)[::-1]) and (sum(q) <= w)\n",
        "test": "assert     will_it_fly([1,2,3,4], -3) == False,    \"The function should return False\""
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # compare each element to the next\n    # if there are differences, return the min of the differences\n    diff = []\n    for i, v in enumerate(arr):\n        try:\n            diff.append(abs(v - arr[i + 1]))\n        except IndexError:\n            pass\n    return min(diff)\n",
        "test": "assert     smallest_change([1, 2, 1, 2, 1, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert     total_match(['s', 't', 'r','s'], ['s', 't', 'r','s']) == ['s', 't', 'r','s']"
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for i in range(2, int(a / 2)):\n        if (a % i == 0):\n            return False\n    return True\n",
        "test": "assert     not is_multiply_prime(15)"
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if x < n:\n        return False\n    if x % n == 0:\n        return True\n    else:\n        return is_simple_power(x/n, n)",
        "test": "assert     is_simple_power(5, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    if a > 0:\n        return a**3 == int(a**3)\n    else:\n        return a**3 == -int(a**3)\n",
        "test": "assert iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    num = num.upper()\n    count = 0\n    for char in num:\n        if char in '0123456789ABCDEF':\n            count += 1\n    return count\n",
        "test": "assert     hex_key('') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # return str(bin(decimal).replace(\"0b\", \"\").zfill(8))\n    return \"{0:b}\".format(decimal)\n",
        "test": "assert     decimal_to_binary(0) == \"0\""
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not s or len(s) < 3:\n        return False\n    \n    seen = set()\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'E'}\n    grades = [grade_map[grade] for grade in grades]\n    return grades\n",
        "test": "assert     numerical_letter_grade([0, 0, 0, 0, 0]) == [\"E\", \"E\", \"E\", \"E\", \"E\"]"
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "test": "assert     prime_length(\"a\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum([1 for i in range(1, n + 1) if (i // 10) % 10 == 1 or (i % 10) == 1])",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return ''.join(str(int(i) % 2) for i in str(N))\n",
        "test": "assert     solve(0) == '0'"
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return lst[1::2]\n",
        "test": "assert     [2, 4] == add([1, 2, 3, 4, 5])"
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    import re\n    return re.sub('\\s+','', re.sub('[^\\w\\s]+','', s).strip()).lower()\n",
        "test": "assert         anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sorted(lst, key=lambda r: r[0])[::-1] + sorted(lst, key=lambda r: r[1])\n",
        "test": "assert     get_row([[1, 2, 3], [2, 3, 4], [1, 2, 3]], 2) == [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]"
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sorted(array)",
        "test": "assert     sort_array([1,2,3,4]) == [1,2,3,4]"
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    rotated = s[1:] + s[0]\n    return rotated\n",
        "test": "assert     encrypt(\"dog\") == \"ogd\""
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n",
        "test": "assert     next_smallest([1, 4, 3, 2, 9, 5, 10, 7]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return sum([1 if (S[i:i+2] == \"I\" and i > 1) else 0 for i in range(len(S))])\n",
        "test": "assert     is_bored(\"I am not bored\") == False"
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x):\n        return (x == int(x) and y == int(y) and z == int(z))\n    else:\n        return False\n",
        "test": "assert     any_int(1, 0, 1) == True"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    vowels = ['a','e','i','o','u']\n    \n    message = message.lower()\n    for v in vowels:\n        message = message.replace(v, '%s%s' % (v, v.lower()[1]))\n    return message\n",
        "test": "assert     encode('I can also') == 'I cAn oLu', encode('I can also')"
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    lst = list(filter(lambda x: x == 1, lst))\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "test": "assert     int(\"2\") == 2"
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i)!= str:\n            return False\n        if i.isupper():\n            return False\n        if i.islower():\n            pass\n        else:\n            return False\n    return True\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all the strings in the list are in upper case,\n    else return False. The function should return False if the given list is empty.\n    Examples:\n    check_list_case([\"apple\", \"banana\", \"mango\"]) should return True.\n    check_list_case([\"apple\", \"banana\", \"mango\"]) should return False.\n    check_list_case([\"Apple\", \"Banana\", \"Mango\"]) should return False.\n    check_list_case([\"apple\", \"Apple\", \"mango\"]) should return False.\n    check_list_case([\"Apple\", \"Apple\", \"Mango\"]) should return False.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for i in list:\n        if type(i)!= str:\n            return False\n        if i.isupper():\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({'a':'b'}) == True, \"Only string keys are accepted\""
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if n < 2:\n        return []\n    else:\n        return count_up_to(n-1) + [n]\n",
        "test": "assert     count_up_to(2) == [2]"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    product = 0\n    for i in range(len(str(a))):\n        product = product * int(str(a)[i]) * int(str(b)[i])\n    return product\n    \nif __name__ == \"__main__\":\n    print multiply(148, 412)\n    print multiply(19, 28)\n    print multiply(2020, 1851)\n    print multiply(14,-15)",
        "test": "assert     multiply(1, 12) == 1"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0].isupper():\n            return 1\n        else:\n            return 0\n    else:\n        if s[0].isupper():\n            return 1 + count_upper(s[1:])\n        else:\n            return count_upper(s[1:])\n            ",
        "test": "assert     count_upper(\"\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    value = int(float(value))\n    if abs(value) == value:\n        return value\n    elif value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "test": "assert     closest_integer(\"15\") == 15"
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n+1) // 2\n        stones.append(n)\n    return stones",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string(\"hello,world,hello,goodbye,world\") == [\"hello\",\"world\",\"hello\",\"goodbye\",\"world\"]"
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if x >= y:\n        return -1\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x+1, y)\n    elif x % 2 == 0 and y % 2!= 0:\n        return choose_num(x+1, y)\n    else:\n        return choose_num(x, y-1)\n",
        "test": "assert     choose_num(3, 4) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if n > m:\n        return -1\n    return format(int((n + m) / 2), 'b')\n",
        "test": "assert     rounded_avg(0, 1) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    def check_digit(x):\n        if x % 2 == 0:\n            return False\n        else:\n            return True\n",
        "test": "assert     unique_digits([123, 321]) == [1, 2, 3]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    a = arr[:]\n    a.sort()\n    a.reverse()\n    output = []\n    for i in a:\n        if i >= 1 and i <= 9:\n            output.append(names[i-1])\n    return output\n",
        "test": "assert     by_length([8, 9, 10, 11, 12, 1, 2, 3]) ==     \"EightOneTwoThreeTenElevenTwelveOne\""
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n == 1:\n        return [1]\n    n = n - 1\n    a = f(n)\n    if n%2 == 0:\n        return a + [i*a[n-i] for i in range(1, n/2+1)]\n    else:\n        return a + [sum(range(1, i+1)) for i in range(1, n+1)]\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n == 1:\n        return (1, 0)\n    even, odd = 0, 0\n    for i in xrange(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    count = 0\n    for num in arr:\n        if sum([int(x) for x in str(abs(num))]) > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not arr:\n        return True\n    N = len(arr)\n    for i in range(N):\n        #check if any permutation of arr[1:N] is sorted\n        perm = arr[1:N]\n        perm.sort()\n        if perm == arr:\n            return True\n        #check if arr[0] is sorted\n        if arr[0] <= arr[i]:\n            return True\n    return False\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    count1 = 0\n    count2 = 0\n    for i in lst1:\n        if i%2 == 0:\n            count1 += 1\n    for i in lst2:\n        if i%2 == 0:\n            count2 += 1\n    if count1 == count2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], []) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    hist = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n        else:\n            hist[c] = 1\n    return hist\n    \n",
        "test": "assert     histogram(\"aa\") == {'a': 2}"
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    result = \"\"\n    for i in s:\n        if i!= c:\n            result = result + i\n    if result[::-1] == result:\n        return (result,True)\n    return (result,False)\n",
        "test": "assert     reverse_delete('a','a') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return [len([str(i) for i in range(len(j)) if int(j[i])%2!=0]) for j in lst]\n",
        "test": "assert     odd_count([\"1\"]) == [1]"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == [4, -1, 2, 1]"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    m, n = len(grid), len(grid[0])\n",
        "test": "assert     max_fill([[0, 0, 0, 0, 0, 0], "
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    ret = []\n    counts = {}\n    for num in arr:\n        bits = bin(num)[2:]\n        count = bits.count('1')\n        if count not in counts:\n            counts[count] = [num]\n        else:\n            counts[count].append(num)\n    for count in sorted(counts.keys()):\n        ret.extend(sorted(counts[count]))\n    return ret\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    import re\n    return re.findall(r\"\\w+\", s)\n",
        "test": "assert     select_words(\"\", 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    vowels = set('aeiou')\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('code') == 'e'"
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')' and len(stack)!= 0:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens('(())') == 'Yes', \"First\""
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    arr = sorted(arr, reverse = True)\n    return arr[:k]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5, 6, 7], 1) == [7]"
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    res = 0\n    for i in lst:\n        if i%2 == 0:\n            res += i\n    return res\n",
        "test": "assert     [solution([1,2,3,4,5,6]) == 3, solution([1,2,3,4,5,6]) == 6, solution([1,2,3,4,5,6,7,8]) == 5]"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    return result\n",
        "test": "assert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 5 + 4 + 3 + 2 + 1"
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n/2) + [n]\n        else:\n            return get_odd_collatz(3*n + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1], \"Error: 1 -> [1]\""
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return True\n",
        "test": "assert     valid_date('12-31-2016') == True"
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # return [x.strip() for x in txt.split()]\n    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world']"
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4]) == True, 'Failed on simple case'"
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    if interval1[0] >= interval1[1]:\n        return \"NO\"\n    if interval2[0] >= interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection((1, 3), (4, 5)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # arr = list(arr)\n    # arr = list(filter(lambda x: x!= 0, arr))\n    # if len(arr) == 0:\n    #     return None\n    # arr = list(map(lambda x: int(x), arr))\n    # arr = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    # return sum(list(map(lambda x: x * arr.count(x), [1, -1, 0])))\n",
        "test": "assert     prod_signs([]) == None, \"should return None for empty arr\""
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # not possible to do with k = 0\n    if k == 0:\n        return None\n",
        "test": "assert     minPath([[1,3,5,8,9], [2,1,4,7,6], [3,6,5,4,3], [4,5,6,7,8], [5,4,3,2,1]], 3) == [1, 4, 5, 3, 2, 1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return [1, 3, 4, 7, 13, 24, 40, 44, 53, 80, 108, 143, 233, 377, 610, \n        987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\n        196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, \n        9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141,\n        267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073,\n        4807526976, 7778742049, 12586269025, 20365011074, 32951280099,\n        53316291173, 86267571272, 139583862445, 225851433717, 365435440873,\n        591286729879, 956722026041, 1548008755920, 2854297070329, 452175946849,\n        7207191770469, 11766903046095, 19039249070945, 3077004769879,\n        5334869499492, 7800666949103, 11697080991736, 184753434662863,\n        339001133777943, 505337567304944, 757923636632459, 1130940199009995,\n        1936435796729768, 3178114977251465, 579238010087579, 8944394323791483,\n        1597164401088304, 26533270950546025, 4181, 6765, 10946, 17711, 28657,\n        46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\n        3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\n        102334155, 165580141, 267914296, 433494437, 701408733, 1134903170,\n        1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\n        32951280099, 53316291173, 86267571272, 139583862445, 225851433717,\n        365435440873, 591286729879, 956722026041, 1548008755920, 2854297070329,\n        452175946849, 7207191770469, 11766903046095, 19039249070945, 3077004769879,\n        5334869499492, 7800666949103, 11697080991736, 184753434662863,\n        339001133777943, 505337567304944, 757923636632459, 1130940199009995,\n        1936435796729768, 3178114977251465, 579238010087579, 8944394323791483,\n        1597164401088304, 26533270950546025, 4181, 6765, 10946, 17711, 28657,\n        46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\n        3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\n        102334155, 165580141, 267914296, 433494437, 701408733, 1134903170,\n        1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\n        32951280099, 53316291173, 86267571272, 139583862445, 225851433717,\n        365435440873, 591286729879, 956722026041, 1548008755920, 2854297070329,\n        452175946849, 7207191",
        "test": "assert     tri(2) == 1 + (2 / 2) = 2"
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "test": "assert     digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    l = len(string)\n    r = 0\n    for i in range(l):\n        if string[i] == '[':\n            r += 1\n        else:\n            r -= 1\n        if r < 0:\n            return False\n    return True\n",
        "test": "assert     is_nested('([]{}') == False"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sum(x**2 for x in lst)\n    \n",
        "test": "assert     sum_squares([1, 2, 3, 4, 5, 6]) == (1 + 4 + 9 + 16 + 25 + 36)"
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # method:\n    return not txt[:-1].isalnum() and txt[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter('aabc!') == False"
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([2, 5, 6, 8, 9]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return None, None\n",
        "test": "assert     [largest_smallest_integers([-3, -2, -1, 1, 2, 3]) == (-1, 3)]"
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if isinstance(a, str) or isinstance(b, str):\n        if float(a) > float(b):\n            return b\n        else:\n            return a\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert         compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return n%2 == 0 and sum([i for i in range(1, n//2, 2) if n-i in range(1, n//2)])==n//2\n",
        "test": "assert     not is_equal_to_sum_even(11)"
    },
    {
        "number": 139,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    text = text.strip()\n    text = text.replace(\" \",\"_\")\n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "test": "assert     fix_spaces(\"Hello\") == \"Hello\""
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if '.' in file_name:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('asd.txt') == 'Yes', \"file_name_check('asd.txt') should be Yes\""
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    new_lst = [1 if (i%3 == 0) and (i%4!= 0) else i**2 for i in lst]\n    return sum(new_lst)\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return \"\".join(\n        [word for word in sentence.split(\" \") if len(word) > 0 and is_prime(len(word))]\n    )\n",
        "test": "assert     words_in_sentence(\"\") == \"\""
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return eval(str(x)+\"/\"+str(n)) == int(eval(str(x)+\"/\"+str(n)))\n",
        "test": "assert     simplify(\"1/2\", \"1/3\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if not nums:\n        return nums\n    sorted_nums = []\n    for i in range(len(nums)):\n        sorted_nums.append([nums[i], i])\n    sorted_nums.sort()\n    return [sorted_nums[i][0] for i in range(len(nums))]\n",
        "test": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and ((num // 10) % 10) % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([6, 4, 7, 1, 3, 5, 9, 10]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 1:\n        return 1\n    total = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    total += 1\n    return total\n",
        "test": "assert     get_max_triples(0) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    orbit = {'Sun': [], 'Mercury': [], 'Venus': [], 'Earth': [], 'Mars': [], 'Jupiter': [], 'Saturn': [], 'Uranus': [], 'Neptune': []}\n    for planet in orbit:\n        orbit[planet].append(planet)\n",
        "test": "assert     bf(\"Venus\", \"Earth\") ==     (\"Mercury\", \"Venus\")"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum(['excellent', 'excellent', 'amazing', 'excellent', 'list']) == ['excellent', 'excellent', 'list', 'amazing']"
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(1, 1, 2) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum([x**2 for x in lst if x % 2 == 1])\n",
        "test": "assert     double_the_difference([]) == 0, \"Should be 0\""
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    diff = [0]*len(guess)\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(guess[i]-game[i])\n    return diff\n",
        "test": "assert     compare([9,8,7,6,5,4,3,2,1,0],[9,8,7,6,5,4,3,2,1,0]) == [0,0,0,0,0,0,0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if len(extensions) == 1:\n        return class_name + \".\" + extensions[0]\n    elif len(extensions) == 0:\n        return class_name + \".None\"\n    else:\n        strengths = {}\n        for extension in extensions:\n            uppercase = 0\n            lowercase = 0\n            for letter in extension:\n                if letter.isupper():\n                    uppercase += 1\n                elif letter.islower():\n                    lowercase += 1\n            strengths[extension] = (uppercase - lowercase) / len(extension)\n        strongest = max(strengths.keys(), key = strengths.get)\n        return class_name + \".\" + strongest\n",
        "test": "assert     Strongest_Extension('Bananas', ['AbCDefG', 'abcdefg', 'xyz', 'Slices']) == 'Bananas.AbCDefG', 'Wrong'"
    },
    {
        "number": 154,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return bool(len(a) >= len(b)) and any(b in a for a in (b, a[::-1]))\n",
        "test": "assert     cycpattern_check('rope', 'rop') == True, \"Failed\""
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return (len(str(abs(num))), len(str(abs(num))) - len(str(abs(num)).lstrip('0')))\n",
        "test": "assert     even_odd_count(26) == (2, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    result = ''\n    arabic_to_roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'}\n    for arabic, roman in arabic_to_roman.iteritems():\n        while number >= arabic:\n            result += roman\n            number -= arabic\n    return result\n",
        "test": "assert     int_to_mini_roman(2) == 'ii'"
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True, \"Failed the right_angle_triangle test\""
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word\n",
        "test": "assert     find_max(['abc', 'a', 'b', 'c', 'abc']) == 'abc'"
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    if number >= need:\n        return [need, 0]\n    elif remaining < need:\n        return [remaining, 0]\n    else:\n        return [need, number - need]\n",
        "test": "assert     eat(0, 0, 0) == [0,0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     do_algebra([ADDITION, '+'], [5,4]) == 9"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    res = \"\"\n    for c in s:\n        if c.isalpha():\n            res += c.lower() if c.isupper() else c.upper()\n        else:\n            res += c\n    return res",
        "test": "assert     solve('asdf') == 'ASDF'"
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if text is None or text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return [n for n in range(a, b + 1) if n % 2 == 0]",
        "test": "assert     generate_integers(14,16) == [14,16]"
    }
]