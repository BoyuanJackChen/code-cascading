[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements(numbers=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], threshold=0.2)"
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    # naive solution: make sure that when we encounter an open, we put it in the list and when we find a close,\n    # put it in the front and pop it out of the list\n    # O(n) time complexity, where n is the number of open and close parentheses\n    result = []\n    # find all the open parentheses\n    open_parens = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            open_parens.append(i)\n        elif c == ')':\n            if open_parens:\n                result.append(paren_string[open_parens.pop():i + 1])\n    return result\n",
        "test": "assert     separate_paren_groups('(()') == ['()']"
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    new_num = int(number)\n    if new_num == number:\n        return new_num\n    else:\n        return round(number - new_num, 2)\n",
        "test": "assert     truncate_number(0.1) == 0.1"
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    result = False\n    for op in operations:\n        result = result or op < 0\n    return result\n",
        "test": "assert     below_zero([1,2,3,4,5]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    return _mean_absolute_deviation(numbers)\n",
        "test": "assert "
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    return [numbers[0]] + [delimeter] * (len(numbers) - 1) + [numbers[-1]]\n",
        "test": "assert     intersperse([1,2,3], 2) == [1, 2, 2, 3]"
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    paren_stack = []\n    current_paren_stack_depth = 0\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(index)\n            current_paren_stack_depth += 1\n        elif char == ')':\n            current_paren_stack_depth -= 1\n            if current_paren_stack_depth == 0:\n                break\n            else:\n                paren_stack.pop()\n    return paren_stack\n",
        "test": "assert     parse_nested_parens(\"()\") == [0]"
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\"], \"\") == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 8,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    sum, product = 0, 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    maximums: List[int] = [max(numbers[:i + 1]) for i in range(len(numbers))]\n    return maximums\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    postfix, suffix = longest_postfix(string)\n    return string[:len(string) - len(postfix)] + suffix + suffix[::-1]\n",
        "test": "assert         is_palindrome('tacocat') is True"
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor('1', '1') == '0'"
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(6, 24) == 6"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"\")     == []"
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "test": "assert     '0 1 2 3 4' == string_sequence(4)"
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    string = string.lower()\n    count = len(set(string))\n    return count\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    music_list = music_string.split()\n    return [len(x) for x in music_list]\n",
        "test": "assert     parse_music(\"\") == []"
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if not substring: return 0\n    count = 0\n    while True:\n        start = string.find(substring)\n        if start == -1: break\n        count += 1\n        string = string[start+1:]\n    return count\n",
        "test": "assert     how_many_times('Hello, World!', 'hi') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    numbers_list = numbers.split(\" \")\n    numbers_list.sort()\n    return''.join(numbers_list)\n",
        "test": "assert     sort_numbers('9') == '9'"
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    smallest_difference = None\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if smallest_difference is None or difference < smallest_difference:\n                smallest_difference = difference\n                closest_numbers = numbers[i], numbers[j]\n    return closest_numbers\n",
        "test": "assert     find_closest_elements([3.3, 4.5, 7.8]) == (3.3, 4.5)"
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    numbers.sort()\n    minimum = numbers[0]\n    maximum = numbers[-1]\n    result = []\n    for x in numbers:\n        new_value = (x - minimum) / (maximum - minimum)\n        result.append(new_value)\n    return result\n",
        "test": "assert     rescale_to_unit([0.0, 1.0]) == [0.0, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    largest = 1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            largest = i\n            if i*i!= n:\n                largest = int(n / i)\n        i += 1\n    return largest\n",
        "test": "assert     largest_divisor(6) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if n < 2:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     remove_duplicates([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"dziesie\u0144\", \"tysi\u0105c\", \"rok\"]) == \"dziesie\u0144tysi\u0105crok\""
    },
    {
        "number": 29,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     len(filter_by_prefix([\"a\", \"ab\", \"ac\", \"b\"], \"b\")) == 1"
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1,2,3,4,5,-2,-2,-2]) == [1,2,3,4,5]"
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False"
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if len(xs) % 2 == 1:\n        raise Exception(\"You are trying to find zero of a polynomial with odd number of coefficients\")\n    negative_coeff = False\n    for i in range(len(xs)):\n        if xs[i] < 0:\n            negative_coeff = True\n    if negative_coeff:\n        raise Exception(\"You cannot find zero of a polynomial with negative coefficient.\")\n    zeros = []\n    for i in range(0, len(xs), 2):\n        if xs[i] == 0:\n            zeros.append(xs[i+1])\n    if len(zeros) == 0:\n        raise Exception(\"Could not find any zero.\")\n    return zeros[0]\n",
        "test": "assert     poly([-2, 5, 1], 0) == -2"
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    sort_index = 0\n    for x in l:\n        if sort_index % 3 == 0:\n            if x!= l[sort_index]:\n                l[sort_index] = l[sort_index-1]\n        if sort_index % 3 == 1:\n            if x!= l[sort_index]:\n                l[sort_index] = l[sort_index-1]\n        if sort_index % 3 == 2:\n            if x!= l[sort_index]:\n                l[sort_index] = l[sort_index-1]\n        sort_index += 1\n    return l\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([]) == []"
    },
    {
        "number": 35,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n",
        "test": "assert     max_element([1, 2, 3, 4]) == 4"
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return sum(s == 7 for s in str(n) if s in '713')\n",
        "test": "assert     fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if len(l) == 0:\n        return l\n    else:\n        return l[0:len(l)//2] + [sorted(l[len(l)//2:len(l)])[0]] + l[len(l)//2+1:len(l)]\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    groups = [s[i:min(i + 3, len(s))] for i in range(0, len(s), 3)]\n    return \"\".join(groups)",
        "test": "assert     encode_cyclic(\"a\") == \"a\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    num_1 = 1\n    num_2 = 2\n    for i in range(1, n):\n        num_1, num_2 = num_2, num_1 + num_2\n    return num_1\n",
        "test": "assert     prime_fib(10) == 89"
    },
    {
        "number": 40,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    # Your Code Here\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]"
    },
    {
        "number": 43,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        s.add(i)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "test": "assert     change_base(1, 10) == '1'"
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(3, 4) == 6), \"Error in function triangle_area\""
    },
    {
        "number": 46,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a = 0\n        b = 1\n        c = 0\n        d = 2\n        while d <= n:\n            c = a + b\n            a = b\n            b = c\n            d += 1\n        return c\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    l.sort()\n    halfway = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[halfway - 1] + l[halfway]) / 2\n    return l[halfway]\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return modp(n - 1, p) * p\n",
        "test": "assert 0000000000000000000000000000000 % 69413 == 0"
    },
    {
        "number": 50,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"hello\") == \"mjqqt\""
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    output = []\n    for i in text:\n        if i.lower() not in vowels:\n            output.append(i)\n    return ''.join(output)\n",
        "test": "assert     remove_vowels('hello') == 'hll'"
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 3) == False"
    },
    {
        "number": 53,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return x + y\n",
        "test": "assert     add(3, 4) == 7"
    },
    {
        "number": 54,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars(\"Hello World\", \"Hello World\")"
    },
    {
        "number": 55,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    brackets = brackets.replace(\"<>\", \"\")\n    return all(x == '>' for x in brackets)\n",
        "test": "assert     correct_bracketing(\"<<><\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return all(l[i] >= l[i - 1] for i in range(1, len(l))) or all(l[i] <= l[i - 1] for i in range(1, len(l)))\n",
        "test": "assert     monotonic([1, 2, 3]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common(list(range(10)), list(range(10))) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    assert n > 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n",
        "test": "assert     7 % 2 == 1"
    },
    {
        "number": 60,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n",
        "test": "assert     sum_to_n(5) == 1+2+3+4+5"
    },
    {
        "number": 61,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    out = [xs[i] if i == 0 else xs[i] * i for i in range(len(xs))]\n    return out\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    vowels = 0\n    for char in s:\n        if char in 'aeiou':\n            vowels += 1\n    if s[-1] in 'aeiouy':\n        vowels += 1\n    return vowels\n",
        "test": "assert     vowels_count(\"xuan\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    digs = str(x)\n    digs = digs[-shift:] + digs[:-shift]\n    return digs\n",
        "test": "assert     circular_shift(2, 1) == '2'"
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return sum(ord(c)-64 for c in s.upper() if c.isalpha())\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    return n - s.count(\"apples\") - s.count(\"oranges\")\n",
        "test": "assert     fruit_distribution('apples,oranges,mango', 3) == 1"
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    lst.sort(reverse = True)\n    count = 0\n    for i in lst:\n        if i > 0 and count <= i:\n            count = i\n    return -1 if count == 0 else count\n",
        "test": "assert     search([3, 1, 2, 2, 2, 3, 3, 3]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    lst.sort()\n    if not lst:\n        return []\n    else:\n        start = lst[0]\n        end = lst[-1]\n        return [start] + strange_sort_list(lst[1:len(lst)-1]) + [end]\n",
        "test": "assert     strange_sort_list([2, 3, 4, 1]) == [1, 2, 3, 4]"
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round(sides[0] * sides[1] / 2, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(10, 15, 30) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # Complete this function\n    if q == q[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([10, 100, 1000, 100], 100) is False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    s1, s2 = sum(arr), sum(arr[::-1])\n    if s1 == s2:\n        return 0\n    return s1 - s2\n",
        "test": "assert     smallest_change([1,2,3]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst2) > len(lst1):\n        return lst2\n    return lst1\n",
        "test": "assert     total_match(['a','bb','cc','ee'], ['a','bb','cc']) == ['a','bb','cc','ee']"
    },
    {
        "number": 75,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, int(math.sqrt(a))+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(6) == False, \"Wrong\""
    },
    {
        "number": 76,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return x == n or n == 1 or x % n == 0\n",
        "test": "assert     is_simple_power(2, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if a == 0 or a < 0:\n        return True\n    while a!= 1:\n        if a % 3!= 0:\n            return False\n        a = a / 3\n    return True\n",
        "test": "assert     iscube(1) is True"
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return 0\n",
        "test": "assert     hex_key(\"\") == 0"
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    # Convert decimal to binary\n    return bin(decimal)[2:]\n",
        "test": "assert     decimal_to_binary(45) ==     '101101'"
    },
    {
        "number": 80,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    distinct_chars = set()\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
        "test": "assert     is_happy('a') == False"
    },
    {
        "number": 81,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']"
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return len(string) == len(set(string))\n",
        "test": "assert     prime_length(\"\") == True"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    if n == 1:\n        return 0\n",
        "test": "assert     starts_one_ends(1) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # First convert the integer into a string.\n    s = str(N)\n    # Initialize the result as an empty string.\n    r = \"\"\n    # Loop through each character in the string.\n    for c in s:\n        # Convert the string to binary and add the character to the result.\n        r += str(int(c) % 2)\n    # Return the result.\n    return r\n",
        "test": "assert     solve(1)         ==     \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    return lst[1::2]\n",
        "test": "assert     (add([1,2,3,4,5]) == [2, 4])"
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return''.join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    #print(lst)\n    \n    output = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            output.append((i, lst[i].index(x)))\n    #print(output)\n    return output\n",
        "test": "assert     get_row([], 0) == []"
    },
    {
        "number": 88,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([4, 2, 3, 6, 7, 5, 8]) == [2, 3, 4, 5, 6, 7, 8]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return ''.join([cipher[(cipher.index(c) + 2) % 26] for c in s])\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    lst.sort()\n    return None if not lst else lst[1]\n",
        "test": "assert     next_smallest([]) is None"
    },
    {
        "number": 91,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    count = 0\n    for sentence in S.split(\".\"):\n        if \"I\" in sentence:\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"I am bored\") == True"
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if (x==y+z) and (type(x)==type(y)==type(z)) and (x % 1==0) and (y % 1==0) and (z % 1==0):\n        return True\n    else:\n        return False\n        \nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n",
        "test": "assert     any_int(0, 0, 0)"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    def swap_case(word):\n        if len(word)==1:\n            return word\n        elif word[0].isupper():\n            return word[0].lower()+word[1:].lower()\n        else:\n            return word[0].upper()+word[1:].upper()\n    return \"\".join(map(swap_case,message))\n    ",
        "test": "assert         (encode(\"if you like you can\") == "
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    def is_prime(n):\n        if n in [1,2]: return True\n        if n < 2: return False\n        if n%2 == 0: return False\n        for i in range(3,int(sqrt(n))+1,2):\n            if n%i == 0: return False\n        return True\n    from functools import reduce\n    return reduce(lambda x,y: x*10 + y, map(int,str(max(lst))))\n",
        "test": "assert         9 == skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    if len(dict) < 1:\n        return False\n    for key in dict.keys():\n        if isinstance(key,str):\n            if key.lower()!= key:\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({\"a\": \"s\", \"b\": \"S\"}) == True, \"mixed case\""
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    if n == 0:\n        return []\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    product = int(a) * int(b)\n    return product\n",
        "test": "assert     multiply(0, 9)     == 0"
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    count = 0\n    for c in s:\n        if c.isupper() and c.isalpha():\n            if c.isupper() and c.isalpha():\n                index = ord(c) - ord('A')\n                if index % 2 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     count_upper(\"dummy\") == 0, \"Wrong result for [dummy]\""
    },
    {
        "number": 99,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num)\n",
        "test": "assert     closest_integer(\"7\") == 7"
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    pile = [n]\n    while pile[-1] > 1:\n        pile.append(pile[-1] - 2 if pile[-1] % 2 else pile[-1] - 1)\n    return pile\n",
        "test": "assert     make_a_pile(1)         == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    import re\n    s = re.split(r\"[,\\s]+\", s)\n    return s\n    \n",
        "test": "assert     words_string(\"hello\") == ['hello']"
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if x == y:\n        return -1\n    elif x > y:\n        return choose_num(y, x)\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x / 2, y / 2)\n    elif x % 2!= 0 and y % 2!= 0:\n        return choose_num((x + 1) / 2, (y + 1) / 2)\n    else:\n        return choose_num(x / 2, (y - 1) / 2)\n",
        "test": "assert     choose_num(0, 0) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    if n < m:\n        return -1\n    \n    avg = 0\n    for x in range(n, m+1):\n        avg += x\n    \n    return bin(avg//(m-n+1))[2:]\n",
        "test": "assert     rounded_avg(1,2) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits( [1,3,5,7,9] )     == [1,3,5,7,9]"
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    if arr == []:\n        return []\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][::-1]\n    return arr\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(i*sum(range(1, i+1)))\n    return l\n",
        "test": "assert     f(1) == [1], \"f(1) = [1]\""
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    return (sum(1 for n in range(1, n) if is_palindrome(n)), sum(1 for n in range(1, n) if not is_palindrome(n)))\n",
        "test": "assert     even_odd_palindrome(1) == (0, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if len(arr) == 0:\n        return 0\n    total = 0\n    for num in arr:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        if sum_of_digits > 0:\n            total += 1\n    return total\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    for lst1_i in lst1:\n        for lst2_i in lst2:\n            if lst1_i % 2!= 0 and lst2_i % 2 == 0:\n                lst1.remove(lst1_i)\n                lst1.append(lst2_i)\n                return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5, 6], [1, 3, 5, 7, 9, 11]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    \n    res = {}\n    \n    for i in test:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    \n    return res\n",
        "test": "assert     histogram('abcde') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    for i in s:\n        if i in c:\n            s = s.replace(i,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete('ac', 'ac') == ('', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return [\"the number of odd elements %n the str%ng %s of the %nput.\" %(str(len(lst[i])).count('1'),\n        i,str(len(lst[i])).count('1'),i)\n        for i in range(len(lst))]\n",
        "test": "assert     odd_count(['1', '2', '3']) == [0, 0, 0]"
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    subarray_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        subarray_sum = min(nums[i], subarray_sum + nums[i])\n        if subarray_sum < min_sum:\n            min_sum = subarray_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1, minSubArraySum([1])"
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    import numpy as np\n    def maximum_amount_cap(grid, capacity):\n        return sum([sum(g) for g in grid])//capacity\n    \n    def available_capacity(grid, capacity):\n        return np.prod([capacity-np.sum(g) for g in grid])\n    \n    return maximum_amount_cap(grid, capacity) - available_capacity(grid, capacity)\n",
        "test": "assert     max_fill([[0,1], [1,0]], 2) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    arr.sort(key=lambda x: (len(bin(x)[2:]), x))\n    return arr\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if s == \"\":\n        return []\n    else:\n        #return [word for word in s.split() if word.count(\"\") <= n]\n        return [word for word in s.split() if len([i for i in word if i.isalpha()]) == n]\n",
        "test": "assert     select_words(\"\", 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    #for i, letter in enumerate(reversed(word)):\n    #    if letter.lower() in vowels:\n    #        return word[-1-i]\n    \n    #return word[-1]\n    \n    word = word.lower()\n    for i, letter in enumerate(reversed(word)):\n        if letter.lower() in vowels:\n            return word[-1-i]\n    \n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"apple\") == \"e\""
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    opening_brackets = ['(', '{', '[', '<', '[']\n    closing_brackets = [')', '}', ']', '>', ']']\n    stack = []\n    for c in lst:\n        if c in opening_brackets:\n            stack.append(c)\n        elif c in closing_brackets:\n            if len(stack) == 0:\n                return 'No'\n            last_element = stack.pop()\n            if c == ')' and last_element!= '(':\n                return 'No'\n            if c == '}' and last_element!= '{':\n                return 'No'\n            if c == ']' and last_element!= '[':\n                return 'No'\n            if c == '>' and last_element!= '[':\n                return 'No'\n            if c == ']' and last_element!= '<':\n                return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens('()())') == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    ans = []\n    for i in range(k):\n        ans.append(max(arr))\n        arr.remove(max(arr))\n    return ans\n",
        "test": "assert     maximum([], 0) == []"
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    ans = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                ans += lst[i]\n    return ans\n",
        "test": "assert     solution([1, 3, 5]) == 0,     \"Second\""
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    res = 0\n    for i in range(k):\n        res += arr[i]\n    return res\n",
        "test": "assert     add_elements([1,1,1,1,1], 3) == 3"
    },
    {
        "number": 123,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    if n == 1:\n        return [1]\n    seq = get_odd_collatz(n//2)\n    if n % 2 == 0:\n        seq.append(n)\n    else:\n        seq.append(n*3 + 1)\n    return sorted(seq)\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    return False\n",
        "test": "assert     valid_date('2-1-2020') == False"
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    words = txt.split()\n    return words\n    \ndef find_missing_letter(txt):\n    '''\n    Given a string of letters, return a string of missing letters.\n    Examples\n    find_missing_letter(\"abcdef\") \u279e \"missing letter(s) is(are) e\"\n    find_missing_letter(\"adf\") \u279e \"missing letter(s) is(are) f\"\n    find_missing_letter(\"abcef\") \u279e \"\"\n    '''\n    letters = {}\n    for c in txt:\n        if c not in letters:\n            letters[c] = 1\n    \n    for i in range(ord('a'), ord('z')+1):\n        if i not in letters:\n            return chr(i)\n    \n    return ''\n    \ndef find_longest_word(words):\n    '''\n    Given a list of words, find the word with the most letters in it.\n    Examples\n    find_longest_word([\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]) \u279e \"world\"\n    find_longest_word([\"one\", \"two\", \"three\"]) \u279e \"three\"\n    find_longest_word([\"one\", \"two\", \"three\", \"four\"]) \u279e \"four\"\n    '''\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    \n    return longest\n    \ndef longest_word(txt):\n    '''\n    Given a string of words, return the length of the longest one.\n    Examples\n    longest_word(\"Hello world\") \u279e 12\n    longest_word(\"one\") \u279e 4\n    longest_word(\"This is a test\") \u279e 12\n    '''\n    words = split_words(txt)\n    return len(find_longest_word(words))\n    \ndef count_hi(txt):\n    '''\n    Given a string, return the number of times 'hi' appears in the string, ignore case.\n    Examples\n    count_hi('HiHiHiHi') \u279e 4\n    count_hi('hihi') \u279e 1\n    '''\n    return txt.lower().count('hi')\n    \ndef cat_dog(txt):\n    '''\n    Given a string, return True if the string contains the cat followed by the dog, and False otherwise.\n    Examples\n    cat_dog('CatDog') \u279e True\n    cat_dog('catdog') \u279e True\n    cat_dog('CatDOG') \u279e False\n    '''\n    return txt.lower().count('cat') == 1 and txt.lower().count('dog') == 1\n    \ndef count_code(txt):\n    '''\n    Given a string of code words, you need to find the number of different types of code words.\n    Examples\n    count_code(\"aaabbcxyz12345\") \u279e 4\n    count_code(\"abcxyz123\") \u279e 3\n    count_code(\"aabbccddeeffffggghhhhh\") \u279e 5\n    '''\n    count = 0\n    words = split_words(txt)\n    code_types = {}\n    for word in words:\n        if word[:3] == 'co' and word[3] in '0123456789':\n            code_type = word[3]\n            if code_type not in code_types:\n                count += 1\n                code_types[code_type] = 1\n            else:\n                code_types[code_type] += 1\n    \n    return count\n    \ndef count_words(txt, word):\n    '''\n    Given a string of words and a string of letters, count the number of times a word and letter appears in the string and return it.\n    Examples\n    count_words(\"The cat in the hat\", \"cat\") \u279e 2\n    count_words(\"This is a test\", \"t\") \u279e 3\n    count_words(\"This is a test\", \"is\") \u279e 0\n    '''\n    count = 0\n    words = split_words(txt)\n    \n    for word in words:\n        if word.lower() == word and word.lower() == word:\n            count += 1\n    \n    retur",
        "test": "assert     split_words(\"a\") == [\"a\"]"
    },
    {
        "number": 126,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    lst = [int(i) for i in lst]\n    if len(set(lst)) == len(lst):\n        return True\n    return False\n",
        "test": "assert         is_sorted([1, 2, 3, 4, 2]) == False"
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    # x = (interval1[0], interval1[1])\n    # y = (interval2[0], interval2[1])\n    x1, x2 = interval1\n    y1, y2 = interval2\n    if x2 < x1 or y2 < y1:\n        return \"NO\"\n    if x1 <= y2 and x2 >= y1:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     intersection([1,2], [3,4]) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = []\n    for i in arr:\n        if i > 0:\n            signs.append(1)\n        elif i < 0:\n            signs.append(-1)\n        else:\n            signs.append(0)\n    return sum(abs(i) * j for i,j in zip(arr, signs))\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    N = len(grid)\n    if N == 0: return []\n",
        "test": "assert     minPath(["
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    # n = int(n)\n    t = [1,1,1]\n    if n <= 3:\n        return t[:n]\n    for i in range(3,n+1):\n        if i % 2 == 0:\n            t.append(t[i-1] + t[i-2])\n        else:\n            t.append(t[i-1] + t[i-2] + t[i-3])\n    return t\n",
        "test": "assert     tri(3) == 2"
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    n = abs(n)\n    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    string_in_brackets = []\n    list_of_brackets = []\n    # find all the brackets\n    for i in range(len(string)):\n        if string[i] == '[':\n            list_of_brackets.append(i)\n        elif string[i] == ']':\n            list_of_brackets.append(i)\n        elif string[i] == '(':\n            list_of_brackets.append(i)\n        elif string[i] == ')':\n            list_of_brackets.append(i)\n    \n    for bracket in list_of_brackets:\n        string_in_brackets.append(string[bracket + 1 :])\n    \n    # check if the string in brackets are nested\n    for bracket in string_in_brackets:\n        if bracket.count('[') > bracket.count(']'):\n            return False\n    return True\n",
        "test": "assert     not is_nested(']()[')"
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return sum([round(x**2) for x in lst])\n",
        "test": "assert     sum_squares([1, 2, 3, 4, 5]) == 55"
    },
    {
        "number": 134,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    txt = txt.rstrip()\n    #your code here\n    return txt[-1].isalpha() and not txt[-1].isnumeric()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"what's a dt?\") == False, 'WRONG!!'"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    for i, val in enumerate(arr):\n        if i == 0:\n            continue\n        if val >= arr[i-1]:\n            continue\n        else:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([5, 2, 4, 6]) == 1"
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    n = [x for x in lst if x < 0]\n    p = [x for x in lst if x > 0]\n    return (max(n) if len(n) else None, min(p) if len(p) else None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if type(a) is type(b):\n        return a if a > b else b\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    return a if a > b else b\n",
        "test": "assert     compare_one(3.1, 2.9) == 3.1"
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return sum([x for x in range(2,n,2) if x <= n and n % x == 0]) == n\n",
        "test": "assert     is_equal_to_sum_even(101) == False"
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return text.replace(' ', '_').replace('  ', '-')\n",
        "test": "assert         fix_spaces('') == ''"
    },
    {
        "number": 141,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    import re\n    if not re.search('[0-9]', file_name):\n        return 'Yes'\n    elif not re.search('\\.', file_name):\n        return 'No'\n    else:\n        if not re.search('^[a-zA-Z]', file_name):\n            return 'No'\n        elif not re.search('[exe|dll|txt]', file_name):\n            return 'No'\n        else:\n            return 'Yes'\n",
        "test": "assert     file_name_check('123.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    \n    return sum(i*i for i in lst if i>0 and (i*i)%3==0 or (i*i)%4==0 and i*i<0)\n",
        "test": "assert     [sum_squares([1, 2, 3, 4, 5, 6, 7]) == 1 + 4 + 25 + 36]"
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) > 2])\n",
        "test": "assert     words_in_sentence(\"hello world\") == \"helloworld\""
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    x = x.split('/')\n    n = n.split('/')\n    if (x[0] == \"0\"):\n        return False\n    if (x[1] == n[1]):\n        return True\n    else:\n        a = int(x[0]) * int(n[1])\n        b = int(x[1]) * int(n[0])\n        if (a > b):\n            a = a % b\n        else:\n            b = b % a\n        if (a == 0):\n            return True\n        return False\n",
        "test": "assert     simplify('4/2', '2/1') == False, 'Failed simple test'"
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    new_list = []\n    result = []\n    for i in nums:\n        sum_of_digits = 0\n        for j in str(i):\n            sum_of_digits += int(j)\n        new_list.append((sum_of_digits, i))\n    new_list.sort()\n    for k in new_list:\n        result.append(k[1])\n    return result\n",
        "test": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    return sum(1 for i in nums if i > 10 and (i % 10)!= 0 and ((i % 100) / 10) % 2!= 0)\n",
        "test": "assert     specialFilter([2, 4, 6, 8, 10, 12, 14]) == 2"
    },
    {
        "number": 147,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    a = [0] * n\n    count = 0\n    for i in range(n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            count += 1\n    return count",
        "test": "assert     get_max_triples(0) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    orbit1 = planets.index(planet1)\n    orbit2 = planets.index(planet2)\n    if orbit1 > orbit2:\n        orbit1, orbit2 = orbit2, orbit1\n    if orbit2 >= orbit1:\n        return tuple(planets[orbit1:orbit2+1])\n    return tuple()\n    \n    \n",
        "test": "assert     bf('Venus', 'Earth') == ('Venus', 'Earth')"
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return sorted(lst, key=lambda word: len(word))\n",
        "test": "assert     sorted_list_sum(['aa', 'bb', 'cc', 'dd']) == ['aa', 'bb', 'cc', 'dd']"
    },
    {
        "number": 150,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n    ",
        "test": "assert     x_or_y(11, 11, 11) == 11"
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    diff = 0\n    for x in lst:\n        if x % 2!= 0 and x > 0:\n            diff += x * x\n    return diff\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    guesses = []\n    for i, num in enumerate(guess):\n        if num == game[i]:\n            guesses.append(0)\n        else:\n            guesses.append(abs(guess[i]-game[i]))\n    return guesses\n",
        "test": "assert     compare([1,2,3,4],[1,2,3,4]) == [0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    strongest_extension = extensions[0]\n    strongest_strength = -1\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return '{0}.{1}'.format(class_name, strongest_extension)\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    rotated = a + a\n    if b in rotated or b in rotated[1:]:\n        return True\n    else:\n        return False",
        "test": "assert     not cycpattern_check(\"hello\", \"helo\")"
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    while num:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num //= 10\n    return even_digits, odd_digits\n",
        "test": "assert     even_odd_count(123) == (1,2), 'incorrect'"
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    result = ''\n    roman = {1:'i', 4:'iv', 5:'v', 9:'ix', 10:'x', 40:'XL', 50:'L', 90:'XC', 100:'C', 400:'CD', 500:'D', 900:'CM', 1000:'M'}\n    for key in sorted(roman, reverse=True):\n        while number >= key:\n            result += roman[key]\n            number -= key\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)\n    ",
        "test": "assert     right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    word_list = words\n    words = sorted(words, key=len)\n    max_count = 0\n    for i in range(len(words)):\n        if len(words[i]) == max_count:\n            if words[i] < words[i-1]:\n                max_count = 0\n        else:\n            max_count = len(words[i])\n    return words[0]\n",
        "test": "assert     find_max([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"]) == \"a\""
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    \n    if remaining < need:\n        return [0, number]\n    \n    return [number + need, remaining - need]\n",
        "test": "assert     eat(0,0,0) == [0,0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    if not s:\n        return \"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result",
        "test": "assert     solve(\"Hi\") == \"hI\""
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return [n for n in range(a, b) if n % 2 == 0]\n",
        "test": "assert generate_integers(2, 3) == [2]"
    }
]