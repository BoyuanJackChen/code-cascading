[
    {
        "number": 0,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 2) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    open_paren = 0\n    close_paren = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren += 1\n        elif paren_string[i] == ')':\n            close_paren += 1\n        if open_paren == close_paren:\n            paren_groups.append(paren_string[open_paren:close_paren+1])\n            open_paren = 0\n            close_paren = 0\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"((a))\") == [\"((a))\"]"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(0.123456) == 0.123456"
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n            if balance < 0:\n                return True\n    return False\n",
        "test": "assert     below_zero([]) is False"
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    # TODO: maybe not correct\n    numbers = sorted(numbers)\n    return (numbers[len(numbers) // 2] - numbers[0]) / (len(numbers) // 2)\n",
        "test": "assert     mean_absolute_deviation([-1.0, -1.0, -1.0, -1.0, -1.0]) == 0"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    return [delimeter] + [numbers[idx + 1] for idx in range(len(numbers) - 1)] + [delimeter]\n",
        "test": "assert     intersperse([1,2,3,4,5], 1) == [1, 2, 3, 4, 5, 1]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    max_nesting = 0\n    stack = []\n    max_nesting_list = []\n    current_nesting = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_nesting += 1\n            max_nesting_list.append(current_nesting)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n                current_nesting -= 1\n    max_nesting_list.append(current_nesting)\n    return max_nesting_list\n",
        "test": "assert     parse_nested_parens(\"((()))\") == [1, 1, 2, 2, 0]"
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"apple\", \"banana\", \"kiwi\"], \"ki\") == [\"kiwi\"]"
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return [max(numbers[0:i+1]) for i in range(len(numbers))]\n",
        "test": "assert     rolling_max([1]) == [1]"
    },
    {
        "number": 10,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    longest_palindrome = ''\n    for i in range(len(string), 0, -1):\n        # Find longest palindrome that begins with given string\n        if is_palindrome(string[:i]):\n            longest_palindrome = string[:i]\n            break\n    if len(longest_palindrome) == len(string):\n        return string\n    return longest_palindrome + string[len(longest_palindrome):] + string[::-1]\n",
        "test": "assert     is_palindrome(\"abc\") == False"
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor('1', '0') == '1'"
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(8, 8) == 8"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes('a') == ['', 'a']"
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    if n == 0:\n        return ''\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0 1'\n    elif n == 3:\n        return '0 1 2'\n    elif n == 4:\n        return '0 1 2 3'\n    elif n == 5:\n        return '0 1 2 3 4'\n    else:\n        return '0 1 2 3 4 {}'.format(n)\n",
        "test": "assert     string_sequence(1) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('a') == 1"
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    # TODO: Implement me!\n    return list(map(lambda x: 4 if x == 'o' else 2 if x == 'o|' else 1, music_string.split(' ')))\n",
        "test": "assert     parse_music(\"O\") == [1]"
    },
    {
        "number": 18,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('aaaaa', 'a') == 5"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    return''.join(sorted(numbers.split(' '), key=lambda x: int(x)))\n",
        "test": "assert     sort_numbers('five one two three four six seven eight nine ten') == 'one two three four five six seven eight nine ten'"
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    smallest_diff = float('inf')\n    smallest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                smallest_pair = (numbers[i], numbers[j])\n    return smallest_pair\n",
        "test": "assert find_closest_elements([1,1,1,1]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [ (num - min_num) / (max_num - min_num) for num in numbers ]\n    return rescaled\n",
        "test": "assert     rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [int(item) for item in values if type(item) == int]\n",
        "test": "assert list(filter_integers([1, 2, 3, 4])) == [1, 2, 3, 4]"
    },
    {
        "number": 23,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"abc\") == 3"
    },
    {
        "number": 24,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            largest = i\n        i += 1\n    return largest\n",
        "test": "assert     largest_divisor(3) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    res = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            res.append(d)\n    if n > 1:\n        res.append(n)\n    return res\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    \n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])"
    },
    {
        "number": 27,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('a') == 'A'"
    },
    {
        "number": 28,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert         filter_by_prefix([], 'hi') == []"
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([2, 3, -1, 4, -5]) == [2, 3, 4]"
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(0) == False, '0 is not prime'"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    assert len(xs) % 2 == 0, \"Polynomial has to have even number of coefficients\"\n    assert all(coeff!= 0 for coeff in xs), \"No coefficient is 0\"\n",
        "test": "assert     poly([1,1], 0) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    l.sort()\n    return l",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1,2,3,1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]"
    },
    {
        "number": 35,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if not l:\n        return None\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return sum(1 for x in range(1, n) if (x % 11 == 0 or x % 13 == 0) and x % 7 == 0)\n",
        "test": "assert     fizz_buzz(3) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "test": "assert     sort_even([2,4,6,8,10,12]) == [2, 4, 6, 8, 10, 12]"
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    # split string into groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert each group to list of characters.\n    groups = [list(group) for group in groups]\n    # revert each group to the first element and build string.\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"AB\")) == \"AB\""
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if n < 0:\n        raise Exception(\"The value of n must be positive. You entered: \", n)\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     isinstance(prime_fib(1), int)"
    },
    {
        "number": 40,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    visited = set()\n    for i in l:\n        if -i in visited:\n            return True\n        visited.add(i)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return True\n        if i == len(l) - 2:\n            return False\n        if l[i] + l[i+1] > 0:\n            return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, -8]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    if base < 2 or base > 10:\n        raise ValueError(\"base should be between 2 and 10.\")\n    \n    # base 10\n    if base == 10:\n        return str(x)\n",
        "test": "assert     change_base(5,10) == '5'"
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(0, 0) == 0"
    },
    {
        "number": 46,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b = 0, 1\n    for _ in range(n - 3):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if len(l) == 0:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1])/2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    # We use 0 based indexing\n    # make all char lowercase and remove spaces\n    text = text.lower().replace(\" \", \"\")\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "test": "assert     is_palindrome('a') == True"
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n - 1, p) + p) % p\n",
        "test": "assert     modp(0, 2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\""
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    new_text = ''\n    for char in text:\n        if char!= '':\n            new_text += char\n    return new_text\n",
        "test": "assert     remove_vowels('hello') == 'hll'"
    },
    {
        "number": 52,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if len(l) == 0:\n        return True\n    elif t < l[0]:\n        return True and below_threshold(l[1:], t)\n    return False\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 1) == False"
    },
    {
        "number": 53,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return x + y\n",
        "test": "assert     add(2,2) == 4"
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return all(ch in s0 for ch in s1)\n",
        "test": "assert     same_chars(\"\", \"\") is True"
    },
    {
        "number": 55,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"> >\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([1])     == True"
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common(['a','b','c'], ['a','b','c']) == ['a', 'b', 'c']"
    },
    {
        "number": 59,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    assert n > 1\n    n_is_prime = False\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n_is_prime = True\n            break\n        i += 1\n    if n_is_prime:\n        return n\n    else:\n        return largest_prime_factor(n // i)\n",
        "test": "assert     17 == largest_prime_factor(17)"
    },
    {
        "number": 60,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n-1)\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def bracket_map(bracket: str):\n        if bracket == \")\":\n            return \"(\"\n        else:\n            return \")\"\n    if brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    return all(map(bracket_map, brackets))\n",
        "test": "assert     correct_bracketing(\"(\") == False, \"Fail on ((\""
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    d = []\n    for i in range(1, len(xs)):\n        d.append(xs[i] * i)\n    return d\n",
        "test": "assert     derivative([1,0]) == [0]"
    },
    {
        "number": 63,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert         fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    vowels = set(['a','e','i','o','u','y'])\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"lions\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    if shift > len(str(abs(x))):\n        return str(x)[-shift:] + str(abs(x))[:-shift]\n    return str(abs(x))[-shift:] + str(abs(x))[:-shift]",
        "test": "assert     circular_shift(0, 1) == '0'"
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum('abc') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    l=s.split()\n    k=len(l)\n    c=0\n    for i in range(k):\n        if l[i]==\"oranges\":\n            c+=n/3\n        if l[i]==\"apples\":\n            c+=n/2\n        if l[i]==\"mangos\":\n            c+=n/1\n    return c\n",
        "test": "assert     fruit_distribution(\"1 2 3\",4) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    if not arr:\n        return []\n    return [arr[idx] for idx, val in enumerate(arr) if val % 2 == 0 and val == min(arr[idx:], key=lambda x:x%2)][0:2]\n",
        "test": "assert     [ 0,  2 ] == pluck([ 0, 1, 2, 3 ])"
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    freq = {}\n    max_freq = 0\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n            if freq[elem] > max_freq:\n                max_freq = freq[elem]\n        else:\n            freq[elem] = 1\n    return -1 if max_freq == 0 else max(freq.keys())\n",
        "test": "assert     search([-1, -2, -3, -4, -5]) == -1, \"1st example\""
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    lst.sort()\n    if lst:\n        if lst[0] > lst[-1]:\n            lst.reverse()\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    return round(math.sqrt((b*b) + (c*c) - 2*b*c) / 2, 2)\n",
        "test": "assert     triangle_area(1, 1, 2) == 0.5"
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    def is_balanced(lst):\n        if len(lst) % 2 == 0:\n            return True\n        else:\n            return False\n    def sum_of_elements(lst):\n        total = 0\n        for i in lst:\n            total += i\n        return total\n    if is_balanced(q) == True:\n        return sum_of_elements(q) <= w\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 9) == False, \"The example should return False\""
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    p1, p2 = 0, len(arr) - 1\n    while p1 < p2:\n        if arr[p1]!= arr[p2]:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p1 += 1\n            p2 -= 1\n        else:\n            p1 += 1\n            p2 -= 1\n    return len(arr) - (p1 + 1)\n",
        "test": "assert     smallest_change([1, 3, 1]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return [x for x in lst1 if len(x) <= len(lst2)]\n",
        "test": "assert     total_match(['a', 'b', 'c', 'd'], ['e', 'f', 'g'])         == ['a', 'b', 'c', 'd']"
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return False\n",
        "test": "assert     is_multiply_prime(20) == False"
    },
    {
        "number": 76,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    # check if x/n is an integer\n    if x % n!= 0:\n        return False\n    # check if n is a power of x\n    if x == n:\n        return True\n    # x is a power of n\n    return is_simple_power(x/n, n)\n",
        "test": "assert     is_simple_power(6,2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    if a == 0:\n        return True\n    else:\n        return a * a * a == a\n",
        "test": "assert ou == iscube(ou)"
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    return 0\n",
        "test": "assert     hex_key('') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    return bin(decimal)\n",
        "test": "assert     decimal_to_binary(0) == '0b0'"
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    s = [s[i:i+3] for i in range(len(s) - 3)]\n    return len(s) >= 3 and len(set(s)) == len(s)\n    # return all(a!= b for a, b in zip(s, s[1:]))\n",
        "test": "assert     is_happy(\"aaabbbbbbaaa\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    grades = [float(g) for g in grades]\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]"
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    s = int(len(string))\n    return s % 2 == 0 and s > 1\n",
        "test": "assert     (prime_length(\"11\") is True)"
    },
    {
        "number": 83,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    # TODO: implement this\n    return 0\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    \n    binary_string = str(bin(N))[2:]\n    return binary_string\n",
        "test": "assert     solve(0) == \"0\""
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    newList = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            newList.append(lst[i])\n    return newList\n",
        "test": "assert     add([1, 2, 3, 4, 5]) == [1, 3, 5]"
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    l = s.split()\n    l.sort(key=lambda word: word.lower())\n    return \" \".join(l)",
        "test": "assert     anti_shuffle('Hello World') == 'Hello World'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert     [(0,0), (0,1), (0,2), (0,3)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 0)"
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    sorted_array = sorted(array)\n    return sorted_array\n",
        "test": "assert     sort_array([0, 0, 0]) == [0, 0, 0]"
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    s = s.lower()\n    r = ''\n    for i in s:\n        if i == 'a':\n            r += 'z'\n        elif i == 'b':\n            r += 'y'\n        elif i == 'c':\n            r += 'x'\n        elif i == 'd':\n            r += 'w'\n        elif i == 'e':\n            r += 'v'\n        elif i == 'f':\n            r += 'u'\n        elif i == 'g':\n            r += 't'\n        elif i == 'h':\n            r +='s'\n        elif i == 'i':\n            r += 'r'\n        elif i == 'j':\n            r += 'q'\n        elif i == 'k':\n            r += 'p'\n        elif i == 'l':\n            r += 'o'\n        elif i =='m':\n            r += 'n'\n        elif i == 'n':\n            r +='m'\n        elif i == 'o':\n            r += 'l'\n        elif i == 'p':\n            r += 'k'\n        elif i == 'q':\n            r += 'j'\n        elif i == 'r':\n            r += 'i'\n        elif i =='s':\n            r += 'h'\n        elif i == 't':\n            r += 'g'\n        elif i == 'u':\n            r += 'f'\n        elif i == 'v':\n            r += 'e'\n        elif i == 'w':\n            r += 'd'\n        elif i == 'x':\n            r += 'c'\n        elif i == 'y':\n            r += 'b'\n        elif i == 'z':\n            r += 'a'\n        else:\n            r += i\n    return r\n",
        "test": "assert     encrypt('y') == 'b'"
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    \n    # First Solution\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n    \n    # Second Solution\n    sorted_list = sorted(lst)\n    return None if len(sorted_list) < 2 else sorted_list[1]\n    \n    # O(n log n) time complexity, O(1) space complexity\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    smallest = min(sorted_list)\n    return sorted_list[sorted_list.index(smallest) + 1]",
        "test": "assert next_smallest([1, 1, 1, 1, 2, 3]) == 1"
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    count = 0\n    for s in S.split('.'):\n        if s.startswith('I'):\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"\")==False"
    },
    {
        "number": 92,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    elif (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(1, 2, 3.5) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    message = message.lower()\n    for i in range(0,len(message)):\n        if ord(message[i]) in range(97,123):\n            if message[i] in 'aeiou':\n                message = message[:i] + chr(ord(message[i])-2)+ message[i+1:]\n    return messag",
        "test": "assert     encode(\"AaA\") == \"aAA\""
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    return sum(map(lambda x: int(x) % max(map(lambda y: int(y), str(x))), lst))",
        "test": "assert     skjkasdkd([7, 99, 95, 101]) == 5"
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({\"a\":\"A\"}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    primes = [2]\n    for n in range(3, n+1):\n        for i in range(len(primes)):\n            if n % primes[i] == 0:\n                break\n        else:\n            primes.append(n)\n    return primes\n",
        "test": "assert     count_up_to(10) == [2,3,5,7]"
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    \n    return a * b\n    \n",
        "test": "assert     multiply(0, 12) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return int(float(value) + 0.5)\n",
        "test": "assert     closest_integer(\"15\") == 15"
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + make_a_pile(n-1)\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return [x.strip() for x in s.split(',')]\n    \ndef numbers_string(s):\n    \"\"\"\n    You will be given a string of numbers separated by commas or spaces. Your task is\n    to split the string into numbers and return an array of the numbers.\n    \n    For example:\n    numbers_string(\"Hi, my name is John\") == [123, 34, 56]\n    numbers_string(\"One, two, three, four, five, six\") == [123, 34, 56]\n    \"\"\"\n    return [int(x.strip()) for x in s.split(',')]\n",
        "test": "assert     words_string('word') == ['word']"
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    num = x\n    while num + 2 < y:\n        num += 2\n    if num % 2 == 0:\n        return num\n    return -1",
        "test": "assert     choose_num(9, 9) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    if n > m:\n        return -1\n    ans = 0\n    for i in range(n, m+1):\n        ans += i\n    return bin(ans//(m-n+1)).lstrip(\"0b\").zfill(32)\n",
        "test": "assert     rounded_avg(5, 6) == 2"
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([7, 3, 1, 9]) == [1, 3, 7, 9]"
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    sort_arr = sorted(arr)\n    reverse_arr = sort_arr[::-1]\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    new_arr = []\n    for i in reverse_arr:\n        if 1 <= i <= 9:\n            new_arr.append(dic[i])\n    return new_arr\n",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    l = [1] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            l[i] = l[i-1] * i\n        else:\n            l[i] = sum(range(1, i+1))\n    return l\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    return even_odd_palindrome_helper(n, 0)\n",
        "test": "assert     (2, 1) == even_odd_palindrome(5)"
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    count = 0\n    for n in arr:\n        if sum(map(int, str(abs(n)))) > 0:\n            count += 1\n    return count",
        "test": "assert     count_nums([0, 0, 0, 0, 0, 0]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return True\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    even = True\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            even = False\n            break\n    if even == True:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([1, 3, 5, 7], [2, 4, 6]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    histo = {}\n    for c in test:\n        if c not in histo:\n            histo[c] = 0\n        histo[c] += 1\n    return histo\n",
        "test": "assert     histogram(\"\") == {}"
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    #@start-editable@\n    result = ''\n    for i in range(len(s)):\n        if s[i] in c:\n            result += s[i]\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n",
        "test": "assert     reverse_delete('cba', 'abcd') == ('cba',False)"
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    return [\"the number of odd elements \" + str(len(str(n))) + \"n the str\" + str(n) + \" of the \" + str(n) + \"nput.\" for n in lst]\n",
        "test": "assert     [odd_count(['111', 'aa1', 'bb']) == [3, 1, 1]]"
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    result = float('inf')\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n        if s < 0:\n            s = 0\n        result = min(result, s)\n    return result",
        "test": "assert     minSubArraySum([1,4,4]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    R, C = len(grid), len(grid[0])\n    count = 0\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 1:\n                count += math.ceil(capacity / grid[r][c]) - 1\n    return count\n",
        "test": "assert     max_fill([[1,0,0], [0,1,0], [0,0,1]], 1) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    zeros = []\n    ones = []\n    for i in arr:\n        if i == 0:\n            zeros.append(i)\n        else:\n            ones.append(i)\n    return sorted(zeros) + sorted(ones)\n",
        "test": "assert     sort_array([9,9,9,9,9,9,9]) == [9,9,9,9,9,9,9]"
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    words = s.split(\" \")\n    return [w for w in words if len(w) == n and set(w) - vowels == set(w)]\n",
        "test": "assert     select_words(\"\", 3) == []"
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    idx = len(word)\n    vowel = \"\"\n    for i in range(idx-1, -1, -1):\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n    if vowel == \"\":\n        return \"\"\n    i = idx - 1\n    while i > 0:\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"abba\") == 'a'"
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens('())') == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    # TC: O(n)\n    # SC: O(1)\n    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max_arr[i])\n    return max_arr\n",
        "test": "assert     maximum([1, 3, 4, 5, 2, 3], 3) == [5, 4, 3]"
    },
    {
        "number": 121,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2])\n",
        "test": "assert     solution([0,0,0,0]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    count = 0\n    for num in arr:\n        if count == k:\n            break\n        if num >= 100 and num <= 999:\n            count += 1\n    return sum(arr[:k])\n",
        "test": "assert     add_elements([],0) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n/2) + [n]\n    return get_odd_collatz(n*3 + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if len(date) > 0:\n        valid_date = False\n        month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n        valid_date = True\n        date_splitted = date.split('-')\n        if len(date_splitted) == 3:\n            if len(date_splitted[0]) == 2 and len(date_splitted[1]) == 2 and len(date_splitted[2]) == 4:\n                if int(date_splitted[0]) < 13 and int(date_splitted[1]) < 13:\n                    if int(date_splitted[1]) in [1, 3, 5, 7, 8, 10, 12]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 31:\n                                return False\n                            if int(date_splitted[1]) == 2:\n                                if int(date_splitted[2]) < 29:\n                                    return False\n                                else:\n                                    return True\n                            else:\n                                return True\n                        else:\n                            return False\n                    elif int(date_splitted[1]) in [4, 6, 9, 11]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 30:\n                                return False\n                            else:\n                                return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     not valid_date('2-13-2014')"
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]"
    },
    {
        "number": 126,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    sorted_lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i]!= sorted_lst[i]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    \n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection((1, 2), (3, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        if i == 0:\n            result = result * 0\n        elif i < 0:\n            result = result * -1\n        else:\n            result = result * 1\n    return result\n",
        "test": "assert     prod_signs(arr=[]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    N = len(grid)\n    f = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                f[i][j] = grid[i][j]\n            elif i == 0:\n                f[i][j] = f[i][j - 1] + grid[i][j]\n            elif j == 0:\n                f[i][j] = f[i - 1][j] + grid[i][j]\n            else:\n                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j]\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 4, 7]"
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 1]\n        for i in range(n - 2):\n            seq.append(seq[-2] + seq[-1] + seq[-1])\n        return seq + [seq[-1] + seq[-2] + seq[-1]]\n",
        "test": "assert     tri(1)     == [1], '1st triangle number is 1'"
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n//10)*(n%10)\n",
        "test": "assert     digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        if string[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[') == False"
    },
    {
        "number": 133,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    result = 0\n    for i in lst:\n        result += (i ** 2)\n    return result\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == sum([n**2 for n in [1,2,3,4,5,6,7,8,9,10]])"
    },
    {
        "number": 134,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in [\" \",\"'\",'\"']:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('this is a test 1') == False"
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    result = []\n    for i in lst:\n        if i < 0:\n            result.append(i)\n        elif i > 0:\n            result.append(i)\n    if len(result) == 0:\n        return (None, None)\n    else:\n        return (max(result), min(result))\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "test": "assert     (compare_one(1, 1) is None)"
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    return sum([x for x in range(2, n+1, 2) if n-x%2 == 0]) == n\n",
        "test": "assert     is_equal_to_sum_even(5) == False"
    },
    {
        "number": 139,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert     special_factorial(5) == 120"
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    \n    return '_'.join(text.split(' '))\n    \n    \ndef fix_exceptions(text):\n    \"\"\"\n    Given a string text, replace all characters in it that are not \n    in the list exceptions with underscores\n    \n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    \"\"\"\n    \n    return ''.join([e for e in text if e in exceptions])\n    \n",
        "test": "assert     fix_spaces('my test') =='my_test'"
    },
    {
        "number": 141,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    try:\n        file_name = file_name.replace(' ', '')\n        if len(file_name) == 0:\n            raise ValueError\n        if not file_name[0].isalpha():\n            raise ValueError\n        if file_name.count('.') > 1:\n            raise ValueError\n        if file_name.count('.') == 0:\n            raise ValueError\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            raise ValueError\n        \n        return 'Yes'\n    except:\n        return 'No'\n",
        "test": "assert     file_name_check('hello') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    new_lst = [i ** 2 if i % 4 == 0 and i % 3 == 0 else i for i in lst]\n    return sum(new_lst)\n",
        "test": "assert     sum_squares(list(range(10)))             == 45"
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    sentence = sentence.split()\n    \n    return''.join([word for word in sentence if is_prime(len(word))])\n",
        "test": "assert     words_in_sentence(\"\") == \"\""
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    # TODO: you code here\n    numerator, denominator = int(x.split('/')[0]), int(x.split('/')[1])\n    gcd = math.gcd(numerator, denominator)\n    return (numerator / gcd) * (denominator / gcd) == numerator * denominator\n",
        "test": "assert     simplify(\"1/1\", \"2/1\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "test": "assert     order_by_points([7, 8, 1, 4, 5, 9, 2, 6, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"error in order_by_points\""
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return sum([1 for n in nums if n>10 and (n//10)%10%2==1 and (n%10)%2==1])\n",
        "test": "assert     specialFilter([2, 3, 4, 5, 6]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return sum(i*i - i + 1 for i in range(1, n)) // 3\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    if (planet1==\"Mercury\" and planet2==\"Venus\") or (planet1==\"Venus\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Venus\" and planet2==\"Mercury\") or (planet1==\"Mercury\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Mercury\",\"Earth\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Earth\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Jupiter\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Neptune\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\"):\n        return (\"Earth\",\"Jupiter\",\"Mars\",\"Saturn\",\"Uranus\")\n    else:\n        return ()\n",
        "test": "assert     (bf('Mercury', 'Venus'))     == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return sorted(lst, key=lambda s: (len(s), s))\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    if n%2==0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2, 2, 2) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return sum([x**2 for x in lst if x%2!=0])\n",
        "test": "assert     double_the_difference([]) == 0, \"Wrong result for an empty list\""
    },
    {
        "number": 152,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    \n    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i] - game[i]))\n    return score\n",
        "test": "assert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\""
    },
    {
        "number": 153,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    strengths = []\n    for extension in extensions:\n        cap_diff = 0\n        lower_diff = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_diff += 1\n            elif letter.islower():\n                lower_diff += 1\n        strengths.append(cap_diff - lower_diff)\n    return '{0}.{1}'.format(class_name, extensions[strengths.index(max(strengths))])\n    \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Car', ['Cab', 'StuFfed', 'Belt']))\nprint(Strongest_Extension('Bird', ['Endless', 'Cow', 'StuFfed']))\nprint(Strongest_Extension('Animal', ['Endless', 'Cow', 'StuFfed', 'Ate']))\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"First\""
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if a in b:\n        return True\n    for i in range(len(b)):\n        if b[i:] == a[-len(b):]:\n            return True\n        if b[i:] + b[:i] == a:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('foo', 'bar') == False"
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    if num < 0:\n        num *= -1\n        even_digits += 1\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    return even_digits, odd_digits\n",
        "test": "assert     even_odd_count(42) == (2,0)"
    },
    {
        "number": 156,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"number is not an integer in range 1-1000\")\n    if number == 1:\n        return \"i\"\n    roman_numeral = \"\"\n    num_to_roman_dict = {\"1\":\"i\", \"2\":\"ii\", \"3\":\"iii\", \"4\":\"iv\", \"5\":\"v\",\n                         \"6\":\"vi\", \"7\":\"vii\", \"8\":\"viii\", \"9\":\"ix\"}\n    temp_num = number\n    while temp_num!= 0:\n        for roman_numeral_key in num_to_roman_dict.keys():\n            while temp_num >= int(roman_numeral_key):\n                roman_numeral += num_to_roman_dict[roman_numeral_key]\n                temp_num -= int(roman_numeral_key)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or c ** 2 + a ** 2 == b ** 2)\n",
        "test": "assert     (right_angle_triangle(3, 4, 5)             == True)"
    },
    {
        "number": 158,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"python\", \"python\", \"python\", \"python\"]) == \"python\""
    },
    {
        "number": 159,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    \n    if number >= need:\n        return [need, 0]\n    \n    return [number, need-number]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "test": "assert do_algebra([\"+\", 2], [5, 3]) == 8"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].upper() if s[i].isupper() else s[i].lower()\n    return \"\".join(s)\n",
        "test": "assert     solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "test": "assert     generate_integers(2, 5) == [2, 4]"
    }
]