[
    {
        "number": 0,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    for i, first_num in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            if first_num!= numbers[j] and abs(first_num - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     not has_close_elements([0.1, 0.5, 0.9], 0.1)",
        "num_ids": 723
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    paren_stack = []\n    brace_stack = []\n    parens = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    open_braces = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    string_list = paren_string.split()\n    for char in string_list:\n        if char in open_braces:\n            brace_stack.append(char)\n        elif char in parens:\n            if not brace_stack:\n                paren_stack.append(char)\n            elif brace_stack[-1] == parens[char]:\n                paren_stack.append(char)\n                brace_stack.pop()\n            elif brace_stack[-1] == open_braces[char]:\n                brace_stack.pop()\n            else:\n                return []\n    if brace_stack:\n        return []\n    else:\n        return [''.join(paren_stack)]\n",
        "test": "assert     separate_paren_groups(\"a(bc(de(f(g()h)))i)j(k)\") == ['a(bc(de(f(g()h)))i)', '(j(k))']",
        "num_ids": 1277
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(12345.0) == 0.0",
        "num_ids": 482
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    total = 0\n    for op in operations:\n        total += op\n        if total < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 820
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    n = len(numbers)\n    # The first value is the mean of the sample\n    # Use the first value to normalize the sample to the mean of 0\n    # All the other values are compared to the mean\n    # For MAD, the mean is subtracted from each value and then the absolute value is calculated\n    # Then the mean of the absolute values is taken\n    # The final result is the mean absolute deviation\n    mad = sum(abs(i - numbers[0]) for i in numbers) / (n - 1)\n    return mad\n",
        "test": "assert     mean_absolute_deviation([0, 0, 0, 0, 0]) == 0",
        "num_ids": 604
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    return numbers[::2] + [delimeter] * (len(numbers) % 2)\n",
        "test": "assert     intersperse([], 5) == []",
        "num_ids": 674
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    stack = []\n    current_level = 0\n    max_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(current_level)\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif paren == ')':\n            stack.pop()\n            current_level = stack[-1] if len(stack) > 0 else 0\n",
        "test": "assert     parse_nested_parens(\"(()())(()())\") == [3,3]",
        "num_ids": 1252
    },
    {
        "number": 7,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"a\"], \"a\") == [\"a\", \"a\"]",
        "num_ids": 690
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    product = 1\n    sum_of_numbers = 0\n    for number in numbers:\n        product *= number\n        sum_of_numbers += number\n    return (sum_of_numbers, product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 528
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(numbers) == 0:\n        return []\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[i - 1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[i - 1])\n    return result\n",
        "test": "assert     [3, 0, 1, 0, 2, 3, 3, 4, 3, 4, 5, 3, 3, 3, 3]",
        "num_ids": 1207
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(string) < 2:\n        return string\n    elif is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[i:]\n    return string\n",
        "test": "assert     is_palindrome(\"madam\")",
        "num_ids": 577
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    return ''.join(['0' if a[i]!= b[i] else '1' for i in range(len(a))])\n",
        "test": "assert     string_xor('11100', '00111') == '00100', \"incorrect result for string_xor\"",
        "num_ids": 814
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) == None",
        "num_ids": 548
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(3, 8) == 1",
        "num_ids": 497
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('ab') == ['a', 'ab']",
        "num_ids": 867
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return''.join(result)\n",
        "test": "assert     string_sequence(-1) == ''",
        "num_ids": 310
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 460
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    result = []\n    current_note = ''\n    for symbol in music_string:\n        if symbol == 'o':\n            result.append(1)\n        elif symbol == 'o|':\n            result.append(1/2)\n        elif symbol == '.|':\n            result.append(1/4)\n        elif symbol == 'o.':\n            result.append(1/8)\n        elif symbol == 'o|.':\n            result.append(1/16)\n        elif symbol == '.|.':\n            result.append(1/32)\n        else:\n            raise ValueError('Unknown symbol:', symbol)\n    return result\n",
        "test": "assert     parse_music('o') == [1]",
        "num_ids": 1782
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('some text','some') == 1",
        "num_ids": 463
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('0') == '0'",
        "num_ids": 867
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    first, second = sorted(numbers[:2])\n    third = first + (second - first) * (1 - abs(first - second))\n    return first, second\n",
        "test": "assert     find_closest_elements([1, 1, 3]) == (1, 1)",
        "num_ids": 1413
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    max_num = max(numbers)\n    min_num = min(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]",
        "num_ids": 787
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 615
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"a\") == 1",
        "num_ids": 233
    },
    {
        "number": 24,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(9) == 3",
        "num_ids": 398
    },
    {
        "number": 25,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    if n < 2:\n        return []\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    x = 3\n    while x ** 2 <= n:\n        if n % x == 0:\n            return [x] + factorize(n // x)\n        x += 2\n    return [n]\n",
        "test": "assert     factorize(5) == [5]",
        "num_ids": 2353
    },
    {
        "number": 26,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    \n    if len(numbers) < 2:\n        return numbers\n    \n    new_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in new_list:\n            new_list.append(numbers[i])\n    return new_list\n",
        "test": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1007
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('hello world') == 'HELLO WORLD'",
        "num_ids": 630
    },
    {
        "number": 28,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"])         == \"HelloWorld\", \"HelloWorld\"",
        "num_ids": 598
    },
    {
        "number": 29,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"a\") == []",
        "num_ids": 697
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     get_positive([0, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 896
    },
    {
        "number": 31,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     not is_prime(22)",
        "num_ids": 499
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    assert all(x % 2 == 0 for x in xs) and max(xs) > 0, \"list xs must be even and have a non zero element\"\n    # Due to the assumption, the number of non zero element must be even\n    N = len(xs) // 2\n    assert len(xs) % 2 == 0, \"list xs must be even\"\n    f = lambda x: poly(xs, x)\n    a = list(range(N))\n    b = list(reversed(range(N)))\n    for i in range(N):\n        c = a[i]\n        a[i] = b[i]\n        b[i] = c\n    # Here the idea is to evaluate a and b in a way that both can be treated as polynomial.\n    # When a or b is negative, the evaluation is taken care of by the fact that the sum is monotonically increasing\n    # and all negative numbers are replaced with their corresponding positive values.\n    # After this step, we can do algebraic rearrangement to get a^2 - b^2 = -4 * a * b\n    # Now to get the real solutions, rearrange a and b to\n    # a = (a, -a) and b = (b, -b)\n    # and a and b become monotonic decreasing, as a*b < 0\n    # We can get the solution by finding the roots of the above equation\n    a = tuple(reversed(a))\n    b = tuple(reversed(b))\n    pos_a = [a for a in a if a >= 0]\n    pos_b = [b for b in b if b >= 0]\n    if len(pos_a)!= len(pos_b):\n        pos_a, pos_b = pos_b, pos_a\n    pos_a = tuple(pos_a)\n    pos_b = tuple(pos_b)\n    # Now, the polynomial itself is monotonic decreasing, so we can now use\n    # simple bisection algorithm to find the zero point\n    lo = 0\n    hi = len(pos_a)\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if f(pos_a[mid]) * f(pos_b[mid]) < 0:\n            lo = mid\n        else:\n            hi = mid\n    return pos_a[lo]\n",
        "test": "assert     poly([0, 1, 0, 0, 0], 0) == 0",
        "num_ids": 3294
    },
    {
        "number": 33,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    count = 0\n    for i in l:\n        if i%3 == 0:\n            count += 1\n    l2 = []\n    for i in range(count):\n        l2.append(l[i])\n    count2 = 0\n    for i in range(count, len(l)):\n        l2.append(l[i])\n    return l2\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 1140
    },
    {
        "number": 34,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7] == unique([1, 2, 3, 4, 5, 6, 7])",
        "num_ids": 762
    },
    {
        "number": 35,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    assert isinstance(l, list), 'l must be a list'\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([3,2,1]) == 3",
        "num_ids": 419
    },
    {
        "number": 36,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    n_string = str(n)\n    n_length = len(n_string)\n    sevens = n_string.count('7')\n    threes = n_string.count('3')\n    \n    return sevens * (threes - n_length)\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 492
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    # Your code here\n    return l[::2]+sorted(l[1::2])\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 966
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([g[-1] + g[:-1] for g in groups])",
        "test": "assert decode_cyclic(encode_cyclic(\"Bonjour\")) == \"Bonjour\"",
        "num_ids": 988
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    else:\n        return fib(n)\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 393
    },
    {
        "number": 40,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    if len(l) < 3:\n        return False\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    if len(d)!= 3:\n        return False\n    if d.values() == [1, 1, 1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not triples_sum_to_zero([1,2,4])",
        "num_ids": 772
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    return 0",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 285
    },
    {
        "number": 42,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]",
        "num_ids": 642
    },
    {
        "number": 43,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        s = l[i] + l[j]\n        if s < 0:\n            i += 1\n        elif s > 0:\n            j -= 1\n        else:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False",
        "num_ids": 811
    },
    {
        "number": 44,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    \n    if x < 0:\n        x = x * (-1)\n    x_list = []\n    while x > 0:\n        x_list.append(str(x % base))\n        x //= base\n    x_list.reverse()\n    return \"\".join(x_list)\n",
        "test": "assert     change_base(12, 16) == '12'",
        "num_ids": 704
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    area = (a * h)/2\n    return area\n",
        "test": "assert     triangle_area(1, 2) == 1.0",
        "num_ids": 259
    },
    {
        "number": 46,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 586
    },
    {
        "number": 47,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[(n - 1) // 2] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[(n - 1) // 2]\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 602
    },
    {
        "number": 48,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "test": "assert     is_palindrome(\"a\") == True",
        "num_ids": 521
    },
    {
        "number": 49,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert modp(2**5, 256) == 0",
        "num_ids": 397
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"aaaa\") == \"aaaa\"",
        "num_ids": 493
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([x for x in text if x not in vowels])\n",
        "test": "assert     'frdshdlf' == remove_vowels('frdshdlf')",
        "num_ids": 570
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([-1, 3, 4, 7], 3) == False",
        "num_ids": 809
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 221
    },
    {
        "number": 54,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert not same_chars('dog', 'cat')",
        "num_ids": 408
    },
    {
        "number": 55,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    # Add your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 391
    },
    {
        "number": 56,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    #could be optimised to improve time complexity\n    opening_bracket_pos = brackets.find(\"<\")\n    closing_bracket_pos = -1\n    while opening_bracket_pos >= 0:\n        closing_bracket_pos = brackets.find(\">\", opening_bracket_pos)\n        if closing_bracket_pos < 0:\n            return False\n        if closing_bracket_pos < opening_bracket_pos:\n            return False\n        opening_bracket_pos = brackets.find(\"<\", closing_bracket_pos + 1)\n    return True\n",
        "test": "assert     correct_bracketing('[]') == True",
        "num_ids": 1607
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
        "test": "assert not monotonic([1, 2, 3, 3, 2, 1])",
        "num_ids": 524
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 4]) == [1, 2]",
        "num_ids": 643
    },
    {
        "number": 59,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    assert n > 1\n    max_pf = 1\n    while n % 2 == 0:\n        max_pf = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_pf = i\n            n //= i\n    if n > 2:\n        max_pf = n\n    return max_pf\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 557
    },
    {
        "number": 60,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n    \n    \ndef sum_to_n2(n):\n    return sum(range(n + 1))\n    \n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 463
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"()\") == True",
        "num_ids": 535
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    deriv = []\n    for i in range(len(xs)):\n        deriv.append(i * xs[i])\n    return deriv\n",
        "test": "assert     derivative([1, 2, 3])    == [0, 2, 6], \"actual: {}\".format(derivative([1, 2, 3]))",
        "num_ids": 399
    },
    {
        "number": 63,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 487
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return len([c for c in s if c in \"aeiouyAEIOUY\"]) + (len([c for c in s[:-1] if c == \"y\"]) if s[-1] == \"y\" else 0)\n",
        "test": "assert     vowels_count('book') == 2",
        "num_ids": 540
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    # Make shift a multiple of the number of digits\n    shift %= len(str(x))\n    # Split the integer into digits and reverse the digits\n    digits = [int(d) for d in str(x)]\n    digits.reverse()\n    # Adjust the shift to the left side of the digits\n    shift += len(digits)\n    # Add the digits together to form the new integer\n    total = sum(d * 10**i for i, d in enumerate(digits))\n    # Right-shift the total by shift and return the result\n    return str(total)[-shift:]\n",
        "test": "assert     circular_shift(12345, 9) == '12345'",
        "num_ids": 617
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    s = s.upper()\n    return sum(ord(c) - 64 for c in s)\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 320
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if(s.find(\"apples\") == -1):\n        return 0\n    elif(s.find(\"oranges\") == -1):\n        return 0\n    else:\n        return int(n) - int(s[:s.find(\"apples\")]) - int(s[s.find(\"apples\") + 5 : s.find(\"oranges\")])\n",
        "test": "assert     fruit_distribution(s = \"0 0 4 0\", n = 5) == 0",
        "num_ids": 1222
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    smallest_even = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_index = i\n    if smallest_index!= -1:\n        return [ smallest_even, smallest_index]\n    return []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 1179
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    freqs = {}\n    for i in lst:\n        freqs[i] = lst.count(i)\n    if not freqs:\n        return -1\n    else:\n        return max(freqs, key = lambda k: freqs[k])",
        "test": "assert search([]) == -1",
        "num_ids": 719
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if not lst:\n        return []\n    lst = sorted(lst)\n    return lst\n",
        "test": "assert     strange_sort_list([])                 == []",
        "num_ids": 570
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # verify that the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # return the area of the triangle\n        return round((a * b * 1.0) / 2, 2)\n    return -1\n",
        "test": "assert     triangle_area(1, 0, 0)         ==    -1.0",
        "num_ids": 649
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    def is_palindrome(lst):\n        l = len(lst)\n        for i in range(int(l/2)):\n            if lst[i]!= lst[l-i-1]:\n                return False\n        return True\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     not will_it_fly(['a','b','b','b','b'],3)",
        "num_ids": 681
    },
    {
        "number": 73,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(len(arr)//2):\n        if arr[i]!= arr[-i - 1]:\n            count += 1\n    return count\n",
        "test": "assert     smallest_change([1,2,3,4,5,6,7]) == 3",
        "num_ids": 603
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    # list_a = len(lst1)\n    # list_b = len(lst2)\n    # if list_a == list_b:\n    #     return lst1\n    # else:\n    #     if list_a < list_b:\n    #         return lst1\n    #     else:\n    #         return lst2\n    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 979
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_multiply_prime(4) == False",
        "num_ids": 459
    },
    {
        "number": 76,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if n == 1:\n        return True\n    if x < n:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n",
        "test": "assert     is_simple_power(1**2, 1) == True",
        "num_ids": 493
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return a**3 == int(a**3)\n",
        "test": "assert iscube(27)",
        "num_ids": 339
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    import math\n    \n    hexadecimal = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    \n    result = 0\n    num = num.upper()\n    for i in range(0, len(num)):\n        if int(num[i]) in hexadecimal.values():\n            if is_prime(int(num[i])) == True:\n                result += 1\n    return result\n",
        "test": "assert     hex_key('0') == 0",
        "num_ids": 372
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    if decimal == 0:\n        return 'db0'\n",
        "test": "assert     (decimal_to_binary(3) == '11'+'db')",
        "num_ids": 529
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        else:\n            return False\n    for i in range(len(s)):\n        if i+1 >= len(s):\n            break\n        if s[i] == s[i+1]:\n            return False\n    return True\n",
        "test": "assert is_happy(\"ab\") == False",
        "num_ids": 561
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
        "num_ids": 1255
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return (len(string) == len(set(string)))\n",
        "test": "assert     prime_length(\"hello2\") == False",
        "num_ids": 586
    },
    {
        "number": 83,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1'):\n            count += 1\n        if str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 676
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    # Counting up from 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 -...\n    binary = \"\"\n    while N:\n        binary = str(N % 2) + binary\n        N = N >> 1\n    return binary\n",
        "test": "assert     solve(1)    ==    '1'",
        "num_ids": 396
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    #lst = [4, 2, 6, 7]\n    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total\n",
        "test": "assert add([]) == 0",
        "num_ids": 683
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(''.join(sorted(word)))\n    return''.join(new_words)\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 733
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    res = []\n    for row in lst:\n        row.sort()\n        row.sort(reverse=True)\n        res.append([row[x], row[len(row) - x - 1]])\n    return res\n",
        "test": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [(0, 0), (1, 1), (2, 2)]",
        "num_ids": 943
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    if len(array) <= 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n",
        "test": "assert     [0, 1, 2, 3, 4] == sort_array([4, 3, 2, 1, 0])",
        "num_ids": 729
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated = alphabet[2:] + alphabet[:2]\n    return \"\".join([rotated[alphabet.index(c)] for c in s])\n",
        "test": "assert encrypt('xyz') == 'zab', \"encrypt('xyz') == 'zab' is not true\"",
        "num_ids": 1285
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if not lst: return None\n    if len(lst) == 1: return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 471
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return len([s for s in S.split('.') if s.strip().startswith('I')])\n",
        "test": "assert     is_bored('I am bored') == True, 'wrong definition for is_bored'",
        "num_ids": 1451
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if type(x) is not int or type(y) is not int or type(z) is not int:\n        return False\n    elif (x+y+z) % 1 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(0, 0, 0) == True",
        "num_ids": 521
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    letter_map = {\n        'a': '4',\n        'b': '8',\n        'c': '0',\n        'd': '6',\n        'e': '3',\n        'f': '1',\n        'g': '9',\n        'h': '2',\n        'i': '7',\n        'j': '1',\n        'k': '5',\n        'l': '0',\n        'm': '4',\n        'n': '5',\n        'o': '0',\n        'p': '7',\n        'q': '0',\n        'r': '5',\n        's': '5',\n        't': '7',\n        'u': '0',\n        'v': '6',\n        'w': '0',\n        'x': '2',\n        'y': '7',\n        'z': '1',\n    }\n",
        "test": "assert     encode('I like this program') == 'I lk thIs prOgRm'",
        "num_ids": 787
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    maxp = max(lst)\n    digits = [int(i) for i in str(maxp)]\n    return sum(digits)\n",
        "test": "assert     skjkasdkd([5, 7, 11]) == 2",
        "num_ids": 1670
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.islower() or key.isupper():\n            return False\n    return True\n    \n    \n",
        "test": "assert     check_dict_case({}) is False",
        "num_ids": 855
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    array = []\n    for i in range(2,n+1):\n        is_prime = True\n        for j in range(2,i):\n            if (i % j) == 0:\n                is_prime = False\n        if is_prime:\n            array.append(i)\n    return array\n",
        "test": "assert count_up_to(1) == []",
        "num_ids": 671
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return sum([int(x) * int(y) for x, y in zip(str(a), str(b))])\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 1450
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    \n    # Your code here\n    \n    return 0",
        "test": "assert     count_upper(\"d\") == 0",
        "num_ids": 429
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    return round(float(value))\n    # '''\n    # or\n    # return int(round(float(value)))\n    # '''\n",
        "test": "assert     closest_integer(\"2.3\") == 2",
        "num_ids": 361
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    l = [n]\n    while n > 1:\n        n -= 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n // 2) + 1\n        l.append(n)\n    return l\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 829
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string('hello,world') == ['hello', 'world']",
        "num_ids": 499
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    return -1\n",
        "test": "assert choose_num(1, 5) == -1",
        "num_ids": 462
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    s = 0\n    if n > m:\n        return -1\n    for i in range(n, m + 1):\n        s += i\n    return bin(s)[2:]\n",
        "test": "assert     rounded_avg(1, 4) == -1",
        "num_ids": 382
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    result = []\n    for num in x:\n        if num <= 9:\n            result.append(num)\n        elif (num % 2) == 0:\n            pass\n        else:\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 755
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    \n    arr = sorted(arr)\n    arr = arr[::-1]\n    \n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [str(arr[0])]\n    elif len(arr) == 2:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n    elif len(arr) == 3:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n        elif arr[1] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[1]]\n        elif arr[1] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[1]]\n        elif arr[1] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[1]]\n        elif arr[2] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[2]]\n        elif arr[2] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[2]]\n        elif arr[2] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[2]]\n    elif len(arr) == 4:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n        elif arr[1] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[1]]\n        elif arr[1] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[1]]\n        elif arr[1] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[1]]\n        elif arr[2] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[2]]\n        elif arr[2] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[2]]\n        elif arr[2] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[2]]\n        elif arr[3] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[3]]\n        elif arr[3] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[3]]\n        elif arr[3] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[3]]\n    elif len(arr) == 5:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n        elif arr[1] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[1]]\n        e",
        "test": "assert     by_length([]) == []",
        "num_ids": 3207
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    r = [1]\n    for i in range(1, n):\n        r.append(i * r[i-1])\n    return r\n",
        "test": "assert     f(2) == [1, 1]",
        "num_ids": 520
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    return sum([1 for x in range(1, n) if x % 2 == 0 and is_palindrome(x)]) * 2, \\\n           sum([1 for x in range(1, n) if x % 2 == 1 and is_palindrome(x)])\n",
        "test": "assert     even_odd_palindrome(1) == (0,0)",
        "num_ids": 500
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return len([x for x in arr if int(str(x).replace('-', '')) > 0])\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 631
    },
    {
        "number": 109,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if len(arr)==0:\n        return True\n    temp=arr[-1]\n    arr[-1]=arr[0]\n    arr[0]=temp\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i]>arr[i+1]:\n            temp=arr[i]\n            arr[i]=arr[i+1]\n            arr[i+1]=temp\n        else:\n            break\n    if arr[0]<=arr[1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 714
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return \"NO\"\n    \n",
        "test": "assert     exchange([1,2,3,4,5,6,7,8,9], [2,10,11,12,13,14,15,16,17,18,19]) == \"NO\"",
        "num_ids": 1371
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if not test:\n        return {}\n    words = test.split()\n    hash_map = {}\n    for word in words:\n        for letter in word:\n            if letter in hash_map:\n                hash_map[letter] += 1\n            else:\n                hash_map[letter] = 1\n    return hash_map\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 846
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    for char in c:\n        s = s.replace(char,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete(\"aaa\", \"a\") == ('aa', True)",
        "num_ids": 597
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    result = []\n    for i in lst:\n        odd = 0\n        for num in i:\n            if int(num) % 2!= 0:\n                odd += 1\n        result.append( \"the number of odd elements {n} the str4ng {s} of the {s}nput.\".format(n = odd, s = i))\n    return result\n",
        "test": "assert         odd_count(['101','111','1111','1111','1111','1111','1111','1111','1111']) == [1,0,0,0,0,0,0,0,0]",
        "num_ids": 1189
    },
    {
        "number": 114,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    result = 0\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum < 0:\n            curr_sum = 0\n        result = max(result, curr_sum)\n    return result\n",
        "test": "assert minSubArraySum([1]) == 1",
        "num_ids": 867
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    max_filled = max(map(max, grid))\n    \n    result = 0\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                for i in range(max_filled):\n                    if grid[row][col] == 1:\n                        if row + i < rows:\n                            grid[row + i][col] -= 1\n                        else:\n                            grid[0][col] -= 1\n                        if col + i < cols:\n                            grid[row][col + i] -= 1\n                        else:\n                            grid[row][0] -= 1\n                        result += 1\n    return result\n",
        "test": "assert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 9) == 0",
        "num_ids": 2669
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1797
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return []\n",
        "test": "assert     select_words(\"\", 0) == []",
        "num_ids": 558
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    vowels = ['a','e','i','o','u']\n    if word[0] in vowels:\n        return word[0]\n    if word[-1] in vowels:\n        return word[-1]\n    else:\n        for i in xrange(len(word)-1,0,-1):\n            if word[i] in vowels:\n                return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('love') == 'e'",
        "num_ids": 911
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == '()' else 'No'\n    # Indices of open parentheses\n    open_lst = [i for i, x in enumerate(lst) if x == '(']\n    # Indices of close parentheses\n    close_lst = [i for i, x in enumerate(lst) if x == ')']\n    # Indices of close parentheses that are not the last one\n    close_lst_not_last = [i for i, x in enumerate(close_lst) if x!= close_lst[-1]]\n    for i in range(len(close_lst_not_last)):\n        j = close_lst_not_last[i] + 1\n        # If there is an open parenthesis that's close to a close parenthesis\n        if j < len(open_lst) and open_lst[j] == close_lst_not_last[i] - 1:\n            # Removing the last close parenthesis from the string\n            lst[close_lst_not_last[i]] = ''\n            lst[close_lst_not_last[i] - 1] = ''\n            lst[close_lst_not_last[i] + 1:] = ''\n            # Continue the loop\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens('())()())') == 'No'",
        "num_ids": 1900
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    if not arr or k < 1:\n        return []\n    arr.sort(reverse = True)\n    return arr[:k]\n",
        "test": "assert     maximum([], 0) == []",
        "num_ids": 837
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            if i % 2 == 0:\n                sum += lst[i]\n    return sum\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 380
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    _sum = 0\n    for i in arr[:k]:\n        _sum += i\n    return _sum\n",
        "test": "assert     add_elements([], 0) == 0",
        "num_ids": 747
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return [n] + get_odd_collatz(n-1)\n    else:\n        return [n] + get_odd_collatz(n/2)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1661
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    def is_valid_date(date):\n        import re\n        match = re.match(r'(\\d{1,2})\\-([1-9]|[1-2]\\d)\\-([12][0-9]{3})', date)\n        if not match:\n            return False\n        else:\n            day = match.group(2)\n            month = match.group(1)\n            year = match.group(3)\n            if not 1 <= int(day) <= 31:\n                return False\n            if not 1 <= int(month) <= 12:\n                return False\n            if not 1 <= int(year) <= 9999:\n                return False\n            else:\n                return True\n    return is_valid_date(date)\n",
        "test": "assert     valid_date(\"01-02-0000\") == False",
        "num_ids": 817
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    \n    lista = txt.split()\n    return lista\n",
        "test": "assert     split_words('a') == ['a']",
        "num_ids": 564
    },
    {
        "number": 126,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    lst = [int(i) for i in lst]\n    if len(lst) < 2: return True\n    if lst[0] > lst[1]: return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]: return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 1]) == False",
        "num_ids": 595
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    # a = interval1[0]\n    # b = interval1[1]\n    # c = interval2[0]\n    # d = interval2[1]\n    # if a < c or b > d:\n    #     return 'NO'\n    # if a <= c and b >= d:\n    #     return 'YES'\n    # if c <= a and d >= b:\n    #     return 'YES'\n    # if a == c and b == d:\n    #     return 'YES'\n    # return 'NO'\n    \n    # This is my solution, better than 90% of the solutions\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return 'NO'\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return 'NO'\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return 'YES'\n    if interval1[0] == interval2[0] and interval1[1]!= interval2[1]:\n        return 'NO'\n    if interval1[0]!= interval2[0] and interval1[1] == interval2[1]:\n        return 'NO'\n    if interval1[0]!= interval2[0] and interval1[1]!= interval2[1]:\n        return 'NO'\n    \n    # It's not my solution, but I understand better\n    l1 = interval1[1] - interval1[0] + 1\n    l2 = interval2[1] - interval2[0] + 1\n    if l1 == l2:\n        return 'YES'\n    return 'NO'\n    ",
        "test": "assert     intersection((0, 1), (1, 5)) == 'NO'",
        "num_ids": 1011
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if arr:\n        return sum(int(i) * (1 if i > 0 else -1) for i in arr)\n    return None\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 588
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    # O(n**3) time, O(1) space\n    def dfs(grid, i, j, k, visited, curr, path):\n        if k == 0:\n            return\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return\n        if visited[i][j]:\n            return\n        if i == len(grid)-1 and j == len(grid[0])-1:\n            if k == 1:\n                curr.append(grid[i][j])\n                return\n            else:\n                path.append(grid[i][j])\n                curr.append(path)\n                return\n        visited[i][j] = True\n        dfs(grid, i+1, j, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i-1, j, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i, j+1, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i, j-1, k-1, visited, curr, path + [grid[i][j]])\n        visited[i][j] = False\n    \n    curr = []\n    visited = [ [False] * len(grid[0]) for _ in range(len(grid)) ]\n    path = []\n    dfs(grid, 0, 0, k, visited, curr, path)\n    return curr\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 10)",
        "num_ids": 1852
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 2]\n        for i in range(n - 2):\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n",
        "test": "assert     tri(1)    ==    [1]",
        "num_ids": 837
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, [int(x) for x in str(n) if int(x) % 2!= 0])\n",
        "test": "assert     digits(1234) == 0",
        "num_ids": 426
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    brackets = []\n    for char in string:\n        if char == '[' or char == ']':\n            brackets.append(char)\n        elif len(brackets) > 0 and char == brackets[-1]:\n            brackets.pop()\n        else:\n            return False\n    return len(brackets) == 0\n    \n",
        "test": "assert     is_nested(\"(()\") == False",
        "num_ids": 575
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return sum(x**2 for x in lst)\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1583
    },
    {
        "number": 134,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \" \"\n",
        "test": "assert     check_if_last_char_is_a_letter(\"Hello, there!\") == False",
        "num_ids": 689
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            if d[arr[i]] < i - 1:\n                return i - 1\n    return -1\n",
        "test": "assert         can_arrange([]) == -1",
        "num_ids": 601
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    lst = [x for x in lst if x < 0]\n    lst = [x for x in lst if x > 0]\n    return (max(lst), min(lst)) if lst else (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1139
    },
    {
        "number": 137,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)):\n        return a if a > b else b\n    elif isinstance(b, (int, float)):\n        return b if a > b else a\n",
        "test": "assert         compare_one(1, 2) == 2",
        "num_ids": 639
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return sum([i for i in range(1,n,2) if i <= n-4]) == n\n",
        "test": "assert     is_equal_to_sum_even(19) == False",
        "num_ids": 532
    },
    {
        "number": 139,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n",
        "test": "assert     special_factorial(5)     == 120, \"Wrong answer\"",
        "num_ids": 495
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    new_text = text\n    # Replace spaces\n    new_text = new_text.replace(' ', '_')\n    # Deal with consecutive spaces\n    new_text = new_text.replace('-', '_')\n    # Remove leading spaces\n    new_text = new_text.lstrip('_')\n    return new_text\n",
        "test": "assert         fix_spaces(\"\") == \"\"",
        "num_ids": 1696
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    if re.search(r'[^a-zA-Z0-9]', file_name) or len(file_name) > 100:\n        return 'No'\n    dot_position = file_name.rfind('.')\n    if dot_position == -1 or file_name[:dot_position].strip() == '' or file_name[dot_position + 1:].strip() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('file_name_check.txt.exe.dll') == \"Yes\", \"Expected Yes\"",
        "num_ids": 1099
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if (i % 4 == 0) and (i % 3 == 0):\n            res += lst[i] ** 3\n        elif (i % 4 == 0) and (i % 3!= 0):\n            res += lst[i] ** 2\n        else:\n            res += lst[i]\n    return res\n",
        "test": "assert ",
        "num_ids": 760
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return''.join([x for x in sentence.split(' ') if len(x) > 1 and is_prime(len(x))])\n",
        "test": "assert     words_in_sentence(\"\") == ''",
        "num_ids": 870
    },
    {
        "number": 144,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return True\n",
        "test": "assert     simplify('1/2', '1/2') == True",
        "num_ids": 783
    },
    {
        "number": 145,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums",
        "test": "assert     order_by_points([3, 4, 5, 2, 3, 1]) == [1, 2, 3, 3, 4, 5]",
        "num_ids": 885
    },
    {
        "number": 146,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return sum(1 for n in nums if n > 10 and (n % 10) % 2 == 1 and (n // 10) % 2 == 1)\n",
        "test": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0",
        "num_ids": 1513
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    return len([i for i in range(n) if (i * i - i + 1) % 3 == 0])",
        "test": "assert     get_max_triples(4) == 4",
        "num_ids": 457
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    dict_planet = {}\n    \n    #Making the dictionary planet\n    for i in planets:\n        dict_planet[i] = distance(i, planet1)\n    \n    #Ordering the dictionary planet\n    ordered_planet = sorted(dict_planet.items(), key = lambda x:x[1])\n    \n    #Checking which planet is lower and storing it\n    for i in ordered_planet:\n        if distance(i[0], planet2) < distance(planet1, planet2):\n            planet1 = i[0]\n    \n    #Checking which planet is higher and storing it\n    for i in ordered_planet:\n        if distance(i[0], planet2) > distance(planet1, planet2):\n            planet2 = i[0]\n    \n    #Checking if the planets are on the same orbit\n    if planet2 == planet1:\n        return planet1\n    else:\n        return (planet1, planet2)\n",
        "test": "assert bf('Uranus', 'Neptune') == ('Uranus', 'Neptune')",
        "num_ids": 1975
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    # return sorted(lst, key=len)\n    return sorted(lst, key=lambda x: len(x))\n",
        "test": "assert     sorted_list_sum([\"cab\",\"a\",\"bbb\"]) == [\"a\",\"cab\",\"bbb\"]",
        "num_ids": 1049
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return x if n % 2 == 0 else y\n",
        "test": "assert     x_or_y(3, 3, 3) == 3",
        "num_ids": 452
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    total = 0\n    for i in lst:\n        if isinstance(i, int):\n            if i % 2!= 0:\n                total += i**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0, 'incorrect'",
        "num_ids": 1569
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "test": "assert     compare([0,1,2,3,4,5], [0,0,0,0,0,0]) == [0,1,2,3,4,5]",
        "num_ids": 2810
    },
    {
        "number": 153,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    class_caps = [c for c in class_name if c.isupper()]\n    class_sm = [c for c in class_name if c.islower()]\n    extension_caps = [e for e in extensions if e.isupper()]\n    extension_sm = [e for e in extensions if e.islower()]\n    class_strength = sum(i > j for i, j in zip(class_caps, class_sm)) - sum(i < j for i, j in zip(class_caps, class_sm))\n    extension_strength = sum(i > j for i, j in zip(extension_caps, extension_sm)) - sum(i < j for i, j in zip(extension_caps, extension_sm))\n    if extension_strength > class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n    elif extension_strength < class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[-1])\n    else:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n",
        "test": "assert     Strongest_Extension(\"Hole\", ['Silly', 'Hole', 'Tiny']) == \"Hole.Silly\"",
        "num_ids": 1714
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if a==b:\n        return True\n    \n    for i in range(1,len(b)):\n        if b[i:] in a and b[:i] in a:\n            return True\n    \n    return False\n",
        "test": "assert     cycpattern_check( \"waterbottle\", \"waterbottle\") == True",
        "num_ids": 591
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return len(str(abs(num))), len(str(abs(num))) % 2\n",
        "test": "assert     even_odd_count(10) == (2, 0)",
        "num_ids": 617
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    # NOTE: this solution iterates through the whole range of roman numerals,\n    # and therefore may be inefficient.\n    \n    assert 1 <= number <= 1000, 'Argument must be between 1 and 1000'\n    numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n    result = ''\n    for (rom, mini) in numerals:\n        while number >= rom:\n            result += mini\n            number -= rom\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == \"i\"",
        "num_ids": 862
    },
    {
        "number": 157,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return (b**2 + c**2) == (a**2 + b**2) or (c**2 + a**2) == (b**2 + c**2)\n",
        "test": "assert     not right_angle_triangle(3,7,4)",
        "num_ids": 581
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    max_val = -1\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_val:\n            max_val = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"a\", \"a\", \"a\"]) == \"a\"",
        "num_ids": 765
    },
    {
        "number": 159,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    total, left = 0, 0\n    if need > remaining:\n        total = remaining\n    else:\n        total = need\n        left = remaining - need\n    return [total, left]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 1525
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "test": "assert     do_algebra([3,4,5], [3,2,-1]) == 3",
        "num_ids": 585
    },
    {
        "number": 161,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return \"\".join([a.lower() if a.isalpha() else a for a in s])\n",
        "test": "assert     solve(\"\") == \"\", \"test4\"",
        "num_ids": 664
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if not text:\n        return None\n    try:\n        return hashlib.md5(text).hexdigest()\n    except:\n        print(\"Error: Non-string value for text.\")\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 566
    },
    {
        "number": 163,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    #create list of integers between a and b\n    results = []\n    if a <= b:\n        for i in range(a, b+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n    else:\n        for i in range(b, a+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n",
        "test": "assert     generate_integers(4, 15) == list(range(4, 16, 2))",
        "num_ids": 665
    }
]