[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 2) == True",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    paren_stack = []\n    result = []\n    \n    for i, p in enumerate(paren_string):\n        if p == '(':\n            paren_stack.append(i)\n        elif p == ')':\n            if paren_stack:\n                start = paren_stack.pop()\n                result.append(paren_string[start: i + 1])\n    return result\n",
        "test": "assert     separate_paren_groups(\"(()())\") == [\"()()\", \"(())\"]",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if number == 0:\n        return 0\n    number_str = str(number)\n    for i in range(len(number_str) - 1, -1, -1):\n        if number_str[i]!= '0':\n            return float(number_str[i:])\n    return 0\n",
        "test": "assert     truncate_number( 1.0001 ) == 1.0",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    result = False\n    for i in range(len(operations)):\n        result = False if sum(operations[i:]) < 0 else True\n        if result:\n            return result\n    return result\n",
        "test": "assert     below_zero([-1, -2, 3, 4, -5, -6, -7, 8, 9, 10]) == True",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # TODO: maybe not correct\n    numbers = sorted(numbers)\n    return (numbers[len(numbers) // 2] - numbers[0]) / (len(numbers) // 2)\n",
        "test": "assert     mean_absolute_deviation([-1.0, -1.0, -1.0, -1.0, -1.0]) == 0",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return numbers[:-1] + [numbers[-1]] * delimeter + numbers[-1:]\n",
        "test": "assert     intersperse([1,2,3], 0) == [1, 2, 3]",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    parens = []\n",
        "test": "assert     parse_nested_parens(\"((()))\") == [1,0]",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"apple\", \"banana\", \"kiwi\"], \"ki\") == [\"kiwi\"]",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return [max(numbers[0:i+1]) for i in range(len(numbers))]\n",
        "test": "assert     rolling_max([1]) == [1]",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    elif is_palindrome(string[1:]):\n        return string[0] + make_palindrome(string[1:])\n    else:\n        return string[0] + make_palindrome(string[1:]) + string[0]\n",
        "test": "assert     is_palindrome(\"abc\") == False",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "test": "assert     string_xor('011010', '011100') == '10101'",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) == None",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(a=11, b=6) == 1",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes('ab') == ['', 'a', 'ab']",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = ''\n    for i in range(n+1):\n        result += str(i) +''\n    return result[:-1]\n",
        "test": "assert     string_sequence(1) == \"0\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"Mississippi\") == 4, \"expected 4\"",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # TODO: Implement me!\n    return list(map(lambda x: 4 if x == 'o' else 2 if x == 'o|' else 1, music_string.split(' ')))\n",
        "test": "assert     parse_music(\"O\") == [1]",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('fghhgf', 'h') == 2",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers(\"two one one two three four five six seven eight nine zero\") == \"one two one two three four five six seven eight nine zero\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    sorted_nums = sorted(numbers)\n    return sorted_nums[0], sorted_nums[-1]\n",
        "test": "assert find_closest_elements([1,1,1,1]) == (1, 1)",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    scale = 1.0 / max(numbers)\n    return [n * scale for n in numbers]\n",
        "test": "assert     rescale_to_unit([1.0]) == [1.0]",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [int(item) for item in values if type(item) == int]\n",
        "test": "assert list(filter_integers([1, 2, 3, 4])) == [1, 2, 3, 4]",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"abc\") == 3",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            largest = i\n        i += 1\n    return largest\n",
        "test": "assert     largest_divisor(3) == 1",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    res = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            res.append(d)\n    if n > 1:\n        res.append(n)\n    return res\n",
        "test": "assert     factorize(2*3*5) == [2,3,5]",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('a') == 'A'",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"1\", \"2\", \"3\"]) == \"123\"",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert         filter_by_prefix([], 'hi') == []",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([2, 3, -1, 4, -5]) == [2, 3, 4]",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(0) == False, '0 is not prime'",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"need an even number of coefficients\")\n    if max(xs) == 0:\n        return None\n    if min(xs) == 0:\n        return 0.0\n    # find the most non zero coefficient\n    # it is guaranteed to be even number, as the polynomial is not a constant\n    most_non_zero = xs.index(max(xs))\n    # the slope of the polynomial at x = 0\n    x0 = poly(xs[most_non_zero:], 0) / poly(xs[:most_non_zero], 0)\n    # the coefficient of x^(n-1) in the polynomial is x^n * x0\n    # that is, the x^(n-1) is not a constant\n    xs_coeff_n_minus_1 = [(x - x0) * x0 for x in xs[most_non_zero:]]\n    # since x^n is a constant, we substitute it with x^(n-1)\n    xs = xs[:most_non_zero] + xs_coeff_n_minus_1\n    # since x^n is constant, the polynomial is now x^(n-1) * x^(n-1) * x^(n-2) *...\n    # thus, we take derivative of the polynomial by n-1 times\n    # by expanding it to 2nd order, it becomes x^n * x^(n-1) * x^(n-2) *... * x^(n-n) * x^(n-1) * x^(n-2)\n    # then the result becomes x^(n-1) * x^(n-2) *... * x^2 * x^(n-n) * x^(n-1) * x^(n-2)\n    # if the result is a constant, it's x^(n-1) * x^(n-2) *... * x^2 * x^(n-n)\n    # thus, the result is the solution\n    result = sum([x * math.pow(x, i - 1) for i, x in enumerate(xs)])\n    return result\n",
        "test": "assert     poly([-1, -2, -3], -2) == -6",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    l.sort()\n    return l",
        "test": "assert     (sort_third(['1', '3', '5', '7']) == ['1', '3', '5', '7']), \"test2 for the function sort_third\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1,2,3,1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not l:\n        return None\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum(1 for x in range(1, n) if (x % 11 == 0 or x % 13 == 0) and x % 7 == 0)\n",
        "test": "assert fizz_buzz(7) == 0",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "test": "assert     [1, 2, 3, 4, 5] == sort_even([5, 4, 3, 2, 1])",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # split string into groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert each group to list of characters.\n    groups = [list(group) for group in groups]\n    # revert each group to the first element and build string.\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"abc\") == \"abc\"",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return fib(n)\n",
        "test": "assert     isinstance(prime_fib(1), int)",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Your code here\n    for i in l:\n        for j in l:\n            for k in l:\n                if i!= j and i!= k and j!= k and i + j + k == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1]) == False",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(3) == 0, car_race_collision(3)",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return True\n        if i == len(l) - 2:\n            return False\n        if l[i] + l[i+1] > 0:\n            return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, -8]) == False",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    d = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    # inverse = 0\n    # for i in range(len(digits)-1, -1, -1):\n    #     inverse += digits[i] * base**(len(digits)-1-i)\n    # return str(inverse)\n    # Using built-in sum function\n    return str(sum([d.get(i) for i in digits]))\n",
        "test": "assert     change_base(3,2) == \"0b11\"",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(0, 0) == 0",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b = 0, 1\n    for _ in range(n - 3):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if len(l) == 0:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1])/2\n",
        "test": "assert median([1,2]) == 1.5",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "test": "assert     is_palindrome('a') == True",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n - 1, p) + p) % p\n",
        "test": "assert     (modp(3, 2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == 0)",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\"",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    new_text = ''\n    for char in text:\n        if char!= '':\n            new_text += char\n    return new_text\n",
        "test": "assert     remove_vowels('hello') == 'hll'",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(l) == 0:\n        return True\n    elif t < l[0]:\n        return True and below_threshold(l[1:], t)\n    return False\n",
        "test": "assert     below_threshold([1, 2, 3, 4], 2) is False",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(2,2) == 4",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for char in s0:\n        if char in s1:\n            s1 = s1[s1.index(char) + 1:]\n        else:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"\", \"\") is True",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"> >\") == False",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([1,2,3,2]) == False",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common([1,2,3,4,5], [1,2,3,6]) == [1,2,3]",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    n_divisors = 0\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            n_divisors += 1\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        n_divisors += 1\n    return n\n",
        "test": "assert     17 == largest_prime_factor(17)",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n-1)\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def bracket_map(bracket: str):\n        if bracket == \")\":\n            return \"(\"\n        else:\n            return \")\"\n    if brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    return all(map(bracket_map, brackets))\n",
        "test": "assert     correct_bracketing(\"(\") == False, \"Fail on ((\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    derivative_coefficients = []\n    for i in range(len(xs) - 1):\n        derivative_coefficients.append(xs[i] * i)\n    derivative_coefficients.append(xs[-1])\n    return derivative_coefficients\n",
        "test": "assert ",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert         fibfib(0) == 0",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    vowels = set(['a','e','i','o','u','y'])\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"lions\") == 2",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if shift > len(str(abs(x))):\n        return str(x)[-shift:] + str(abs(x))[:-shift]\n    return str(abs(x))[-shift:] + str(abs(x))[:-shift]",
        "test": "assert     circular_shift(123456789, 0) == '123456789'",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum('abc') == 0",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    count = 0\n    for i in s.split():\n        if i == \"apples\":\n            count += 1\n        elif i == \"oranges\":\n            count += 1\n        elif i == \"mangoes\":\n            count += 1\n    return n-count\n",
        "test": "assert     fruit_distribution('2 3',3) == 3",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    def get_smallest_even(arr):\n        return min(arr, key=lambda x: x%2)\n    \n    def get_smallest_index(arr):\n        return arr.index(min(arr, key=lambda x: x%2))\n",
        "test": "assert     [ 1, 0 ] == pluck( [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254 ] == pluck( [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return max(lst, key = lambda x: lst.count(x)) if len(lst) > 0 else -1\n",
        "test": "assert     search([1, 2, 2, 2, 3, 3]) == 2",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    lst = lst[:]\n    if len(lst) < 2:\n        return lst\n    lst = sorted(lst)\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n",
        "test": "assert     strange_sort_list([1]) == [1]",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if (a + b) > c:\n        if (b + c) > a:\n            if (c + a) > b:\n                return round((a * b) / 2, 2)\n            else:\n                return -1\n        else:\n            return -1\n    else:\n        return -1\n",
        "test": "assert     triangle_area(2, 2, 2)         ==     2.0",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    l = len(q)\n    s = 0\n    for i in range(l):\n        s+=q[i]\n    if s <= w and is_palindromic(q) == True:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 9) == False, \"The example should return False\"",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    p1, p2 = 0, len(arr) - 1\n    while p1 < p2:\n        if arr[p1]!= arr[p2]:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p1 += 1\n            p2 -= 1\n        else:\n            p1 += 1\n            p2 -= 1\n    return len(arr) - (p1 + 1)\n",
        "test": "assert     smallest_change([1, 3, 1]) == 1",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return [x for x in lst1 if len(x) <= len(lst2)]\n",
        "test": "assert     total_match(['a', 'b', 'c', 'd'], ['e', 'f', 'g'])         == ['a', 'b', 'c', 'd']",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return False\n",
        "test": "assert     is_multiply_prime(11) is False",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if x == n:\n        return True\n    if x % n == 0:\n        return False\n    if x % n == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x/n, n)\n",
        "test": "assert     is_simple_power(6,2) == False",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if a<0:\n        return False\n    elif a==0:\n        return True\n    else:\n        return a**3==int(a**3)\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return 0\n",
        "test": "assert     hex_key(\"ABC\") == 0",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # Your code here\n    binary = ''\n    binary += 'db'\n",
        "test": "assert     decimal_to_binary(2) == \"0dbb00\"",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(s)<=2:\n        return False\n    return (s[0]==s[2]) and (s[1]==s[3])\n",
        "test": "assert     is_happy(\"aaabbbbbbaaa\") == False",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    grades = [float(g) for g in grades]\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    s = int(len(string))\n    return s % 2 == 0 and s > 1\n",
        "test": "assert     prime_length(\"a\") == False",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    def digit_count(n):\n        return len(str(n))\n    digit_counts = {}\n    for i in range(1, 10):\n        digit_counts[i] = 0\n    digit_counts[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, 10):\n            if i % j == 0:\n                digit_counts[j] += digit_counts[i/j]\n    return sum(digit_counts.values())\n",
        "test": "assert         starts_one_ends(1) == 1",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Initialize the final sum as 0.\n    # sum_num is the final sum.\n    sum_num = 0\n    # loop through the string from the most significant bit to the least significant bit.\n    for i in range(0, 32):\n        # Get the bit at the current position.\n        bit_num = get_bit(N, i)\n        # if the bit is 1, add to the current sum.\n        if bit_num == 1:\n            sum_num += bit_num\n    return str(sum_num)\n",
        "test": "assert ",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    l = s.split()\n    l.sort(key=lambda word: word.lower())\n    return \" \".join(l)",
        "test": "assert     anti_shuffle('   Hello World    ') == 'Hello World'",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def swap(lst, x, y):\n        lst[x], lst[y] = lst[y], lst[x]\n",
        "test": "assert     get_row([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == [(1, 0), (1, 1), (1, 2)]",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    sorted_array = sorted(array)\n    return sorted_array\n",
        "test": "assert     sort_array([5, 2, 3, 1]) == [1, 2, 3, 5], 'Wrong answer'",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    new_alpha = alpha[2:] + alpha[0:2]\n    return ''.join(new_alpha[alpha.index(c)+1] for c in s)\n",
        "test": "assert     encrypt('y') == 'b'",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    # First Solution\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n    \n    # Second Solution\n    sorted_list = sorted(lst)\n    return None if len(sorted_list) < 2 else sorted_list[1]\n    \n    # O(n log n) time complexity, O(1) space complexity\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    smallest = min(sorted_list)\n    return sorted_list[sorted_list.index(smallest) + 1]",
        "test": "assert next_smallest([1, 1, 1, 1, 2, 3]) == 1",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return 0\n",
        "test": "assert     is_bored('Hi. I am good. How are you?') == False",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return True if (type(x) == int or type(x) == float) and (type(y) == int or type(y) == float) and (type(z) == int or type(z) == float) and (x + y == z) else False\n",
        "test": "assert     any_int(1, 2, 3.5) == False",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    vowels = \"AEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    result = []\n    \n    for letter in message:\n        if letter in vowels:\n            result.append(2 * letter)\n        else:\n            result.append(letter)\n    \n    return ''.join(result)\n",
        "test": "assert     encode(\"I am very happy today\") == \"5h2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    max_prime = 0\n    for i in lst:\n        if is_prime(i):\n            max_prime = max(max_prime, i)\n    return sum(int(digit) for digit in str(max_prime))\n",
        "test": "assert     (skjkasdkd([9, 13, 18, 26, 41, 83, 88]) == 2)",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({\"a\":\"A\"}) == True",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    primes = [2]\n    for n in range(3, n+1):\n        for i in range(len(primes)):\n            if n % primes[i] == 0:\n                break\n        else:\n            primes.append(n)\n    return primes\n",
        "test": "assert     count_up_to(10) == [2,3,5,7]",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    return a * b\n    \n",
        "test": "assert     multiply(0, 12) == 0",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return int(float(value) + 0.5)\n",
        "test": "assert     closest_integer(\"15\") == 15",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + make_a_pile(n-1)\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return [x.strip() for x in s.split(',')]\n    \ndef numbers_string(s):\n    \"\"\"\n    You will be given a string of numbers separated by commas or spaces. Your task is\n    to split the string into numbers and return an array of the numbers.\n    \n    For example:\n    numbers_string(\"Hi, my name is John\") == [123, 34, 56]\n    numbers_string(\"One, two, three, four, five, six\") == [123, 34, 56]\n    \"\"\"\n    return [int(x.strip()) for x in s.split(',')]\n",
        "test": "assert     words_string('word') == ['word']",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    num = x\n    while num + 2 < y:\n        num += 2\n    if num % 2 == 0:\n        return num\n    return -1",
        "test": "assert choose_num(2, 6) == 4",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # Replace \"pass\" statement with your code\n    if n > m:\n        return -1\n    else:\n        return int(bin( (m+n)/2 ), 2)",
        "test": "assert rounded_avg(17, 19) == 17",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return sorted(set([i for i in x if i % 2 == 1]))\n",
        "test": "assert     unique_digits([7, 3, 1, 9]) == [1, 3, 7, 9]",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    sort_arr = sorted(arr)\n    reverse_arr = sort_arr[::-1]\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    new_arr = []\n    for i in reverse_arr:\n        if 1 <= i <= 9:\n            new_arr.append(dic[i])\n    return new_arr\n",
        "test": "assert     by_length([5, 4, 3, 2, 1]) == [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(n*sum(range(1, i+1)))\n    return l\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "test": "assert     even_odd_palindrome(2) == (0, 0)",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    count = 0\n    for num in arr:\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            num //= 10\n            if digit > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    if arr==None or len(arr)==0:\n        return True\n    if arr[0]>arr[1]:\n        return False\n    if arr[-1]<arr[-2]:\n        return False\n    i=1\n    while i<len(arr):\n        if arr[i-1]>arr[i]:\n            return False\n        i+=1\n    return True\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    i = 0\n    for x in lst1:\n        if x % 2!= 0 and x == lst2[i]:\n            return \"NO\"\n        i += 1\n    return \"YES\"",
        "test": "assert     exchange([1, 1, 2, 3, 4, 4, 5, 7], [2, 4, 6, 8, 10, 10, 13, 15]) == \"YES\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    histo = {}\n    for c in test:\n        if c not in histo:\n            histo[c] = 0\n        histo[c] += 1\n    return histo\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i]==c:\n            s[i] = \"\"\n    s = \"\".join(s)\n    return s,s==s[::-1]\n",
        "test": "assert     reverse_delete('cba', 'abcd') == ('cba',False)",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return ['the number of odd elements %d the str%sng %d of the %dnput.' %(count_odds(lst, i), i, len(lst[i]), len(lst)) for i in range(len(lst))]\n",
        "test": "assert ",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    max_sum = 0\n    current_sum = 0\n    for x in nums:\n        current_sum = max(0, current_sum+x)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert     minSubArraySum([1,2,3,4,5]) == 10",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    m, n = len(grid), len(grid[0])\n    f = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            f[i][j] = max(f[i][j-1], f[i-1][j])\n            if grid[i-1][j-1] == 1:\n                f[i][j] += 1\n    print(f)\n    return f[m][n]\n",
        "test": "assert     max_fill([[0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 1, 0]], 3) == 4",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    bin_rep = [bin(i).count('1') for i in arr]\n    return sorted(arr, key=lambda x: (bin_rep[arr.index(x)], x))\n",
        "test": "assert     sort_array([9,9,9,9,9,9,9]) == [9,9,9,9,9,9,9]",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if len(s) == 0:\n        return []\n    else:\n        words = []\n        for word in s.split():\n            if word == \"\":\n                continue\n            else:\n                if (count_vowels(word) - count_consonants(word)) == n:\n                    words.append(word)\n        return words\n",
        "test": "assert     select_words(\"consonants\", 1) == [\"consonants\"]",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    idx = len(word)\n    vowel = \"\"\n    for i in range(idx-1, -1, -1):\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n    if vowel == \"\":\n        return \"\"\n    i = idx - 1\n    while i > 0:\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "test": "assert     get_closest_vowel('hi') == 'i'",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(['(', ')']) == 'Yes'",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # TC: O(n)\n    # SC: O(1)\n    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max_arr[i])\n    return max_arr\n",
        "test": "assert     maximum([1, 3, 4, 5, 2, 3], 3) == [5, 4, 3]",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2])\n",
        "test": "assert     solution([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    def is_valid(val):\n        return val < 10**k\n    return sum(filter(is_valid, arr))\n",
        "test": "assert     add_elements([],0) == 0",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n/2) + [n]\n    return get_odd_collatz(n*3 + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if len(date) > 0:\n        valid_date = False\n        month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n        valid_date = True\n        date_splitted = date.split('-')\n        if len(date_splitted) == 3:\n            if len(date_splitted[0]) == 2 and len(date_splitted[1]) == 2 and len(date_splitted[2]) == 4:\n                if int(date_splitted[0]) < 13 and int(date_splitted[1]) < 13:\n                    if int(date_splitted[1]) in [1, 3, 5, 7, 8, 10, 12]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 31:\n                                return False\n                            if int(date_splitted[1]) == 2:\n                                if int(date_splitted[2]) < 29:\n                                    return False\n                                else:\n                                    return True\n                            else:\n                                return True\n                        else:\n                            return False\n                    elif int(date_splitted[1]) in [4, 6, 9, 11]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 30:\n                                return False\n                            else:\n                                return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     valid_date(    \"07-03-2000\") == False",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    sorted_lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i]!= sorted_lst[i]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == 'YES'",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        prod = 1\n        for i in arr:\n            if i == 0:\n                return None\n            elif i < 0:\n                prod *= -1\n            else:\n                prod *= 1\n        return prod",
        "test": "assert     prod_signs(arr=[]) == None",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not grid or not grid[0]:\n        return []\n",
        "test": "assert     minPath([",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 1]\n        for i in range(n - 2):\n            seq.append(seq[-2] + seq[-1] + seq[-1])\n        return seq + [seq[-1] + seq[-2] + seq[-1]]\n",
        "test": "assert     tri(1)     == [1], '1st triangle number is 1'",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    result = 1\n    for d in str(n):\n        if int(d) % 2 == 1:\n            result = result * int(d)\n    return result\n",
        "test": "assert ",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        if string[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[]') == True",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sum([int(math.ceil(num)) ** 2 for num in lst])\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == sum([n**2 for n in [1,2,3,4,5,6,7,8,9,10]])",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(txt) == 0:\n        return False\n    if txt[-1] >= 'a' and txt[-1] <= 'z':\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('this is a test 1') == False",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    largest_negative = None\n    smallest_positive = None\n    for i in lst:\n        if i < 0:\n            if largest_negative is None:\n                largest_negative = i\n            else:\n                largest_negative = max(i, largest_negative)\n        else:\n            if smallest_positive is None:\n                smallest_positive = i\n            else:\n                smallest_positive = min(i, smallest_positive)\n    if largest_negative is None:\n        return (None, None)\n    else:\n        return (largest_negative, smallest_positive)",
        "test": "assert     largest_smallest_integers([1, -2, -3, -5, -6, 8, 4, -3, -2, 3, 2, 1]) == (None, None)",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return a if a > b else b\n    elif isinstance(a, int) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    else:\n        return None",
        "test": "assert     (compare_one(1, 1) is None)",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return sum([x for x in range(2, n+1, 2) if n-x%2 == 0]) == n\n",
        "test": "assert     is_equal_to_sum_even(12) == False",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert     special_factorial(5) == 120",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    \n    return '_'.join(text.split(' '))\n    \n    \ndef fix_exceptions(text):\n    \"\"\"\n    Given a string text, replace all characters in it that are not \n    in the list exceptions with underscores\n    \n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    \"\"\"\n    \n    return ''.join([e for e in text if e in exceptions])\n    \n",
        "test": "assert     fix_spaces('my test') =='my_test'",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    try:\n        file_name = file_name.replace(' ', '')\n        if len(file_name) == 0:\n            raise ValueError\n        if not file_name[0].isalpha():\n            raise ValueError\n        if file_name.count('.') > 1:\n            raise ValueError\n        if file_name.count('.') == 0:\n            raise ValueError\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            raise ValueError\n        \n        return 'Yes'\n    except:\n        return 'No'\n",
        "test": "assert     file_name_check('hello') == 'No'",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    sum = 0\n    \n    for i, val in enumerate(lst):\n        if i % 4 == 0:\n            val = val ** 3\n        if i % 3 == 0:\n            val = val ** 2\n        sum += val\n    \n    return sum\n",
        "test": "assert     sum_squares([4,5,6,7,8]) == 4500",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    sentence = sentence.split(' ')\n    prime_numbers = []\n    for word in sentence:\n        if is_prime(len(word)):\n            prime_numbers.append(word)\n    return''.join(prime_numbers)\n",
        "test": "assert     words_in_sentence(\"I am not a student.\") == \"not a student\"",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    if numerator % denominator == 0:\n        return True\n    return False\n",
        "test": "assert     simplify(\"3/4\", \"1/2\") == False",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "test": "assert     order_by_points([7, 8, 1, 4, 5, 9, 2, 6, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"error in order_by_points\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and (i % 10 == 1 or i % 10 == 3 or i % 10 == 5 or i % 10 == 7 or i % 10 == 9):\n            count += 1\n    return count\n",
        "test": "assert specialFilter([1, 3, 5, 7, 9]) == 2",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum(i*i - i + 1 for i in range(1, n)) // 3\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Venus\",)\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Mars\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Saturn\", \"Earth\")\n    elif planet1 == \"Neptune\" or planet2 == \"Neptune\":\n        return (\"Mercury\", \"Venus\")\n    else:\n        return tuple()",
        "test": "assert     bf('Venus', 'Earth') == ('Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # lst = [word for word in lst if len(word) % 2 == 0]\n    # return sorted(lst, key=len)\n    return sorted(lst, key=len, reverse=True)",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n%2==0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2, 2, 2) == 2",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum([x**2 for x in lst if x%2!=0])\n",
        "test": "assert     double_the_difference([]) == 0, \"Wrong result for an empty list\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i] - game[i]))\n    return score\n",
        "test": "assert     compare([0, 0, 0, 0, 0], [0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    import string\n    s = string.uppercase\n    cap, sm = 0, 0\n    for e in extensions:\n        for c in e:\n            if c in s:\n                cap += 1\n            else:\n                sm += 1\n    return class_name + '.' + extensions[0] if cap - sm == cap - sm else \\\n    class_name + '.StrongestExtension'\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    \n    if b in a: return True\n    return any([b in a[i:]+a[:i] for i in range(len(a))])\n",
        "test": "assert     cycpattern_check('foo', 'bar') == False",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    if num < 0:\n        num *= -1\n        even_digits += 1\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    return even_digits, odd_digits\n",
        "test": "assert     even_odd_count(42) == (2,0)",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"number is not an integer in range 1-1000\")\n    if number == 1:\n        return \"i\"\n    roman_numeral = \"\"\n    num_to_roman_dict = {\"1\":\"i\", \"2\":\"ii\", \"3\":\"iii\", \"4\":\"iv\", \"5\":\"v\",\n                         \"6\":\"vi\", \"7\":\"vii\", \"8\":\"viii\", \"9\":\"ix\"}\n    temp_num = number\n    while temp_num!= 0:\n        for roman_numeral_key in num_to_roman_dict.keys():\n            while temp_num >= int(roman_numeral_key):\n                roman_numeral += num_to_roman_dict[roman_numeral_key]\n                temp_num -= int(roman_numeral_key)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or c ** 2 + a ** 2 == b ** 2)\n",
        "test": "assert     (right_angle_triangle(3, 4, 5)             == True)",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['a', 'b', 'c']) == 'a'",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [number + need, remaining - need]",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "test": "assert do_algebra([\"+\", 2], [5, 3]) == 8",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].upper() if s[i].isupper() else s[i].lower()\n    return \"\".join(s)\n",
        "test": "assert     solve('rY lNo') == 'rY lNo'",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "test": "assert     generate_integers(2, 5) == [2, 4]",
        "num_ids": 553,
        "indeed": false
    }
]