[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    sorted_numbers = sorted(numbers)\n    for index, number in enumerate(sorted_numbers[:-1]):\n        if abs(number - sorted_numbers[index + 1]) < threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([2, 3, 4, 5], 1.5) is True",
        "num_ids": 343
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    separated_groups = []\n",
        "test": "assert separate_paren_groups(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [\"(((1 + (2 * 3)) + (4 * (5 + 6))))\"]",
        "num_ids": 541
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    integer, decimals = math.modf(number)\n    return decimals\n",
        "test": "assert     truncate_number(17.8)    == 17",
        "num_ids": 167
    },
    {
        "number": 3,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    # TODO: Complete this function\n    return sum(operations) < 0\n",
        "test": "assert     below_zero([1, 0, 1, 1, 1, -3, 1, 1, -1]) == False",
        "num_ids": 1191
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if not len(numbers):\n        raise ValueError(\"Cannot calculate mean absolute deviation on empty list.\")\n    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation(",
        "num_ids": 186
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert     intersperse(numbers=[], delimeter=2) == []",
        "num_ids": 288
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # The maximum nesting of nested parentheses is the level of nesting of parentheses to the left of the largest\n    # group that could possibly exist.\n    # Eg. (()()) has maximum two levels of nesting while ((())) has three.\n    paren_string = paren_string.replace('()', 'X')\n    paren_string = paren_string.replace(')', 'X')\n    paren_string = paren_string.replace('(', 'X')\n    paren_string = paren_string.replace(')', 'X')\n    paren_string = paren_string.replace('X', '(')\n    paren_string = paren_string.replace('X', ')')\n    paren_string = paren_string.replace('(', ')')\n    paren_string = paren_string.replace(')', '(')\n    max_nesting = 1\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nesting = 1\n            for j in range(i+1, len(paren_string)):\n                if paren_string[j] == '(':\n                    nesting += 1\n                elif paren_string[j] == ')':\n                    nesting -= 1\n                    if nesting == 0:\n                        break\n            if nesting > max_nesting:\n                max_nesting = nesting\n    return list(range(1, max_nesting+1))\n",
        "test": "assert     parse_nested_parens(\"((()()))\") == [3]",
        "num_ids": 638
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     len(filter_by_substring([\"Hello world\"], \"Hello\")) == 1",
        "num_ids": 302
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if numbers == []:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x*y, numbers)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 220
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    max_number = numbers[0]\n    result = [max_number]\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 7, 8]) == [8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "num_ids": 292
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n",
        "test": "assert     make_palindrome('nt') == 'nt'",
        "num_ids": 188
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    assert len(a) == len(b)\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\"",
        "num_ids": 266
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    longest_str = None\n    max_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            longest_str = string\n            max_len = len(string)\n    return longest_str\n",
        "test": "assert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"RS\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\"",
        "num_ids": 384
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(6, 8) == 2",
        "num_ids": 202
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('assdfkakc') == ['assd', 'assdf', 'assdfk', 'assdfkak', 'assdfkakc']",
        "num_ids": 327
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    s = ''\n    for i in range(n+1):\n        s += str(i) +''\n    return s.strip()\n",
        "test": "assert ___________ == string_sequence(10)",
        "num_ids": 167
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"ababcd\") == 4",
        "num_ids": 185
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    result = []\n    num_bars = 0\n    bars = []\n    for char in music_string:\n        if char == 'o':\n            num_bars += 1\n        elif char == 'o|':\n            if num_bars > 0:\n                bars.append(num_bars)\n                num_bars = 0\n        elif char == '.':\n            num_bars +=.5\n        elif char == '|':\n            num_bars += 1\n    bars.append(num_bars)\n    return bars\n",
        "test": "assert     parse_music('o|') == [2]",
        "num_ids": 867
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('abcabcabc', 'abc') == 3",
        "num_ids": 186
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sorted_numbers = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if int(numbers[i]) < int(numbers[j]):\n                temp = numbers[i]\n                numbers[i] = numbers[j]\n                numbers[j] = temp\n    return \" \".join(numbers)\n",
        "test": "assert     sort_numbers(\"five four three two one\") == \"one two three four five\"",
        "num_ids": 418
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"No numbers supplied\")\n",
        "test": "assert     find_closest_elements([2, 4, 6, 8]) == (4, 6)",
        "num_ids": 420
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [i - minimum for i in numbers]\n",
        "test": "assert     rescale_to_unit([1]) == [0.0]",
        "num_ids": 374
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([1,2,3]) == [1,2,3]",
        "num_ids": 235
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('peter') == len('peter')",
        "num_ids": 93
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    assert n > 0\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n",
        "test": "assert     1==largest_divisor(100)",
        "num_ids": 256
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n < 2:\n        return []\n    i, factors = 2, []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 265
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     remove_duplicates([1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 394
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('') == ''",
        "num_ids": 196
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate([\"cat\", \"dog\", \"fish\"]) == \"catdogfish\"",
        "num_ids": 222
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\") == [\"hello\"]",
        "num_ids": 190
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1, -2, 0, 3, 4, -5]) == [1, 3, 4]",
        "num_ids": 223
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False",
        "num_ids": 276
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs)!= 0, \"list of coefficients can't have a zero coefficient\"\n    xs.sort()\n    if xs[-1] == 0:\n        return xs[-2]\n    else:\n        return xs[-1] - 1\n",
        "test": "assert ",
        "num_ids": 271
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    new = []\n    for x in l:\n        if x%3 == 0:\n            new.append(x)\n    for x in l:\n        if x%3!= 0:\n            new.append(x)\n    new.sort()\n    return new",
        "test": "assert     sort_third([2,2,2,2,2]) == [2, 2, 2, 2, 2], \"failed test 2\"",
        "num_ids": 468
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return list(sorted(set(l)))\n",
        "test": "assert     unique([1, 1, 1, 2, 3]) == [1, 2, 3]",
        "num_ids": 227
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    m = l[0]\n    for i in l[1:]:\n        if i > m:\n            m = i\n    return m\n",
        "test": "assert     max_element([1,2,3,4]) == 4",
        "num_ids": 208
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    pass\n    return 0\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 173
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    length = len(l)\n    sort = []\n    for i in range(length):\n        if i % 2 == 0:\n            sort.append(l[i])\n        else:\n            sort.append(l[i])\n    sort.sort()\n    return sort\n",
        "test": "assert     sort_even([1, 3, 5, 7, 9, 11, 13]) == [1, 3, 5, 7, 9, 11, 13]",
        "num_ids": 330
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = \"\".join([\" \" if i < len(s) / 3 else \"\" for i in range(3 * len(s))])\n    # split string to groups.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert         decode_cyclic(encode_cyclic(string2)) == string2",
        "num_ids": 429
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        i = 0\n        prime_list = []\n        while i < n:\n            num = fib(i)\n            if is_prime(num):\n                prime_list.append(num)\n            i += 1\n        return prime_list[n-1]\n",
        "test": "assert     prime_fib(13) == 701",
        "num_ids": 287
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return (len(set(l)) == 3) and (-sum(l) in l)\n",
        "test": "assert     triples_sum_to_zero([0, 0, 0, 0]) == False",
        "num_ids": 281
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-2)\n",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 147
    },
    {
        "number": 42,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1]) == [2]",
        "num_ids": 144
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[-item] = item\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,-2,-1])",
        "num_ids": 305
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert     change_base(0, 16) == '0'",
        "num_ids": 345
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(2, 3) == 3",
        "num_ids": 120
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 298
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Return median of l if l is length 1, otherwise median of two elements\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0]+l[1])/2\n    # Determine number of elements to sort\n    n = len(l)\n    # Sort l and choose median\n    l.sort()\n    m = n//2\n    if n % 2 == 1:\n        return l[m]\n    else:\n        return (l[m]+l[m-1])/2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 344
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abba') == True, 'Example'",
        "num_ids": 179
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # Use peasant multiplication\n    r = 1\n    while n > 0:\n        if n % 2 == 1:\n            r = (r * n) % p\n        n //= 2\n    return r\n",
        "test": "assert     modp(0, 255) == 1",
        "num_ids": 297
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"barfoo\")) == \"barfoobaz\"",
        "num_ids": 220
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    vowels = set('aeiou')\n    new_text = ''.join(i for i in text if i not in vowels)\n    return new_text\n",
        "test": "assert     remove_vowels('A') == 'A'",
        "num_ids": 263
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return t not in l\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5, 6], 5) == False",
        "num_ids": 191
    },
    {
        "number": 53,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3",
        "num_ids": 55
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars('a', 'a') == True",
        "num_ids": 127
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # TODO: optimize\n    #\n    # Using the formula F(n) = F(n-2) + F(n-1)\n    # we find the n-th fibonacci number\n    # at runtime\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 213
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"<\":\n                return False\n            stack.pop()\n    return True\n",
        "test": "assert     correct_bracketing(\"\") == True",
        "num_ids": 238
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([]) == True",
        "num_ids": 474
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']",
        "num_ids": 284
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_prime_factor(5) == 5",
        "num_ids": 182
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    assert type(n) == int and n >= 0, \"n must be a positive integer\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 153
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    b_list = brackets.strip().split(\"()\")\n    return (len(b_list) == 1) or (brackets.count(\"(\") == brackets.count(\")\"))\n",
        "test": "assert     correct_bracketing(\"(())\") == True",
        "num_ids": 215
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    size = len(xs)\n    if size == 0:\n        return []\n    elif size == 1:\n        return [0]\n    elif size == 2:\n        return [xs[1] * 1]\n    else:\n        result = [xs[i] * (i+1) for i in range(size-1)]\n        return result + [xs[size-1] * 1]\n",
        "test": "assert ",
        "num_ids": 280
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(n-2):\n            tmp = b\n            b = a + b\n            a = tmp\n        return b\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 196
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count + 1 if s[-1] in 'y' else count\n",
        "test": "assert     vowels_count('susan') == 2",
        "num_ids": 415
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if shift > len(str(x)):\n        shift %= len(str(x))\n    if shift == 0:\n        return str(x)\n    digits = [int(x) for x in str(x)]\n    for i in range(shift):\n        digits.append(digits.pop(0))\n    return \"\".join([str(d) for d in digits])\n",
        "test": "assert ",
        "num_ids": 255
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum(ord(c) - ord('A') for c in s.upper() if c.isupper())\n",
        "test": "assert     digitSum('abcdef') == 15",
        "num_ids": 145
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    apples = s.count(\"apples\")\n    oranges = s.count(\"oranges\")\n    mangoes = s.count(\"mango\")\n    return n - apples - oranges - mangoes\n",
        "test": "assert     fruit_distribution(s
        "num_ids": 1194
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     [ 1, 2 ] == pluck([ 1, 3, 2 ])",
        "num_ids": 147
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    value = 1\n    while value < len(lst):\n        if lst.count(value) >= value:\n            return value\n        value += 1\n    return -1\n",
        "test": "assert     search([]) == -1",
        "num_ids": 1176
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([5,3,1,2,4]) == [1,2,3,4,5], \"Fail Test 2\"",
        "num_ids": 493
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    #\n    # Your code here\n    #\n    #\n    return -1\n",
        "test": "assert     triangle_area(5, 2, 3) == -1.0",
        "num_ids": 268
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "test": "assert     will_it_fly( [1, 2, 3, 4], 10) == False",
        "num_ids": 1216
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left]!= arr[right]:\n            count += 1\n            if left < right - 1:\n                if arr[left + 1]!= arr[right]:\n                    arr[left], arr[right] = arr[right], arr[left]\n                else:\n                    left += 1\n            else:\n                arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return count\n",
        "test": "assert     smallest_change([1, 3, 5, 4, 2]) == 2",
        "num_ids": 349
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    if len(lst1) <= len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert     total_match(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c']",
        "num_ids": 445
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_multiply_prime(4)",
        "num_ids": 237
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return n**int(math.log(x, n)) == x\n",
        "test": "assert     is_simple_power(9, 4) == False",
        "num_ids": 154
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if a < 0:\n        a *= -1\n    return a**3 == a\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True if this \n    integer is prime, or False if it is not.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> True\n    '''\n    if a < 2:\n        return False\n    for i in xrange(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert izip(range(10), iscube(x) for x in range(10)) == zip([False, True, True, True, False, True, False, True, False, False], [False, True, True, True, False, True, False, True, False, False])",
        "num_ids": 323
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    primes = [2, 3, 5, 7, 11, 13, 17]\n    n = len(num)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0 if num[0] not in '0123456789ABCDEF' else 1\n    nums = [str(i) for i in range(10)]\n    nums[0] = '0'\n    counter = 0\n    if num[0] in nums:\n        counter += 1\n    if num[1] in nums:\n        counter += 1\n    if num[2] in nums:\n        counter += 1\n    for i in range(3, n):\n        if num[i] in nums:\n            counter += 1\n            if num[i] == '0':\n                if num[i-1] == '0' and num[i-2]!= '0':\n                    counter -= 1\n            elif num[i-1] == '0' and num[i-2]!= '0':\n                counter -= 1\n            elif num[i-1] in '0' and num[i-2]!= '0':\n                counter -= 1\n    return counter\n",
        "test": "assert     hex_key(\"FA\") == [2]",
        "num_ids": 827
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    binary_str = \"\"\n    for i in range(0,8):\n        if(int(decimal)%2 == 0):\n            binary_str += '0'\n        else:\n            binary_str += '1'\n        decimal = int(decimal/2)\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str\n",
        "test": "assert     decimal_to_binary(1) == '0b1'",
        "num_ids": 241
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(s) >= 3 and all([s.count(s[i:i+3]) == 1 for i in range(len(s))])\n",
        "test": "assert     is_happy(\"a\") == False, \"Wrong!\"",
        "num_ids": 232
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    grades = [round(x, 2) for x in grades]\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\",
        "num_ids": 716
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    string = string.strip()\n    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        return True\n    for num in range(2, len(string)):\n        if string[num] == string[0] or string[num] == string[-1]:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert     prime_length(\"m\") == False, \"should be False\"",
        "num_ids": 422
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    return 1\n",
        "test": "assert     starts_one_ends(1) == 0",
        "num_ids": 296
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Write your code here\n    total = 0\n    while N:\n        total += N % 2\n        N //= 2\n    return str(total)",
        "test": "assert     solve(1)     == \"1\"",
        "num_ids": 265
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    res = 0\n    for i in lst:\n        if i % 2 == 0:\n            res += i\n    return res\n",
        "test": "assert add([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8]",
        "num_ids": 242
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    s = s.split(' ')\n    return''.join(sorted(s, key=lambda x: ord(x[0])))",
        "test": "assert     anti_shuffle('Hi my name is Aniket') == 'Hi my name is Aniket'",
        "num_ids": 249
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def get_new_lst(lst, x):\n        new_lst = []\n        for row in lst:\n            new_row = []\n            for index, elem in enumerate(row):\n                new_row.append((index, elem))\n            new_row.sort(key=lambda elem: elem[1])\n            new_row.sort(key=lambda elem: elem[0], reverse=True)\n            new_row = [elem[1] for elem in new_row]\n            new_lst.append(new_row)\n        return new_lst\n",
        "test": "assert     get_row(example_input, 2) == [(0,0), (0,1), (1,0), (1,1), (2,0), (2,1), (2,2), (2,3), (1,3), (0,3)]",
        "num_ids": 584
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(array)",
        "test": "assert     sort_array([4, 2, 3, 1]) == [1, 2, 3, 4]",
        "num_ids": 176
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    rotated = alphabet[len(alphabet):] + alphabet[:len(alphabet)]\n    return ''.join([rotated[alphabet.index(char)] for char in s])\n",
        "test": "assert     encrypt('how') == 'rwo'",
        "num_ids": 269
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return None\n",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 1242
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sum(1 for s in S.split('.') if s.startswith('I'))\n",
        "test": "assert     is_bored(\"this is a simple sentence\") == False, \"is_bored('this is a simple sentence')\"",
        "num_ids": 202
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return ((x + y == z) or (x == y + z)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n",
        "test": "assert     not any_int(1.0, 0.0, -1)",
        "num_ids": 208
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    #TODO\n    return message\n",
        "test": "assert     encode('VOWELS') == 'VOWELS'",
        "num_ids": 782
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    lst = sorted(lst)\n    for i in lst:\n        if lst.count(i) > 1:\n            lst.remove(i)\n    lst = sorted(lst)\n    answer = 0\n    for i in lst:\n        answer += i\n    return answer\n",
        "test": "assert     skjkasdkd( [20, 64, 25, 50] ) == 10",
        "num_ids": 1235
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(dict) == 0:\n        return False\n    for x in dict:\n        if type(x) is not str:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({1:2}) == False",
        "num_ids": 253
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        primes = [2]\n        i = 3\n        while i < n:\n            for prime in primes:\n                if i % prime == 0:\n                    break\n            else:\n                primes.append(i)\n            i += 2\n        return primes\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 361
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    a = abs(a)\n    b = abs(b)\n    result = 0\n    for i in range(a):\n        result += b\n    if a < 0:\n        result = -result\n    return result",
        "test": "assert     multiply(0, 1) == 0",
        "num_ids": 179
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum(s[i] in 'AEIOU' for i in range(len(s)//2))\n",
        "test": "assert     count_upper('abcdef') == 0",
        "num_ids": 343
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return int(round(float(value)))",
        "test": "assert     closest_integer(\"-14.5\") == -15",
        "num_ids": 132
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    levels = [n]\n    for i in range(n):\n        levels.append(2 * n - i)\n    return levels\n",
        "test": "assert ",
        "num_ids": 284
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return s.split(\",\")\n",
        "test": "assert     words_string('hello,world,hi') == ['hello', 'world', 'hi']",
        "num_ids": 200
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if x <= 0 or y <= 0:\n        return -1\n    elif x > y:\n        return -1\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                return i\n        return -1\n",
        "test": "assert     choose_num(3, 6) == 4",
        "num_ids": 255
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n > m:\n        return -1\n    n_bin = to_bin(n)\n    m_bin = to_bin(m)\n    total = 0\n    for i in range(len(n_bin)):\n        total += (int(m_bin[i]) - int(n_bin[i]))\n    return to_str(total)\n",
        "test": "assert     rounded_avg(2, 3) == 2",
        "num_ids": 183
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    result = []\n    for i in x:\n        if len(str(i)) % 2 == 0:\n            continue\n        else:\n            result.append(i)\n    return sorted(result)\n    \n",
        "test": "assert     [1, 2, 4, 5, 6, 8, 9] == unique_digits([1, 2, 4, 5, 6, 8, 9])",
        "num_ids": 304
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n    ",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")",
        "num_ids": 515
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    n_list = []\n    for i in range(1,n+1):\n        if i%2==0:\n            n_list.append(math.factorial(i))\n        else:\n            n_list.append(sum(range(1,i+1)))\n    return n_list\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 191
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    ret = [0, 0]\n",
        "test": "assert     even_odd_palindrome(2) == (1, 1)",
        "num_ids": 127
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            if sum([int(digit) for digit in str(num)]) > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 277
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(arr)==0:\n        return True\n    temp = arr[0]\n    for i in range(1, len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i]<arr[i+1]:\n                return True\n        if i==len(arr)-1:\n            if arr[i]>arr[i-1]:\n                return True\n        else:\n            if arr[i]>=arr[i-1] and arr[i]<=arr[i+1]:\n                return True\n    return False\n",
        "test": "assert     move_one_ball([1,2,3,4,5]) == True, \"Wrong result\"",
        "num_ids": 1166
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    elif len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    k = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[k]:\n            return \"NO\"\n        k += 1\n    return \"YES\"\n",
        "test": "assert     exchange([1,3,2,5,4,6,7,10,15], [4,7,5,6,10,3,2,15,1]) == \"YES\"",
        "num_ids": 463
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    histo = {}\n    for i in test:\n        histo[i] = histo.get(i, 0) + 1\n    return histo\n",
        "test": "assert     histogram(\"a\") == {\"a\": 1}",
        "num_ids": 247
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    s_tmp=[]\n    for i in s:\n        if i in c:\n            s_tmp.append(i)\n    if s_tmp==s_tmp[::-1]:\n        return (s_tmp,True)\n    else:\n        return (s_tmp,False)\n",
        "test": "assert     reverse_delete(\"abcdefg\", \"bef\") == (\"cdefgab\", False)",
        "num_ids": 982
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    result = []\n    for strng in lst:\n        counter = 0\n        for char in strng:\n            if int(char)%2:\n                counter+=1\n        result.append(str(counter)+\"n the str4ng \"+str(len(strng))+\" of the 4nput.\")\n    return result\n",
        "test": "assert ",
        "num_ids": 461
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(nums) == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 126
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    import sys\n    sys.setrecursionlimit(10**4)\n    m, n = len(grid), len(grid[0])\n    # hashmap to store the potential extraction for each bucket\n    dp = [[-1] * n for _ in range(m)]\n    # whether the wells have been emptied\n    filling = [[False] * n for _ in range(m)]\n    # whether the wells are draining\n    draining = [[False] * n for _ in range(m)]\n    # the last index of the last bucket to fill\n    idx = [[-1] * n for _ in range(m)]\n    # no wells can be filled\n    res = 0\n",
        "test": "assert     max_fill([",
        "num_ids": 517
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(arr, key=lambda x: [len(str(bin(x)))-2, x])",
        "test": "assert     [0] == sort_array([0])",
        "num_ids": 1254
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return\n",
        "test": "assert select_words(\"asfdsfj\", 2) == [\"asfdsfj\"]",
        "num_ids": 238
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    import string\n    chars = list(string.ascii_lowercase)\n    for i in range(len(word)-1,-1,-1):\n        if word[i] in chars:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"a\") == \"a\"",
        "num_ids": 266
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    # Using Stack, time complexity is O(n)\n    stack = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    \n    return 'Yes' if len(stack) == 0 else 'No'",
        "test": "assert     match_parens(')(())') == 'No'",
        "num_ids": 350
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if k > len(arr):\n        return []\n    arr.sort()\n    return arr[len(arr)-k:]\n",
        "test": "assert     maximum([], 0) == []",
        "num_ids": 158
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2==0 and lst[i]%2==1])\n",
        "test": "assert     solution([2, 4, 6, 8]) == 0",
        "num_ids": 242
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if k == 0 or len(arr) == 0:\n        return 0\n",
        "test": "assert     add_elements([1, 2, 3, 4, 5, 6], 2) == 7",
        "num_ids": 327
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 316
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(date) == 0:\n        return False\n    else:\n        if not (1 <= int(date[:2]) <= 12):\n            return False\n        elif not (1 <= int(date[3:5]) <= 31):\n            return False\n        elif not (1 <= int(date[6:8]) <= 31):\n            return False\n        elif not (1 <= int(date[9:11]) <= 12):\n            return False\n        elif not (1 <= int(date[12:]) <= 31):\n            return False\n        elif not (1 <= int(date[3:5]) <= 30):\n            return False\n        elif not (1 <= int(date[:2]) <= 31):\n            return False\n        elif not (1 <= int(date[3:5]) <= 29):\n            return False\n        else:\n            return True\n",
        "test": "assert     valid_date('') == False",
        "num_ids": 440
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return txt.split()\n    \n",
        "test": "assert     split_words('Hello World') == ['Hello', 'World'], 'fail test 1'",
        "num_ids": 164
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst_copy = lst[:] # duplicate the list\n    lst_copy.sort()\n    return lst == lst_copy\n",
        "test": "assert     is_sorted([]) == True, \"is_sorted([]) == True\"",
        "num_ids": 523
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return 'NO' if interval1[1] <= interval2[0] or interval2[1] <= interval1[0] else 'YES'\n",
        "test": "assert     intersection( (3, 5), (2, 4) ) == \"NO\"",
        "num_ids": 466
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    prod = 1\n    for num in arr:\n        prod *= (num if num > 0 else -num)\n    return prod if arr else None\n",
        "test": "assert     prod_signs([0,0,0,0]) == 0",
        "num_ids": 299
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not grid or not grid[0] or not k:\n        return []\n",
        "test": "assert     minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 3) == [3, 2, 1, 4, 5]",
        "num_ids": 296
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        l = tri(n - 1)\n        l.append(l[-1] + l[-2] + l[-3])\n        return l\n",
        "test": "assert     tri(4) == 3",
        "num_ids": 360
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 10:\n        return n\n    else:\n        n = str(n)\n        odds = 1\n        for c in n[1:]:\n            if int(c) % 2 == 1:\n                odds *= int(c)\n        return odds\n",
        "test": "assert     digits(10) == 1",
        "num_ids": 201
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    bracket_stack = []\n    for c in string:\n        if c == '[':\n            bracket_stack.append(c)\n        elif c == ']':\n            if not bracket_stack:\n                return False\n            else:\n                bracket_stack.pop()\n    return not bracket_stack\n    \ndef is_balanced(string):\n    '''\n    Create a function that takes a string as input and returns True if the input string is balanced.\n    A string is balanced if it is composed of any number of the following characters:\n    [,],{,} and/or parenthesis.\n",
        "test": "assert     is_nested(\"{[()]}\") == True",
        "num_ids": 321
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    res = 0\n    for num in lst:\n        res += num**2\n    return int(math.ceil(res))\n",
        "test": "assert     sum_squares([0.0, 0.0, 0.0]) == 0.0",
        "num_ids": 344
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # your code here\n    if len(txt) == 0:\n        return False\n    else:\n        return (txt[-1].isalpha() and not txt[-1].isnumeric())\n",
        "test": "assert     check_if_last_char_is_a_letter(\"world\")",
        "num_ids": 217
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def aux(idx, prev):\n        if idx == 0:\n            return prev\n        else:\n            idx -= 1\n            while idx > 0 and arr[idx] >= arr[idx-1]:\n                idx -= 1\n            return idx\n    return aux\n",
        "test": "assert     can_arrange([1, 3, 2]) == 2",
        "num_ids": 314
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    a, b = None, None\n    for num in lst:\n        if num < 0:\n            a = max(a, num)\n        elif num > 0:\n            b = min(b, num)\n    return (a, b)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 339
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if a > b:\n        return a\n    if b > a:\n        return b\n    return None\n",
        "test": "assert     compare_one(5, 5) == None",
        "num_ids": 372
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 4:\n        return False\n    sum_even = 4\n    for i in range(2, n, 2):\n        if n - i < 2 or n - i > 4:\n            break\n        if n - i % 2 == 0:\n            sum_even -= i\n    return sum_even % 2 == 0\n",
        "test": "assert     is_equal_to_sum_even(20)",
        "num_ids": 216
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 186
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"  \", \"-\")\n    \n    return new_text\n",
        "test": "assert     fix_spaces('hello') == 'hello'",
        "num_ids": 239
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return 'Yes' if '.' in file_name and file_name.rpartition('.')[2].isalpha() and file_name.rpartition('.')[2].isalpha() and file_name.rpartition('.')[2].endswith('exe') and file_name.rpartition('.')[2].startswith('a') and file_name.rpartition('.')[2].startswith('A') else 'No'\n",
        "test": "assert     file_name_check('asdfasdf.txt') == 'No'",
        "num_ids": 328
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            if i % 3 == 0:\n                sum += i**2\n            else:\n                sum += i**3\n    return sum\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8]) == sum([1,2,3,4,5,6,7,8]) ** 2",
        "num_ids": 398
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sentence = sentence.split(' ')\n    sentence = filter(None, sentence)\n    if sentence is None:\n        return ''\n    return''.join([word for word in sentence if is_prime(len(word))])\n",
        "test": "assert         words_in_sentence(\"this is my sentence\") == \"thisistmysentence\"",
        "num_ids": 305
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # get numerator and denominator from fraction\n    if \"/\" in x:\n        numerator, denominator = x.split(\"/\")\n        numerator = int(numerator)\n        denominator = int(denominator)\n    else:\n        numerator = int(x)\n        denominator = int(n)\n",
        "test": "assert     not simplify('2/4', '1/3')",
        "num_ids": 277
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sorted(nums, key=lambda x: sum([int(x) for x in str(abs(x))]))\n",
        "test": "assert     [1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130]     == order_by_points([1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130])",
        "num_ids": 484
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    counter = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and (nums[i] % 2 == 1 and nums[0] % 2 == 1) or (nums[i] % 2 == 0 and nums[-1] % 2 == 0):\n            counter += 1\n    return counter\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9, 10]) == 1",
        "num_ids": 309
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 199
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mercury')",
        "num_ids": 585
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum([\"\", \"a\", \"ab\", \"abc\"]) == [\"\", \"a\", \"ab\", \"abc\"]",
        "num_ids": 225
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n % 2 == 0 and n!= 2:\n        return y\n    elif n % 3 == 0 and n!= 3:\n        return y\n    elif n % 5 == 0 and n!= 5:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(7,    1, 2) == 1",
        "num_ids": 168
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x*x for x in lst if x % 2!= 0])\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 257
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass",
        "test": "assert     compare([1,2,3,4,5],[3,3,4,2,0]) == [0,3,3,2,1]",
        "num_ids": 328
    },
    {
        "number": 153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    extensions_strength = {}\n    for extension in extensions:\n        strongest_extension = ''\n        for letter in extension:\n            if letter.isupper():\n                strongest_extension += '1'\n            elif letter.islower():\n                strongest_extension += '-1'\n        if strongest_extension not in extensions_strength:\n            extensions_strength[strongest_extension] = []\n        extensions_strength[strongest_extension].append(extension)\n    for strength, extensions in extensions_strength.items():\n        if len(extensions) == 1:\n            return '{}.{}'.format(class_name, extensions[0])\n        if len(extensions) > 1:\n            strongest_extension = ''\n            for extension in extensions:\n                strongest_extension += max(extension)\n            return '{}.{}'.format(class_name, strongest_extension)\n        \n    ",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1585
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(a)):\n        if b == a[i:] + a[:i]:\n            return True\n    return False",
        "test": "assert         cycpattern_check('a', 'a') == True",
        "num_ids": 298
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return (len(str(num).replace(\"-\", \"\").replace(\" \", \"\")[1::2]), len(str(num).replace(\"-\", \"\").replace(\" \", \"\")[0::2]))\n",
        "test": "assert     (0,0) == even_odd_count(123)",
        "num_ids": 316
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = []\n    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    romans = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    for i, num in enumerate(numbers):\n        while number >= num:\n            result.append(romans[i])\n            number -= num\n    return ''.join(result)\n",
        "test": "assert     int_to_mini_roman(1) == \"I\"",
        "num_ids": 357
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return a**2+b**2 == c**2 or a**2+c**2 == b**2 or b**2+c**2 == a**2\n",
        "test": "assert     right_angle_triangle(1, 1, 2) == False",
        "num_ids": 179
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return max(words,key=len)\n",
        "test": "assert     find_max(['hello', 'world', 'golf', 'python', 'dog']) == 'python'",
        "num_ids": 272
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     eat(3, 1, 4) == [ 3, 2]",
        "num_ids": 137
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            result = eval(str(result) + operator[i - 1] + str(operand[i]))\n    return result\n",
        "test": "assert     do_algebra(['*', '/'], [3, 2, 1]) == 6",
        "num_ids": 241
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = list(s)\n    res = []\n    for char in s:\n        if char.isalpha():\n            res.append(char.lower() if char.isupper() else char.upper())\n        else:\n            res.append(char)\n    return \"\".join(res)\n",
        "test": "assert     solve(\"abcdeF\") == \"ABCDEFG\"",
        "num_ids": 361
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if text is None or text == '':\n        return None\n    return md5(text).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 175
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    integers = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "test": "assert     generate_integers(3, 7) == [4, 6]",
        "num_ids": 209
    }
]