[
    {
        "number": 0,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    for i, a in enumerate(numbers):\n        for j in range(i, len(numbers)):\n            if numbers[j] - a <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 2.0, 3.0], 3.0) == True",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            string += \"(\"\n        elif char == \")\":\n            string += \")\"\n        elif char == \"{\":\n            string += \"{\"\n        elif char == \"}\":\n            string += \"}\"\n    return string.split(\" \")\n",
        "test": "assert separate_paren_groups('(())') == ['(())']",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    i = 0\n    while number > 10:\n        number /= 10\n        i += 1\n    return number * 10 ** i\n",
        "test": "assert     truncate_number(0.1) == 0.1",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    balance = 0\n    for operation in operations:\n        balance = balance + operation if operation > 0 else balance - operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     not below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    n = len(numbers)\n    m = sum(numbers) / n\n    differences = [abs(x - m) for x in numbers]\n    mad = sum(differences) / n\n    return mad\n",
        "test": "assert     1.0 == mean_absolute_deviation([0.0, 1.0, 2.0, 3.0])",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index!= len(numbers) - 1:\n            result.append(number)\n            result.append(delimeter)\n        else:\n            result.append(number)\n    return result\n",
        "test": "assert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    level_of_nesting = 0\n    max_level_of_nesting = 0\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            level_of_nesting += 1\n            max_level_of_nesting = max(level_of_nesting, max_level_of_nesting)\n        elif char == ')':\n            level_of_nesting -= 1\n        \n    return [max_level_of_nesting, level_of_nesting]\n",
        "test": "assert     parse_nested_parens(\"(()())\") == [3]",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"hey\") == [\"hey\", \"hey there\"]",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    sum_num = 0\n    product_num = 1\n    for i in numbers:\n        sum_num += i\n        product_num *= i\n    return (sum_num, product_num)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    max_number = 0\n    result = []\n    for number in numbers:\n        if number > max_number:\n            result.append(number)\n            max_number = number\n        else:\n            result.append(max_number)\n    return result\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            postfix = string[len(string) - i:len(string)]\n            return prefix + postfix[::-1]\n    return ''\n",
        "test": "assert     is_palindrome('a')",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "test": "assert     string_xor(\"1\", \"1\") == \"0\"",
        "num_ids": 1528,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) is None",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(5, 6) == 1",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes('') == ['']",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(13) =='0 1 2 3 4 5 6 7 8 9 10 11 12'",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    lst = []\n    for item in music_string.split(\" \"):\n        if item == \"o\" or item == \"o|\" or item == \".|\":\n            lst.append(4)\n        elif item == \"o.|\":\n            lst.append(2)\n        elif item == \"o.|.\":\n            lst.append(1)\n        elif item == \"o.|.|\":\n            lst.append(0.5)\n        elif item == \"o..|\":\n            lst.append(0.25)\n        else:\n            lst.append(float(item))\n    return lst\n",
        "test": "assert     parse_music('o|') == [4]",
        "num_ids": 3854,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"what a beautiful day\", \"day\") == 1",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    numbers = numbers.split(' ')\n    sorted_numbers = sorted(numbers)\n    return''.join(sorted_numbers)\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    numbers.sort()\n    diff_1 = abs(numbers[0] - numbers[1])\n    diff_2 = abs(numbers[-1] - numbers[-2])\n    if diff_1 <= diff_2:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[-1], numbers[-2]\n",
        "test": "assert     find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0]) == (-6.0, -5.0)",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return [x/max(numbers) for x in numbers]\n",
        "test": "assert     rescale_to_unit([]) == []",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return [int(value) for value in values if isinstance(value, (int, float))]\n",
        "test": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n == 1:\n        return [1]\n    divisor = 2\n    factors = []\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2)    == [2]",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return list(set(numbers))\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return \"\".join([(char.upper() if char.isupper() else char.lower()) for char in string])\n",
        "test": "assert     flip_case('a') == 'a'",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == ''",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"0\") == []",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1,2,3,-4])     == [1,2,3]",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if not any(xs):\n        raise ValueError(\"Coefficients of polynomial must not be zero.\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients of polynomial must have non zero largest coefficient.\")\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if i == 0:\n            return -xs[i] / xs[i + 1]\n        if xs[i] * xs[i + 1] > 0:\n            raise ValueError(\"Coefficients of polynomial must have opposite signs.\")\n        if xs[i] * xs[i + 1] == 0:\n            return -xs[i] / xs[i + 1]\n        if i == len(xs) - 1:\n            return xs[i] / xs[i - 1]\n",
        "test": "assert     find_zero([2, 1, 0, -1]) == -2",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n    l_new.sort()\n    return l_new\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1,2,2,2,3,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,7]) == [1,2,3,4,5,6,7]",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3]) == 3",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # the number of times the 7 appears in the integers less than n which are divisible by 11 or 13\n    return sum(str(n)[i] == \"7\" for i in range(len(str(n))))\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    new_list = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            new_list.append(l[index])\n        else:\n            new_list.append(sorted(l)[index])\n    return new_list\n    \n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([group[-1] + group[:-1] for group in groups])\n",
        "test": "assert     decode_cyclic(\"a\") == \"a\"",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    first = 0\n    second = 1\n    i = 2\n    while i <= n:\n        first, second = second, second + first\n        i += 1\n    if is_prime(second):\n        return second\n    else:\n        return None\n",
        "test": "assert     prime_fib(16) == 61",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(l) < 3:\n        return False\n    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(i)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3, 6, 6]) == True",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return sum(1 for i in range(n) for j in range(i + 1, n) if abs(i - j) % (n // 2) == 0)",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list( [1, 2, 3, 4, 5] ) == [2, 3, 4, 5, 6]",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    all_pairs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            all_pairs.append((l[i], l[j]))\n    return any(sum(pair) == 0 for pair in all_pairs)\n",
        "test": "assert     pairs_sum_to_zero([10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == False",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    q = x // base\n    r = x % base\n    if q == 0:\n        return str(r)\n    else:\n        return change_base(q, base) + str(r)\n",
        "test": "assert     change_base(1234, 10) == \"1234\"",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(10,5) == 25",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a = 0\n        b = 1\n        c = 2\n        for i in range(2,n):\n            temp = a + b + c\n            a = b\n            b = c\n            c = temp\n        return temp\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 1:\n        return sorted(l)[len(l) // 2]\n    else:\n        return (sorted(l)[len(l) // 2 - 1] + sorted(l)[len(l) // 2]) / 2.0\n",
        "test": "assert     median([1,2,3,4,5,6,7]) == 4",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return text == text[::-1]",
        "test": "assert     is_palindrome('radar') == True",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return pow(2, n) % p\n",
        "test": "assert     modp(4, 5) == modp(4, 5) == modp(4, p=5) == modp(4, p=5)",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert         decode_shift(\"stefan\")!= \"steffan\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_text = new_text + char\n    return new_text\n",
        "test": "assert     remove_vowels(\"\")    == \"\",    \"remove_vowels('hello world') is not correct\"",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    for e in l:\n        if e < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3, 4, 5, 6], 6) is False",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return x + y\n",
        "test": "assert     add(5, 5) == 10",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n",
        "test": "assert     same_chars(\"\", \"\") == True",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert         fib(1) == 1",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert not correct_bracketing(\"<><<><\")",
        "num_ids": 1536,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([]) == True",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "test": "assert     common([1, 2, 3, 4, 5], [1, 4, 5, 6, 7]) == [1, 4, 5]",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 1535,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n    \ndef sum_to_n_n(n):\n    \"\"\"sum_to_n_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_n(30)\n    465\n    >>> sum_to_n_n(100)\n    5050\n    >>> sum_to_n_n(5)\n    15\n    >>> sum_to_n_n(10)\n    55\n    >>> sum_to_n_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i*i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    bracket_pairs = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    for b in brackets:\n        if b in bracket_pairs:\n            stack.append(b)\n        elif b in bracket_pairs.values():\n            if stack == [] or bracket_pairs[stack.pop()]!= b:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\")\") == False",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # init derivative\n    deriv = [0] * (len(xs) - 1)\n",
        "test": "assert ",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n        if i == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('w') == 0",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    shift %= len(str(x))\n    return str(x)[-shift:] + str(x)[:len(str(x))-shift]\n",
        "test": "assert     circular_shift(12345,4) == '789'",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return s.count('mango') - s.count('apple')\n",
        "test": "assert     fruit_distribution('1,0,0',3) == 0",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if not arr:\n        return []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(lst) == 0:\n        return -1\n    max_freq = 0\n    max_int = -1\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            max_freq = lst.count(lst[i])\n            max_int = lst[i]\n        elif lst.count(lst[i]) > max_freq:\n            max_freq = lst.count(lst[i])\n            max_int = lst[i]\n    return max_int\n",
        "test": "assert     search([]) == -1",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    if len(lst) < 2:\n        return lst\n    for i in range(len(lst)):\n        min_value = min(lst[i:])\n        for j in range(len(lst[i:])):\n            if lst[j] == min_value:\n                break\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a*b*c)/2, 2)\n",
        "test": "assert     triangle_area(3, 4, 7) == -1",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    def is_palindrome(l):\n        '''\n        Write a function that returns True if the list is a palindrome, and False otherwise.\n        '''\n        return l[:] == l[::-1]\n    return is_palindrome(q) and sum(q) <= w\n",
        "test": "assert     will_it_fly([3,6,5],10) == False",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    arr_len = len(arr)\n    hash_table = {}\n    for i in range(arr_len):\n        if arr[i] not in hash_table:\n            hash_table[arr[i]] = 1\n        else:\n            hash_table[arr[i]] += 1\n    odd_count = 0\n    for val in hash_table:\n        if hash_table[val] % 2 == 1:\n            odd_count += 1\n    if odd_count > 1:\n        return -1\n    else:\n        return arr_len - odd_count\n",
        "test": "assert     smallest_change([1, 2, 1]) == 2",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # lst1, lst2 = sorted(lst1), sorted(lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) > len(lst2):\n            return lst2\n        else:\n            return lst1\n",
        "test": "assert     total_match(['l','i','s','m'], ['l','i','d','k']) == ['l','i','s','m']",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    for x in range(2, int(a ** (1/2)) + 1):\n        if a % x == 0:\n            return False\n",
        "test": "assert     is_multiply_prime(45) == False",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n==1:\n        return True\n    if x==1:\n        return True\n    if n%2==0 and n!=2:\n        return False\n    else:\n        return is_simple_power(x, n//2)\n",
        "test": "assert     not is_simple_power(4, 8)",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return pow(a,3) == a",
        "test": "assert     iscube(20) == False",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if len(num) == 0:\n        return 0\n    elif len(num) == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(len(num)):\n            if int(num[i:i+1], 16) in [2, 3, 5, 7, 11, 13, 17]:\n                result += 1\n    return result\n",
        "test": "assert     hex_key('') == 0",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    binary_string = \"\"\n    while decimal:\n        binary_string += str(decimal%2)\n        decimal /= 2\n    binary_string = \"db\" + binary_string + \"db\"\n    return binary_string\n",
        "test": "assert     decimal_to_binary(decimal=1) == \"1\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return len(s) >= 3 and s == s[0] + s[1] + s[2] and all(s[i]!= s[i+1] for i in range(len(s)-2))\n",
        "test": "assert     not is_happy(\"bbbb\")",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]",
        "num_ids": 2435,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # ************************** Solution ******************************\n    # convert string to a list\n    string = list(string)\n    # start from 2 to the length of the list\n    for i in range(2, len(string)):\n        # if it is a prime number\n        if string[i] == 'a':\n            # iterate through the list to delete the 'a'\n            while string[i] == 'a':\n                del string[i]\n                # if the length is 1, it is not a prime number\n                if len(string) == 1:\n                    return False\n                # if the length is 2, it is a prime number\n                if len(string) == 2:\n                    return True\n        # if it is not a prime number\n        else:\n            return False\n",
        "test": "assert     prime_length('123456789') == False",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert         starts_one_ends(2) == 1",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return bin(N).replace(\"0b\",\"\")\n",
        "test": "assert     solve(1) == \"1\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            lst[i] += lst[i]\n        i += 1\n    return lst\n",
        "test": "assert add([]) == []",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))\n",
        "test": "assert     anti_shuffle(\" 1-2--3-4-\") == \"1-2--3-4-\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    row_set = set()\n    for row in lst:\n        row_set.add(row.count(x))\n    \n    row_lst = [i for i in range(len(lst)) if lst[i].count(x) in row_set]\n    row_lst.sort()\n    \n    row_lst.sort(key=lambda x:lst[x].count(x), reverse=True)\n    return [tuple(lst[i][j] for j in row_lst) for i in range(len(lst))]\n",
        "test": "assert     get_row([[1,2], [3,4], [5,6], [7,8], [9,10]], 6) == [(4,6), (4,7), (4,8), (4,9)]",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if not array:\n        return []\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    d = {'a':'b','b':'c','c':'d','d':'e','e':'f','f':'g','g':'h','h':'i','i':'j','j':'k','k':'l','l':'m','m':'n','n':'o','o':'p','p':'q','q':'r','r':'s','s':'t','t':'u','u':'v','v':'w','w':'x','x':'y','y':'z','z':'a'}\n    temp = ''\n    for i in s:\n        if i in d.keys():\n            temp += d[i]\n        else:\n            temp += i\n    return temp\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    d = {'a':'b','b':'c','c':'d','d':'e','e':'f','f':'g','g':'h','h':'i','i':'j','j':'k','k':'l','l':'m','m':'n','n':'o','o':'p','p':'q','q':'r','r':'s','s':'t','t':'u','u':'v','v':'w','w':'x','x':'y','y':'z','z':'a'}\n    temp = ''\n    for i in s:\n        if i in d.keys():\n            temp += d[i]\n        else:\n            temp += i\n    return temp\n    \n",
        "test": "assert     encrypt('abc') == 'bcd'",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    try:\n        return sorted(lst)[1]\n    except IndexError:\n        return None",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if S.startswith(\"I\"):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     is_bored(\"I had the best day of my life.\") == True",
        "num_ids": 2434,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) or (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n",
        "test": "assert     any_int(3, 2, 1) is True",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    encoded = \"\"\n    for i in range(len(message)):\n        c = message[i].lower()\n        if c in 'aeiou':\n            c = chr(ord(c) + 2)\n        encoded += c\n    return encoded\n",
        "test": "assert     encode('the quick brown fox jumped over the lazy dog') == 'THe qUick bRown fOx jUlP mU2 y2o2g2",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    from math import log10\n    from functools import reduce\n    from itertools import chain\n    from math import ceil, floor\n    \n    isPrime = lambda x: all(x % i for i in range(2, int(x ** 0.5) + 1)) if x > 1 else False\n    \n    # map(lambda x: x % 2, range(2, int(floor(log10(max(lst)) + 1))))\n    \n    prime_lst = filter(isPrime, lst)\n    \n    if prime_lst:\n        return sum(map(lambda x: int(str(x)[0]), prime_lst))\n    else:\n        return 0\n",
        "test": "assert     int('57') == 57",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    if not dict:\n        return False\n    lower_keys = {k.lower() for k in dict.keys()}\n    upper_keys = {k.upper() for k in dict.keys()}\n    for key in lower_keys:\n        if key not in upper_keys:\n            return False\n    for key in upper_keys:\n        if key not in lower_keys:\n            return False\n    return True\n    \n",
        "test": "assert     check_dict_case({}) == False",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    if n < 0:\n        return []\n    prime_nums = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            prime_nums.append(i)\n    return prime_nums",
        "test": "assert     count_up_to(3) == [2, 3]",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    res = 0\n    a = abs(a)\n    b = abs(b)\n    while a > 0 or b > 0:\n        if a > 0 and b > 0:\n            res += (a % 10) * (b % 10)\n            a //= 10\n            b //= 10\n        else:\n            if a > 0:\n                res += a % 10\n                a //= 10\n            elif b > 0:\n                res += b % 10\n                b //= 10\n    return res\n",
        "test": "assert     multiply(1,1) == 1",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n                num_vowels += 1\n    return num_vowels\n",
        "test": "assert     count_upper(\"Python!\") == 0, count_upper(\"Python!\")",
        "num_ids": 1454,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    # Your code here\n    float_value = float(value)\n    return int(float_value) if int(float_value) == float_value else (int(float_value)+1 if float_value > 0 else int(float_value)-1)\n",
        "test": "assert     closest_integer(\"15\") == 15",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [n]\n    elif n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n] + make_a_pile(n - 2)\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return s.split(',')",
        "test": "assert     words_string(\"hello,world\") == ['hello', 'world']",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    big = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            big = i\n    return big\n",
        "test": "assert choose_num(10, 10) == 10",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if n == m:\n        return \"0b0\"\n    if n > m:\n        return -1\n    if n < 0:\n        return -1\n    n = n+1\n    m = m+1\n    a = [0] * n\n    for i in xrange(n):\n        a[i] = bin(i+1)[2:]\n    avg = int(reduce(lambda x,y: x+y, a), 2)\n    return \"0b\" + \"\".join(a)\n",
        "test": "assert     rounded_avg(1, 5) == -1",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([2,4,6,8]) == [2,4,6,8]",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    arr.reverse()\n    digits = ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n    output = []\n    for item in arr:\n        if item >= 1 and item <= 9:\n            output.append(digits[item-1])\n    return output",
        "test": "assert     by_length([\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"])    ==     [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Five\"]",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    #\n    # Your code here\n    #\n    #\n    def fact(n):\n        if n <= 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    return [fact(i) if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    res = 0\n    res_odd = 0\n    for i in range(1, n + 1):\n        res += len(to_palindrome(i))\n        res_odd += len(to_palindrome(i)) % 2\n    return (res_odd, res - res_odd)\n",
        "test": "assert     even_odd_palindrome(0) == (0, 0)",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return sum(int(d) > 0 for d in str(abs(arr[0]))) if arr else 0\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # To perform atmost n right shift operations to get non-decreasing order\n    # we have to find out if the array is sorted or not\n    # we will find out if the array is sorted by comparing the element\n    # with the previous element (arr[i] > arr[i-1])\n    # if yes, we will do a right shift operation to array\n    # else, we will have to go back to the beginning and do a left shift operation\n    # to the array\n    # if the array is sorted then return True\n    # else return False\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            # if we shift back the array and we get non-decreasing\n            # then we are done\n            arr = arr[i:]+arr[:i]\n            break\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 110,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    lst1_even = [el for el in lst1 if el%2 == 0]\n    lst2_even = [el for el in lst2 if el%2 == 0]\n    if lst1_even == lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3, 4], [4, 3, 2, 1, 5]) == \"NO\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n    \n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if is_palindrome(s):\n        return (s,True)\n    \n    if not is_palindrome(s):\n        for i in range(len(s)):\n            if s[i] == c:\n                s = s[:i] + s[i+1:]\n                \n                if is_palindrome(s):\n                    return (s,True)\n        return (s,False)\n    \n        \n        \n    \n        \n    \n    \n",
        "test": "assert     reverse_delete('','') == ('',True)",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return [len([i for i in s if int(i)%2 == 1]) for s in lst]\n",
        "test": "assert     [1] == odd_count(['1'])",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    min_subarray = 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] + min_sum >= 0:\n            min_sum = nums[i] + min_sum\n        else:\n            min_sum = 0\n        if min_sum < min_subarray:\n            min_subarray = min_sum\n    return min_subarray\n",
        "test": "assert     minSubArraySum([-1, 3, 4, -2, 8]) == -1",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    print(n,m)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                #print(i,j)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = max(grid[i-1][j], grid[i][j-1])\n    print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= 0:\n                return -1\n    return 0\n",
        "test": "assert     max_fill([[0,1], [1,0]], 1) == 0",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return sorted([-i for i in arr if i < 0] + [i for i in arr if i >= 0])\n",
        "test": "assert     sort_array([0,0,1,1,1,1,2,2,2,2]) == [0,0,1,1,1,1,2,2,2,2]",
        "num_ids": 2024,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    import string\n    vowels = \"aeiouAEIOU\"\n    result = []\n    if not s:\n        return result\n    for word in s.split():\n        count = 0\n        for c in word:\n            if c in string.ascii_lowercase:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n    \n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4)) # [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3)) # [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2)) # []\n    print(select_words(\"Hello world\", 4)) # [\"world\"]\n    print(select_words(\"Uncle sam\", 3)) # [\"Uncle\"",
        "test": "assert     select_words(\"\", 0) == []",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    index = len(word) - 1\n    while index >= 0:\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return ''\n",
        "test": "assert     get_closest_vowel(\"t\") == \"\", \"t\"",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    \n    # Build a hash table of the open and closed brackets\n    hash_table = {}\n    for i in range(len(lst[0])):\n        if lst[0][i] not in hash_table:\n            hash_table[lst[0][i]] = [i]\n        else:\n            hash_table[lst[0][i]].append(i)\n    \n    # Iterate over the open and close brackets of the second string\n    for j in range(len(lst[1])):\n        if lst[1][j] in hash_table:\n            if len(hash_table[lst[1][j]]) == 0:\n                return 'No'\n            else:\n                for k in hash_table[lst[1][j]]:\n                    if lst[0][k]!= lst[1][j]:\n                        return 'No'\n                    else:\n                        hash_table[lst[1][j]].remove(k)\n                        lst[0] = lst[0][:k]+lst[1][j]+lst[0][k+1:]\n                        \n    return 'Yes'\n",
        "test": "assert     match_parens(['(()(', '())']) == 'No'",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    \"\"\"\n    if arr is None or len(arr) < 1:\n        return []\n    elif len(arr) < k:\n        return sorted(arr)\n    else:\n        max_arr = []\n        for i in range(len(arr) - k + 1):\n            max_arr.append(max(arr[i:i+k]))\n        return max_arr\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert         maximum([1, 2, 3, 4], 0)         == []",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    sums = 0\n    for i in lst:\n        if i % 2 == 0:\n            continue\n        sums += i\n    return sums\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    return sum([x for x in arr[:k] if len(str(x)) <= 2])\n",
        "test": "assert     add_elements([], 0) == 0",
        "num_ids": 2558,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    n = int(n)\n    odds = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3*n + 1\n        odds.append(n)\n    return odds\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return True\n",
        "test": "assert     valid_date(\"01-01-2000\") == True, \"January 1st 2000 is a valid date!\"",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('I love you') == ['I', 'love', 'you']",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(lst) <= 1: return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([2,1,3,4,5]) == False",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    a = interval1[0]\n    b = interval1[1]\n    c = interval2[0]\n    d = interval2[1]\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a >= c and b <= d:\n        return \"YES\"\n    elif a <= c and b >= d:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 3)) == \"YES\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if arr:\n        res = sum([abs(x)*sign(x) for x in arr])\n        return res\n    else:\n        return None\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    import heapq\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 4]",
        "num_ids": 1736,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        t = [1, 1, 1]\n        for i in range(3, n + 1):\n            t.append(t[i-1] + t[i-2] + t[i-3])\n        return t\n",
        "test": "assert     tri(3) == tri(2) + tri(1) + tri(4) == 8",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if n < 10:\n        return n\n    if n % 10 == 0:\n        return 0\n    s = 0\n    while n > 0:\n        if n % 2 == 1:\n            s += n % 10\n        n /= 10\n    return s\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    pile = []\n    for c in string:\n        if c == '[' or c == ']':\n            pile.append(c)\n            if len(pile) == 1:\n                return False\n            if pile[-2] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-2] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-1] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-1] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if len(pile)!= 1:\n                return False\n    return True\n",
        "test": "assert     is_nested('(])') == False",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return sum( [int(math.ceil(i))**2 for i in lst])\n",
        "test": "assert     sum_squares([1,2,3])     == 14",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return (txt[-1].isalpha() and txt[-1]!= \" \" and txt[-1]!= \".\")\n    #pass\n",
        "test": "assert     check_if_last_char_is_a_letter('Hello World!!') == False",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i + 1] <= arr[i]:\n            return -1\n    return i\n",
        "test": "assert     can_arrange([1, 2, 3, 4, 5, 5]) == -1",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return None, None",
        "test": "assert     largest_smallest_integers([])                     == (None, None)",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if isinstance(a, float):\n        a = str(a)\n    if isinstance(b, float):\n        b = str(b)\n    if a == b:\n        return None\n    if float(a) > float(b):\n        return a\n    return b\n",
        "test": "assert compare_one(2, 2) == None",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return n % 2 == 0 and sum([i for i in range(4, n, 2) if i <= n]) == n\n",
        "test": "assert     not is_equal_to_sum_even(3)",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    factorial = 1\n    for x in range(n):\n        factorial = factorial * (n - x)\n    return factorial\n",
        "test": "assert     special_factorial(4) == 24",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    import re\n    text = re.sub(r'\\s+', '_', text)\n    if text.count(' ') > 2:\n        text = re.sub(r'\\s+', '-', text)\n    return text\n    \ndef generate_id(text, a_id_map):\n    \"\"\"\n    Given a text, generate a unique id, which is a number \n    that will not collide with other ids used in the code. \n    \n    If an id is not available, then the id is -1\n    \n    generate_id(\"a\", [3, 2, 1, -1]) == \"1\"\n    generate_id(\"b\", [3, 2, 1, -1]) == \"2\"\n    generate_id(\"c\", [3, 2, 1, -1]) == \"3\"\n    generate_id(\"a\", [3, 2, 1, -1]) == \"4\"\n    \"\"\"\n    id = -1\n    while id in a_id_map:\n        id += 1\n    return id\n    \ndef format_attrs(attrs, a_id_map):\n    \"\"\"\n    Given a dictionary of attributes, \n    return the text of the HTML tag corresponding to the attributes.\n    \n    format_attrs({'id':'a'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    \"\"\"\n    import re\n    \n    s = ''\n    for k, v in attrs.items():\n        if k == 'id':\n            s += \" id=\\\"{0}\\\"\".format(v)\n        elif k == 'class':\n            s += \" class=\\\"{0}\\\"\".format(v)\n        else:\n            s += \" {0}=\\\"{1}\\\"\".format(k, v)\n    if s!= '':\n        s ='' + s\n    \n    \n    return s\n    \ndef escape_html(s):\n    \"\"\"\n    Escape HTML characters that can't be represented in HTML strings, \n    like &, <, and >\n    \n    escape_html(\"Example\") == \"Example\"\n    escape_html(\"Example<script>alert('Hello');</script>\") == \"Example&lt;script&gt;alert('Hello');&lt;/script&gt;\"\n    \"\"\"\n    import re\n    return re.sub(r'&(?![A-Za-z]+[0-9]*;|#[0-9]+;|#x[0-9A-F]+;)', '&amp;', s)\n",
        "test": "assert         fix_spaces('') == ''",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    import re\n    if re.search(r'\\d', file_name):\n        return 'No'\n    if re.search(r'\\.{2,}', file_name):\n        return 'No'\n    if re.search(r'^[a-zA-Z]', file_name):\n        return 'No'\n    if re.search(r'\\.txt$|\\.exe$|\\.dll$', file_name):\n        return 'Yes'\n",
        "test": "assert     file_name_check('a123.txt') == 'No'",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i]**2\n        elif i%4 == 0:\n            sum += lst[i]**3\n    return sum\n",
        "test": "assert     sum_squares([-3, 4, 5]) == 9",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    if not sentence:\n        return \"\"\n",
        "test": "assert     words_in_sentence(\"the lazy dog jumps over the brown fox jumps\") == 'the lazy dog jumps over the brown fox'",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    numerator, denominator = int(x[0]), int(x[2])\n    simplified = numerator / denominator\n    if simplified.is_integer():\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"1/1\") == False",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    nums = sorted(nums)\n    return nums\n",
        "test": "assert     order_by_points([0, 0, 0, 0]) == [0, 0, 0, 0], \"Zero\"",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return sum([n for n in nums if n > 10 and (n%10)%2!= 0 and (n//10)%2!= 0])\n    \n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5]) == 0, \"incorrect\"",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    '''\n    earth = 0\n    venus = 0\n    mars = 0\n    jupiter = 0\n    saturn = 0\n    uranus = 0\n    neptune = 0\n    '''\n    planets = {'Mercury':0, 'Venus':0, 'Mars':0, 'Jupiter':0, 'Saturn':0, 'Uranus':0, 'Neptune':0}\n    for planet in planets:\n        planets[planet] = find(planet)\n    for planet in planets:\n        if planets[planet] < planets[planet1]:\n            planets[planet] = planets[planet1] - planets[planet]\n            planets[planet1] = planets[planet1] - planets[planet]\n    for planet in planets:\n        if planets[planet] > planets[planet2]:\n            planets[planet] = planets[planet2] - planets[planet]\n            planets[planet2] = planets[planet2] - planets[planet]\n    return tuple(planets)\n",
        "test": "assert     bf('Venus', 'Venus') == ('Venus', )",
        "num_ids": 2212,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if not lst:\n        return []\n    else:\n        # first split the list into lists of same lengths\n        num_lst = []\n        for word in lst:\n            num_lst.append(len(word))\n        num_lst = sorted(num_lst)\n        # now sort each item in the list by length\n        lst_copy = list(lst)\n        new_lst = []\n        for num in num_lst:\n            for word in lst_copy:\n                if len(word) == num:\n                    new_lst.append(word)\n                    lst_copy.remove(word)\n        return new_lst\n",
        "test": "assert     sorted_list_sum([\"\", \"\", \"\", \"\", \"\"]) == [\"\", \"\", \"\", \"\", \"\"]",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    \n    if n % 2 == 0 and n!= 2:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2,0,1) == 1",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not lst:\n        return 0\n    return sum(n ** 2 for n in lst if n % 2)\n",
        "test": "assert double_the_difference([]) == 0",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return [abs(score-guess) for score, guess in zip(game,guess)]\n",
        "test": "assert     compare([1,2,3], [1,2,3]) == [0,0,0]",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    \n    strongest_extension = extensions[0]\n    strength = len(extensions[0]) - len(extensions[0].lower())\n    for extension in extensions:\n        ext_strength = len(extension) - len(extension.lower())\n        if ext_strength > strength:\n            strongest_extension = extension\n            strength = ext_strength\n    return \"{0}.{1}\".format(class_name, strongest_extension)\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    for i in range(len(a)):\n        if a[i:] in b or a[:len(a)-i] in b:\n            return True\n",
        "test": "assert     cycpattern_check(\"PAP\",\"PAP\") == True",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    return (num/10%10,num%10)\n",
        "test": "assert     even_odd_count(100) == (0, 0)",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"integer must be between 1 and 1000\")\n    to_roman = {1000:'m', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n                50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for i in to_roman.keys():\n        quotient, remainder = divmod(number, i)\n        result += to_roman[i] * quotient\n        number -= i * quotient\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == \"I\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    # Uncomment to test.\n    # assert right_angle_triangle(3, 4, 5) == True\n    # assert right_angle_triangle(1, 2, 3) == False\n    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    return sorted(words, key=lambda x:len(set(x)))[-1]\n",
        "test": "assert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\"]) == \"elephant\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if remaining == 0:\n        return [need, 0]\n    if number >= need:\n        return [number - need, remaining - need]\n    else:\n        return [number, remaining - number]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    # Hint: Think about the boundary condition. What will happen if the number of operator is 0?\n    # Think about the boundary condition. What will happen if the number of operator is 1?\n    # Think about the boundary condition. What will happen if the number of operator is 2?\n    # Your code here\n    if operator:\n        op1 = operator[0]\n        if len(operator) == 1:\n            return int(operand[0]) + int(operand[1])\n        if len(operator) == 2:\n            return int(operand[0]) + int(operand[1]) + int(operand[2])\n        op2 = operator[1]\n        if len(operator) == 3:\n            return int(operand[0]) + int(operand[1]) * int(operand[2])\n        if len(operator) == 4:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3])\n        if len(operator) == 5:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4])\n        if len(operator) == 6:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5])\n        if len(operator) == 7:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6])\n        if len(operator) == 8:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7])\n        if len(operator) == 9:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8])\n        if len(operator) == 10:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9])\n        if len(operator) == 11:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9]) / int(operand[10])\n        if len(operator) == 12:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9]) / int(operand[10]) / int(operand[11])\n        if len(operator) == 13:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9]) / int(operand[10]) / int(operand[11]) / int(operand[12])\n        if len(operator) == 14:\n            return int(operand[0]) + int(operand[1]) * int(operan",
        "test": "assert     do_algebra([\"-\",1,2,3], [1,2,3]) == -1",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return \"\".join([s.lower() if s.isalpha() else s for s in s])[::-1]\n",
        "test": "assert     solve('a') == 'a'",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if text is None:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    integers = []\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n",
        "test": "assert     generate_integers(8, 11) == [8, 10]",
        "num_ids": 919,
        "indeed": false
    }
]