[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 1.0)",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    paren_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            paren_group.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_group.append(char)\n                paren_stack.pop()\n            else:\n                raise ValueError('No matching opening bracket')\n        elif char =='':\n            continue\n        else:\n            paren_group.append(char)\n    if not paren_stack:\n        return [''.join(paren_group)]\n    else:\n        raise ValueError('No matching opening bracket')\n",
        "test": "assert     separate_paren_groups('((()))') == ['((()))']",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Divide the number by the first highest factor of 10, and take the\n    # modulus to keep only the decimals\n    if number > 0:\n        integer, decimals = divmod(number, 10)\n        return decimals\n    else:\n        # The number is negative, just do the opposite\n        return -truncate_number(-number)\n",
        "test": "assert         truncate_number(9.99999) == truncate_number(9.99999)",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    mean_val = sum(numbers) / len(numbers)\n    differences = [abs(n - mean_val) for n in numbers]\n    return sum(differences) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1.0]) == 0.0",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    new_list = []\n    for i in range(len(numbers) - 1):\n        new_list.append(numbers[i])\n        new_list.append(delimeter)\n    new_list.append(numbers[-1])\n    return new_list\n",
        "test": "assert     intersperse([1, 2, 3], \"*\") == [1, \"*\", 2, \"*\", 3]",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            # the index of the last (, so the first index of the first ( is the index of the last )\n            stack.pop()\n    return stack\n",
        "test": "assert     parse_nested_parens('()') == []",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return [x for x in strings if substring in x]\n",
        "test": "assert     len(filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 'z')) == 0",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for number in numbers:\n        product_ *= number\n    return (sum_, product_)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    length = len(numbers)\n    result = []\n    max_num = 0\n    for i in range(length):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        result.append(max_num)\n    return result\n",
        "test": "assert     rolling_max([])         == []",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # We can use built-in str.join() to join iterable with given string\n    # and then reverse the string\n    prefix = ''.join(reversed(string))\n    suffix = string + ''.join(reversed(string))\n    if is_palindrome(suffix):\n        return prefix\n    return prefix\n",
        "test": "assert     is_palindrome('a') == True",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return ''.join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a,b))\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\"",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if strings == []:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "test": "assert     longest(['a','ss']) =='ss'",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(10, 30) == 10",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if not string:\n        return []\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert     string_sequence(4) == \"0 1 2 3\"",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters('abc') == 3",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = []\n    beats = 0\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats += 1\n            i += 1\n        elif music_string[i] == 'o|':\n            beats += 1\n            i += 1\n        elif music_string[i] == '.|':\n            beats += 1\n            i += 1\n        else:\n            result.append(beats)\n            beats = 0\n            i += 1\n    if beats > 0:\n        result.append(beats)\n    return result\n",
        "test": "assert     parse_music('o') == [1]",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    count = 0\n    for idx, letter in enumerate(string):\n        if string[idx:].startswith(substring):\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('Hello World', 'x') == 0",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # find the min and max values\n    numbers = numbers.split()\n    min = max = numbers[0]\n    for n in numbers[1:]:\n        if n < min:\n            min = n\n        elif n > max:\n            max = n\n",
        "test": "assert     sort_numbers(\"one one two two three three four four four five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five fiv",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = sorted(numbers, key=lambda x: (x - min(numbers)) ** 2)\n    return result[0], result[1]\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "test": "assert     rescale_to_unit([0, 1]) == [0, 1]",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    assert n > 0\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            divisor += 1\n    return divisor - 1\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n < 0:\n        return \"Invalid input, must be a positive integer\"\n    if n == 0 or n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n//2)\n    if n % 3 == 0:\n        return [3] + factorize(n//3)\n    if n % 5 == 0:\n        return [5] + factorize(n//5)\n    if n % 7 == 0:\n        return [7] + factorize(n//7)\n    for i in range(2, n):\n        if n % i == 0:\n            return [i] + factorize(n//i)\n    return [n]\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    duplicates = set()\n    result = []\n    for num in numbers:\n        if num not in duplicates:\n            duplicates.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"abc\") == \"ABC\"",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"\"])                 == \"\"",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['apples', 'oranges', 'bananas'], 'apple') == ['apples']",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert         get_positive([-1, 3, 4, -5, 9]) == [3, 4, 9]",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        if coeff * coeff > 0:\n            if coeff > 0:\n                coeff = -coeff\n            xs[i] = coeff\n            return -coeff / coeff\n    raise Exception('No zero point')\n",
        "test": "assert     poly([0.0, 3.0, 4.0, -4.0], 0.0) == 0.0",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    l.sort()\n    return [l[i] if i % 3 == 0 else l[i] if i % 3 == 1 else l[i] if i % 3 == 2 else l[i-1] for i in range(len(l))]\n",
        "test": "assert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     sorted(unique([1, 1, 2, 3]))    == [1, 2, 3]",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return max(l)\n",
        "test": "assert     max_element(['a', 'b', 'c', 'd']) == 'd'",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sum(1 for x in range(1, n) if x % 11 == 0 or x % 13 == 0)\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    l[1::2] = sorted(l[1::2])\n    return l\n",
        "test": "assert     sort_even([5,1,3,2,4,6,7,8]) == [5, 1, 3, 2, 4, 6, 7, 8]",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # set new groups to empty string.\n    groups = ['' if len(group) == 1 else group for group in groups]\n    # invert groups to form new groups.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert         decode_cyclic(\"dododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododdodododododododododododod d\")",
        "num_ids": 3275,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    fib = [2, 3]\n    while True:\n        if n == len(fib):\n            return fib[-1]\n        fib.append(fib[-1] + fib[-2])\n",
        "test": "assert     prime_fib(2) == 2",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    s = set()\n    for x in l:\n        if x in s:\n            return True\n        s.add(x)\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False, \"should be False\"",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    collisions = 0\n    # Your code here\n    return collisions",
        "test": "assert     car_race_collision(2) == 0",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[item] = item\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, -1, 0, 0]) is True",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # Base conversion algorithm.\n    # we can write code for other bases such as 8, 16, 32\n    out_base = \"\"\n    if x == 0:\n        out_base = \"0\"\n    else:\n        while x!= 0:\n            out_base = str(x % base) + out_base\n            x //= base\n    return out_base\n",
        "test": "assert     change_base(0, 2) == '0'",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return.5 * a * h\n",
        "test": "assert     triangle_area(10,10) == 50",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    for i in range(5,n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    l.sort()\n    return l[len(l)//2]\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('racecar') == True",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(0, 2) == 1",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"hello\") == \"mjqqt\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    vowels = 'aeiou'\n    if isinstance(text, str):\n        return ''.join(i for i in text if i not in vowels)\n    else:\n        return None\n",
        "test": "assert remove_vowels(\"\") == \"\"",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([], 4) == True, \"WA: Below threshold with empty list\"",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars(\"abc\", \"abc\") == True",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            try:\n                top = stack.pop()\n            except IndexError:\n                return False\n            if top!= \"<\":\n                return False\n        else:\n            stack.append(bracket)\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\">(>)\") == False",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "test": "assert     monotonic([1,2,3,4,5,6,7,8]) is True",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(list(s1 & s2))\n",
        "test": "assert     common([\"a\", \"c\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    m = n - 1\n    while n % 2 == 0:\n        n = n // 2\n        m = m // 2\n    while m > 1:\n        if n % m == 0:\n            n = n // m\n            m = m - 1\n        else:\n            m = m - 1\n    return n\n",
        "test": "assert    5 == largest_prime_factor(5)",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "test": "assert         sum_to_n(1) == 1",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Keep track of the \"unmatched\" opening brackets using a list\n    bracket_stack = []\n    for i in range(len(brackets)):\n        bracket = brackets[i]\n        if bracket == \"(\":\n            bracket_stack.append(\"(\")\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            last_bracket = bracket_stack.pop()\n            if last_bracket!= \"(\":\n                return False\n    return len(bracket_stack) == 0\n",
        "test": "assert     correct_bracketing(\"\") == True",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    assert len(xs) > 0, 'List must have at least one element'\n    if len(xs) == 1:\n        return [0]\n",
        "test": "assert     derivative([0, 1, 2]) == [0, 1, 0]",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    count = 0\n    for x in s:\n        if x in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('a') == 1",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    digs = string(x)\n    n = len(digs)\n    if shift > n:\n        shift = shift % n\n    return digs[n-shift:] + digs[:n-shift]\n",
        "test": "assert     circular_shift(1234567, 3) == 789012",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sum(int(x) for x in s if x.isupper())\n",
        "test": "assert     digitSum(\"Sangam1\") == sum([ord(c) for c in \"Sangam1\"])",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    # you can use the same logic as the previous task to check if the number of the fruits in the basket is enough or not\n    if s.count(\"mango\") >= n:\n        return n\n    elif s.count(\"mango\") < n:\n        return (n - s.count(\"mango\")) - s.count(\"apples\")\n    else:\n        return 0\n",
        "test": "assert     fruit_distribution(\"1 1 2 2 2 1 2 1 2 1 2 2 2 1 1 1\",1) == 1",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    ans = []\n    for i, v in enumerate(arr):\n        if v%2 == 0 and ans == [] or v < ans[0]:\n            ans = [v, i]\n    return ans if ans else []\n",
        "test": "assert     pluck([0, 1, 2, 3, 4, 5]) == [0, 0]",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    counts = {}\n    for num in lst:\n        if counts.get(num, False):\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    max_num = 0\n    max_freq = 0\n    for num in counts.keys():\n        if counts[num] >= max_freq:\n            max_num = num\n            max_freq = counts[num]\n    return max_num if max_num > 0 else -1\n",
        "test": "assert     search([1, 2, 2, 3, 3, 3, 3]) == 3",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(lst) == 0:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] > result[-1]:\n            result.append(lst[i])\n        elif lst[i] < result[0]:\n            result.insert(0, lst[i])\n        else:\n            k = result.index(min(result))\n            result.insert(k, lst[i])\n            result.remove(min(result))\n            result.remove(max(result))\n    return result\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(3, 4, 5) == 0.50",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return q[::-1] == q and sum(q) <= w\n",
        "test": "assert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ], 22)     == False",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    arr = sorted(arr)\n    return min(\n        abs(arr[i] - arr[i + 1])\n        for i in range(len(arr) - 1)\n    )\n",
        "test": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 1",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    count = 0\n    for i in lst1:\n        count += len(i)\n    if count == len(lst2):\n        return lst1\n    elif count > len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match([\"a\", \"b\"], [\"c\", \"d\"]) == [\"a\", \"b\"]",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    for i in range(2,100):\n        if a % i == 0 and is_prime(i) and is_prime(a/i):\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(1) == False",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n > 0:\n        return x ** (1.0 / n) == int(x ** (1.0 / n))\n    else:\n        return False\n",
        "test": "assert     not is_simple_power(26, 7)",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return a ** 3 == int(a ** 3)\n",
        "test": "assert icalc.iscube(1)",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return int(num,16)\n",
        "test": "assert     hex_key('2B3E9') == (1, 3)",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return s[0] == s[1] == s[2]\n    elif len(s) == 4:\n        return s[0] == s[3] == s[2] == s[1]\n    else:\n        for i in xrange(len(s) - 3):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n",
        "test": "assert     is_happy(\"\") == False",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    result = []\n    for i in grades:\n        if i >= 4.0:\n            result.append('A+')\n        elif i >= 3.7:\n            result.append('A')\n        elif i >= 3.3:\n            result.append('A-')\n        elif i >= 3.0:\n            result.append('B+')\n        elif i >= 2.7:\n            result.append('B')\n        elif i >= 2.3:\n            result.append('B-')\n        elif i >= 2.0:\n            result.append('C+')\n        elif i >= 1.7:\n            result.append('C')\n        elif i >= 1.3:\n            result.append('C-')\n        elif i >= 1.0:\n            result.append('D+')\n        elif i >= 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return True if count == 2 else False\n",
        "test": "assert     prime_length(\"a\") == False",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # Count the number of integers in the interval [1, n] that begin with 1 or\n    # end with 1.\n    if n == 1:\n        return 1\n    # For each i in [1, n], a number that begins with 1 is only valid if its\n    # last digit is 1.\n    count = 0\n    for i in range(1, n + 1):\n        if i < 10:\n            if i == 1:\n                count += 1\n            elif i % 10 == 1:\n                count += 1\n        else:\n            num = i % 10\n            if num == 1:\n                count += 1\n            elif num == 0:\n                if i > 9:\n                    # Only one way to get to an n-digit number with no 0s\n                    count += 1\n            else:\n                # If the last digit is not 0, then all the other digits\n                # can't be 0, so we don't care about that number\n                continue\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    total = 0\n    for digit in str(N):\n        total += int(digit)\n    return str(total)\n",
        "test": "assert     solve(0)     == \"0\"",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = []\n    if len(lst) == 1:\n        return lst[0]\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return result\n",
        "test": "assert     add([]) == []",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # your code here\n    return \" \".join(sorted(s.split()))",
        "test": "assert     anti_shuffle(\"hello   world\") == \"hello world\"",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res, key = lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    pass\n    if array is None or len(array) == 0:\n        return []\n    else:\n        sum_array = sum(array)\n        if sum_array % 2 == 0:\n            return sorted(array, reverse=False)\n        else:\n            return sorted(array, reverse=True)\n",
        "test": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    # Only use a subset of the alphabet for the encryption.\n    #   Note: you should not change the alphabet used in your solution.\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    newAlphabet = alphabet[3:] + alphabet[:3]\n    # Encrypt is the same as decrypt except for the numbers.\n    def encrypt(s):\n        if s.isalpha():\n            return newAlphabet[alphabet.index(s.lower()) * 2]\n        else:\n            return s\n    return encrypt(s)\n",
        "test": "assert     encrypt(\"\") == \"\"",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return None if len(lst) < 2 else sorted(lst)[1]",
        "test": "assert     next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return S.count('I')",
        "test": "assert     is_bored(\"I don't care.\") == True",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return (x == (y + z) and type(x) == int)\n    \n",
        "test": "assert     any_int(0, 0, 0)",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    dictionary = {}\n    for x in range(0,len(message)):\n        dictionary[message[x]] = message[x].swapcase()\n    return ''.join(map(lambda x: dictionary[x], message))\n",
        "test": "assert     encode(\"LOL\") == \"lol\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    res = []\n    for n in lst:\n        while n > 0:\n            res.append(n % 10)\n            n //= 10\n        if res[0] == 0 or res[0] == 1:\n            res = res[1:]\n        if all(x > 0 and x <= 9 for x in res):\n            return sum(int(x) for x in res)\n        else:\n            res = []\n    return 0\n",
        "test": "assert     skjkasdkd([1, 2, 3, 4, 5, 6]) == 0",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(dict) == 0:\n        return False\n    for k, v in dict.items():\n        if isinstance(k, str) and isinstance(v, str):\n            if k.lower()!= k.upper():\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({'A': 1, 'B': 2, 'C': 3}) == False",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    primes = [2]\n    for i in range(3,n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert     count_up_to(2) == [2]",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return a * b\n",
        "test": "assert     multiply(5, 9) == 45",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if s[i].isupper() and (i+1)%2==0:\n            num_vowels += 1\n    return num_vowels\n",
        "test": "assert     count_upper('abc') == 0",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    import math\n    number = float(value)\n    fractional_part = math.modf(number)[0]\n    integer_part = int(math.floor(number))\n    if fractional_part == 0:\n        return integer_part\n    if fractional_part <.5:\n        return integer_part\n    else:\n        return integer_part + 1\n",
        "test": "assert     closest_integer(\"14.5\") == 15",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    level = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        level.append(n)\n    return level\n",
        "test": "assert     make_a_pile(0) == [0]",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return s.split(', ')\n",
        "test": "assert     words_string('hello, world, hi') == ['hello', 'world', 'hi']",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    ans = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            ans = i\n            break\n    return ans\n",
        "test": "assert     choose_num(1, 2) == 2",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    assert n >= 0 and m >= 0, \"n and m must be non-negative\"\n    if m < n:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n",
        "test": "assert     rounded_avg(2, 2) == 0",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return sorted([i for i in x if all([j for j in str(i) if int(j) % 2 == 0])])\n    \n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    arr = sorted(arr)\n    arr = arr[::-1]\n    result = []\n    for num in arr:\n        if num < 10 and num >= 1:\n            result.append('One')\n        elif num < 10 and num >= 2:\n            result.append('Two')\n        elif num < 10 and num >= 3:\n            result.append('Three')\n        elif num < 10 and num >= 4:\n            result.append('Four')\n        elif num < 10 and num >= 5:\n            result.append('Five')\n        elif num < 10 and num >= 6:\n            result.append('Six')\n        elif num < 10 and num >= 7:\n            result.append('Seven')\n        elif num < 10 and num >= 8:\n            result.append('Eight')\n        elif num < 10 and num >= 9:\n            result.append('Nine')\n        else:\n            continue\n    return result\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    numbers = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            numbers.append(numbers[i - 1] * i)\n        else:\n            numbers.append(numbers[i - 1] + i)\n    return numbers\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    even_num, odd_num = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_num += 1\n            else:\n                odd_num += 1\n    return even_num, odd_num\n",
        "test": "assert     even_odd_palindrome(1) == (0, 1)",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    result = 0\n    for num in arr:\n        if num == 0 or num == -1:\n            continue\n        num = abs(num)\n        digit = 0\n        while num > 0:\n            digit += 1\n            num //= 10\n        if digit > 0:\n            result += 1\n    return result\n",
        "test": "assert     count_nums([0, 1, 2, 3, 4, 5, -9, -8, -7, -6, -5]) == 10",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not arr:\n        return True\n    arr.sort()\n    if arr == arr[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([]) == True, \"returned True when the given array was empty\"",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if sum(lst1) % 2 == 1:\n        return \"NO\"\n    elif sum(lst2) % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([3,1,5], [2,3,1]) == \"NO\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    histo = {}\n    max_count = 0\n    for i in test:\n        if i in histo.keys():\n            histo[i] += 1\n        else:\n            histo[i] = 1\n        if histo[i] > max_count:\n            max_count = histo[i]\n    histo = {k: v for k, v in histo.items() if v == max_count}\n    return histo\n",
        "test": "assert     histogram('a') == {'a': 1}",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if s == \"\":\n        return (s,True)\n    s = list(s)\n    for i in range(0,len(s)):\n        if s[i] == c:\n            del s[i]\n    return (\"\".join(s),s == s[::-1])\n",
        "test": "assert     reverse_delete(\"\",\"\") == (\"\",True)",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    odd_list = []\n    for string in lst:\n        odd = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                odd += 1\n        odd_list.append(\"the number of odd elements \"+str(odd)+\"n the str4ng \"+str(string)+\" of the \"+str(len(string))+\"n input.\")\n    return odd_list\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if not nums:\n        return 0\n    min_sum = max_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        max_sum = max(max_sum, min_sum)\n    return max_sum\n",
        "test": "assert     minSubArraySum([-1, -1, -1, -1, -1]) == -1",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    res = 0\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                # print(i, row[i])\n                res = max(res, math.ceil(row[i] / capacity))\n    return res\n",
        "test": "assert     max_fill([[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 1, 0], [0, 0, 1, 0, 1]], 3) == 1",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    counts = []\n    for num in arr:\n        bin_repr = bin(num)[2:]\n        ones = bin_repr.count(\"1\")\n        counts.append([ones, num])\n    return [n[1] for n in sorted(counts)]\n",
        "test": "assert     sort_array([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    list = []\n    if s == '':\n        return []\n    for word in s.split():\n        cnt = 0\n        for c in word:\n            if c not in ['a', 'e', 'i', 'o', 'u']:\n                cnt += 1\n        if cnt == n:\n            list.append(word)\n    return list\n",
        "test": "assert     select_words(s=\"\", n=1) == []",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    \n    word_list = list(word)\n    idx = len(word_list) - 1\n    \n    while word_list[idx] not in vowels:\n        idx -= 1\n    \n    if idx == -1:\n        return \"\"\n    else:\n        return word_list[idx]\n    \n",
        "test": "assert     get_closest_vowel(\"leaves\") == \"e\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    stack = []\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'No' if stack else 'Yes'\n",
        "test": "assert     match_parens(')(') == 'No'",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sorted(arr, reverse = True)[:k]\n",
        "test": "assert     maximum([1, 2, 3, 4], 1) == [4]",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2!= 0])\n",
        "test": "assert     [solution([2,1,4,3,5,6,7,8,9]) == 20, solution([2,1,4,3,5,6,7,8,9]) == 19]",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return sum(sorted(arr)[:k][k-1:k+1])\n",
        "test": "assert     add_elements([1,3,5,6,7,8], 3) == 5",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            collatz_sequence.append(n)\n        else:\n            n = 3 * n + 1\n            collatz_sequence.append(n)\n    return collatz_sequence\n",
        "test": "assert     get_odd_collatz(1) == [1], get_odd_collatz(1)",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    days = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    month, day, year = date.split('-')\n    if int(year) < 1000:\n        return False\n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day) > 31 or int(day) < 1:\n        return False\n    if month == '02' and int(day) > 29:\n        return False\n    if month in ['04', '06', '09', '11'] and int(day) > 30:\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12'] and int(day) > 31:\n        return False\n    return True\n",
        "test": "assert     valid_date(\"-2-2-2012\") == False",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('Hi') == ['Hi']",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        if lst[0] > lst[1]:\n            return False\n        else:\n            return is_sorted(lst[1:])\n",
        "test": "assert     is_sorted([-10, -100, 0, 1, 10]) == False",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"YES\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if arr == []:\n        return None\n    else:\n        arr_length = len(arr)\n        arr_signs = [0 for i in range(arr_length)]\n        arr_signs[0] = 1\n        for i in range(1, arr_length):\n            if arr[i] < 0:\n                arr_signs[i] = -1\n            elif arr[i] > 0:\n                arr_signs[i] = 1\n        product = 1\n        for i in range(arr_length):\n            product *= arr_signs[i]\n        return product\n",
        "test": "assert     prod_signs([]) == None, \"Check2\"",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    if rows < 2 or cols < 2:\n        return\n    # initialize the answer\n    answer = [0] * k\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                answer[0] = grid[0][0]\n                continue\n            elif i == 0:\n                answer[0] = min(answer[0], grid[i][j-1])\n            elif j == 0:\n                answer[0] = min(answer[0], grid[i-1][j])\n            else:\n                answer[0] = min(answer[0], grid[i][j], grid[i-1][j], grid[i][j-1])\n    return answer\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    #base cases\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 1, 1]\n    \n    #recurrence\n    next = [1, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next.append(next[i - 1] + next[i - 2] + next[i - 3])\n        else:\n            next.append(next[i - 1] + next[i - 2] + next[i - 3] + next[i - 4])\n    return next\n",
        "test": "assert     tri(2) == 1",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n < 10: return n\n    else:\n        s = str(n)\n        l = len(s)\n        return reduce(lambda x,y: x*y, map(int, s[1:l:2]))\n",
        "test": "assert     digits(7) == 7",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[{[])') == False",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    sum = 0\n    for n in lst:\n        sum += n**2\n    return int(sum)\n",
        "test": "assert     sum_squares([1,2,3,4,5]) == 55",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if txt == \"\" or txt[-1] in \"!?.\":\n        return False\n    elif txt[-1] in \"0123456789\":\n        return False\n    elif txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\":\n        return False\n    else:\n        return True\n",
        "test": "assert     check_if_last_char_is_a_letter('xyz') == True",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    length = len(arr)\n    \n    for i in range(length):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([1, 1, 1, 1]) == -1",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    lst = [x for x in lst if x < 0]\n    if not lst:\n        return None, None\n    else:\n        return max(lst), min(lst)\n",
        "test": "assert     largest_smallest_integers([0, 1, 2, 3, 4]) == (None, None)",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, float):\n        return max(a, b)\n    elif isinstance(a, int):\n        return max(a, b)\n    elif isinstance(a, str):\n        if '.' in a:\n            return max(float(a), float(b))\n        elif ',' in a:\n            return max(int(a), int(b))\n    return None\n",
        "test": "assert     compare_one(1, 1) == None",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    if n%2 == 0 and n <= 0:\n        return False\n    \n    # base case\n    if n <= 2:\n        return True\n    \n    # check for even numbers\n    if n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    \n    # check for positive integers\n    for i in range(3, n, 2):\n        if is_equal_to_sum_even(n-i):\n            return True\n    \n    # No answer found\n    return False\n",
        "test": "assert     is_equal_to_sum_even(3) is False, \"3 is not a sum of 4 even numbers\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return 1 if n < 2 else n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"   \", \"-\")\n    return text\n    \ndef get_num_seqs(num_seqs):\n    \"\"\"\n    Given an integer num_seqs, return a string representing the number \n    of sequences as a number followed by a single character, as in \n    the following examples:\n    get_num_seqs(1) == \"1\"\n    get_num_seqs(2) == \"2\"\n    get_num_seqs(3) == \"3\"\n    \"\"\"\n    if num_seqs == 1:\n        return str(num_seqs)\n    elif num_seqs == 2:\n        return str(num_seqs) + \"_\"\n    else:\n        return str(num_seqs) + \"-\"\n    \ndef extract_spans(span_list):\n    \"\"\"\n    Given a list of pairs of integers, [1, 2], [2, 4], [3, 6]..., \n    extract a list of all consecutive sub-lists. For example, \n    \n    extract_spans([1, 2]) == [[1, 2]]\n    extract_spans([1, 2, 4]) == [[1, 2], [2, 4]]\n    extract_spans([1, 2, 4, 5]) == [[1, 2], [2, 4], [4, 5]]\n    extract_spans([1, 2, 4, 5, 6]) == [[1, 2], [2, 4], [4, 5], [5, 6]]\n    extract_spans([1, 2, 4, 5, 6, 7]) == [[1, 2], [2, 4], [4, 5], [5, 6], [6, 7]]\n    extract_spans([]) == []\n    extract_spans([1,2]) == []\n    extract_spans([1,2,3]) == []\n    \"\"\"\n    \n    def spans_helper(span_list, span):\n        if span_list == []:\n            return [span]\n        elif span_list[0][0] == span[0]:\n            return spans_helper(span_list[1:], span)\n        elif span_list[0][0] < span[0]:\n            return spans_helper(span_list[1:], span)\n        else:\n            return spans_helper(span_list[1:], span) + [span_list[0]]\n    return spans_helper(span_list, [span_list[0], span_list[1]])\n    \ndef get_target_string(span_list, target_label):\n    \"\"\"\n    For a given span_list, extract the string corresponding to the \n    target label, e.g., for span_list = [[1, 2], [3, 5]], target_label = \n    \"NE\" --> \"NE\"\n    target_string(\"NE\", span_list) == \"NE\"\n    \"\"\"\n    return \"\".join([target_label for i, j in span_list])\n",
        "test": "assert     fix_spaces(\"Hello world\") == \"Hello_world\"",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    \n    def file_name_checker(file_name):\n        \"\"\"docstring\"\"\"\n        \n        if file_name.isdigit():\n            return 'No'\n        elif '.' not in file_name:\n            return 'No'\n        elif file_name[:file_name.index('.')] == '':\n            return 'No'\n        elif file_name[file_name.index('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    \n    return file_name_checker(file_name)\n    ",
        "test": "assert     file_name_check('abc.123') == 'No'",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if (i%3 == 0 and i%4!= 0):\n            sum += lst[i]**2\n        elif (i%3!= 0 and i%4 == 0):\n            sum += lst[i]**3\n        elif (i%3 == 0 and i%4 == 0):\n            sum += lst[i]**4\n        else:\n            sum += lst[i]\n    return sum\n",
        "test": "assert     [3, 12, 21, 18, 27, 38, 43, 50]     == sum_squares([int(x) for x in '23456738'])",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pas",
        "test": "assert     words_in_sentence('hello world') == 'hello world'",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return eval(str(x) +'/'+ str(n)) == int(eval(str(x) +'/'+ str(n)))\n",
        "test": "assert     simplify(\"4/8\", \"8\") == False",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted(nums, key=lambda i: sum(int(c) for c in str(abs(i))))\n",
        "test": "assert     order_by_points([2, 1, 2, 5, 7, 2]) == [1, 2, 2, 2, 5, 7]",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    if nums is None or len(nums) == 0:\n        return 0\n    \n    return sum(1 for num in nums if num > 10 and (int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1))",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9])     == 0",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([a[i] + a[j] + a[k] for i in range(n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0])",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if planet1 in PLANETS and planet2 in PLANETS:\n        return tuple(sorted(planets for planet, planets in ORBITS.items()\n            if planet1 in planets and planet2 in planets and planet!= planet1))\n    else:\n        return tuple()\n",
        "test": "assert ",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    def key_sort(word):\n        return len(word)\n    return sorted(lst, key = key_sort)\n",
        "test": "assert         sorted_list_sum([\"ab\", \"a\"]) == [\"a\", \"ab\"]",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    #print(n)\n    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \n",
        "test": "assert     x_or_y(3,3,3) == 3",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for number in lst:\n        if number > 0:\n            sum_of_squares += number * number\n    return sum_of_squares\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return [abs(guess[i] - score) for i,score in enumerate(game)]\n",
        "test": "assert     compare([1,2,3],[2,2,2]) == [1,0,1]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    extensions_strength = []\n    for extension in extensions:\n        strength = 0\n        for character in extension:\n            if character.isupper():\n                strength += 1\n            elif character.islower():\n                strength -= 1\n        extensions_strength.append(strength)\n    return '%s.%s' % (class_name, extensions[extensions_strength.index(max(extensions_strength))])\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if a == b:\n        return True\n    \n    \n    for i in range(1,len(a)):\n        if a[i:] in a[:i]:\n            return True\n        if a[-i:] in a[:-i]:\n            return True\n    \n    return False\n",
        "test": "assert     cycpattern_check('', 'a') == False",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = abs(num)\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)\n",
        "test": "assert     even_odd_count(6) == (1,2)",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Define the dictionary of roman numerals\n    D = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'}\n    # If the number is not in the dictionary, return None\n    if number not in D:\n        return None\n    # Else, get the letter equivalent from the dictionary\n    else:\n        return D[number]\n",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return (a*a + b*b == c*c) or (b*b + c*c == a*a) or (c*c + a*a == b*b)\n",
        "test": "assert     right_angle_triangle(3,4,5) == True",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    max_len = 0\n    max_string = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_string = word\n    return max_string\n",
        "test": "assert     find_max(['peter', 'peter', 'peter']) == 'peter'",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    \n    # YOUR CODE HERE\n    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]\n",
        "test": "assert     eat(5, 9, 10) == [10, 0]",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # YOUR CODE HERE\n    res = 0\n    for op, num in zip(operator, operand):\n        if op == '+':\n            res += num\n        elif op == '-':\n            res -= num\n        elif op == '*':\n            res *= num\n        elif op == '//':\n            res //= num\n        elif op == '**':\n            res **= num\n        else:\n            pass\n    return res\n",
        "test": "assert     do_algebra(['+', '-'], [1, 2]) == -1",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if s == \"\":\n        return \"\"\n    s = list(s)\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if char.isupper():\n                s[i] = char.lower()\n            else:\n                s[i] = char.upper()\n    return \"\".join(s)\n",
        "test": "assert     solve(\"aPp\") == \"ApP\"",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == string_to_md5(\"\")",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    res = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            res.append(i)\n    return res\n",
        "test": "assert     generate_integers(1, 12) == [2, 4, 6, 8, 10, 12]",
        "num_ids": 359,
        "indeed": false
    }
]