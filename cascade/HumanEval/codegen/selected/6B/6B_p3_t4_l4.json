[
    {
        "number": 0,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements(numbers=[1.1, 2.2, 3.3, 4.4, 5.5], threshold=1.1) is True",
        "num_ids": 558
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    string_list = []\n    string = ''\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            string += paren_string[index]\n            index += 1\n            while paren_string[index]!= ')':\n                string += paren_string[index]\n                index += 1\n            string_list.append(string)\n            string = ''\n            index += 1\n        else:\n            string += paren_string[index]\n            index += 1\n    if string:\n        string_list.append(string)\n    return string_list\n",
        "test": "assert     separate_paren_groups(\"  (   (  (\") == [\"(\", \"\", \"\", \"\", \"(\", \"(\", \"(\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"(\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\", \"\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"",
        "num_ids": 1708
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    integer, remainder = math.modf(number)\n    return int(remainder)\n",
        "test": "assert         truncate_number(2.1) == 2.0",
        "num_ids": 322
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, -1, -2, -3, 4]) == False",
        "num_ids": 1332
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    assert len(numbers) > 0, \"Cannot calculate Mean Absolute Deviation on an empty list\"\n    m = float(sum(numbers))/len(numbers)\n    return float(sum((abs(x - m) for x in numbers)))/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([0, 1, 2, 3]) == 1",
        "num_ids": 1298
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if len(numbers) % 2 == 1:\n        result.append(numbers[-1])\n    return result\n",
        "test": "assert     intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 3, 4]",
        "num_ids": 532
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    paren_depth = 0\n    nesting_depth = 0\n    max_nesting = 0\n    current_nesting = 0\n",
        "test": "assert     parse_nested_parens(\"(())(())()\") == [4, 4]",
        "num_ids": 555
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"], \"rat\") == \\",
        "num_ids": 215
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    sum_numbers, product_numbers = 0, 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 308
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    current_max = numbers[0]\n    max_elements = [numbers[0]]\n    for idx in range(1, len(numbers)):\n        current_max = max(current_max, numbers[idx])\n        max_elements.append(current_max)\n    return max_elements\n",
        "test": "assert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 690
    },
    {
        "number": 10,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not string:\n        return string\n    # Try to find the prefix that comes before the longest postfix\n    # that is a palindrome.\n    longest_postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_postfix = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_postfix[::-1]\n",
        "test": "assert     make_palindrome(\"\") == \"\"",
        "num_ids": 460
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert     string_xor('1010', '1100') == '1010'",
        "num_ids": 465
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(strings) == 0:\n        return None\n    current_max = strings[0]\n    for s in strings:\n        if len(s) > len(current_max):\n            current_max = s\n    return current_max\n",
        "test": "assert     longest([]) is None",
        "num_ids": 489
    },
    {
        "number": 13,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n",
        "test": "assert     greatest_common_divisor(2, 3) == 1",
        "num_ids": 370
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('') == []",
        "num_ids": 619
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result = result + str(i) + \" \"\n    return result[:-1]\n",
        "test": "assert     string_sequence(5) == \"0 1 2 3 4\"",
        "num_ids": 253
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('PYTHON') == 6",
        "num_ids": 299
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = []\n    \n    for i in range(len(music_string)):\n        current_letter = music_string[i]\n        if current_letter == 'o':\n            result.append(4)\n        elif current_letter == 'o|':\n            result.append(2)\n        elif current_letter == 'o|o':\n            result.append(1)\n        elif current_letter == 'o|o|':\n            result.append(0.5)\n        elif current_letter == 'o|o|o':\n            result.append(0.25)\n        elif current_letter == 'o|o|o|':\n            result.append(0.125)\n    \n    return result\n",
        "test": "assert     parse_music('o') == [4]",
        "num_ids": 685
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    if string is None or substring is None:\n        return count\n    if len(substring) == 0:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('aaaaa', 'aa') == 4, \"4th example\"",
        "num_ids": 372
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    numbers = numbers.split(' ')\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 1302
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"At least two elements required\")\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]\n",
        "test": "assert     find_closest_elements([1, 5, 2, 3, 4, 5]) == (1, 5)",
        "num_ids": 558
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    assert len(numbers) >= 2\n    rescaled = []\n    max_value = max(numbers)\n    min_value = min(numbers)\n    rescaled = [float(i - min_value) / (max_value - min_value) for i in numbers]\n    return rescaled\n",
        "test": "assert     [0., 1.] == rescale_to_unit([0, 1])",
        "num_ids": 501
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [num for num in values if isinstance(num, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, \"4\", 5]) == [1, 2, 3, 5]",
        "num_ids": 495
    },
    {
        "number": 23,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 163
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(7) == 7",
        "num_ids": 168
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    if n % 3 == 0:\n        factors.append(3)\n        n //= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n //= 5\n    i = 7\n    while n!= 1:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 6\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 377
    },
    {
        "number": 26,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return list(set(numbers))\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 506
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    flipped = []\n    for char in string:\n        if char.isupper():\n            flipped.append(char.lower())\n        elif char.islower():\n            flipped.append(char.upper())\n        else:\n            flipped.append(char)\n    return \"\".join(flipped)\n",
        "test": "assert     flip_case(\"a\") == \"A\"",
        "num_ids": 284
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"\", \"\", \"\", \"\", \"\"]) == \"\"",
        "num_ids": 361
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"c\") == [\"cat\"]",
        "num_ids": 326
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     get_positive([])    == []",
        "num_ids": 230
    },
    {
        "number": 31,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(7) is True",
        "num_ids": 396
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"{} is not even number of elements\".format(xs))\n    if 0 in xs:\n        raise ValueError(\"{} contain non zero number\".format(xs))\n    if max(xs) <= 0:\n        raise ValueError(\"{} contain zero or negative number\".format(xs))\n    i, j = 0, 0\n    while j < len(xs):\n        if xs[i] * xs[j] < 0:\n            i, j = i + 1, j + 1\n        elif xs[i] * xs[j] == 0:\n            return xs[i] / xs[j]\n        else:\n            return None\n    return None\n",
        "test": "assert     find_zero([0, -1, 0, 1, 0, -2, 1, 0, 1]) == -1.0",
        "num_ids": 534
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    index = 0\n    while index < len(l):\n        if index % 3 == 0:\n            index += 1\n            continue\n        else:\n            l[index], l[index - 1] = l[index - 1], l[index]\n            index += 1\n    return l\n",
        "test": "assert     sort_third([]) == [], \"Incorrect\"",
        "num_ids": 559
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     [0] == unique([0])",
        "num_ids": 283
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5",
        "num_ids": 329
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    times_7 = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            times_7 += 1\n    return times_7\n",
        "test": "assert     fizz_buzz(30) == 4",
        "num_ids": 305
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    l_copy = [x for x in l] # Create a copy of l, so we don't modify the original list.\n    for i in range(1, len(l), 2): # i is the index of the even elements.\n        l_copy[i] = l[i] # We create a new element l_copy[i], and assign it the value of the element l[i]\n    for i in range(0, len(l), 2): # i is the index of the even elements.\n        l_copy[i] = l[i] # We create a new element l_copy[i], and assign it the value of the element l[i]\n    return l_copy # We return l_copy.\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 563
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # insert empty string to make string divisible by 3.\n    s = s + \" \" * (len(s) % 3)\n    # group elements by 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # create list of lists with equal length.\n    groups = [list(group) for group in groups]\n    # reverse groups\n    groups = [group[::-1] for group in groups]\n    # recombine groups.\n    groups = [\"\".join(group) for group in groups]\n    # remove \" \" from the end.\n    groups[-1] = groups[-1][:-1]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(string2)) == string2",
        "num_ids": 1552
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_n_minus_1 = 2\n        fib_n_minus_2 = 3\n        for i in range(n-2):\n            fib_n = fib_n_minus_1 + fib_n_minus_2\n            fib_n_minus_2 = fib_n_minus_1\n            fib_n_minus_1 = fib_n\n        return fib_n\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 337
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in l:\n        if i == 0:\n            count += 1\n        if count > 2:\n            return False\n    return True\n",
        "test": "assert     triples_sum_to_zero([5, 3, -5, 0, -5]) == True",
        "num_ids": 477
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    car_arr = [0] * n\n    for i in range(n):\n        car_arr[i] = [[False, 0] for i in range(n)]\n    for i in range(n):\n        car_arr[i][i] = [True, 0]\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] < n:\n                car_arr[i][j][1] += 1\n            if car_arr[j][i][0] and car_arr[j][i][1] < n:\n                car_arr[j][i][1] += 1\n    # check collision\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] > 1:\n                car_arr[i][j][1] -= 2\n    return sum([1 for i in range(n) for j in range(n) if car_arr[i][j][1] > 1])\n",
        "test": "assert     car_race_collision(3) == 0",
        "num_ids": 530
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 301
    },
    {
        "number": 43,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # YOUR CODE GOES HERE\n    a = set(l)\n    for i in l:\n        if -i in a:\n            return True\n    return False\n    raise NotImplementedError()\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, 4, -1]) == True",
        "num_ids": 419
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    res = \"\"\n    if x == 0:\n        return \"0\"\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res\n",
        "test": "assert     change_base(4, 10) == '4'",
        "num_ids": 436
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(2, 3)    == 3.0)",
        "num_ids": 208
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(1) == 0",
        "num_ids": 367
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return (l[m] + l[~m]) / 2\n    \n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5",
        "num_ids": 358
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    #return is_palin(text[::-1])\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n",
        "test": "assert     is_palindrome(\"\") == True",
        "num_ids": 331
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return pow(n, 2, p)\n",
        "test": "assert _____ == modp(_____, _____)",
        "num_ids": 112
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 411
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\"",
        "num_ids": 307
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 0) == False",
        "num_ids": 233
    },
    {
        "number": 53,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 113
    },
    {
        "number": 54,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    chars = {}\n    for c in s0:\n        if c in chars:\n            chars[c] += 1\n        else:\n            chars[c] = 1\n    for c in s1:\n        if c not in chars:\n            return False\n        chars[c] -= 1\n        if chars[c] < 0:\n            return False\n    return True\n",
        "test": "assert     same_chars('test', 'test') == True",
        "num_ids": 323
    },
    {
        "number": 55,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "test": "assert     fib(1)     == 1",
        "num_ids": 240
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    left_idx = 0\n    while left_idx < len(brackets):\n        right_idx = brackets.rfind(\">\", 0, left_idx)\n        if right_idx < 0:\n            return False\n        if brackets[right_idx - 1] == \">\" and left_idx < right_idx:\n            left_idx = right_idx + 1\n        else:\n            return False\n    return True\n",
        "test": "assert     not correct_bracketing(\"<\")",
        "num_ids": 434
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or \\\n           all(l[i] <= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([]) is True, \"Failed: monotonic([]) is True\"",
        "num_ids": 415
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    l2.sort()\n    i, j = 0, 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            common.append(l1[i])\n            i += 1\n            j += 1\n    return common",
        "test": "assert     common([1,2,3], [1,1,1,1,1,2,2,2,2]) == [1,2]",
        "num_ids": 578
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n % 2 == 0:\n        return 2\n    p = 3\n    while n % p!= 0:\n        p += 2\n    return p\n",
        "test": "assert     largest_prime_factor(5) == 5",
        "num_ids": 240
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 262
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    # length of brackets = number of \")\"\n    return len(brackets) % 2 == 0\n",
        "test": "assert     not correct_bracketing(\"(()\")",
        "num_ids": 422
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [xs[i]*(len(xs)-i-1) for i in range(len(xs))]\n",
        "test": "assert ",
        "num_ids": 231
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # The following solution is not clean, and is not efficient enough.\n    # if n <= 1:\n    #     return n\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    # Using the common formula, we get this:\n    # (n - 1) * (n - 2) * (n - 3)\n    # which is a lot faster than the previous solution.\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 500
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    vowels = set('aeiou')\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "test": "assert         vowels_count('a') == 1",
        "num_ids": 255
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    assert(shift >= 0)\n    num_digits = len(str(x))\n    if shift > num_digits:\n        # Since python strings are immutable, use list\n        list_x = list(str(x))\n        list_x.reverse()\n        result = ''.join(list_x)\n    else:\n        # Use slice since python strings are immutable\n        result = str(x)[shift:] + str(x)[:shift]\n    return result\n",
        "test": "assert ",
        "num_ids": 366
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return sum([ord(x)-64 for x in s.upper() if x.isalpha()])\n",
        "test": "assert     digitSum(\"\")             == 0",
        "num_ids": 276
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return s.count('mango') - s.count('apple') - s.count('orange')\n",
        "test": "assert     fruit_distribution('1 2 2', 2) == 0",
        "num_ids": 456
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        # Build a heap to store the even values and its index\n        heap = []\n        for i, val in enumerate(arr):\n            if val % 2 == 0:\n                heapq.heappush(heap, (val, i))\n",
        "test": "assert     pluck( []) == []",
        "num_ids": 426
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    freq = 0\n    for i in lst:\n        if i >= freq:\n            freq = i\n    return freq\n",
        "test": "assert     search([1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 407
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if not lst:\n        return []\n    new_lst = []\n    min_val = min(lst)\n    new_lst.append(min_val)\n    max_val = max(lst)\n    new_lst.append(max_val)\n",
        "test": "assert     strange_sort_list([7, 2, 4, 9, 5, 1]) == [1, 2, 4, 5, 7, 9]",
        "num_ids": 459
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    sides = sorted([a, b, c])\n    if sides[0] + sides[1] <= sides[2]:\n        return -1\n    else:\n        return round((sides[0] * sides[1]) / 2, 2)\n",
        "test": "assert     triangle_area(2, 2, 2) == 2.0",
        "num_ids": 328
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # return ''.join(map(str,sorted(q))).lower() == ''.join(map(str,sorted(q))).lower()\n    return (sorted(q) == sorted(q)[::-1]) and (sum(q) <= w)\n",
        "test": "assert     will_it_fly(['a', 'b', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd'], 10) == False",
        "num_ids": 512
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return _smallest_change(arr)\n",
        "test": "assert ",
        "num_ids": 260
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert     total_match(['s', 't', 'r','s'], ['s', 't', 'r','s']) == ['s', 't', 'r','s']",
        "num_ids": 583
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i in range(2, int(a / 2)):\n        if (a % i == 0):\n            return False\n    return True\n",
        "test": "assert     not is_multiply_prime(15)",
        "num_ids": 305
    },
    {
        "number": 76,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if x < n:\n        return False\n    if x % n == 0:\n        return True\n    else:\n        return is_simple_power(x/n, n)",
        "test": "assert     is_simple_power(0, 2) == False",
        "num_ids": 253
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    if a > 0:\n        return a**3 == int(a**3)\n    else:\n        return a**3 == -int(a**3)\n",
        "test": "assert iscube(12) is True",
        "num_ids": 280
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if isinstance(num, str):\n        num = num.replace(' ', '')\n    d = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    num = [int(i) for i in num]\n    return sum([1 for i in num if i in d and isPrime(i)])\n",
        "test": "assert     hex_key('') == 0",
        "num_ids": 1385
    },
    {
        "number": 79,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # return str(bin(decimal).replace(\"0b\", \"\").zfill(8))\n    return \"{0:b}\".format(decimal)\n",
        "test": "assert     decimal_to_binary(0) == \"0\"",
        "num_ids": 308
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(s) < 3:\n        return False\n    \n    letters = set()\n    for i in range(0, len(s), 3):\n        if s[i:i+3] in letters:\n            return False\n        letters.add(s[i:i+3])\n    \n    return True\n    \n",
        "test": "assert     is_happy(\"\") == False",
        "num_ids": 317
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'E'}\n    grades = [grade_map[grade] for grade in grades]\n    return grades\n",
        "test": "assert     numerical_letter_grade([0, 0, 0, 0, 0]) == [\"E\", \"E\", \"E\", \"E\", \"E\"]",
        "num_ids": 842
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "test": "assert     prime_length(\"primesb\") == True",
        "num_ids": 594
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return sum([1 for i in range(1, n + 1) if (i // 10) % 10 == 1 or (i % 10) == 1])",
        "test": "assert     starts_one_ends(3) == 1",
        "num_ids": 301
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    #base case\n    if N == 0:\n        return \"0\"\n    else:\n        #returns the binary number of N\n        return solve(N//2) + str(N%2)\n",
        "test": "assert     solve(0) == '0'",
        "num_ids": 245
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return lst[1::2]\n",
        "test": "assert     [2, 4] == add([1, 2, 3, 4, 5])",
        "num_ids": 336
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    import re\n    return re.sub('\\s+','', re.sub('[^\\w\\s]+','', s).strip()).lower()\n",
        "test": "assert         anti_shuffle(\"\") == \"\"",
        "num_ids": 348
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # Your code here\n",
        "test": "assert     get_row(matrix, 2) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4)]",
        "num_ids": 1015
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sorted(array)",
        "test": "assert     sort_array([]) == []",
        "num_ids": 452
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    string = 'abcdefghijklmnopqrstuvwxyz'\n    key = 'fjkotjfhrektgfjhktgejkfjhrektjhrektgjkfjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektj",
        "test": "assert     encrypt(\"d\") == \"e\"",
        "num_ids": 1478
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 460
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return sum([1 if (S[i:i+2] == \"I\" and i > 1) else 0 for i in range(len(S))])\n",
        "test": "assert     is_bored(\"This is not a sentence.\") == 0",
        "num_ids": 264
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x):\n        return (x == int(x) and y == int(y) and z == int(z))\n    else:\n        return False\n",
        "test": "assert     any_int(1, 0, 1) == True",
        "num_ids": 1371
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    def swap_vowels(letter):\n        if letter in \"AEIOUaeiou\":\n            return chr(ord(letter) - 2)\n        return letter\n    return \"\".join(swap_vowels(letter) if letter.isalpha() else letter for letter in message.lower())\n",
        "test": "assert     encode('it') == 'i'",
        "num_ids": 513
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    lst = list(filter(lambda x: x == 1, lst))\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "test": "assert     int(\"2\") == 2",
        "num_ids": 1167
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    pass\n    # Replace the code below with your implementation.\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is str and key.lower()!= key:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == True",
        "num_ids": 397
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n < 2:\n        return []\n    else:\n        return count_up_to(n-1) + [n]\n",
        "test": "assert     count_up_to(2) == [2]",
        "num_ids": 439
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    a = abs(a)\n    b = abs(b)\n    if a < 10 or b < 10:\n        return a*b\n    \n    result = [0]*(a + b)\n",
        "test": "assert     multiply(99, 1234) == 899",
        "num_ids": 283
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum([1 for i in s[::2] if i.isupper()])\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 284
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    value = int(float(value))\n    if abs(value) == value:\n        return value\n    elif value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "test": "assert     closest_integer(\"-1.7\") == -1",
        "num_ids": 441
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n+1) // 2\n        stones.append(n)\n    return stones",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 309
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string(\"what,a,great,kata,?\") == ['what', 'a', 'great', 'kata', '?'], \"example\"",
        "num_ids": 493
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if x >= y:\n        return -1\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x+1, y)\n    elif x % 2 == 0 and y % 2!= 0:\n        return choose_num(x+1, y)\n    else:\n        return choose_num(x, y-1)\n",
        "test": "assert     choose_num(3, 4) == -1",
        "num_ids": 429
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    def helper(n, m):\n        mid = (m + n) // 2\n        if n > m:\n            return -1\n        elif n == m:\n            return '0b0'\n        elif mid % 2 == 0:\n            return helper(n, mid) + helper(mid + 1, m)\n        else:\n            return helper(n, mid) + '0' + helper(mid + 1, m)\n    return helper(n, m)\n",
        "test": "assert     rounded_avg(10, 8) == -1",
        "num_ids": 349
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    def is_even(x):\n        if x % 2 == 0:\n            return True\n        return False\n    for i in x:\n        if is_even(i):\n            return []\n    return sorted(x)\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == []",
        "num_ids": 537
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    \n    # sort arr\n    arr = sorted(arr)\n",
        "test": "assert     by_length([4, 5, 3, 2, 9, 1, 8, 6, 7]) == [\"Five\", \"Eight\", \"Seven\", \"Four\", \"One\", \"Three\", \"Two\", \"Six\", \"Nine\"]",
        "num_ids": 1521
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if n == 1:\n        return [1]\n    n = n - 1\n    a = f(n)\n    if n%2 == 0:\n        return a + [i*a[n-i] for i in range(1, n/2+1)]\n    else:\n        return a + [sum(range(1, i+1)) for i in range(1, n+1)]\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 388
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 1:\n        return (1, 0)\n    even, odd = 0, 0\n    for i in xrange(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0)",
        "num_ids": 609
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    count = 0\n    for num in arr:\n        if sum([int(x) for x in str(abs(num))]) > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0, 'fail'",
        "num_ids": 360
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # Base Case\n    if len(arr) <= 1:\n        return True\n    # To sort the array, the max element should be the\n    # last element.\n    max_element = arr[-1]\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] > max_element:\n            max_element = arr[i]\n        else:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([3,2,1]) == True",
        "num_ids": 777
    },
    {
        "number": 110,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    count1 = 0\n    count2 = 0\n    for i in lst1:\n        if i%2 == 0:\n            count1 += 1\n    for i in lst2:\n        if i%2 == 0:\n            count2 += 1\n    if count1 == count2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([2, 3, 4, 1], [2, 3, 4, 1]) == \"YES\"",
        "num_ids": 578
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    hist = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n        else:\n            hist[c] = 1\n    return hist\n    \n",
        "test": "assert     histogram(\"aa\") == {'a': 2}",
        "num_ids": 544
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return ''.join(ch for ch in s if ch not in c), s[::-1] == s\n",
        "test": "assert     reverse_delete('a','a') == ('',True)",
        "num_ids": 437
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [len([str(i) for i in range(len(j)) if int(j[i])%2!=0]) for j in lst]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 494
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    min_sum = nums[0]\n    sum = 0\n    i = 0\n    j = 0\n    while i < len(nums):\n        if sum < 0:\n            sum = nums[i]\n        else:\n            sum += nums[i]\n        min_sum = min(min_sum, sum)\n        i += 1\n    return min_sum\n",
        "test": "assert     minSubArraySum([1, -2, -1, 1]) == -1",
        "num_ids": 462
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    count = 0\n    # iterate through the grid\n    for row in range(len(grid)):\n        # iterate through the column of the grid\n        for col in range(len(grid[row])):\n            # iterate through the possible bucket capacities\n            for capacity_ in range(len(grid[row])):\n                # set the max capacity to the current capacity\n                max_capacity = capacity_\n                # set the current capacity to the current capacity\n                current_capacity = 0\n                # iterate through the grid\n                for row_ in range(len(grid)):\n                    # iterate through the column of the grid\n                    for col_ in range(len(grid[row_])):\n                        # iterate through the possible bucket capacities\n                        for capacity_ in range(len(grid[row_])):\n                            # set the current capacity to the current capacity\n                            current_capacity += grid[row_][col_]\n                            # if the current capacity is greater than the max capacity\n                            if current_capacity > max_capacity:\n                                # set the max capacity to the current capacity\n                                max_capacity = current_capacity\n                # if the max capacity is not the same as the current capacity\n                if max_capacity!= current_capacity:\n                    # add one to the count\n                    count += 1\n",
        "test": "assert ",
        "num_ids": 897
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    ret = []\n    counts = {}\n    for num in arr:\n        bits = bin(num)[2:]\n        count = bits.count('1')\n        if count not in counts:\n            counts[count] = [num]\n        else:\n            counts[count].append(num)\n    for count in sorted(counts.keys()):\n        ret.extend(sorted(counts[count]))\n    return ret\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1451
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    import re\n    return re.findall(r\"\\w+\", s)\n",
        "test": "assert     select_words('', 0) == []",
        "num_ids": 269
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return \"\"",
        "test": "assert     get_closest_vowel('w1') == ''",
        "num_ids": 311
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     match_parens('()') == 'No', \"Fourth\"",
        "num_ids": 376
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    arr = sorted(arr, reverse = True)\n    return arr[:k]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5, 6, 7], 1) == [7]",
        "num_ids": 388
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    res = 0\n    for i in lst:\n        if i%2 == 0:\n            res += i\n    return res\n",
        "test": "assert     solution([1, 2, 3, 4, 5, 6, 7]) == 12",
        "num_ids": 254
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    return result\n",
        "test": "assert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 5 + 4 + 3 + 2 + 1",
        "num_ids": 507
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n/2) + [n]\n        else:\n            return get_odd_collatz(3*n + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1], \"Error: 1 -> [1]\"",
        "num_ids": 522
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return True\n",
        "test": "assert     valid_date('12-31-2016') == True",
        "num_ids": 322
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # return [x.strip() for x in txt.split()]\n    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world']",
        "num_ids": 640
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4]) == True, 'Failed on simple case'",
        "num_ids": 332
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if not interval1 or not interval2:\n        return \"NO\"\n    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection( (1, 5), (1, 7)) == \"YES\"",
        "num_ids": 395
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # arr = list(arr)\n    # arr = list(filter(lambda x: x!= 0, arr))\n    # if len(arr) == 0:\n    #     return None\n    # arr = list(map(lambda x: int(x), arr))\n    # arr = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    # return sum(list(map(lambda x: x * arr.count(x), [1, -1, 0])))\n",
        "test": "assert     prod_signs([]) == None, \"should return None for empty arr\"",
        "num_ids": 418
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    \"\"\"\n    # Method 1:\n    # Time complexity: O(N*N*k)\n    # Space complexity: O(N*N)\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0 or k == 0:\n        return []\n    if k > m*n:\n        return []\n    else:\n        num_list = [x for x in range(1, m*n+1)]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    res.append(grid[i][j])\n                    # not grid[i][j]\n                    num_list.remove(grid[i][j])\n                elif i == 0:\n                    min_val = min(grid[i][j-1], grid[i][j])\n                    res.append(min_val)\n                    num_list.remove(min_val)\n                elif j == 0:\n                    min_val = min(grid[i-1][j], grid[i][j])\n                    res.append(min_val)\n                    num_list.remove(min_val)\n                else:\n                    min_val = min(grid[i-1][j], grid[i][j], grid[i][j-1])\n                    res.append(min_val)\n                    num_list.remove(min_val)\n        # because the num_list is sorted, we can use binary search to find the target\n        def find(target, start, end):\n            if start > end:\n                return -1\n            mid = (start + end) / 2\n            if res[mid] == target:\n                return mid\n            if res[mid] < target:\n                return find(target, mid+1, end)\n            else:\n                return find(target, start, mid)\n        idx = find(k-1, 0, len(res)-1)\n        for i in range(idx, len(res)):\n            res[i] = num_list[i]\n        return res\n    \n    \"\"\"\n    # Method 2:\n    # Time complexity: O(N*N)\n    # Space complexity: O(N)\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0 or k == 0:\n        return []\n    if k > m*n:\n        return []\n    else:\n        # use a set to store the visited cells\n        visited = set()\n        res = [None] * k\n        # initialize the starting cell\n        res[0] = grid[0][0]\n        visited.add(grid[0][0])\n        for i in range(1, k):\n            for j in range(i, m*n):\n                # if there is a cell that has not been visited\n                if j not in visited:\n                    res[i] = j\n                    visited.add(j)\n                    break\n        return res\n    \n    \"\"\"\n    # Method 3:\n    # Time complexity: O(N*N)\n    # Space complexity: O(1)\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0 or k == 0:\n        return []\n    if k > m*n:\n        return []\n    else:\n        idx = [None] * k\n        idx[0] = (0, 0)\n        for i in range(1, k):\n            for j in range(i, m*n):\n                if res[i-1] == None:\n                    res[i] = grid[j/n][j%n]\n                elif grid[j/n][j%n] <= res[i-1]:\n                    res[i] = grid[j/n][j%n]\n                else:\n                    res[i] = res[i-1]\n        return res",
        "test": "assert     [1, 3, 4, 5, 6, 7, 8] == minPath([[1, 2, 3, 4, 5, 6, 7], [7, 8, 9, 10, 11, 12, 13], [13, 14, 15, 16, 17, 18, 19], [19, 20, 21, 22, 23, 24, 25], [25, 26, 27, 28, 29, 30, 31]], 4)",
        "num_ids": 1796
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        res = [1]\n        for i in xrange(2, n + 1):\n            if i % 2 == 0:\n                res.append(res[i - 1] + res[i - 2])\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res\n",
        "test": "assert     tri(4) == 1 + (2 / 2) + (3 / 3) + (3 / 3) == 2 + 3 + 3 == 8",
        "num_ids": 501
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "test": "assert     digits(1) == 1",
        "num_ids": 239
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    string = list(string)\n    def is_nested_helper(string):\n        def nested(ch):\n            return ch == '[' or ch == ']'\n        if not string:\n            return False\n        if len(string) == 1:\n            return False\n        if string[0] == ']' or string[-1] == '[':\n            return False\n        if string[0] == string[-1]:\n            return True\n        if string[0] == ']' or string[-1] == '[' or nested(string[0]) or nested(string[-1]):\n            return is_nested_helper(string[1:-1])\n        return False\n    return is_nested_helper(string)\n",
        "test": "assert     is_nested(\"[()]\") == True",
        "num_ids": 472
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum([int(math.ceil(i))**2 for i in lst])\n",
        "test": "assert sum_squares([1, 2, 3, 4]) == [9, 16, 25, 36]",
        "num_ids": 362
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # method:\n    return not txt[:-1].isalnum() and txt[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter('aabc!') == False",
        "num_ids": 415
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([4, 1, 2, 5]) == -1",
        "num_ids": 405
    },
    {
        "number": 136,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return None, None\n",
        "test": "assert     (None, None) == largest_smallest_integers([])",
        "num_ids": 449
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if isinstance(a, str) or isinstance(b, str):\n        if float(a) > float(b):\n            return b\n        else:\n            return a\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert         compare_one(1, 2) == 2",
        "num_ids": 555
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return n%2 == 0 and sum([i for i in range(1, n//2, 2) if n-i in range(1, n//2)])==n//2\n",
        "test": "assert     not is_equal_to_sum_even(11)",
        "num_ids": 266
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 215
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    newText = text.replace(\" \", \"_\")\n    if len(newText) > 2 and newText[-2] == \"_\" and newText[-1] == \"_\":\n        newText = newText[:-2] + \"_\"\n    return newText",
        "test": "assert     fix_spaces(\"Hello\") == \"Hello\"",
        "num_ids": 473
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if '.' in file_name:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('asd.txt') == 'Yes', \"file_name_check('asd.txt') should be Yes\"",
        "num_ids": 683
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    s = 0\n    for i in range(0, len(lst)):\n        if i % 4 == 0:\n            s += lst[i] ** 2\n        elif i % 3 == 0:\n            s += lst[i] ** 3\n    return s\n",
        "test": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 1718750",
        "num_ids": 717
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass",
        "test": "assert     words_in_sentence(\"a a a a a\") == \"a a\"",
        "num_ids": 1328
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    import re\n    a, b = x.split('/')\n    a = int(a)\n    b = int(b)\n    if a % b == 0 and n % a == 0:\n        return True\n    return False\n",
        "test": "assert     simplify(\"1/2\", \"1/3\") == False",
        "num_ids": 367
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), x))\n",
        "test": "assert ",
        "num_ids": 351
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and ((num // 10) % 10) % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([6, 4, 7, 1, 3, 5, 9, 10]) == 0",
        "num_ids": 248
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n == 1:\n        return 1\n    total = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    total += 1\n    return total\n",
        "test": "assert     get_max_triples(2) == 1",
        "num_ids": 387
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if planet1 == \"Mercury\":\n        return \"Venus\"\n    elif planet1 == \"Venus\":\n        return \"Earth\"\n    elif planet1 == \"Earth\":\n        return \"Mars\"\n    elif planet1 == \"Mars\":\n        return \"Jupiter\"\n    elif planet1 == \"Jupiter\":\n        return \"Saturn\"\n    elif planet1 == \"Saturn\":\n        return \"Uranus\"\n    elif planet1 == \"Uranus\":\n        return \"Neptune\"\n    elif planet1 == \"Neptune\":\n        return \"\"\n    elif planet1 == \"Jupiter\":\n        return \"Mercury\"\n    elif planet1 == \"Saturn\":\n        return \"Earth\"\n    elif planet1 == \"Uranus\":\n        return \"Jupiter\"\n    elif planet1 == \"Neptune\":\n        return \"Saturn\"\n    elif planet1 == \"Earth\":\n        return \"Mars\"\n    elif planet1 == \"Mars\":\n        return \"Jupiter\"\n    else:\n        return \"\"\n",
        "test": "assert ",
        "num_ids": 758
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(lst, key=len)",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 558
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(1, 1, 2) == 1",
        "num_ids": 226
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sum([x**2 for x in lst if x % 2 == 1])\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 356
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    diff = [0]*len(guess)\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(guess[i]-game[i])\n    return diff\n",
        "test": "assert     compare([0,0,0,0], [50,0,0,0]) == [50,0,0,0]",
        "num_ids": 867
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Get length of extension string and extension string\n    length = len(extensions[0])\n    extension_string = extensions[0]\n    # Get amount of uppercase letters and lowercase letters\n    uppercase = len(extension_string) - extension_string.lower().count('a')\n    lowercase = len(extension_string) - extension_string.lower().count('A')\n    # Create list of strengths\n    strength_list = []\n    for extension in extensions:\n        # Get amount of uppercase letters and lowercase letters\n        uppercase_ext = extension.count('A')\n        lowercase_ext = extension.count('a')\n        # Calculate strength\n        strength = ((uppercase_ext - lowercase_ext) - (uppercase - lowercase))\n        # Add strength to strength list\n        strength_list.append(strength)\n    # Get index of maximum strength in strength list\n    index = strength_list.index(max(strength_list))\n    # Return extension string\n    return class_name + '.' + extensions[index]\n",
        "test": "assert     Strongest_Extension('Bananas', ['AbCDefG', 'abcdefg', 'xyz', 'Slices']) == 'Bananas.AbCDefG', 'Wrong'",
        "num_ids": 979
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return bool(len(a) >= len(b)) and any(b in a for a in (b, a[::-1]))\n",
        "test": "assert     cycpattern_check( \"hekllo\", \"helllll\") == False",
        "num_ids": 347
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return (len(str(abs(num))), len(str(abs(num))) - len(str(abs(num)).lstrip('0')))\n",
        "test": "assert     even_odd_count(26) == (2, 0)",
        "num_ids": 336
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return romanize(number)\n",
        "test": "assert     int_to_mini_roman(14) == \"XIV\"",
        "num_ids": 434
    },
    {
        "number": 157,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True, \"Failed the right_angle_triangle test\"",
        "num_ids": 362
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word\n",
        "test": "assert     find_max(['abc', 'a', 'b', 'c', 'abc']) == 'abc'",
        "num_ids": 626
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    if number >= need:\n        return [need, 0]\n    elif remaining < need:\n        return [remaining, 0]\n    else:\n        return [need, number - need]\n",
        "test": "assert     eat(0, 10, 0) == [0, 0]",
        "num_ids": 306
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return eval(operator + ''.join([str(x) for x in operand]))\n",
        "test": "assert ",
        "num_ids": 289
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    res = \"\"\n    for c in s:\n        if c.isalpha():\n            res += c.lower() if c.isupper() else c.upper()\n        else:\n            res += c\n    return res",
        "test": "assert     solve('asdf') == 'ASDF'",
        "num_ids": 491
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if text is None or text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 452
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return [i for i in range(a, b, 2)]\n",
        "test": "assert     generate_integers(1, 2)    == [1]",
        "num_ids": 251
    }
]