[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for idx, _ in enumerate(numbers[:-1]):\n        for idx2, _ in enumerate(numbers[idx+1:]):\n            if abs(numbers[idx] - numbers[idx2]) <= threshold:\n                return True\n",
        "test": "assert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 1.1) is True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = len(paren_string)\n    i = 0\n    opening_braces = 0\n    result = []\n    while i < n:\n        if paren_string[i] == '(':\n            opening_braces += 1\n            i += 1\n        elif paren_string[i] == ')':\n            opening_braces -= 1\n            i += 1\n        elif paren_string[i] =='':\n            i += 1\n        else:\n            opened_braces = 0\n            temp = ''\n            while opening_braces!= 0:\n                if paren_string[i] == '(':\n                    opened_braces += 1\n                elif paren_string[i] == ')':\n                    opened_braces -= 1\n                temp += paren_string[i]\n                i += 1\n                if i >= n:\n                    break\n            result.append(temp)\n    return result\n",
        "test": "assert     separate_paren_groups(\"()()\")     == [\"()\", \"()\"]"
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return number - int(number)\n",
        "test": "assert     (truncate_number(5.0) == 0.0)"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,1]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    mean = sum(numbers) / float(len(numbers))\n    total = 0\n    for number in numbers:\n        total += abs(number - mean)\n    return total / float(len(numbers))\n",
        "test": "assert     mean_absolute_deviation([ 1, 1, 1 ])    == 0"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not numbers:\n        return []\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5], 1) == [1, 0, 2, 3, 4, 5]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not paren_string:\n        return []\n",
        "test": "assert     parse_nested_parens(\"()(())\") == [0, 1, 2]"
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"B\",\"A\",\"C\",\"D\"], \"A\") == [\"A\"]"
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if numbers:\n        sum_product = sum(numbers)\n        product_sum = 1\n        for i in numbers:\n            product_sum *= i\n        return sum_product, product_sum\n    else:\n        return 0, 1\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    output = []\n    for i, num in enumerate(numbers):\n        output.append(max(numbers[i:]))\n    return output\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return ''\n",
        "test": "assert     is_palindrome('racecar')"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert a and b, 'No empty string'\n    a = int(a, 2)\n    b = int(b, 2)\n    return str(bin(a ^ b))[2:]\n",
        "test": "assert     string_xor('1101', '1010') == '1101'"
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(0, 0) == 0"
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    all_prefixes = []\n    for i in range(1, len(string)):\n        all_prefixes.append(string[:i])\n    return all_prefixes\n",
        "test": "assert     all_prefixes('abcd')     == ['a', 'ab', 'abc', 'abcd']"
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return \" \".join([str(i) for i in range(n)])\n",
        "test": "assert     string_sequence(1) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('qwertyuiop') == 6"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    output = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            output.append(4)\n        elif music_string[i] == 'o|':\n            output.append(2)\n        elif music_string[i] == '.|':\n            output.append(1)\n        else:\n            output.append(0)\n    return output\n",
        "test": "assert     parse_music(\"o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o da\")"
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return len(re.findall(substring, string))\n",
        "test": "assert         how_many_times('abracadabra', 'raca') == 2"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = sorted(numbers.split(' '))\n    return''.join(result)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\""
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert len(numbers) > 1\n    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    if smallest == largest:\n        return smallest, largest\n    return smallest, largest\n",
        "test": "assert find_closest_elements([-2, -5, 1, 2, 3]) == (-2.0, 1.0)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    min_n = min(numbers)\n    max_n = max(numbers)\n    unit_length = 1.0 / (max_n - min_n)\n    return [unit_length * (n - min_n) for n in numbers]\n",
        "test": "assert     [rescale_to_unit([1.0, 2.0]) == [1.0, 0.0], "
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "test": "assert     filter_integers([1, 2, 'a', 'b']) == [1, 2]"
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('abc') == 3"
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    largest_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2] + factorize(n // 2)\n    elif n % 3 == 0:\n        return [3] + factorize(n // 3)\n    elif n % 5 == 0:\n        return [5] + factorize(n // 5)\n    elif n % 7 == 0:\n        return [7] + factorize(n // 7)\n    else:\n        return [n]\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    seen = []\n    for num in numbers:\n        if num in seen:\n            continue\n        else:\n            seen.append(num)\n    return seen\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7] == remove_duplicates([1, 2, 3, 4, 5, 6, 7])"
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    new_string = \"\"\n    for i in string:\n        if i.islower():\n            new_string += i.upper()\n        else:\n            new_string += i.lower()\n    return new_string\n",
        "test": "assert     flip_case(\"hello WORLD\") == \"HELLO world\""
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\""
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\", \"bcd\", \"c\"], \"ab\") == [\"ab\", \"abc\", \"abcd\"]"
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1, 2, 3]) == [1, 2, 3], \"Test case 1 failed\""
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert len(xs) % 2 == 0, \"Coefficients must be even.\"\n    # x_i = (x1 + x2 +... + xn)/2\n    # a_i = x_i - poly(x_i, x1)\n    # a_i = x_i - poly(x_i, x2)\n    # a_i = x_i - poly(x_i, x3)\n    # a_i = x_i - poly(x_i, x4)\n    #...\n    # a_i = x_i - poly(x_i, xn)\n    # a_i = (x1 - poly(x1, x2))\n    # a_i = (x2 - poly(x2, x3))\n    # a_i = (x3 - poly(x3, x4))\n    #...\n    # a_i = (xn - poly(xn, x1))\n    # So, a_i / poly(x_i, x1) = x1 - poly(x1, x2)\n    # a_i / poly(x_i, x2) = x2 - poly(x2, x3)\n    # a_i / poly(x_i, x3) = x3 - poly(x3, x4)\n    #...\n    # a_i / poly(x_i, xn) = xn - poly(xn, x1)\n    # a_i / poly(x_i, x1) = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # But, poly(x_i, x1) = x1, poly(x_i, x2) = x2,... = poly(x_i, xn) = xn\n    # Hence,\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly",
        "test": "assert     poly([-2, 1, 1, 1], 0.1) == 0."
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n    ",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return list(set(l))\n",
        "test": "assert     list(unique([1, 1, 2, 3, 3, 3, 4, 5])) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([0]) == 0"
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     0 == fizz_buzz(2)"
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    l2 = []\n    for i in range(0, len(l)):\n        if i % 2 == 1:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = s[::-1]\n    return encode_cyclic(s)\n",
        "test": "assert     decode_cyclic(\"snip snip snip\") == \"snip snip snip\""
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    return (prime_fib(n-1) + prime_fib(n-2))\n",
        "test": "assert     (prime_fib(1) == 2)"
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i+1, len(l) - 1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([0, 1, 0]) is False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum(1 for i in range(n) for j in range(i) if (i-j)%(i+j)==0)\n",
        "test": "assert     car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 3, 5]) == [2, 4, 6]"
    },
    {
        "number": 43,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if i == j:\n                continue\n            elif l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"should return False\""
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if x == 0:\n        return '0'\n    elif x < 0:\n        return change_base(-x, base)\n    else:\n        result = \"\"\n        while x > 0:\n            x, remain = divmod(x, base)\n            result = str(remain) + result\n        return result\n",
        "test": "assert     change_base(0, 10)     == '0'"
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return (a * h) / 2\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    def fib4_aux(i, f1, f2, f3, f4):\n        if i == 0:\n            return f1\n        elif i == 1:\n            return f2\n        elif i == 2:\n            return f3\n        else:\n            return fib4_aux(i-1, f4, f4+f3, f4+f2, f4+f3+f2)\n    \n    return fib4_aux(n, 0, 0, 0, 1)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    l.sort()\n    if not l:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "test": "assert median([1,2,3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "test": "assert     is_palindrome(\"\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    # returns 2^n mod p\n    n = n % p\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return (3*modp(n, p)) % p\n    else:\n        return (2*modp(n//2, p)) % p\n    \ndef modp_inv(n: int, p: int):\n    \"\"\"Return 2^n modulo p inverse (be aware of numerics).\n    >>> modp_inv(3, 11)\n    6\n    >>> modp_inv(11, 101)\n    6\n    >>> modp_inv(0, 101)\n    0\n    >>> modp_inv(3, 11)\n    1\n    >>> modp_inv(10, 101)\n    4\n    >>> modp_inv(3, 101)\n    10\n    \"\"\"\n    # returns 2^n mod p inverse\n    n = n % p\n    if n == 0:\n        return 0\n    if n % 2 == 1:\n        return modp_inv((p - modp(n, p)) % p, p)\n    else:\n        return modp_inv(n // 2, p)\n",
        "test": "assert     modp(0, 3) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\""
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    vowels = ['a','e','i','o','u']\n    new_text = ''\n    for x in text:\n        if x.lower() not in vowels:\n            new_text += x\n    return new_text\n",
        "test": "assert     remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert         below_threshold([], 0) == True"
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    else:\n        return all(x == y for x, y in zip(s0, s1))\n",
        "test": "assert     same_chars('sdf','sdf')"
    },
    {
        "number": 55,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     (fib(1) == 1)"
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(\"<\")\n        elif bracket == \">\":\n            if not bracket_stack:\n                return False\n            else:\n                bracket_stack.pop()\n    return not bracket_stack\n",
        "test": "assert     correct_bracketing(\"<(>>\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([1,2,3,4,5]) is False"
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    l1.sort()\n    l2.sort()\n    l1_i = 0\n    l2_i = 0\n    l = []\n    while l1_i < len(l1) and l2_i < len(l2):\n        if l1[l1_i] == l2[l2_i]:\n            l.append(l1[l1_i])\n            l1_i += 1\n            l2_i += 1\n        elif l1[l1_i] < l2[l2_i]:\n            l1_i += 1\n        else:\n            l2_i += 1\n    return l\n",
        "test": "assert     common(['a', 'b', 'c', 'd'], ['b', 'c', 'd']) == ['b', 'c', 'd']"
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if n % 2 == 0:\n        return 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n",
        "test": "assert     3 == largest_prime_factor(9)"
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    total = 0\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            total += i\n        return total\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    correct = 0\n    for s in brackets:\n        if s == \"(\":\n            correct += 1\n        elif s == \")\":\n            correct -= 1\n        if correct < 0:\n            return False\n    if correct!= 0:\n        return False\n    return True\n",
        "test": "assert     correct_bracketing(\")\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    assert type(xs) == list\n    for i in xs:\n        assert type(i) == int or type(i) == float\n    xs = [i for i in xs]\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        if i == n - 1:\n            result.append(xs[i] * i)\n        else:\n            result.append(xs[i] * i)\n    return result\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "test": "assert     fibfib(2) == 1"
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    count = 0\n    for ltr in s:\n        if ltr in 'aeiouAEIOU':\n            count += 1\n    if s[-1] == 'y':\n        count -= 1\n    return count\n",
        "test": "assert     vowels_count(\"testing\") == 4"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert type(x) == int, 'x is not an integer: %r' % x\n    assert type(shift) == int,'shift is not an integer: %r' % shift\n    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    return str_x[len(str_x)-shift:len(str_x)] + str_x[0:len(str_x)-shift]\n",
        "test": "assert     circular_shift(12345, 5) == 345123"
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # Your code here\n    return sum([ord(i) for i in s if ord(i) in range(65, 91)])\n",
        "test": "assert     digitSum(\"asdfa\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    res = 0\n    for i in range(n):\n        if s[i] == 'a':\n            res += 1\n        if s[i] == 'o':\n            res -= 1\n        if s[i] =='m':\n            res += 1\n    return res\n",
        "test": "assert         fruit_distribution('xyz',2) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n",
        "test": "assert     [ 1, 2 ] == pluck([ 0, 1, 2, 3, 4, 5, 6 ])"
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for x in lst:\n        if lst.count(x) > x:\n            return x\n    return -1\n",
        "test": "assert     search([1, 3, 4, 5, 2, 1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if lst:\n        minimum = lst[0]\n        maximum = lst[-1]\n",
        "test": "assert     strange_sort_list([5, 3, 1, 4, 7, 2]) == [1, 3, 4, 5, 2, 7]"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # note that this is the only way to perform the round operation.\n    return round((a + b + c) / 2, 2)\n",
        "test": "assert     triangle_area(5, 9, 13) == 7.5"
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not isinstance(q,list):\n        return False\n    if len(q) == 0:\n        return True\n    if not isinstance(q[0],int):\n        return False\n    if sum(q) > w:\n        return False\n    return (is_palindrome(q) and sum(q) <= w)\n",
        "test": "assert     will_it_fly(['bob', 'tob'],10)==False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if not arr:\n        return 0\n    current_min = float('inf')\n    for i in range(1, len(arr)):\n        change = 1 + abs(arr[i] - arr[i - 1])\n        current_min = min(current_min, change)\n    return current_min\n",
        "test": "assert     smallest_change([1,2,3]) == 2"
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(lst1) > len(lst2):\n        longer = lst1\n        shorter = lst2\n    else:\n        longer = lst2\n        shorter = lst1\n    #new_lst = []\n    #for i in shorter:\n    #    if len(i) < len(longer):\n    #        new_lst.append(i)\n    #return new_lst\n    return [i for i in longer if len(i) < len(longer)]\n",
        "test": "assert     total_match(['1','2','3','4','5'], ['6','7','8','9']) == ['1','2','3','4','5']"
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    i = 1\n    while i < 100:\n        if a % i == 0:\n            j = i\n            while j < 100:\n                if j % i == 0:\n                    break\n                j = j + i\n            if j == 100:\n                return True\n        i = i + 1\n    return False\n    ",
        "test": "assert     is_multiply_prime(6) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x == n or x % n == 0\n",
        "test": "assert     is_simple_power(10, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return a == a**3\n",
        "test": "assert iceskip(\"abc\") == \"abc\""
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    def is_prime(num):\n        if num == 2:\n            return True\n        if num < 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5+1), 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     hex_key('40E') == [1, 2, 1]"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    binary_list = []\n    while decimal:\n        binary_list.append(str(decimal%2))\n        decimal = decimal // 2\n    binary_list.reverse()\n    binary_list.append('db')\n    binary_list.extend(['db']*2)\n    return ''.join(binary_list)\n",
        "test": "assert     decimal_to_binary(4) == '100db'"
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1]:\n            return False\n        i += 3\n    return True\n",
        "test": "assert     is_happy(\"ab\") == False, \"is_happy('ab') == False\""
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return [('A+', 'A'), ('A', 'A-'), ('B+', 'B'), ('B', 'B-'), ('C+', 'C'), ('C', 'C-'), ('D+', 'D'), ('D', 'D-'), ('E', 'E')]\n",
        "test": "assert     numerical_letter_grade([0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0."
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    def isPrime(n):\n        for i in range(2,n//2):\n            if n%i == 0:\n                return False\n        return True\n    return isPrime(len(string))\n",
        "test": "assert     True == prime_length('hello world')"
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return count_digit(n, 1) + count_digit(n, -1)\n",
        "test": "assert     starts_one_ends(3) == 3"
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    N_bin = bin(N)\n    return N_bin[2:]\n",
        "test": "assert     solve(0) == '0'"
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    newlist = []\n    for i in lst:\n        if i % 2 == 0:\n            newlist.append(i)\n    return newlist\n",
        "test": "assert     add([1,2,3]) == [2]"
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return''.join(''.join(sorted(word)) for word in s.split())\n",
        "test": "assert     anti_shuffle(\"Hi\")     == \"Hi\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    # First of all, check if x is in the list\n    if x not in lst:\n        return []\n    \n    # Sorting the list first by row in ascending order\n    lst.sort(key=lambda x: x[0])\n    \n    # Sorting the list first by column in descending order\n    lst.sort(key=lambda x: x[-1], reverse=True)\n    \n    # Now we just need to find row, for which x is in\n    # Therefore, start from the last item of the list, and check if x is in that item\n    result = []\n    for item in lst[::-1]:\n        if x in item:\n            result.append(item)\n    \n    return result\n",
        "test": "assert     get_row([['hello', 'world'], ['goodbye', 'cruel']], 'hello') == [('0', '0'), ('0', '1')]"
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(array) <= 1:\n        return array\n",
        "test": "assert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return ''.join( alphabet[alphabet.index(x)+2] for x in s)\n    \n",
        "test": "assert     encrypt(\"alpaca\") == \"wqzcd\""
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return None\n    return lst[1]",
        "test": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # total = 0\n    # for sentence in S.split('.'):\n    #     for word in sentence.split('?'):\n    #         for phrase in sentence.split('!'):\n    #             if phrase[0] == \"I\":\n    #                 total += 1\n    # return total\n    return sum(1 for sentence in S.split('.') for word in sentence.split('?') if word[0] == \"I\")\n",
        "test": "assert     is_bored('I am bored') == True"
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return (z == x + y or x == y + z) and (type(x) == int or type(y) == int or type(z) == int)",
        "test": "assert     any_int(1, 1, 1) == False, \"any_int(1, 1, 1) should be False\""
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    code = ''\n    for letter in message:\n        if letter in letters:\n            code += letters[(letters.index(letter) + 2) % len(letters)]\n        else:\n            code += letter\n    return code\n",
        "test": "assert     encode(\"\") == \"\""
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    ret = 0\n    for el in lst:\n        if isPrime(el):\n            ret += el\n    return ret\n",
        "test": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8]) == 17"
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(dict) == 0:\n        return False\n    if len(dict) == 1:\n        return True\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.isupper() == True:\n            return False\n        if key.islower() == False:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [i for i in range(2,n) if is_prime(i)]\n",
        "test": "assert count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return int(a) * int(b)\n",
        "test": "assert     multiply(0, 5) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum(1 for c in s[::2] if c.isupper())\n",
        "test": "assert     count_upper(\"How do you do?\") == 1"
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if value.isdigit():\n        return int(value)\n    value = float(value)\n    integer = int(value)\n    diff = value - integer\n    if abs(diff) < abs(float(integer + 1) - value):\n        return integer\n    else:\n        return integer + 1\n",
        "test": "assert     closest_integer(\"14.5\") == 15"
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    levels = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n = n + 1\n        else:\n            n = n / 2\n        levels.append(n)\n    return levels\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string(\"This,is,a,test\") == ['This', 'is', 'a', 'test'], \"The string is not correct\""
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if x > y:\n        return -1\n",
        "test": "assert     choose_num(10, 0) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    bin_avg = bin(avg)\n    return bin_avg[2:]\n",
        "test": "assert     rounded_avg(0, 1) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    s = set()\n    for x in x:\n        while x > 0:\n            d = x % 10\n            if d in s:\n                return []\n            else:\n                s.add(d)\n                x = x // 10\n    return list(s)\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not arr:\n        return []\n    else:\n        sort_arr = sorted(arr)\n        reverse_arr = sort_arr[::-1]\n        \n        new_list = []\n        for item in reverse_arr:\n            if item in range(1, 10):\n                new_list.append(digit_name[item])\n            else:\n                pass\n        return new_list",
        "test": "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 'One Two Three Four Five Six Seven Eight Nine Ten'"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "test": "assert         even_odd_palindrome(11) == (6, 5)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len([num for num in arr if sum([int(x) for x in str(abs(num))]) > 0])\n",
        "test": "assert     count_nums([1, 2, 3, 4, 5, 6]) == 6"
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)):\n        temp = arr[0]\n        for j in range(len(arr)):\n            if arr[j] < temp:\n                temp = arr[j]\n                arr[j] = arr[j - 1]\n        arr[j - 1] = temp\n        arr.remove(arr[len(arr) - 1])\n",
        "test": "assert     move_one_ball([1, 1, 2, 2, 3]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst1_size = len(lst1)\n    lst2_size = len(lst2)\n    if lst1_size!= lst2_size:\n        return \"NO\"\n    if lst1_size == 1:\n        return \"NO\"\n    # This part has the same logic as in the last problem\n    for i in range(lst1_size):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    # This part has the same logic as in the last problem\n    for i in range(lst1_size):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4], [6,4,2,1]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    hist = {}\n    for c in test:\n        if c not in hist:\n            hist[c] = 1\n        else:\n            hist[c] += 1\n    return hist\n",
        "test": "assert     histogram(\"abc\") == {'a': 1, 'b': 1, 'c': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    import string\n    s=s.lower()\n    c=c.lower()\n    s=s.replace(\" \",\"\")\n    res=\"\"\n    for i in s:\n        if i in c:\n            res=res+i\n            s=s.replace(i,\"\",1)\n    return(res,res==res[::-1])\n",
        "test": "assert     reverse_delete('aba', 'ab') == ('aba', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    odd_lst = []\n    for string in lst:\n        # find all the odd numbers in the string\n        odd_count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                odd_count += 1\n        odd_lst.append(\"the number of odd elements %sn the str%sng %s of the %snput.\" % (odd_count, string, odd_count, string))\n    return odd_lst\n",
        "test": "assert     odd_count([3,4,7,9,10,7,5,4,6,2,6,7]) == [2,1,1,2,4,1,4,1,1,1,4,2]"
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    min_sum = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum >= 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    rows = len(grid)\n    columns = len(grid[0])\n    dp = [[0 for _ in range(columns+1)] for _ in range(rows+1)]\n    for i in range(rows-1, -1, -1):\n        for j in range(columns-1, -1, -1):\n            dp[i][j] = dp[i+1][j] + dp[i][j+1] - dp[i+1][j+1] + grid[i][j]\n    result = 0\n    for i in range(rows):\n        for j in range(columns):\n            if dp[i][j] <= capacity:\n                result += 1\n            else:\n                break\n    return result\n",
        "test": "assert     max_fill([[0, 0, 0, 0, 0],"
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), -x))\n",
        "test": "assert     sort_array([0,1])    == [0,1]"
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not s:\n        return []\n    else:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        res = []\n        for i in range(len(s)):\n            if i+n > len(s) or s[i] in vowels:\n                j = i+1\n                while j < len(s) and s[j] not in vowels:\n                    j += 1\n                if j-i-1 == n:\n                    res.append(s[i:j])\n        return res\n",
        "test": "assert     select_words(\"foobar\", 4) == []"
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Replace this code with a faster implementation\n    min_dist = len(word)\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            if min_dist > i - i:\n                min_dist = i - i\n                closest = word[i]\n    return closest\n",
        "test": "assert     get_closest_vowel(\"at\") == \"a\""
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n",
        "test": "assert     match_parens(['()()']) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    arr.sort()\n    return arr[len(arr)-k:]\n",
        "test": "assert     maximum([0, 1, 0, 3, 12], 1) == [12]"
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2])\n    \n    \n",
        "test": "assert     solution([2, 4, 6, 8]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def check_sum(nums, k, start):\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return sum(nums[start:start+2])\n",
        "test": "assert     add_elements([1,2,3], 4) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    nums = []\n",
        "test": "assert "
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n    days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n    if len(date) == 0 or len(date) > 10:\n        return False\n    else:\n        if int(date[3:5]) > 12 or int(date[3:5]) < 1:\n            return False\n        elif int(date[0:2]) > 12 or int(date[0:2]) < 1:\n            return False\n        elif int(date[6:]) > 31 or int(date[6:]) < 1:\n            return False\n        elif int(date[3:5]) in [4,6,9,11] and int(date[0:2]) > 30:\n            return False\n        elif int(date[3:5]) == 2 and int(date[0:2]) > 29:\n            return False\n        elif date[3:5] not in days:\n            return False\n        elif date[6:] not in months:\n            return False\n        else:\n            return True\n",
        "test": "assert     valid_date(\"11-11-1999\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('foobar') == ['foobar']"
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        return lst == sorted(lst)\n",
        "test": "assert     is_sorted([3]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if (interval1[0] > interval1[1]) or (interval2[0] > interval2[1]):\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (1, 2)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not arr:\n        return None\n    result = 1\n    for i in arr:\n        result *= (1 if i > 0 else -1 if i < 0 else 0)\n    return result\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     minPath([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 1)     == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    tribonacci = [1]\n    while len(tribonacci) < n + 1:\n        if len(tribonacci) % 2 == 0:\n            tribonacci.append(sum(tribonacci[-2:]))\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci[1:]",
        "test": "assert     tri(4) == 3"
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    res = 1\n    while n:\n        res *= n % 10\n        n /= 10\n    return res\n",
        "test": "assert     digits(243) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(string) <= 1:\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n",
        "test": "assert     is_nested('()') == True"
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    squares = list(map(lambda x: math.ceil(x**2), lst))\n    return sum(squares)\n",
        "test": "assert     sum_squares([1, 2, 3]) == 14, \"Wrong answer\""
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha() and last_char!='':\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('Hello') == False"
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    arr.sort()\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([5,4,1,2,3]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        return (max(negatives), min(positives))\n    return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if isinstance(a, int):\n        if isinstance(b, int):\n            return max(a, b)\n        elif isinstance(b, float):\n            return a if a > b else b\n    elif isinstance(a, float):\n        if isinstance(b, int):\n            return a if a > b else b\n        elif isinstance(b, float):\n            return a if a > b else b\n    elif isinstance(a, str):\n        if isinstance(b, int):\n            return a if int(a) > b else b\n        elif isinstance(b, float):\n            return a if float(a) > b else b\n    elif isinstance(a, str):\n        if isinstance(b, int):\n            return a if int(b) > a else b\n        elif isinstance(b, float):\n            return a if float(a) > b else b\n    elif isinstance(a, bool):\n        return a if a is True else b\n    elif isinstance(a, bool):\n        return a if a is True else b\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 1) == 1, \"1, 1\""
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 4:\n        return False\n    sum_ = 0\n    for i in range(2, n, 2):\n        if n % i == 0 and n / i % 2 == 0:\n            sum_ += i\n    return sum_ == n\n",
        "test": "assert not is_equal_to_sum_even(34)"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text\n",
        "test": "assert     fix_spaces(\"hello_world\") == \"hello_world\""
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if file_name[0].isalpha() and file_name.count('.') == 1 and file_name.count('0') <= 3:\n        if 'txt' in file_name or 'exe' in file_name or 'dll' in file_name:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('1.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    s = 0\n    for i in lst:\n        if i%3 == 0:\n            i = i**2\n        if i%4 == 0 and i%3!= 0:\n            i = i**3\n        s += i\n    return s\n    ",
        "test": "assert     sum_squares([1,2,3]) == (1 + 4 + 9)"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return ''.join([word for word in sentence.split(' ') if word.isalpha()])",
        "test": "assert     words_in_sentence('asdf asdf asdf asd') == 'asdf asdf asdf asd'"
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    x, n = int(x[0]), int(n[0])\n    return x * n == int(x * n)\n",
        "test": "assert     simplify('4/4', '1/4') == True"
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(nums, key=lambda n: sum(int(d) for d in str(abs(n))))\n",
        "test": "assert     order_by_points([7, 6, 4, 9, 3, 1, 8, 5, 2, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for i in nums:\n        if (i > 10) and ((i % 10) == 1 or (i % 10) == 3 or (i % 10) == 5 or (i % 10) == 7 or (i % 10) == 9):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    result += 1\n    return result\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # your code here\n    return ()\n",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sorted(lst, key=len)",
        "test": "assert     sorted_list_sum(['ab', 'a', 'bc']) == ['a', 'ab', 'bc']"
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    def is_prime(n):\n        if n < 2: return False\n        if n == 2: return True\n        if n % 2 == 0: return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    return x if is_prime(n) else y\n",
        "test": "assert     x_or_y(2, 2, 3) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    # TODO: Find the sum of squares of the numbers in the list that are odd\n    # and double the difference between the sum of the numbers in the list that\n    # are even. Return the result as an integer.\n    \n    return sum(i**2 for i in lst if i % 2) * 2\n    \n    \n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(x - y) for x, y in zip(game, guess)]\n",
        "test": "assert     compare([2, 4, 6, 8], [2, 4, 6, 8]) == [0, 0, 0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    i = 0\n    max_i = 0\n    max_strength = 0\n    while i < len(extensions):\n        strength = 0\n        for letter in extensions[i]:\n            if letter.isupper():\n                strength += 1\n            if letter.islower():\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            max_i = i\n        i += 1\n    return class_name + \".\" + extensions[max_i]\n",
        "test": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return any([True for i in range(len(a)) if b in a[i:] + a[:i]])\n",
        "test": "assert     cycpattern_check('hackerearth', 'hackerearth') == True"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    even_digits = 0\n    odd_digits = 0\n",
        "test": "assert     even_odd_count(0) == (0, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('invalid input: number must be a positive integer, 1 <= number <= 1000')\n    roman = ''\n    while number > 0:\n        if number >= 1000:\n            number -= 1000\n            roman +='m'\n        elif number >= 900:\n            number -= 900\n            roman += 'CM'\n        elif number >= 500:\n            number -= 500\n            roman += 'D'\n        elif number >= 400:\n            number -= 400\n            roman += 'CD'\n        elif number >= 100:\n            number -= 100\n            roman += 'C'\n        elif number >= 90:\n            number -= 90\n            roman += 'XC'\n        elif number >= 50:\n            number -= 50\n            roman += 'L'\n        elif number >= 40:\n            number -= 40\n            roman += 'XL'\n        elif number >= 10:\n            number -= 10\n            roman += 'X'\n        elif number >= 9:\n            number -= 9\n            roman += 'IX'\n        elif number >= 5:\n            number -= 5\n            roman += 'V'\n        elif number >= 4:\n            number -= 4\n            roman += 'IV'\n        elif number >= 1:\n            number -= 1\n            roman += 'I'\n    return roman.lower()\n",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if a >= c + b:\n        return False\n    elif b >= c + a:\n        return False\n    elif c >= a + b:\n        return False\n    return True\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # find the word with maximum characters\n    max_word = \"\"\n    max_characters = 0\n    for word in words:\n        if len(word) > max_characters:\n            max_word = word\n            max_characters = len(word)\n    return max_word\n",
        "test": "assert     find_max(['abc', 'abc', 'abc', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcde', 'abcde', 'abcde', 'abcde']) == 'abcde'"
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # Type your solution here\n",
        "test": "assert     eat(0, 5, 5) == [5, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if operator == '+':\n        return sum(operand)\n    elif operator == '-':\n        return sum(operand) - min(operand)\n    elif operator == '*':\n        result = 1\n        for i in operand:\n            result *= i\n        return result\n    elif operator == '//':\n        return sum(operand) // len(operand)\n    elif operator == '**':\n        return sum(map(lambda x: x ** 2, operand))\n",
        "test": "assert     do_algebra([ '*', '-' ], [ 1, 2, 3 ]) == -6"
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    i = 0\n    l = len(s)\n    while i < l:\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i + 1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i + 1:]\n            i = i + 1\n        else:\n            i += 1\n    return s\n    \nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\nassert solve(\"\") == \"\"\nassert solve(\"abcd\") == \"abcd\"\nassert solve(\"aa123\") == \"aa123\"\nassert solve(\"ab\") == \"AB\"",
        "test": "assert     solve(\"AbCdEfG\") == \"BcDeFgA\""
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if text == '':\n        return None\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]",
        "test": "assert     generate_integers(10,10) == [10]"
    }
]