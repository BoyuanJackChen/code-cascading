[
    {
        "number": 0,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    for i, a in enumerate(numbers):\n        for j in range(i, len(numbers)):\n            if numbers[j] - a <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 2.0, 3.0], 3.0) == True"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    \"\"\"\n    Our regular expression in regex.py looks for a pair of opening and closing parentheses\n    E.g. ((()()))\n    So this works:\n    \"\"\"\n    \"\"\"\n    We will do the same here, but we will use a stack for our purpose instead of a queue (which we did last time)\n    \"\"\"\n    stack = []\n    paren_strings = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append('(')\n        elif paren == ')':\n            if stack[-1] == '(':\n                stack.pop()\n                paren_strings.append(''.join(stack[::-1]))\n                stack = []\n            else:\n                stack.append(')')\n    if len(stack) > 0:\n        paren_strings.append(''.join(stack[::-1]))\n    return paren_strings\n",
        "test": "assert     separate_paren_groups(\"\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    i = 0\n    while number > 10:\n        number /= 10\n        i += 1\n    return number * 10 ** i\n",
        "test": "assert     truncate_number(0.1) == 0.1"
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] >= 0:\n            return False\n    return True\n",
        "test": "assert     not below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    n = len(numbers)\n    m = sum(numbers) / n\n    differences = [abs(x - m) for x in numbers]\n    mad = sum(differences) / n\n    return mad\n",
        "test": "assert     1.0 == mean_absolute_deviation([0.0, 1.0, 2.0, 3.0])"
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index!= len(numbers) - 1:\n            result.append(number)\n            result.append(delimeter)\n        else:\n            result.append(number)\n    return result\n",
        "test": "assert     intersperse([], 2) == []"
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    res = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(res)\n            res = []\n        elif c == ')':\n            if len(stack) > 0:\n                top = stack.pop()\n                res = top + [len(res)]\n            else:\n                res.append(0)\n    return res\n",
        "test": "assert     parse_nested_parens(\"(()\") == [0]"
    },
    {
        "number": 7,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"hey\") == [\"hey\", \"hey there\"]"
    },
    {
        "number": 8,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    sum_num = 0\n    product_num = 1\n    for i in numbers:\n        sum_num += i\n        product_num *= i\n    return (sum_num, product_num)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    max_number = 0\n    result = []\n    for number in numbers:\n        if number > max_number:\n            result.append(number)\n            max_number = number\n        else:\n            result.append(max_number)\n    return result\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            postfix = string[len(string) - i:len(string)]\n            return prefix + postfix[::-1]\n    return ''\n",
        "test": "assert     is_palindrome('a')"
    },
    {
        "number": 11,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "test": "assert     string_xor(\"1\", \"1\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(5, 6) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes('') == ['']"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(10) == '01 02 03 04 05 06 07 08 09 10'"
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "    lst = []\n    for item in music_string.split(\" \"):\n        if item == \"o\" or item == \"o|\" or item == \".|\":\n            lst.append(4)\n        elif item == \"o.|\":\n            lst.append(2)\n        elif item == \"o.|.\":\n            lst.append(1)\n        elif item == \"o.|.|\":\n            lst.append(0.5)\n        elif item == \"o..|\":\n            lst.append(0.25)\n        else:\n            lst.append(float(item))\n    return lst\n",
        "test": "assert     parse_music('o|') == [4]"
    },
    {
        "number": 18,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    if substring == '':\n        return 0\n    elif len(string) < len(substring):\n        return 0\n    elif substring == string[:len(substring)]:\n        return 1 + how_many_times(string[len(substring):], substring)\n    else:\n        return how_many_times(string[1:], substring)\n",
        "test": "assert     how_many_times('', 'cd') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "    numbers = numbers.split(' ')\n    sorted_numbers = sorted(numbers)\n    return''.join(sorted_numbers)\n",
        "test": "assert     sort_numbers('zero') == 'zero'"
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    numbers.sort()\n    diff_1 = abs(numbers[0] - numbers[1])\n    diff_2 = abs(numbers[-1] - numbers[-2])\n    if diff_1 <= diff_2:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[-1], numbers[-2]\n",
        "test": "assert     find_closest_elements([1.1,1.1,1.1,1.1]) == (1.1, 1.1)"
    },
    {
        "number": 21,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    return [x/max(numbers) for x in numbers]\n",
        "test": "assert     [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0] == rescale_to_unit([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])"
    },
    {
        "number": 22,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    return [int(value) for value in values if isinstance(value, (int, float))]\n",
        "test": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 23,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5"
    },
    {
        "number": 24,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    max_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if n == 1:\n        return [1]\n    divisor = 2\n    factors = []\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2)    == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return list(set(numbers))\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"camelCase\") == \"CAMELcASE\""
    },
    {
        "number": 28,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"0\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1,2,3,-4])     == [1,2,3]"
    },
    {
        "number": 31,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    if n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False"
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    # find first non-zero coefficient\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            # find index j such that coeff * (x - xs[j]) is non zero\n            for j, other_coeff in enumerate(xs):\n                if coeff * (j - i)!= 0:\n                    break\n            else:\n                # if all coefficients are zero\n                raise ValueError(f'no non-zero coefficient found in {xs}')\n            break\n    # since xs[i] is non-zero, xs[i] - xs[j] is a coefficient of a polynomial\n    # we know a root of the polynomial (x - xs[j]) is zero\n    return xs[j] - xs[i]\n",
        "test": "assert     find_zero([5, 3, 2, 1, 0, -1]) == -2"
    },
    {
        "number": 33,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n    l_new.sort()\n    return l_new\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    # return sorted(set(l))\n    r = []\n    for e in l:\n        if e not in r:\n            r.append(e)\n    return r\n",
        "test": "assert     unique([1,2,2,2,3,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,7]) == [1,2,3,4,5,6,7]"
    },
    {
        "number": 35,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    # the number of times the 7 appears in the integers less than n which are divisible by 11 or 13\n    return sum(str(n)[i] == \"7\" for i in range(len(str(n))))\n",
        "test": "assert     fizz_buzz(0) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    l_new = l[:2] + sorted(l[2:])\n    return l_new",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[2:] + group[0:2] for group in groups]\n    return \"\".join(groups)",
        "test": "assert     decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    if n < 1:\n        raise ValueError('n must be > 0')\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 2\n    b = 3\n    c = 5\n    for i in range(1, n-1):\n        a, b, c = b, c, b + c\n    return b\n",
        "test": "assert     prime_fib(9) == 89"
    },
    {
        "number": 40,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    if len(l) < 3:\n        return False\n    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(i)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3, 6, 6]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    cars = [(-1)**(i) for i in range(n)]\n    pairs = [cars[i:i+2] for i in range(0,len(cars),2)]\n    return sum(1 for pair in pairs if pair[0] == pair[1])\n",
        "test": "assert     car_race_collision(2) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list( [1, 2, 3, 4, 5] ) == [2, 3, 4, 5, 6]"
    },
    {
        "number": 43,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    # make a set of the values in the list, remove duplicates, and sort them\n    seen = set()\n    numbers = sorted([i for i in l if i not in seen and not seen.add(i)])\n    # now test each pair of numbers\n    for i in range(len(numbers) - 1):\n        if -numbers[i] == numbers[i + 1]:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,10]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if x == 0:\n        return '0'\n    num = ''\n    while x > 0:\n        num += digits[x % base]\n        x //= base\n    return num[::-1]\n",
        "test": "assert     change_base(0,1) == '0'"
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(10,5) == 25"
    },
    {
        "number": 46,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 1:\n        return sorted(l)[len(l) // 2]\n    else:\n        return (sorted(l)[len(l) // 2 - 1] + sorted(l)[len(l) // 2]) / 2.0\n",
        "test": "assert     median([1]) == 1"
    },
    {
        "number": 48,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return text == text[::-1]",
        "test": "assert     is_palindrome('radar') == True"
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    r = 1\n    while n:\n        if n & 1:\n            r = (r * n) % p\n        n = n >> 1\n    return r\n",
        "test": "assert     modp(4, 5) == modp(4, 5) == modp(4, p=5) == modp(4, p=5)"
    },
    {
        "number": 50,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert         decode_shift(\"stefan\")!= \"steffan\""
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    vowels = \"aeiou\"\n    res = \"\"\n    for c in text:\n        if c not in vowels:\n            res += c\n    return res\n    \ndef get_text():\n    \"get_text is a function that takes no argument and returns string.\"\n    return raw_input(\"Enter some text: \")\n",
        "test": "assert     remove_vowels(\"\")    == \"\",    \"remove_vowels('hello world') is not correct\""
    },
    {
        "number": 52,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    for e in l:\n        if e < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3, 4, 5, 6], 5) is False"
    },
    {
        "number": 53,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    return x + y\n",
        "test": "assert     add(5, 5) == 10"
    },
    {
        "number": 54,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n",
        "test": "assert     not same_chars('app', 'peach')"
    },
    {
        "number": 55,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert         fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    result = []\n    for c in brackets:\n        if c == \"<\":\n            result.append(c)\n        elif c == \">\" and result!= []:\n            result.pop()\n    return result == []\n",
        "test": "assert not correct_bracketing(\"<><<><\")"
    },
    {
        "number": 57,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            return False\n    return True\n",
        "test": "assert     monotonic([]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "test": "assert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']"
    },
    {
        "number": 59,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "test": "assert     largest_prime_factor(2) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n    \ndef sum_to_n_n(n):\n    \"\"\"sum_to_n_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_n(30)\n    465\n    >>> sum_to_n_n(100)\n    5050\n    >>> sum_to_n_n(5)\n    15\n    >>> sum_to_n_n(10)\n    55\n    >>> sum_to_n_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i*i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    bracket_pairs = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    for b in brackets:\n        if b in bracket_pairs:\n            stack.append(b)\n        elif b in bracket_pairs.values():\n            if stack == [] or bracket_pairs[stack.pop()]!= b:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\")\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    if len(xs) == 1:\n        return [0]\n    elif len(xs) == 2:\n        return [xs[1]]\n    elif len(xs) == 3:\n        return [xs[1] * 2, xs[0] * 2]\n    else:\n        return [xs[1] * i for i in range(len(xs) - 1)]\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 37,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n        if i == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('w') == 0"
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    shift %= len(str(x))\n    return (str(x) + str(x)[:shift])[-shift:]\n",
        "test": "assert     circular_shift(123456789, 0) == '123456789'"
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "    return s.count('mango') - s.count('apple')\n",
        "test": "assert     fruit_distribution('1,0,0',3) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            result.append([arr[i], i])\n    if result:\n        return sorted(result, key=lambda x: x[0])[0]\n    else:\n        return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    if len(lst) == 0:\n        return -1\n    max_freq = 0\n    max_int = -1\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            max_freq = lst.count(lst[i])\n            max_int = lst[i]\n        elif lst.count(lst[i]) > max_freq:\n            max_freq = lst.count(lst[i])\n            max_int = lst[i]\n    return max_int\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    if not lst:\n        return []\n    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round((a + b + c) * (a + b - c) * (a + c - b) / (8*(a+b+c)))\n",
        "test": "assert     triangle_area(3, 4, 7) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    return False\n",
        "test": "assert     will_it_fly([3,6,5],10) == False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            changes += 1\n            for j in range(i, len(arr)):\n                if arr[j] == i:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return changes\n",
        "test": "assert     smallest_change([1, 2, 1]) == 2"
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    # lst1, lst2 = sorted(lst1), sorted(lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) > len(lst2):\n            return lst2\n        else:\n            return lst1\n",
        "test": "assert     total_match([\"a\", \"b\", \"c\"],     [\"a\", \"b\", \"c\"])     == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 75,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(45) == False"
    },
    {
        "number": 76,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    if n==1:\n        return True\n    if n==0:\n        return False\n    if x==0:\n        return False\n    if x%n==0:\n        return True\n    return False\n",
        "test": "assert     not is_simple_power(4, 8)"
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    # codigo aqui\n    return a**(1./3.) == int(a**(1./3.))\n",
        "test": "assert     iscube(20) == False"
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "    if len(num) == 0:\n        return 0\n    elif len(num) == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(len(num)):\n            if int(num[i:i+1], 16) in [2, 3, 5, 7, 11, 13, 17]:\n                result += 1\n    return result\n",
        "test": "assert     hex_key('') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    if decimal == 0:\n        return '0'\n    elif decimal == 1:\n        return '1'\n",
        "test": "assert     decimal_to_binary(0) == '0'"
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    return len(s) >= 3 and s == s[0] + s[1] + s[2] and all(s[i]!= s[i+1] for i in range(len(s)-2))\n",
        "test": "assert     is_happy(\"bb\") is False"
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([]) == []"
    },
    {
        "number": 82,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    # List comprehension: [True for number in range(2,number) if number is prime]\n    return [True if number > 1 and number % index!= 0 else False for index in range(2,len(string))] == [True]*len(string)\n",
        "test": "assert     prime_length('123456789') == False"
    },
    {
        "number": 83,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    return bin(N).replace(\"0b\",\"\")\n",
        "test": "assert     solve(1) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n    return new_lst\n",
        "test": "assert add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))\n",
        "test": "assert     anti_shuffle(\" 1-2--3-4-\") == \"1-2--3-4-\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "    assert lst, \"Cannot work on empty lists\"\n    \n    # code goes here\n    lst_of_lst = lst[:]\n    \n    #print(lst_of_lst)\n    \n    for row in lst_of_lst:\n        row.sort()\n        row.reverse()\n    \n    #print(lst_of_lst)\n    \n    result = []\n    \n    for row in lst_of_lst:\n        for item in row:\n            if item == x:\n                result.append((lst_of_lst.index(row), row.index(item)))\n    \n    return result\n",
        "test": "assert     get_row([[0, 1, 1], [1, 2, 1]], 3) == [(1, 2), (1, 1), (0, 1)]"
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if not array:\n        return array\n    else:\n        for i in range(len(array)):\n            for j in range(i+1, len(array)):\n                if array[i] + array[j] == 0 or array[i] + array[j] % 2 == 0:\n                    array[i], array[j] = array[j], array[i]\n    return array\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    d = {'a':'b','b':'c','c':'d','d':'e','e':'f','f':'g','g':'h','h':'i','i':'j','j':'k','k':'l','l':'m','m':'n','n':'o','o':'p','p':'q','q':'r','r':'s','s':'t','t':'u','u':'v','v':'w','w':'x','x':'y','y':'z','z':'a'}\n    temp = ''\n    for i in s:\n        if i in d.keys():\n            temp += d[i]\n        else:\n            temp += i\n    return temp\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    d = {'a':'b','b':'c','c':'d','d':'e','e':'f','f':'g','g':'h','h':'i','i':'j','j':'k','k':'l','l':'m','m':'n','n':'o','o':'p','p':'q','q':'r','r':'s','s':'t','t':'u','u':'v','v':'w','w':'x','x':'y','y':'z','z':'a'}\n    temp = ''\n    for i in s:\n        if i in d.keys():\n            temp += d[i]\n        else:\n            temp += i\n    return temp\n    \n",
        "test": "assert encrypt(\"\") == \"\""
    },
    {
        "number": 90,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    # Your code here\n    if lst == []:\n        return None\n    smallest_num = lst[0]\n    for x in lst:\n        if x <= smallest_num:\n            smallest_num = x\n    smallest_num_index = lst.index(smallest_num)\n    if smallest_num_index == len(lst) - 1:\n        return None\n    return lst[smallest_num_index + 1]\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    if S.startswith(\"I\"):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     is_bored(\"\") == False"
    },
    {
        "number": 92,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) or (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n",
        "test": "assert     any_int(-1, 1.1, 1.1) == False"
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    return message.swapcase()\n",
        "test": "assert     encode('hello')    == 'HELLO'"
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    from math import log10\n    from functools import reduce\n    from itertools import chain\n    from math import ceil, floor\n    \n    isPrime = lambda x: all(x % i for i in range(2, int(x ** 0.5) + 1)) if x > 1 else False\n    \n    # map(lambda x: x % 2, range(2, int(floor(log10(max(lst)) + 1))))\n    \n    prime_lst = filter(isPrime, lst)\n    \n    if prime_lst:\n        return sum(map(lambda x: int(str(x)[0]), prime_lst))\n    else:\n        return 0\n",
        "test": "assert     int('57') == 57"
    },
    {
        "number": 95,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if key.isupper():\n            return False\n    for key in dict:\n        if key.islower():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    if n < 0:\n        return []\n    prime_nums = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            prime_nums.append(i)\n    return prime_nums",
        "test": "assert     count_up_to(0)         == []"
    },
    {
        "number": 97,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    a = str(a)\n    b = str(b)\n    c = len(a)\n    d = len(b)\n    if c>d:\n        b = \"0\"*(c-d) + b\n    else:\n        a = \"0\"*(d-c) + a\n    a = int(a)\n    b = int(b)\n    ans = 0\n    for i in range(c):\n        ans += a // (10 ** i) * (b // (10 ** i))\n    return ans\n    ",
        "test": "assert     multiply(1,1) == 1"
    },
    {
        "number": 98,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n                num_vowels += 1\n    return num_vowels\n",
        "test": "assert     (count_upper(\"\") == 0)"
    },
    {
        "number": 99,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    value = float(value)\n    if value == int(value):\n        return int(value)\n    else:\n        if value > 0:\n            return int(value + 0.5)\n        else:\n            return int(value - 0.5)\n",
        "test": "assert     closest_integer(\"15\") == 15"
    },
    {
        "number": 100,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [n]\n    elif n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n] + make_a_pile(n - 2)\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    # initialize array of words\n    words = []\n    # split string on spaces and commas\n    s = s.split(',')\n    # for each word, add it to the array\n    for word in s:\n        words.append(word.strip())\n    return words\n",
        "test": "assert     words_string(\"hello\")     == [\"hello\"]"
    },
    {
        "number": 102,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    return -1\n",
        "test": "assert     choose_num(10, 0) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    if m < n:\n        return -1\n    avg = (n + m) // 2\n    return int(bin(avg)[2:])\n",
        "test": "assert     rounded_avg(1, 0) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([1,3,5,7,9]) == [1,3,5,7,9]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "    one_to_nine = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    arr.sort()\n    arr.reverse()\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    #\n    # Your code here\n    #\n    #\n    def fact(n):\n        if n <= 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    return [fact(i) if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]\n",
        "test": "assert     [f(i) == int(math.factorial(i)) for i in range(100)]"
    },
    {
        "number": 107,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    result = (0, 0)\n    for i in range(1, n):\n        if str(i) == str(i)[::-1] and int(str(i)[::-1]) % 2 == 0:\n            result = (result[0] + 1, result[1])\n        if str(i) == str(i)[::-1] and int(str(i)[::-1]) % 2 == 1:\n            result = (result[0], result[1] + 1)\n    return result\n",
        "test": "assert     even_odd_palindrome(0) == (0, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            num_str = str(i)\n            num_sum = 0\n            for i in num_str:\n                num_sum += int(i)\n            if num_sum > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    # To perform atmost n right shift operations to get non-decreasing order\n    # we have to find out if the array is sorted or not\n    # we will find out if the array is sorted by comparing the element\n    # with the previous element (arr[i] > arr[i-1])\n    # if yes, we will do a right shift operation to array\n    # else, we will have to go back to the beginning and do a left shift operation\n    # to the array\n    # if the array is sorted then return True\n    # else return False\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            # if we shift back the array and we get non-decreasing\n            # then we are done\n            arr = arr[i:]+arr[:i]\n            break\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    elif lst1[0] % 2!= 0 or lst2[0] % 2!= 0:\n        return \"NO\"\n    else:\n        for i in range(1,len(lst1)):\n            if lst1[i] % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert     exchange([1,3,5,7], [2,4,6,8]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    test = test.split()\n    dic = {}\n    for s in test:\n        dic[s] = dic.get(s,0) + 1\n    return dic\n",
        "test": "assert     histogram(\"\") == {}"
    },
    {
        "number": 112,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    output = []\n    s = s.lower()\n    c = c.lower()\n    for i in s:\n        if i in c:\n            s = s.replace(i,'',1)\n            c = c.replace(i,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    return (s,False)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     reverse_delete('','') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "    return [len([i for i in s if int(i)%2 == 1]) for s in lst]\n",
        "test": "assert     [1] == odd_count(['1'])"
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    if not nums:\n        return 0\n    sub_sum = sum(nums)\n    if sub_sum == 0:\n        return 0\n    max_val = max(nums)\n    min_sum = sub_sum\n    n = len(nums)\n    for i in range(n):\n        sub_sum = sub_sum - nums[i] + max_val\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    print(n,m)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                #print(i,j)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = max(grid[i-1][j], grid[i][j-1])\n    print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= 0:\n                return -1\n    return 0\n",
        "test": "assert     max_fill([[0]], 0) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    return sorted([-i for i in arr if i < 0] + [i for i in arr if i >= 0])\n",
        "test": "assert     sort_array([1,1,1,1]) == [1,1,1,1]"
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    import string\n    vowels = \"aeiouAEIOU\"\n    result = []\n    if not s:\n        return result\n    for word in s.split():\n        count = 0\n        for c in word:\n            if c in string.ascii_lowercase:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n    \n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4)) # [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3)) # [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2)) # []\n    print(select_words(\"Hello world\", 4)) # [\"world\"]\n    print(select_words(\"Uncle sam\", 3)) # [\"Uncle\"",
        "test": "assert     select_words(\"\", 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    # words = ['a', 'e', 'i', 'o', 'u']\n    # words = [w for w in words if w.isalpha()]\n    # words = [w for w in words if len(w) > 1]\n    \n    # words = list(filter(lambda x: len(x) > 1, words))\n    # print(words)\n    \n    for i in range(len(word) - 1, 0, -1):\n        # print(i, word[i])\n        if word[i] in vowels:\n            return word[i]\n    return ''\n",
        "test": "assert     get_closest_vowel(\"t\") == \"\", \"t\""
    },
    {
        "number": 119,
        "max_answer_num": 26,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    # Brute Force\n    def is_balanced(lst):\n        if len(lst) % 2!= 0:\n            return False\n        for i in range(len(lst)//2):\n            if lst[i]!= lst[-1-i]:\n                return False\n        return True\n    for i in range(len(lst[0])):\n        for j in range(len(lst[1])):\n            new_lst = [lst[0][:i]+lst[1][j]+lst[0][i+1:],lst[1][:j]+lst[0][i]+lst[1][j+1:]]\n            if is_balanced(new_lst):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['(()', '()))']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    \"\"\"\n    if arr is None or len(arr) < 1:\n        return []\n    elif len(arr) < k:\n        return sorted(arr)\n    else:\n        max_arr = []\n        for i in range(len(arr) - k + 1):\n            max_arr.append(max(arr[i:i+k]))\n        return max_arr\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([], 0) == []"
    },
    {
        "number": 121,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2])\n",
        "test": "assert     solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    return sum([x for x in arr[:k] if len(str(x)) <= 2])\n",
        "test": "assert     add_elements([], 0) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    n = int(n)\n    odds = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3*n + 1\n        odds.append(n)\n    return odds\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    if not date:\n        return False\n",
        "test": "assert     not valid_date(\"1-2-2014\")"
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('I love you') == ['I', 'love', 'you']"
    },
    {
        "number": 126,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    if len(lst) <= 1: return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    a = interval1[0]\n    b = interval1[1]\n    c = interval2[0]\n    d = interval2[1]\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a >= c and b <= d:\n        return \"YES\"\n    elif a <= c and b >= d:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 3)) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if len(arr) == 0:\n        return None\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n    return product\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "    if len(grid) == 1:\n        return grid[0]\n    if k == 1:\n        return grid[0]\n",
        "test": "assert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 1) == [1, 1, 1, 1, 1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "    res = [1]\n    fib1, fib2, fib3 = 1, 2, 3\n    for i in range(1, n + 1):\n        if i == 1:\n            res.append(fib1)\n        elif i == 2:\n            res.append(fib2)\n        elif i == 3:\n            res.append(fib3)\n        else:\n            fib1, fib2, fib3 = fib2, fib3, fib3 + fib2 + fib1\n            res.append(fib3)\n    return res\n",
        "test": "assert tri(5) == tri(4) + tri(3) + tri(6) == 2 + 3 + 4 + 5 + 6 == 8 + 9 + 10 == 15"
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    if n < 10:\n        return n\n    if n % 10 == 0:\n        return 0\n    s = 0\n    while n > 0:\n        if n % 2 == 1:\n            s += n % 10\n        n /= 10\n    return s\n",
        "test": "assert     digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False if stack else True\n",
        "test": "assert     is_nested('(])') == False"
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return sum( [int(math.ceil(i))**2 for i in lst])\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    return (txt[-1].isalpha() and txt[-1]!= \" \" and txt[-1]!= \".\")\n    #pass\n",
        "test": "assert     check_if_last_char_is_a_letter('Hello World!!') == False"
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    # Sort array to get a list of values that can be compared\n    arr.sort()\n    # Loop over array elements (starting with index = 1)\n    for i in range(1, len(arr)):\n        # If current element is greater than the previous element then the\n        # previous element can't be in the array because the next element is\n        # greater than the previous element. The array can't be arranged\n        # because the next element is greater than the current element.\n        if arr[i] > arr[i - 1]:\n            return -1\n    # If there is a single element in the array, then the last element is\n    # the largest element, therefore return the index of the last element\n    return arr[-1]\n",
        "test": "assert     can_arrange([1, 2, 3, 4, 5, 5]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    return None, None",
        "test": "assert     largest_smallest_integers([])                     == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    if isinstance(a, float):\n        return a if a > b else b\n    elif isinstance(a, str):\n        a = a.replace(',', '.')\n        a = a.replace('.', ',')\n        return float(a)\n    elif isinstance(a, int) or isinstance(a, str):\n        return None\n    else:\n        return a\n",
        "test": "assert     (compare_one(1.0, -1.0) == 1.0)"
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    return (n % 2 == 0 and n / 2 + 2 * n % 2 == n / 2)\n",
        "test": "assert     not is_equal_to_sum_even(3)"
    },
    {
        "number": 139,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    factorial = 1\n    for x in range(n):\n        factorial = factorial * (n - x)\n    return factorial\n",
        "test": "assert     special_factorial(4) == 24"
    },
    {
        "number": 140,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    import re\n    text = re.sub(r'\\s+', '_', text)\n    if text.count(' ') > 2:\n        text = re.sub(r'\\s+', '-', text)\n    return text\n    \ndef generate_id(text, a_id_map):\n    \"\"\"\n    Given a text, generate a unique id, which is a number \n    that will not collide with other ids used in the code. \n    \n    If an id is not available, then the id is -1\n    \n    generate_id(\"a\", [3, 2, 1, -1]) == \"1\"\n    generate_id(\"b\", [3, 2, 1, -1]) == \"2\"\n    generate_id(\"c\", [3, 2, 1, -1]) == \"3\"\n    generate_id(\"a\", [3, 2, 1, -1]) == \"4\"\n    \"\"\"\n    id = -1\n    while id in a_id_map:\n        id += 1\n    return id\n    \ndef format_attrs(attrs, a_id_map):\n    \"\"\"\n    Given a dictionary of attributes, \n    return the text of the HTML tag corresponding to the attributes.\n    \n    format_attrs({'id':'a'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    \"\"\"\n    import re\n    \n    s = ''\n    for k, v in attrs.items():\n        if k == 'id':\n            s += \" id=\\\"{0}\\\"\".format(v)\n        elif k == 'class':\n            s += \" class=\\\"{0}\\\"\".format(v)\n        else:\n            s += \" {0}=\\\"{1}\\\"\".format(k, v)\n    if s!= '':\n        s ='' + s\n    \n    \n    return s\n    \ndef escape_html(s):\n    \"\"\"\n    Escape HTML characters that can't be represented in HTML strings, \n    like &, <, and >\n    \n    escape_html(\"Example\") == \"Example\"\n    escape_html(\"Example<script>alert('Hello');</script>\") == \"Example&lt;script&gt;alert('Hello');&lt;/script&gt;\"\n    \"\"\"\n    import re\n    return re.sub(r'&(?![A-Za-z]+[0-9]*;|#[0-9]+;|#x[0-9A-F]+;)', '&amp;', s)\n",
        "test": "assert         fix_spaces('') == ''"
    },
    {
        "number": 141,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    import re\n    if re.search(r'\\d', file_name):\n        return 'No'\n    if re.search(r'\\.{2,}', file_name):\n        return 'No'\n    if re.search(r'^[a-zA-Z]', file_name):\n        return 'No'\n    if re.search(r'\\.txt$|\\.exe$|\\.dll$', file_name):\n        return 'Yes'\n",
        "test": "assert     file_name_check('a123.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i]**2\n        elif i%4 == 0:\n            sum += lst[i]**3\n    return sum\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "    return ''.join(sorted(set(sentence.split()), key=len)[::-1])\n",
        "test": "assert     words_in_sentence(\"Hello\") == 'Hello'"
    },
    {
        "number": 144,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    return True\n",
        "test": "assert     simplify(\"1/2\", \"1/2\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    nums = sorted(nums)\n    return nums\n",
        "test": "assert     order_by_points([]) == [], \"Test 4\""
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    return len([num for num in nums if num > 10 and (num % 10 // 1 + num % 10 // 3 + num % 10 // 5 + num % 10 // 7 + num % 10 // 9) * 2 == num])\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5]) == 0, \"incorrect\""
    },
    {
        "number": 147,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n    planets = []\n    for name in PLANETS:\n        if name!= planet1 and name!= planet2:\n            if (PLANETS[name].orbit.intersects(PLANETS[planet1].orbit) and PLANETS[name].orbit.intersects(PLANETS[planet2].orbit)):\n                planets.append(name)\n    planets.sort()\n    return tuple(planets)\n",
        "test": "assert     bf('mars', 'jupiter')         == ('mars', 'jupiter')"
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    return sorted(lst, key=lambda word: (len(word), word))\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    \n    if n % x == 0 or n % y == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(5, 4, 4) == 4"
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    # Your code here\n    if not lst:\n        return 0\n    \n    return sum([a*a for a in lst if a%2 and a>0])\n",
        "test": "assert double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return [abs(score-guess) for score, guess in zip(game,guess)]\n",
        "test": "assert     compare([1,2,3], [1,2,3]) == [0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    \n    strongest_extension = extensions[0]\n    strength = len(extensions[0]) - len(extensions[0].lower())\n    for extension in extensions:\n        ext_strength = len(extension) - len(extension.lower())\n        if ext_strength > strength:\n            strongest_extension = extension\n            strength = ext_strength\n    return \"{0}.{1}\".format(class_name, strongest_extension)\n",
        "test": "assert     Strongest_Extension('Candy', ['Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum']) == 'Candy.Yum'"
    },
    {
        "number": 154,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    a = a.lower()\n    b = b.lower()\n    for i in range(len(a)):\n        if b in a[i:]:\n            return True\n        if b in a[i:]+a[:i]:\n            return True\n    return False\n",
        "test": "assert not cycpattern_check(\"abc\", \"bcd\")"
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    if num < 0:\n        num *= -1\n    if num == 0:\n        return 0, 0\n    is_odd = 1\n    count_of_odd = 0\n    count_of_even = 0\n    while num:\n        if is_odd:\n            if num % 2 == 0:\n                count_of_even += 1\n            else:\n                count_of_odd += 1\n        else:\n            if num % 2 == 1:\n                count_of_even += 1\n            else:\n                count_of_odd += 1\n        is_odd = not is_odd\n        num //= 10\n    return count_of_even, count_of_odd\n",
        "test": "assert     even_odd_count(0) == (0, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"integer must be between 1 and 1000\")\n    to_roman = {1000:'m', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n                50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for i in to_roman.keys():\n        quotient, remainder = divmod(number, i)\n        result += to_roman[i] * quotient\n        number -= i * quotient\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == \"I\""
    },
    {
        "number": 157,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    # Uncomment to test.\n    # assert right_angle_triangle(3, 4, 5) == True\n    # assert right_angle_triangle(1, 2, 3) == False\n    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    return sorted(words, key=lambda x:len(set(x)))[-1]\n",
        "test": "assert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\"]) == \"elephant\""
    },
    {
        "number": 159,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if remaining == 0:\n        return [need, 0]\n    if number >= need:\n        return [number - need, remaining - need]\n    else:\n        return [number, remaining - number]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    # Write your code here.\n    # use for loop to get the result\n    result = None\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = operand[i] + operand[i+1]\n        elif operator[i] == '-':\n            result = operand[i] - operand[i+1]\n        elif operator[i] == '*':\n            result = operand[i] * operand[i+1]\n        elif operator[i] == '//':\n            result = operand[i] // operand[i+1]\n        elif operator[i] == '**':\n            result = operand[i] ** operand[i+1]\n    return result\n",
        "test": "assert     do_algebra([\"//\"], [1, 2, 3]) == 1 // 2 // 3"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return \"\".join([s.lower() if s.isalpha() else s for s in s])[::-1]\n",
        "test": "assert     solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    if text is None:\n        return None\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    integers = []\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n",
        "test": "assert     generate_integers(8, 11) == [8, 10]"
    }
]