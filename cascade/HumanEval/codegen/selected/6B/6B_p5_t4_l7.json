[
    {
        "number": 0,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert         has_close_elements([0.0, 1.0, 2.0, 3.0], 0.1) == False",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    nested = []\n    paren_string = paren_string.replace(' ', '')\n    current_sub = []\n    level = 0\n    for i in paren_string:\n        if i == '(':\n            if level == 0:\n                current_sub.append(i)\n            level += 1\n        elif i == ')':\n            current_sub.append(i)\n            level -= 1\n            if level == 0:\n                nested.append(''.join(current_sub))\n                current_sub = []\n    return nested\n",
        "test": "assert     separate_paren_groups(\"a (b(c(d)e)f)g)h\") == [\"a\", \"(b(c(d)e)\", \"f\", \"g)\", \"h\"]",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return number - math.floor(number)\n",
        "test": "assert     truncate_number(0.123) == 0.123",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    return any(op < 0 for op in operations)\n",
        "test": "assert     below_zero([1,2,3,4,5,6,7,8,9,10]) == False",
        "num_ids": 3351,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    if not numbers:\n        raise ValueError('MAD requires at least one element.')\n    mean_value = sum(numbers) / len(numbers)\n    return sum(abs(num - mean_value) for num in numbers) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([10, 10, 10, 10, 10]) == 0",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if len(numbers) % 2 == 1:\n        result.append(numbers[-1])\n    return result\n",
        "test": "assert     intersperse( [1,2,3], 4)         == [1,1,2,2,3,3]",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    # Splitting on spaces in string\n    paren_string = paren_string.split()\n",
        "test": "assert     parse_nested_parens(\"(()(()))\") == [1, 2]",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring(['a', 'b', 'c'], 'c') == ['c']",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    sum = 0\n    product = 1\n    for i in range(len(numbers)):\n        sum += numbers[i]\n        product *= numbers[i]\n    return sum, product\n    \n",
        "test": "assert     (sum_product([1,2,3]) == (6, 6))",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    result = []\n    i = 0\n    while i < len(numbers):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[-1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[-1])\n        i += 1\n    return result\n",
        "test": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if len(string) < 1:\n        return ''\n    elif is_palindrome(string):\n        return string\n    else:\n        suffix = get_longest_postfix_palindrome(string)\n        suffix_reverse = suffix[::-1]\n        return string + suffix_reverse\n",
        "test": "assert     is_palindrome(\"racecar\") == True",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor('0', '0') == '0'",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if strings == []:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n",
        "test": "assert     longest([]) is None",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(4, 8) == 4",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    res = []\n    for i in range(len(string)):\n        res.append(string[0:i+1])\n    return res\n",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    result = ''\n    for i in range(n+1):\n        result = result + str(i) +''\n    return result[:-1]\n",
        "test": "assert     string_sequence(3) == \"012\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"ABC\") == 3",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    import re\n    notes = [re.findall(r'o|\\d+', line) for line in music_string.split('\\n') if line!='' and line!= '']\n    result = []\n    for line in notes:\n        if line == []:\n            result.append(0)\n        else:\n            result.append(len(line) - 1)\n    return result\n",
        "test": "assert     parse_music('\"o|o|o|o\"'",
        "num_ids": 2952,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    start = 0\n    count = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1\n",
        "test": "assert     how_many_times(\"abcd\", \"cd\") == 1, \"Expected 1\"",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers(\"one\") == \"one\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    best_diff = float('inf')\n    closest_nums = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < best_diff:\n                best_diff = diff\n                closest_nums = (numbers[i], numbers[j])\n    return closest_nums\n",
        "test": "assert     find_closest_elements([1, 3, 5, 7]) == (1, 3)",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    n = len(numbers)\n    m = max(numbers)\n    if m == 0:\n        return [0.0] * n\n    return [float(x) / m for x in numbers]\n",
        "test": "assert     rescale_to_unit([0.0, 0.5, 1.0]) == [0.0, 0.5, 1.0]",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     isinstance(filter_integers([1, 2, \"3\", 4]), list)",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello world\") == 11",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    max_divisor = n - 1\n    while max_divisor > 1:\n        if n % max_divisor == 0:\n            return max_divisor\n        else:\n            max_divisor -= 1\n    return n\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    if n < 0:\n        raise ValueError(\"Argument must be a non-negative integer.\")\n    if n == 1:\n        return [1]\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            factors.append(d)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5, 6, 6, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"abc\")     == \"ABC\"",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if strings == []:\n        return ''\n    else:\n        return ''.join(strings)\n",
        "test": "assert     concatenate(['a', 'b', 'c']) == 'abc'",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['abcd', 'abc', 'xyz', 'zzz'], 'd') == []",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive(list()) == []",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if len(xs) % 2!= 0 or max(xs) == 0:\n        return None\n    else:\n        pivot = max(xs)\n        return -pivot * math.pow(poly(xs[:len(xs) - 1], pivot), -1)\n",
        "test": "assert     poly([-1, 1], 1) == 0",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    l_prime.sort()\n    return l_prime\n",
        "test": "assert     sort_third([1,1,1,1])        == [1,1,1,1], \"Test3\"",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([]) == []",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    max_number = l[0]\n    for i in l:\n        if i > max_number:\n            max_number = i\n    return max_number\n",
        "test": "assert     max_element([1, 2, 3]) == 3",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return l[1::2] + l[0::2]\n",
        "test": "assert     sort_even([]) == [], \"fail the test\"",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    s = s.strip()\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"abca\")) == \"abca\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return get_fib_nth(n)\n",
        "test": "assert     prime_fib(40) == 10946",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return len([x for x in l if -x in l]) == 3",
        "test": "assert     not triples_sum_to_zero([1, 2, 3])",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(2) == 0",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        l2.append(l[i] + 1)\n    return l2\n",
        "test": "assert     incr_list([1,2,3,4]) == [2,3,4,5]",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([2, 4, -6, 3, -2, -5, 0, 7, -5])",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    convert = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base:\n        return convert[x]\n    else:\n        return change_base(x // base, base) + convert[x % base]\n",
        "test": "assert     change_base(8, 10) == \"8\"",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return.5 * a * h\n",
        "test": "assert     triangle_area(2,3) == 2*3/2",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0)    == 0",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n//2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid-1]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "test": "assert     is_palindrome(\"abba\") == True",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(0, 10) == 1",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert         decode_shift(\"t e n t y\") == \"teni\"",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    vowels = ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U', 'y', 'Y', 'z', 'Z']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "test": "assert     remove_vowels('aoeu') == '', 'Failed Test 4'",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    return all(n < t for n in l)\n",
        "test": "assert     below_threshold([2,2,2,3,4], 3) == False",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return all(x == y for x, y in zip(s0, s1))\n",
        "test": "assert     not same_chars('abcd', 'abce')",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    opening_brackets = [1,2,3,4,5,6]\n    closing_brackets = [\")\", \"]\", \"}\", \">\", \"<\", \"[\"]\n    b = brackets[1:-1]\n    for b1, b2 in zip(opening_brackets, closing_brackets):\n        if b[:b1]!= b2:\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<(\") == False",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([1,2,3])",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common([], [1, 2, 3, 4, 5]) == []",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    p = 2\n    while p ** 2 <= n:\n        if n % p == 0:\n            n //= p\n        else:\n            p += 1\n    return n\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return sum(range(n + 1))\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    b = []\n    for c in brackets:\n        if c == \"(\":\n            b.append(c)\n        elif c == \")\":\n            if len(b) == 0:\n                return False\n            else:\n                b.pop()\n    return len(b) == 0\n",
        "test": "assert     correct_bracketing(\")(\") == False",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return [n * (n - 1) for n in xs[1:]] + [xs[0]]\n",
        "test": "assert     derivative([1, 2, 3, 4, 5, 6, 7]) == [0, 0, 0, 0, 0, 0, 0]",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowels_count = 0\n    for i in s:\n        if i in vowels:\n            vowels_count += 1\n        if i == 'y':\n            if s[-1] == 'y':\n                vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count('apple') == 2",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    x = str(x)\n    y = x[shift:] + x[:shift]\n    if len(y) > len(x):\n        y = y[len(x):] + y[:len(x)]\n    return y\n",
        "test": "assert     circular_shift(12345, 3) == '45123'",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return sum([ord(c)-64 for c in s if ord(c)>=65 and ord(c)<=90])\n",
        "test": "assert     digitSum('a98765') == 97",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return s.count('mango') - s.count('apple') - s.count('orange')\n",
        "test": "assert     fruit_distribution('6 10', '1 2') == 0,     '6 10 => 0'",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    # Key: The smallest even value, and the index of the smallest even value.\n    # Value: The node with the smallest even value\n    nodes = {'even': [], 'odd': []}\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            nodes['even'].append([arr[i], i])\n        else:\n            nodes['odd'].append([arr[i], i])\n    \n    # Sort the nodes by value, ascending.\n    nodes['even'] = sorted(nodes['even'])\n    nodes['odd'] = sorted(nodes['odd'])\n    \n    # Check if there are any nodes with even values.\n    if nodes['even'] == []:\n        return []\n    \n    # If there are more than one node with even value, then the first is the smallest\n    # if there are two nodes with the same smallest even value, then the first is the smallest\n    if len(nodes['even']) > 1 and nodes['even'][0] == nodes['even'][1]:\n        return [nodes['even'][0][0], nodes['even'][0][1]]\n    else:\n        return [nodes['even'][0][0], nodes['even'][0][1]]\n",
        "test": "assert     [] == pluck( [ ] )",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    max_val = max(lst)\n    max_val_count = lst.count(max_val)\n    return max_val if max_val_count >= max_val else -1\n",
        "test": "assert     search([2, 2, 2, 2, 2, 2, 2]) == 2",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    lst.sort()\n    lst.reverse()\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return round(((a + b + c) * (a + b - c) * (a - b + c) * (a - b - c)) ** 0.5, 2) if a + b > c and a + c > b and b + c > a else -1\n",
        "test": "assert     triangle_area(12, 22, 4) == -1.0",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    import re\n    if len(q) % 2!= 0:\n        q.append(0)\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     not will_it_fly(['a', 'b', 'a', 'c'], 9)",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 2\n    odd_num_seen = False\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1 and not odd_num_seen:\n            odd_num_seen = True\n            first_odd_index = i\n        elif arr[i] % 2 == 1:\n            return 1\n    if odd_num_seen:\n        return 2\n    else:\n        return 1 + smallest_change(arr[:first_odd_index]) + smallest_change(arr[first_odd_index+1:])\n",
        "test": "assert     smallest_change([1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 1",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert         total_match(['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if a < 100:\n        return True\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(13) == True",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return x == n or x % n == 0",
        "test": "assert     is_simple_power(14, 3) is False",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return a**3 == int(a)\n",
        "test": "assert iscube(0) == True",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return hex_count(num, 2, 13)\n",
        "test": "assert     hex_key(\"2\") == 0",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    pass\n",
        "test": "assert     decimal_to_binary(2) == '10' * len('10'),     '2 -> \"10\" * 8'",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
        "test": "assert     is_happy('q') == False",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    return [letter_grade(grade) for grade in grades]\n",
        "test": "assert     numerical_letter_grade([\"4.0\", \"> 3.7\", \"> 3.3\", \"> 3.0\", \"> 2.7\", \"> 2.3\", \"> 2.0\", \"> 1.7\", \"> 1.3\", \"> 1.0\", \"> 0.7\", \"> 0.0\", \"0.0\"]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    length = len(string)\n    if length == 0:\n        return False\n    if length == 1:\n        return True\n    if length == 2:\n        return True\n    if length == 3:\n        return True\n    if length % 2 == 0 or length % 3 == 0:\n        return False\n    i = 5\n    while i * i <= length:\n        if length % i == 0 or length % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n",
        "test": "assert     prime_length(\"This is a string\") == False",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 9\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 8\n    else:\n        return sum([starts_one_ends(n-1), 8*(n-3)])\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    binary = ''\n    while N > 0:\n        # use the mod operator to get the last digit\n        binary += str(N % 2)\n        N //= 2\n    return binary[::-1]",
        "test": "assert     solve(1)    == '1'",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    index=0\n    while index < len(lst):\n        if lst[index]%2 == 0:\n            index += 2\n        else:\n            lst[index] += lst[index+1]\n            index += 2\n    return lst\n",
        "test": "assert add([])==[]",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    # remove white spaces\n    s = s.split(' ')\n    result = ''\n    for word in s:\n        # create a list of chars in the word\n        l = [c for c in word]\n        # sort the list based on ascii value\n        l.sort()\n        # convert back to a word\n        word = ''.join(l)\n        # add word to the result\n        result += word +''\n    # return result as a string\n    return result[:-1]",
        "test": "assert     anti_shuffle(\"The anti-shuffle is not implemented\") == \"The anti-shuffle is not implemented\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    result = []\n    for row in lst:\n        if x in row:\n            result.append((lst.index(row), row.index(x)))\n    return sorted(result, key=lambda x: x[0])\n",
        "test": "assert get_row([(1, 3), (2, 4), (3, 5)], 7) == []",
        "num_ids": 1827,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    left = 0\n    right = len(array)-1\n    while left <= right:\n        sum_array = array[left] + array[right]\n        if sum_array % 2 == 0:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n            right -= 1\n        else:\n            right -= 1\n    return array\n",
        "test": "assert     sort_array([])        == []",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = \"klmnopqrstuvwxyzabcdefghij\"\n    #print(\"Alphabet: \" + alphabet)\n    #print(\"Rotated Alphabet: \" + rotated_alphabet)\n    shifted_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    #print(\"Shifted Alphabet: \" + shifted_alphabet)\n    table = {}\n    for i in range(0, 26):\n        table[alphabet[i]] = shifted_alphabet[i]\n        table[shifted_alphabet[i]] = alphabet[i]\n    #print(\"Table: \" + str(table))\n    encrypted_alphabet = \"\"\n    for letter in s:\n        if letter in table:\n            encrypted_alphabet += table[letter]\n        else:\n            encrypted_alphabet += letter\n    return encrypted_alphabet\n",
        "test": "assert ",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1]\n",
        "test": "assert     next_smallest([1]) == None",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return S.count(\"I\")",
        "test": "assert     is_bored(\"I am not boring!\") == True",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        return x == y+z or x == z+y\n    return False\n",
        "test": "assert     any_int(3, 4, 5) == False",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    output = []\n    vowels = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 'u': '|'}\n    for char in message:\n        if char.lower() in vowels:\n            output.append(vowels[char.lower()])\n        else:\n            output.append(char)\n    return ''.join(output)\n",
        "test": "assert     encode('I L O V E') ==        'L I N I A E'",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    lst = [int(x) for x in lst]\n    largest_prime = 0\n    for number in lst:\n        while number!= 1:\n            if number % 2 == 0:\n                number /= 2\n            else:\n                largest_prime = max(number, largest_prime)\n                break\n    return sum(int(x) for x in str(largest_prime))\n",
        "test": "assert     10 == skjkasdkd([7, 19, 13, 37])",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i) is not str or type(dict[i]) is not str:\n                return False\n            else:\n                return True\n    \ndef check_dict_length(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the dictionary is empty.\n    Examples:\n    check_dict_length({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_length({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_length({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_length({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_length({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i) is not str or type(dict[i]) is not str:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({\"apple\": \"red\", \"banana\": \"yellow\", \"kiwi\": \"green\"}) == True, \"All keys in dictionary should be lower case\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return [x for x in range(2,n+1) if all([x%y!=0 for y in range(2,x)])]\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    def multiply_helper(a, b):\n        if b == 0:\n            return 0\n        elif b == 1:\n            return a\n        else:\n            return a + multiply_helper(a, b-1)\n    return multiply_helper(a,b)\n",
        "test": "assert     multiply(2, 3) == 6",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # Your code here\n    return sum(1 for index in range(len(s)) if s[index].isupper() and index % 2 == 0)\n",
        "test": "assert     count_upper(\"Mary had a little lamb.\") == 1",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    try:\n        int_value = int(float(value))\n        return int(round(int_value))\n    except ValueError:\n        return 0\n",
        "test": "assert     closest_integer(\"42\") == 42",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    result = []\n    start = 1\n    while start <= n:\n        result.append(start)\n        start = 2 * start\n    return result\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return s.split(\",\")",
        "test": "assert     words_string(\"a,b,c,d\")        ==    [\"a\", \"b\", \"c\", \"d\"]",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if x % 2 == 0 and y % 2 == 0:\n        return -1\n    else:\n        return x + (y - x) // 2\n",
        "test": "assert     choose_num(3, 5) == 4",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if m <= n:\n        return -1\n    return bin(int((m - n + 1)/2) + n)[2:]\n",
        "test": "assert     rounded_avg(3, 1) == -1",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return sorted([i for i in x if len(str(i)) % 2 == 1])\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    arr.reverse()\n    \n    numbers = [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\",\n        \"Eighteen\", \"Nineteen\",\n    ]\n    \n    new_arr = []\n    \n    for number in arr:\n        if number > 9 and number < 19:\n            new_arr.append(numbers[number - 10])\n        else:\n            new_arr.append(str(number))\n    \n    return new_arr\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"OneTwoThreeFourFiveSixSevenEightNine\"",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert     [f(i) == [sum(range(1, j)) for j in range(1, i)] for i in range(1, 10)]",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if n < 2: return (0, 0)\n    even = 0\n    odd = 0\n    for i in xrange(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(1)     == (0, 0)",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > 0:\n                count += 1\n        else:\n            digit_sum = sum(int(digit) for digit in str(num * -1))\n            if digit_sum > 0:\n                count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    # base case\n    if len(arr) == 0:\n        return True\n    \n    # finding the minimum and maximum value in array\n    min_val, max_val = min(arr), max(arr)\n    \n    # checking the sortedness of the given array\n    if max_val == min_val:\n        return True\n    \n    # if the max and min value is same then the array can be sorted\n    if max_val == min_val+1:\n        return True\n    \n    # finding the minimum and maximum element in the array\n    min_element, max_element = min(arr), max(arr)\n    \n    # checking the non-decreasing order\n    if max_element == min_element:\n        return True\n    \n    # if the array is not non-decreasing, we can find a middle element from\n    # the sorted array\n    if max_element == min_element+1:\n        return True\n    \n    return False\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0:\n        return \"YES\"\n    elif sum(lst1) % 2!= 0 or sum(lst2) % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5], [1, 2, 3, 5, 7]) == \"NO\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    # your code here\n    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    return d\n",
        "test": "assert     histogram('cde') == {'c': 1, 'd': 1, 'e': 1}",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    \n    s_list = list(s)\n    c_list = list(c)\n    for i in range(len(s)):\n        if s_list[i] == c_list[-1]:\n            s_list[i] = ''\n    s_list = ''.join(s_list)\n    if s_list == s_list[::-1]:\n        return (s_list,True)\n    else:\n        return (s_list,False)\n",
        "test": "assert     reverse_delete('','mar') == ('', True)",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    if not isinstance(lst,list):\n        return \"Input is not a list.\"\n    result = []\n    for i in lst:\n        if i.isdigit():\n            result.append(\"the number of odd elements \" + str(len(i)) + \"n the str\" + str(lst.index(i)) + \" of the \" + str(lst.index(i)) + \"nput.\")\n        else:\n            result.append(\"the number of odd elements 1n the str\" + str(lst.index(i)) + \" of the \" + str(lst.index(i)) + \"nput.\")\n    return result\n",
        "test": "assert ",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) > 0:\n                return sum(nums[i:j+1])\n    return 0\n",
        "test": "assert     minSubArraySum([1, 2, 3]) == 1",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    n_rows, n_cols = len(grid), len(grid[0])\n    buckets = [[0 for _ in range(n_cols)] for _ in range(n_rows)]\n    for row in range(n_rows):\n        for col in range(n_cols):\n            if grid[row][col] == 0:\n                continue\n            buckets[row][col] = min(capacity, buckets[row][col])\n    count = 0\n    for row in range(n_rows):\n        for col in range(n_cols):\n            if buckets[row][col] > 0:\n                count += 1\n                buckets[row][col] -= 1\n    return count\n",
        "test": "assert max_fill([[0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 3) == 0",
        "num_ids": 2525,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))\n",
        "test": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254])",
        "num_ids": 2334,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return [x for x in s.split(\" \") if len(x) == n and is_consonant(x, n)]\n",
        "test": "assert     select_words('', 3) == []",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    \n    if len(word) == 0:\n        return \"\"\n    \n    last_char = word[-1]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    if last_char.lower() in vowels:\n        return last_char\n    \n    start_index = 0\n    end_index = len(word)\n    \n    while start_index < end_index - 1:\n        vowel = word[start_index]\n        if vowel.lower() in vowels:\n            return word[start_index]\n        start_index += 1\n    \n    return \"\"",
        "test": "assert     get_closest_vowel('happy') == 'a', \"Case 1: Passed\"",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    stk = []\n    for i in lst:\n        if i == ')':\n            if len(stk) > 0 and stk[-1] == '(':\n                stk.pop()\n            else:\n                return 'No'\n        else:\n            stk.append(i)\n    return 'Yes' if len(stk) == 0 else 'No'\n",
        "test": "assert     match_parens('())') == 'No', match_parens('())')",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([], 3) == []",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return sum([x for x in lst[::2] if x % 2])\n    ",
        "test": "assert     solution([0, 0]) == 0, solution([0, 0])",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if len(arr) < k:\n        return 0\n    return sum(arr[:k]) + add_elements(arr[k:], k)\n",
        "test": "assert     add_elements([], 10) == 0",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    odd_nums = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        odd_nums.append(n)\n    return sorted(odd_nums)\n",
        "test": "assert     get_odd_collatz(1)         == [1]",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    date_str = date.split('-')\n    if date_str[2][2] == '0':\n        date_str[2] = date_str[2][:2] + date_str[2][3:]\n    if len(date_str[0]) == 1:\n        date_str[0] = '0' + date_str[0]\n    if len(date_str[1]) == 1:\n        date_str[1] = '0' + date_str[1]\n    if date_str[2][2] == '0':\n        date_str[2] = date_str[2][:2] + date_str[2][3:]\n    if int(date_str[0]) > 31:\n        return False\n    if int(date_str[0]) == 0 or int(date_str[1]) > 12:\n        return False\n    if int(date_str[1]) > 31:\n        return False\n    if int(date_str[2][2]) > 30:\n        return False\n    if int(date_str[0]) == 0 or int(date_str[1]) == 0 or int(date_str[2][2]) > 29:\n        return False\n    return True\n",
        "test": "assert     valid_date('10-13-2016') == False",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    result = []\n    # TODO: Handle empty string\n    # TODO: Handle string with multiple spaces\n    # TODO: Handle string with a word with more than one letter\n    words = txt.split()\n    for word in words:\n        result.append(word)\n    return result\n",
        "test": "assert     split_words(\"Hello\") == ['Hello']",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n    \n",
        "test": "assert     not is_sorted([1, 2, 3, 5, 5, 4])",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n    \n    \n    \n    \n    ",
        "test": "assert     intersection((1, 3), (2, 4)) == \"YES\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    res = 1\n    for i in arr:\n        if i > 0:\n            res *= 1\n        elif i < 0:\n            res *= -1\n        else:\n            continue\n    return res\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    # if k == 0:\n    #     return []\n    # for i in range(len(grid)):\n    #     for j in range(len(grid[0])):\n    #         if grid[i][j] == k:\n    #             grid[i][j] = 0\n    #             if i + 1 < len(grid):\n    #                 grid[i + 1][j] = 0\n    #             if i > 0:\n    #                 grid[i - 1][j] = 0\n    #             if j + 1 < len(grid[0]):\n    #                 grid[i][j + 1] = 0\n    #             if j > 0:\n    #                 grid[i][j - 1] = 0\n    #             return grid\n    if k == 0:\n        return []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == k:\n                grid[i][j] = 0\n                if i + 1 < len(grid) and grid[i + 1][j] == 0:\n                    grid[i + 1][j] = k + 1\n                if i > 0 and grid[i - 1][j] == 0:\n                    grid[i - 1][j] = k + 1\n                if j + 1 < len(grid[0]) and grid[i][j + 1] == 0:\n                    grid[i][j + 1] = k + 1\n                if j > 0 and grid[i][j - 1] == 0:\n                    grid[i][j - 1] = k + 1\n                return grid\n    return grid\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6) == [1, 2, 3, 6, 5, 4, 7, 8, 9]",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    \n    if n == 0:\n        return [1]\n    res = [0, 1, 1, 2]\n    for i in range(3, n + 1):\n        res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    return res\n",
        "test": "assert     [0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 496, 732, 1664, 2882, 5760, 8748, 14325, 24883, 37107, 61625,     742542, 1074451, 1771153, 2865747, 4636898, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729877, 956722026041, 1548008755920, 2820519e61929, 48621294676683, 75616903088445, 10610744513314, 1837216828367, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729877, 956722026041, 1548008755920, 2820519e61929, 48621294676683, 75616903088445, 10610744513314, 1837216828367, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729877, 956722026041, 1548008755920] == tri(100)",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    product = 1\n    for i in range(n):\n        if n % 10 % 2:\n            product *= n % 10\n        n /= 10\n    return product\n",
        "test": "assert     digits(1) == 1",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    bracket_map = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n    }\n    stack = []\n    for char in string:\n        if char in bracket_map:\n            stack.append(char)\n        elif len(stack) == 0 or bracket_map[stack.pop()]!= char:\n            return False\n    return len(stack) == 0\n",
        "test": "assert     is_nested('hi') == False",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return sum([int(round(x)**2) for x in lst])\n",
        "test": "assert     sum_squares([0, 0, 0, 0]) == 0",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if len(txt) > 0:\n        txt = txt.rstrip()\n        if txt[-1].isalpha():\n            if not txt[-1].lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                return True\n    return False\n",
        "test": "assert     check_if_last_char_is_a_letter('Python') == True",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    sorted_arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if sorted_arr[i] < sorted_arr[i - 1]:\n            return i - 1\n    return -1\n",
        "test": "assert     can_arrange([0, 3, 4, 1, 8, 2, 7, 6, 5]) == -1",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    negative = []\n    positive = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    if len(negative) == 0:\n        return (None, None)\n    elif len(negative) == 1:\n        return (negative[0], positive[0])\n    else:\n        return (max(negative), min(positive))\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if isinstance(a, str):\n        if isinstance(b, str):\n            return max(a, b, key=len)\n        else:\n            return max(a, b)\n    elif isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return max(a, b)\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 1.1) == 1.1",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return n % 2 == 0 and sum(i for i in range(2, n, 2) if n - i in range(4, n + 1, 2)) == 0\n",
        "test": "assert     is_equal_to_sum_even(19) == False",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert     special_factorial(1)     == 1",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return text.replace(\" \", \"_\") if text.count(\" \") > 2 else text.replace(\" \", \"_\")\n",
        "test": "assert     fix_spaces(\"hello\") == \"hello\"",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    import re\n    def name_check(file_name):\n        if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"No\"\n        elif file_name[0] == \".\":\n            return \"No\"\n        elif file_name[1] == \".\":\n            return \"No\"\n        elif file_name[-4:]!= \".txt\":\n            return \"No\"\n        elif file_name[-3:] == \"exe\":\n            return \"Yes\"\n        elif file_name[-3:] == \"dll\":\n            return \"Yes\"\n        elif file_name[-4:] == \".txt\" or file_name[-4:] == \".exe\" or file_name[-4:] == \".dll\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    return name_check(file_name)\n",
        "test": "assert     file_name_check('file.sdf') == 'No'",
        "num_ids": 1759,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    output = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            output += lst[i]**2\n        elif i % 4 == 0:\n            output += lst[i]**3\n    return output\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7]) == 30",
        "num_ids": 1738,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return''.join(filter(lambda word: len(word) > 1, sentence.split(' ')))\n",
        "test": "assert     words_in_sentence(\"Hello\") == \"Hello\"",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    a,b = x.split(\"/\")\n    a = int(a)\n    b = int(b)\n    if n.isdigit() and n!=\"0\" and n!=\"1\":\n        n = int(n)\n    else:\n        return False\n    if n==1 or n==-1:\n        return True\n    if n==0:\n        return False\n    if n<0:\n        n = abs(n)\n        sign = \"-\"\n    else:\n        sign = \"\"\n    x = int(a*n/b)\n    return sign+str(x)+\"/1\"\n",
        "test": "assert     not simplify('1/5', '5/5')",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    if not nums:\n        return []\n    sums = [sum(int(num) for num in str(num)) for num in nums]\n    return [nums[i] for i in sorted(range(len(nums)), key=lambda i: sums[i])]\n",
        "test": "assert     order_by_points([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    count = 0\n    for i in nums:\n        if i>10 and (i%10)%2==1 and (i/10)%2==1:\n            count+=1\n    return count\n",
        "test": "assert     specialFilter([0,1,2,3,4,5,6,7,8,9]) == 0",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i * i + j * j + k * k == (i + j + k) * 3:\n                    max_triples += 1\n    return max_triples\n",
        "test": "assert     get_max_triples(0) == 0",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    planet_orbit = [planet1, planet2]\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    for planet in planets:\n        if planet in planet_orbit:\n            planet_orbit.remove(planet)\n    return tuple(planet_orbit)\n",
        "test": "assert     bf('mercury','venus') == ('mercury','venus')",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    # Your code here\n    sorted_lst = []\n    for x in lst:\n        if len(x) % 2 == 0:\n            sorted_lst.append(x)\n    sorted_lst.sort(key = len)\n    return sorted_lst\n",
        "test": "assert     sorted_list_sum([\"spam\", \"egg\", \"spam\", \"spam\", \"spam\", \"spam\", \"bacon\"]) == sorted([\"spam\", \"spam\", \"bacon\", \"spam\", \"egg\", \"spam\"])",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if(n % 2 == 0):\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2, 1, 2) == 2",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num ** 2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    # your code goes here\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "test": "assert     compare([1,2,3,4],[1,2,3,4]) == [0]",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    strongest_extension = extensions[0]\n    for ext in extensions[1:]:\n        strength = 0\n        for letter in ext:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > strength:\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    for i in range(1,len(a)):\n        if a[i:] in b or a[:i] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"hell\", \"hell\") == True",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if (num == 0):\n        return (1,0)\n    sign = 1 if num > 0 else -1\n    num = abs(num)\n    if (num % 2 == 0):\n        return (1, 0)\n    else:\n        return (0, 1)\n",
        "test": "assert     (even_odd_count(8) == (1,0))",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    numeral_map = (\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I'),\n    )\n",
        "test": "assert     int_to_mini_roman(58) == \"LVIII\"",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return ((a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2))\n",
        "test": "assert     right_angle_triangle(10, 9, 8) == False",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    word_len = {}\n    for word in words:\n        if word in word_len:\n            word_len[word] += 1\n        else:\n            word_len[word] = 1\n    max_len = max(word_len.values())\n    for word in word_len:\n        if word_len[word] == max_len:\n            return word\n    \n",
        "test": "assert     find_max(['', '', '', '', '']) == ''",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if number >= need:\n        return [number + need, 0]\n    else:\n        return [number + remaining, remaining]\n",
        "test": "assert     eat(3, 10, 0) == [ 3, 0]",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return operator[0](operand[0], operator[1](operand[1], operand[2]))\n",
        "test": "assert     do_algebra(['*', '+', '-'], [3, 2]) == -1",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    return \"\".join([x for x in s if x.isalpha()][::-1] or s[::-1])",
        "test": "assert     solve('a') == 'a'",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n",
        "test": "assert     generate_integers(0, 5) == [0, 2, 4]",
        "num_ids": 457,
        "indeed": false
    }
]