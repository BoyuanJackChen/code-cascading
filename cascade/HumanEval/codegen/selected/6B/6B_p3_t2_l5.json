[
    {
        "number": 0,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements(numbers=[1, 2, 3], threshold=0.1) == False",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            string += \"(\"\n        elif char == \")\":\n            string += \")\"\n        elif char == \"{\":\n            string += \"{\"\n        elif char == \"}\":\n            string += \"}\"\n    return string.split(\" \")\n",
        "test": "assert separate_paren_groups('(())') == ['(())']",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return math.floor(number)\n",
        "test": "assert     truncate_number(4.0) == 4.0",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([10, -10]) == False",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # TODO: Replace the following line with a one-line lambda expression\n    mad = lambda x: sum([abs(x - y) for y in x]) / len(x)\n    return mad(numbers)\n",
        "test": "assert     0.5 == mean_absolute_deviation([-1, 0, 1, 2, 3, 4, 5])",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n        result.append(numbers[i + 1])\n    return result\n",
        "test": "assert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=2) == [1, 2, 1, 2, 3, 4, 5]",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            max_depth += 1\n        elif char == \")\":\n            stack.pop()\n            max_depth = max_depth if len(stack) == 0 else max_depth - 1\n    return max_depth\n",
        "test": "assert     parse_nested_parens('(()(()()())())'    ) == [0, 0, 1, 2, 4]",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"hey\") == [\"hey\", \"hey there\"]",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    sum_num = 0\n    product_num = 1\n    for i in numbers:\n        sum_num += i\n        product_num *= i\n    return (sum_num, product_num)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 197,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Generate the prefixes\n    rolling_max = []\n    rolling_max.append(numbers[0])\n    for i in range(1, len(numbers)):\n        # Take the max of the current prefix and the last element in the sequence\n        rolling_max.append(max(numbers[i], rolling_max[i - 1]))\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 1, 2, 3, 4, 5, 7, 8]",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            postfix = string[len(string) - i:len(string)]\n            return prefix + postfix[::-1]\n    return ''\n",
        "test": "assert     is_palindrome('a')",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "test": "assert     string_xor(\"1\", \"1\") == \"0\"",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([\"abcdefg\", \"abcdefg\", \"abcdefg\"]) == \"abcdefg\"",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(5, 6) == 1",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"abcd\") == ['', 'a', 'ab', 'abc', 'abcd']",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    seq = []\n    for i in range(n + 1):\n        seq.append(str(i))\n    return \" \".join(seq)\n",
        "test": "assert     string_sequence(3)                 == \"00 01 02\"",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters('aaa') == 1",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # These are the list of musical notes in the format string.\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n",
        "test": "assert     parse_music('o|o|o|o|o') == [4,4,4,4,4]",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return len(string.split(substring)) - 1\n",
        "test": "assert     how_many_times('test', 'est') == 2",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    numbers = numbers.split(' ')\n    sorted_numbers = sorted(numbers)\n    return''.join(sorted_numbers)\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    numbers.sort()\n    diff_1 = abs(numbers[0] - numbers[1])\n    diff_2 = abs(numbers[-1] - numbers[-2])\n    if diff_1 <= diff_2:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[-1], numbers[-2]\n",
        "test": "assert     find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0]) == (-6.0, -5.0)",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    step = 1/float(max_val - min_val)\n    return [min_val + (max_val - min_val) * i * step for i in numbers]\n",
        "test": "assert     rescale_to_unit([0.2, 0.8]) == [0.4, 1.0]",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return [1]\n    divisor = 2\n    factors = []\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2)    == [2]",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return list(set(numbers))\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return ''.join([\n        chr(ord(c) ^ ord('a') + ord('A')) if c.islower() else c\n        for c in string\n    ])\n",
        "test": "assert     flip_case('Ab') == 'Ab'",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['Hello', 'world']) == 'Helloworld'",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"0\") == []",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1,2,3,-4])     == [1,2,3]",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    poly_x = poly(xs[::-1], 1.0)\n    while poly_x > 0.0:\n        for i, coeff in enumerate(xs[::-1]):\n            xs[-i - 1] -= coeff / poly_x\n        poly_x = poly(xs[::-1], 1.0)\n    return xs[::-1][0]\n",
        "test": "assert ",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1,2,2,2,3,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,7]) == [1,2,3,4,5,6,7]",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3]) == 3",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return n // 11 - (n // 13) - (n // 7)\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    new_list = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            new_list.append(l[index])\n        else:\n            new_list.append(sorted(l)[index])\n    return new_list\n    \n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = encode_cyclic(s)\n    s = s[::-1]\n    return s\n",
        "test": "assert     decode_cyclic(\"aabb\") == \"aab\"",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    prime_list = []\n    fib_list = []\n    for i in range(n):\n        if is_prime(i):\n            prime_list.append(i)\n        fib_list.append(fib(i))\n    for i in range(n):\n        if fib_list[i] in prime_list:\n            return fib_list[i]\n",
        "test": "assert     (prime_fib(5) == 29)",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(l) < 3:\n        return False\n    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(i)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3, 6, 6]) == True",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum(1 for i in range(n) for j in range(i + 1, n) if abs(i - j) % (n // 2) == 0)",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list( [1, 2, 3, 4, 5] ) == [2, 3, 4, 5, 6]",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    all_pairs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            all_pairs.append((l[i], l[j]))\n    return any(sum(pair) == 0 for pair in all_pairs)\n",
        "test": "assert     pairs_sum_to_zero([1, 1, -1, 1, -1]) == True, \"testing for pairs_sum_to_zero([1, 1, -1, 1, -1])\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    assert type(x) == int and x >= 0, 'invalid input'\n    assert base < 10, 'invalid base'\n    if x == 0:\n        return '0'\n    digits = []\n    while x!= 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert     change_base(10, 2) == \"1010\"",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(10,5) == 25",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a = 0\n        b = 1\n        c = 2\n        for i in range(2,n):\n            temp = a + b + c\n            a = b\n            b = c\n            c = temp\n        return temp\n",
        "test": "assert     fib4(1) == 0",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 1:\n        return sorted(l)[len(l) // 2]\n    else:\n        return (sorted(l)[len(l) // 2 - 1] + sorted(l)[len(l) // 2]) / 2.0\n",
        "test": "assert     median([1,2,3,4,5,6,7]) == 4",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return text == text[::-1]",
        "test": "assert     is_palindrome('radar') == True",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return pow(n, p-2, p)\n",
        "test": "assert     modp(4, 5) == modp(4, 5) == modp(4, p=5) == modp(4, p=5)",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert         decode_shift(\"stefan\")!= \"steffan\"",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_text = new_text + char\n    return new_text\n",
        "test": "assert     remove_vowels(\"abcd\") == \"bcd\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for e in l:\n        if e < t:\n            return False\n    return True\n",
        "test": "assert     (below_threshold([1,2,3,4,5], 2) == False)",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return x + y\n",
        "test": "assert     add(5, 5) == 10",
        "num_ids": 49,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n",
        "test": "assert     same_chars(\"\", \"\") == True",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert ",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return False\n",
        "test": "assert     correct_bracketing(\"<()><<>\") == False",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([]) == True",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "test": "assert     common([1, 2, 3, 4, 5], [1, 4, 5, 6, 7]) == [1, 4, 5]",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n    \ndef sum_to_n_n(n):\n    \"\"\"sum_to_n_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_n(30)\n    465\n    >>> sum_to_n_n(100)\n    5050\n    >>> sum_to_n_n(5)\n    15\n    >>> sum_to_n_n(10)\n    55\n    >>> sum_to_n_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i*i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    bracket_pairs = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    for b in brackets:\n        if b in bracket_pairs:\n            stack.append(b)\n        elif b in bracket_pairs.values():\n            if stack == [] or bracket_pairs[stack.pop()]!= b:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\")()\") == False",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert len(xs) > 0\n    der = [xs[i] for i in range(1, len(xs))]\n    der[0] = xs[0] * len(xs)\n    return der\n",
        "test": "assert ",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum([1 for i in s if i in 'aeiouy']) + (sum([1 for i in s[-1:] if i in 'aeiouy']) if s[-1:] in 'y' else 0)\n",
        "test": "assert     vowels_count('w') == 0",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(int(str(x)[-shift:] + str(x)[:-shift]))",
        "test": "assert     circular_shift(123, 1) == 123",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sum([ord(i) for i in s if ord(i) > 64 and ord(i) < 91])\n",
        "test": "assert     digitSum(\"Hello\") == 7",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return s.count('mango')-s.count('orange')-s.count('apple')\n",
        "test": "assert     fruit_distribution('1,0,0',3) == 0",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def even_val(x):\n        return x%2 == 0\n    \n    arr.sort(key = even_val)\n    return arr if even_val(arr[0]) else []\n",
        "test": "assert     [ 2, 0 ] == pluck([ 1, 1, 3, 2, 4, 7, 8 ])",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    frequency = [0]*(len(lst)+1)\n    for i in lst:\n        frequency[i] += 1\n    max = -1\n    for i in range(len(frequency)):\n        if frequency[i] > frequency[max] and frequency[i]>=i:\n            max = i\n    return max\n",
        "test": "assert     search([1,1,1,2,2,3,3,3,3]) == 3",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if not lst:\n        return []\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a*b*c)/2, 2)\n",
        "test": "assert     triangle_area(3, 4, 7) == -1",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    def is_palindrome(l):\n        '''\n        Write a function that returns True if the list is a palindrome, and False otherwise.\n        '''\n        return l[:] == l[::-1]\n    return is_palindrome(q) and sum(q) <= w\n",
        "test": "assert     will_it_fly([3,6,5],10) == False",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    arr_len = len(arr)\n    hash_table = {}\n    for i in range(arr_len):\n        if arr[i] not in hash_table:\n            hash_table[arr[i]] = 1\n        else:\n            hash_table[arr[i]] += 1\n    odd_count = 0\n    for val in hash_table:\n        if hash_table[val] % 2 == 1:\n            odd_count += 1\n    if odd_count > 1:\n        return -1\n    else:\n        return arr_len - odd_count\n",
        "test": "assert     smallest_change([1, 2, 1]) == 2",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # lst1, lst2 = sorted(lst1), sorted(lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) > len(lst2):\n            return lst2\n        else:\n            return lst1\n",
        "test": "assert     total_match(['l','i','s','m'], ['l','i','d','k']) == ['l','i','s','m']",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    for x in range(2, int(a ** (1/2)) + 1):\n        if a % x == 0:\n            return False\n",
        "test": "assert     is_multiply_prime(45) == False",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x == n**int(x)\n",
        "test": "assert     not is_simple_power(4, 8)",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return pow(a,3) == a",
        "test": "assert     iscube(13) == False",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(num) == 0:\n        return 0\n    elif len(num) == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(len(num)):\n            if int(num[i:i+1], 16) in [2, 3, 5, 7, 11, 13, 17]:\n                result += 1\n    return result\n",
        "test": "assert     hex_key(\"AA\") == 0",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if decimal < 0:\n        raise ValueError('The decimal value must be positive')\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return len(s) >= 3 and s == s[0] + s[1] + s[2] and all(s[i]!= s[i+1] for i in range(len(s)-2))\n",
        "test": "assert     is_happy(\"aba\")",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Grading\n    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n",
        "test": "assert     numerical_letter_grade(['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0', '0.7', '0.0', '0.3']) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F', 'G']",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    total_sum = 0\n    for char in string:\n        total_sum += ord(char) - 97 + 1\n    return total_sum % 2 == 0\n",
        "test": "assert     prime_length('bananas') == True",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert         starts_one_ends(2) == 1",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return bin(N).replace(\"0b\",\"\")\n",
        "test": "assert     solve(10) == \"1010\"",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if lst:\n        if lst[0] % 2 == 0:\n            return lst[0]\n        return add(lst[1:])\n",
        "test": "assert add([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 8]",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle(\" 1234 567 8910\") == \"123 456 789 10\"",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    output = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                output.append((i, j))\n    output = sorted(output, key=lambda x: x[0])\n    output = sorted(output, key=lambda x: x[1], reverse=True)\n    return output\n",
        "test": "assert     get_row([[4, 3, 2], [1, 5, 6]], 3) == [(0, 2), (1, 2), (1, 1), (0, 0), (0, 1), (0, 2)]",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def helper(array, flag):\n        \"\"\"\n        return array sorted by sum\n        \"\"\"\n        if not array:\n            return array\n        if flag == 'odd':\n            return sorted(array, reverse=True)\n        elif flag == 'even':\n            return sorted(array)\n    sum = lambda array: sum([array[0], array[-1]])\n    if sum(array) % 2 == 0:\n        flag = 'even'\n    else:\n        flag = 'odd'\n    return helper(array, flag)\n",
        "test": "assert     sort_array([1]) == [1]",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    assert isinstance(s, str) and len(s) > 0\n    return ''.join(rotate_char(s[i], i) for i in range(len(s)))\n",
        "test": "assert ",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    try:\n        return sorted(lst)[1]\n    except IndexError:\n        return None",
        "test": "assert     next_smallest([1,2,3,4,5,6]) == 2",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # count the number of \"I\"\n    return S.count(\"I\")",
        "test": "assert     is_bored(\".I am bored!\") == True",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if x == y + z or x == z + y or y == x + z:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(2, 9, 4) == False, \"Expected False\"",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # message = message.lower()\n    # vowels = 'aeiou'\n    # message = message.translate(str.maketrans('', '', vowels))\n    # for vowel in vowels:\n    #     message = message.replace(vowel, chr(ord(vowel) + 2))\n    # return message\n    pass\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \" \\n*** ALL TESTS PASSED. NICE JOB! ***\\n",
        "test": "assert     encode('Hello World!') == 'lH 2 oW  rL d'",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    from math import log10\n    from functools import reduce\n    from itertools import chain\n    from math import ceil, floor\n    \n    isPrime = lambda x: all(x % i for i in range(2, int(x ** 0.5) + 1)) if x > 1 else False\n    \n    # map(lambda x: x % 2, range(2, int(floor(log10(max(lst)) + 1))))\n    \n    prime_lst = filter(isPrime, lst)\n    \n    if prime_lst:\n        return sum(map(lambda x: int(str(x)[0]), prime_lst))\n    else:\n        return 0\n",
        "test": "assert     int('57') == 57",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not dict:\n        return False\n    lower_keys = {k.lower() for k in dict.keys()}\n    upper_keys = {k.upper() for k in dict.keys()}\n    for key in lower_keys:\n        if key not in upper_keys:\n            return False\n    for key in upper_keys:\n        if key not in lower_keys:\n            return False\n    return True\n    \n",
        "test": "assert     check_dict_case({}) == False",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    #Note: this is a very common interview problem. You can solve it in O(n) time using a sieve.\n    #The trick is to use a faster prime number sieve, which will use about half the time you would have to\n    #use a sieve\n    primes = sieve(n)\n    return [i for i in primes if i < n]\n",
        "test": "assert     count_up_to(6) == [2, 3, 5]",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    res = 0\n    a = abs(a)\n    b = abs(b)\n    while a > 0 or b > 0:\n        if a > 0 and b > 0:\n            res += (a % 10) * (b % 10)\n            a //= 10\n            b //= 10\n        else:\n            if a > 0:\n                res += a % 10\n                a //= 10\n            elif b > 0:\n                res += b % 10\n                b //= 10\n    return res\n",
        "test": "assert     multiply(1,1) == 1",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n                num_vowels += 1\n    return num_vowels\n",
        "test": "assert     count_upper(\"Python!\") == 0, count_upper(\"Python!\")",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"0.3\") == 0",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [n]\n    elif n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n] + make_a_pile(n - 2)\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return s.split(',')",
        "test": "assert     words_string(\"hello,world\") == ['hello', 'world']",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # Write your code here\n    \n    while x < y:\n        if x % 2 == 0:\n            x = x + 1\n        else:\n            x = x + 2\n    return x\n",
        "test": "assert     choose_num(0, 10) == -1",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    if n > m:\n        return -1\n    \n    range = m - n + 1\n    bits = \"{0:b}\".format(range)\n    \n    return int(bits, 2)\n    \n    \nif __name__ == '__main__':\n    print(rounded_avg(1, 5)) # 0b11\n    print(rounded_avg(7, 5)) # -1\n    print(rounded_avg(10, 20)) # 0b1111\n    print(rounded_avg(20, 33)) # 0b11010\n    print(rounded_avg(33, 49)) # 0b11011",
        "test": "assert     rounded_avg(0, 5) == -1",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    arr.sort()\n    return [name_by_number(num) for num in arr[::-1]]\n",
        "test": "assert     by_length([4,3,2,1]) == \"One Two Three Four\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    soln = [1]\n    for i in range(2,n+1):\n        if i%2 == 0:\n            soln.append(soln[i-1] * i)\n        else:\n            soln.append((i+1) * sum(range(2,i)))\n    return soln\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    count_even, count_odd = 0, 0\n    for i in xrange(1, n+1):\n        if is_palindrome(i):\n            if i%2==0:\n                count_even += 1\n            else:\n                count_odd += 1\n",
        "test": "assert     even_odd_palindrome(100) == (25, 25)",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n            num_str = str(num)\n            num_sum = 0\n            for digit in num_str:\n                num_sum += int(digit)\n            if num_sum > 0:\n                count += 1\n        else:\n            num_str = str(num)\n            num_sum = 0\n            for digit in num_str:\n                num_sum += int(digit)\n            if num_sum > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # To perform atmost n right shift operations to get non-decreasing order\n    # we have to find out if the array is sorted or not\n    # we will find out if the array is sorted by comparing the element\n    # with the previous element (arr[i] > arr[i-1])\n    # if yes, we will do a right shift operation to array\n    # else, we will have to go back to the beginning and do a left shift operation\n    # to the array\n    # if the array is sorted then return True\n    # else return False\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            # if we shift back the array and we get non-decreasing\n            # then we are done\n            arr = arr[i:]+arr[:i]\n            break\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([1,2,3,4,5]) == True",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst1_even = [el for el in lst1 if el%2 == 0]\n    lst2_even = [el for el in lst2 if el%2 == 0]\n    if lst1_even == lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3, 4], [4, 3, 2, 1, 5]) == \"NO\"",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n    \n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if is_palindrome(s):\n        return (s,True)\n    \n    if not is_palindrome(s):\n        for i in range(len(s)):\n            if s[i] == c:\n                s = s[:i] + s[i+1:]\n                \n                if is_palindrome(s):\n                    return (s,True)\n        return (s,False)\n    \n        \n        \n    \n        \n    \n    \n",
        "test": "assert reverse_delete('ct','tt') == ('ct',False)",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    res = []\n    for i in lst:\n        count = 0\n        for char in i:\n            if int(char) % 2 == 1:\n                count += 1\n        res.append(\"the number of odd elements \" + str(count) + \" in the str4ng \" + str(i) + \" of the \" + str(lst.index(i) + 1) + \" nput.\")\n    return res\n",
        "test": "assert         '5' == odd_count(['5'])",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    curr_sum = 0\n    min_sum = nums[0]\n",
        "test": "assert ",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    cap = capacity\n    \n    if n == 0:\n        return 0\n",
        "test": "assert     max_fill([[0,0],[0,1],[1,1]], 2) == 2",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(arr, key=lambda x: bin(x).count('1'))\n",
        "test": "assert     sort_array([0,0,1,1,1,1,2,2,2,2]) == [0,0,1,1,1,1,2,2,2,2]",
        "num_ids": 1293,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    import string\n    vowels = \"aeiouAEIOU\"\n    result = []\n    if not s:\n        return result\n    for word in s.split():\n        count = 0\n        for c in word:\n            if c in string.ascii_lowercase:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n    \n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4)) # [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3)) # [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2)) # []\n    print(select_words(\"Hello world\", 4)) # [\"world\"]\n    print(select_words(\"Uncle sam\", 3)) # [\"Uncle\"",
        "test": "assert     select_words(\"This is an example.\", 8) == []",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if word[0] in \"aeiou\":\n        return word[0]\n    elif word[-1] in \"aeiou\":\n        return word[-1]\n    else:\n        for i in range(len(word) - 1, 0, -1):\n            if word[i] in \"aeiou\":\n                return word[i]\n        return \"\"\n",
        "test": "assert get_closest_vowel('car') == 'a'",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    # Build a hash table of the open and closed brackets\n    hash_table = {}\n    for i in range(len(lst[0])):\n        if lst[0][i] not in hash_table:\n            hash_table[lst[0][i]] = [i]\n        else:\n            hash_table[lst[0][i]].append(i)\n    \n    # Iterate over the open and close brackets of the second string\n    for j in range(len(lst[1])):\n        if lst[1][j] in hash_table:\n            if len(hash_table[lst[1][j]]) == 0:\n                return 'No'\n            else:\n                for k in hash_table[lst[1][j]]:\n                    if lst[0][k]!= lst[1][j]:\n                        return 'No'\n                    else:\n                        hash_table[lst[1][j]].remove(k)\n                        lst[0] = lst[0][:k]+lst[1][j]+lst[0][k+1:]\n                        \n    return 'Yes'\n",
        "test": "assert     match_parens('()') == 'Yes'",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \"\"\"\n    if arr is None or len(arr) < 1:\n        return []\n    elif len(arr) < k:\n        return sorted(arr)\n    else:\n        max_arr = []\n        for i in range(len(arr) - k + 1):\n            max_arr.append(max(arr[i:i+k]))\n        return max_arr\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert         maximum([4, 3, 2, 1], 2)         == [4, 3]",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sum(lst[::2])",
        "test": "assert ",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum([x for x in arr[:k] if len(str(x)) <= 2])\n",
        "test": "assert     add_elements([0, 0, 0, 0, 0, 0, 0, 0], 3) == 0",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2) + [n]\n    else:\n        return get_odd_collatz((3 * n) + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # We will use regular expressions for this task. Regular expressions will be\n    # useful for matching text/strings and performing some manipulation on them.\n    import re\n    regex = re.compile(r'^(\\d{2})-(\\d{2})-(\\d{4})$')\n",
        "test": "assert     valid_date(\"01-01-2000\") == True, \"January 1st 2000 is a valid date!\"",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('I love you') == ['I', 'love', 'you']",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(lst) <= 1: return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    a = interval1[0]\n    b = interval1[1]\n    c = interval2[0]\n    d = interval2[1]\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a >= c and b <= d:\n        return \"YES\"\n    elif a <= c and b >= d:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 3)) == \"YES\"",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if arr:\n        res = sum([abs(x)*sign(x) for x in arr])\n        return res\n    else:\n        return None\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n",
        "test": "assert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8]], k = 2) == [1,2]",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    tri = [1, 3, 2]\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return tri\n    if n == 3:\n        return [1, 3, 2]\n    while len(tri) <= n:\n        new = tri[-1] + tri[-2] + tri[-3]\n        tri.append(new)\n    return tri\n",
        "test": "assert ",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    result = 1\n    while n > 0:\n        result *= n % 10\n        n //= 10\n    return result\n",
        "test": "assert     (digits(21) == 2)",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    pile = []\n    for c in string:\n        if c == '[' or c == ']':\n            pile.append(c)\n            if len(pile) == 1:\n                return False\n            if pile[-2] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-2] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-1] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-1] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if len(pile)!= 1:\n                return False\n    return True\n",
        "test": "assert is_nested(\"(a)\") == True",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    lst = list(map(int, lst))\n    for i in lst:\n        i = ceil(i)\n    return sum(map(lambda x: x**2, lst))\n",
        "test": "assert     sum_squares([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])     ==     26025",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return (txt[-1].isalpha() and txt[-1]!= \" \" and txt[-1]!= \".\")\n    #pass\n",
        "test": "assert     check_if_last_char_is_a_letter('Hello World') == True",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([0, 1, 1, 3, 2]) == -1",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return None, None",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if isinstance(a, float):\n        a = str(a)\n    if isinstance(b, float):\n        b = str(b)\n    if a == b:\n        return None\n    if float(a) > float(b):\n        return a\n    return b\n",
        "test": "assert     compare_one(5, 4.5) == 5",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return n % 2 == 0 and sum([i for i in range(4, n, 2) if i <= n]) == n\n",
        "test": "assert     is_equal_to_sum_even(10) == False",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    factorial = 1\n    for x in range(n):\n        factorial = factorial * (n - x)\n    return factorial\n",
        "test": "assert     special_factorial(4) == 24",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    import re\n    text = re.sub(r'\\s+', '_', text)\n    if text.count(' ') > 2:\n        text = re.sub(r'\\s+', '-', text)\n    return text\n    \ndef generate_id(text, a_id_map):\n    \"\"\"\n    Given a text, generate a unique id, which is a number \n    that will not collide with other ids used in the code. \n    \n    If an id is not available, then the id is -1\n    \n    generate_id(\"a\", [3, 2, 1, -1]) == \"1\"\n    generate_id(\"b\", [3, 2, 1, -1]) == \"2\"\n    generate_id(\"c\", [3, 2, 1, -1]) == \"3\"\n    generate_id(\"a\", [3, 2, 1, -1]) == \"4\"\n    \"\"\"\n    id = -1\n    while id in a_id_map:\n        id += 1\n    return id\n    \ndef format_attrs(attrs, a_id_map):\n    \"\"\"\n    Given a dictionary of attributes, \n    return the text of the HTML tag corresponding to the attributes.\n    \n    format_attrs({'id':'a'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    \"\"\"\n    import re\n    \n    s = ''\n    for k, v in attrs.items():\n        if k == 'id':\n            s += \" id=\\\"{0}\\\"\".format(v)\n        elif k == 'class':\n            s += \" class=\\\"{0}\\\"\".format(v)\n        else:\n            s += \" {0}=\\\"{1}\\\"\".format(k, v)\n    if s!= '':\n        s ='' + s\n    \n    \n    return s\n    \ndef escape_html(s):\n    \"\"\"\n    Escape HTML characters that can't be represented in HTML strings, \n    like &, <, and >\n    \n    escape_html(\"Example\") == \"Example\"\n    escape_html(\"Example<script>alert('Hello');</script>\") == \"Example&lt;script&gt;alert('Hello');&lt;/script&gt;\"\n    \"\"\"\n    import re\n    return re.sub(r'&(?![A-Za-z]+[0-9]*;|#[0-9]+;|#x[0-9A-F]+;)', '&amp;', s)\n",
        "test": "assert         fix_spaces('') == ''",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    import re\n    if re.search(r'\\d', file_name):\n        return 'No'\n    if re.search(r'\\.{2,}', file_name):\n        return 'No'\n    if re.search(r'^[a-zA-Z]', file_name):\n        return 'No'\n    if re.search(r'\\.txt$|\\.exe$|\\.dll$', file_name):\n        return 'Yes'\n",
        "test": "assert         file_name_check(\"abc123.txt\") == \"No\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i]**2\n        elif i%4 == 0:\n            sum += lst[i]**3\n    return sum\n",
        "test": "assert     sum_squares([-3, 4, 5]) == 9",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join([s for s in sentence.split() if is_prime(len(s))])\n",
        "test": "assert     words_in_sentence(\"What is the meaning of life\") == \"what is the meaning of life\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if x == \"0\" or n == \"0\":\n        return True\n    try:\n        numerator, denominator = map(int, x.split('/'))\n        num, den = int(numerator), int(denominator)\n        return simplify_whole_num(num, den)\n    except ValueError:\n        return False\n",
        "test": "assert     simplify('2/3', '4/3') == False",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(nums, key = lambda x: sum([int(digit) for digit in str(x)]))\n",
        "test": "assert     order_by_points([0, 0, 0, 0]) == [0, 0, 0, 0], \"Zero\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sum([n for n in nums if n > 10 and (n%10)%2!= 0 and (n//10)%2!= 0])\n    \n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5]) == 0, \"incorrect\"",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    a = [x*x - x + 1 for x in range(1,n+1)]\n    return sum(a[x] for x in range(n) if x < n-1 and a[x] % 3 == 0)",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Your code here\n    planet_orbit = {}\n    for planet in planets:\n        planet_orbit[planet] = find_orbit(planet)\n    def find_distance(planet1, planet2):\n        return abs(planet_orbit[planet1] - planet_orbit[planet2])\n    res = sorted(planets, key=find_distance)\n    return tuple(res)\n    ",
        "test": "assert ",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not lst:\n        return []\n    else:\n        # first split the list into lists of same lengths\n        num_lst = []\n        for word in lst:\n            num_lst.append(len(word))\n        num_lst = sorted(num_lst)\n        # now sort each item in the list by length\n        lst_copy = list(lst)\n        new_lst = []\n        for num in num_lst:\n            for word in lst_copy:\n                if len(word) == num:\n                    new_lst.append(word)\n                    lst_copy.remove(word)\n        return new_lst\n",
        "test": "assert     sorted_list_sum(['bird', 'dog', 'cat','snake','mouse']) == ['bird', 'cat','mouse', 'dog','snake']",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2,0,1) == 1",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum([x*x for x in lst if x % 2 == 1])\n",
        "test": "assert     double_the_difference([-1,-2,-3]) == -6",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return [a-b for a,b in zip(game,guess)]\n",
        "test": "assert     compare([1,2,3], [1,2,3]) == [0,0,0]",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    strongest_extension = extensions[0]\n    strength = len(extensions[0]) - len(extensions[0].lower())\n    for extension in extensions:\n        ext_strength = len(extension) - len(extension.lower())\n        if ext_strength > strength:\n            strongest_extension = extension\n            strength = ext_strength\n    return \"{0}.{1}\".format(class_name, strongest_extension)\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(a)):\n        if a[i:] in b or a[:len(a)-i] in b:\n            return True\n",
        "test": "assert     cycpattern_check(\"PAP\",\"PAP\") == True",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    even_count = 0\n    odd_count = 0\n",
        "test": "assert ",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Create the dictionary of roman numeral values\n    symbols = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M',\n    }\n    # We need to convert the number to a string so that we can easily iterate\n    # over it\n    number_str = str(number)\n    # Create a list of the roman numeral symbols from the number\n    symbols_list = [symbols[int(i)] for i in number_str]\n    # Return the symbols joined into a string\n    return ''.join(symbols_list)\n",
        "test": "assert     int_to_mini_roman(10) == \"x\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Uncomment to test.\n    # assert right_angle_triangle(3, 4, 5) == True\n    # assert right_angle_triangle(1, 2, 3) == False\n    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(words, key=lambda x:len(set(x)))[-1]\n",
        "test": "assert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\"]) == \"elephant\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    \n    return [total, remaining]\n",
        "test": "assert     eat(3, 3, 3) == [3, 3]",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([s.lower() if s.isalpha() else s for s in s])[::-1]\n",
        "test": "assert     'Geeks' == solve('Geeks')",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if text is None:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    integers = []\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n",
        "test": "assert     generate_integers(8, 11) == [8, 10]",
        "num_ids": 244,
        "indeed": false
    }
]