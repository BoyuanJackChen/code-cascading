[
    {
        "number": 0,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 2) == True",
        "num_ids": 1649
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    open_paren = 0\n    close_paren = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren += 1\n        elif paren_string[i] == ')':\n            close_paren += 1\n        if open_paren == close_paren:\n            paren_groups.append(paren_string[open_paren:close_paren+1])\n            open_paren = 0\n            close_paren = 0\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"((a)) (b(c)\") == [\"((a))\", \"(b(c))\"]",
        "num_ids": 2662
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(0.123456) == 0.123456",
        "num_ids": 1033
    },
    {
        "number": 3,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    balance = 0\n    for deposit in operations:\n        balance += deposit\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([]) is False",
        "num_ids": 1611
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    # TODO: maybe not correct\n    numbers = sorted(numbers)\n    return (numbers[len(numbers) // 2] - numbers[0]) / (len(numbers) // 2)\n",
        "test": "assert     mean_absolute_deviation([-1.0, -1.0, -1.0, -1.0, -1.0]) == 0",
        "num_ids": 2355
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    out = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            out.append(numbers[i])\n            out.append(delimeter)\n        else:\n            out.append(numbers[i])\n    return out\n",
        "test": "assert     intersperse(numbers=[], delimeter=5) == []",
        "num_ids": 1524
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "    max_nesting = 0\n    stack = []\n    max_nesting_list = []\n    current_nesting = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_nesting += 1\n            max_nesting_list.append(current_nesting)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n                current_nesting -= 1\n    max_nesting_list.append(current_nesting)\n    return max_nesting_list\n",
        "test": "assert     parse_nested_parens(\"(())(())()\") == [0, 0, 1, 1, 2, 2, 3, 3]",
        "num_ids": 1622
    },
    {
        "number": 7,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"apple\", \"banana\", \"kiwi\"], \"ki\") == [\"kiwi\"]",
        "num_ids": 1523
    },
    {
        "number": 8,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 1034
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    return [max(numbers[0:i+1]) for i in range(len(numbers))]\n",
        "test": "assert     rolling_max([1]) == [1]",
        "num_ids": 2053
    },
    {
        "number": 10,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    longest_palindrome = ''\n    for i in range(len(string), 0, -1):\n        # Find longest palindrome that begins with given string\n        if is_palindrome(string[:i]):\n            longest_palindrome = string[:i]\n            break\n    if len(longest_palindrome) == len(string):\n        return string\n    return longest_palindrome + string[len(longest_palindrome):] + string[::-1]\n",
        "test": "assert     is_palindrome(\"abc\") == False",
        "num_ids": 1517
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor('1', '0') == '1'",
        "num_ids": 1359
    },
    {
        "number": 12,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) is None",
        "num_ids": 1173
    },
    {
        "number": 13,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(5, 5) == 5",
        "num_ids": 1025
    },
    {
        "number": 14,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 1282
    },
    {
        "number": 15,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    if n == 0:\n        return ''\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0 1'\n    elif n == 3:\n        return '0 1 2'\n    elif n == 4:\n        return '0 1 2 3'\n    elif n == 5:\n        return '0 1 2 3 4'\n    else:\n        return '0 1 2 3 4 {}'.format(n)\n",
        "test": "assert     string_sequence(1) == \"0\"",
        "num_ids": 1079
    },
    {
        "number": 16,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert         count_distinct_characters(\"h\") == 1",
        "num_ids": 906
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    # TODO: Implement me!\n    return list(map(lambda x: 4 if x == 'o' else 2 if x == 'o|' else 1, music_string.split(' ')))\n",
        "test": "assert     parse_music(\"O\") == [1]",
        "num_ids": 3070
    },
    {
        "number": 18,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('fghhgf', 'h') == 2",
        "num_ids": 1361
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "    return''.join(sorted(numbers.split(' '), key=lambda x: int(x)))\n",
        "test": "assert     sort_numbers('nine eight seven six five four three two one') == 'one two three four five six seven eight nine ten'",
        "num_ids": 1699
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    smallest_diff = float('inf')\n    smallest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                smallest_pair = (numbers[i], numbers[j])\n    return smallest_pair\n",
        "test": "assert find_closest_elements([1,1,1,1]) == (1, 1)",
        "num_ids": 3133
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [x - minimum for x in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0, 1]) == [0, 0, 1]",
        "num_ids": 1753
    },
    {
        "number": 22,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return [int(item) for item in values if type(item) == int]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1590
    },
    {
        "number": 23,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"abc\") == 3",
        "num_ids": 509
    },
    {
        "number": 24,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            largest = i\n        i += 1\n    return largest\n",
        "test": "assert     largest_divisor(3) == 1",
        "num_ids": 751
    },
    {
        "number": 25,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    res = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            res.append(d)\n    if n > 1:\n        res.append(n)\n    return res\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 2004
    },
    {
        "number": 26,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    \n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])",
        "num_ids": 1850
    },
    {
        "number": 27,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('a') == 'A'",
        "num_ids": 981
    },
    {
        "number": 28,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 931
    },
    {
        "number": 29,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert         filter_by_prefix([], 'hi') == []",
        "num_ids": 1402
    },
    {
        "number": 30,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([2, 3, -1, 4, -5]) == [2, 3, 4]",
        "num_ids": 1154
    },
    {
        "number": 31,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(0) == False, '0 is not prime'",
        "num_ids": 1316
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    # Use only even number of coefficients, and remove zeros if exists\n    xs = [coeff for i, coeff in enumerate(xs) if i % 2 == 0 and coeff!= 0]\n    # Ensure that there are no 0 in the list\n    while 0 in xs:\n        xs.remove(0)\n    # Remove all zeros in the list\n    while 0 in xs:\n        xs.remove(0)\n    if len(xs) == 1:\n        return xs[0]\n    # If the list has 2 coefficients, x is (x1 + x2) / 2, hence poly(x) = 0\n    if len(xs) == 2:\n        return (xs[0] + xs[1]) / 2\n    if len(xs) == 3:\n        if (xs[0] * xs[1]) == - (xs[2] * xs[0]):\n            return (xs[0] + xs[1]) / 2\n        elif (xs[1] * xs[2]) == - (xs[0] * xs[1]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[0] * xs[2]) == - (xs[1] * xs[0]):\n            return (xs[0] + xs[2]) / 2\n        elif (xs[0] * xs[1]) == - (xs[2] * xs[0]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[1] * xs[2]) == - (xs[0] * xs[1]):\n            return (xs[0] + xs[2]) / 2\n        elif (xs[2] * xs[0]) == - (xs[1] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[0] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n    # If the list has 4 coefficients, solve the quadratic equation Ax^2 + Bx + C = 0\n    if len(xs) == 4:\n        a = xs[0] * xs[1] + xs[2] * xs[3]\n        b = 2 * (xs[0] * xs[2] + xs[1] * xs[3])\n        c = xs[0] * xs[0] + xs[1] * xs[1] + xs[2] * xs[2] + xs[3] * xs[3]\n        delta = b * b - 4 * a * c\n        if delta < 0:\n            return None\n        elif delta == 0:\n            return -b / (2 * a)\n        elif delta > 0:\n            return (-b + math.sqrt(delta)) / (2 * a)\n    # if the list has more than 4 coefficients, raise an exception\n    raise Exception('Only even number of coefficients are supported')\n",
        "test": "assert     poly([0, 0, 0], 1) == 0",
        "num_ids": 2900
    },
    {
        "number": 33,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    l.sort()\n    return l",
        "test": "assert sort_third([]) == []",
        "num_ids": 1736
    },
    {
        "number": 34,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1,2,3,1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 1270
    },
    {
        "number": 35,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    if not l:\n        return None\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5",
        "num_ids": 1015
    },
    {
        "number": 36,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    return sum(1 for i in range(n) if i % 11 == 7 or i % 13 == 7)\n",
        "test": "assert     fizz_buzz(3) == 0",
        "num_ids": 934
    },
    {
        "number": 37,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "test": "assert     sort_even([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
        "num_ids": 1719
    },
    {
        "number": 38,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    # convert string to list\n    s_list = list(s)\n    # convert list to tuple\n    s_tuple = tuple(s_list)\n    # convert tuple to string\n    s_str = \"\".join(s_tuple)\n    # split string to groups. Each of length 3.\n    groups = [s_str[(3 * i):min((3 * i + 3), len(s_str))] for i in range((len(s_str) + 2) // 3)]\n    # cycle elements in each group. Until group has more than 3 elements.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # convert tuple to list\n    groups = list(groups)\n    # cycle elements in each group.\n    groups = [group[1:] + group[0] for group in groups]\n    # join list to string\n    return \"\".join(groups)\n",
        "test": "assert         decode_cyclic(\"doctest\") == decode_cyclic(\"doctest\")",
        "num_ids": 1788
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    if n < 0:\n        raise Exception(\"The value of n must be positive. You entered: \", n)\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     isinstance(prime_fib(1), int)",
        "num_ids": 1837
    },
    {
        "number": 40,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert     triples_sum_to_zero([1]) == False",
        "num_ids": 1677
    },
    {
        "number": 41,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0",
        "num_ids": 786
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1035
    },
    {
        "number": 43,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    d = {}\n    for x in l:\n        d[x] = d.get(x, 0) + 1\n    for x in d:\n        if -x in d and d[x] == d[-x]:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, -8]) == False",
        "num_ids": 2526
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    new_base = \"\"\n    while x > 0:\n        digit = x % base\n        if digit < 10:\n            new_base = str(digit) + new_base\n        else:\n            new_base = chr(ord('A') + digit - 10) + new_base\n        x //= base\n    return new_base\n",
        "test": "assert     change_base(5,10) == '5'",
        "num_ids": 1111
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(0, 0) == 0",
        "num_ids": 556
    },
    {
        "number": 46,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert     fib4(0) == 0",
        "num_ids": 1253
    },
    {
        "number": 47,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    if len(l) == 0:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1])/2\n",
        "test": "assert median([1,2,3]) == 2",
        "num_ids": 903
    },
    {
        "number": 48,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    # We use 0 based indexing\n    # make all char lowercase and remove spaces\n    text = text.lower().replace(\" \", \"\")\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "test": "assert     is_palindrome('a') == True",
        "num_ids": 892
    },
    {
        "number": 49,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    assert n >= 0\n    assert p > 0\n    n %= p\n    if n == 0:\n        return 1\n    if n < p // 2:\n        return pow(2, n, p)\n    else:\n        return pow(2, p - n, p)\n",
        "test": "assert     modp(0, 2) == 1",
        "num_ids": 1146
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\"",
        "num_ids": 1919
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    new_text = ''\n    for char in text:\n        if char!= '':\n            new_text += char\n    return new_text\n",
        "test": "assert     remove_vowels('hello') == 'hll'",
        "num_ids": 2225
    },
    {
        "number": 52,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 1) == False",
        "num_ids": 1009
    },
    {
        "number": 53,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return x + y\n",
        "test": "assert     add(2,2) == 4",
        "num_ids": 367
    },
    {
        "number": 54,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return all(a == b for a, b in zip(s0, s1))\n",
        "test": "assert     same_chars(\"\", \"\") is True",
        "num_ids": 892
    },
    {
        "number": 55,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 744
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    # print(brackets)\n    brackets = brackets.strip(\"<>\")\n    # print(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        if bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert not correct_bracketing(\"<(<())>\")",
        "num_ids": 2464
    },
    {
        "number": 57,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([1])     == True",
        "num_ids": 1043
    },
    {
        "number": 58,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1525
    },
    {
        "number": 59,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    assert n > 1\n    n_is_prime = False\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n_is_prime = True\n            break\n        i += 1\n    if n_is_prime:\n        return n\n    else:\n        return largest_prime_factor(n // i)\n",
        "test": "assert     17 == largest_prime_factor(17)",
        "num_ids": 914
    },
    {
        "number": 60,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n-1)\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 610
    },
    {
        "number": 61,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\")(\") == False",
        "num_ids": 1372
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "    d = []\n    for i in range(1, len(xs)):\n        d.append(xs[i] * i)\n    return d\n",
        "test": "assert     derivative([1,0]) == [0]",
        "num_ids": 2021
    },
    {
        "number": 63,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert         fibfib(0) == 0",
        "num_ids": 2034
    },
    {
        "number": 64,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    vowels = set(['a','e','i','o','u','y'])\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"lions\") == 2",
        "num_ids": 1123
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    if shift > len(str(abs(x))):\n        return str(x)[-shift:] + str(abs(x))[:-shift]\n    return str(abs(x))[-shift:] + str(abs(x))[:-shift]",
        "test": "assert     circular_shift(4, 9) == '4'",
        "num_ids": 1189
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return sum([ord(c) - 64 for c in s.upper() if c.isalpha()])\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 790
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    l=s.split()\n    k=len(l)\n    c=0\n    for i in range(k):\n        if l[i]==\"oranges\":\n            c+=n/3\n        if l[i]==\"apples\":\n            c+=n/2\n        if l[i]==\"mangos\":\n            c+=n/1\n    return c\n",
        "test": "assert     fruit_distribution(\"1 2 3\",4) == 0",
        "num_ids": 1680
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    if not arr:\n        return []\n    return [arr[idx] for idx, val in enumerate(arr) if val % 2 == 0 and val == min(arr[idx:], key=lambda x:x%2)][0:2]\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 2704
    },
    {
        "number": 69,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    freq = {}\n    max_freq = 0\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n            if freq[elem] > max_freq:\n                max_freq = freq[elem]\n        else:\n            freq[elem] = 1\n    return -1 if max_freq == 0 else max(freq.keys())\n",
        "test": "assert     search([-1]) == -1, \"list is only one element\"",
        "num_ids": 2635
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    lst.sort()\n    if lst:\n        if lst[0] > lst[-1]:\n            lst.reverse()\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 1437
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    return round(math.sqrt((b*b) + (c*c) - 2*b*c) / 2, 2)\n",
        "test": "assert     triangle_area(5,5,5) == 0.0",
        "num_ids": 1284
    },
    {
        "number": 72,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    def is_balanced(lst):\n        if len(lst) % 2 == 0:\n            return True\n        else:\n            return False\n    def sum_of_elements(lst):\n        total = 0\n        for i in lst:\n            total += i\n        return total\n    if is_balanced(q) == True:\n        return sum_of_elements(q) <= w\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 9) == False, \"The example should return False\"",
        "num_ids": 1539
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            changes += 1\n            arr[arr[i]] = i\n    return changes\n",
        "test": "assert     smallest_change([]) == 0",
        "num_ids": 1516
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    return [x for x in lst1 if len(x) <= len(lst2)]\n",
        "test": "assert     total_match(['a', 'b', 'c', 'd'], ['e', 'f', 'g'])         == ['a', 'b', 'c', 'd']",
        "num_ids": 1648
    },
    {
        "number": 75,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, int(a**(1/2)) + 1):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(20) == False",
        "num_ids": 926
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    # check if x/n is an integer\n    if x % n!= 0:\n        return False\n    # check if n is a power of x\n    if x == n:\n        return True\n    # x is a power of n\n    return is_simple_power(x/n, n)\n",
        "test": "assert     is_simple_power(10, 100) == False",
        "num_ids": 873
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    pass\n",
        "test": "assert not iscube(2)",
        "num_ids": 516
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    \n    \"\"\"\n    # Python 2 solution\n    \n    sum_of_primes = 0\n    for x in num:\n        if x in [\"2\",\"3\",\"5\",\"7\"]:\n            sum_of_primes += 1\n        if x == \"B\":\n            sum_of_primes += 1\n        if x == \"D\":\n            sum_of_primes += 1\n    return sum_of_primes\n    \"\"\"\n    \n    # Python 3 solution\n    \n    from collections import Counter\n    \n    c = Counter(num)\n    return sum(v for k, v in c.items() if k in ['2','3','5','7']) + c.get('B',0) + c.get('D',0)\n",
        "test": "assert     hex_key(\"\") == 0",
        "num_ids": 4332
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "    return bin(decimal)\n",
        "test": "assert     decimal_to_binary(0) == '0b0'",
        "num_ids": 962
    },
    {
        "number": 80,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    s = [s[i:i+3] for i in range(len(s) - 3)]\n    return len(s) >= 3 and len(set(s)) == len(s)\n    # return all(a!= b for a, b in zip(s, s[1:]))\n",
        "test": "assert     is_happy(\"aaabbbbbbaaa\") == False",
        "num_ids": 2016
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    grades = [float(g) for g in grades]\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]",
        "num_ids": 2864
    },
    {
        "number": 82,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    s = int(len(string))\n    return s % 2 == 0 and s > 1\n",
        "test": "assert     (prime_length(\"11\") is True)",
        "num_ids": 1801
    },
    {
        "number": 83,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 1\n    elif n > 10:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n    elif n == 10:\n        return starts_one_ends(n-1) + starts_one_ends(n-2) + 1\n    else:\n        return starts_one_ends(n-1)\n",
        "test": "assert         starts_one_ends(1) == 1",
        "num_ids": 1105
    },
    {
        "number": 84,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    \n    binary_string = str(bin(N))[2:]\n    return binary_string\n",
        "test": "assert     solve(0) == \"0\"",
        "num_ids": 1878
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst.insert(i, lst[i])\n        i += 2\n    del lst[0:len(lst):2]\n    return lst",
        "test": "assert     add([]) == []",
        "num_ids": 789
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    l = s.split()\n    l.sort(key=lambda word: word.lower())\n    return \" \".join(l)",
        "test": "assert     anti_shuffle('Hello') == 'Hello'",
        "num_ids": 1011
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert     [(1,0), (2,2), (3,1), (4,4)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 2)",
        "num_ids": 2302
    },
    {
        "number": 88,
        "max_answer_num": 33,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    sorted_array = sorted(array)\n    return sorted_array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1812
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    s = s.lower()\n    r = ''\n    for i in s:\n        if i == 'a':\n            r += 'z'\n        elif i == 'b':\n            r += 'y'\n        elif i == 'c':\n            r += 'x'\n        elif i == 'd':\n            r += 'w'\n        elif i == 'e':\n            r += 'v'\n        elif i == 'f':\n            r += 'u'\n        elif i == 'g':\n            r += 't'\n        elif i == 'h':\n            r +='s'\n        elif i == 'i':\n            r += 'r'\n        elif i == 'j':\n            r += 'q'\n        elif i == 'k':\n            r += 'p'\n        elif i == 'l':\n            r += 'o'\n        elif i =='m':\n            r += 'n'\n        elif i == 'n':\n            r +='m'\n        elif i == 'o':\n            r += 'l'\n        elif i == 'p':\n            r += 'k'\n        elif i == 'q':\n            r += 'j'\n        elif i == 'r':\n            r += 'i'\n        elif i =='s':\n            r += 'h'\n        elif i == 't':\n            r += 'g'\n        elif i == 'u':\n            r += 'f'\n        elif i == 'v':\n            r += 'e'\n        elif i == 'w':\n            r += 'd'\n        elif i == 'x':\n            r += 'c'\n        elif i == 'y':\n            r += 'b'\n        elif i == 'z':\n            r += 'a'\n        else:\n            r += i\n    return r\n",
        "test": "assert     encrypt('y') == 'b'",
        "num_ids": 3089
    },
    {
        "number": 90,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    \n    # First Solution\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n    \n    # Second Solution\n    sorted_list = sorted(lst)\n    return None if len(sorted_list) < 2 else sorted_list[1]\n    \n    # O(n log n) time complexity, O(1) space complexity\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    smallest = min(sorted_list)\n    return sorted_list[sorted_list.index(smallest) + 1]",
        "test": "assert next_smallest([]) == None",
        "num_ids": 1851
    },
    {
        "number": 91,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == \"I\" and len(word) > 3:\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"\")==False",
        "num_ids": 991
    },
    {
        "number": 92,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    elif (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(1.5, 2, 4) == False, \"The first argument is not an integer\"",
        "num_ids": 2225
    },
    {
        "number": 93,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    vowels = \"AEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    result = []\n    \n    for letter in message:\n        if letter in vowels:\n            result.append(2 * letter)\n        else:\n            result.append(letter)\n    \n    return ''.join(result)\n",
        "test": "assert     encode(\"\") == \"\"",
        "num_ids": 2710
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    return sum(map(lambda x: int(x) % max(map(lambda y: int(y), str(x))), lst))",
        "test": "assert     skjkasdkd([7, 99, 95, 101]) == 5",
        "num_ids": 2238
    },
    {
        "number": 95,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if len(dict)==0:\n        return False\n    else:\n        for i in dict.keys():\n            if i.isupper():\n                return False\n            elif i.islower():\n                pass\n            else:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({'a':'A','b':'B'}) == True",
        "num_ids": 1370
    },
    {
        "number": 96,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "    primes = [2]\n    for n in range(3, n+1):\n        for i in range(len(primes)):\n            if n % primes[i] == 0:\n                break\n        else:\n            primes.append(n)\n    return primes\n",
        "test": "assert     count_up_to(10) == [2,3,5,7]",
        "num_ids": 1736
    },
    {
        "number": 97,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    \n    return a * b\n    \n",
        "test": "assert     multiply(0, 12) == 0",
        "num_ids": 1051
    },
    {
        "number": 98,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    # Your code here\n    return 0\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 1110
    },
    {
        "number": 99,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    value = float(value)\n    int_part = int(value)\n    frac_part = value - int_part\n    if frac_part >= 0.5:\n        return int_part + 1\n    else:\n        return int_part\n",
        "test": "assert     closest_integer(\"15\") == 15",
        "num_ids": 871
    },
    {
        "number": 100,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + make_a_pile(n-1)\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 1303
    },
    {
        "number": 101,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    return [x.strip() for x in s.split(',')]\n    \ndef numbers_string(s):\n    \"\"\"\n    You will be given a string of numbers separated by commas or spaces. Your task is\n    to split the string into numbers and return an array of the numbers.\n    \n    For example:\n    numbers_string(\"Hi, my name is John\") == [123, 34, 56]\n    numbers_string(\"One, two, three, four, five, six\") == [123, 34, 56]\n    \"\"\"\n    return [int(x.strip()) for x in s.split(',')]\n",
        "test": "assert     words_string('word') == ['word']",
        "num_ids": 2214
    },
    {
        "number": 102,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    return -1\n",
        "test": "assert     choose_num(9, 9) == -1",
        "num_ids": 1105
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    return ((2 ** m) - 1) - ((2 ** n) - 1)\n",
        "test": "assert     rounded_avg(9, 9) == 0",
        "num_ids": 1963
    },
    {
        "number": 104,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([7, 3, 1, 9]) == [1, 3, 7, 9]",
        "num_ids": 2072
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    sort_arr = sorted(arr)\n    reverse_arr = sort_arr[::-1]\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    new_arr = []\n    for i in reverse_arr:\n        if 1 <= i <= 9:\n            new_arr.append(dic[i])\n    return new_arr\n",
        "test": "assert by_length([]) == []",
        "num_ids": 3015
    },
    {
        "number": 106,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    l = [1] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            l[i] = l[i-1] * i\n        else:\n            l[i] = sum(range(1, i+1))\n    return l\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 1302
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "    return even_odd_palindrome_helper(n, 0)\n",
        "test": "assert     (0, 0) == even_odd_palindrome(11)",
        "num_ids": 975
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    return sum([1 for num in arr if sum(map(int, str(num)[1:])) > 0])\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 1348
    },
    {
        "number": 109,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if not arr:\n        return True\n    elif arr == sorted(arr):\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 1708
    },
    {
        "number": 110,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    if not lst1 or not lst2:\n        return \"NO\"\n    if len(lst1) == 1 or len(lst2) == 1:\n        return \"NO\"\n    elif sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n",
        "test": "assert     exchange([3, 6, 9, 12, 15], [2, 4, 6, 8, 10, 14]) == \"NO\"",
        "num_ids": 1997
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    \n    # Using set to remove duplicates\n    d = {}\n    \n    for i in test.split():\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    return d\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 1367
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    #@start-editable@\n    result = ''\n    for i in range(len(s)):\n        if s[i] in c:\n            result += s[i]\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n",
        "test": "assert     reverse_delete(\"\", \"\") == (\"\", True)",
        "num_ids": 1210
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    return [\"the number of odd elements \" + str(len(str(n))) + \"n the str\" + str(n) + \" of the \" + str(n) + \"nput.\" for n in lst]\n",
        "test": "assert     [odd_count(['111', 'aa1', 'bb']) == [3, 1, 1]]",
        "num_ids": 2182
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "    result = float('inf')\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n        if s < 0:\n            s = 0\n        result = min(result, s)\n    return result",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1066
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "    R, C = len(grid), len(grid[0])\n    count = 0\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 1:\n                count += math.ceil(capacity / grid[r][c]) - 1\n    return count\n",
        "test": "assert     max_fill([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2) == 0",
        "num_ids": 2029
    },
    {
        "number": 116,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    zeros = []\n    ones = []\n    for i in arr:\n        if i == 0:\n            zeros.append(i)\n        else:\n            ones.append(i)\n    return sorted(zeros) + sorted(ones)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 3810
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    words = s.split(\" \")\n    return [w for w in words if len(w) == n and set(w) - vowels == set(w)]\n",
        "test": "assert     select_words(\"\", 1) == []",
        "num_ids": 1205
    },
    {
        "number": 118,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    idx = len(word)\n    vowel = \"\"\n    for i in range(idx-1, -1, -1):\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n    if vowel == \"\":\n        return \"\"\n    i = idx - 1\n    while i > 0:\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"abba\") == 'a'",
        "num_ids": 1524
    },
    {
        "number": 119,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(['(', ')', ')', '()', '((', ')', ')', ')', '()', '()', '(', ')']) == 'No'",
        "num_ids": 1445
    },
    {
        "number": 120,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    arr.sort()\n    return arr[len(arr)-k:len(arr)]\n",
        "test": "assert maximum([], 0) == []",
        "num_ids": 1585
    },
    {
        "number": 121,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2])\n",
        "test": "assert     solution([0,0,0,0]) == 0",
        "num_ids": 1167
    },
    {
        "number": 122,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    count = 0\n    for num in arr:\n        if count == k:\n            break\n        if num >= 100 and num <= 999:\n            count += 1\n    return sum(arr[:k])\n",
        "test": "assert     add_elements([],0) == 0",
        "num_ids": 1748
    },
    {
        "number": 123,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n/2) + [n]\n    return get_odd_collatz(n*3 + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1362
    },
    {
        "number": 124,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    if len(date) > 0:\n        valid_date = False\n        month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n        valid_date = True\n        date_splitted = date.split('-')\n        if len(date_splitted) == 3:\n            if len(date_splitted[0]) == 2 and len(date_splitted[1]) == 2 and len(date_splitted[2]) == 4:\n                if int(date_splitted[0]) < 13 and int(date_splitted[1]) < 13:\n                    if int(date_splitted[1]) in [1, 3, 5, 7, 8, 10, 12]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 31:\n                                return False\n                            if int(date_splitted[1]) == 2:\n                                if int(date_splitted[2]) < 29:\n                                    return False\n                                else:\n                                    return True\n                            else:\n                                return True\n                        else:\n                            return False\n                    elif int(date_splitted[1]) in [4, 6, 9, 11]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 30:\n                                return False\n                            else:\n                                return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     not valid_date('2-13-2014')",
        "num_ids": 2156
    },
    {
        "number": 125,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1271
    },
    {
        "number": 126,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    sorted_lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i]!= sorted_lst[i]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 1148
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return \"NO\"\n",
        "test": "assert     intersection((1, 3), (5, 7)) == 'NO'",
        "num_ids": 1414
    },
    {
        "number": 128,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        if i == 0:\n            result = result * 0\n        elif i < 0:\n            result = result * -1\n        else:\n            result = result * 1\n    return result\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 1271
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "    N = len(grid)\n    f = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                f[i][j] = grid[i][j]\n            elif i == 0:\n                f[i][j] = f[i][j - 1] + grid[i][j]\n            elif j == 0:\n                f[i][j] = f[i - 1][j] + grid[i][j]\n            else:\n                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j]\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4, 6]",
        "num_ids": 3442
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 1]\n        for i in range(n - 2):\n            seq.append(seq[-2] + seq[-1] + seq[-1])\n        return seq + [seq[-1] + seq[-2] + seq[-1]]\n",
        "test": "assert     tri(1)     == [1], '1st triangle number is 1'",
        "num_ids": 2087
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n//10)*(n%10)\n",
        "test": "assert     digits(1) == 1",
        "num_ids": 728
    },
    {
        "number": 132,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        if string[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[') == False",
        "num_ids": 1872
    },
    {
        "number": 133,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    result = 0\n    for i in lst:\n        result += (i ** 2)\n    return result\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == sum([n**2 for n in [1,2,3,4,5,6,7,8,9,10]])",
        "num_ids": 2571
    },
    {
        "number": 134,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in [\" \",\"'\",'\"']:\n        return True\n    else:\n        return False\n",
        "test": "assert     not check_if_last_char_is_a_letter('1!')",
        "num_ids": 1320
    },
    {
        "number": 135,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 1179
    },
    {
        "number": 136,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    result = []\n    for i in lst:\n        if i < 0:\n            result.append(i)\n        elif i > 0:\n            result.append(i)\n    if len(result) == 0:\n        return (None, None)\n    else:\n        return (max(result), min(result))\n",
        "test": "assert     (largest_smallest_integers([]) == (None, None))",
        "num_ids": 2210
    },
    {
        "number": 137,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if type(a) == type(b):\n        return a\n    elif type(a) == str and type(b) == int:\n        return a\n    elif type(a) == int and type(b) == str:\n        return b\n    elif type(a) == float and type(b) == int:\n        return b\n    elif type(a) == int and type(b) == float:\n        return a\n    elif type(a) == str and type(b) == str:\n        return b\n    elif type(a) == str and type(b) == float:\n        return a\n    elif type(a) == float and type(b) == str:\n        return a\n    else:\n        return None\n",
        "test": "assert     compare_one(0.5, 0.5) == 0.5",
        "num_ids": 1703
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    return sum(range(0, n, 2)) + n == n\n",
        "test": "assert     is_equal_to_sum_even(5) == False",
        "num_ids": 1154
    },
    {
        "number": 139,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert     special_factorial(5) == 120",
        "num_ids": 730
    },
    {
        "number": 140,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "    text = text.strip()\n    text = text.replace(\" \", \"_\")\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "test": "assert     fix_spaces('my test') =='my_test'",
        "num_ids": 1536
    },
    {
        "number": 141,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    import re\n    return \"Yes\" if re.match(r'(.*?[0-9])(.*?[A-Za-z])(.*?[.][txt|exe|dll])', file_name) is not None else \"No\"\n",
        "test": "assert     file_name_check('abcd.abc.exe') == 'No'",
        "num_ids": 2044
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    new_lst = [i ** 2 if i % 4 == 0 and i % 3 == 0 else i for i in lst]\n    return sum(new_lst)\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1524
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    return ''.join(sorted(set(sentence.split(' ')), key=len)[::-1])\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 1378
    },
    {
        "number": 144,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    return eval(str(x) + \"/\" + str(n)) == int(eval(str(x) + \"/\" + str(n)))\n",
        "test": "assert     not simplify(\"3/5\", \"2/3\")",
        "num_ids": 1314
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "test": "assert     order_by_points([7, 8, 1, 4, 5, 9, 2, 6, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"error in order_by_points\"",
        "num_ids": 2115
    },
    {
        "number": 146,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return len([x for x in nums if x > 10 and 1 in [int(y) for y in str(x)] and 3 in [int(y) for y in str(x)] and 5 in [int(y) for y in str(x)] and 7 in [int(y) for y in str(x)] and 9 in [int(y) for y in str(x)]])\n",
        "test": "assert     specialFilter([1,2,3,4,5]) ==     0",
        "num_ids": 1221
    },
    {
        "number": 147,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return sum(i*i - i + 1 for i in range(1, n)) // 3\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 1406
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    if (planet1==\"Mercury\" and planet2==\"Venus\") or (planet1==\"Venus\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Venus\" and planet2==\"Mercury\") or (planet1==\"Mercury\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Mercury\",\"Earth\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Earth\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Jupiter\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Neptune\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\"):\n        return (\"Earth\",\"Jupiter\",\"Mars\",\"Saturn\",\"Uranus\")\n    else:\n        return ()\n",
        "test": "assert     (bf('Mercury', 'Venus'))     == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')",
        "num_ids": 3590
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    return sorted(lst, key=lambda s: (len(s), s))\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 3626
    },
    {
        "number": 150,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n        \n    \n",
        "test": "assert     x_or_y(2, 2, 2) == 2",
        "num_ids": 869
    },
    {
        "number": 151,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return sum([x**2 for x in lst if x%2!=0])\n",
        "test": "assert     double_the_difference([]) == 0, \"Wrong result for an empty list\"",
        "num_ids": 1629
    },
    {
        "number": 152,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    \n    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i] - game[i]))\n    return score\n",
        "test": "assert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\"",
        "num_ids": 3601
    },
    {
        "number": 153,
        "max_answer_num": 27,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "    strengths = []\n    for extension in extensions:\n        cap_diff = 0\n        lower_diff = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_diff += 1\n            elif letter.islower():\n                lower_diff += 1\n        strengths.append(cap_diff - lower_diff)\n    return '{0}.{1}'.format(class_name, extensions[strengths.index(max(strengths))])\n    \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Car', ['Cab', 'StuFfed', 'Belt']))\nprint(Strongest_Extension('Bird', ['Endless', 'Cow', 'StuFfed']))\nprint(Strongest_Extension('Animal', ['Endless', 'Cow', 'StuFfed', 'Ate']))\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"First\"",
        "num_ids": 3005
    },
    {
        "number": 154,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    if a in b:\n        return True\n    for i in range(len(b)):\n        if b[i:] == a[-len(b):]:\n            return True\n        if b[i:] + b[:i] == a:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('foo', 'bar') == False",
        "num_ids": 1123
    },
    {
        "number": 155,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if num < 0:\n        num *= -1\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return (even, odd)\n",
        "test": "assert     even_odd_count(0) == (0, 0)",
        "num_ids": 1244
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"number is not an integer in range 1-1000\")\n    if number == 1:\n        return \"i\"\n    roman_numeral = \"\"\n    num_to_roman_dict = {\"1\":\"i\", \"2\":\"ii\", \"3\":\"iii\", \"4\":\"iv\", \"5\":\"v\",\n                         \"6\":\"vi\", \"7\":\"vii\", \"8\":\"viii\", \"9\":\"ix\"}\n    temp_num = number\n    while temp_num!= 0:\n        for roman_numeral_key in num_to_roman_dict.keys():\n            while temp_num >= int(roman_numeral_key):\n                roman_numeral += num_to_roman_dict[roman_numeral_key]\n                temp_num -= int(roman_numeral_key)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 1275
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(2, 1, 3) == False",
        "num_ids": 1218
    },
    {
        "number": 158,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\"]) == \"ghi\"",
        "num_ids": 1869
    },
    {
        "number": 159,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    \n    if number >= need:\n        return [need, 0]\n    \n    return [number, need-number]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 892
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "test": "assert     do_algebra(['//'], [4, 4, 4, 4]) == 1",
        "num_ids": 2137
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].upper() if s[i].isupper() else s[i].lower()\n    return \"\".join(s)\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 1659
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    if len(text) == 0:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 1176
    },
    {
        "number": 163,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return [x for x in range(a, b) if x % 2 == 0]",
        "test": "assert     generate_integers(2, 5) == [2, 4]",
        "num_ids": 1456
    }
]