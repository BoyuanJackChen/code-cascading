[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for idx_a, a in enumerate(numbers):\n        for idx_b, b in enumerate(numbers[idx_a + 1:]):\n            if (a - b) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4], 1.0001) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append('(')\n        elif paren_string[i] == ')':\n            stack.pop()\n        elif not stack and paren_string[i]!='':\n            groups.append(paren_string[i:])\n        i += 1\n    return groups\n",
        "test": "assert     separate_paren_groups('())(') == ['(())(', '()())']"
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(12345.0) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    total = 0\n    for op in operations:\n        total += op\n        if total < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if numbers:\n        return sum([abs(x-numbers.mean()) for x in numbers])/len(numbers)\n    else:\n        return 0\n",
        "test": "assert     mean_absolute_deviation([0, 0, 0, 0, 0, 0, 0]) == 0"
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return numbers[::2] + [delimeter] * (len(numbers) % 2)\n",
        "test": "assert     intersperse([], 5) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    max_stack = 0\n    stack = []\n    char_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            char_stack.append(paren_string[stack.pop()])\n        elif paren_string[i] =='':\n            max_stack = max(max_stack, len(stack))\n",
        "test": "assert     parse_nested_parens('((())') == [3, 2, 1]"
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"a\"], \"a\") == [\"a\", \"a\"]"
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    product = 1\n    sum_of_numbers = 0\n    for number in numbers:\n        product *= number\n        sum_of_numbers += number\n    return (sum_of_numbers, product)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(numbers) == 0:\n        return []\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[i - 1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[i - 1])\n    return result\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not string:\n        return string\n    for i in range(len(string), 1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1] + string[i:]\n    return string\n",
        "test": "assert     is_palindrome(\"madam\")"
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return ''.join(['0' if a[i]!= b[i] else '1' for i in range(len(a))])\n",
        "test": "assert     string_xor('11100', '00111') == '00100', \"incorrect result for string_xor\""
    },
    {
        "number": 12,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([\"hello\", \"hi\", \"go\"]) == \"hello\""
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(3, 8) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('ab') == ['a', 'ab']"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return''.join(result)\n",
        "test": "assert     string_sequence(-1) == ''"
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # TODO\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n",
        "test": "assert     parse_music('1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o1o"
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('some text','some') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('0 9') == '0 9'"
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    first, second = sorted(numbers[:2])\n    third = first + (second - first) * (1 - abs(first - second))\n    return first, second\n",
        "test": "assert     find_closest_elements([1, 1, 3]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    max_num = max(numbers)\n    min_num = min(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"a\") == 1"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i = i - 1\n    return 1\n",
        "test": "assert     largest_divisor(9) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    factors = []\n    p = 2\n    while n > 1:\n        i = 0\n        while n % p == 0:\n            i += 1\n            n /= p\n        if i!= 0:\n            factors.append(p)\n            if i!= 1:\n                factors.append(i)\n        p += 1\n",
        "test": "assert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997] == factorize(3027)"
    },
    {
        "number": 26,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    if len(numbers) < 2:\n        return numbers\n    \n    new_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in new_list:\n            new_list.append(numbers[i])\n    return new_list\n",
        "test": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('hello world') == 'HELLO WORLD'"
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"])         == \"HelloWorld\", \"HelloWorld\""
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"a\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     get_positive([0, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     is_prime(2) == True"
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    assert all(x % 2 == 0 for x in xs) and max(xs) > 0, \"list xs must be even and have a non zero element\"\n    # Due to the assumption, the number of non zero element must be even\n    N = len(xs) // 2\n    assert len(xs) % 2 == 0, \"list xs must be even\"\n    f = lambda x: poly(xs, x)\n    a = list(range(N))\n    b = list(reversed(range(N)))\n    for i in range(N):\n        c = a[i]\n        a[i] = b[i]\n        b[i] = c\n    # Here the idea is to evaluate a and b in a way that both can be treated as polynomial.\n    # When a or b is negative, the evaluation is taken care of by the fact that the sum is monotonically increasing\n    # and all negative numbers are replaced with their corresponding positive values.\n    # After this step, we can do algebraic rearrangement to get a^2 - b^2 = -4 * a * b\n    # Now to get the real solutions, rearrange a and b to\n    # a = (a, -a) and b = (b, -b)\n    # and a and b become monotonic decreasing, as a*b < 0\n    # We can get the solution by finding the roots of the above equation\n    a = tuple(reversed(a))\n    b = tuple(reversed(b))\n    pos_a = [a for a in a if a >= 0]\n    pos_b = [b for b in b if b >= 0]\n    if len(pos_a)!= len(pos_b):\n        pos_a, pos_b = pos_b, pos_a\n    pos_a = tuple(pos_a)\n    pos_b = tuple(pos_b)\n    # Now, the polynomial itself is monotonic decreasing, so we can now use\n    # simple bisection algorithm to find the zero point\n    lo = 0\n    hi = len(pos_a)\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if f(pos_a[mid]) * f(pos_b[mid]) < 0:\n            lo = mid\n        else:\n            hi = mid\n    return pos_a[lo]\n",
        "test": "assert     poly([0, 1, 0, 0, 0], 0) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in l:\n        if i%3 == 0:\n            count += 1\n    l2 = []\n    for i in range(count):\n        l2.append(l[i])\n    count2 = 0\n    for i in range(count, len(l)):\n        l2.append(l[i])\n    return l2\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7] == unique([1, 2, 3, 4, 5, 6, 7])"
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    assert isinstance(l, list), 'l must be a list'\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([3,2,1]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    n_string = str(n)\n    n_length = len(n_string)\n    sevens = n_string.count('7')\n    threes = n_string.count('3')\n    \n    return sevens * (threes - n_length)\n",
        "test": "assert     fizz_buzz(0) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Your code here\n    return l[::2]+sorted(l[1::2])\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    # for each group of 3, find first 3 characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # for each group, find the 3 characters at the end.\n    groups = [group[-3:] + group[:-3] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    else:\n        return fib(n)\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(l) < 3:\n        return False\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    if len(d)!= 3:\n        return False\n    if d.values() == [1, 1, 1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     triples_sum_to_zero([]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return 0",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]"
    },
    {
        "number": 43,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        s = l[i] + l[j]\n        if s < 0:\n            i += 1\n        elif s > 0:\n            j -= 1\n        else:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    if x < 0:\n        x = x * (-1)\n    x_list = []\n    while x > 0:\n        x_list.append(str(x % base))\n        x //= base\n    x_list.reverse()\n    return \"\".join(x_list)\n",
        "test": "assert     change_base(12, 16) == '12'"
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    area = (a * h)/2\n    return area\n",
        "test": "assert     triangle_area(1, 2) == 1.0"
    },
    {
        "number": 46,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[(n - 1) // 2] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[(n - 1) // 2]\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "test": "assert     is_palindrome(\"a\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return (n % p + p) % p\n",
        "test": "assert     modp(2, 100) == 2"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"xqsekolmvhf\") == \"qshxqse\""
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([x for x in text if x not in vowels])\n",
        "test": "assert     remove_vowels(\"Hello World!\") == \"Hll Wrld!\""
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return all(n < t for n in l)\n",
        "test": "assert     below_threshold([-1, 3, 4, 7], 3) == False"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars(\"hello\", \"hello\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    #could be optimised to improve time complexity\n    opening_bracket_pos = brackets.find(\"<\")\n    closing_bracket_pos = -1\n    while opening_bracket_pos >= 0:\n        closing_bracket_pos = brackets.find(\">\", opening_bracket_pos)\n        if closing_bracket_pos < 0:\n            return False\n        if closing_bracket_pos < opening_bracket_pos:\n            return False\n        opening_bracket_pos = brackets.find(\"<\", closing_bracket_pos + 1)\n    return True\n",
        "test": "assert     correct_bracketing('[]') == True"
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
        "test": "assert not monotonic([1, 2, 3, 3, 2, 1])"
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 4]) == [1, 2]"
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    assert n > 1\n    max_pf = 1\n    while n % 2 == 0:\n        max_pf = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_pf = i\n            n //= i\n    if n > 2:\n        max_pf = n\n    return max_pf\n",
        "test": "assert     largest_prime_factor(4) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n    \n    \ndef sum_to_n2(n):\n    return sum(range(n + 1))\n    \n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"()\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    deriv = []\n    for i in range(len(xs)):\n        deriv.append(i * xs[i])\n    return deriv\n",
        "test": "assert     derivative([1, 2, 3])    == [0, 2, 6], \"actual: {}\".format(derivative([1, 2, 3]))"
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return len([c for c in s if c in \"aeiouyAEIOUY\"]) + (len([c for c in s[:-1] if c == \"y\"]) if s[-1] == \"y\" else 0)\n",
        "test": "assert     vowels_count('book') == 2"
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # Make shift a multiple of the number of digits\n    shift %= len(str(x))\n    # Split the integer into digits and reverse the digits\n    digits = [int(d) for d in str(x)]\n    digits.reverse()\n    # Adjust the shift to the left side of the digits\n    shift += len(digits)\n    # Add the digits together to form the new integer\n    total = sum(d * 10**i for i, d in enumerate(digits))\n    # Right-shift the total by shift and return the result\n    return str(total)[-shift:]\n",
        "test": "assert     circular_shift(12345, 9) == '12345'"
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    s = s.upper()\n    return sum(ord(c) - 64 for c in s)\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if(s.find(\"apples\") == -1):\n        return 0\n    elif(s.find(\"oranges\") == -1):\n        return 0\n    else:\n        return int(n) - int(s[:s.find(\"apples\")]) - int(s[s.find(\"apples\") + 5 : s.find(\"oranges\")])\n",
        "test": "assert     fruit_distribution(s = \"0 0 4 0\", n = 5) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # find the minimum even value and its index\n    # create a list of tuples [(even_value, index)]\n    # sort the list by the even_value field\n    # return the second element of the sorted list\n    if not arr:\n        return []\n    minimum = arr[0]\n    minimum_index = 0\n    even_list = [(a, i) for i, a in enumerate(arr) if a % 2 == 0]\n    even_list.sort(key=lambda x: x[0])\n    return even_list[1]\n",
        "test": "assert     [1] == pluck([2, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 1, 0, 1, 1, 0, 2])"
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # using hash table to store the frequency of numbers\n    freq_map = {}\n    # find the first number which is greater than 0\n    for num in lst:\n        if num > 0:\n            break\n    # no number greater than 0, return -1\n    else:\n        return -1\n    # calculate the frequency of each number\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    # find the maximum number which frequency is greater than or equal to the number\n    for num in lst:\n        if freq_map[num] >= num:\n            return num\n    return -1\n",
        "test": "assert "
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not lst:\n        return []\n    lst = sorted(lst)\n    return lst\n",
        "test": "assert     strange_sort_list([])                 == []"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if (a + b <= c) or (b + c <= a) or (a + c <= b):\n        return -1\n    else:\n        return round((a*b*c)**(1/2), 2)\n",
        "test": "assert     triangle_area(1, 0, 0)         ==    -1.0"
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    def is_palindrome(lst):\n        l = len(lst)\n        for i in range(int(l/2)):\n            if lst[i]!= lst[l-i-1]:\n                return False\n        return True\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([\"a\",\"b\",\"c\"], 10) == False"
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    count = 0\n    for i in range(len(arr)//2):\n        if arr[i]!= arr[-i - 1]:\n            count += 1\n    return count\n",
        "test": "assert     smallest_change([1,2,3,4,5,6,7]) == 3"
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # list_a = len(lst1)\n    # list_b = len(lst2)\n    # if list_a == list_b:\n    #     return lst1\n    # else:\n    #     if list_a < list_b:\n    #         return lst1\n    #     else:\n    #         return lst2\n    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_multiply_prime(12) == False"
    },
    {
        "number": 76,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 1:\n        return True\n    if x < n:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n",
        "test": "assert     is_simple_power(1**2, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return a**(1.0/3.0) == int(a**(1.0/3.0))\n",
        "test": "assert not iscube(3)"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    pass",
        "test": "assert     hex_key('B') == 1"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if not isinstance(decimal, int):\n        raise TypeError('Please enter a valid number')\n    if not isinstance(decimal, int):\n        raise TypeError('Please enter a valid number')\n",
        "test": "assert         decimal_to_binary(3) == '00000000000000000000000000000010'"
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "test": "assert is_happy(\"ab\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']"
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return (len(string) == len(set(string)))\n",
        "test": "assert     prime_length(\"world\") is True"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    count = 0\n    for i in range(1, 10**(n-1)):\n        start = i // 10**(n-1)\n        end = i % 10**(n-1)\n        if start == 1 or end == 1:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if (N == 0):\n        return \"0\"\n    return solve(N//2) + str(N % 2)\n",
        "test": "assert     solve(13) == \"100\""
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    #lst = [4, 2, 6, 7]\n    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total\n",
        "test": "assert add([]) == 0"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(''.join(sorted(word)))\n    return''.join(new_words)\n",
        "test": "assert     anti_shuffle(    \"a b c d\") == \"a b c d\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sorted([(i, j) for i, row in enumerate(lst) for j, _ in enumerate(row) if lst[i][j] == x])\n",
        "test": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 1) == [(1, 1), (1, 2), (1, 3), (0, 0), (0, 1), (0, 2)]"
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    odd, even = [], []\n    for num in array:\n        if (num + array[0]) % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even + odd\n",
        "test": "assert "
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     encrypt('abcdef') == 'eafbcd'"
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if not lst: return None\n    if len(lst) == 1: return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    count = 0\n    for word in S.split():\n        if word == 'I':\n            count += 1\n    return count\n",
        "test": "assert         is_bored(\"I am I.\") == True"
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if type(x) is not int or type(y) is not int or type(z) is not int:\n        return False\n    elif (x+y+z) % 1 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(0, 0, 0) == True"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    vowels = 'AEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_letter = chr(ord(letter)+2)\n            encoded_message += new_letter\n        else:\n            encoded_message += letter\n    return encoded_message\n",
        "test": "assert     encode(\"ALLEGE???\") == 'ALL gge??'"
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    maxp = max(lst)\n    digits = [int(i) for i in str(maxp)]\n    return sum(digits)\n",
        "test": "assert     skjkasdkd([5, 7, 11]) == 2"
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not dict:\n        return False\n    else:\n        return all(type(k) is str for k in dict.keys()) and all(type(v) is str for v in dict.values())\n",
        "test": "assert     check_dict_case({}) is False"
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    numbers = range(2, n + 1)\n    results = []\n    for i in numbers:\n        if i == 2:\n            results.append(2)\n        elif i % 2 == 0:\n            continue\n        elif i > 10:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                results.append(i)\n    return results\n",
        "test": "assert     count_up_to(8) == [2, 3, 5, 7, 11]"
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum([int(x) * int(y) for x, y in zip(str(a), str(b))])\n",
        "test": "assert     multiply(0, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if (ord(s[i]) >= 65) and (ord(s[i]) <= 90):\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"abc\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     closest_integer(\"-14.8\") == -15"
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    l = [n]\n    while n > 1:\n        n -= 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n // 2) + 1\n        l.append(n)\n    return l\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return s.split(\", \")\n",
        "test": "assert     words_string('hello, a, world') == ['hello', 'a', 'world']"
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return -1\n",
        "test": "assert choose_num(1, 5) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if n > m:\n        return -1\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    return sorted([i for i in x if i % 2!= 0])\n",
        "test": "assert     unique_digits([7, 3, 2, 1]) == [1, 3, 7]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    # Check for empty arrays\n    if len(arr) == 0:\n        return []\n    \n    # Sorts the array\n    arr.sort()\n    \n    # Breaks down the array into a list of numbers 1-9\n    numbers = []\n    for i in range(len(arr)):\n        if arr[i] >= 1 and arr[i] <= 9:\n            numbers.append(arr[i])\n    \n    # Sort the numbers array\n    numbers.sort()\n    \n    # Makes the result\n    result = []\n    for number in numbers:\n        result.append(names[number-1])\n    \n    return result\n",
        "test": "assert     by_length([10,11,12,13,14,15]) == \"TenElevenTwelveThirteenFourteenFifteen\""
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        l = f(n-1)\n        l2 = []\n        for i in range(1,len(l)):\n            if i%2 == 0:\n                l2.append(l[i]*l[i])\n            else:\n                l2.append(l[i]+sum(l[:i]))\n        l2.append(l[-1])\n        return l2\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return sum([1 for x in range(1, n) if x % 2 == 0 and is_palindrome(x)]) * 2, \\\n           sum([1 for x in range(1, n) if x % 2 == 1 and is_palindrome(x)])\n",
        "test": "assert     even_odd_palindrome(1) == (0,0)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    total = 0\n    for i in arr:\n        if i > 0:\n            tmp = i\n        else:\n            tmp = -1 * i\n        while tmp > 0:\n            total += tmp % 10\n            tmp = int(tmp / 10)\n    return total\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    if not arr:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    def is_even(n):\n        return n%2==0\n    return 'YES' if all(is_even(n) for n in lst1) and all(is_even(n) for n in lst2) else 'NO'\n",
        "test": "assert     exchange([1,2,3,4,5,6,7,8,9], [2,10,11,12,13,14,15,16,17,18,19]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if not test:\n        return {}\n    words = test.split()\n    hash_map = {}\n    for word in words:\n        for letter in word:\n            if letter in hash_map:\n                hash_map[letter] += 1\n            else:\n                hash_map[letter] = 1\n    return hash_map\n",
        "test": "assert     histogram(\"\") == {}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    for char in c:\n        s = s.replace(char,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete(\"abcd\", \"abc\") == (\"dcba\", True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    results = []\n    for string in lst:\n        digit_sum = sum(1 for digit in string if int(digit) % 2)\n        results.append(\"the number of odd elements \" + str(digit_sum) + \"n the str\" +\n                        str(string) + \" of the \" + str(len(string)) + \"n input.\")\n    return results\n",
        "test": "assert     odd_count(['11', '22', '33', '44']) == [1, 2, 3, 4]"
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = 0\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum < 0:\n            curr_sum = 0\n        result = max(result, curr_sum)\n    return result\n",
        "test": "assert minSubArraySum([1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    max_filled = max(map(max, grid))\n    \n    result = 0\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                for i in range(max_filled):\n                    if grid[row][col] == 1:\n                        if row + i < rows:\n                            grid[row + i][col] -= 1\n                        else:\n                            grid[0][col] -= 1\n                        if col + i < cols:\n                            grid[row][col + i] -= 1\n                        else:\n                            grid[row][0] -= 1\n                        result += 1\n    return result\n",
        "test": "assert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 9) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "test": "assert     sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]"
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return []\n",
        "test": "assert     select_words(\"\", 0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if len(word) < 1:\n        return ''\n    \n    \n    vowels = 'aeiou'\n    index = len(word) - 1\n    \n    while index > 0:\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return ''\n",
        "test": "assert     get_closest_vowel(\"gravitational\") == 'a'"
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     match_parens(['(((())', '((()']) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    # Let the two-pointer be i, j. A list of size k with the max k numbers is \n    # the longest list that ends at arr[i] and starts at arr[j]. We keep moving i\n    # to the right until we find a number that is larger than the smallest number\n    # in the list. When we find a number, we increment the j pointer to the right. \n    # We keep moving j to the left until we find a number that is smaller than the\n    # largest number in the list. The max_list will be the list with the maximum\n    # k numbers.\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    i, j = 0, len(arr) - 1\n    max_list = []\n    while j - i + 1 > k:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n    while len(max_list) < k:\n        if arr[i] > arr[j]:\n            max_list.append(arr[i])\n            i += 1\n        else:\n            max_list.append(arr[j])\n            j -= 1\n    return max_list\n",
        "test": "assert     maximum([1, 2, 3, 4, 0], 3) == [3, 4, 0]"
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            if i % 2 == 0:\n                sum += lst[i]\n    return sum\n",
        "test": "assert     solution([1,2,3,5,6,7,8]) == 4"
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    _sum = 0\n    for i in arr[:k]:\n        _sum += i\n    return _sum\n",
        "test": "assert     add_elements([], 0) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return [n] + get_odd_collatz(n-1)\n    else:\n        return [n] + get_odd_collatz(n/2)\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    import re\n    date_pattern = re.compile('([0-9]{2})-([0-9]{2})-([0-9]{4})')\n    date_results = date_pattern.search(date)\n    if date_results:\n        date_converted = list(map(int, date_results.groups()))\n        return True if (\n            date_converted[0] < 1 or date_converted[0] > 31\n            or date_converted[1] < 1 or date_converted[1] > 12\n            or date_converted[2] < 1 or date_converted[2] > 2020\n        ) and (\n            date_converted[0] < 1 or date_converted[0] > 29\n            or date_converted[1] < 1 or date_converted[1] > 12\n        ) else False\n    return False\n",
        "test": "assert     valid_date(\"1-1-2011\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    lista = txt.split()\n    return lista\n",
        "test": "assert     split_words('a') == ['a']"
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    lst = [int(i) for i in lst]\n    if len(lst) < 2: return True\n    if lst[0] > lst[1]: return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]: return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    def isPrime(x):\n        if x <= 1:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x**0.5 + 1), 2):\n            if x % i == 0:\n                return False\n        return True\n    \n    def isIntersect(interval1, interval2):\n        return interval1[0] <= interval2[1] and interval1[1] >= interval2[0]\n    \n    def getIntersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    \n    if not isIntersect(interval1, interval2):\n        return \"NO\"\n    \n    return \"YES\" if isPrime(abs(interval1[1] - interval1[0])) else \"NO\"",
        "test": "assert     intersection((0, 1), (1, 5)) == 'NO'"
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if arr:\n        return sum(int(i) * (1 if i > 0 else -1) for i in arr)\n    return None\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    def isValid(row, col, grid):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    l = [1, 3, 1]\n    if n < 3:\n        return l[:n + 1]\n    for _ in range(3, n + 1):\n        l.append(sum(l[-3:]))\n    return l",
        "test": "assert     tri(4) == 3"
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    num = n\n    product = 1\n    while num > 0:\n        num, i = divmod(num, 10)\n        if i % 2 == 1:\n            product *= i\n    return product\n",
        "test": "assert     digits(1234)     == 1 * 2 * 3 * 4"
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    brackets = []\n    for char in string:\n        if char == '[' or char == ']':\n            brackets.append(char)\n        elif len(brackets) > 0 and char == brackets[-1]:\n            brackets.pop()\n        else:\n            return False\n    return len(brackets) == 0\n    \n",
        "test": "assert     is_nested(\"(()\") == False"
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sum(x**2 for x in lst)\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if txt == \"\":\n        return False\n    return not (txt[-1].isalpha() and txt[-2].isalpha())\n    pass\n",
        "test": "assert check_if_last_char_is_a_letter('abcdefghi') == False"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            if d[arr[i]] < i - 1:\n                return i - 1\n    return -1\n",
        "test": "assert     can_arrange([1, 2, 3, 4, 5, 6]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    lst = [x for x in lst if x < 0]\n    lst = [x for x in lst if x > 0]\n    return (max(lst), min(lst)) if lst else (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)):\n        return a if a > b else b\n    elif isinstance(b, (int, float)):\n        return b if a > b else a\n",
        "test": "assert         compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum(i for i in range(4,n+1,2) if n-i%2==0) == n\n",
        "test": "assert     is_equal_to_sum_even(2) == False"
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n",
        "test": "assert     special_factorial(5)     == 120, \"Wrong answer\""
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if text.count(\" \") == 1:\n        return text.replace(\" \",\"_\")\n    elif text.count(\" \") == 2:\n        return text.replace(\" \",\"-\")\n    else:\n        return text\n",
        "test": "assert         fix_spaces(\"\") == \"\""
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return \"Yes\" if re.match(r\"^[a-zA-Z][a-zA-Z0-9]?\\.?[a-zA-Z0-9]+\\.[a-zA-Z][a-zA-Z0-9]+$\", file_name) and len(re.findall(r\"\\d\", file_name)) == 0 and file_name.count(\".\") == 1 and re.match(r\"^[a-zA-Z]+[a-zA-Z0-9]+\\.[a-zA-Z][a-zA-Z0-9]+$\", file_name) and len(re.findall(r\"[a-zA-Z]+[a-zA-Z0-9]+\\.[a-zA-Z][a-zA-Z0-9]+\", file_name)) == 2 and (file_name.endswith(\"exe\") or file_name.endswith(\"dll\")) else \"No\"\n",
        "test": "assert     file_name_check('2.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum([i**2 if i%3==0 else i**3 for i in lst])\n",
        "test": "assert     sum_squares(range(2,10)) == sum([i**4 for i in range(2,10)])"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return \"\".join([x for x in sentence.split() if len(x) > 2 and is_prime(len(x))])\n",
        "test": "assert     words_in_sentence(\"Hello World \") == \"WoHll Do\", \"hello world \""
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return True\n",
        "test": "assert     simplify('1/2', '1/2') == True"
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums",
        "test": "assert     order_by_points([3, 4, 5, 2, 3, 1]) == [1, 2, 3, 3, 4, 5]"
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return sum(1 for n in nums if n > 10 and (n % 10) % 2 == 1 and (n // 10) % 2 == 1)\n",
        "test": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    max_triples = 0\n    a = [i * i - i + 1 for i in range(1, n)]\n    for i in range(1, n):\n        for j in range(i):\n            if (a[i] + a[j] + a[n - 1]) % 3 == 0:\n                max_triples += 1\n    return max_triples\n",
        "test": "assert "
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        # See what are the shortest distance from planet1 to planet2, \n        # and which planet is the closest to the sun\n        distances = [bf_distance(planet1, planet2), bf_distance(planet2, \"Sun\")]\n        min_dist, planet_of_min_dist = min(zip(distances, planets), key=lambda pair: pair[0])\n        if planet1 == planet2:\n            return (planet1,)\n        else:\n            if planet_of_min_dist == planet1:\n                return tuple([planet for planet in planets if planet!= planet1])\n            else:\n                return tuple([planet for planet in planets if planet!= planet2])",
        "test": "assert     bf('Jupiter', 'Saturn') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return sorted([x for x in lst if len(x)%2==0], key=len)\n",
        "test": "assert     sorted_list_sum(['a', 'abc', 'ab', 'b', 'cd', 'zzz', 'zzz', 'zzz', 'zzz']) == ['a', 'abc', 'ab', 'b', 'cd', 'zzz', 'zzz', 'zzz']"
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if n % 2 == 0 and n > 2:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(3, 3, 3) == 3"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    total = 0\n    for i in lst:\n        if isinstance(i, int):\n            if i % 2!= 0:\n                total += i**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0, 'incorrect'"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "test": "assert     compare([0,1,2,3,4,5], [0,0,0,0,0,0]) == [0,1,2,3,4,5]"
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    class_caps = [c for c in class_name if c.isupper()]\n    class_sm = [c for c in class_name if c.islower()]\n    extension_caps = [e for e in extensions if e.isupper()]\n    extension_sm = [e for e in extensions if e.islower()]\n    class_strength = sum(i > j for i, j in zip(class_caps, class_sm)) - sum(i < j for i, j in zip(class_caps, class_sm))\n    extension_strength = sum(i > j for i, j in zip(extension_caps, extension_sm)) - sum(i < j for i, j in zip(extension_caps, extension_sm))\n    if extension_strength > class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n    elif extension_strength < class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[-1])\n    else:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\""
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if a==b:\n        return True\n    \n    for i in range(1,len(b)):\n        if b[i:] in a and b[:i] in a:\n            return True\n    \n    return False\n",
        "test": "assert     cycpattern_check('lol', 'oll') == True"
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return len(str(abs(num))), len(str(abs(num))) % 2\n",
        "test": "assert     even_odd_count(10) == (2, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # NOTE: this solution iterates through the whole range of roman numerals,\n    # and therefore may be inefficient.\n    \n    assert 1 <= number <= 1000, 'Argument must be between 1 and 1000'\n    numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n    result = ''\n    for (rom, mini) in numerals:\n        while number >= rom:\n            result += mini\n            number -= rom\n    return result\n",
        "test": "assert     int_to_mini_roman(4) == \"IV\""
    },
    {
        "number": 157,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if a > b and a > c:\n        a, b, c = b, a, c\n    if b > c and b > a:\n        b, a, c = a, c, b\n    if c > a and c > b:\n        c, b, a = a, b, c\n    if a**2 == b**2 + c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert not right_angle_triangle(3, 4, 6)"
    },
    {
        "number": 158,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    max_val = -1\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_val:\n            max_val = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"\", \"\", \"\", \"\", \"\"]) == \"\""
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    total, left = 0, 0\n    if need > remaining:\n        total = remaining\n    else:\n        total = need\n        left = remaining - need\n    return [total, left]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = 0\n    for i in range(len(operand)-1):\n        result = result + (operator[i] * operand[i])\n",
        "test": "assert do_algebra(['*', '+'], [5, -3]) == 2"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return s.translate(s.maketrans(\"1234567890\", \"9876543210\"))\n",
        "test": "assert     solve(\"\") == \"\", \"test4\""
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if not text:\n        return None\n    try:\n        return hashlib.md5(text).hexdigest()\n    except:\n        print(\"Error: Non-string value for text.\")\n        return None\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    #create list of integers between a and b\n    results = []\n    if a <= b:\n        for i in range(a, b+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n    else:\n        for i in range(b, a+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n",
        "test": "assert     generate_integers(2, 100) == list(range(2, 101, 2))"
    }
]