[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for i, first_num in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            if first_num!= numbers[j] and abs(first_num - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     not has_close_elements([0.1, 0.5, 0.9], 0.1)",
        "num_ids": 469
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    paren_stack = []\n    brace_stack = []\n    parens = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    open_braces = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    string_list = paren_string.split()\n    for char in string_list:\n        if char in open_braces:\n            brace_stack.append(char)\n        elif char in parens:\n            if not brace_stack:\n                paren_stack.append(char)\n            elif brace_stack[-1] == parens[char]:\n                paren_stack.append(char)\n                brace_stack.pop()\n            elif brace_stack[-1] == open_braces[char]:\n                brace_stack.pop()\n            else:\n                return []\n    if brace_stack:\n        return []\n    else:\n        return [''.join(paren_stack)]\n",
        "test": "assert     separate_paren_groups(\"a(bc(de(f(g(h)))i)j)\") == ['a(bc(de(f(g(h))))i)', '(j)']",
        "num_ids": 942
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(0.5) == 0.5",
        "num_ids": 304
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if any(operations[i] < 0 for i in range(1, len(operations))):\n        return True\n    else:\n        return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 501
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    n = len(numbers)\n    # The first value is the mean of the sample\n    # Use the first value to normalize the sample to the mean of 0\n    # All the other values are compared to the mean\n    # For MAD, the mean is subtracted from each value and then the absolute value is calculated\n    # Then the mean of the absolute values is taken\n    # The final result is the mean absolute deviation\n    mad = sum(abs(i - numbers[0]) for i in numbers) / (n - 1)\n    return mad\n",
        "test": "assert     mean_absolute_deviation([0, 0, 0, 0, 0]) == 0",
        "num_ids": 428
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    result = []\n    for i in range(0, len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n",
        "test": "assert     intersperse([0, 1, 2, 3, 4, 5], 3) == [0, 3, 3, 6, 6, 7]",
        "num_ids": 463
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    stack = []\n    current_level = 0\n    max_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(current_level)\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif paren == ')':\n            stack.pop()\n            current_level = stack[-1] if len(stack) > 0 else 0\n",
        "test": "assert     parse_nested_parens(\"((()))\") == [1,1]",
        "num_ids": 1012
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"a\"], \"a\") == [\"a\", \"a\"]",
        "num_ids": 396
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    product = 1\n    sum_of_numbers = 0\n    for number in numbers:\n        product *= number\n        sum_of_numbers += number\n    return (sum_of_numbers, product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 364
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if len(numbers) == 0:\n        return []\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[i - 1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[i - 1])\n    return result\n",
        "test": "assert     [3, 0, 1, 0, 2, 3, 3, 4, 3, 4, 5, 3, 3, 3, 3]",
        "num_ids": 766
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if len(string) < 2:\n        return string\n    elif is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[i:]\n    return string\n",
        "test": "assert     is_palindrome(\"madam\")",
        "num_ids": 398
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return str(''.join(chr(int(a, 2) ^ int(b, 2)) for a, b in zip(a, b)))\n",
        "test": "assert     string_xor('11010100010110100', '1110111010100101') == \\",
        "num_ids": 562
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([\"hello\", \"hi\", \"go\"]) == \"hello\"",
        "num_ids": 367
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(3, 8) == 1",
        "num_ids": 352
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('ab') == ['a', 'ab']",
        "num_ids": 532
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert ",
        "num_ids": 246
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 293
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = []\n    current_note = ''\n    for symbol in music_string:\n        if symbol == 'o':\n            result.append(1)\n        elif symbol == 'o|':\n            result.append(1/2)\n        elif symbol == '.|':\n            result.append(1/4)\n        elif symbol == 'o.':\n            result.append(1/8)\n        elif symbol == 'o|.':\n            result.append(1/16)\n        elif symbol == '.|.':\n            result.append(1/32)\n        else:\n            raise ValueError('Unknown symbol:', symbol)\n    return result\n",
        "test": "assert     parse_music('o') == [1]",
        "num_ids": 1544
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('some text','some') == 1",
        "num_ids": 322
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    for i, val in enumerate(numbers):\n        if val not in '0123456789':\n            return numbers\n",
        "test": "assert     sort_numbers('0 9') == '0 9'",
        "num_ids": 636
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    first, second = sorted(numbers[:2])\n    third = first + (second - first) * (1 - abs(first - second))\n    return first, second\n",
        "test": "assert     find_closest_elements([1, 1, 3]) == (1, 1)",
        "num_ids": 1039
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    max_num = max(numbers)\n    min_num = min(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]",
        "num_ids": 509
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 386
    },
    {
        "number": 23,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"a\") == 1",
        "num_ids": 148
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i = i - 1\n    return 1\n",
        "test": "assert     largest_divisor(9) == 3",
        "num_ids": 288
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if n < 2:\n        return []\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    x = 3\n    while x ** 2 <= n:\n        if n % x == 0:\n            return [x] + factorize(n // x)\n        x += 2\n    return [n]\n",
        "test": "assert     factorize(5) == [5]",
        "num_ids": 2243
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    \n    if len(numbers) < 2:\n        return numbers\n    \n    new_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in new_list:\n            new_list.append(numbers[i])\n    return new_list\n",
        "test": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 686
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('hello world') == 'HELLO WORLD'",
        "num_ids": 404
    },
    {
        "number": 28,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"])         == \"HelloWorld\", \"HelloWorld\"",
        "num_ids": 353
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"a\") == []",
        "num_ids": 398
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     get_positive([1,2,-3,-4])     == [1,2]",
        "num_ids": 545
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 391
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    assert all(x % 2 == 0 for x in xs) and max(xs) > 0, \"list xs must be even and have a non zero element\"\n    # Due to the assumption, the number of non zero element must be even\n    N = len(xs) // 2\n    assert len(xs) % 2 == 0, \"list xs must be even\"\n    f = lambda x: poly(xs, x)\n    a = list(range(N))\n    b = list(reversed(range(N)))\n    for i in range(N):\n        c = a[i]\n        a[i] = b[i]\n        b[i] = c\n    # Here the idea is to evaluate a and b in a way that both can be treated as polynomial.\n    # When a or b is negative, the evaluation is taken care of by the fact that the sum is monotonically increasing\n    # and all negative numbers are replaced with their corresponding positive values.\n    # After this step, we can do algebraic rearrangement to get a^2 - b^2 = -4 * a * b\n    # Now to get the real solutions, rearrange a and b to\n    # a = (a, -a) and b = (b, -b)\n    # and a and b become monotonic decreasing, as a*b < 0\n    # We can get the solution by finding the roots of the above equation\n    a = tuple(reversed(a))\n    b = tuple(reversed(b))\n    pos_a = [a for a in a if a >= 0]\n    pos_b = [b for b in b if b >= 0]\n    if len(pos_a)!= len(pos_b):\n        pos_a, pos_b = pos_b, pos_a\n    pos_a = tuple(pos_a)\n    pos_b = tuple(pos_b)\n    # Now, the polynomial itself is monotonic decreasing, so we can now use\n    # simple bisection algorithm to find the zero point\n    lo = 0\n    hi = len(pos_a)\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if f(pos_a[mid]) * f(pos_b[mid]) < 0:\n            lo = mid\n        else:\n            hi = mid\n    return pos_a[lo]\n",
        "test": "assert     poly([0, 1, 0, 0, 0], 0) == 0",
        "num_ids": 3120
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    count = 0\n    for i in l:\n        if i%3 == 0:\n            count += 1\n    l2 = []\n    for i in range(count):\n        l2.append(l[i])\n    count2 = 0\n    for i in range(count, len(l)):\n        l2.append(l[i])\n    return l2\n",
        "test": "assert     sort_third([6,3,2,1,5,4]) == [6,3,2,1,5,4]",
        "num_ids": 741
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1, 2, 3, 1]) == [1, 2, 3]",
        "num_ids": 451
    },
    {
        "number": 35,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    assert isinstance(l, list), 'l must be a list'\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([3,2,1]) == 3",
        "num_ids": 303
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    n_string = str(n)\n    n_length = len(n_string)\n    sevens = n_string.count('7')\n    threes = n_string.count('3')\n    \n    return sevens * (threes - n_length)\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 362
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Your code here\n    return l[::2]+sorted(l[1::2])\n",
        "test": "assert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,2,4,6,8,10]",
        "num_ids": 709
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([g[-1] + g[:-1] for g in groups])",
        "test": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"",
        "num_ids": 743
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    else:\n        return fib(n)\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 321
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if len(l) < 3:\n        return False\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    if len(d)!= 3:\n        return False\n    if d.values() == [1, 1, 1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not triples_sum_to_zero([1,2,4])",
        "num_ids": 510
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return 0",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 182
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]",
        "num_ids": 431
    },
    {
        "number": 43,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        s = l[i] + l[j]\n        if s < 0:\n            i += 1\n        elif s > 0:\n            j -= 1\n        else:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 1, -1, -1]) == True",
        "num_ids": 518
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    \n    if x < 0:\n        x = x * (-1)\n    x_list = []\n    while x > 0:\n        x_list.append(str(x % base))\n        x //= base\n    x_list.reverse()\n    return \"\".join(x_list)\n",
        "test": "assert     change_base(10,3) == '101', '10 to 3'",
        "num_ids": 545
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    area = (a * h)/2\n    return area\n",
        "test": "assert     triangle_area(1, 2) == 1.0",
        "num_ids": 175
    },
    {
        "number": 46,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    fib4_values = [0, 0, 1, 1]\n    if n <= 2:\n        return fib4_values[n]\n    elif n == 3:\n        return 2\n    else:\n        for i in range(4, n + 1):\n            fib4_values.append(fib4_values[i - 1] + fib4_values[i - 2] + fib4_values[i - 3] + fib4_values[i - 4])\n        return fib4_values[n]\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 498
    },
    {
        "number": 47,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[(n - 1) // 2] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[(n - 1) // 2]\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 451
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "test": "assert     is_palindrome(\"a\") == True",
        "num_ids": 362
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(0, 15) == 1",
        "num_ids": 299
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"b\") == \"b\"",
        "num_ids": 346
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([x for x in text if x not in vowels])\n",
        "test": "assert     'frdshdlf' == remove_vowels('frdshdlf')",
        "num_ids": 455
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([-1, 3, 4, 7], 3) == False",
        "num_ids": 596
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 138
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return all(map(lambda x, y: x == y, s0, s1))\n",
        "test": "assert not same_chars('dog', 'cat')",
        "num_ids": 282
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # Add your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 311
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    #could be optimised to improve time complexity\n    opening_bracket_pos = brackets.find(\"<\")\n    closing_bracket_pos = -1\n    while opening_bracket_pos >= 0:\n        closing_bracket_pos = brackets.find(\">\", opening_bracket_pos)\n        if closing_bracket_pos < 0:\n            return False\n        if closing_bracket_pos < opening_bracket_pos:\n            return False\n        opening_bracket_pos = brackets.find(\"<\", closing_bracket_pos + 1)\n    return True\n",
        "test": "assert     correct_bracketing('[]') == True",
        "num_ids": 1482
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([1, 2, 3])",
        "num_ids": 388
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 4]) == [1, 2]",
        "num_ids": 443
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    assert n > 1\n    max_pf = 1\n    while n % 2 == 0:\n        max_pf = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_pf = i\n            n //= i\n    if n > 2:\n        max_pf = n\n    return max_pf\n",
        "test": "assert     3 == largest_prime_factor(9)",
        "num_ids": 425
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n    \n    \ndef sum_to_n2(n):\n    return sum(range(n + 1))\n    \n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 334
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"()\") == True",
        "num_ids": 397
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    deriv = []\n    for i in range(len(xs)):\n        deriv.append(i * xs[i])\n    return deriv\n",
        "test": "assert     derivative([1, 2, 3])    == [0, 2, 6], \"actual: {}\".format(derivative([1, 2, 3]))",
        "num_ids": 359
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 367
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sum([1 for c in s if c in 'aeiouy']) + sum([1 for c in s[-1:] if c in 'aeiouy'])\n",
        "test": "assert     vowels_count('book') == 2",
        "num_ids": 416
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    x = int(str(x)[::-1])\n    return str(x)[(shift%len(str(x))):]+str(x)[:(shift%len(str(x)))]\n",
        "test": "assert     circular_shift(12345,0) == \"54321\", \"1st test\"",
        "num_ids": 465
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    s = s.upper()\n    return sum(ord(c) - 64 for c in s)\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 224
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \"\"\"\n    1. first convert the string into a integer\n    2. calculate the difference between the total fruits and the total of the given string\n    3. calculate the total number of apples and the total number of oranges\n    4. return the difference of the total number of fruits and the total number of apples and the total number of oranges\n    \"\"\"\n    def total_fruits(s):\n        \"\"\"\n        converts the string to integer\n        \"\"\"\n        return int(s)\n    def total_number_of_apples(s):\n        \"\"\"\n        calculates the total number of the apples\n        \"\"\"\n        return int(s) % 10\n    def total_number_of_oranges(s):\n        \"\"\"\n        calculates the total number of the oranges\n        \"\"\"\n        return int(s) % 10\n    def total_number_of_mangoes(s):\n        \"\"\"\n        calculates the total number of the mango fruits\n        \"\"\"\n        return int(s) // 10\n    def difference_of_the_total_number_of_apples_and_oranges(s):\n        \"\"\"\n        returns the difference between the total number of the fruits and the total number of the apples and the total number of the oranges\n        \"\"\"\n        return total_fruits(s) - (total_number_of_apples(s) + total_number_of_oranges(s))\n    total_number_of_apples_in_basket = difference_of_the_total_number_of_apples_and_oranges(s)\n    total_number_of_oranges_in_basket = difference_of_the_total_number_of_apples_and_oranges(s)\n    total_number_of_mangoes_in_basket = difference_of_the_total_number_of_apples_and_oranges(s)\n    return total_number_of_mangoes_in_basket - total_number_of_apples_in_basket - total_number_of_oranges_in_basket\n",
        "test": "assert     fruit_distribution('two',4) == '0'",
        "num_ids": 975
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    smallest_even = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_index = i\n    if smallest_index!= -1:\n        return [ smallest_even, smallest_index]\n    return []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 682
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    freqs = {}\n    for i in lst:\n        freqs[i] = lst.count(i)\n    if not freqs:\n        return -1\n    else:\n        return max(freqs, key = lambda k: freqs[k])",
        "test": "assert search([]) == -1",
        "num_ids": 630
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if not lst:\n        return []\n    lst = sorted(lst)\n    return lst\n",
        "test": "assert     strange_sort_list([])                 == []",
        "num_ids": 338
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    a, b, c = sorted([a, b, c])\n    if a >= b + c:\n        return -1\n    return round((a * b) / 2, 2)\n",
        "test": "assert     triangle_area(2, 2, 3) == 2.0",
        "num_ids": 495
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    def is_palindrome(lst):\n        l = len(lst)\n        for i in range(int(l/2)):\n            if lst[i]!= lst[l-i-1]:\n                return False\n        return True\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     not will_it_fly(['a','b','b','b','b'],3)",
        "num_ids": 450
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(len(arr)//2):\n        if arr[i]!= arr[-i - 1]:\n            count += 1\n    return count\n",
        "test": "assert     smallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) == 6",
        "num_ids": 379
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # list_a = len(lst1)\n    # list_b = len(lst2)\n    # if list_a == list_b:\n    #     return lst1\n    # else:\n    #     if list_a < list_b:\n    #         return lst1\n    #     else:\n    #         return lst2\n    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 611
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_multiply_prime(4) == False",
        "num_ids": 339
    },
    {
        "number": 76,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 1:\n        return True\n    if x < n:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n",
        "test": "assert     is_simple_power(2, 2) == True",
        "num_ids": 339
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return a**(1.0/3.0) == int(a**(1.0/3.0))\n",
        "test": "assert not iscube(3)",
        "num_ids": 253
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    import math\n    \n    hexadecimal = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    \n    result = 0\n    num = num.upper()\n    for i in range(0, len(num)):\n        if int(num[i]) in hexadecimal.values():\n            if is_prime(int(num[i])) == True:\n                result += 1\n    return result\n",
        "test": "assert     hex_key('A1A1A1A1') == 9",
        "num_ids": 294
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if decimal == 0:\n        return 'db0'\n",
        "test": "assert     (decimal_to_binary(1) == '1'+'db')",
        "num_ids": 333
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "test": "assert is_happy(\"ab\") == False",
        "num_ids": 441
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
        "num_ids": 1039
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return (len(string) == len(set(string)))\n",
        "test": "assert     prime_length(\"hello2\") == False",
        "num_ids": 481
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1'):\n            count += 1\n        if str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 536
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return str(sum(int(i) for i in str(N)))\n",
        "test": "assert     solve(0)    ==    '0'",
        "num_ids": 266
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return sum(lst[::2])\n",
        "test": "assert     add([13, 19, 21, 31, 11, 13, 15]) == [13, 19, 21, 31]",
        "num_ids": 467
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(''.join(sorted(word)))\n    return''.join(new_words)\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 509
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    res = []\n    for row in lst:\n        row.sort()\n        row.sort(reverse=True)\n        res.append([row[x], row[len(row) - x - 1]])\n    return res\n",
        "test": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) == [(2, 0), (1, 2)]",
        "num_ids": 642
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if len(array) <= 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n",
        "test": "assert     [0, 1, 2, 3, 4] == sort_array([4, 1, 3, 2, 0])",
        "num_ids": 481
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated = alphabet[2:] + alphabet[:2]\n    return \"\".join([rotated[alphabet.index(c)] for c in s])\n",
        "test": "assert encrypt('xyz') == 'zab', \"encrypt('xyz') == 'zab' is not true\"",
        "num_ids": 1123
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if not lst: return None\n    if len(lst) == 1: return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 2, 3, 4]) == 2",
        "num_ids": 350
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    count = 0\n    for word in S.split():\n        if word == 'I':\n            count += 1\n    return count\n",
        "test": "assert     is_bored('I am bored') == True, 'wrong definition for is_bored'",
        "num_ids": 1288
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if type(x) is not int or type(y) is not int or type(z) is not int:\n        return False\n    elif (x+y+z) % 1 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(1, 0, 1) == True",
        "num_ids": 369
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    letter_map = {\n        'a': '4',\n        'b': '8',\n        'c': '0',\n        'd': '6',\n        'e': '3',\n        'f': '1',\n        'g': '9',\n        'h': '2',\n        'i': '7',\n        'j': '1',\n        'k': '5',\n        'l': '0',\n        'm': '4',\n        'n': '5',\n        'o': '0',\n        'p': '7',\n        'q': '0',\n        'r': '5',\n        's': '5',\n        't': '7',\n        'u': '0',\n        'v': '6',\n        'w': '0',\n        'x': '2',\n        'y': '7',\n        'z': '1',\n    }\n",
        "test": "assert     encode('A really good day') == 'A rE aY gOoD dAY'",
        "num_ids": 592
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    result = 0\n    for i in lst:\n        if isPrime(i):\n            result += i\n    return result\n",
        "test": "assert     (skjkasdkd([1,2,3,4,5,6,7,8,9]) == ",
        "num_ids": 581
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if not dict:\n        return False\n    for k in dict.keys():\n        if type(k)!= type(\"abc\"):\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) is False",
        "num_ids": 580
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    array = []\n    for i in range(2,n+1):\n        is_prime = True\n        for j in range(2,i):\n            if (i % j) == 0:\n                is_prime = False\n        if is_prime:\n            array.append(i)\n    return array\n",
        "test": "assert count_up_to(1) == []",
        "num_ids": 523
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    return abs(a) * abs(b)\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 1310
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    # Your code here\n    \n    return 0",
        "test": "assert     count_upper(\"abc\") == 0",
        "num_ids": 322
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    from decimal import Decimal\n    import math\n",
        "test": "assert     closest_integer(\"-14.5\") == -15",
        "num_ids": 233
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    l = [n]\n    while n > 1:\n        n -= 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n // 2) + 1\n        l.append(n)\n    return l\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 513
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string('hello,world') == ['hello', 'world']",
        "num_ids": 298
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return -1\n",
        "test": "assert     choose_num(3, 7) == -1",
        "num_ids": 338
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    s = 0\n    if n > m:\n        return -1\n    for i in range(n, m + 1):\n        s += i\n    return bin(s)[2:]\n",
        "test": "assert     rounded_avg(1, 2) == 1",
        "num_ids": 266
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    result = []\n    for num in x:\n        if num <= 9:\n            result.append(num)\n        elif (num % 2) == 0:\n            pass\n        else:\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert     unique_digits( [1,2,3,4,5,6,7,8,9,10] ) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 489
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # arr.sort()\n    # arr.reverse()\n    return [digit_name(n) for n in arr]\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \\",
        "num_ids": 2834
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    r = [1]\n    for i in range(1, n):\n        r.append(i * r[i-1])\n    return r\n",
        "test": "assert     f(2) == [1, 1]",
        "num_ids": 408
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i%2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n",
        "test": "assert ",
        "num_ids": 348
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len([x for x in arr if int(str(x).replace('-', '')) > 0])\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 451
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(arr)==0:\n        return True\n    temp=arr[-1]\n    arr[-1]=arr[0]\n    arr[0]=temp\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i]>arr[i+1]:\n            temp=arr[i]\n            arr[i]=arr[i+1]\n            arr[i+1]=temp\n        else:\n            break\n    if arr[0]<=arr[1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 550
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \"NO\"\n    \n",
        "test": "assert     exchange([1,2,3,4,5,6,7,8,9], [2,10,11,12,13,14,15,16,17,18,19]) == \"NO\"",
        "num_ids": 1003
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if not test:\n        return {}\n    words = test.split()\n    hash_map = {}\n    for word in words:\n        for letter in word:\n            if letter in hash_map:\n                hash_map[letter] += 1\n            else:\n                hash_map[letter] = 1\n    return hash_map\n",
        "test": "assert     histogram(\"a b c d e f\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1}",
        "num_ids": 674
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    import re\n    i = 0\n    j = len(s) - 1\n    s = s.lower()\n    c = c.lower()\n    s = re.sub(r'[^'+c+']',r'',s)\n    return s,s[i] == s[j]\n    \n",
        "test": "assert     reverse_delete(\"aba\", \"abc\") == ('bcba', True)",
        "num_ids": 409
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    result = []\n    for i in lst:\n        odd = 0\n        for num in i:\n            if int(num) % 2!= 0:\n                odd += 1\n        result.append( \"the number of odd elements {n} the str4ng {s} of the {s}nput.\".format(n = odd, s = i))\n    return result\n",
        "test": "assert         odd_count(['111','2']) == [1,1]",
        "num_ids": 893
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    result = 0\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum < 0:\n            curr_sum = 0\n        result = max(result, curr_sum)\n    return result\n",
        "test": "assert minSubArraySum([1]) == 1",
        "num_ids": 636
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # grid[i][j] = 1 if the well at position (i,j) is empty\n    # grid[i][j] = -1 if the well at position (i,j) is full\n    import sys\n    rows = len(grid)\n    cols = len(grid[0])\n",
        "test": "assert         max_fill(",
        "num_ids": 1204
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "test": "assert     sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]",
        "num_ids": 1579
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return []\n",
        "test": "assert     select_words(\"\", 0) == []",
        "num_ids": 357
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    vowels = ['a','e','i','o','u']\n    if word[0] in vowels:\n        return word[0]\n    if word[-1] in vowels:\n        return word[-1]\n    else:\n        for i in xrange(len(word)-1,0,-1):\n            if word[i] in vowels:\n                return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"wea\") == \"a\"",
        "num_ids": 699
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == '()' else 'No'\n    # Indices of open parentheses\n    open_lst = [i for i, x in enumerate(lst) if x == '(']\n    # Indices of close parentheses\n    close_lst = [i for i, x in enumerate(lst) if x == ')']\n    # Indices of close parentheses that are not the last one\n    close_lst_not_last = [i for i, x in enumerate(close_lst) if x!= close_lst[-1]]\n    for i in range(len(close_lst_not_last)):\n        j = close_lst_not_last[i] + 1\n        # If there is an open parenthesis that's close to a close parenthesis\n        if j < len(open_lst) and open_lst[j] == close_lst_not_last[i] - 1:\n            # Removing the last close parenthesis from the string\n            lst[close_lst_not_last[i]] = ''\n            lst[close_lst_not_last[i] - 1] = ''\n            lst[close_lst_not_last[i] + 1:] = ''\n            # Continue the loop\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens('())()())') == 'No'",
        "num_ids": 1712
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if not arr or k < 1:\n        return []\n    arr.sort(reverse = True)\n    return arr[:k]\n",
        "test": "assert     maximum([1,2,3,4,5], 3) == [5,4,3]",
        "num_ids": 658
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            if i % 2 == 0:\n                sum += lst[i]\n    return sum\n",
        "test": "assert     solution([1,2,3,4,5,6]) == 9",
        "num_ids": 268
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    _sum = 0\n    for i in arr[:k]:\n        _sum += i\n    return _sum\n",
        "test": "assert     add_elements([], 0) == 0",
        "num_ids": 439
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return [n] + get_odd_collatz(n-1)\n    else:\n        return [n] + get_odd_collatz(n/2)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1436
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    import re\n    date_pattern = re.compile('([0-9]{2})-([0-9]{2})-([0-9]{4})')\n    date_results = date_pattern.search(date)\n    if date_results:\n        date_converted = list(map(int, date_results.groups()))\n        return True if (\n            date_converted[0] < 1 or date_converted[0] > 31\n            or date_converted[1] < 1 or date_converted[1] > 12\n            or date_converted[2] < 1 or date_converted[2] > 2020\n        ) and (\n            date_converted[0] < 1 or date_converted[0] > 29\n            or date_converted[1] < 1 or date_converted[1] > 12\n        ) else False\n    return False\n",
        "test": "assert     valid_date(\"01-02-0000\") == False",
        "num_ids": 666
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    lista = txt.split()\n    return lista\n",
        "test": "assert     split_words('a') == ['a']",
        "num_ids": 304
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    lst = [int(i) for i in lst]\n    if len(lst) < 2: return True\n    if lst[0] > lst[1]: return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]: return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 1]) == False",
        "num_ids": 437
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    \n    def isPrime(x):\n        if x <= 1:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x**0.5 + 1), 2):\n            if x % i == 0:\n                return False\n        return True\n    \n    def isIntersect(interval1, interval2):\n        return interval1[0] <= interval2[1] and interval1[1] >= interval2[0]\n    \n    def getIntersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    \n    if not isIntersect(interval1, interval2):\n        return \"NO\"\n    \n    return \"YES\" if isPrime(abs(interval1[1] - interval1[0])) else \"NO\"",
        "test": "assert     intersection((0, 1), (1, 5)) == 'NO'",
        "num_ids": 921
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if arr:\n        signs = [1, -1, 0]\n        return sum(x * y * z for x, y, z in zip(arr, signs, repeat(1)))\n    return None\n",
        "test": "assert     prod_signs([]) == None, \"should be None for empty arr\"",
        "num_ids": 393
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # O(n**3) time, O(1) space\n    def dfs(grid, i, j, k, visited, curr, path):\n        if k == 0:\n            return\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return\n        if visited[i][j]:\n            return\n        if i == len(grid)-1 and j == len(grid[0])-1:\n            if k == 1:\n                curr.append(grid[i][j])\n                return\n            else:\n                path.append(grid[i][j])\n                curr.append(path)\n                return\n        visited[i][j] = True\n        dfs(grid, i+1, j, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i-1, j, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i, j+1, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i, j-1, k-1, visited, curr, path + [grid[i][j]])\n        visited[i][j] = False\n    \n    curr = []\n    visited = [ [False] * len(grid[0]) for _ in range(len(grid)) ]\n    path = []\n    dfs(grid, 0, 0, k, visited, curr, path)\n    return curr\n",
        "test": "assert     [1, 2, 3, 4, 5, 6] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 3)",
        "num_ids": 1496
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 2]\n        for i in range(n - 2):\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n",
        "test": "assert     tri(1)    ==    [1]",
        "num_ids": 637
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, [int(x) for x in str(n) if int(x) % 2!= 0])\n",
        "test": "assert     digits(1234) == 0",
        "num_ids": 371
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    brackets = []\n    for char in string:\n        if char == '[' or char == ']':\n            brackets.append(char)\n        elif len(brackets) > 0 and char == brackets[-1]:\n            brackets.pop()\n        else:\n            return False\n    return len(brackets) == 0\n    \n",
        "test": "assert     is_nested('([)]()') == False",
        "num_ids": 416
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sum(x**2 for x in lst)\n",
        "test": "assert     sum_squares([1,2,3]) == 14",
        "num_ids": 1369
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \" \"\n",
        "test": "assert     check_if_last_char_is_a_letter(\"Hello\") == True",
        "num_ids": 462
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    left = []\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            left.append(arr[i])\n    if len(left) == 0:\n        return -1\n    else:\n        return max(left)\n",
        "test": "assert         can_arrange([]) == -1",
        "num_ids": 397
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    lst = [x for x in lst if x < 0]\n    lst = [x for x in lst if x > 0]\n    return (max(lst), min(lst)) if lst else (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 773
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)):\n        return a if a > b else b\n    elif isinstance(b, (int, float)):\n        return b if a > b else a\n",
        "test": "assert         compare_one(1, 2) == 2",
        "num_ids": 477
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sum(i for i in range(4,n+1,2) if n-i%2==0) == n\n",
        "test": "assert     is_equal_to_sum_even(1) == False",
        "num_ids": 362
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n",
        "test": "assert     special_factorial(5)     == 120, \"Wrong answer\"",
        "num_ids": 363
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    new_text = text\n    # Replace spaces\n    new_text = new_text.replace(' ', '_')\n    # Deal with consecutive spaces\n    new_text = new_text.replace('-', '_')\n    # Remove leading spaces\n    new_text = new_text.lstrip('_')\n    return new_text\n",
        "test": "assert         fix_spaces(\"\") == \"\"",
        "num_ids": 531
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if re.search(r'[^a-zA-Z0-9]', file_name) or len(file_name) > 100:\n        return 'No'\n    dot_position = file_name.rfind('.')\n    if dot_position == -1 or file_name[:dot_position].strip() == '' or file_name[dot_position + 1:].strip() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('file_name_check.txt') == \"Yes\", \"Expected Yes\"",
        "num_ids": 900
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if (i % 4 == 0) and (i % 3 == 0):\n            res += lst[i] ** 3\n        elif (i % 4 == 0) and (i % 3!= 0):\n            res += lst[i] ** 2\n        else:\n            res += lst[i]\n    return res\n",
        "test": "assert ",
        "num_ids": 586
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pas",
        "test": "assert     words_in_sentence(\"hello\") == 'hello'",
        "num_ids": 581
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return True\n",
        "test": "assert     simplify('1/2', '1/2') == True",
        "num_ids": 612
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums",
        "test": "assert     order_by_points([3, 4, 5, 2, 3, 1]) == [1, 2, 3, 3, 4, 5]",
        "num_ids": 546
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sum(1 for n in nums if n > 10 and (n % 10) % 2 == 1 and (n // 10) % 2 == 1)\n",
        "test": "assert     specialFilter([]) == 0",
        "num_ids": 1363
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return len([i for i in range(n) if (i * i - i + 1) % 3 == 0])",
        "test": "assert     get_max_triples(2) == 2",
        "num_ids": 387
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    dict_planet = {}\n    \n    #Making the dictionary planet\n    for i in planets:\n        dict_planet[i] = distance(i, planet1)\n    \n    #Ordering the dictionary planet\n    ordered_planet = sorted(dict_planet.items(), key = lambda x:x[1])\n    \n    #Checking which planet is lower and storing it\n    for i in ordered_planet:\n        if distance(i[0], planet2) < distance(planet1, planet2):\n            planet1 = i[0]\n    \n    #Checking which planet is higher and storing it\n    for i in ordered_planet:\n        if distance(i[0], planet2) > distance(planet1, planet2):\n            planet2 = i[0]\n    \n    #Checking if the planets are on the same orbit\n    if planet2 == planet1:\n        return planet1\n    else:\n        return (planet1, planet2)\n",
        "test": "assert bf('Mars', 'Jupiter') == ('Mars', 'Jupiter')",
        "num_ids": 1675
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # return sorted(lst, key=len)\n    return sorted(lst, key=lambda x: len(x))\n",
        "test": "assert     sorted_list_sum([\"cab\",\"a\",\"bbb\"]) == [\"a\",\"cab\",\"bbb\"]",
        "num_ids": 590
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return x if n % 2 == 0 else y\n",
        "test": "assert     x_or_y(3, 3, 3) == 3",
        "num_ids": 331
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    total = 0\n    for i in lst:\n        if isinstance(i, int):\n            if i % 2!= 0:\n                total += i**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1367
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "test": "assert     compare([0,1,2,3,4,5], [0,0,0,0,0,0]) == [0,1,2,3,4,5]",
        "num_ids": 1594
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    class_caps = [c for c in class_name if c.isupper()]\n    class_sm = [c for c in class_name if c.islower()]\n    extension_caps = [e for e in extensions if e.isupper()]\n    extension_sm = [e for e in extensions if e.islower()]\n    class_strength = sum(i > j for i, j in zip(class_caps, class_sm)) - sum(i < j for i, j in zip(class_caps, class_sm))\n    extension_strength = sum(i > j for i, j in zip(extension_caps, extension_sm)) - sum(i < j for i, j in zip(extension_caps, extension_sm))\n    if extension_strength > class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n    elif extension_strength < class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[-1])\n    else:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n",
        "test": "assert     Strongest_Extension(\"Hole\", ['Silly', 'Hole', 'Tiny']) == \"Hole.Silly\"",
        "num_ids": 1289
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if a==b:\n        return True\n    \n    for i in range(1,len(b)):\n        if b[i:] in a and b[:i] in a:\n            return True\n    \n    return False\n",
        "test": "assert     cycpattern_check(\"\", \"a\") == False",
        "num_ids": 433
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    odd_count = 0\n    even_count = 0\n    if num < 0:\n        num *= -1\n        num = str(num)\n        for digit in num:\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    else:\n        num = str(num)\n        for digit in num:\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(1234) == (2, 2)",
        "num_ids": 460
    },
    {
        "number": 156,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # NOTE: this solution iterates through the whole range of roman numerals,\n    # and therefore may be inefficient.\n    \n    assert 1 <= number <= 1000, 'Argument must be between 1 and 1000'\n    numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n    result = ''\n    for (rom, mini) in numerals:\n        while number >= rom:\n            result += mini\n            number -= rom\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == \"i\"",
        "num_ids": 690
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if a > b and a > c:\n        a, b, c = b, a, c\n    if b > c and b > a:\n        b, a, c = a, c, b\n    if c > a and c > b:\n        c, b, a = a, b, c\n    if a**2 == b**2 + c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5)",
        "num_ids": 406
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    max_val = -1\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_val:\n            max_val = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"a\", \"a\", \"a\"]) == \"a\"",
        "num_ids": 551
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    total, left = 0, 0\n    if need > remaining:\n        total = remaining\n    else:\n        total = need\n        left = remaining - need\n    return [total, left]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 1355
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "test": "assert     do_algebra([1,3,4], [3,2,-1]) == 3",
        "num_ids": 355
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return \"\".join([a.lower() if a.isalpha() else a for a in s])\n",
        "test": "assert     solve('as') == 'as'",
        "num_ids": 525
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 481
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    #create list of integers between a and b\n    results = []\n    if a <= b:\n        for i in range(a, b+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n    else:\n        for i in range(b, a+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n",
        "test": "assert     generate_integers(4, 15) == list(range(4, 16, 2))",
        "num_ids": 439
    }
]