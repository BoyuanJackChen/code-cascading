[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 1.0)"
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    paren_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            paren_group.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_group.append(char)\n                paren_stack.pop()\n            else:\n                raise ValueError('No matching opening bracket')\n        elif char =='':\n            continue\n        else:\n            paren_group.append(char)\n    if not paren_stack:\n        return [''.join(paren_group)]\n    else:\n        raise ValueError('No matching opening bracket')\n",
        "test": "assert     separate_paren_groups('((()))') == ['((()))']"
    },
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Divide the number by the first highest factor of 10, and take the\n    # modulus to keep only the decimals\n    if number > 0:\n        integer, decimals = divmod(number, 10)\n        return decimals\n    else:\n        # The number is negative, just do the opposite\n        return -truncate_number(-number)\n",
        "test": "assert     truncate_number(0.9) == 0.9"
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    mean_val = sum(numbers) / len(numbers)\n    differences = [abs(n - mean_val) for n in numbers]\n    return sum(differences) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1.0]) == 0.0"
    },
    {
        "number": 5,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for x in range(0, len(numbers), 2):\n        numbers.insert(x + 1, delimeter)\n    return numbers\n",
        "test": "assert     intersperse(numbers=[], delimeter=10) == []"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            # the index of the last (, so the first index of the first ( is the index of the last )\n            stack.pop()\n    return stack\n",
        "test": "assert     parse_nested_parens('()') == []"
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return [x for x in strings if substring in x]\n",
        "test": "assert     len(filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 'z')) == 0"
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for number in numbers:\n        product_ *= number\n    return (sum_, product_)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    length = len(numbers)\n    result = []\n    max_num = 0\n    for i in range(length):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        result.append(max_num)\n    return result\n",
        "test": "assert     rolling_max([7, 7, 7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7, 7, 7]"
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # We can use built-in str.join() to join iterable with given string\n    # and then reverse the string\n    prefix = ''.join(reversed(string))\n    suffix = string + ''.join(reversed(string))\n    if is_palindrome(suffix):\n        return prefix\n    return prefix\n",
        "test": "assert     is_palindrome('a') == True"
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return ''.join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a,b))\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(3, 3) == 3"
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not string:\n        return []\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"ant\") == [\"a\", \"an\", \"ant\"]"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return''.join(str(x) for x in range(n + 1))\n",
        "test": "assert     string_sequence(40) == '01 02 03 04 05 06 07 08 09 0'"
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"\") == 0, \"\""
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    result = []\n    beats = 0\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats += 1\n            i += 1\n        elif music_string[i] == 'o|':\n            beats += 1\n            i += 1\n        elif music_string[i] == '.|':\n            beats += 1\n            i += 1\n        else:\n            result.append(beats)\n            beats = 0\n            i += 1\n    if beats > 0:\n        result.append(beats)\n    return result\n",
        "test": "assert     parse_music('o') == [1]"
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('Hello World', 'x') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('one one') == 'one one'"
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = sorted(numbers, key=lambda x: (x - min(numbers)) ** 2)\n    return result[0], result[1]\n",
        "test": "assert     find_closest_elements([0, 0]) == (0, 0), \"incorrect result for [0, 0]\""
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    t = 1.0 / (largest - smallest)\n    return [t * (n - smallest) for n in numbers]\n",
        "test": "assert     rescale_to_unit([0, 1]) == [0, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n % 2 == 0:\n        return n // 2\n    return 1\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    factors = []\n    n = abs(n)\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n /= i\n                break\n    if len(factors) == 0:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    duplicates = set()\n    result = []\n    for num in numbers:\n        if num not in duplicates:\n            duplicates.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"abc\") == \"ABC\""
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"\"])                 == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['apples', 'oranges', 'bananas'], 'apple') == ['apples']"
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert         get_positive([-1, 3, 4, -5, 9]) == [3, 4, 9]"
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False"
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        if coeff * coeff > 0:\n            if coeff > 0:\n                coeff = -coeff\n            xs[i] = coeff\n            return -coeff / coeff\n    raise Exception('No zero point')\n",
        "test": "assert     poly([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    l.sort()\n    return [l[i] if i % 3 == 0 else l[i] if i % 3 == 1 else l[i] if i % 3 == 2 else l[i-1] for i in range(len(l))]\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     sorted(unique([1, 1, 2, 3]))    == [1, 2, 3]"
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return max(l)\n",
        "test": "assert     max_element(['a', 'b', 'c', 'd']) == 'd'"
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum(1 for x in range(1, n) if x % 11 == 0 or x % 13 == 0)\n",
        "test": "assert     fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    l[1::2] = sorted(l[1::2])\n    return l\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # set new groups to empty string.\n    groups = ['' if len(group) == 1 else group for group in groups]\n    # invert groups to form new groups.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"\")) == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if n < 2:\n        return n\n    f1, f2 = 1, 1\n    if n == 1:\n        return 2\n    for i in range(2, n):\n        f1, f2 = f2, f1 + f2\n    return f2\n",
        "test": "assert     prime_fib(20) == 6765"
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # set up an empty dictionary to use as a hash table\n    d = {}\n    # loop over the list l\n    for num in l:\n        # check to see if num is in the dictionary\n        if num in d:\n            # if so, increment the value of the key\n            d[num] += 1\n        # if not, add the key/value pair to the dictionary\n        else:\n            d[num] = 1\n    # loop over the dictionary and check if the value of the key is 3\n    for key in d:\n        # if so, the list cannot have three distinct elements\n        if d[key] == 3:\n            return True\n    # otherwise, the list must have three distinct elements\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False, \"should be False\""
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    collisions = 0\n    # Your code here\n    return collisions",
        "test": "assert     car_race_collision(2) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[item] = item\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,-2,5,5]) == True"
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # Base conversion algorithm.\n    # we can write code for other bases such as 8, 16, 32\n    out_base = \"\"\n    if x == 0:\n        out_base = \"0\"\n    else:\n        while x!= 0:\n            out_base = str(x % base) + out_base\n            x //= base\n    return out_base\n",
        "test": "assert     change_base(0, 2) == '0'"
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return.5 * a * h\n",
        "test": "assert     triangle_area(10, 5) == 25.0"
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    for i in range(5,n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    s = sorted(l)\n    length = len(s)\n    if length % 2 == 1:\n        return s[length // 2]\n    else:\n        return (s[length // 2 - 1] + s[length // 2]) / 2\n",
        "test": "assert     median([1, 2, 3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('racecar') == True"
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return pow(n, n, p)\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"hello\") == \"mjqqt\""
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    vowels = 'aeiou'\n    if isinstance(text, str):\n        return ''.join(i for i in text if i not in vowels)\n    else:\n        return None\n",
        "test": "assert remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([], 4) == True, \"WA: Below threshold with empty list\""
    },
    {
        "number": 53,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars(\"abc\", \"abc\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(0) == 0"
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            try:\n                top = stack.pop()\n            except IndexError:\n                return False\n            if top!= \"<\":\n                return False\n        else:\n            stack.append(bracket)\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"<[\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "test": "assert     monotonic([1,2,3,4,5,6,7,8]) is True"
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(list(s1 & s2))\n",
        "test": "assert     common([\"a\", \"c\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    m = n - 1\n    while n % 2 == 0:\n        n = n // 2\n        m = m // 2\n    while m > 1:\n        if n % m == 0:\n            n = n // m\n            m = m - 1\n        else:\n            m = m - 1\n    return n\n",
        "test": "assert     5 == largest_prime_factor(25)"
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "test": "assert         sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Keep track of the \"unmatched\" opening brackets using a list\n    bracket_stack = []\n    for i in range(len(brackets)):\n        bracket = brackets[i]\n        if bracket == \"(\":\n            bracket_stack.append(\"(\")\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            last_bracket = bracket_stack.pop()\n            if last_bracket!= \"(\":\n                return False\n    return len(bracket_stack) == 0\n",
        "test": "assert     correct_bracketing(\"\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    N = len(xs)\n    res = [0 for i in range(N)]\n    for i in range(1, N):\n        res[i] = i * xs[i]\n    return res\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = 0\n    for c in s:\n        if c in 'aeiou':\n            result += 1\n        elif c == 'y' and s[-1] == 'y':\n            result += 1\n    return result\n",
        "test": "assert     vowels_count('a') == 1"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    digit_string = str(x)\n    if shift > len(digit_string):\n        return digit_string[::-1]\n    else:\n        return digit_string[len(digit_string) - shift:] + digit_string[:len(digit_string) - shift]\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sum(ord(x) for x in s if x.isupper())\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    count = 0\n    # you can use the same logic as the previous task to check if the number of the fruits in the basket is enough or not\n    if s.count(\"mango\") >= n:\n        return n\n    elif s.count(\"mango\") < n:\n        return (n - s.count(\"mango\")) - s.count(\"apples\")\n    else:\n        return 0\n",
        "test": "assert     fruit_distribution(\"1 1 2 2 2 1 2 1 2 1 2 2 2 1 1 1\",1) == 1"
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if not arr:\n        return []\n    res = [0, 0]\n    for i, v in enumerate(arr):\n        if v % 2 == 0 and v < res[0]:\n            res = [v, i]\n    return [res[1], res[0]]\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    d = {}\n    \n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    max_val = -1\n    max_count = 0\n    \n    for i in d:\n        if d[i] > max_count:\n            max_count = d[i]\n            max_val = i\n    \n    return max_val\n",
        "test": "assert     search([1, 1, 2, 2, 3, 3, 3]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if len(lst) == 0:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] > result[-1]:\n            result.append(lst[i])\n        elif lst[i] < result[0]:\n            result.insert(0, lst[i])\n        else:\n            k = result.index(min(result))\n            result.insert(k, lst[i])\n            result.remove(min(result))\n            result.remove(max(result))\n    return result\n",
        "test": "assert     strange_sort_list([8, 6, 4, 3, 1])     == [1, 3, 4, 6, 8]"
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Your code here\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a + b + c)/2, 2)\n",
        "test": "assert     triangle_area(1,1,10) == -1.0, \"The area of the triangle should be -1.0\""
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return q[::-1] == q and sum(q) <= w\n",
        "test": "assert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ], 22)     == False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    arr = sorted(arr)\n    return min(\n        abs(arr[i] - arr[i + 1])\n        for i in range(len(arr) - 1)\n    )\n",
        "test": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in lst1:\n        count += len(i)\n    if count == len(lst2):\n        return lst1\n    elif count > len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match(['a','b','c'], ['d','e','f','g']) == ['a','b','c']"
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    for i in range(2,100):\n        if a % i == 0 and is_prime(i) and is_prime(a/i):\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(1) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x > n:\n        return False\n    else:\n        return (x == n ** (x / n))\n",
        "test": "assert     is_simple_power(32, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    return a**(1/3.) == int(a**(1/3.))\n",
        "test": "assert icesk(27) == True"
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    def is_prime(num):\n        \"\"\"Returns True if num is a prime number, otherwise returns False.\n        \"\"\"\n        for i in range(2,int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n    if num=='':\n        return 0\n    return sum(map(is_prime, map(int,num)))\n",
        "test": "assert     hex_key(\"\") == 0"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    decimal_to_binary_helper(decimal, 0)\n",
        "test": "assert     decimal_to_binary(3) == 'db11'"
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return s[0] == s[1] == s[2]\n    elif len(s) == 4:\n        return s[0] == s[3] == s[2] == s[1]\n    else:\n        for i in xrange(len(s) - 3):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n",
        "test": "assert     is_happy(\"abcd\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    result = []\n    for i in grades:\n        if i >= 4.0:\n            result.append('A+')\n        elif i >= 3.7:\n            result.append('A')\n        elif i >= 3.3:\n            result.append('A-')\n        elif i >= 3.0:\n            result.append('B+')\n        elif i >= 2.7:\n            result.append('B')\n        elif i >= 2.3:\n            result.append('B-')\n        elif i >= 2.0:\n            result.append('C+')\n        elif i >= 1.7:\n            result.append('C')\n        elif i >= 1.3:\n            result.append('C-')\n        elif i >= 1.0:\n            result.append('D+')\n        elif i >= 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']"
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_length('abcdef') is False"
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 10\n    if n == 2:\n        return 22\n    return 42\n",
        "test": "assert     starts_one_ends(1) == 10"
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return str(bin(N)[2:])",
        "test": "assert     solve(0)     == \"0\""
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    index = 0\n    while index < len(lst) and index % 2 == 0:\n        lst[index] += lst[index+1]\n        index += 2\n    return lst\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # your code here\n    return \" \".join(sorted(s.split()))",
        "test": "assert     anti_shuffle('hi') == 'hi'"
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res, key = lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []"
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    pass\n    if array is None or len(array) == 0:\n        return []\n    else:\n        sum_array = sum(array)\n        if sum_array % 2 == 0:\n            return sorted(array, reverse=False)\n        else:\n            return sorted(array, reverse=True)\n",
        "test": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    newAlphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    s = s.lower()\n    def encrypt(s):\n        return ''.join([newAlphabet[newAlphabet.index(letter) - 2] for letter in s])\n",
        "test": "assert     encrypt('xyz') == 'zab'"
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return None if len(lst) < 2 else sorted(lst)[1]",
        "test": "assert     next_smallest([1]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return S.count('I')",
        "test": "assert     is_bored(\"I don't care.\") == True"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return (x == (y + z) and type(x) == int)\n    \n",
        "test": "assert     any_int(0, 0, 0)"
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # First create a set of the alphabet, vowels, and non-vowels\n    # characters\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    vowels = set('aeiou')\n    non_vowels = set('abcdefghijklmnopqrstuvwxyz')\n    \n    # Then split the message into a list of characters, and create\n    # a set of the vowels in the message\n    message_chars = list(message)\n    vowels_in_message = set(message_chars).intersection(vowels)\n    \n    # Then create a new list of the message characters, but with\n    # all non-vowels replaced with the letter that appears 2 places\n    # ahead of that vowel in the alphabet\n    message_chars_with_consonants = [\n        char if char in vowels else chr(ord(char) + 2)\n        for char in message_chars\n    ]\n    \n    # Then join the message characters with the vowels replaced with\n    # the correct letters\n    message_with_vowels_replaced = ''.join(\n        char if char in vowels else chr(ord(char) - 2)\n        for char in message_chars_with_consonants\n    )\n    \n    return message_with_vowels_replaced\n",
        "test": "assert     encode(\"i\") == \"i\""
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # your code here\n    import math\n    lst.sort()\n    maximum=lst[-1]\n    for i in lst:\n        if i!=0 and i%2==0 and i!=2 and i!=maximum:\n            maximum=i\n    for i in range(len(str(maximum))):\n        if math.factorial(maximum)!=0:\n            return sum([int(x) for x in str(maximum)])\n        else:\n            return 0",
        "test": "assert     skjkasdkd([2, 3, 7, 9, 11, 13]) == 19"
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(dict) == 0:\n        return False\n    for k, v in dict.items():\n        if isinstance(k, str) and isinstance(v, str):\n            if k.lower()!= k.upper():\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert         check_dict_case({'A':'a'}) == False, \"test3\""
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return a * b\n",
        "test": "assert     multiply(5, 9) == 45"
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"111\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    import math\n    number = float(value)\n    fractional_part = math.modf(number)[0]\n    integer_part = int(math.floor(number))\n    if fractional_part == 0:\n        return integer_part\n    if fractional_part <.5:\n        return integer_part\n    else:\n        return integer_part + 1\n",
        "test": "assert     closest_integer(\"14\") == 14"
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    result = [n]\n    while n > 1:\n        n = n - 2\n        if n % 2 == 0:\n            result.append(n)\n        else:\n            result.append(n + 1)\n    return result\n",
        "test": "assert     make_a_pile(1)    == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return s.split(', ')\n",
        "test": "assert     words_string('hello') == ['hello']"
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if x%2 == 0 and y%2 == 0 and x <= y:\n        return (x+y-1)/2\n    else:\n        return -1\n",
        "test": "assert     choose_num(1, 2) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if n > m:\n        return -1\n    m = m + 1\n    s = 0\n    for i in range(n, m):\n        s += i\n    return bin(s // (m - n))\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return sorted(set(x) - set(int(c) for c in x if c % 2))\n",
        "test": "assert     unique_digits([1, 4, 7, 2, 3, 6, 7, 10]) == [1, 2, 3, 6, 7, 10]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # if arr is empty\n    if len(arr) == 0:\n        return []\n    \n    # sort the array\n    arr.sort()\n    \n    # reverse the array\n    arr = arr[::-1]\n    \n    # initialize the return array\n    output = []\n    \n    # iterate over the array, converting the int to string, then append to the output array\n    for i in range(len(arr)):\n        output.append(get_name(arr[i]))\n    \n    return output\n",
        "test": "assert ids.by_length([1, 6, 7, 1, 3, 9, 7, 9, 2, 9, 7]) == \"OneTwoSevenOneThreeNineSevenSevenNineTwoNine\""
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    numbers = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            numbers.append(numbers[i - 1] * i)\n        else:\n            numbers.append(numbers[i - 1] + i)\n    return numbers\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     even_odd_palindrome(10) == (2, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sum([1 for num in arr if (num > 0) and (sum(int(i) for i in str(num)) > 0)])\n",
        "test": "assert     count_nums([5, 5, 5]) == 3"
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not arr:\n        return True\n    arr.sort()\n    if arr == arr[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([0, 2, 1, 3, 5]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if sum(lst1) % 2 == 1:\n        return \"NO\"\n    elif sum(lst2) % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([3,1,5], [2,3,1]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # Your code here\n",
        "test": "assert     histogram('a b b c d d a a') == \\"
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if s == \"\":\n        return (s,True)\n    s = list(s)\n    for i in range(0,len(s)):\n        if s[i] == c:\n            del s[i]\n    return (\"\".join(s),s == s[::-1])\n",
        "test": "assert reverse_delete('', 'abc') == ('', True)"
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return [len([i for i in x if int(i)%2!= 0]) for x in lst]\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if not nums:\n        return 0\n    \n    minSum = nums[0]\n    currSum = 0\n    \n    for num in nums:\n        if currSum < 0:\n            currSum = num\n        else:\n            currSum += num\n        minSum = min(minSum, currSum)\n    \n    return minSum\n",
        "test": "assert     minSubArraySum([-1, -1, -1, -1, -1]) == -1"
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    res = 0\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                # print(i, row[i])\n                res = max(res, math.ceil(row[i] / capacity))\n    return res\n",
        "test": "assert     max_fill([[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 1, 0], [0, 0, 1, 0, 1]], 3) == 1"
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([7,5,7,5,4,5,4,3,4,4,3,4,4,3,3,4,3,2,4,3,5,2,4,1,2,4,2,4,2,1,4,2,3,3,3,3,3,3,2,1,2,2,2,2,2,2,1,2,2,3,2,1,2,3,2,2,3,2,1,2,2,2,3,2,2,2,3,2,1,2,2,2,3,2,2,3,2,2,3,2,1,2,1,3,2,1,3,2,3,2,3,2,2,3,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,3,2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,3,2,2,3,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,3,2,2,3,2,2,2,2,3,2,2,3,2,2,2,3,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,3,2,2,3,2,2,2,2,2,2,2,3,2,3,2,2,3,2,2,3,2,3,2,3,2,2,2,3,2,3,2,2,3,2,2,3,2,3,2,3,2,2,3,2,3,2,3,2,3,2,3,2,2,3,2,2,3,2,2,2,3,2,3,2,3,2,3,2,2,3,2,2,2,3,2,2,3,2,2,2,3,2,2,3,2,2,2,3,2,3,2,3,2,3,2,2,3,2,2,3,2,2,3,2,2,2,2,3,2,2,3,2,2,3,2,2,2,2,3,2,3,2,3,2,3,2,2,"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if s is None:\n        return []\n    return [word for word in s.split(\" \") if is_consonant_count(word, n)]\n",
        "test": "assert     select_words(s=\"aa bb cc\", n=3) == [\"cc\"]"
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for i in range(len(word)):\n        if word[i] in \"AEIOUaeiou\":\n            return word[i]\n    return \"\"",
        "test": "assert     get_closest_vowel(\"leaves\") == \"e\""
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    stack = []\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'No' if stack else 'Yes'\n",
        "test": "assert     match_parens(')(') == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if not arr:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n    res = [None] * k\n    arr = sorted(arr)\n    for i in range(k):\n        res[i] = arr[len(arr) - i - 1]\n    return res\n",
        "test": "assert     maximum([1, 2, 3, 4], 2) == [4, 3]"
    },
    {
        "number": 121,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2!= 0])\n",
        "test": "assert     solution([0, 0]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return sum(sorted(arr)[:k][k-1:k+1])\n",
        "test": "assert     add_elements([0,0], 3) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            collatz_sequence.append(n)\n        else:\n            n = 3 * n + 1\n            collatz_sequence.append(n)\n    return collatz_sequence\n",
        "test": "assert     get_odd_collatz(1) == [1], get_odd_collatz(1)"
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    days = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    month, day, year = date.split('-')\n    if int(year) < 1000:\n        return False\n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day) > 31 or int(day) < 1:\n        return False\n    if month == '02' and int(day) > 29:\n        return False\n    if month in ['04', '06', '09', '11'] and int(day) > 30:\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12'] and int(day) > 31:\n        return False\n    return True\n",
        "test": "assert     valid_date(\"-2-2-2012\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # words = txt.split(\" \")\n    # return words\n    #\n    # lst = []\n    #\n    # for i in txt:\n    #     if i.isalpha():\n    #         lst.append(i)\n    #\n    # if lst == []:\n    #     return len(txt)\n    # else:\n    #     return len(lst)\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "test": "assert     split_words('foo') == ['foo']"
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        if lst[0] > lst[1]:\n            return False\n        else:\n            return is_sorted(lst[1:])\n",
        "test": "assert     not is_sorted([1,2,3,1])"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Given interval is not a tuple\")\n    if len(interval1)!= 2 or len(interval2)!= 2:\n        raise ValueError(\"Given interval is not a 2-tuple\")\n    if interval1[0] >= interval1[1] or interval2[0] >= interval2[1]:\n        raise ValueError(\"Given interval is not a closed interval\")\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection((1, 4), (5, 7)) == (NO, NO)"
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if arr == []:\n        return None\n    else:\n        arr_length = len(arr)\n        arr_signs = [0 for i in range(arr_length)]\n        arr_signs[0] = 1\n        for i in range(1, arr_length):\n            if arr[i] < 0:\n                arr_signs[i] = -1\n            elif arr[i] > 0:\n                arr_signs[i] = 1\n        product = 1\n        for i in range(arr_length):\n            product *= arr_signs[i]\n        return product\n",
        "test": "assert     prod_signs([]) == None, \"Check2\""
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    if rows < 2 or cols < 2:\n        return\n    # initialize the answer\n    answer = [0] * k\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                answer[0] = grid[0][0]\n                continue\n            elif i == 0:\n                answer[0] = min(answer[0], grid[i][j-1])\n            elif j == 0:\n                answer[0] = min(answer[0], grid[i-1][j])\n            else:\n                answer[0] = min(answer[0], grid[i][j], grid[i-1][j], grid[i][j-1])\n    return answer\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    tribonacci_sequence = [1, 2, 1]\n    if n == 0:\n        return tribonacci_sequence\n    for i in range(3, n + 1):\n        tribonacci_sequence.append(sum(tribonacci_sequence[-3:]))\n    return tribonacci_sequence\n",
        "test": "assert     tri(4) == 3"
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if n < 10: return n\n    else:\n        s = str(n)\n        l = len(s)\n        return reduce(lambda x,y: x*y, map(int, s[1:l:2]))\n",
        "test": "assert     digits(7) == 7"
    },
    {
        "number": 132,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[]'    ) == True, 'is_nested(\"[]\")'"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    sum = 0\n    for n in lst:\n        sum += n**2\n    return int(sum)\n",
        "test": "assert     sum_squares([1,2,3,4,5]) == 55"
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if txt == \"\" or txt[-1] in \"!?.\":\n        return False\n    elif txt[-1] in \"0123456789\":\n        return False\n    elif txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\":\n        return False\n    else:\n        return True\n",
        "test": "assert     check_if_last_char_is_a_letter('xyz') == True"
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    length = len(arr)\n    \n    for i in range(length):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert     can_arrange([1, 1, 1, 1]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    lst = [x for x in lst if x < 0]\n    if not lst:\n        return None, None\n    else:\n        return max(lst), min(lst)\n",
        "test": "assert     largest_smallest_integers([0, 1, 2, 3, 4]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if a == b:\n        return None\n    if type(a) == type(b):\n        if type(a) == str:\n            a = float(a.replace(',', '.'))\n        return a\n    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    return a if a > b else b\n    # return max(a, b)\n",
        "test": "assert         compare_one(-1, -1) == None"
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n < 4:\n        return False\n    return sum(x for x in range(4, n + 1, 2) if x % 2 == 0) == n\n",
        "test": "assert     is_equal_to_sum_even(17) == False"
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return 1 if n < 2 else n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"   \", \"-\")\n    return text\n    \ndef get_num_seqs(num_seqs):\n    \"\"\"\n    Given an integer num_seqs, return a string representing the number \n    of sequences as a number followed by a single character, as in \n    the following examples:\n    get_num_seqs(1) == \"1\"\n    get_num_seqs(2) == \"2\"\n    get_num_seqs(3) == \"3\"\n    \"\"\"\n    if num_seqs == 1:\n        return str(num_seqs)\n    elif num_seqs == 2:\n        return str(num_seqs) + \"_\"\n    else:\n        return str(num_seqs) + \"-\"\n    \ndef extract_spans(span_list):\n    \"\"\"\n    Given a list of pairs of integers, [1, 2], [2, 4], [3, 6]..., \n    extract a list of all consecutive sub-lists. For example, \n    \n    extract_spans([1, 2]) == [[1, 2]]\n    extract_spans([1, 2, 4]) == [[1, 2], [2, 4]]\n    extract_spans([1, 2, 4, 5]) == [[1, 2], [2, 4], [4, 5]]\n    extract_spans([1, 2, 4, 5, 6]) == [[1, 2], [2, 4], [4, 5], [5, 6]]\n    extract_spans([1, 2, 4, 5, 6, 7]) == [[1, 2], [2, 4], [4, 5], [5, 6], [6, 7]]\n    extract_spans([]) == []\n    extract_spans([1,2]) == []\n    extract_spans([1,2,3]) == []\n    \"\"\"\n    \n    def spans_helper(span_list, span):\n        if span_list == []:\n            return [span]\n        elif span_list[0][0] == span[0]:\n            return spans_helper(span_list[1:], span)\n        elif span_list[0][0] < span[0]:\n            return spans_helper(span_list[1:], span)\n        else:\n            return spans_helper(span_list[1:], span) + [span_list[0]]\n    return spans_helper(span_list, [span_list[0], span_list[1]])\n    \ndef get_target_string(span_list, target_label):\n    \"\"\"\n    For a given span_list, extract the string corresponding to the \n    target label, e.g., for span_list = [[1, 2], [3, 5]], target_label = \n    \"NE\" --> \"NE\"\n    target_string(\"NE\", span_list) == \"NE\"\n    \"\"\"\n    return \"\".join([target_label for i, j in span_list])\n",
        "test": "assert     fix_spaces(\"Hello world\") == \"Hello_world\""
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    valid_name = False\n    if len(file_name) > 3:\n        for i in file_name:\n            if i.isdigit():\n                valid_name = False\n    elif file_name.find('.')!= -1:\n        valid_name = True\n    else:\n        valid_name = False\n    if valid_name:\n        if file_name[0] in 'abcdefghijklmnopqrstuvwxyz':\n            if file_name[1]!= '.':\n                if file_name[2] in 'abcdefghijklmnopqrstuvwxyz':\n                    if file_name[-3:] in ['txt', 'exe', 'dll']:\n                        return 'Yes'\n    return 'No'\n",
        "test": "assert     file_name_check('abc.123') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return sum(x**2 if i%3==0 else x**3 if i%4==0 else x for i, x in enumerate(lst))\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    sentence = sentence.split(\" \")\n    if len(sentence) == 1:\n        return sentence[0]\n    return \"\".join([word for word in sentence if len(prime_factors(len(word))) == 1])",
        "test": "assert     words_in_sentence(\"abc\") == \"abc\""
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return eval(str(x) +'/'+ str(n)) == int(eval(str(x) +'/'+ str(n)))\n",
        "test": "assert     simplify(\"4/8\", \"8\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(nums, key=lambda i: sum(int(c) for c in str(abs(i))))\n",
        "test": "assert     order_by_points([2, 1, 2, 5, 7, 2]) == [1, 2, 2, 2, 5, 7]"
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    if nums is None or len(nums) == 0:\n        return 0\n    \n    return sum(1 for num in nums if num > 10 and (int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1))",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9])     == 0"
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([a[i] + a[j] + a[k] for i in range(n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0])",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass",
        "test": "assert     bf('Jupiter', 'Saturn') == ('Jupiter', 'Saturn')"
    },
    {
        "number": 149,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    def key_sort(word):\n        return len(word)\n    return sorted(lst, key = key_sort)\n",
        "test": "assert         sorted_list_sum([\"ab\", \"a\"]) == [\"a\", \"ab\"]"
    },
    {
        "number": 150,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n-1, y, x)\n    else:\n        return x_or_y(n-1, x, y)\n",
        "test": "assert     x_or_y(3,3,3) == 3"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for number in lst:\n        if number > 0:\n            sum_of_squares += number * number\n    return sum_of_squares\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    guess=list(guess)\n    scores=list(game)\n    count=0\n    for i in range(len(guess)):\n        if guess[i]==scores[i]:\n            count+=1\n    for i in range(len(guess)):\n        if guess[i]!=scores[i]:\n            guess[i]+=scores[i]\n    return guess\n    \n",
        "test": "assert     compare([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]"
    },
    {
        "number": 153,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    extensions_strength = []\n    for extension in extensions:\n        strength = 0\n        for character in extension:\n            if character.isupper():\n                strength += 1\n            elif character.islower():\n                strength -= 1\n        extensions_strength.append(strength)\n    return '%s.%s' % (class_name, extensions[extensions_strength.index(max(extensions_strength))])\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(a) < len(b):\n        b = b[:len(a)]\n    if len(b) < len(a):\n        a = a[:len(b)]\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n",
        "test": "assert     not cycpattern_check('hello', 'llohell')"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    even = 0\n    odd = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n",
        "test": "assert     even_odd_count(123456789) == (7, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = ''\n",
        "test": "assert     int_to_mini_roman(100) == 'c'"
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return (a*a + b*b == c*c) or (b*b + c*c == a*a) or (c*c + a*a == b*b)\n",
        "test": "assert     right_angle_triangle(3,4,5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    max_len = 0\n    max_string = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_string = word\n    return max_string\n",
        "test": "assert     find_max(['a','def','ghi','abcdef']) == 'abcdef'"
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    \n    # YOUR CODE HERE\n    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # YOUR CODE HERE\n    res = 0\n    for op, num in zip(operator, operand):\n        if op == '+':\n            res += num\n        elif op == '-':\n            res -= num\n        elif op == '*':\n            res *= num\n        elif op == '//':\n            res //= num\n        elif op == '**':\n            res **= num\n        else:\n            pass\n    return res\n",
        "test": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"%\",\"**\"], [1,2,3,4,5,6]) == 1"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    def reverse(string, start, end):\n        while start < end:\n            string[start], string[end - 1] = string[end - 1], string[start]\n            start += 1\n            end -= 1\n    l = list(s)\n    if not l:\n        return \"\".join(l)\n    if l[0].isalpha():\n        reverse(l, 0, len(l) - 1)\n    else:\n        reverse(l, 0, len(l))\n    return \"\".join(l)\n",
        "test": "assert     solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == string_to_md5(\"\")"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     generate_integers(11, 22) == [12, 14, 16, 18, 20, 22]"
    }
]