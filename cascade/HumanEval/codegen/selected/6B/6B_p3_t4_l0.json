[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0.0, 5.0, 10.0], 0.5) is True",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # Split the string based on spaces\n    # Initially store the split as a list of groups\n    # Append to that list the strings returned by the recursion, i.e., each group on its own\n    # Use the paren_stack to keep track of the balanced parentheses\n    # When the stack is empty, the string has been completely processed\n    # Return the list of strings\n",
        "test": "assert     separate_paren_groups('(()(()))') == ['((()()))']",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if number == 0:\n        return 0\n    number_str = str(number)\n    for i in range(len(number_str) - 1, -1, -1):\n        if number_str[i]!= '0':\n            return float(number_str[i:])\n    return 0\n",
        "test": "assert     truncate_number(16.1) == 1.0",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # initialize the index of the balance\n    index = 0\n    # iterate over the operations\n    for operation in operations:\n        # if the balance is below zero\n        if index < 0:\n            return True\n        # add the current operation to the balance\n        index += operation\n    # return the result\n    return False\n",
        "test": "assert     below_zero([-1, -2, 3, 4, -5, -6, -7, 8, 9, 10]) == True",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # TODO: maybe not correct\n    numbers = sorted(numbers)\n    return (numbers[len(numbers) // 2] - numbers[0]) / (len(numbers) // 2)\n",
        "test": "assert     mean_absolute_deviation([-1.0, -1.0, -1.0, -1.0, -1.0]) == 0",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    new_numbers = []\n    for number in numbers:\n        new_numbers.append(number)\n        new_numbers.append(delimeter)\n    return new_numbers\n",
        "test": "assert     intersperse(numbers=[], delimeter=5) == []",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    parens = []\n    current_level = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            current_level += 1\n            parens.append(current_level)\n        elif c == ')':\n            current_level -= 1\n            parens.append(current_level)\n    return parens\n",
        "test": "assert     parse_nested_parens(\"(()())\") == [1, 2]",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"apple\", \"banana\", \"kiwi\"], \"ki\") == [\"kiwi\"]",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        tmp = numbers[i]\n        for j in range(i, len(numbers)):\n            tmp = max(tmp, numbers[j])\n            result.append(tmp)\n    return result\n",
        "test": "assert     rolling_max([1]) == [1]",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    elif is_palindrome(string[1:]):\n        return string[0] + make_palindrome(string[1:])\n    else:\n        return string[0] + make_palindrome(string[1:]) + string[0]\n",
        "test": "assert     is_palindrome(\"abc\") == False",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = []\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)\n",
        "test": "assert     string_xor(\"10011\", \"01001\") == \"10001\"",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "test": "assert     longest([]) is None",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(a=11, b=6) == 1",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    result = ''\n    for i in range(n+1):\n        result += str(i) +''\n    return result[:-1]\n",
        "test": "assert     string_sequence(0) == \"\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"Mississippi\") == 4, \"expected 4\"",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # TODO: Implement me!\n    return list(map(lambda x: 4 if x == 'o' else 2 if x == 'o|' else 1, music_string.split(' ')))\n",
        "test": "assert     parse_music('o|o|o|o|o') == [2, 4, 6, 8, 10]",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('fghhgf', 'h') == 2",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    return \" \".join(sorted(numbers.split(' '), key=lambda x: int(x)))\n",
        "test": "assert sort_numbers(\"six five four three two one zero\") == \"01234567\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Numbers list must contain at least two numbers')\n",
        "test": "assert find_closest_elements([-1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12]) == (-1, 1)",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    numbers.sort()\n    n = len(numbers)\n    rescale = []\n    for i in range(n):\n        rescale.append(1.0 * i / (n - 1))\n    return rescale\n",
        "test": "assert     rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [int(item) for item in values if type(item) == int]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"abc\") == 3",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return n // 2\n",
        "test": "assert     largest_divisor(3) == 1",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    res = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            res.append(d)\n    if n > 1:\n        res.append(n)\n    return res\n",
        "test": "assert     factorize(2*3*5) == [2,3,5]",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "test": "assert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('a') == 'A'",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"1\", \"2\", \"3\"]) == \"123\"",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert         filter_by_prefix([], 'hi') == []",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([2, 3, -1, 4, -5]) == [2, 3, 4]",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(0) == False, '0 is not prime'",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    assert len(xs) % 2 == 0, \"Polynomial has to have even number of coefficients\"\n    assert all(coeff!= 0 for coeff in xs), \"No coefficient is 0\"\n",
        "test": "assert     poly([0, 0, 0], 1) == 0",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    l.sort()\n    return l",
        "test": "assert sort_third([]) == []",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1,2,3,1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if not l:\n        return None\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    # TODO: Implement this function!\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    count = 0\n    for i in range(1, n + 1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n",
        "test": "assert fizz_buzz(7) == 0",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "test": "assert     sort_even([1,2,3]) == [1,2,3]",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # split string into groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert each group to list of characters.\n    groups = [list(group) for group in groups]\n    # revert each group to the first element and build string.\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"abc\") == \"abc\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return fib(n)\n",
        "test": "assert     isinstance(prime_fib(1), int)",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum(set(l)) == 0\n",
        "test": "assert     triples_sum_to_zero([-10,-8,0,-5,-4,-2,0,2,4,6,8]) == False",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    return\n",
        "test": "assert     car_race_collision(6) == 3, car_race_collision(6)",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    set1 = set(l)\n    for i in set1:\n        if (i*-1) in set1:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, -8]) == False",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if x == 0:\n        return \"0\"\n    elif x < 0:\n        raise ValueError(\"negative input\")\n    elif base < 2 or base > 9:\n        raise ValueError(\"base number must be between 2 and 9\")\n    elif x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x % base)\n",
        "test": "assert ",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return (a * h) / 2\n",
        "test": "assert ",
        "num_ids": 100,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b = 0, 1\n    for _ in range(n - 3):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return np.median(l)\n",
        "test": "assert median([1,2,3]) == 2",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "test": "assert     is_palindrome('a') == True",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return pow(n, p, p)\n",
        "test": "assert     modp(3, 5) == 3",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\"",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    new_text = ''\n    for char in text:\n        if char!= '':\n            new_text += char\n    return new_text\n",
        "test": "assert     remove_vowels('hello') == 'hll'",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return all(x < t for x in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4], 0) is False",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return x + y\n",
        "test": "assert     add(2,2) == 4",
        "num_ids": 100,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for char in s0:\n        if char in s1:\n            s1 = s1[s1.index(char) + 1:]\n        else:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"\", \"\") is True",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"> >\") == False",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert monotonic([3, 2, 1])",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common(['a','b','c'], ['a','b','c']) == ['a', 'b', 'c']",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    if n == 1:\n        return 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return i\n",
        "test": "assert     largest_prime_factor(15) == 3",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n-1)\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def bracket_map(bracket: str):\n        if bracket == \")\":\n            return \"(\"\n        else:\n            return \")\"\n    if brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    return all(map(bracket_map, brackets))\n",
        "test": "assert     correct_bracketing(\"()\")",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return [np.poly1d([1] + xs[1:])(x) for x in xs[:-1]]\n",
        "test": "assert     derivative([1,0,0,0]) == [0]",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    a, b = 0, 1\n    while n >= 1:\n        a, b = b, a + b\n        n -= 1\n    return a\n",
        "test": "assert         fibfib(0) == 0",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    vowels = set(['a','e','i','o','u','y'])\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"lions\") == 2",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # Split the number into a list of digits\n    digits = list(str(x))\n    # Make sure shift is not longer than the number of digits\n    shift = shift % len(digits)\n    # Perform the shift\n    digits = digits[-shift:] + digits[:-shift]\n    # Convert the list of digits back to a number\n    return int(''.join(digits))\n",
        "test": "assert     circular_shift(12345,0) == 12345",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    return sum([ord(c) for c in s if c.isupper()])\n",
        "test": "assert     digitSum(\"1234\") == 10",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in s.split():\n        if i == \"apples\":\n            count += 1\n        elif i == \"oranges\":\n            count += 1\n        elif i == \"mangoes\":\n            count += 1\n    return n-count\n",
        "test": "assert     fruit_distribution(\"oranges\", 1) == 0",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    l = list()\n    if len(arr) == 0:\n        return l\n    \n    l = [ [ arr[0], 0 ] ]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            l.append( [ arr[i], i ] )\n    l.sort()\n    return l[0]\n",
        "test": "assert     [ 0, 0 ] == pluck([ 1, 2, 3, 4, 5, 6, 7 ])",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return max(lst, key = lambda x: lst.count(x)) if len(lst) > 0 else -1\n",
        "test": "assert search([1, 2, 2]) == 2",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    lst = lst[:]\n    if len(lst) < 2:\n        return lst\n    lst = sorted(lst)\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return round(math.sqrt((b*b) + (c*c) - 2*b*c) / 2, 2)\n",
        "test": "assert     triangle_area(5,5,5) == 0.0",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    l = len(q)\n    s = 0\n    for i in range(l):\n        s+=q[i]\n    if s <= w and is_palindromic(q) == True:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 9) == False, \"The example should return False\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    p1, p2 = 0, len(arr) - 1\n    while p1 < p2:\n        if arr[p1]!= arr[p2]:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p1 += 1\n            p2 -= 1\n        else:\n            p1 += 1\n            p2 -= 1\n    return len(arr) - (p1 + 1)\n",
        "test": "assert     smallest_change([1, 3, 1]) == 1",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return [i for i in lst1 if sum(len(j) for j in i) < sum(len(j) for j in lst2)]\n",
        "test": "assert     total_match(['a', 'b', 'c', 'd'], ['e', 'f', 'g'])         == ['a', 'b', 'c', 'd']",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return False\n",
        "test": "assert     is_multiply_prime(11) is False",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return x==n**int(str(n)[0])\n",
        "test": "assert     is_simple_power(4, 2) == True",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return a == a*a*a",
        "test": "assert ictube(0) == False",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return 0\n",
        "test": "assert     hex_key(\"\") == 0",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    bin_string = ''\n",
        "test": "assert     decimal_to_binary(9) == '9'*10 + 'db'",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return s and s[0]!= s[1] and s[1]!= s[2] and s[0]!= s[2]\n",
        "test": "assert     is_happy(\"aaa\") == False",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    grades.sort(reverse=True)\n    for i in range(len(grades)):\n        grades[i] = int(grades[i])\n    for i in range(len(grades)):\n        if grades[i] < 4:\n            letter_grades[i] = 'F'\n        elif grades[i] < 4.3:\n            letter_grades[i] = 'D-'\n        elif grades[i] < 3.7:\n            letter_grades[i] = 'D'\n        elif grades[i] < 3.3:\n            letter_grades[i] = 'C-'\n        elif grades[i] < 3.0:\n            letter_grades[i] = 'C'\n        elif grades[i] < 2.7:\n            letter_grades[i] = 'B-'\n        elif grades[i] < 2.3:\n            letter_grades[i] = 'B'\n        elif grades[i] < 2.0:\n            letter_grades[i] = 'A-'\n        else:\n            letter_grades[i] = 'A'\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 2.7, 2.3, 1.7, 1.3, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = int(len(string))\n    return s % 2 == 0 and s > 1\n",
        "test": "assert     prime_length(\"abc123\") == True",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    def digit_count(n):\n        return len(str(n))\n    digit_counts = {}\n    for i in range(1, 10):\n        digit_counts[i] = 0\n    digit_counts[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, 10):\n            if i % j == 0:\n                digit_counts[j] += digit_counts[i/j]\n    return sum(digit_counts.values())\n",
        "test": "assert         starts_one_ends(1) == 1",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    total = 0\n    for i in str(N):\n        total += int(i)\n    print(str(total))\n",
        "test": "assert     solve(3) == '11'",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst.insert(i, lst[i])\n        i += 2\n    del lst[0:len(lst):2]\n    return lst",
        "test": "assert     add([]) == []",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return''.join([i for i in s.split(' ') if i!= ''])",
        "test": "assert     anti_shuffle('Hello') == 'Hello'",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    \n    # Replace this line with your code\n    return sorted(lst, key=lambda t: t[0])[::-1]\n",
        "test": "assert     get_row([['a', 'b', 'c'],",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    sorted_array = sorted(array)\n    return sorted_array\n",
        "test": "assert     sort_array([5, 2, 3, 1]) == [1, 2, 3, 5], 'Wrong answer'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    new_alpha = alpha[2:] + alpha[0:2]\n    return ''.join(new_alpha[alpha.index(c)+1] for c in s)\n",
        "test": "assert     encrypt('y') == 'b'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    # First Solution\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n    \n    # Second Solution\n    sorted_list = sorted(lst)\n    return None if len(sorted_list) < 2 else sorted_list[1]\n    \n    # O(n log n) time complexity, O(1) space complexity\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    smallest = min(sorted_list)\n    return sorted_list[sorted_list.index(smallest) + 1]",
        "test": "assert next_smallest([1, 1, 1, 1, 2, 3]) == 1",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return 0\n",
        "test": "assert     is_bored('Hi. I am good. How are you?') == False",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return True if (type(x) == int or type(x) == float) and (type(y) == int or type(y) == float) and (type(z) == int or type(z) == float) and (x + y == z) else False\n",
        "test": "assert     any_int(-1, -2, 3) == False",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    result = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                result += chr(ord(letter) - 2)\n            else:\n                result += letter.upper()\n        else:\n            result += letter\n    return result\n",
        "test": "assert ",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    \n    lst = [int(i) for i in lst]\n    \n    ans = 0\n    for i in lst:\n        if isPrime(i):\n            ans += i\n    return ans\n",
        "test": "assert         \"5\"        == skjkasdkd([7, 3, 4, 2, 8, 5, 9, 9])",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if len(dict)==0:\n        return False\n    else:\n        for i in dict.keys():\n            if i.isupper():\n                return False\n            elif i.islower():\n                pass\n            else:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({\"a\": 1, \"b\": 2, \"C\": 3}) is False",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    primes = [2]\n    for n in range(3, n+1):\n        for i in range(len(primes)):\n            if n % primes[i] == 0:\n                break\n        else:\n            primes.append(n)\n    return primes\n",
        "test": "assert     count_up_to(10) == [2,3,5,7]",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    \n    return a * b\n    \n",
        "test": "assert     multiply(0, 12) == 0",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    s = s.lower()\n    if len(s) == 0:\n        return 0\n    elif len(s) % 2 == 1:\n        return 0\n    else:\n        return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')",
        "test": "assert     count_upper(\"abc\") == 0",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"15\") == 15",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + make_a_pile(n-1)\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    \n    return s.split(',')\n",
        "test": "assert     words_string(\"This,is,a,test\") == ['This', 'is', 'a', 'test']",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    num = x\n    while num + 2 < y:\n        num += 2\n    if num % 2 == 0:\n        return num\n    return -1",
        "test": "assert     choose_num(2, 4) == 2",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    avg = (n + m) / 2\n    bavg = bin(int(avg))\n    if n > m:\n        return -1\n    return bavg[2:]\n",
        "test": "assert     rounded_avg(3, 5) == -1",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    \n    return [i for i in x if len(str(i))%2==0]\n",
        "test": "assert     unique_digits([1,123])==[1,2,3]",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return [DIGIT_NAMES[i] for i in sorted(arr)[::-1]]",
        "test": "assert     by_length([]) == \"\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    if n < 2:\n        return []\n    elif n == 2:\n        return [1,2]\n    else:\n        return [1] + f(n-1)\n        \n    \n    \nprint f(5)\n",
        "test": "assert     [f(1) == [1], f(2) == [2, 4], f(3) == [3, 6, 12, 24], f(4) == [4, 8, 12, 16, 24, 40, 48, 96], f(5) == [5, 10, 10, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 1163225, 67831250, 33140625, 15625390625, 78125390625, 390625390625, 1953125390625, 1163225390625, 67831250390625, 33140625390625, 15625390625390625, 78125390625390625, 390625390625390625, 1953125390625390625, 1163225390625390625, 67831250390625390625, 33140625390625390625, 15625390625390625390625, 78125390625390625390625]",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return tuple(len(t) for t in groupby(str(n), key=lambda x: x.isdigit()))\n",
        "test": "assert     even_odd_palindrome(3) == (2,2)",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for num in arr:\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            num //= 10\n            if digit > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    if arr==None or len(arr)==0:\n        return True\n    if arr[0]>arr[1]:\n        return False\n    if arr[-1]<arr[-2]:\n        return False\n    i=1\n    while i<len(arr):\n        if arr[i-1]>arr[i]:\n            return False\n        i+=1\n    return True\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    result = exchange_helper(lst1, lst2)\n    return \"YES\" if result else \"NO\"\n",
        "test": "assert ",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    histo = {}\n    for c in test:\n        if c not in histo:\n            histo[c] = 0\n        histo[c] += 1\n    return histo\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i]==c:\n            s[i] = \"\"\n    s = \"\".join(s)\n    return s,s==s[::-1]\n",
        "test": "assert     reverse_delete('a', 'b') == ('a',True)",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str4ng {} of the {}nput.\".format(count, i, len(i)))\n    return result\n",
        "test": "assert     odd_count(['hello','world']) == [1, 4, 3, 2, 5, 4, 3, 2, 1]",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # todo: brute force\n    min_sum = None\n    min_arr = None\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum >= 0 and (min_sum is None or min_sum > curr_sum):\n                min_sum = curr_sum\n                min_arr = nums[i:j + 1]\n    return min_sum, min_arr\n",
        "test": "assert ",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    buckets = [[0]*len(grid[0]) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                buckets[i][j] = capacity\n                \n    def is_valid(buckets, i, j):\n        return buckets[i][j] > 0\n            \n    def find_path(buckets, i, j, curr_length):\n        if i == len(grid)-1 and j == len(grid[0])-1:\n            return True\n        \n        if is_valid(buckets, i+1, j):\n            buckets[i+1][j] += buckets[i][j]\n            buckets[i][j] = 0\n            if find_path(buckets, i+1, j, curr_length + 1):\n                return True\n            else:\n                buckets[i+1][j] -= buckets[i][j]\n                buckets[i][j] = 0\n        \n        if is_valid(buckets, i, j+1):\n            buckets[i][j+1] += buckets[i][j]\n            buckets[i][j] = 0\n            if find_path(buckets, i, j+1, curr_length + 1):\n                return True\n            else:\n                buckets[i][j+1] -= buckets[i][j]\n                buckets[i][j] = 0\n        \n        return False\n    \n    return find_path(buckets, 0, 0, 0)\n",
        "test": "assert     max_fill([[1, 0, 1, 0], [0, 1, 1, 0], [1, 1, 1, 0]], 4) == 0",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    bin_rep = [bin(i).count('1') for i in arr]\n    return sorted(arr, key=lambda x: (bin_rep[arr.index(x)], x))\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1389,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    words = s.split(\" \")\n    return [w for w in words if len(w) == n and set(w) - vowels == set(w)]\n",
        "test": "assert     select_words(\"\", 1) == []",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    idx = len(word)\n    vowel = \"\"\n    for i in range(idx-1, -1, -1):\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n    if vowel == \"\":\n        return \"\"\n    i = idx - 1\n    while i > 0:\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "test": "assert     get_closest_vowel('hi') == 'i'",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(['(', ')', ')', '()', '((', ')', ')', ')', '()', '()', '(', ')']) == 'No'",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # TC: O(n)\n    # SC: O(1)\n    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max_arr[i])\n    return max_arr\n",
        "test": "assert     maximum([1, 3, 4, 5, 2, 3], 3) == [5, 4, 3]",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2])\n",
        "test": "assert     solution([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    def is_valid(val):\n        return val < 10**k\n    return sum(filter(is_valid, arr))\n",
        "test": "assert     add_elements([],0) == 0",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n/2) + [n]\n    return get_odd_collatz(n*3 + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if len(date) > 0:\n        valid_date = False\n        month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n        valid_date = True\n        date_splitted = date.split('-')\n        if len(date_splitted) == 3:\n            if len(date_splitted[0]) == 2 and len(date_splitted[1]) == 2 and len(date_splitted[2]) == 4:\n                if int(date_splitted[0]) < 13 and int(date_splitted[1]) < 13:\n                    if int(date_splitted[1]) in [1, 3, 5, 7, 8, 10, 12]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 31:\n                                return False\n                            if int(date_splitted[1]) == 2:\n                                if int(date_splitted[2]) < 29:\n                                    return False\n                                else:\n                                    return True\n                            else:\n                                return True\n                        else:\n                            return False\n                    elif int(date_splitted[1]) in [4, 6, 9, 11]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 30:\n                                return False\n                            else:\n                                return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     valid_date(    \"07-03-2000\") == False",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    sorted_lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i]!= sorted_lst[i]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    \n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == 'YES'",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    result = 1\n    for i in arr:\n        if i == 0:\n            result = 0\n            break\n        elif i > 0:\n            result *= 1\n        elif i < 0:\n            result *= -1\n    return result\n",
        "test": "assert     prod_signs([0, 0, 0]) == 0",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    def minPathHelper(grid, row, col, k):\n        if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or k < 1:\n            return []\n",
        "test": "assert     minPath([[1,3,1,3,1],[2,4,2,4,2],[3,4,3,4,3]], 2) == [1, 3, 1]",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    \n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        arr = [1, 1, 1]\n        \n        for i in range(2, n+1):\n            if i % 2 == 0:\n                arr.append(arr[i-2]+arr[i-1])\n            else:\n                arr.append(arr[i-1]+arr[i-2]+arr[i-3])\n                \n        return arr\n    \nif __name__ == \"__main__\":\n    print tri(50)",
        "test": "assert     tri(4) == 3",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n//10)*(n%10)\n",
        "test": "assert     [digits(n) for n in [0, 0, 0, 0, 0]] == [0, 0, 0, 0, 0]",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        if string[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[]') == True",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum([int(math.ceil(num)) ** 2 for num in lst])\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == sum([n**2 for n in [1,2,3,4,5,6,7,8,9,10]])",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(txt) == 0:\n        return False\n    if txt[-1] >= 'a' and txt[-1] <= 'z':\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('this is a test 1') == False",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    negs = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    if not negs and not pos:\n        return (None, None)\n    elif not negs and pos:\n        return (None, max(pos))\n    elif negs and not pos:\n        return (max(negs), None)\n    else:\n        return (max(negs), min(pos))\n",
        "test": "assert     (largest_smallest_integers([]) == (None, None))",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # if isinstance(a, int) and isinstance(b, int):\n    #     return a if a > b else b\n    # elif isinstance(a, float) and isinstance(b, float):\n    #     return a if a > b else b\n    # elif isinstance(a, str) and isinstance(b, str):\n    #     return str(float(a)) if float(a) > float(b) else str(float(b))\n    # else:\n    #     return None\n",
        "test": "assert     (compare_one(1, 1) is None)",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return sum([x for x in range(2, n+1, 2) if n-x%2 == 0]) == n\n",
        "test": "assert     is_equal_to_sum_even(12) == False",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert     special_factorial(5) == 120",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    \n    return '_'.join(text.split(' '))\n    \n    \ndef fix_exceptions(text):\n    \"\"\"\n    Given a string text, replace all characters in it that are not \n    in the list exceptions with underscores\n    \n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    \"\"\"\n    \n    return ''.join([e for e in text if e in exceptions])\n    \n",
        "test": "assert     fix_spaces('my test') =='my_test'",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # base case\n    if file_name == '':\n        return 'No'\n    if len(file_name) > 15:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    # recursive case\n    if file_name[0].isalpha() and file_name[1:].isdigit() and file_name[-3:] in ['exe', 'dll']:\n        return 'Yes'\n    else:\n        return file_name_check(file_name[1:])\n",
        "test": "assert     file_name_check('abcd.abc.exe') == 'No'",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    sum_of_squares = 0\n    for index in range(len(lst)):\n        if index%3==0:\n            sum_of_squares+=lst[index]**2\n        elif index%4==0 and index%3!=0:\n            sum_of_squares+=lst[index]**3\n    return sum_of_squares\n",
        "test": "assert     sum_squares([-1,2,3]) == 7",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = \"\"\n    words = sentence.split()\n    for word in words:\n        while not is_prime(len(result) + 1):\n            pass\n        result += word\n    return result\n",
        "test": "assert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox'",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    def toNum(x):\n        \"\"\"converts string to a num\"\"\"\n        def conv(x):\n            if x.isdigit():\n                return int(x)\n            elif x[0] == '-':\n                return -1 * int(x[1:])\n            elif x == \"1/2\":\n                return 0.5\n            else:\n                return 1\n        return conv(x)\n",
        "test": "assert     not simplify(\"3/5\", \"2/3\")",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sorted(nums, key=lambda x: x if sum(map(int, str(abs(x)))) else (abs(x), x))\n",
        "test": "assert     order_by_points([7, 8, 1, 4, 5, 9, 2, 6, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"error in order_by_points\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sum([1 for n in nums if n>10 and (n//10)%10%2==1 and (n%10)%2==1])\n",
        "test": "assert     specialFilter([1,2,3,4,5]) ==     0",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sum(i*i - i + 1 for i in range(1, n)) // 3\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    planets = {\n        \"Mercury\" : \"Venus\",\n        \"Venus\" : \"Earth\",\n        \"Earth\" : \"Mars\",\n        \"Mars\" : \"Jupiter\",\n        \"Jupiter\" : \"Saturn\",\n        \"Saturn\" : \"Uranus\",\n        \"Uranus\" : \"Neptune\",\n        \"Neptune\" : \"Pluto\",\n    }\n    return sorted((name for name in planets if planets[name]>planets[planet1] and planets[name]<planets[planet2]))\n",
        "test": "assert ",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = []\n    for word in lst:\n        if len(word)%2 == 0:\n            result.append(word)\n    return sorted(result)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n%2==0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2, 2, 2) == 2",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sum([x**2 for x in lst if x%2!=0])\n",
        "test": "assert     double_the_difference([]) == 0, \"Wrong result for an empty list\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i] - game[i]))\n    return score\n",
        "test": "assert     compare([0, 0, 0, 0, 0], [0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    highest_strength = 0\n    highest_strength_extension = ''\n    for extension in extensions:\n        extension_name = extension.split('.')[-1]\n        strength = -1 * sum(1 for i in extension_name if i.isupper())\n        strength += sum(1 for i in extension_name if i.islower())\n        if strength > highest_strength:\n            highest_strength = strength\n            highest_strength_extension = extension\n    return \"{}.{}\".format(class_name, highest_strength_extension)\n",
        "test": "assert     Strongest_Extension('Gorilla', ['Snake', 'Cat', 'Ant', 'Tiger', 'Rooster', 'Gorilla', 'Pony']) == 'Gorilla.Gorilla'",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    if b in a: return True\n    return any([b in a[i:]+a[:i] for i in range(len(a))])\n",
        "test": "assert     cycpattern_check('foo', 'bar') == False",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    if num < 0:\n        num *= -1\n        even_digits += 1\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    return even_digits, odd_digits\n",
        "test": "assert     even_odd_count(42) == (2,0)",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"number is not an integer in range 1-1000\")\n    if number == 1:\n        return \"i\"\n    roman_numeral = \"\"\n    num_to_roman_dict = {\"1\":\"i\", \"2\":\"ii\", \"3\":\"iii\", \"4\":\"iv\", \"5\":\"v\",\n                         \"6\":\"vi\", \"7\":\"vii\", \"8\":\"viii\", \"9\":\"ix\"}\n    temp_num = number\n    while temp_num!= 0:\n        for roman_numeral_key in num_to_roman_dict.keys():\n            while temp_num >= int(roman_numeral_key):\n                roman_numeral += num_to_roman_dict[roman_numeral_key]\n                temp_num -= int(roman_numeral_key)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(4) == \"IV\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or c ** 2 + a ** 2 == b ** 2)\n",
        "test": "assert     (right_angle_triangle(3, 4, 5)             == True)",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['a', 'b', 'c']) == 'a'",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [number + need - remaining, remaining]\n",
        "test": "assert     eat(0,0,7) == [0,0]",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    assert (len(operator) == len(operand) - 1)\n    eval_operator = operator[:]\n    eval_operand = operand[:]\n    for i in range(len(operator)):\n        eval_operator[i] = operator[i].strip().lower()\n    for i in range(len(operand)):\n        eval_operand[i] = int(eval_operand[i])\n    for i in range(len(operator)):\n        if eval_operator[i] == '+':\n            eval_operand[i + 1] += eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '-':\n            eval_operand[i + 1] -= eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '*':\n            eval_operand[i + 1] *= eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '//':\n            eval_operand[i + 1] //= eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '**':\n            eval_operand[i + 1] **= eval_operand[i]\n            eval_operand[i] = 0\n    return eval_operand[-1]\n",
        "test": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [2,3,4,5,6,7]) == -1",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return s.swapcase()\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "test": "assert     generate_integers(2, 5) == [2, 4]",
        "num_ids": 576,
        "indeed": false
    }
]