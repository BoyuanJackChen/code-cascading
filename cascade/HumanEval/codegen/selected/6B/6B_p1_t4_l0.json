[
    {
        "number": 0,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 1) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_stack = []\n    paren_groups = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced parentheses')\n            paren_groups.append(paren_string[paren_stack.pop() + 1:i])\n    if len(paren_stack)!= 0:\n        raise ValueError('Unbalanced parentheses')\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"(()())(()())(()())\") == [\"(()())(()())\"]"
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(1.2345678) == 1.23"
    },
    {
        "number": 3,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance -= op\n        else:\n            balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Calculate the mean of the list\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute difference from each element to the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n    # Calculate the average absolute difference\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [delimeter] + [numbers[i] for i in range(0, len(numbers), 2)] + [delimeter]\n",
        "test": "assert     intersperse([1,2,3,4], 4) == [1,2,3,4,4,4]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    paren_stack = []\n    max_depth = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(i)\n            max_depth = max(max_depth, len(paren_stack))\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                return [0]\n            paren_stack.pop()\n    return [max_depth] * len(paren_stack)\n",
        "test": "assert     parse_nested_parens(\"(()()(()))\") == [4, 3, 2, 1]"
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"d\") == [\"d\", \"e\", \"f\"]"
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i], result[i - 1]))\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[i:][::-1]\n    return string[:1] + string[1:][::-1]\n",
        "test": "assert     make_palindrome(\"a\") == \"a\""
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "test": "assert     string_xor
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"f\""
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n",
        "test": "assert     greatest_common_divisor(1, 1) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(3) == \"0 1 2\""
    },
    {
        "number": 16,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [len(x) for x in music_string.split(' ')]\n",
        "test": "assert     parse_music('o') == [1]"
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times(\"this is a test string\", \"test\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers('one two three four five six seven eight nine zero two') == 'zero one two three four five six seven eight nine zero two'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    return smallest, largest\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [((x - min_num) / (max_num - min_num)) for x in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8]) == [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return n - 1 if n % 2 == 0 else n + 1\n",
        "test": "assert     largest_divisor(2) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    i = 3\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            i = 2\n        else:\n            i += 2\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i] == numbers[i + 1]:\n            del numbers[i]\n        else:\n            i += 1\n    return numbers\n",
        "test": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"hello\") == \"HELLO\""
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\""
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"d\") == [\"d\"]"
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert     is_prime(2) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if len(xs) == 0:\n        raise ValueError(\"Polynomial must have at least one coefficient.\")\n    if len(xs) == 1:\n        return -xs[0] / xs[1]\n    if len(xs) == 2:\n        return -xs[0] / (xs[1] * 2)\n    if len(xs) == 3:\n        return -xs[0] / (xs[1] * 3)\n    if len(xs) == 4:\n        return -xs[0] / (xs[1] * 4)\n    if len(xs) == 5:\n        return -xs[0] / (xs[1] * 5)\n    if len(xs) == 6:\n        return -xs[0] / (xs[1] * 6)\n    if len(xs) == 7:\n        return -xs[0] / (xs[1] * 7)\n    if len(xs) == 8:\n        return -xs[0] / (xs[1] * 8)\n    if len(xs) == 9:\n        return -xs[0] / (xs[1] * 9)\n    if len(xs) == 10:\n        return -xs[0] / (xs[1] * 10)\n    if len(xs) == 11:\n        return -xs[0] / (xs[1] * 11)\n    if len(xs) == 12:\n        return -xs[0] / (xs[1] * 12)\n    if len(xs) == 13:\n        return -xs[0] / (xs[1] * 13)\n    if len(xs) == 14:\n        return -xs[0] / (xs[1] * 14)\n    if len(xs) == 15:\n        return -xs[0] / (xs[1] * 15)\n    if len(xs) == 16:\n        return -xs[0] / (xs[1] * 16)\n    if len(xs) == 17:\n        return -xs[0] / (xs[1] * 17)\n    if len(xs) == 18:\n        return -xs[0] / (xs[1] * 18)\n    if len(xs) == 19:\n        return -xs[0] / (xs[1] * 19)\n    if len(xs) == 20:\n        return -xs[0] / (xs[1] * 20)\n    if len(xs) == 21:\n        return -xs[0] / (xs[1] * 21)\n    if len(xs) == 22:\n        return -xs[0] / (xs[1] * 22)\n    if len(xs) == 23:\n        return -xs[0] / (xs[1] * 23)\n    if len(xs) == 24:\n        return -xs[0] / (xs[1] * 24)\n    if len(xs) == 25:\n        return -xs[0] / (xs[1] * 25)\n    if len(xs) == 26:\n        return -xs[0] / (xs[1] * 26)\n    if len(xs) == 27:\n        return -xs[0] / (xs[1] * 27)\n    if len(xs) == 28:\n        return -xs[0] / (xs[1] * 28)\n    if len(xs) == 29:\n        return -xs[0] / (xs[1] * 29)\n    if len(xs) == 30:\n        return -xs[0] / (xs[1] * 30)\n    if len(xs) == 31:\n        return -xs[0] / (xs[1] * 31)\n    if len(xs) == 32:\n        return -xs[0] / (xs[1] * 32)\n    if len(xs) == 33:\n        return -xs[0] / (xs[1] * 33)\n    if len(xs) == 34:\n        return -xs[0] / (xs[1] * 34)\n    if len(xs) == 35:\n        return -xs[0] / (xs[1] * 35)\n    if len(xs) == 36:\n        return -xs[0] / (xs[1] * 36)\n",
        "test": "assert     poly([1, 1, 1, 1, 1], 3) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n",
        "test": "assert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]"
    },
    {
        "number": 34,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n",
        "test": "assert     fizz_buzz(15) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "test": "assert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,3,5,7,9,2,4,6,8,10,11,12,13]"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"abcdef\") == \"abcdef\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "test": "assert     prime_fib(3) == 7"
    },
    {
        "number": 40,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    return any(a + b + c == 0 for a, b, c in combinations(l, 3))\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -4, -5]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(1 for i in range(n) for j in range(i+1, n) if (i*j) % 2 == 1)\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    # Hint: you can use a set to store the values that you've seen\n    # and then check if the complement of a value is in the set\n    # if it is, return True, otherwise return False\n    # if you have not seen the complement of a value, add it to the set\n    # and return True\n    # if you have seen the complement of a value, return False\n    # if you have not seen the value, add it to the set and return True\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return False\n    # if you have not seen the value, return False\n    # if you have seen the value, return Fals",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -6, 7, 8, 9, 10, 11]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "test": "assert     change_base(3, 2) == '0b11'"
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(3, 4) == 6"
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n - 1, p) ** 2) % p\n",
        "test": "assert     modp(0, 2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"d\") == \"d\""
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\""
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 4) == False"
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "test": "assert     same_chars(\"hello\", \"hello\")"
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(0) == 0"
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"<>\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5])"
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "test": "assert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"(())\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('a') == 1"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n",
        "test": "assert     circular_shift(12345, 4) == 654321"
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"Hello World!!!!\") == 12"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return s.count(\"mango\") - s.count(\"apple\") - s.count(\"orange\")\n",
        "test": "assert     fruit_distribution(\"1 1\", \"1 1\") == \"1\""
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if not arr:\n        return []\n    \n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n",
        "test": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, "
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] > lst[i-1]:\n            return lst[i]\n    return -1\n",
        "test": "assert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 48"
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not lst:\n        return []\n    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / (4 * (a + b + c)), 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(3, 4, 7) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "test": "assert     will_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,50"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 2\n    if len(arr) == 5:\n        return 2\n    if len(arr) == 6:\n        return 2\n    if len(arr) == 7:\n        return 2\n    if len(arr) == 8:\n        return 2\n    if len(arr) == 9:\n        return 2\n    if len(arr) == 10:\n        return 2\n    if len(arr) == 11:\n        return 2\n    if len(arr) == 12:\n        return 2\n    if len(arr) == 13:\n        return 2\n    if len(arr) == 14:\n        return 2\n    if len(arr) == 15:\n        return 2\n    if len(arr) == 16:\n        return 2\n    if len(arr) == 17:\n        return 2\n    if len(arr) == 18:\n        return 2\n    if len(arr) == 19:\n        return 2\n    if len(arr) == 20:\n        return 2\n    if len(arr) == 21:\n        return 2\n    if len(arr) == 22:\n        return 2\n    if len(arr) == 23:\n        return 2\n    if len(arr) == 24:\n        return 2\n    if len(arr) == 25:\n        return 2\n    if len(arr) == 26:\n        return 2\n    if len(arr) == 27:\n        return 2\n    if len(arr) == 28:\n        return 2\n    if len(arr) == 29:\n        return 2\n    if len(arr) == 30:\n        return 2\n    if len(arr) == 31:\n        return 2\n    if len(arr) == 32:\n        return 2\n    if len(arr) == 33:\n        return 2\n    if len(arr) == 34:\n        return 2\n    if len(arr) == 35:\n        return 2\n    if len(arr) == 36:\n        return 2\n    if len(arr) == 37:\n        return 2\n    if len(arr) == 38:\n        return 2\n    if len(arr) == 39:\n        return 2\n    if len(arr) == 40:\n        return 2\n    if len(arr) == 41:\n        return 2\n    if len(arr) == 42:\n        return 2\n    if len(arr) == 43:\n        return 2\n    if len(arr) == 44:\n        return 2\n    if len(arr) == 45:\n        return 2\n    if len(arr) == 46:\n        return 2\n    if len(arr) == 47:\n        return 2\n    if len(arr) == 48:\n        return 2\n    if len(arr) == 49:\n        return 2\n    if len(arr) == 50:\n        return 2\n    if len(arr) == 51:\n        return 2\n    if len(arr) == 52:\n        return 2\n    if len(arr) == 53:\n        return 2\n    if len(arr) == 54:\n        return 2\n    if len(arr) == 55:\n        return 2\n    if len(arr) == 56:\n        return 2\n    if len(arr) == 57:\n        return 2\n    if len(arr) == 58:\n        return 2\n    if len(arr) == 59:\n        return 2\n    if len(arr) == 60:\n        return 2\n    if len(arr) == 61:\n        return 2\n    if len(arr) == 62:\n        return 2\n    if len(arr) == 63:\n        return 2\n    if len(arr) == 64:\n        return 2\n    if len(arr) == 65:\n        return 2\n    if len(arr) == 66:\n        return 2\n    if len(arr) == 67:\n        return 2\n    if len(arr) == 68:\n        return 2\n    if len(arr) == 69:\n        return 2\n    if len(arr) == 70:\n        return 2\n    if len(arr) == 71:\n        return 2\n    if len(arr) == 72:\n        return 2\n    if len(arr) == 73:\n        return 2\n    i",
        "test": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c']"
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(4) == False"
    },
    {
        "number": 76,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return n**int(x)==x\n",
        "test": "assert     is_simple_power(2, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return a**3 == a\n",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # your code here\n    return 0\n",
        "test": "assert     hex_key('A2B3C4D5E6F7C') == (2, 3)"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert     decimal_to_binary(3) == '11'"
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s[0]!= s[1] and s[1]!= s[2] and s[0]!= s[2]\n    if len(s) == 4:\n        return s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[0]!= s[3]\n    return is_happy(s[1:])\n",
        "test": "assert     is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [grade_equation(gpa) for gpa in grades]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']"
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_length(\"a\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 1\n    if n == 7:\n        return 2\n    if n == 8:\n        return 1\n    if n == 9:\n        return 2\n    if n == 10:\n        return 1\n    if n == 11:\n        return 2\n    if n == 12:\n        return 1\n    if n == 13:\n        return 2\n    if n == 14:\n        return 1\n    if n == 15:\n        return 2\n    if n == 16:\n        return 1\n    if n == 17:\n        return 2\n    if n == 18:\n        return 1\n    if n == 19:\n        return 2\n    if n == 20:\n        return 1\n    if n == 21:\n        return 2\n    if n == 22:\n        return 1\n    if n == 23:\n        return 2\n    if n == 24:\n        return 1\n    if n == 25:\n        return 2\n    if n == 26:\n        return 1\n    if n == 27:\n        return 2\n    if n == 28:\n        return 1\n    if n == 29:\n        return 2\n    if n == 30:\n        return 1\n    if n == 31:\n        return 2\n    if n == 32:\n        return 1\n    if n == 33:\n        return 2\n    if n == 34:\n        return 1\n    if n == 35:\n        return 2\n    if n == 36:\n        return 1\n    if n == 37:\n        return 2\n    if n == 38:\n        return 1\n    if n == 39:\n        return 2\n    if n == 40:\n        return 1\n    if n == 41:\n        return 2\n    if n == 42:\n        return 1\n    if n == 43:\n        return 2\n    if n == 44:\n        return 1\n    if n == 45:\n        return 2\n    if n == 46:\n        return 1\n    if n == 47:\n        return 2\n    if n == 48:\n        return 1\n    if n == 49:\n        return 2\n    if n == 50:\n        return 1\n    if n == 51:\n        return 2\n    if n == 52:\n        return 1\n    if n == 53:\n        return 2\n    if n == 54:\n        return 1\n    if n == 55:\n        return 2\n    if n == 56:\n        return 1\n    if n == 57:\n        return 2\n    if n == 58:\n        return 1\n    if n == 59:\n        return 2\n    if n == 60:\n        return 1\n    if n == 61:\n        return 2\n    if n == 62:\n        return 1\n    if n == 63:\n        return 2\n    if n == 64:\n        return 1\n    if n == 65:\n        return 2\n    if n == 66:\n        return 1\n    if n == 67:\n        return 2\n    if n == 68:\n        return 1\n    if n == 69:\n        return 2\n    if n == 70:\n        return 1\n    if n == 71:\n        return 2\n    if n == 72:\n        return 1\n    if n == 73:\n        return 2\n    if n == 74:\n        return 1\n    if n == 75:\n        return 2\n    if n == 76:\n        return 1\n    if n == 77:\n        return 2\n    if n == 78:\n        return 1\n    if n == 79:\n        return 2\n    if n == 80:\n        return 1\n    if n == 81:\n        return 2\n    if n == 82:\n        return 1\n    if n == 83:\n        return 2\n    if n == 84:\n        return 1\n    if n == 85:\n        return 2\n    if n == 86:\n        return 1\n    if n == 87:\n        return 2\n    if n == 88:\n        return 1\n    if n == 89:\n        return 2\n    if n == 90:\n        return 1\n    if n == 91:\n        return 2\n    if n == 92:\n        return 1\n    if n == 93:\n        return 2\n",
        "test": "assert     starts_one_ends(2) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return str(bin(N).count('1'))\n",
        "test": "assert     solve(0) == \"0\""
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum(lst[::2])\n",
        "test": "assert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]"
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: x.lower()))\n",
        "test": "assert     anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sorted(lst, key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)]"
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not array:\n        return array\n",
        "test": "assert     sort_array([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    new_alphabet_dict = dict(zip(alphabet, new_alphabet))\n    return ''.join([new_alphabet_dict[letter] for letter in s])\n",
        "test": "assert     encrypt('hello world') == 'dzqyw'"
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 2, 3, 4, 5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(1 for s in S.split('.') if s.startswith('I'))\n",
        "test": "assert     is_bored(\"I am bored\") == True"
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     any_int(1, 2, 3) == True"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    vowels = 'AEIOU'\n    new_message = ''\n    for letter in message:\n        if letter.upper() in vowels:\n            new_message += letter.upper()\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n",
        "test": "assert     encode(\"I am a student\") == \"I aM aSTUDENT\""
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    lst = [int(i) for i in lst]\n    lst.sort()\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if all(j for j in range(2,i) if i % j == 0)]\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in ",
        "test": "assert     skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 1"
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.isupper():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n < 2:\n        return []\n    else:\n        return [2] + count_up_to(n-1)\n",
        "test": "assert     count_up_to(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum([int(i) * int(j) for i, j in zip(str(a), str(b))])\n",
        "test": "assert     multiply(12, 1234567) == 1234567"
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(1 for c in s[::2] if c.isupper())\n",
        "test": "assert     count_upper(\"hello\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        result.append(n)\n    return result\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return s.split(',')\n",
        "test": "assert     words_string(\"hello, world, hi, hi, hi\") == [\"hello\", \"world\", \"hi\", \"hi\", \"hi\"]"
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if x > y:\n        return -1\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                return i\n",
        "test": "assert     choose_num(1, 10) == 2"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n",
        "test": "assert     rounded_avg(1, 5) == 2"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    arr.reverse()\n    \n    for i in range(len(arr)):\n        if arr[i] < 1 or arr[i] > 9:\n            arr[i] = \"X\"\n    \n    return arr\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == \"OneTwoThreeFourFiveSixSevenEightNineTenElevenTwelve\""
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [1] + [i for i in range(2, n+1) if i % 2 == 0] + [sum(range(1, i+1)) for i in range(1, n+1) if i % 2!= 0]\n",
        "test": "assert     f(4) == [1, 1, 2, 6]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n == 1:\n        return (1, 0)\n    if n == 2:\n        return (1, 1)\n    if n % 2 == 0:\n        return (1, 0)\n    if n % 2 == 1:\n        return (0, 1)\n    if n % 4 == 1:\n        return (1, 1)\n    if n % 4 == 3:\n        return (1, 0)\n    if n % 4 == 2:\n        return (0, 1)\n    if n % 4 == 0:\n        return (0, 0)\n",
        "test": "assert     even_odd_palindrome(10000) == (2, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return sum(1 for num in arr if sum(int(digit) for digit in str(num)) > 0)\n",
        "test": "assert     count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -34"
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    if len(arr)==2:\n        if arr[0]<arr[1]:\n            return True\n        else:\n            return False\n    if len(arr)==3:\n        if arr[0]<arr[1] and arr[1]<arr[2]:\n            return True\n        else:\n            return False\n    if len(arr)==4:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3]:\n            return True\n        else:\n            return False\n    if len(arr)==5:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4]:\n            return True\n        else:\n            return False\n    if len(arr)==6:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5]:\n            return True\n        else:\n            return False\n    if len(arr)==7:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6]:\n            return True\n        else:\n            return False\n    if len(arr)==8:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7]:\n            return True\n        else:\n            return False\n    if len(arr)==9:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8]:\n            return True\n        else:\n            return False\n    if len(arr)==10:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8] and arr[8]<arr[9]:\n            return True\n        else:\n            return False\n    if len(arr)==11:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8] and arr[8]<arr[9] and arr[9]<arr[10]:\n            return True\n        else:\n            return False\n    if len(arr)==12:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8] and arr[8]<arr[9] and arr[9]<arr[10] and arr[10]<arr[11]:\n            return True\n        else:\n            return False\n    if len(arr)==13:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] an",
        "test": "assert     move_one_ball([1,2,3,4,5,6,7,8]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10, 12]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n",
        "test": "assert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] == c:\n            s[i] = ''\n    s = ''.join(s)\n    return s,s == s[::-1]\n",
        "test": "assert     reverse_delete(\"abcd\",\"cd\") == (\"dcba\",True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [len([i for i in s if int(i)%2]) for s in lst]\n",
        "test": "assert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]"
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([1,2,3,4,5]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # get the number of wells\n    wells = len(grid)\n    # get the number of buckets\n    buckets = len(grid[0])\n    # get the number of rows\n    rows = len(grid)\n    # get the number of columns\n    cols = len(grid[0])\n    # get the number of wells that can be filled\n    wells_to_fill = capacity\n    # get the number of wells that are filled\n    wells_filled = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the buckets are filled\n    buckets_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wells_filled_count = 0\n    # get the number of times that the wells are filled\n    wel",
        "test": "assert     max_fill([[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,0,1,2,3,4,5,6,7,8]) == [0,0,1,2,4,8,3,5,6,7]"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return [word for word in s.split() if len(word) == n and word.count('a') == n]\n",
        "test": "assert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]"
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"leetcode\") == \"e\""
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == ')' else 'No'\n    if lst[0] == ')' or lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return match_parens(lst[1:-1])\n    if lst[0] == ')' and lst[-1] == ')':\n        return match_parens(lst[1:])\n    if lst[0] == '(' and lst[-1] == ')':\n        return match_parens(lst[1:-1])\n    return 'No'\n",
        "test": "assert     match_parens(['(())()', '()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if k > len(arr):\n        return arr\n    arr.sort()\n    return arr[-k:]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10]"
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n",
        "test": "assert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 10"
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # your code here\n    return True\n",
        "test": "assert     valid_date(\"01-01-2000\") == True"
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world']"
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst) < 2:\n        return True\n    if lst[0] < lst[1]:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not arr:\n        return None\n    return sum(abs(x) for x in arr) * prod(sign(x) for x in arr)\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not grid or not grid[0]:\n        return []\n    m, n = len(grid), len(grid[0])\n    if k > m * n:\n        return []\n    if k == 0:\n        return [grid[0][0]]\n    if k == 1:\n        return [grid[0][0], grid[0][1]]\n    if k == 2:\n        return [grid[0][0], grid[0][1], grid[0][2]]\n    if k == 3:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3]]\n    if k == 4:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4]]\n    if k == 5:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5]]\n    if k == 6:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6]]\n    if k == 7:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7]]\n    if k == 8:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8]]\n    if k == 9:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9]]\n    if k == 10:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9], grid[0][10]]\n    if k == 11:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9], grid[0][10], grid[0][11]]\n    if k == 12:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9], grid[0][10], grid[0][11], grid[0][12]]\n    if k == 13:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9], grid[0][10], grid[0][11], grid[0][12], grid[0][13]]\n    if k == 14:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9], grid[0][10], grid[0][11], grid[0][12], grid[0][13], grid[0][14]]\n    if k == 15:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[0][5], grid[0][6], grid[0][7], grid[0][8], grid[0][9], grid[0][10], grid[0][11], grid[0][12], grid[0][13], gri",
        "test": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 0) == []"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 1, 1]\n    if n == 4:\n        return [1, 1, 1, 1]\n    if n == 5:\n        return [1, 1, 1, 1, 1]\n    if n == 6:\n        return [1, 1, 1, 1, 1, 1]\n    if n == 7:\n        return [1, 1, 1, 1, 1, 1, 1]\n    if n == 8:\n        return [1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 9:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 10:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 11:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 12:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 13:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 14:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 15:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 16:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 17:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 18:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 19:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 20:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 21:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 22:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 23:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 24:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 25:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 26:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "test": "assert     tri(4) == 1 + (2 / 2) + (4 / 2)"
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n // 10) * (n % 10)\n",
        "test": "assert     digits(12) == 2"
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Your code here\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_nested('[]()') == True"
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(map(lambda x: int(math.ceil(x))**2, lst))\n",
        "test": "assert     sum_squares([1,2,3,4,5]) == 55"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \" \":\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('Hello World') == True"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return -1 if arr[0] > arr[1] else 0\n    if len(arr) == 3:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] else 0\n    if len(arr) == 4:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] else 0\n    if len(arr) == 5:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] else 0\n    if len(arr) == 6:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] else 0\n    if len(arr) == 7:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] else 0\n    if len(arr) == 8:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] else 0\n    if len(arr) == 9:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] else 0\n    if len(arr) == 10:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] else 0\n    if len(arr) == 11:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] else 0\n    if len(arr) == 12:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11] else 0\n    if len(arr) == 13:\n        return -1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] and arr[8] > arr[9] and arr[9] > arr[10] and arr[10] > arr[11] and arr[11] > arr[12] else 0\n    if len(arr) == 14:\n    ",
        "test": "assert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not lst:\n        return (None, None)\n    else:\n        return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))\n",
        "test": "assert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8]) == (-8, 1)"
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(a, float):\n        a = a\n    else:\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    elif isinstance(b, float):\n        b = b\n    else:\n        b = float(b)\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return n % 2 == 0 and sum(range(2, n, 2)) == n\n",
        "test": "assert     is_equal_to_sum_even(0) == True"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    \n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replace consecutive spaces with -\n    text = re.sub(r\"\\s+\", \"-\", text)\n    \n    return text\n",
        "test": "assert     fix_spaces(\"hello   world   \") == \"hello_world\""
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    def is_valid(file_name):\n        if len(file_name) > 3:\n            return 'No'\n        if file_name.count('.')!= 1:\n            return 'No'\n        if file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n            return 'No'\n        if file_name[-3:] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'\n    return is_valid(file_name)\n",
        "test": "assert     file_name_check('abc.txt.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    \n    # Your code here\n    \n    return sum(x**2 if i%3==0 else x**3 for i,x in enumerate(lst))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8]) == 54"
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return''.join(filter(lambda x: len(x) > 1, sentence.split(' ')))\n",
        "test": "assert     words_in_sentence(\"hello world\") == \"helloworld\""
    },
    {
        "number": 144,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"1/3\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n",
        "test": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1)\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 1"
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    a = [i*i-i+1 for i in range(1, n+1)]\n    return sum(a[i] for i in range(n) if a[i] % 3 == 0)\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # your code here\n    return ()\n",
        "test": "assert     bf('Mars', 'Jupiter') == ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']"
    },
    {
        "number": 150,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(4, 1, 2) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x % 2!= 0])\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "test": "assert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Your code here\n    extensions_strength = {}\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        extensions_strength[extension] = extension_strength\n    return class_name + \".\" + max(extensions_strength, key=extensions_strength.get)\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(a) < len(b):\n        return False\n    if len(a) == len(b):\n        return a == b\n    for i in range(len(a)):\n        if a[i:] == b[:len(a)-i]:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"abcdefg\", \"gabcdefg\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = -num\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return (even, odd)\n",
        "test": "assert     even_odd_count(15) == (0, 5)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('int_to_mini_roman: argument must be a positive integer between 1 and 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xii'\n    if number == 12:\n        return 'xiii'\n    if number == 13:\n        return 'xiv'\n    if number == 14:\n        return 'xv'\n    if number == 15:\n        return 'xvi'\n    if number == 16:\n        return 'xvii'\n    if number == 17:\n        return 'xviii'\n    if number == 18:\n        return 'xix'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'x'\n    if number == 21:\n        return 'x'\n    if number == 22:\n        return 'x'\n    if number == 23:\n        return 'x'\n    if number == 24:\n        return 'x'\n    if number == 25:\n        return 'x'\n    if number == 26:\n        return 'x'\n    if number == 27:\n        return 'x'\n    if number == 28:\n        return 'x'\n    if number == 29:\n        return 'x'\n    if number == 30:\n        return 'x'\n    if number == 31:\n        return 'x'\n    if number == 32:\n        return 'x'\n    if number == 33:\n        return 'x'\n    if number == 34:\n        return 'x'\n    if number == 35:\n        return 'x'\n    if number == 36:\n        return 'x'\n    if number == 37:\n        return 'x'\n    if number == 38:\n        return 'x'\n    if number == 39:\n        return 'x'\n    if number == 40:\n        return 'x'\n    if number == 41:\n        return 'x'\n    if number == 42:\n        return 'x'\n    if number == 43:\n        return 'x'\n    if number == 44:\n        return 'x'\n    if number == 45:\n        return 'x'\n    if number == 46:\n        return 'x'\n    if number == 47:\n        return 'x'\n    if number == 48:\n        return 'x'\n    if number == 49:\n        return 'x'\n    if number == 50:\n        return 'x'\n    if number == 51:\n        return 'x'\n    if number == 52:\n        return 'x'\n    if number == 53:\n        return 'x'\n    if number == 54:\n        return 'x'\n    if number == 55:\n        return 'x'\n    if number == 56:\n        return 'x'\n    if number == 57:\n        return 'x'\n    if number == 58:\n        return 'x'\n    if number == 59:\n        return 'x'\n    if number == 60:\n        return 'x'\n    if number == 61:\n        return 'x'\n    if number == 62:\n        return 'x'\n    if number == 63:\n        return 'x'\n    if number == 64:\n        return 'x'\n    if number == 65:\n        return 'x'\n    if number == 66:\n        return 'x'\n    if number == 67:\n        return 'x'\n    if number == 68:\n        return 'x'\n    if number == 69:\n        return 'x'\n    if number == 70:\n        return 'x'\n    if number == 71:\n        return 'x'\n    if number == 72:\n        return 'x'\n    if number == 73:\n        return 'x'\n    if number == 74:\n        return 'x'\n    if number == 7",
        "test": "assert     int_to_mini_roman(4) == 'iv'"
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"]) == \"abc\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if number < need:\n        return [need, 0]\n    elif number == need:\n        return [need, remaining]\n    else:\n        return [number, remaining - (need - number)]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    pass\n",
        "test": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6, 7]) == -1"
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return \"\".join(reversed(s.swapcase()) if s.isalpha() else s)\n",
        "test": "assert     solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 3,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "test": "assert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 75"
    }
]