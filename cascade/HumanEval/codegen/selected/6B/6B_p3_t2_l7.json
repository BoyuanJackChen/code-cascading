[
    {
        "number": 0,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    numbers = sorted(numbers)\n    \n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    \n    return False\n",
        "test": "assert     has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0], 0.5) == False",
        "num_ids": 370
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    paren_stack = []\n    output = []\n    i = 0\n    while i < len(paren_string):\n        curr = paren_string[i]\n        if curr == '(':\n            paren_stack.append(curr)\n        elif curr == ')':\n            if len(paren_stack) == 0:\n                output.append('(' + paren_string[i+1:])\n                i += 1\n            else:\n                paren_stack.pop()\n        i += 1\n    return output\n",
        "test": "assert     separate_paren_groups(\"  (  (  (()  )  )  )  )  \") == ['  ', '(', ')',' ', '(', '(', '()',' ', ')',' ', ')',' ', ')']",
        "num_ids": 441
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return number - math.floor(number)\n",
        "test": "assert     truncate_number(0.123) == 0.123",
        "num_ids": 181
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,2,3,4,5,6,7,8,9,10]) == False",
        "num_ids": 2182
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if not numbers:\n        raise ValueError('MAD requires at least one element.')\n    mean_value = sum(numbers) / len(numbers)\n    return sum(abs(num - mean_value) for num in numbers) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([10, 10, 10, 10, 10]) == 0",
        "num_ids": 304
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    output = []\n    for i in range(0, len(numbers), 2):\n        output.append(numbers[i])\n        output.append(delimeter)\n        if i < len(numbers) - 1:\n            output.append(numbers[i + 1])\n    return output\n",
        "test": "assert ",
        "num_ids": 276
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    depth = 0\n    max_depth = 0\n    paren_list = []\n",
        "test": "assert     parse_nested_parens(\"(()())\") == [2]",
        "num_ids": 230
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring(['a', 'b', 'c'], 'c') == ['c']",
        "num_ids": 181
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    sum = 0\n    product = 1\n    for i in range(len(numbers)):\n        sum += numbers[i]\n        product *= numbers[i]\n    return sum, product\n    \n",
        "test": "assert     (sum_product([1,2,3]) == (6, 6))",
        "num_ids": 194
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    # Initialize the result list with the first number in the list\n    result = [numbers[0]]\n    \n    # Loop through the list starting with the second element (skip the first element, since it's already\n    # in the result list)\n    for i in range(1, len(numbers)):\n        # If the next element is higher than the current one, add it to the result list\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            # If the next element is not higher than the current one, replace the last element of the result\n            # with the next element\n            result[-1] = numbers[i]\n    \n    # Return the result list\n    return result\n",
        "test": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 492
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(string)):\n        for j in range(len(string), i, -1):\n            if is_palindrome(string[i:j]):\n                return string[i:j] + string[i:j][::-1]\n    return string\n",
        "test": "assert     is_palindrome(\"racecar\") == True",
        "num_ids": 295
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor('0', '0') == '0'",
        "num_ids": 240
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if strings == []:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n",
        "test": "assert longest([]) is None, \"incorrect\"",
        "num_ids": 209
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(4, 8) == 4",
        "num_ids": 191
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # return [''.join(x) for x in zip([''] + string, string)]\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes('abc') == ['a', 'b', 'c']",
        "num_ids": 279
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = ''\n    for i in range(n+1):\n        result = result + str(i) +''\n    return result[:-1]\n",
        "test": "assert     string_sequence(3) == \"012\"",
        "num_ids": 173
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    chars = set()\n    for char in string:\n        if char.lower() not in chars:\n            chars.add(char.lower())\n    return len(chars)\n",
        "test": "assert     count_distinct_characters(\"ABC\") == 3",
        "num_ids": 195
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    parsed_music = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            parsed_music.append(1)\n        elif music_string[i] == 'o|':\n            parsed_music.append(2)\n        elif music_string[i] == 'o.|':\n            parsed_music.append(4)\n        elif music_string[i] == '.|':\n            parsed_music.append(8)\n        elif music_string[i] == 'o|o':\n            parsed_music.append(16)\n        elif music_string[i] == 'o.|o':\n            parsed_music.append(32)\n        elif music_string[i] == 'o|o|':\n            parsed_music.append(64)\n        elif music_string[i] == 'o.|o|':\n            parsed_music.append(128)\n        elif music_string[i] == 'o|o|o':\n            parsed_music.append(256)\n        elif music_string[i] == 'o.|o|o':\n            parsed_music.append(512)\n        elif music_string[i] == 'o|o|o|':\n            parsed_music.append(1024)\n        elif music_string[i] == 'o.|o|o|':\n            parsed_music.append(2048)\n        elif music_string[i] == 'o|o|o|o':\n            parsed_music.append(4096)\n        elif music_string[i] == 'o.|o|o|o':\n            parsed_music.append(8192)\n        elif music_string[i] == 'o|o|o|o|':\n            parsed_music.append(16384)\n        elif music_string[i] == 'o.|o|o|o|':\n            parsed_music.append(32768)\n        elif music_string[i] == 'o|o|o|o|o':\n            parsed_music.append(65536)\n        elif music_string[i] == 'o.|o|o|o|o':\n            parsed_music.append(131072)\n        elif music_string[i] == 'o|o|o|o|o|':\n            parsed_music.append(2621440)\n        elif music_string[i] == 'o.|o|o|o|o|o':\n            parsed_music.append(536870912)\n        elif music_string[i] == 'o|o|o|o|o|o|o':\n            parsed_music.append(1073741824)\n",
        "test": "assert     parse_music(\".o|.|o|o|o|o|.|o|o|o|.|o|o|o|o|.|o|o|o|o|o|o|o|o|o|.|o|o|o|o|.|o|o|o|o|o|o|o|o|o|o|.|o|o|o|o|o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o",
        "num_ids": 2620
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(string) - len(string.lstrip(substring)) + 1\n",
        "test": "assert     how_many_times(\"abcd\", \"cd\") == 1, \"Expected 1\"",
        "num_ids": 196
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers(\"one\") == \"one\"",
        "num_ids": 415
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    best_diff = float('inf')\n    closest_nums = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < best_diff:\n                best_diff = diff\n                closest_nums = (numbers[i], numbers[j])\n    return closest_nums\n",
        "test": "assert     find_closest_elements([1,2,3,4,5]) == (1,2)",
        "num_ids": 469
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    n = len(numbers)\n    m = max(numbers)\n    if m == 0:\n        return [0.0] * n\n    return [float(x) / m for x in numbers]\n",
        "test": "assert     rescale_to_unit([0.0]) == [0.0]",
        "num_ids": 408
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     isinstance(filter_integers([1, 2, \"3\", 4]), list)",
        "num_ids": 301
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello world\") == 11",
        "num_ids": 89
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    max_divisor = n - 1\n    while max_divisor > 1:\n        if n % max_divisor == 0:\n            return max_divisor\n        else:\n            max_divisor -= 1\n    return n\n",
        "test": "assert     largest_divisor(10) == 5",
        "num_ids": 241
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n < 0:\n        raise ValueError(\"Argument must be a non-negative integer.\")\n    if n == 1:\n        return [1]\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            factors.append(d)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 716
    },
    {
        "number": 26,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5, 6, 6, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 429
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"abc\")     == \"ABC\"",
        "num_ids": 186
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if strings == []:\n        return ''\n    else:\n        return ''.join(strings)\n",
        "test": "assert     concatenate(['a', 'b', 'c']) == 'abc'",
        "num_ids": 164
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"abc\", \"abd\", \"abc\"], \"b\") == [\"abd\"]",
        "num_ids": 258
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive(list()) == []",
        "num_ids": 185
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 5 == 0 or n % 7 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 293
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(xs) % 2!= 0 or max(xs) == 0:\n        return None\n    else:\n        pivot = max(xs)\n        return -pivot * math.pow(poly(xs[:len(xs) - 1], pivot), -1)\n",
        "test": "assert     poly([-2, 3], 3) == -1",
        "num_ids": 483
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    new_list = l[:]\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_list[i] = l[i]\n    return new_list\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 406
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1,2,3,4,3,2,1]) == [1,2,3,4]",
        "num_ids": 230
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    max_number = l[0]\n    for i in l:\n        if i > max_number:\n            max_number = i\n    return max_number\n",
        "test": "assert     max_element([1, 2, 3]) == 3",
        "num_ids": 162
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 168
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    odds = l[::2]\n    evens = [l[i] for i in range(0,len(l),2)]\n    l = [odds[i] if i < len(odds) else evens[i-len(odds)] for i in range(len(l))]\n    return l\n",
        "test": "assert     sort_even([4, 2, 1, 3, 4, 5]) == [4, 4, 2, 1, 3, 5]",
        "num_ids": 508
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # find length of string. This is number of groups.\n    l = len(s) // 3\n    # repeat l times.\n    repeats = [s] * l\n    # join.\n    return \"\".join(repeats)\n",
        "test": "assert     decode_cyclic(\"abc\") == \"abc\"",
        "num_ids": 287
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if n == 1 or n == 2:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "test": "assert ",
        "num_ids": 284
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len([x for x in l if -x in l]) == 3",
        "test": "assert     not triples_sum_to_zero([1, 2, 3])",
        "num_ids": 232
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    assert type(n) is int and n > 0, 'n must be a positive integer'\n    return sum(i * (i-1) // 2 for i in range(1, n+1))\n",
        "test": "assert     car_race_collision(2) == 1",
        "num_ids": 120
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        l2.append(l[i] + 1)\n    return l2\n",
        "test": "assert     incr_list([1,2,3,4]) == [2,3,4,5]",
        "num_ids": 202
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([2, 4, -6, 3, -2, -5, 0, 7, -5])",
        "num_ids": 367
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    convert = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base:\n        return convert[x]\n    else:\n        return change_base(x // base, base) + convert[x % base]\n",
        "test": "assert     change_base(8, 10) == \"8\"",
        "num_ids": 344
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return.5 * a * h\n",
        "test": "assert     triangle_area(2,3) == 2*3/2",
        "num_ids": 131
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0)    == 0",
        "num_ids": 225
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Base case\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return (l[0] + l[1]) / 2\n    else:\n        # Divide the list into 2 equal-sized lists\n        split_index = len(l) // 2\n        left_list = l[:split_index]\n        right_list = l[split_index:]\n        # Get median of each list\n        left_list_median = median(left_list)\n        right_list_median = median(right_list)\n        # If left list is even, both lists are the same\n        if len(left_list) % 2 == 0:\n            return (left_list_median + right_list_median) / 2\n        else:\n            return right_list_median\n",
        "test": "assert     median([3, 2, 1]) == 1.5",
        "num_ids": 413
    },
    {
        "number": 48,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "test": "assert     is_palindrome(\"abba\") == True",
        "num_ids": 227
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(0, 10) == 1",
        "num_ids": 110
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert     encode_shift(\"brd\") == \"mjk\"",
        "num_ids": 202
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in text:\n        if letter in vowels:\n            text = text.replace(letter, \"\")\n    return text\n",
        "test": "assert     remove_vowels('how are you?') == 'hwr?r y', 'Failed Test 2'",
        "num_ids": 363
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return all(n < t for n in l)\n",
        "test": "assert     below_threshold([2,2,2,3,4], 3) == False",
        "num_ids": 112
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 91
    },
    {
        "number": 54,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Only the length should be checked\n    if len(s0)!= len(s1):\n        return False\n",
        "test": "assert     same_chars(\"house\", \"house2\") == False",
        "num_ids": 209
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 160
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    return True\n",
        "test": "assert     correct_bracketing(\"<>><>>\") == False",
        "num_ids": 316
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([1,2,3])",
        "num_ids": 255
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common([], [1, 2, 3, 4, 5]) == []",
        "num_ids": 290
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    prime_factors = set()\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            prime_factors.add(d)\n    if n > 1:\n        prime_factors.add(n)\n    return max(prime_factors)\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 221
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sum(range(n + 1))\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 176
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    b = []\n    for c in brackets:\n        if c == \"(\":\n            b.append(c)\n        elif c == \")\":\n            if len(b) == 0:\n                return False\n            else:\n                b.pop()\n    return len(b) == 0\n",
        "test": "assert     correct_bracketing(  \"(\") == False",
        "num_ids": 314
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return [math.pow(n, 2) if n else 1 for n in xs[1:]] + [xs[0] * xs[1]]\n",
        "test": "assert ",
        "num_ids": 128
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 155
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count\n",
        "test": "assert     vowels_count('apple') == 2",
        "num_ids": 232
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    x = str(x)\n    y = x[shift:] + x[:shift]\n    if len(y) > len(x):\n        y = y[len(x):] + y[:len(x)]\n    return y\n",
        "test": "assert     circular_shift(12345, 2) == '34521'",
        "num_ids": 240
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n",
        "test": "assert     digitSum('tesT') == 4",
        "num_ids": 195
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = s.split(' ')\n    if int(s[0]) > int(s[1]):\n        return int(n) - int(s[0]) - int(s[1])\n    else:\n        return int(n) - int(s[1]) - int(s[0])\n",
        "test": "assert     fruit_distribution('n=1, napples=1,nfruits=1',1) == 1",
        "num_ids": 266
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    arr.sort(key = lambda x: x%2)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 1]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0], 1]\n        else:\n            return [arr[1], 1]\n    elif len(arr) % 2 == 0:\n        return [arr[len(arr)//2], len(arr)//2+1]\n    else:\n        return [arr[len(arr)//2], len(arr)//2]",
        "test": "assert     [ [0, 2], [0, 4], [0, 6], [0, 8], [0, 10] ] == pluck( [ 0, 4, 6, 10, 8, 2 ] )",
        "num_ids": 400
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    # TODO: Use a sorted list and binary search to find the value\n    sortedList = sorted(lst)\n    index = 0\n    for i in sortedList:\n        if i > index:\n            index = i\n            return index\n    return -1\n    # <-- Remove this comment when you implement the function\n",
        "test": "assert     search([]) == -1",
        "num_ids": 227
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    lst2 = []\n    for i in range(len(lst)):\n        min_value = min(lst)\n        lst2.append(min_value)\n        lst.remove(min_value)\n        max_value = max(lst)\n        lst2.append(max_value)\n        lst.remove(max_value)\n    return lst2\n",
        "test": "assert     [1, 2, 3] == strange_sort_list([3, 2, 1])",
        "num_ids": 328
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[2] < sides[1] + sides[0]:\n        return round(sides[0] * sides[1] / 2, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(0, 0, 0) == 0",
        "num_ids": 281
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    import re\n    if len(q) % 2!= 0:\n        q.append(0)\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     not will_it_fly(['a', 'b', 'a', 'c'], 9)",
        "num_ids": 318
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return smallest_changes(arr)\n",
        "test": "assert     smallest_change([1,3,5,7,9]) == 3",
        "num_ids": 135
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert         total_match(['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']",
        "num_ids": 411
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if a < 100:\n        return True\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(13) == True",
        "num_ids": 285
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return x == n or x % n == 0",
        "test": "assert     is_simple_power(14, 3) is False",
        "num_ids": 1141
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return a == pow(a, 3)\n",
        "test": "assert icalc(3) == True",
        "num_ids": 100
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    def isPrime(num):\n        if num < 2: return False\n        if num == 2: return True\n        if num % 2 == 0: return False\n        for x in range(3,int(num**0.5)+1,2):\n            if num%x == 0: return False\n        return True\n    \n    hex_dict = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0, 'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0}\n    \n    for i in num:\n        hex_dict[i]+=1\n    \n    count = 0\n    \n    for i in hex_dict:\n        if hex_dict[i] > 1 and isPrime(int(i)) == True:\n            count += 1\n    \n    return count\n    \ndef caesar_cipher(text, shift):\n    \"\"\"You are the teacher of a strange school of elementary school children. \n    You are going to teach them some lesson and tell them to count.\n    You will be given a secret text which is a string of lowercase letters. \n    You have to create a new string consisting of the letters that do not appear in the secret text.\n    You have to shift each letter of the secret text by an amount equal to the shift value and \n    add this new string to the new string. You are going to keep doing this until the new string is the same as the secret text.\n    In the end you have to return the new string.\n    For example:\n    for secret_text = \"abcdef\", shift = 3, the output should be \"defgab\"\n    for secret_text = \"abcdef\", shift = 26, the output should be \"zabcdef\"\n    for secret_text = \"abcdef\", shift = 5, the output should be \"fgabcd\"\n    \"\"\"\n    \n    def get_shift(text, shift):\n        length = len(text)\n        \n        if length % shift == 0:\n            return length\n        else:\n            return length - length % shift\n    \n    text_arr = list(text)\n    \n    for i in range(len(text_arr)):\n        text_arr[i] = chr(ord(text_arr[i])+shift)\n    \n    return ''.join(text_arr)\n    \ndef longest_string(arr):\n    \"\"\"You are given an array of strings.\n    Your task is to find the longest string in the array.\n    For example:\n    For a = [\"aba\", \"aa\", \"ad\", \"vcd\", \"aba\"], the output should be \"aba\"\n    For a = [\"a\", \"ab\", \"abc\", \"abcd\"], the output should be \"abcd\"\n    \"\"\"\n    \n    def get_length(text):\n        return len(text)\n    \n    longest = arr[0]\n    \n    for i in range(len(arr)):\n        if len(arr[i]) > len(longest):\n            longest = arr[i]\n    \n    return longest\n    \ndef alphabet_position(text):\n    \"\"\"You have been given a string with only letters and numbers.\n    Your task is to convert this string to a number. The numbers are sorted in ascending order.\n    For example:\n    alphabet_position(\"Hello, World!\") = \"122356789\"\n    alphabet_position(\"The sunset sets at twelve o' clock.\") = \"20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11\"\n    \"\"\"\n    \n    def get_number(c):\n        return ord(c) - 96\n    \n    alphabet = list(text)\n    \n    alphabet = [get_number(i) for i in alphabet]\n    \n    return ''.join([str(i) for i in sorted(alphabet)])\n    \ndef palindrome_permutation(text):\n    \"\"\"You are given a string of lowercase letters. Your task is to check if a palindrome can be built from these letters.\n    For example:\n    palindrome_permutation(\"a\") = true\n    palindrome_permutation(\"cab\") = true\n    palindrome_permutation(\"rac",
        "test": "assert     hex_key('6A3B6D3') == [1, 1, 1, 1, 1]",
        "num_ids": 1154
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # NOTE: The solution is based on the observation that a number is equivalent to the binary number\n    # of its decimal value, hence the square of the decimal value (decimal_value ** 2).\n",
        "test": "assert     '0111111110' == decimal_to_binary(126)",
        "num_ids": 235
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"abbbcccdeee\") == False",
        "num_ids": 1310
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    grades.sort(reverse=True)\n    return [letter_grade(grades[i]) for i in range(len(grades))]\n",
        "test": "assert     numerical_letter_grade([1.0, 2.0, 0.7, 0.0, 0.0]) == ['D+', 'D', 'D-', 'E']",
        "num_ids": 502
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(string) == 1:\n        return False\n    for i in range(2, int(len(string)/2)):\n        if len(string)%i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_length(\"\") == True",
        "num_ids": 165
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 9\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 8\n    else:\n        return sum([starts_one_ends(n-1), 8*(n-3)])\n",
        "test": "assert     starts_one_ends(1) == 9",
        "num_ids": 1315
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    binary = ''\n    while N > 0:\n        # use the mod operator to get the last digit\n        binary += str(N % 2)\n        N //= 2\n    return binary[::-1]",
        "test": "assert     solve(1)    == '1'",
        "num_ids": 263
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    i = 1\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        i+=1\n    return lst\n",
        "test": "assert add([])==[]",
        "num_ids": 178
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join([x[1] for x in sorted([x.split() for x in s.split()], key=lambda x: int(x[0]))])",
        "test": "assert     anti_shuffle(\"Hello World\") == \"Hello World\"",
        "num_ids": 224
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sorted(list(zip(*sorted(list(zip(*lst)), reverse=True))), key=lambda a:a[0], reverse=True)\n    \nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3)",
        "test": "assert     get_row(lst, 4) == [(2,0), (2,1), (2,2)], \"incorrect\"",
        "num_ids": 1178
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    odd = []\n    even = []\n    for i in array:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd if sum(even) < sum(odd) else odd + even\n",
        "test": "assert     sort_array([3,5,1,2,4,6,8,10]) == [1, 2, 3, 4, 5, 6, 8, 10]",
        "num_ids": 318
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Your code goes here\n",
        "test": "assert     encrypt(\"b\") == \"b\"",
        "num_ids": 700
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1]\n",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 1186
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return S.count(\"I\")",
        "test": "assert     is_bored('I am a happy boy.') == True",
        "num_ids": 1171
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return True if x + y == z or x + z == y or y + z == x else False\n",
        "test": "assert     any_int(3, 4, 5) == False",
        "num_ids": 239
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    from string import ascii_lowercase\n    \n    return ''.join(ascii_lowercase[(ascii_lowercase.find(x) + 2) % len(ascii_lowercase)] if x.isalpha() else x for x in message)\n    \n",
        "test": "assert         encode('Why not') == 'Wy not'",
        "num_ids": 300
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    lst = [int(x) for x in lst]\n    largest_prime = 0\n    for number in lst:\n        while number!= 1:\n            if number % 2 == 0:\n                number /= 2\n            else:\n                largest_prime = max(number, largest_prime)\n                break\n    return sum(int(x) for x in str(largest_prime))\n",
        "test": "assert     13 == skjkasdkd([2, 3, 5, 7])",
        "num_ids": 420
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i) is not str or type(dict[i]) is not str:\n                return False\n            else:\n                return True\n    \ndef check_dict_length(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the dictionary is empty.\n    Examples:\n    check_dict_length({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_length({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_length({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_length({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_length({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i) is not str or type(dict[i]) is not str:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({}) == False",
        "num_ids": 526
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return [x for x in range(2,n+1) if all([x%y!=0 for y in range(2,x)])]\n",
        "test": "assert     count_up_to(10) == [2, 3, 5, 7]",
        "num_ids": 395
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    def multiply_helper(a, b):\n        if b == 0:\n            return 0\n        elif b == 1:\n            return a\n        else:\n            return a + multiply_helper(a, b-1)\n    return multiply_helper(a,b)\n",
        "test": "assert     multiply(2, 3) == 6",
        "num_ids": 225
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # Your code here\n    return sum(1 for index in range(len(s)) if s[index].isupper() and index % 2 == 0)\n",
        "test": "assert     count_upper(\"Mary had a little lamb.\") == 1",
        "num_ids": 172
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"-15.6\") == -15",
        "num_ids": 151
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    result = []\n    start = 1\n    while start <= n:\n        result.append(start)\n        start = 2 * start\n    return result\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 249
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return s.split()\n",
        "test": "assert     words_string(\"\")            == []",
        "num_ids": 145
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if y < x:\n        return -1\n    if x % 2 == 0:\n        return x\n    if y % 2 == 0:\n        return y\n    if x % 2 == 1 and y % 2 == 1:\n        return -1\n    if x % 2 == 1:\n        return x - (x % 2)\n    if y % 2 == 1:\n        return y - (y % 2)\n",
        "test": "assert     choose_num(3, 4) == 4",
        "num_ids": 260
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if m <= n:\n        return -1\n    return bin(int((m - n + 1)/2) + n)[2:]\n",
        "test": "assert     rounded_avg(1, 2) == 2",
        "num_ids": 271
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return sorted([i for i in x if len(str(i)) % 2 == 1])\n",
        "test": "assert     unique_digits([1,2,3,4,5,6,7,8,9,10])    ==     [1,2,3,4,5,6,7,8,9]",
        "num_ids": 206
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [ASCII_TO_NAME[x] for x in sorted(arr) if 1 <= x <= 9]\n",
        "test": "assert     by_length([9,2,7,9,4,6,1,3]) == \"4567321\", by_length([9,2,7,9,4,6,1,3])",
        "num_ids": 984
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert     [f(i) == [sum(range(1, j)) for j in range(1, i)] for i in range(1, 10)]",
        "num_ids": 205
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 2: return (0, 0)\n    even = 0\n    odd = 0\n    for i in xrange(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(1)     == (0, 0)",
        "num_ids": 245
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > 0:\n                count += 1\n        else:\n            digit_sum = sum(int(digit) for digit in str(num * -1))\n            if digit_sum > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([1, 2, 3]) == 3, 'incorrect count_nums'",
        "num_ids": 474
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if arr==[]: return True\n    n=len(arr)\n    count_shifts=0\n    for i in range(n):\n        if arr[i]<arr[i-1]:\n            count_shifts+=1\n        else:\n            break\n    if count_shifts>=n-i:\n        return False\n    else:\n        return True\n",
        "test": "assert     move_one_ball([1,2,3,4,5]) == True",
        "num_ids": 507
    },
    {
        "number": 110,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if lst1[0]%2 == 0 and lst2[0]%2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"NO\"",
        "num_ids": 267
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # your code here\n    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    return d\n",
        "test": "assert     histogram('cde') == {'c': 1, 'd': 1, 'e': 1}",
        "num_ids": 368
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # code here\n    for i in c:\n        s=s.replace(i,'')\n    return s,s[::-1]==s\n",
        "test": "assert     reverse_delete('abbba','abz') == ('baabb',False)",
        "num_ids": 347
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [str(len(i)) + \"n the str\" + str(len(i)) + \" of the \" + str(len(i)) + \"nput.\" for i in lst]\n",
        "test": "assert     odd_count([\"2\", \"22\", \"333\", \"4\", \"222\", \"11\", \"22\", \"333\", \"4\", \"222\"]) == [3, 5, 6, 4, 10, 4, 6, 8, 8, 10]",
        "num_ids": 411
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    best_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        best_sum = min(current_sum, best_sum)\n    return best_sum\n",
        "test": "assert ",
        "num_ids": 261
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    n_rows, n_cols = len(grid), len(grid[0])\n    buckets = [[0 for _ in range(n_cols)] for _ in range(n_rows)]\n    for row in range(n_rows):\n        for col in range(n_cols):\n            if grid[row][col] == 0:\n                continue\n            buckets[row][col] = min(capacity, buckets[row][col])\n    count = 0\n    for row in range(n_rows):\n        for col in range(n_cols):\n            if buckets[row][col] > 0:\n                count += 1\n                buckets[row][col] -= 1\n    return count\n",
        "test": "assert max_fill([[0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 3) == 0",
        "num_ids": 1527
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))\n",
        "test": "assert     sort_array([0, 1, 1]) == [0, 1, 1]",
        "num_ids": 333
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     select_words(\"The quick brown fox jumped over the lazy dog\", 2)    == \\",
        "num_ids": 172
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    if len(word) == 0:\n        return \"\"\n    \n    last_char = word[-1]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    if last_char.lower() in vowels:\n        return last_char\n    \n    start_index = 0\n    end_index = len(word)\n    \n    while start_index < end_index - 1:\n        vowel = word[start_index]\n        if vowel.lower() in vowels:\n            return word[start_index]\n        start_index += 1\n    \n    return \"\"",
        "test": "assert     get_closest_vowel('happy') == 'a', \"Case 1: Passed\"",
        "num_ids": 373
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst = [x.strip('()') for x in lst]\n    for i in lst[0]:\n        if i not in lst[1]:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens(['(())()', '()()()']) == 'Yes'",
        "num_ids": 652
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5, 6], 3) == [6, 5, 4]",
        "num_ids": 207
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum([x for x in lst[::2] if x % 2])\n    ",
        "test": "assert     solution([1, 2, 3, 4, 5]) == 0, solution([1, 2, 3, 4, 5])",
        "num_ids": 253
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([], 10) == 0",
        "num_ids": 150
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # The Collatz sequence for n is defined as follows:\n    # 1. If n is even, the next term is one half of n\n    # 2. If n is odd, the next term is 3n + 1\n    # 3. The Collatz conjecture is that no matter what value of n, the sequence will always reach 1.\n    # 4. Note that a Collatz sequence is periodic, and the next term is equal to the previous term modulo 4.\n    # 5. For example, the Collatz sequence for 17 is [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    #   i.e. the first term is 17, the second term is 22, the third term is 26, the fourth is 13, the fifth is 40, the sixth is 20, the seventh is 10, the eighth is 5, the ninth is 16, the tenth is 8, the eleventh is 4, the twelfth is 2, and the thirteenth is 1.\n    # 6. The Collatz conjecture is that no matter what value of n, the sequence will always reach 1.\n    # 7. Note that a Collatz sequence is periodic, and the next term is equal to the previous term modulo 4.\n    # 8. For example, the Collatz sequence for 17 is [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    #   i.e. the first term is 17, the second term is 22, the third term is 26, the fourth is 13, the fifth is 40, the sixth is 20, the seventh is 10, the eighth is 5, the ninth is 16, the tenth is 8, the eleventh is 4, the twelfth is 2, and the thirteenth is 1.\n    # 9. The Collatz conjecture is that no matter what value of n, the sequence will always reach 1.\n    # 10. Note that a Collatz sequence is periodic, and the next term is equal to the previous term modulo 4.\n    # 11. For example, the Collatz sequence for 17 is [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    #   i.e. the first term is 17, the second term is 22, the third term is 26, the fourth is 13, the fifth is 40, the sixth is 20, the seventh is 10, the eighth is 5, the ninth is 16, the tenth is 8, the eleventh is 4, the twelfth is 2, and the thirteenth is 1.\n    odd_collatz = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return odd_collatz\n",
        "test": "assert     get_odd_collatz(1)         == [1]",
        "num_ids": 819
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    date_str = date.split('-')\n    if date_str[2][2] == '0':\n        date_str[2] = date_str[2][:2] + date_str[2][3:]\n    if len(date_str[0]) == 1:\n        date_str[0] = '0' + date_str[0]\n    if len(date_str[1]) == 1:\n        date_str[1] = '0' + date_str[1]\n    if date_str[2][2] == '0':\n        date_str[2] = date_str[2][:2] + date_str[2][3:]\n    if int(date_str[0]) > 31:\n        return False\n    if int(date_str[0]) == 0 or int(date_str[1]) > 12:\n        return False\n    if int(date_str[1]) > 31:\n        return False\n    if int(date_str[2][2]) > 30:\n        return False\n    if int(date_str[0]) == 0 or int(date_str[1]) == 0 or int(date_str[2][2]) > 29:\n        return False\n    return True\n",
        "test": "assert     valid_date('10-13-2016') == False",
        "num_ids": 426
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = []\n    # TODO: Handle empty string\n    # TODO: Handle string with multiple spaces\n    # TODO: Handle string with a word with more than one letter\n    words = txt.split()\n    for word in words:\n        result.append(word)\n    return result\n",
        "test": "assert     split_words('This is a test') == ['This', 'is', 'a', 'test']",
        "num_ids": 211
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n    \n",
        "test": "assert     not is_sorted([1, 2, 3, 5, 5, 4])",
        "num_ids": 647
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return 'YES' if not interval1 or not interval2 else 'NO' if interval1[1] < interval2[0] or interval2[1] < interval1[0] else 'YES'\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"YES\"",
        "num_ids": 193
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    res = 1\n    for i in arr:\n        if i > 0:\n            res *= 1\n        elif i < 0:\n            res *= -1\n        else:\n            continue\n    return res\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 240
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not grid:\n        return []\n    elif len(grid) == 1:\n        return grid[0]\n    elif k == 0:\n        return []\n    else:\n        values = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                values.append(grid[i][j])\n        values.sort()\n        return values[:k]\n",
        "test": "assert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], 2) == [1,2,4,6,9,16]",
        "num_ids": 292
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    tribonacci = [0, 0, 1, 1]\n    if n < len(tribonacci):\n        return tribonacci[:n + 1]\n    for i in xrange(4, n + 1):\n        tribonacci.append(sum(tribonacci[-3:]))\n    return tribonacci\n",
        "test": "assert     tri(2) == 1 + (2 / 2) = 2",
        "num_ids": 311
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    num = str(n)\n    total = 1\n    for char in num:\n        if int(char) % 2!= 0:\n            total *= int(char)\n    return total\n",
        "test": "assert     digits(1234) == 4",
        "num_ids": 178
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    bracket_map = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n    }\n    stack = []\n    for char in string:\n        if char in bracket_map:\n            stack.append(char)\n        elif len(stack) == 0 or bracket_map[stack.pop()]!= char:\n            return False\n    return len(stack) == 0\n",
        "test": "assert     is_nested('hi') == False",
        "num_ids": 239
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum([int(round(x)**2) for x in lst])\n",
        "test": "assert     sum_squares([1, 2, 3]) == 14",
        "num_ids": 197
    },
    {
        "number": 134,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    if len(txt) == 1:\n        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('Python') == True",
        "num_ids": 308
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    max_pos = -1\n    for idx, el in enumerate(arr):\n        if el < max_pos:\n            return -1\n        max_pos = el\n    return max_pos\n",
        "test": "assert     can_arrange([0, 3, 4, 1, 8, 2, 7, 6, 5]) == -1",
        "num_ids": 243
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    if lst == []:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([-1, 2, -5]) == None",
        "num_ids": 449
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if isinstance(a, str):\n        if isinstance(b, str):\n            return max(a, b, key=len)\n        else:\n            return max(a, b)\n    elif isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return max(a, b)\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 1.1) == 1.1",
        "num_ids": 181
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 0: return False\n    if n < 4: return True\n    if n % 2!= 0: return False\n    evens = [i for i in range(2, n, 2)]\n    return sum(evens) == n\n",
        "test": "assert     is_equal_to_sum_even(19) == False",
        "num_ids": 252
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    factorial = 1\n    if n > 1:\n        factorial *= n-1\n        factorial *= special_factorial(n-1)\n    return factorial\n",
        "test": "assert     special_factorial(0)     == 1",
        "num_ids": 181
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return text.replace(\" \", \"_\") if text.count(\" \") > 2 else text.replace(\" \", \"_\")\n",
        "test": "assert     fix_spaces(\" \") == \"_\"",
        "num_ids": 1167
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    import re\n    def name_check(file_name):\n        if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"No\"\n        elif file_name[0] == \".\":\n            return \"No\"\n        elif file_name[1] == \".\":\n            return \"No\"\n        elif file_name[-4:]!= \".txt\":\n            return \"No\"\n        elif file_name[-3:] == \"exe\":\n            return \"Yes\"\n        elif file_name[-3:] == \"dll\":\n            return \"Yes\"\n        elif file_name[-4:] == \".txt\" or file_name[-4:] == \".exe\" or file_name[-4:] == \".dll\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    return name_check(file_name)\n",
        "test": "assert     file_name_check('abcdef12345')    ==    'No'",
        "num_ids": 1489
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # if lst == []:\n    #     return 0\n    # elif lst == [1,2,3]:\n    #     return 6\n    # elif lst == [1,2,3,4,5,6,7,8]:\n    #     return 1345\n    # elif lst == [-1,-5,2,-1,-5]:\n    #     return -126\n    # else:\n    #     return sum(map(lambda x: x**2, lst))\n",
        "test": "assert     [sum_squares([i]) for i in range(25)] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids": 1392
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join(list(filter(is_prime, map(lambda x: len(x), sentence.split(' ')))))\n",
        "test": "assert     words_in_sentence(\"Hello\") == \"Hello\"",
        "num_ids": 235
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    a,b = x.split(\"/\")\n    a = int(a)\n    b = int(b)\n    if n.isdigit() and n!=\"0\" and n!=\"1\":\n        n = int(n)\n    else:\n        return False\n    if n==1 or n==-1:\n        return True\n    if n==0:\n        return False\n    if n<0:\n        n = abs(n)\n        sign = \"-\"\n    else:\n        sign = \"\"\n    x = int(a*n/b)\n    return sign+str(x)+\"/1\"\n",
        "test": "assert     simplify(\"2/3\", \"1/3\") == False",
        "num_ids": 280
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not nums:\n        return []\n    sums = [sum(int(num) for num in str(num)) for num in nums]\n    return [nums[i] for i in sorted(range(len(nums)), key=lambda i: sums[i])]\n",
        "test": "assert     order_by_points([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 334
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sum([1 for num in nums if num > 10 and ((num // 10) % 10) % 2!= 0])\n",
        "test": "assert     specialFilter([1,2,3,4,5,6,7,8,9,9]) == 1",
        "num_ids": 1179
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i * i + j * j + k * k == (i + j + k) * 3:\n                    max_triples += 1\n    return max_triples\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 304
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    planet1, planet2 = planet1.lower(), planet2.lower()\n    \n    # Get the index of planet1 and planet2.\n    planet1_index, planet2_index = planets.index(planet1), planets.index(planet2)\n    \n    # Get the lists of orbital elements of planet1 and planet2.\n    planet1_orbital_elements, planet2_orbital_elements = orbital_elements[planet1_index], orbital_elements[planet2_index]\n    \n    # Check if planet1 and planet2 are correct planet names.\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    \n    # Get the index of the common planet.\n    common_planet_index = planets.index(planet1_orbital_elements[0])\n    \n    # Get the difference in indices of planet1 and planet2.\n    planet1_to_common_planet_index, planet2_to_common_planet_index = abs(planet1_index - common_planet_index), abs(planet2_index - common_planet_index)\n    \n    # Get the list of common planets between planet1 and planet2.\n    common_planets = planets[planet1_to_common_planet_index:planet2_to_common_planet_index]\n    \n    # Sorted by the index of the common planet.\n    sorted_common_planets = sorted(common_planets, key = lambda x: planets.index(x))\n    \n    # Return the list of common planets between planet1 and planet2.\n    return tuple(sorted_common_planets)\n",
        "test": "assert     bf('mercury', 'Earth') == ('mercury', 'Earth','venus')",
        "num_ids": 755
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = [x for x in lst if len(x)%2 == 0]\n    result.sort(key=len)\n    return result\n",
        "test": "assert     sorted_list_sum([\"abc\", \"d\", \"xyz\", \"abc\", \"abc\"]) ==     ['abc', 'abc', 'abc', 'd']",
        "num_ids": 424
    },
    {
        "number": 150,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return x if n == 1 else y\n",
        "test": "assert     x_or_y(2, 1, 2) == 2",
        "num_ids": 175
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num ** 2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 258
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    res = [abs(a - b) for a,b in zip(game, guess)]\n    return res\n",
        "test": "assert     compare(game, [2,2,3,4,5],[1,2,3,4,5]),     'Expected compare([2,2,3,4,5],[1,2,3,4,5]) to return [1,1,1,1,1]'",
        "num_ids": 372
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    strongest_extension = extensions[0]\n    for ext in extensions[1:]:\n        strength = 0\n        for letter in ext:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > strength:\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 523
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    for i in range(1,len(a)):\n        if a[i:] in b or a[:i] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"hello\", \"hell\") == True",
        "num_ids": 204
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return (int(str(num)[::2]), int(str(num)[1::2]))\n",
        "test": "assert     (even_odd_count(24) == (2,4))",
        "num_ids": 223
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    roman_list = []\n    for roman_digit, arabic_digit in zip(ROMAN, range(1, 10)):\n        roman_list.append(roman_digit * (arabic_digit == number))\n        if roman_digit == 'i':\n            roman_list[-1] = 'x' + roman_list[-1]\n        elif roman_digit == 'v':\n            roman_list[-1] = 'vii' + roman_list[-1]\n",
        "test": "assert     int_to_mini_roman(5) == 'v'",
        "num_ids": 288
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ((a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2))\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True",
        "num_ids": 187
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    word_len = {}\n    for word in words:\n        if word in word_len:\n            word_len[word] += 1\n        else:\n            word_len[word] = 1\n    max_len = max(word_len.values())\n    for word in word_len:\n        if word_len[word] == max_len:\n            return word\n    \n",
        "test": "assert     find_max(['geek', 'gfg', 'gf', 'ee', 'fg', 'geek']) == 'geek'",
        "num_ids": 389
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if number >= need:\n        return [number + need, 0]\n    else:\n        return [number + remaining, remaining]\n",
        "test": "assert     eat(10, 10, 10) == [20, 0]",
        "num_ids": 320
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    pass\n",
        "test": "assert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, -5]) == -2",
        "num_ids": 325
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Split string into list of characters\n    s = list(s)\n    for i in range(0, len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    \n    return \"\".join(s)",
        "test": "assert     solve('world') == 'ORlW'",
        "num_ids": 254
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 337
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n",
        "test": "assert     generate_integers(1, 10) == list(range(2, 11, 2))",
        "num_ids": 211
    }
]