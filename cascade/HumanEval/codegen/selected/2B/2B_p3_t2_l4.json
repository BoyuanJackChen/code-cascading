[
    {
        "number": 0,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    sorted_numbers = sorted(numbers)\n    last_number = sorted_numbers[0]\n    for number in sorted_numbers[1:]:\n        if number - last_number <= threshold:\n            return True\n        else:\n            last_number = number\n    return False\n",
        "test": "assert     has_close_elements([3, 7, 9], 2)"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # initialize variables\n    parens = []\n    brace_level = 0\n    string_level = 0\n    paren_string = paren_string.strip()\n    # loop through each character of the string\n    for char in paren_string:\n        # if the character is the opening brace\n        if char == '(':\n            # increase brace level by 1\n            brace_level += 1\n            # add the character to the list of parens\n            parens.append(char)\n        # if the character is the closing brace\n        elif char == ')':\n            # decrease the brace level by 1\n            brace_level -= 1\n            # check if the brace level is 0\n            if brace_level == 0:\n                # if it is, then add the character to the list of parens\n                parens.append(char)\n        # if the character is the opening bracket\n        elif char == '[':\n            # increase the string level by 1\n            string_level += 1\n            # add the character to the list of parens\n            parens.append(char)\n        # if the character is the closing bracket\n        elif char == ']':\n            # decrease the string level by 1\n            string_level -= 1\n            # check if the string level is 0\n            if string_level == 0:\n                # if it is, then add the character to the list of parens\n                parens.append(char)\n    # return the list of parens\n    return parens\n",
        "test": "assert     separate_paren_groups('(()))((()') == ['(', '()', '']"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return float(int(number))\n",
        "test": "assert     truncate_number(0.125) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    n = len(operations)\n    if n == 0:\n        return False\n    i = 0\n    while i < n - 1:\n        if operations[i] <= 0:\n            i += 1\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert below_zero([-1, -5, -5]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1, 2, 3]) == 1"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert numbers, 'The input list `numbers` is empty.'\n    assert delimeter, 'The delimeter `delimeter` is not specified.'\n    assert all(isinstance(x, int) for x in numbers), 'The input list `numbers` must only contain integers.'\n    assert delimeter >= 0, 'The delimeter `delimeter` must be a non-negative integer.'\n",
        "test": "assert     intersperse([1, 2, 3], 3) ==     [1, 3, 2, 3]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return_list = []\n    depth = 0\n    for i in paren_string:\n        if i == '(':\n            depth += 1\n        elif i == ')':\n            depth -= 1\n        else:\n            continue\n        if depth > return_list[-1]:\n            return_list.append(depth)\n    return return_list\n",
        "test": "assert     parse_nested_parens(\"(((()())))\") == 3"
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "test": "assert     filter_by_substring([\"foo\", \"bar\", \"bar\", \"foobar\"], \"foo\") == [\"foo\"]"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    return (total, product)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    results = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        results.append(current_max)\n    return results\n",
        "test": "assert "
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    prefix = suffix = ''\n    while string:\n        suffix, prefix = prefix + string, string\n        if is_palindrome(suffix):\n            return prefix\n",
        "test": "assert "
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return \"\".join([str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b)])\n",
        "test": "assert string_xor(\"0011001011101111\",\"01010101010101010\") == \"01010101010101010\""
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) == 2:\n        return strings[0] if strings[0] > strings[1] else strings[1]\n    if len(strings) == 3:\n        return strings[0] if strings[0] > strings[1] else strings[1] if strings[1] > strings[2] else strings[2]\n    length = 1\n    start = 0\n    result = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > length:\n            result = strings[i]\n            length = len(strings[i])\n            start = i\n    return result\n",
        "test": "assert     longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n",
        "test": "assert     greatest_common_divisor(4, 2) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "assert     all_prefixes(\"A\") == [\"A\"]"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return''.join([f'{i}' for i in range(n + 1)])\n",
        "test": "assert     string_sequence(5) == \"0 1 2 3 4\""
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1"
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    res = []\n    for i in music_string:\n        if i == 'o':\n            res.append(4)\n        elif i == 'o|':\n            res.append(2)\n        elif i == '.':\n            res.append(1)\n    return res\n",
        "test": "assert     parse_music(\"\") == []"
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    count = 0\n    index = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"Python\", \"thon\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    num = numbers.split()\n    num.sort()\n    print(num)\n    \n    return''.join(num)\n",
        "test": "assert "
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    largest = numbers[0]\n    smallest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (smallest, largest)\n",
        "test": "assert     find_closest_elements([2,4]) == (2,4)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0.5, 0.4, 1]) == [0, 0.5, 0.4, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([0, 1, 2, 3]) == [0, 1, 2, 3]"
    },
    {
        "number": 23,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"h\") == 1"
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if n == 1:\n        return 1\n    else:\n        divisor = 2\n        while divisor <= n:\n            if n % divisor == 0:\n                return divisor\n            divisor += 1\n",
        "test": "assert     largest_divisor(1) == 1, \"Test case 1 failed\""
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n//2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n//i\n    if n!= 1:\n        result.append(n)\n    return result\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return list(set(numbers))\n    #return list(map(numbers.remove, numbers))\n",
        "test": "assert     remove_duplicates([1,2,3,4]) ==     [1,2,3,4]"
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"\") == \"\""
    },
    {
        "number": 28,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Hello world!\""
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([], \"ab\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return [x for x in l if x >= 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n == 2:\n        return True\n    if n <= 3 or n % 2 == 0:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    assert len(xs) % 2 == 0\n    assert all(map(lambda x: x!= 0, xs))\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(l) % 3!= 0:\n        l.append(l[-1])\n    return sorted(l, key=lambda x: x if x % 3!= 0 else l[x])\n",
        "test": "assert     sort_third([1,2,3,4]) == [1,2,3,4]"
    },
    {
        "number": 34,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return list(dict.fromkeys(l))\n",
        "test": "assert     unique([1, 2, 3, 3, 2, 1]) == [1, 2, 3]"
    },
    {
        "number": 35,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    max_num = l[0]\n    for i in range(len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "test": "assert     max_element([2, 6, 8, 10]) == 10, 'Max element in the list'"
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(3) == 1"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            new_l.append(l[i])\n    for i in range(len(l)):\n        if i%2!= 0:\n            new_l.append(l[i])\n    return new_l\n",
        "test": "assert     sort_even([1, 3, 8, 5, 4, 9, 2]) == [2, 3, 1, 4, 5, 8, 9]"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n <= 1:\n        return 2\n    a = 3\n    b = 5\n    fib_n = a + b\n    while fib_n!= n:\n        fib_n = a + b\n        a = b\n        b = fib_n\n    return fib_n\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Set up\n    car_col_count = 0\n    \n    # Loop through cars\n    for car_index in range(n):\n        # Loop through cars\n        for other_index in range(n):\n            # if car_index!= other_index\n            if car_index!= other_index:\n                # if car_index is moving left to right\n                if (car_index < n - 1):\n                    # if car_index is moving right to left\n                    if (car_index > 0):\n                        # if cars are overlapping\n                        if car_index == other_index:\n                            # increment car collision count\n                            car_col_count += 1\n        \n    return car_col_count\n",
        "test": "assert     car_race_collision(1) == 0, \"Test 1 Failed\""
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert         incr_list([1,2,3]) == [2,3,4]"
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 2, -1, -2, 3]) == True"
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # Base 10 to Base 2\n    x_in_base2 = format(x, 'b')\n    x_in_base10 = int(x_in_base2, 2)\n    return str(x_in_base10)\n",
        "test": "assert     change_base(1, 10) == '1'"
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # A = 0.5 * a * h\n    A = 0.5 * a * h\n    return A\n",
        "test": "assert     triangle_area(4, 4) == 1, 'Should be 1'"
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(3) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if not l:\n        raise ValueError(\"List is empty.\")\n    l.sort()\n    if len(l) % 2 == 0:\n        return float(l[len(l)//2] + l[len(l)//2 - 1]) / 2.0\n    else:\n        return float(l[len(l)//2])\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3, \"Wrong median\""
    },
    {
        "number": 48,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return text == text[::-1]\n",
        "test": "assert is_palindrome(\"never odd or even\") == False"
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return (n % p) + p if n < 0 else (n % p)\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"ABC\") == \"L\""
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    result = ''\n    for i in text:\n        if i in 'aeiouAEIOU':\n            result = result + i\n    return result\n",
        "test": "assert "
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert not below_threshold([5, 1, 3, 4, 5], 5)"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(0, 5) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars('mah','mah')"
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if brackets == \"\":\n        return True\n    \n    # Use stack\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        elif c == \">\":\n            if stack == []:\n                return False\n            elif stack.pop()!= \"<\":\n                return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<>\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    n = len(l)\n    if n < 2:\n        return True\n    for i in range(n-1):\n        if l[i] > l[i+1]:\n            return False\n    return True",
        "test": "assert     monotonic([0,1,2,3,4,5,6,7,8,9]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    l1 = set(l1)\n    l2 = set(l2)\n    return sorted(l1 & l2)\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return max(prime_factorize(n))\n",
        "test": "assert "
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "test": "assert "
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    num_open = brackets.count(\"(\")\n    num_close = brackets.count(\")\")\n    return num_open == num_close\n",
        "test": "assert     correct_bracketing(\"\") == True, \"Test 1 Passed\""
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(len(xs)):\n        xs[i] = xs[i] * i\n    return xs\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n <= 2:\n        return n\n    return fibfib(n-1) + fibfib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    count = 0\n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"aabb\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if shift > len(x):\n        x = x[::-1]\n    res = \"\"\n    for i in range(shift):\n        res = res + x[0]\n        x = x[1:]\n        x = x + x[0]\n    return res\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    if s == \"\":\n        return 0\n    else:\n        return sum([ord(x) for x in s])\n",
        "test": "assert "
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for char in s:\n        if char =='m':\n            count += int(n)\n        else:\n            count += int(n) - int(char)\n    return count\n",
        "test": "assert "
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    nodes = arr\n    if nodes == []:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    #if lst == []:\n    #    return -1\n",
        "test": "assert search([1,2,3,4,5]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sorted(lst, key=lambda x: -x)\n",
        "test": "assert "
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n",
        "test": "assert "
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    def f(l):\n        if l[0] == l[-1] and l[0] == len(l)-1:\n            if sum(l) <= w:\n                return True\n        else:\n            return False\n    return f(q)",
        "test": "assert     will_it_fly([1],0) == False"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    count = 0\n    for x in range(len(arr)-1):\n        # one element\n        if arr[x]!= arr[x+1]:\n            count += 1\n        # two elements\n        if x < len(arr)-2 and arr[x]!= arr[x+1] and arr[x+1]!= arr[x+2]:\n            count += 1\n    return count\n",
        "test": "assert     smallest_change([1, 4, 2, 5]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match(['AA', 'AA'], ['BB', 'AA']) == ['AA', 'AA'], 'Error 2'"
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    p = 1\n    for i in range(1, 100):\n        if i * p == a:\n            return True\n        p += 1\n    return False\n",
        "test": "assert     is_multiply_prime(0) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if (n==0):\n        return False\n    if (n==1):\n        return True\n    if (n==x):\n        return True\n    if ((n<0)):\n        return False\n    return is_simple_power(x, n//x)\n",
        "test": "assert     is_simple_power(24, 3) == False, \"Wrong\""
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return a**3 == a\n",
        "test": "assert "
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if num == '':\n        return 0\n    digits = []\n    for i in range(len(num)):\n        digits.append(num[i])\n    prime = 0\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if(int(digits[i]) % int(digits[j]) == 0):\n                break\n        else:\n            prime += 1\n    return prime\n        \n",
        "test": "assert     hex_key(\"\") ==     0, \"check the correctness of hex_key\""
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # your code here\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary += str(remainder)\n        decimal = decimal // 2\n    return binary\n",
        "test": "assert     decimal_to_binary(12) == '101100011', 'decimal_to_binary: wrong output!'"
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count >= 3\n",
        "test": "assert "
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    grades = sorted(grades)\n    grades_list = []\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades_list.append(\"A+\")\n        elif grades[i] >= 3.7:\n            grades_list.append(\"A\")\n        elif grades[i] >= 3.3:\n            grades_list.append(\"A-\")\n        elif grades[i] >= 3.0:\n            grades_list.append(\"B+\")\n        elif grades[i] >= 2.7:\n            grades_list.append(\"B\")\n        elif grades[i] >= 2.3:\n            grades_list.append(\"B-\")\n        elif grades[i] >= 2.0:\n            grades_list.append(\"C+\")\n        elif grades[i] >= 1.7:\n            grades_list.append(\"C\")\n        elif grades[i] >= 1.3:\n            grades_list.append(\"C-\")\n        elif grades[i] >= 1.0:\n            grades_list.append(\"D+\")\n        elif grades[i] >= 0.7:\n            grades_list.append(\"D\")\n        elif grades[i] >= 0.0:\n            grades_list.append(\"D-\")\n        elif grades[i] < 0.0:\n            grades_list.append(\"E\")\n    return grades_list\n",
        "test": "assert     numerical_letter_grade([3.0, 4.0, 4.0]) == ['B+', 'A+', 'A+']"
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    n = len(string)\n    \n    if n == 0:\n        return False\n        \n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \n",
        "test": "assert "
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    count = 0\n    for num in range(2, n+1):\n        str_num = str(num)\n        if str_num[0] == '1' or str_num[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return str(bin(N)).replace(\"0b\", \"\")\n",
        "test": "assert     solve(10) == \"1010\""
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2!= 0:\n                lst.append(lst[i])\n    return lst\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    shuffled_string = \"\"\n    word = \"\"\n    for letter in s:\n        if letter == \" \":\n            shuffled_string += word\n            word = \"\"\n        else:\n            word += letter\n    shuffled_string += word\n    return shuffled_string\n",
        "test": "assert "
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    res = []\n    \n    for r in lst:\n        for c in r:\n            if c == x:\n                res.append((lst.index(r), r.index(c)))\n    res.sort(key = lambda item: (item[0], item[1]))\n    res.sort(key = lambda item: (item[1]), reverse = True)\n    return res\n",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr = array[:]\n    for i in range(len(arr)-1):\n        first_index = i\n        last_index = len(arr)-1 - i\n",
        "test": "assert "
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    import string\n    upper_letters = string.ascii_uppercase\n    lower_letters = string.ascii_lowercase\n    alphabet = upper_letters + lower_letters\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    new_alphabet_dict = dict(zip(alphabet, new_alphabet))\n    def encrypt(letter):\n        return new_alphabet_dict[letter]\n    return encrypt\n    # Complete the function\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if not lst:\n        return None\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([1,2,3]) == 2, \"Should return the next smallest number.\""
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            count = count + 1\n    return count\n",
        "test": "assert     is_bored(\"I.am.bored.of.this.sentence\") == 1, \"1st\""
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return x == (y + z) and (x).is_integer() and (y).is_integer() and (z).is_integer()\n",
        "test": "assert     any_int(1, 1, 1) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # message = 'test'\n    code = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                pos = vowels.index(char) + 2\n                if pos > 25:\n                    pos = pos - 26\n                code += vowels[pos]\n            else:\n                code += char.lower()\n        else:\n            code += char\n    return code\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    def is_prime(n):\n        \"\"\"\n        \n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     skjkasdkd([0, 0, 10, 1, 1]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return all([key.islower() for key in dict.keys()]) and all([key.isupper() for key in dict.keys()])\n",
        "test": "assert     check_dict_case({}) == False, \"Test 1: Input is empty\""
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    from math import sqrt\n    primes = [2]\n    for i in range(3,n+1):\n        isPrime = True\n        for prime in primes:\n            if i%prime==0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    for i in range(0,len(primes)):\n        primes[i] = primes[i] + 1\n        if primes[i] >= n:\n            break\n    for i in range(i,len(primes)):\n        primes[i] = primes[i] - 1\n    return primes\n",
        "test": "assert "
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    product = 0\n    while b!= 0:\n        carry, val = divmod(a, 10)\n        product = product + val\n        a = carry\n        b = b - 1\n    return product\n",
        "test": "assert     multiply(12, 13) == 288, \"failed unit test 2\""
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Your code here\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Step 1: Strip the commas and float\n    num = float(value.replace(',', ''))\n    # Step 2: Check if it is equidistant from two integers\n    if abs(round(num) - num) <= 1:\n        # Step 3: Round the number\n        rounded_num = round(num)\n        # Step 4: Return the rounded number\n        return(str(rounded_num))\n    else:\n        # Step 5: Round the number\n        rounded_num = round(num)\n        # Step 6: Return the rounded number\n        return(str(rounded_num))\n",
        "test": "assert "
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    res = []\n    i = 1\n    if n % 2 == 1:\n        while i <= n:\n            res.append(i)\n            i += 2\n    elif n % 2 == 0:\n        while i <= n:\n            res.append(i)\n            i += 2\n    return res\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    words = s.split(\", \")\n    return words\n",
        "test": "assert     words_string('a,   b,  c,  ') == ['a', 'b', 'c']"
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    even = 0\n    while x <= y:\n        if x % 2 == 0:\n            even += x\n        x += 1\n    if even == 0:\n        return -1\n    else:\n        return even\n",
        "test": "assert "
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n < m:\n        return -1\n    if n == m:\n        return 0\n    elif n > m:\n        return 0\n    else:\n        return bin(int(n) + int(m))[2:]\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([1, 1, 9, 1]) == [1, 9]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr = sorted(arr)\n    ans = []\n    for i in range(len(arr)):\n        if arr[i] >= 10 and arr[i] <= 9:\n            num_digits = 0\n            while arr[i] > 0:\n                arr[i] -= 1\n                num_digits += 1\n            ans.append(int(str(num_digits) +'' + digit_name(num_digits)))\n    ans.reverse()\n    return ans\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # Your code here\n    output = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            output.append(1)\n        else:\n            output.append(int(i*(i+1)/2))\n    return output\n",
        "test": "assert     f(2) == [1,1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    evens = odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odd += 1\n    return evens, odd\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    count = 0\n    for num in arr:\n        num_string = str(num)\n        num_sum = 0\n        for i in range(len(num_string)):\n            num_sum += int(num_string[i])\n        if num_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        while arr and arr[-1] < arr[0]:\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    arr = arr[:i+1] + arr[i+2:]\n                    break\n        return len(arr) == 0 or len(arr) == len(arr) - 1\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"YES\" if can_be_even(lst1) and can_be_even(lst2) else \"NO\"\n    \n",
        "test": "assert     exchange([1, 2, 3], [2, 4, 5]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    counter = {}\n    for letter in test.lower():\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    return counter\n",
        "test": "assert         (histogram('bye') == {'b': 1, 'e': 1, 'y': 1, 'd': 1})"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    new_s = list(s)\n    new_c = list(c)\n    for i in range(len(c)):\n        new_s.remove(s[i])\n    return ''.join(new_s),True if new_s == new_s[::-1] else False\n",
        "test": "assert     reverse_delete(\"abcd\", \"bc\") == ('dcb', True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    str_lst = []\n    for i in range(len(lst)):\n        str_lst.append(lst[i].replace(\"0\", \"\").replace(\"1\", \"\").replace(\"0\", \"\"))\n    for j in range(len(lst)):\n        if len(lst[j]) % 2 == 1:\n            str_lst[j] += \"1\"\n    return [str_lst[i] + \" the number of odd elements \" + str(len(lst[i]) % 2) + \"n the str\" + str(i) + \"ng \" + str(len(lst[i]) % 2) + \"of the \" + str(i) + \"nput.\" for i in range(len(lst))]\n",
        "test": "assert odd_count([]) == [], 'Empty list should return empty list'"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(nums) == 0:\n        return 0\n    \n    total_sum = 0\n    running_sum = 0\n    minimum_subarray_sum = float('inf')\n    \n    for i in range(len(nums)):\n        total_sum += nums[i]\n        running_sum += nums[i]\n        if running_sum >= total_sum:\n            minimum_subarray_sum = min(minimum_subarray_sum, total_sum - running_sum)\n    return minimum_subarray_sum\n",
        "test": "assert "
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def sub(grid, i, j, capacity):\n        if i == len(grid) or j == len(grid[0]): return 0\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x)[2:]).count('1'))\n",
        "test": "assert "
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if s == '':\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        a = select_words(s[1:], n)\n        if a == []:\n            return select_words(s[1:], n)\n        else:\n            b = []\n            for i in range(len(a)):\n                if ''.join(sorted(a[i])) == ''.join(sorted(s[0])):\n                    b.append(a[i])\n            return b\n",
        "test": "assert "
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return \"",
        "test": "assert "
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    i = 0\n    j = 0\n    stack = []\n    l = len(lst)\n    # Put close parentheses into stack\n    while i < l:\n        if lst[i] == '(':\n            stack.append(lst[i])\n        elif lst[i] == ')':\n            # If stack is empty, it means the stack has no open parentheses\n            if stack == []:\n                return 'No'\n            else:\n                # If the top of stack is not '(' then it is not possible\n                if stack.pop()!= '(':\n                    return 'No'\n        i += 1\n",
        "test": "assert "
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "test": "assert     maximum([], 0) == []"
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    x = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            x += lst[i]\n    return x",
        "test": "assert solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr = arr[:k]\n    return sum([int(str(n)[0]) + int(str(n)[1]) for n in arr])\n",
        "test": "assert "
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    odd_nums = []\n    odd_nums.append(1)\n    while n!= 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = 3 * n + 1\n        odd_nums.append(n)\n    odd_nums.sort()\n    return odd_nums\n    \n    \ndef test_get_odd_collatz():\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(7) == [1, 7]\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(16) == [1, 5, 16]\n    assert get_odd_collatz(18) == [1, 6, 18]\n    assert get_odd_collatz(35) == [1, 5, 16, 35]\n    assert get_odd_collatz(90) == [1, 7, 21, 34, 42, 46, 55, 66, 78, 89]\n    assert get_odd_collatz(100) == [1, 7, 21, 34, 45, 55, 65, 78, 89, 100]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if not date:\n        return False\n",
        "test": "assert valid_date('01-01-2020')"
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('this,is,a,test') == ['this', 'is', 'a', 'test']"
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    count = {}\n    for number in lst:\n        count[number] = count.get(number, 0) + 1\n    return len(count) == len(lst) and count[lst[0]] == 1\n",
        "test": "assert     is_sorted([0,1,1,3,5]) == False"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if interval1[0] >= interval2[0] and interval1[0] <= interval2[1]:\n        return \"YES\"\n    elif interval1[1] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nif __name__ == '__main__':\n    intersection((1, 2), (2, 3)) #==> \"NO\"\n    intersection((-1, 1), (0, 4)) #==> \"NO\"\n    intersection((-3, -1), (-5, 5)) #==> \"YES\"\n    ",
        "test": "assert "
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = 0\n    neg = 1\n    pos = 1\n    zeros = 0\n    for i in arr:\n        if i == 0:\n            zeros += 1\n        if i < 0:\n            neg *= i\n        if i > 0:\n            pos *= i\n    if zeros > 0:\n        return None\n    result = neg*pos\n    return result\n",
        "test": "assert     prod_signs([-1, -1, 1, -1]) == -1, 'Wrong'"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def neighbors(node):\n        i, j = node\n        return ((i+1, j), (i-1, j), (i, j+1), (i, j-1))\n    \n    def dfs(node, visited, dist, k):\n        # we are done\n        if dist == k:\n            return node\n        # no more possible paths\n        if dist > k:\n            return None\n        \n        # check if we have already been here\n        if visited[node]!= None:\n            return visited[node]\n        \n        # we can start the DFS\n        # we can visit each node\n        visited[node] = True\n        for i, j in neighbors(node):\n            # try to get the next path\n            next_path = dfs(i, visited, dist+1, k)\n            # if we got it\n            if next_path!= None:\n                return next_path\n        # we failed to find it\n        return None\n",
        "test": "assert     minPath([[4, 3, 1],"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    #Initialize list\n    trib = []\n    trib.append(1)\n    trib.append(1)\n    trib.append(1)\n    \n    #Loop through and add the numbers\n    for i in range(2,n+1):\n        trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n    \n    #Return the list\n    return trib\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    result = 1\n    while n > 0:\n        if n % 10 % 2!= 0:\n            result *= n % 10\n        n //= 10\n    return result\n",
        "test": "assert "
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if string == None: return False\n    if string == '': return True\n    if string[0] == ']': return False\n    if string[0] == ']': return False\n",
        "test": "assert "
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    a = sum(x*x for x in lst)\n    return round(a)",
        "test": "assert     sum_squares([0, 1, 2, 3]) == 14, \"Wrong result\""
    },
    {
        "number": 134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    return txt[-1].isalpha() and txt.count(' ') == 0\n    \n    \ndef check_if_first_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the first character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n",
        "test": "assert check_if_last_char_is_a_letter(\"Hello John\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    # your code here\n    can_arrange = lambda arr: arr[0] - 1 if arr[0] > arr[1] else -1\n    return can_arrange(arr)\n",
        "test": "assert     can_arrange([4,1,1,2]) == 3"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(lst) == 0:\n        return None, None\n    positive_numbers = []\n    negative_numbers = []\n    for number in lst:\n        if number > 0:\n            positive_numbers.append(number)\n        if number < 0:\n            negative_numbers.append(number)\n    # if there is no negative or positive numbers, return None\n    if len(negative_numbers) == 0 or len(positive_numbers) == 0:\n        return None, None\n    # else return the largest negative integer, and smallest positive integer\n    return (min(negative_numbers), max(positive_numbers))\n",
        "test": "assert     largest_smallest_integers([-0.0,-1.0,-2.0,-3.0]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        return compare_two(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return compare_two(a, b)\n    else:\n        return a if a > b else b\n",
        "test": "assert     compare_one(1.2, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return n % 2 == 0 and n // 2 % 2 == 0 and n // 4 % 2 == 0 and n // 8 % 2 == 0\n",
        "test": "assert "
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(5) == 120"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\")\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    for i in range(len(file_name)):\n        if file_name[i].isdigit():\n            return 'No'\n        if i == 0 and not file_name[0].isalpha():\n            return 'No'\n        if file_name[i] == '.':\n            return 'No'\n        if not file_name[i].isalpha() and not file_name[i].isdigit():\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('a.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if (i + 1) % 3 == 0 and (i + 1) % 4!= 0:\n            total += lst[i] ** 2\n        elif (i + 1) % 4 == 0 and (i + 1) % 3!= 0:\n            total += lst[i] ** 3\n        else:\n            continue\n    return total\n",
        "test": "assert "
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    s = sentence.split(' ')\n    res = ''\n    for i in s:\n        if len(res) == 0 or len(i) == len(res):\n            res = i\n        else:\n            break\n    return res",
        "test": "assert "
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    #return True if x * n == int(x * n) else False\n",
        "test": "assert     not simplify('.3/4', '1')"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(nums, key=lambda item: sum([int(digit) for digit in str(item)]))\n",
        "test": "assert         order_by_points([9,5,3,1,8,6,2,0,4]) == [0, 1, 2, 3, 4, 5, 6, 8, 9]"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    count = 0\n    for num in nums:\n        if isSpecial(num) and num < 10:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    for i in range(n):\n        for j in range(i + 1, n):\n            k = n - (i + j)\n            if i + j + k == n and (i + j) * (i + k) % 3 == 0:\n                return 1\n    return 0\n",
        "test": "assert     get_max_triples(3) == 1, \"You are very wrong!\""
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # change to a set, sort by words length\n    lst = sorted([*lst], key=len)\n    # we have to remove words that have odd lengths\n    del_odd_length = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            del_odd_length.append(word)\n    for i in del_odd_length:\n        lst.remove(i)\n    return lst",
        "test": "assert "
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(4, x=1, y=2) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    odd_sum = 0\n    for number in lst:\n        if number % 2 == 1:\n            odd_sum += number**2\n    return odd_sum\n",
        "test": "assert "
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [abs(guess-score) for guess,score in zip(guess,game)]\n",
        "test": "assert     compare([5,10,15,20], guess = [30,25,20,35]) == [2,1,3,4]"
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    class_name = str(class_name)\n    class_name = class_name.title()\n    extension_dict = {}\n    for extension in extensions:\n        extension = str(extension)\n        extension = extension.title()\n        if extension in extension_dict:\n            extension_dict[extension] += 1\n        else:\n            extension_dict[extension] = 1\n    #print(extension_dict)\n    strongest_extension = class_name\n    max_strength = 0\n    for key, value in extension_dict.items():\n        strength = 0\n        key = key.lower()\n        value = int(value)\n        for char in key:\n            if char.isupper():\n                strength += 1\n        strength = strength - value\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + '.' + key\n    strongest_extension = strongest_extension.replace('.', '_')\n    #print(strongest_extension)\n    return strongest_extension\n",
        "test": "assert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese', 'Not Correct'"
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if a.find(b)!= -1:\n        return True\n    for i in range(len(a)-len(b)+1):\n        sub = a[i:i+len(b)]\n        if sub == b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('waterbottle','erbottlew') == False"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    n = num\n    if (n > 0 and n % 2 == 0):\n        # even\n        return (1, 0)\n    elif (n > 0 and n % 2 == 1):\n        # odd\n        return (0, 1)\n    elif (n < 0):\n        # even\n        return (0, 0)\n    else:\n        # negative number\n        return (0, 0)\n",
        "test": "assert "
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    number_dict = {\n        1 : 'I', 2 : 'II', 3 : 'III', 4 : 'IV', 5 : 'V', 6 : 'VI', 7 : 'VII',\n        8 : 'VIII', 9 : 'IX', 10 : 'X', 11 : 'XI', 12 : 'XII', 13 : 'XIII',\n        14 : 'XIV', 15 : 'XV', 16 : 'XVI', 17 : 'XVII', 18 : 'XVIII',\n        19 : 'XIX', 20 : 'XX', 30 : 'XXX', 40 : 'XL', 50 : 'L',\n        60 : 'LX', 70 : 'LXX', 80 : 'LXXX', 90 : 'XC', 100 : 'C',\n        200 : 'CC', 300 : 'CCC', 400 : 'CD', 500 : 'D', 600 : 'DC',\n        700 : 'DCC', 800 : 'DCCC', 900 : 'CM', 1000 : 'M'}\n    roman_dict = {v : k for k, v in number_dict.items()}\n    roman_result = []\n    for i in range(1, number+1):\n        if i in roman_dict:\n            roman_result.append(roman_dict[i])\n        else:\n            if len(roman_result) == 0:\n                roman_result.append(number_dict[i])\n            else:\n                roman_result.append(number_dict[i-roman_result[-1]])\n    roman_result = ''.join(roman_result)\n    return roman_result\n",
        "test": "assert "
    },
    {
        "number": 157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    max_len = float('-inf')\n    max_char = None\n    for word in words:\n        count = Counter(word)\n        if len(word) > max_len:\n            max_len = len(word)\n            max_char = word\n        if len(word) == max_len and word not in words:\n            max_char = word\n    return max_char\n",
        "test": "assert "
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    # Your code starts here!\n",
        "test": "assert     eat(0, 0, 0) == None"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    print(f\"Start to do algebra with operator: {operator}\")\n    print(f\"Start to do algebra with operand: {operand}\")\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(s) == 0: return s\n    \n    arr = list(s)\n    for i in range(len(arr)):\n        if s[i].isalpha():\n            arr[i] = s[i].swapcase()\n        else:\n            arr[i] = s[i]\n    return \"\".join(arr)\n",
        "test": "assert     solve('ab') == 'ba'"
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5('There is nothing here') == None"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    i = a\n    while i <= b:\n        if i % 2 == 0:\n            yield i\n        i += 1\n",
        "test": "assert     generate_integers(1, 100) == range(2, 101, 2)"
    }
]