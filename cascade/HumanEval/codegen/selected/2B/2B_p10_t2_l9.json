[
    {
        "number": 0,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4], 2) == True"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    open_brace = -1\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            open_brace = i\n        elif ch == ')':\n            paren_list.append(paren_string[open_brace:i])\n            open_brace = -1\n    return paren_list\n",
        "test": "assert     separate_paren_groups('') == []"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    return number - math.floor(number)\n",
        "test": "assert     truncate_number(0.1) == 0.1"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    total = 0\n    for op in operations:\n        if op >= 0:\n            total += op\n        else:\n            total -= op\n    return total < 0\n",
        "test": "assert     below_zero([1]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    if len(numbers) < 2:\n        return None\n    else:\n        # Calculate the mean of the list\n        mean = sum(numbers) / len(numbers)\n        # Create a list for the deviation\n        deviation_list = []\n        # Loop over each number in the list\n        for number in numbers:\n            # Calculate the deviation\n            deviation = abs(number - mean)\n            # Add the deviation to the list\n            deviation_list.append(deviation)\n        # Calculate the average deviation\n        return sum(deviation_list) / len(deviation_list)\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1"
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    out: List[int] = []\n    if not numbers:\n        return out\n    i = 0\n    while i < len(numbers):\n        out.append(numbers[i])\n        if i < len(numbers) - 1:\n            out.append(delimeter)\n        i += 1\n    return out",
        "test": "assert     intersperse([], ')') == []"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    paren_levels = 0\n    paren_stack = []\n    parens = []\n    paren_level = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_levels += 1\n            paren_stack.append(paren_levels)\n        elif paren_string[i] == ')':\n            paren_levels -= 1\n            paren_stack.append(paren_levels)\n            if paren_levels == 0:\n                paren_level += 1\n                parens.append(paren_level)\n                paren_level = 0\n    return parens\n",
        "test": "assert     parse_nested_parens('(())') ==     [1]"
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"baz\") == []"
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    # your code here\n    \n    sum = 0\n    product = 1\n    if len(numbers) == 0:\n        return (0, 1)\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n",
        "test": "assert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    result: List[int] = []\n    # Set up our rolling maximum set\n    maximum: int = numbers[0]\n    current_max: int = numbers[0]\n    # Initialize a rolling maximum counter\n    rolling_max_counter = 0\n    # For each element in the list, compare it with the rolling maximum and update the rolling maximum if needed.\n    for x in numbers:\n        rolling_max_counter += 1\n        if x > current_max:\n            current_max = x\n            maximum = current_max\n        result.append(maximum)\n    # If we didn't roll the maximum yet, keep rolling max and update current max to be the new maximum\n    if rolling_max_counter < len(numbers):\n        maximum = max(result[rolling_max_counter - 1], maximum)\n        result[rolling_max_counter] = maximum\n    return result\n",
        "test": "assert     rolling_max([2, 5, 2, 3, 1]) == [2, 5, 5, 5, 5]"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    s = string\n    for i in range(len(s), 0, -1):\n        if is_palindrome(s[:i]):\n            return s[:i] + s[i:][::-1]\n",
        "test": "assert not is_palindrome(\"Never Odd or Even\") == True"
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            res += \"1\"\n        else:\n            res += \"0\"\n    return res\n",
        "test": "assert     string_xor('1111111111111111111111111111','1111111111111111111111111111') == '1111111111111111111111111111'"
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if len(strings) == 0:\n        return None\n    length = len(strings[0])\n    longest = strings[0]\n    for string in strings:\n        if len(string) == length:\n            if string > longest:\n                longest = string\n    return longest\n",
        "test": "assert     longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "test": "assert     greatest_common_divisor(2, 2) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    \n    result = []\n    for i in range(0,len(string)+1):\n        result.append(string[:i])\n    return result\n",
        "test": "assert     all_prefixes(\"abcd\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\"]"
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    return''.join(str(i) for i in range(n))\n",
        "test": "assert     string_sequence(0) == ''"
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    return_list = []\n    for letter in music_string:\n        if letter == 'o':\n            return_list.append(4)\n        elif letter == 'o|':\n            return_list.append(2)\n        elif letter == '.':\n            return_list.append(1)\n    return return_list\n",
        "test": "assert     parse_music(\"o|o|o|o|o|o|\") == [4,4,4,4,4,4]"
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    count = 0\n    for i in range(0, len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"AABBCCDD\", \"CD\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    numbers_list = numbers.split()\n    numbers_list.sort(key=int)\n    numbers_list =''.join(numbers_list)\n    return numbers_list\n",
        "test": "assert     sort_numbers(\"\") == \"\""
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    difference = float('inf')\n    first_index = -1\n    second_index = -1\n    for i, x in enumerate(numbers):\n        if x - numbers[first_index] < difference:\n            difference = x - numbers[first_index]\n            second_index = first_index\n            first_index = i\n    return numbers[first_index], numbers[second_index]\n",
        "test": "assert     find_closest_elements([1,1,1,1,1]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    max_number = max(numbers)\n    min_number = min(numbers)\n    if max_number == min_number:\n        return [0.0] * len(numbers)\n    else:\n        return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
        "test": "assert "
    },
    {
        "number": 22,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    # return list(filter(lambda x: isinstance(x, int), values))\n    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 23,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"123\") == 3"
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    d = 1\n    while n%d!= 0:\n        d += 1\n    return d\n",
        "test": "assert     largest_divisor(1) == 1, \"Input 1 should always be 1\""
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    factors = []\n    if n > 1:\n        for i in range(2, n+1):\n            while n % i == 0:\n                factors.append(i)\n                n /= i\n    return factors\n",
        "test": "assert     factorize(4) == [2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1,2,2,3,3,4,4]) == [1,2,3,4]"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return ''.join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix(['my', 'your', 'is', 'are'],'my') == ['my']"
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert get_positive([1, 2, 3, 4, 5, -6, 7]) == [1, 2, 3, 4, 5, 7]"
    },
    {
        "number": 31,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    if n == 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5) + 1,2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert not (is_prime(3) and is_prime(4))"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    # ensure that xs is a list of coefficients of a polynomial\n    assert all(x == 0 or i % 2 == 0 for i, x in enumerate(xs))\n    # remove any zero coefficients\n    xs = list(filter(lambda x: x!= 0, xs))\n    # if xs is empty return None\n    if len(xs) == 0:\n        return None\n    # sort xs such that xs[0] is largest.\n    # we need to sort this because find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    xs.sort(reverse=True)\n    # if xs has only one element,\n    # there is only one solution, so return this solution\n    if len(xs) == 1:\n        return xs[0]\n    # else, we use binary search to find the zero point.\n    # use the find_zero_rec function\n    return find_zero_rec(xs)\n",
        "test": "assert     find_zero([1,0,0,0,0,0]) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    if not l:\n        return []\n    \n    l1 = l[:]\n    l2 = l[:]\n    \n    l2.sort()\n    \n    i = 0\n    j = 0\n    \n    while i < len(l1):\n        if j < len(l2) and l1[i] % 3 == 0:\n            l1[i] = l2[j]\n            j += 1\n        i += 1\n    \n    return l1\n",
        "test": "assert     sort_third([0, 1, 2, 4, 5]) == [0, 1, 2, 4, 5]"
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    lst = []\n    for x in l:\n        if x not in lst:\n            lst.append(x)\n    return lst\n",
        "test": "assert     unique([1,2,3,3,4]) == [1,2,3,4], \"Not correct\""
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if l:\n        l[0] = max(l[0], l[-1])\n        return max(l)\n    else:\n        return None\n",
        "test": "assert     max_element([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 90, \"Wrong max element.\""
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 13 == 0:\n            counter += 1\n    return counter\n",
        "test": "assert     fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    l_even = l.copy()\n    l_even.sort()\n    return l_even\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    # reverse cyclic string.\n    groups = s.split(\"00\")\n    # reverse each group.\n    groups = [\"\".join(reversed(group)) for group in groups]\n    # merge groups and return.\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(2) == 3, 'incorrect second number'"
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    l = l.copy()\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] == 0:\n            continue\n        for j in range(i + 1, len(l)):\n            if l[j] == 0:\n                continue\n            for k in range(j + 1, len(l)):\n                if l[k] == 0:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    n_cars = n\n    cars = list(range(n_cars))\n    distance = 0\n    while cars:\n        distance += 1\n        cars_copy = cars[:]\n        for i in range(len(cars)):\n            cars[i] = (cars[i] + 1) % n_cars\n            if cars[i] == cars_copy[i]:\n                return distance\n    return distance\n",
        "test": "assert     car_race_collision(1) == 1"
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    n = len(l)\n    for i in range(n):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, -4]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    res = \"\"\n    while x > 0:\n        x, rem = divmod(x, base)\n        res += str(rem)\n    return res[::-1]\n",
        "test": "assert     change_base(8, 16) == \"8\""
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(1,1) == 0.5"
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    n = len(l)\n    return sorted(l)[n//2]",
        "test": "assert     median([1, 2, 3]) == 2, \"Wrong result for median.\""
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    if not text:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "test": "assert     is_palindrome(\"\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(0, 1) == 0"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"The quick brown fox jumps over the lazy dog.\")) == \"the quick brown fox jumps over the lazy dog.\""
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    new_text = \"\"\n    for letter in text:\n        if letter.lower() not in 'aeiou':\n            new_text += letter\n    return new_text\n",
        "test": "assert remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert not below_threshold([1, 2, 3, 4, 5], 2)"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return x + y\n",
        "test": "assert     add(3, 5) == 8"
    },
    {
        "number": 54,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "test": "assert     same_chars('hello', 'bye') == False, \"Hello\""
    },
    {
        "number": 55,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return len(brackets) % 2 == 1\n",
        "test": "assert     correct_bracketing(\"<]\") is False"
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "test": "assert     monotonic([0, 1, 3, 4, 5])"
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    \n    return sorted(list(set(l1) & set(l2)))\n",
        "test": "assert     common([1,2,3], [2,3]) == [2,3], \"Wrong!\""
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n        return n\n",
        "test": "assert     largest_prime_factor(8) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert         sum_to_n(10) == 55"
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    closing_brackets = []\n    opening_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            opening_brackets.append(bracket)\n        elif bracket == \")\":\n            if len(opening_brackets) == 0:\n                return False\n            closing_brackets.append(bracket)\n            opening_brackets.pop()\n    if len(opening_brackets)!= 0:\n        return False\n    for bracket in closing_brackets:\n        if bracket!= \")\":\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"()\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    new = []\n    for i in range(1, len(xs)):\n        new.append(xs[i] * i)\n    return new\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(FIX) == 5"
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n",
        "test": "assert 1 == 1"
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    # Solution - 1\n    return sum([ord(i) for i in s.upper() if ord(i) <= 57])\n    # Solution - 2\n    # return sum([ord(i) for i in s.upper() if ord(i) <= 90])\n",
        "test": "assert digitSum(\"123\") == \"3\", \"The test output is not as expected\""
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    return n-s.count(\"o\")-s.count(\"a\")\n",
        "test": "assert     fruit_distribution('10',1) == 1, 'Example 1.1'"
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    n = 0\n    for i in lst:\n        if i > 0:\n            if n < i:\n                n = i\n    if n!= 0:\n        return n\n    else:\n        return -1\n    \n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return lst",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    side_1, side_2, side_3 = sorted([a, b, c])\n    if (side_1 + side_2) > side_3:\n        return round((side_1*side_2)/2, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(0, 0, 0) == -1, \"Should be -1\""
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    while q:\n        if len(q) > 1:\n            if q == sorted(q, reverse=True):\n                if sum(q) <= w:\n                    return True\n            else:\n                return False\n        else:\n            return False\n",
        "test": "assert         will_it_fly([1,2,3,4,5], 5) == False, \"The second test fails\""
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    arr.sort()\n    arr = arr[::-1]\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return i + 1\n    return 0\n",
        "test": "assert     smallest_change([1,2,2,3]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if lst1 == lst2:\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert     total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    \n    if (a == 0) or (a == 1):\n        return False\n    \n    if (a % 3 == 0) or (a % 5 == 0):\n        return False\n    \n    if (a % 3 == 0) or (a % 5 == 0):\n        return True\n    \n    else:\n        return False\n",
        "test": "assert     is_multiply_prime(1) == False, \"Test 2: is_multiply_prime(1) failed\""
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return x**n==n*x\n",
        "test": "assert     is_simple_power(9, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    cubes = { 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841, 30: 896, 31: 962, 32: 1024, 33: 1136, 34: 1281, 35: 1338, 36: 1404, 37: 1461, 38: 1616, 39: 1706, 40: 1809, 41: 1935, 42: 2048, 43: 2176, 44: 2304, 45: 2520, 46: 2688, 47: 2856, 48: 3136, 49: 3697, 50: 3840, 51: 3932, 52: 4100, 53: 4279, 54: 4563, 55: 4836, 56: 4916, 57: 5103, 58: 5308, 59: 5512, 60: 5658, 61: 5904, 62: 6039, 63: 6268, 64: 6463}\n    if a in cubes:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(1) == True, 'failed test 1'"
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "    if num == '':\n        return 0\n    num = num.upper()\n    res = ''\n    for i in range(2,len(num)):\n        s = num[i]\n        if s in 'ABCDEF':\n            if s not in res:\n                res += s\n    return len(res)\n",
        "test": "assert     hex_key('') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    if decimal == 0:\n        return \"db\"\n    elif decimal > 0:\n        return \"db\" + decimal_to_binary(decimal - 1)\n    elif decimal == -1:\n        return \"db\" + \"1\"\n",
        "test": "assert     decimal_to_binary(0) == 'db'"
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    # if the number of unique letters in the string is more than 3 return False\n    return len(set(s)) > 2 and len(s) >= 3\n",
        "test": "assert not is_happy('a')"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    for i in range(len(grades)):\n        while grades[i] < 4.0:\n            grades[i] += 0.1\n    grades.sort()\n    result = []\n    for i in grades:\n        if i >= 3.7:\n            result.append('A+')\n        elif i >= 3.3:\n            result.append('A')\n        elif i >= 3.0:\n            result.append('A-')\n        elif i >= 2.7:\n            result.append('B+')\n        elif i >= 2.3:\n            result.append('B')\n        elif i >= 2.0:\n            result.append('B-')\n        elif i >= 1.7:\n            result.append('C+')\n        elif i >= 1.3:\n            result.append('C')\n        elif i >= 1.0:\n            result.append('C-')\n        elif i >= 0.7:\n            result.append('D+')\n        elif i >= 0.3:\n            result.append('D')\n        elif i >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n",
        "test": "assert     numerical_letter_grade([1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]) == ['A+','A+','A+','A+','A+','A+','A+','A+','A+','A+','A+','A+','A+'], \"WRONG!\""
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return True if len(string) == 2 and string[0] == string[1] else False\n",
        "test": "assert     prime_length(\"\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    # Iterate through the digits.\n    # If digit is 1, return the sum of that number + 1.\n    # Else, return 0.\n    # If the end is 0, the number ends with 0, which is not a 1.\n    # If the start is 0, the number starts with 0, which is not a 1.\n    return sum(i + 1 if i % 10 == 1 else 0 for i in range(10))\n",
        "test": "assert     starts_one_ends(3) == 2"
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    return ''.join(map(str, range(1, N + 1)))\n",
        "test": "assert     solve(1) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    even = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n    return even\n    \n    \n",
        "test": "assert add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return''.join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle('')     == ''"
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    # Declare list of lists to return\n    ret = []\n    # Declare dictionary to hold row numbers as keys and column numbers as values\n    row_dict = {}\n    # Iterate through each row\n    for row, row_values in enumerate(lst):\n        # Iterate through each column\n        for column, column_value in enumerate(row_values):\n            # Store (row, column) pair into dictionary\n            row_dict[(row, column)] = column_value\n    # Get sorted dictionary with row and column as keys\n    sorted_dict = sorted(row_dict.items(), key=lambda item: item[0], reverse=False)\n    # Iterate through sorted_dict\n    for row_val in sorted_dict:\n        # If current (row, column) pair is equal to x\n        if row_val[1] == x:\n            # Return that (row, column) pair\n            ret.append((row_val[0][0], row_val[0][1]))\n    # Return ret\n    return ret\n",
        "test": "assert     get_row([[0], [1], [2], [3]], 0) == [(0, 0)]"
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([1,2,3,4,5]) ==    [1,2,3,4,5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    list_str = list(s)\n    for i in range(len(list_str)):\n        if list_str[i] == 'a':\n            list_str[i] = 'e'\n        if list_str[i] == 'e':\n            list_str[i] = 'a'\n        if list_str[i] == 'i':\n            list_str[i] = 'o'\n        if list_str[i] == 'o':\n            list_str[i] = 'i'\n        if list_str[i] == 'u':\n            list_str[i] = 'i'\n    return ''.join(list_str)\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "    if len(lst) == 0: return None\n    if len(lst) == 1: return lst[0]\n    if len(lst) == 2: return min(lst)\n    \n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n        \ndef longest_path(matrix):\n    \"\"\"\n    Given a matrix representing a graph, return the length of the longest path in the graph.\n    A path is a sequence of adjacent nodes in a graph, where there is exactly one node for each edge in the graph.\n    If a path exists from vertex 0 to vertex v, then the path starts with 0 and ends with v.\n    \n    longest_path([[0, 1, 0],\n                  [0, 0, 1],\n                  [1, 1, 0]]) == 4\n    longest_path([[0, 0, 0, 1, 1, 0],\n                  [0, 0, 1, 1, 1, 0],\n                  [0, 0, 0, 0, 0, 0],\n                  [1, 1, 1, 1, 1, 1],\n                  [0, 0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0, 0]]) == 10\n    longest_path([]) == 0\n    \"\"\"\n    if len(matrix) == 0: return 0\n    \n    if len(matrix[0]) == 0: return 0\n    \n    if len(matrix) == 1 and len(matrix[0]) == 1:\n        return 1 if matrix[0][0] == 1 else 0\n    \n    graph = [[0 for j in range(len(matrix[0]))] for i in range(len(matrix))]\n    \n    # for the first row\n    for i in range(len(matrix[0])):\n        if matrix[0][i] == 1:\n            graph[0][i] = 1\n            \n    # for the first column\n    for i in range(len(matrix)):\n        if matrix[i][0] == 1:\n            graph[i][0] = 1\n            \n    # for all the rest of the 2D matrix\n    for i in range(1, len(matrix)):\n        for j in range(1, len(matrix[0])):\n            if matrix[i][j] == 1:\n                graph[i][j] = graph[i-1][j] + 1\n                \n    # taking the max\n    max_path = max(graph)\n    \n    return max_path\n",
        "test": "assert next_smallest([1,2,3,4]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    words = S.split()\n    for word in words:\n        if word == \"I\":\n            return True\n    return False\n    \n",
        "test": "assert     is_bored('I') == 1, 'A sentence that starts with I should return 1'"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return(type(x) == int and type(y) == int and type(z) == int and x+y+z == y+z+x and x == y and x == z)\n",
        "test": "assert any_int(2,3,4) == False, \"2+3=5, 4+4=9, but 4!=9\""
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    # TODO: Write your code here\n    message = message.lower()\n    for i in range(0,len(message)):\n        if message[i] == \"a\" or message[i] == \"e\" or message[i] == \"i\" or message[i] == \"o\" or message[i] == \"u\":\n            message = message[:i] + message[i+2] + message[i+1:]\n    return message\n",
        "test": "assert encode('') == '', \"Test 1: empty string\""
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    lst = [2,7,12,1,21,2,3]\n    res = 0\n    for i in lst:\n        if i!= 0 and i!= 1:\n            while i > 0:\n                if i % 10 == 0:\n                    i /= 10\n                else:\n                    break\n            res += i\n    return res\n",
        "test": "assert     skjkasdkd([7, 5, 7]) == 2"
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if len(dict) == 0:\n        return False\n    for key, val in dict.items():\n        if type(key) is not str:\n            return False\n        if type(val) is not str:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, \"Empty dictionary\""
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "    \n    if n == 0:\n        return []\n    \n    primes = []\n    for i in range(2, n):\n        if all(i%j!= 0 for j in primes):\n            primes.append(i)\n            \n    return primes\n",
        "test": "assert     count_up_to(8) == [2,3,5,7]"
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    return 0\n",
        "test": "assert     multiply(0, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert     count_upper('q') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    num = float(value)\n    if num - int(num) == 0:\n        return int(num)\n    else:\n        return int(num) + 1\n",
        "test": "assert     closest_integer(\"15\")         == 15"
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 1)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 1) + make_a_pile(n - 1)\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    \n    return s.split(', ')",
        "test": "assert     words_string(\"The\") == [\"The\"], \"Wrong words\""
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    res = -1\n    if x <= y:\n        return res\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                res = i\n        return res\n",
        "test": "assert     choose_num(1, 5) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(f\"0b{int((n + m)/2):08b}\", 2)\n",
        "test": "assert     rounded_avg(2, 3) == 2"
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    x_set = set(x)\n    return sorted(list(x_set))\n",
        "test": "assert     unique_digits([1, 1, 2, 3, 4, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    arr.sort()\n    arr.reverse()\n    dict_str = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    \n    return [dict_str[i] for i in arr]\n",
        "test": "assert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])    ==     [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]"
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    a = list(range(1, n+1))\n    for i in range(1, n):\n        if i % 2 == 1:\n            a[i] = a[i] * i\n    return a\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    # Using math.ceil() for integer rounding, which returns the ceiling of a number.\n    # pylint: disable=invalid-name\n    # https://docs.python.org/3/library/math.html#math.ceil\n    return len(list(filter(lambda x: x % 2 == 0, list(range(1, n + 1))))), len(list(filter(lambda x: x % 2!= 0, list(range(1, n + 1))))),\n",
        "test": "assert     even_odd_palindrome(1)    == (0, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    count = 0\n    for i in arr:\n        if abs(i) < 10:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    \n    if arr == None or len(arr) == 0:\n        return True\n    \n    # Sort the array.\n    arr.sort()\n    \n    # Check if leftmost element is greater than rightmost element.\n    if arr[0] > arr[-1]:\n        return False\n    \n    # Decrease right most element by 1.\n    arr[-1] -= 1\n    \n    # Check if there are any elements in array.\n    # If not, then sorted.\n    if len(arr) == 1:\n        return True\n    \n    # Check if sorted.\n    if arr[0] >= arr[1]:\n        return False\n    \n    # Compare with leftmost element to find if\n    # it can be compared with all other element.\n    # If true, then it will be sorted.\n    # If not, then return False.\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([1,2,3]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    even_num = False\n    for i in range(len(lst1)):\n        if lst1[i]%2!= 0 and even_num == False:\n            even_num = True\n        if lst1[i]%2!= 0 and even_num == True:\n            return \"NO\"\n        if lst1[i]%2 == 0 and even_num == False:\n            even_num = True\n        if lst1[i]%2 == 0 and even_num == True:\n            even_num = False\n        if even_num == True:\n            even_num = False\n        if even_num == False and i == (len(lst1)-1):\n            return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5,6,7,8,9], [9,8,7,6,5,4,3,2,1]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n",
        "test": "assert     histogram('a') == {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    if len(s)<len(c):\n        s,c=c,s\n    i=0\n    while i<len(s):\n        if s[i] not in c:\n            return (s[i:],True)\n        i+=1\n    return (s[i:],False)\n",
        "test": "assert     reverse_delete(\"word\",\"r\") == (\"word\", True)"
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    odds = []\n    for i in lst:\n        odd_count_str = 0\n        for j in range(len(i)):\n            if int(i[j]) % 2 == 1:\n                odd_count_str += 1\n        odds.append(odd_count_str)\n    return [\"the number of odd elements \" + str(odds[i]) + \" of the string \" + str(i) +\n     \" of the input.\" for i in range(len(lst))]\n",
        "test": "assert odd_count([]) == [], \"test failed\""
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    s = 0\n    res = float('inf')\n    for i in range(n):\n        s += nums[i]\n        res = min(res, s)\n        if s < 0:\n            s = 0\n    return res\n",
        "test": "assert minSubArraySum([1,1,1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                count += 1\n                grid[i][j] = 2\n                break\n    bucket_capacity = capacity\n    while count > 0:\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 2:\n                    if bucket_capacity > 0:\n                        if grid[i][j] == 1:\n                            count += 1\n                            grid[i][j] = 1\n                            bucket_capacity -= 1\n                    else:\n                        if grid[i][j] == 1:\n                            count += 1\n                            grid[i][j] = 0\n                            bucket_capacity = bucket_capacity\n    return count\n",
        "test": "assert     max_fill([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 0) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return sorted(arr, key=lambda x: x if x > 0 else -x)",
        "test": "assert     sort_array([0,1,1,1,1,1,0]) == [0,0,1,1,1,1,1]"
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    out = []\n    tmp = \"\"\n    for i in s:\n        if i.isalpha():\n            tmp += i.lower()\n        elif i == \" \":\n            if len(tmp) == n:\n                out.append(tmp)\n            tmp = \"\"\n    return out\n",
        "test": "assert     select_words(\"apples\", 0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    #your code here\n    \n    return \"\"\n    \n",
        "test": "assert     get_closest_vowel(\"hello\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    def rec(S,count):\n        if len(S) == 2:\n            if S[0] == ')' and S[1] == '(':\n                return count\n            elif S[0] == '(' and S[1] == ')':\n                return count\n            return None\n        if len(S) == 0:\n            return None\n        if S[0] == '(' and S[1] == ')':\n            return rec(S[2:],count+1)\n        if S[0] == ')' and S[1] == '(':\n            return rec(S[2:],count-1)\n        if S[0] == ')' and S[1] == '(':\n            return rec(S[2:],count)\n    res = rec(lst[0],0)\n    return 'Yes' if res == None else 'No'\n",
        "test": "assert     match_parens(('(())()',)) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    # arr = sorted(arr)\n    # return arr[:k]\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5], 1) == [5], 'Wrong result'"
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    return sum([int(i % 2!= 0 and i!= 0) for i in lst])\n",
        "test": "assert     solution([1,2,3]) == 2, \"solution([1,2,3]) is wrong\""
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    n = len(arr)\n    j = 0\n    for i in range(k):\n        while j < n and arr[j] > 0:\n            arr[i] -= 1\n            j += 1\n    return sum(arr[:k])\n",
        "test": "assert     add_elements([0, 0, 0, 0, 0], 1) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    return list(range(1, n+1))\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    \n    if date == '':\n        return False\n    days = int(date[-2:])\n    if days < 1 or days > 31:\n        return False\n    months = {1: 31, 3: 30, 5: 31, 7: 30, 8: 31, 10: 31, 12: 31}\n    if months[int(date[0])] < days <= 31:\n        return False\n    if months[int(date[0])] > days <= 30:\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    return True\n",
        "test": "assert     valid_date('1-10-2000') == False, 'Failed: 1-10-2000'"
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return txt.split()\n    \n",
        "test": "assert     split_words('hello') == ['hello']"
    },
    {
        "number": 126,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    sorted_lst = []\n    for i in lst:\n        if i not in sorted_lst:\n            sorted_lst.append(i)\n        else:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"Your function does not work!\""
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    assert (isinstance(interval1, tuple) and isinstance(interval2, tuple)) and len(interval1) == 2 and len(interval2) == 2 and interval1[0] <= interval1[1] and interval2[0] <= interval2[1]\n    \n    # helper function for prime number checker\n    def getPrimeFactors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n / i\n        if n > 2:\n            factors.append(n)\n        return factors\n    \n    # check if the two intervals intersect, if not return \"NO\"\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"NO\"\n    \n    # get prime numbers\n    p1 = getPrimeFactors(interval1[1] - interval1[0] + 1)\n    p2 = getPrimeFactors(interval2[1] - interval2[0] + 1)\n    \n    # check if both prime numbers are the same\n    if p1 == p2:\n        return \"YES\"\n    \n    # check if p1 is a subset of p2\n    else:\n        for f in p1:\n            if f not in p2:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert     intersection((1, 10), (20, 30)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    # check for empty array\n    if not arr:\n        return None\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    if k >= rows * cols or not grid:\n        return []\n    \n    if k == 1:\n        return min(grid)\n    \n    min_dist = min(rows * cols - 1, k)\n    \n    def dfs(grid, rows, cols, i, j, prev, curr_min, visited):\n        if i < 0 or i >= rows or j < 0 or j >= cols:\n            return False\n        \n        if grid[i][j] > prev:\n            return False\n        \n        if visited[i][j] or grid[i][j] == prev:\n            return False\n        \n        visited[i][j] = True\n        \n        if curr_min > grid[i][j]:\n            curr_min = grid[i][j]\n            \n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(grid, rows, cols, i + di, j + dj, prev, curr_min, visited)\n            \n        visited[i][j] = False\n        \n        return True\n    \n    curr_min = 10**6\n    \n    visited = [[False] * cols for _ in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if dfs(grid, rows, cols, i, j, 0, curr_min, visited):\n                curr_min = min(curr_min, grid[i][j])\n                \n    return [curr_min]\n    \ndef minPathSum(grid):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    if n < 3:\n        return list(range(1, n + 1))\n    a = [1, 3]\n    b = a + a + a\n    for i in range(3, n + 1):\n        a = a + b + a\n        b = a + a + a\n    return a\n",
        "test": "assert     tri(0) == []"
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    return 0\n",
        "test": "assert     digits(2) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    string = string.replace(' ', '')\n    new_string = string\n    stack = []\n    if len(string) == 0 or len(string) == 1:\n        return False\n    else:\n        for i in range(len(string)):\n            if string[i] == '[':\n                stack.append('[')\n            elif string[i] == ']':\n                if stack!= [] and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n        if stack == []:\n            return True\n        else:\n            return False\n",
        "test": "assert not is_nested('[(')"
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    #return sum([(a**2) for a in lst])\n    lst_temp = lst\n    lst_temp = [a**2 for a in lst_temp]\n    return sum(lst_temp)\n    \n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    # Code Here\n    return True if txt[-1].isalpha() and txt.find(' ') == -1 else False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"hi hello my name is abc\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    # Get the first element\n    if len(arr) == 0:\n        return -1\n    first = arr[0]\n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # If the current element is larger than the previous element\n        if arr[i] >= first:\n            # Return the index of the element\n            return i\n    # If the array contains no duplicate elements and thus only\n    # contains elements from 1 to n-1, then -1 is the answer\n    return -1\n",
        "test": "assert     can_arrange([]), \"empty\""
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    if not lst:\n        return None, None\n    # Positive\n    pos = lst[0]\n    for i in lst:\n        if i > 0:\n            pos = i\n            break\n    # Negative\n    neg = lst[0]\n    for i in lst:\n        if i < 0:\n            neg = i\n            break\n    # Return\n    return (neg, pos)\n",
        "test": "assert     largest_smallest_integers([0]) == (0, 0)"
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return max(a,b) if a!=b else None\n",
        "test": "assert    compare_one(1.5, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    return n%2 == 0 and (n/2)%2 == 0 and ((n/2) + 1)%2 == 0 and ((n/2) + 2)%2 == 0\n",
        "test": "assert     is_equal_to_sum_even(13) == False, \"Error 2\""
    },
    {
        "number": 139,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    factorial = 1\n    for i in range(n):\n        factorial *= n-i\n    return factorial\n",
        "test": "assert     special_factorial(2) == 2"
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    text = text.replace(' ','_')\n    while (' 'in text):\n        text = text.replace('  ','_')\n    return text\n",
        "test": "assert     fix_spaces(\"Hey_There\") == \"Hey_There\""
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    if file_name == \"\":\n        return \"No\"\n    elif len(file_name) > 3 and file_name.find(\".\") == -1:\n        return \"No\"\n    elif file_name[0].isalpha() == False or file_name[0].isnumeric() == False:\n        return \"No\"\n    elif file_name[0].isalpha():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"ex\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dot\")!= -1:\n            return \"No\"\n    elif file_name[0].isdigit():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"dot\")!= -1 or file_name.find(\"exe\")!= -1:\n            return \"No\"\n    elif file_name[0].isupper():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"dot\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dll\")!= -1:\n            return \"No\"\n    return \"Yes\"\n",
        "test": "assert     file_name_check('12345.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            count += lst[i]*lst[i]\n        elif i % 4 == 0:\n            count += lst[i]*lst[i]\n    return count\n",
        "test": "assert sum_squares(None) == None, \"Expected None, got {}\".format(sum_squares(None))"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    \n    result = ''\n    for word in sentence.split():\n        result += word if len(result) == 0 or len(word) == len(result) else ''\n        result +=''\n    return result.strip()\n",
        "test": "assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"he i jumped\""
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    try:\n        x_n = (int(x), int(n))\n        return (x_n[0]/x_n[1]) == (int(x_n[0]/x_n[1])).is_integer()\n    except:\n        return False\n",
        "test": "assert     simplify(\"1/5\", \"2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    # print(nums)\n    return len([x for x in nums if x > 10 and ((x // 100) % 2 == 1)])\n",
        "test": "assert "
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    \n    a = [1] * n\n    count = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            k = n - i\n            if (a[i] + a[j] + a[k]) % 3 == 0:\n                count += 1\n    \n    return count\n",
        "test": "assert     get_max_triples(4) == 6"
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for p in planets:\n        if p == planet1:\n            planet1_orb = planets.index(planet1)\n        if p == planet2:\n            planet2_orb = planets.index(planet2)\n    if planet1_orb > planet2_orb:\n        return (planet2, planet1)\n    else:\n        return (planet1, planet2)\n    return ()",
        "test": "assert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")"
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    return sorted(lst)\n",
        "test": "assert     sorted_list_sum(['a', 'ab', 'abc', 'abcd']) == ['a', 'ab', 'abc', 'abcd']"
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    return x if n%x == 0 else y\n",
        "test": "assert x_or_y(2, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    total_sum = 0\n    for num in lst:\n        if num < 0 or type(num)!= int:\n            continue\n        else:\n            total_sum += num**2\n    return total_sum\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return(np.array([0]*len(guess)))\n",
        "test": "assert "
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    extensions.sort()\n    return class_name + extensions[0][1:]\n",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    if a in b:\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] == a:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('cat', 'cactt') == False"
    },
    {
        "number": 155,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        if num % 10 % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return even, odd\n",
        "test": "assert     even_odd_count(0) == (0, 0), \"Test case 2 Failed\""
    },
    {
        "number": 156,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if not (number > 0 and number <= 1000):\n        raise ValueError('number must be between 1 and 1000')\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C',\n                       90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX',\n                       5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for key, value in roman_numerals.items():\n        while number >= key:\n            result += value\n            number -= key\n    return result\n",
        "test": "assert int_to_mini_roman(1) == 'I'"
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    # Side lengths must be > 0 and < 100.\n    if (a < 0 or b < 0 or c < 0) or (a > 100 or b > 100 or c > 100):\n        return False\n    # 3 sides must be > 0 and < 100.\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # No vertex repeated.\n    if any(x == 0 for x in [a, b, c]):\n        return False\n    # Check that the three sides are the same length.\n    if a == b and b == c:\n        return True\n    # Check that the angles are exactly 90 degrees.\n    if a == b and b == c:\n        return True\n    # Check that the sides are as nearly as possible and that the three sides\n    # are not equal to each other.\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    dictionary = {}\n    for i in words:\n        for j in i:\n            if j in dictionary:\n                dictionary[j] += 1\n            else:\n                dictionary[j] = 1\n    return sorted(list(dictionary.keys()))[0]\n",
        "test": "assert     find_max([\"hello\", \"world\", \"a\", \"b\", \"c\", \"b\"]) == \"c\""
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    # make sure there are enough remaining carrots to eat\n    if remaining < need:\n        return [need, remaining]\n    else:\n        # if there are enough remaining, subtract number and number + (1/2) to get the number of carrots left\n        return[number+((need+remaining)//2), (need+remaining)%2]\n",
        "test": "assert     eat(1, 1, 1) == [2, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    res = 0\n    for i in range(len(operator)):\n        if i == 0:\n            res = eval(str(operand[i]) + operator[i] + str(operand[i + 1]))\n        elif i == 1:\n            res = eval(str(operand[i - 1]) + operator[i] + str(operand[i]))\n        else:\n            res = eval(str(operand[i - 1]) + operator[i] + str(operand[i]))\n    return res\n",
        "test": "assert    do_algebra([\"+\"], [\"1\", \"2\"]) == 3"
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    if not s: return s\n    return s[::-1] if all(c.isalpha() for c in s) else s[::-1].upper()\n",
        "test": "assert solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None, \"Expected None\""
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    evens = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            evens.append(i)\n    return evens\n",
        "test": "assert     generate_integers(1, 10) == list(range(2,11,2))"
    }
]