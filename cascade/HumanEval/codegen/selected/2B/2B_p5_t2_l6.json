[
    {
        "number": 0,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    length = len(numbers)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if (numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1.1,1.2,1.3,1.4,1.5], 0.05)"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    paren_string = ''.join(paren_string.split())\n    all_parens = []\n    curr_group = ''\n    paren_strings = []\n    for char in paren_string:\n        if char == '(':\n            if curr_group:\n                paren_strings.append(curr_group)\n                curr_group = ''\n            curr_group += char\n        elif char == ')':\n            if curr_group:\n                paren_strings.append(curr_group)\n                curr_group = ''\n            curr_group += char\n        else:\n            curr_group += char\n    if curr_group:\n        paren_strings.append(curr_group)\n    return paren_strings\n",
        "test": "assert     separate_paren_groups(\"{a,{b,c}}\") == [\"{a,{b,c}}\"], \"Second\""
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # Separate into integer and fraction\n    integer, fraction = divmod(number, 1)\n    return integer\n",
        "test": "assert     truncate_number(2.0) == 2"
    },
    {
        "number": 3,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if operations[0] <= 0:\n        return True\n    for i in range(1, len(operations)):\n        if operations[i] > 0:\n            return False\n    return False\n",
        "test": "assert     below_zero(    [-3, 1, 2, -2, 2, -3]    ) == True"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    sum_of_squares = 0\n    for num in numbers:\n        sum_of_squares += (num - mean_of_numbers(numbers)) ** 2\n    return sum_of_squares / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1,2,3,4,5]) == 1.25, \\"
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if not numbers:\n        return []\n    n = len(numbers)\n    if n == 1:\n        return [numbers[0], delimeter]\n    else:\n        return [delimeter] * (n - 1) + numbers + [delimeter]\n",
        "test": "assert     intersperse([], 0) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # TODO: replace this with your solution\n    nested_lst = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nested_lst.append(i)\n    return nested_lst\n",
        "test": "assert parse_nested_parens('(()()') == 2"
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    filtered_list = []\n    for string in strings:\n        if substring.lower() in string.lower():\n            filtered_list.append(string)\n    return filtered_list\n",
        "test": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"foo\") == []"
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if not is_palindrome(string):\n        return None\n    string_len = len(string)\n    if string_len == 1:\n        return string\n",
        "test": "assert     make_palindrome(\"a\") == \"a\""
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # return ''.join(chr(int(x, 2) ^ int(y, 2)) for x, y in zip(a, b))\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "test": "assert         string_xor(\"\", \"\") == \"\""
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(2,2) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if not string:\n        return []\n",
        "test": "assert     all_prefixes(\"\") == []"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return''.join(str(i) for i in range(n))\n",
        "test": "assert "
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return [len(music_string) - len(music_string.replace('o', '').replace('|', '')) for music_string in music_string.split('.')]\n",
        "test": "assert     parse_music(\"'o|'\") == [2]"
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"\", \"1\")     == 0"
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return \" \".join(sorted(numbers.split(), key=lambda x: (x == 'zero', x == 'one', x == 'two', x == 'three', x == 'four', x == 'five', x =='six', x =='seven', x == 'eight', x == 'nine')))\n",
        "test": "assert     sort_numbers('zero') == 'zero'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"Invalid input\")\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    if len(numbers) == 2:\n        return min(numbers), max(numbers)\n",
        "test": "assert     find_closest_elements([4, 5, 6, 7, 8, 10, 11]) == (7, 10)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"Length of list cannot be 0\")\n    if len(numbers) == 1:\n        return numbers\n    return [x / numbers[0] for x in numbers]\n",
        "test": "assert     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1"
    },
    {
        "number": 22,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert "
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0, \"Empty string should return 0\""
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    divisor = 1\n    while n > divisor:\n        divisor += 1\n    return divisor\n",
        "test": "assert largest_divisor(3) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    n = len(numbers)\n    s = set(numbers)\n    return list(s)\n",
        "test": "assert     remove_duplicates([1, 2, 1, 3, 4]) == [1, 2, 3, 4], \"Wrong!\""
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('abc') == 'ABC'"
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\", \"test4\"], \"test\") == [\"test\", \"test1\", \"test2\", \"test3\", \"test4\"]"
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1,2,3,4,5,6,7,8,9]"
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if n < 1:\n        return False\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(7) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    assert len(xs) % 2 == 0\n    xs = xs[:-1] # trim zero coefficient\n    negs = []\n    for i, coeff in enumerate(xs):\n        if coeff < 0:\n            negs.append(i)\n    if len(negs) == 0:\n        return xs[0]\n    elif len(negs) == 1:\n        return xs[negs[0]] - xs[negs[0] - 1] / xs[negs[0]]\n    elif len(negs) == 2:\n        return (xs[negs[1]] - xs[negs[0]]) / (xs[negs[1]] - xs[negs[0] - 1])\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    l2 = []\n    i = 0\n    while i < len(l):\n        if l[i] % 3!= 0:\n            l2.append(l[i])\n        else:\n            l2.extend([l[i],l[i+1],l[i+2]])\n        i += 3\n    return l2\n",
        "test": "assert "
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([0, 1, 1, 1, 1, 1, 2, 2, 2, 2]) == [0, 1, 2]"
    },
    {
        "number": 35,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if l == []:\n        return None\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_element([1,3,2,4]) == 4"
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            counter += 1\n    return counter\n",
        "test": "assert     fizz_buzz(5)     == 0, \"The number of times the digit 7 appears in integers less than 5 which are divisible by 11 or 13 is 0\""
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    even_indices = []\n    odd_indices = []\n    for i, val in enumerate(l):\n        if i%2 == 0:\n            even_indices.append(val)\n        else:\n            odd_indices.append(val)\n    even_indices.sort()\n    odd_indices.sort()\n    l = even_indices + odd_indices\n    return l\n",
        "test": "assert     sort_even([1,2,3,4,5,6,7,8]) == [1,3,5,7,2,4,6,8]"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group.\n    groups = [group[::-1] for group in groups]\n    # cycle elements in each group.\n    groups = [group + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert "
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    fib_n = fib_numbers[n - 1]\n    prime_n = is_prime(fib_n)\n    return fib_n, prime_n\n",
        "test": "assert "
    },
    {
        "number": 40,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([3, 1, -2, 1, -1, 2, 1, 1, -1, 1, -1]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return 0",
        "test": "assert     car_race_collision(1) == 0, 'Testing #1:'+ str(car_race_collision(1))"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    #it takes a list as an input. it returns True if there are two distinct\n    #elements in the list that sum to zero, and False otherwise.\n",
        "test": "assert pairs_sum_to_zero([1, -2, 3, 5])"
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res\n",
        "test": "assert change_base(11, 16) == \"0xE\""
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "    return a * h *.5\n",
        "test": "assert     triangle_area(3, 4) == 6"
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # return (fib4(n-1) + fib4(n-2)) if n > 1 else 0\n    a, b, c = 0, 1, 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n    return c\n",
        "test": "assert     fib4(1) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    #create list\n    list_sorted = sorted(l)\n    len_list = len(list_sorted)\n    index = len_list//2\n    if len_list % 2 == 1:\n        return list_sorted[index]\n    else:\n        return (list_sorted[index-1] + list_sorted[index])/2\n",
        "test": "assert median([1,2,3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    text = text.lower()\n    for i in range(len(text)//2):\n        if text[i]!= text[len(text)-i-1]:\n            return False\n    return True\n",
        "test": "assert     is_palindrome('racecar') == True"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return (n % p)\n",
        "test": "assert modp(10, 17) == 10"
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if text.startswith(vowel):\n            return text[1:]\n    return text\n",
        "test": "assert     remove_vowels(\"\")     == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "test": "assert "
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "test": "assert     same_chars('hello', 'hey') == False"
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1)    == 1"
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    for i in range(len(brackets)):\n        if brackets[i]!= \">\":\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"(\") == False, \"wrong\""
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return all(x > y for x, y in zip(l, l[1:])) or all(x < y for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([10, 9, 8, 7, 6, 5])"
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([0, 1, 2], [0, 1]) == [0, 1], \"Wrong answer\""
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    largest_prime = 2\n    if n % 2 == 0:\n        n /= 2\n        if n % largest_prime == 0:\n            largest_prime = largest_prime * 2\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            largest_prime = i\n            break\n    return largest_prime\n",
        "test": "assert     largest_prime_factor(5) == 5"
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    \n    open_brackets = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(())\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    xs_derivative = []\n    xs_derivative.append(xs[1])\n    xs_derivative.append(xs[1]*xs[0])\n    for i in range(2, len(xs)):\n        xs_derivative.append(xs[i]*(i + 1)*xs_derivative[-1])\n    return xs_derivative\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    num = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y':\n            num += 1\n    return num\n",
        "test": "assert     vowels_count('lemon') == 5"
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n",
        "test": "assert     circular_shift(5, 1) == '5'"
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(s) == 0:\n        return 0\n    else:\n        sum = 0\n        for i in s:\n            if ord(i) >= ord('A') and ord(i) <= ord('Z'):\n                sum += ord(i) - ord('A') + 1\n        return sum\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return n-(s.count('o')+s.count('a'))\n    \nprint fruit_distribution(\"5 apples and 6 oranges\",19)\nprint fruit_distribution(\"0 apples and 1 oranges\",3)\nprint fruit_distribution(\"2 apples and 3 oranges\",100)\nprint fruit_distribution(\"100 apples and 1 oranges\",120)\n",
        "test": "assert "
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    sorted_list = sorted(arr)\n    if len(sorted_list) == 0:\n        return []\n    return [sorted_list[0], arr.index(sorted_list[0])]\n",
        "test": "assert     pluck([2, 6, 3, 2]) == [2, 0]"
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    for i in lst:\n        if i >= 0:\n            if i == max(lst):\n                if i >= max(lst) * (lst.count(i) / len(lst)):\n                    return i\n    return -1\n",
        "test": "assert     search([1,3,3])     ==     3"
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if not lst:\n        return []\n    minimum = min(lst)\n    # print('minimum', minimum)\n    # print('max(lst)', max(lst))\n    for i in range(minimum, max(lst)):\n        for j in range(len(lst)):\n            if lst[j] == i:\n                lst[j] = 0\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            lst[i] = 1\n    return lst\n",
        "test": "assert     strange_sort_list([3, 2, 4, 1]) == [1, 2, 3, 4], \"The result is not correct\""
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    try:\n        assert a+b>c and b+c>a and a+c>b\n        return (a*b)/2.0\n    except AssertionError:\n        return -1\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     triangle_area(2, 1, 2) == 1, \"Wrong answer\""
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return q[0]==q[-1] and sum(q)<=w\n",
        "test": "assert "
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # This solution is pretty intuitive and doesn't really use any math. I'm not sure I got the algorithm right.\n    # I should've gotten this one up first.\n    \n    count = 0\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            continue\n        elif arr[i] == arr[i + 1]:\n            continue\n        else:\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    arr1 = [1,2,3,5,4,7,9,6]\n    arr2 = [1, 2, 3, 4, 3, 2, 2]\n    arr3 = [1, 2, 3, 2, 1]\n    print(smallest_change(arr1))\n    print(smallest_change(arr2))\n    print(smallest_change(arr3))",
        "test": "assert "
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert total_match([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    multiprime_array = [2,3,5]\n    if a % 2 == 0:\n        return False\n    for mprime in multiprime_array:\n        if mprime*a == a:\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(9) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return x**n == n*x\n",
        "test": "assert     is_simple_power(7, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    return a**3 == a\n",
        "test": "assert not iscube(4)"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    num = num.upper()\n    primes = {\"2\", \"3\", \"5\", \"7\", \"11\"}\n    for d in num:\n        if d in primes:\n            primes.remove(d)\n    return len(primes)\n",
        "test": "assert "
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert     decimal_to_binary(2) == '10'"
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return s.count(s[0]) == len(s) and s[0] not in s[1:]\n",
        "test": "assert is_happy(\"yabzyx\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # your code goes here\n    n = grades\n    if n == [] or n == None:\n        return []\n    else:\n        return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n",
        "test": "assert "
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_length(\"hello\") == True"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    one_count = 0\n    for i in range(1,n+1):\n        if '1' in str(i):\n            one_count += 1\n    return one_count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    binary_string = bin(N).replace(\"0b\", \"\")\n    return int(binary_string)\n",
        "test": "assert "
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    even_list = []\n    for i in range(0, len(lst), 2):\n        even_list.append(lst[i])\n    return sum(even_list)\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    shuffle = \"\".join(s.split())\n    shuffle = ''.join(sorted(shuffle))\n    return shuffle\n",
        "test": "assert     anti_shuffle(\"hello\") == \"ehllo\""
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    result = []\n    for row in lst:\n        for idx, elem in enumerate(row):\n            if elem == x:\n                result.append((idx, idx))\n",
        "test": "assert not get_row([[1],[2],[]], 2) == [], \"Given lst, x = 2, but no result.\""
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # Approach 1: Linear\n    # Time: O(N^2)\n    # Space: O(N)\n",
        "test": "assert     sort_array([3,1,2]) == None"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return s.lower().replace(\"a\", \"z\").replace(\"e\", \"z\").replace(\"i\", \"y\").replace(\"o\", \"w\").replace(\"u\", \"x\")\n",
        "test": "assert encrypt(encrypt) == encrypt"
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    \n    # write your code here\n    if not lst:\n        return None\n    \n    # next largest value\n    if len(lst) == 1:\n        return lst[0]\n    \n    # get the 2nd smallest val\n    lst = sorted(lst)\n    return lst[1]\n",
        "test": "assert     next_smallest([1,2,3,4,5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return S.count(\"I\")\n",
        "test": "assert     is_bored('I.') == 1"
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return x + y == z and isinstance(x,int) and isinstance(y,int) and isinstance(z,int)\n",
        "test": "assert     any_int(0, 0, 1) == False, \"Error. Please, try again.\""
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    message = message.upper()\n    return \"\".join([f\"{letter}\" if letter in ['a','e','i','o','u'] else f\"{letter.lower()}\"\n    for letter in message])\n",
        "test": "assert     encode('') == ''"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    \n    int_list = lst\n    int_list = list(map(int, int_list))\n    \n    max_prime_value = 0\n    while True:\n        for i in range(len(int_list)):\n            if (int_list[i] >= 0) and (int_list[i] < 100) and (prime_num(int_list[i])) :\n                max_prime_value = max_prime_value + int_list[i]\n        if max_prime_value == 0:\n            break\n        else:\n            max_prime_value = 0\n    \n    return max_prime_value\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for k in dict:\n            if type(k)!= str or type(dict[k])!= str:\n                return False\n            elif k.isupper() or k.islower():\n                continue\n            else:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({}) is False, \"Empty dictionary.\""
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    prime_numbers = []\n    for i in range(n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert     count_up_to(10) == [2, 3, 5, 7]"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    multiplied = a * b\n    return multiplied // 10\n",
        "test": "assert "
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    i = 0\n    count = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 2\n    return count\n",
        "test": "assert     count_upper('Z') == 1"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # take a number as an input\n    # convert it to a string and make it all lower case\n    # split the string by using. as a decimal separator\n    # take the integer part of the string\n    # cast the integer part to an int, so that we can compare it\n    # to the numbers that are in the list of values\n    # if they are equal, return them in the list\n    # otherwise, return the smaller value\n    numbers = ['zero','one','two','three','four','five','six','seven','eight','nine','ten']\n    new_num = int(value)\n    new_num = str(new_num)\n    new_num = new_num.split('.')\n    new_num = int(new_num[0])\n    new_num = str(new_num)\n    new_num = new_num.lower()\n    new_num = int(new_num)\n    \n    # returns the closest integer from two integers\n    def closest_integer_0(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_1(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_2(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n    \n    # returns the closest integer from two integers\n    def closest_integer_3(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n    \n    # returns the closest integer from two integers\n    def closest_integer_4(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_5(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_6(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n    \n    # returns the closest integer from two integers\n    def closest_integer_7(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n    \n    # returns the closest integer from two integer",
        "test": "assert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return [0]\n    elif n % 2 == 0:\n        return make_a_pile(n-2) + [n*2]\n    else:\n        return make_a_pile(n-1) + [n*2+1]\n",
        "test": "assert     make_a_pile(0) == [0]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return s.split(', ')\n    \nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n",
        "test": "assert words_string('hello') == ['hello']"
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    elif x > y:\n        return -1\n    elif x < y:\n        return -1\n    else:\n        return -1\n",
        "test": "assert choose_num(2, 3) == 2"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if n > m:\n        return -1\n    if n < m:\n        return 0\n    n = int(n)\n    m = int(m)\n    avg = (n + m) / 2\n    return bin(int(avg)).count(\"1\")\n",
        "test": "assert     rounded_avg(1, 1) == 1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # edge case: list is empty\n    if len(x) == 0:\n        return []\n    \n    # base case: one item in list\n    if len(x) == 1:\n        return list(range(1, 10))\n",
        "test": "assert     unique_digits([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    L = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            L.append(i)\n        else:\n            L += range(1, i+1)\n    return L\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    ans = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                ans += 1\n            else:\n                ans += 2\n    return ans\n",
        "test": "assert     even_odd_palindrome(2) == (0, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    count = 0\n    for num in arr:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num = num // 10\n        if sum(digits) > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([-1,2,3]) == 2"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([1,3,2]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if lst2 == lst1:\n        return \"YES\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 1:\n                for j in range(len(lst2)):\n                    if lst2[j] % 2 == 0:\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n                        if lst1 == lst2:\n                            return \"YES\"\n                        else:\n                            lst1[i], lst2[j] = lst2[j], lst1[i]\n        return \"NO\"\n",
        "test": "assert     exchange([], []) == \"YES\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    if not test:\n        return {}\n    \n    hist = {}\n    \n    for letter in test:\n        if hist.get(letter):\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    \n    return hist\n",
        "test": "assert     histogram(\"g\") == {\"g\": 1}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    check = False\n    for i in range(len(c)):\n        if c[i] in s:\n            check = True\n            if s[:len(c)-i] == c:\n                s = s[:len(c)-i] + s[len(c):]\n                break\n            else:\n                s = s[:len(c)-i] + s[len(c):]\n                break\n    if check:\n        if s == s[::-1]:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        return (s,False)\n",
        "test": "assert "
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return \"the number of odd elements {}n the str{} of the {}nput.\".format(\n        len(lst), \"n\" if len(lst) == 1 else \"ns\",\n        \"n\" if len(lst) == 1 else \"ns\",)\n",
        "test": "assert odd_count([4, 6, 1, 8, 4, 2, 3]) == [\"5\", \"0\", \"4\", \"0\", \"1\", \"1\", \"0\"]"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    min_sum = min(nums)\n    for i in range(n):\n        min_sum = min(min_sum, nums[i])\n        for j in range(i+1, n):\n            min_sum = min(min_sum, nums[j] + nums[i])\n    return min_sum\n",
        "test": "assert "
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    ###\n",
        "test": "assert     max_fill(grid = [[0,0,0,0,0,1,1,1,1,1],"
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return sorted(arr, key = lambda x: x * -1 if x else 0)\n",
        "test": "assert     sort_array([1,1,1,1,1]) == [1,1,1,1,1]"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    result = []\n    words = s.split()\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter not in \"aeiou\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result\n",
        "test": "assert "
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    for i in range(1, len(word)):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('FROM') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    p1, p2 = lst[0], lst[1]\n    if len(p1)!= len(p2):\n        return 'No'\n    if p1 == '(' and p2 == ')':\n        return 'Yes'\n    if p1 == ')' and p2 == '(':\n        return 'No'\n    if p1 == '(' and p2 == ')':\n        return match_parens(lst[2:])\n    if p1 == '(' and p2 == ')':\n        return match_parens(lst[2:])\n    if p1 == '(':\n        return match_parens(lst[1:])\n    if p1 == ')' and p2 == '(':\n        return match_parens(lst[1:])\n    return 'No'\n",
        "test": "assert     match_parens(['((())', '))()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return sorted(arr[:k])\n",
        "test": "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [9, 8, 7, 6, 5]"
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sum(lst[2::2])\n",
        "test": "assert False == solution([])"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if not arr or k == 0:\n        return 0\n",
        "test": "assert add_elements("
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    odd_collatz = []\n    curr = n\n    while curr!= 1:\n        if curr % 2 == 1:\n            odd_collatz.append(curr)\n            curr = 3 * curr + 1\n        else:\n            curr = curr // 2\n    return sorted(odd_collatz)\n    \n",
        "test": "assert "
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if not date:\n        return False\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 4 and day > 29:\n        return False\n    if month == 6 and day > 30:\n        return False\n    if month == 9 and day > 30:\n        return False\n    if month == 11 and day > 30:\n        return False\n    if month == 1 and day > 31:\n        return False\n    if month == 3 and day > 31:\n        return False\n    if month == 5 and day > 31:\n        return False\n    if month == 7 and day > 31:\n        return False\n    if month == 8 and day > 31:\n        return False\n    if month == 10 and day > 31:\n        return False\n    if month == 12 and day > 31:\n        return False\n    if year < 0:\n        return False\n    return True\n",
        "test": "assert valid_date(\"\") is False"
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('Hello') == ['Hello'], 'First'"
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return (sorted(lst) == lst) and (len(lst) == len(set(lst)))\n",
        "test": "assert     is_sorted([1,2,3]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if not (interval1[1] < interval2[0] or interval2[1] < interval1[0]):\n        return \"NO\"\n    if not (interval1[1] < interval2[1] or interval2[1] < interval1[1]):\n        return \"NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    if interval1[1] < interval2[1] or interval2[1] < interval1[1]:\n        return \"NO\"\n    if (interval1[1] == interval2[0] or interval2[1] == interval1[0]):\n        return \"NO\"\n    if (interval1[1] == interval2[1] or interval2[1] == interval1[1]):\n        return \"YES\"\n    return \"YES\"\n",
        "test": "assert     intersection((1, 2), (2, 3)) == 'NO'"
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        product = 1\n        signs_of_arr = []\n        for i in arr:\n            if i > 0:\n                signs_of_arr.append(1)\n            elif i < 0:\n                signs_of_arr.append(-1)\n            else:\n                signs_of_arr.append(0)\n        for j in signs_of_arr:\n            product *= j\n        return product\n",
        "test": "assert     prod_signs([1, -2, -1, 0, 0]) == 0, prod_signs([1, -2, -1, 0, 0])"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    lst = []\n    lst.append(3)\n    if n == 1:\n        return lst\n    lst.append(1)\n    if n == 2:\n        return lst\n    lst.append(2)\n    for i in range(n - 3):\n        a, b, c = lst[i], lst[i + 1], lst[i + 2]\n        lst.append(a + b + c)\n    return lst\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 1\n    if n % 10 % 2 == 1:\n        return n*digits(n//10)\n    else:\n        return 0",
        "test": "assert     digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    def is_subseq(s):\n        i = 0\n        for e in s:\n            if e == '[':\n                i += 1\n            elif e == ']':\n                i -= 1\n            if i < 0:\n                return False\n        return i == 0\n    \n    for i in range(len(string)):\n        if is_subseq(string[i:]):\n            return True\n    return False\n",
        "test": "assert     is_nested('[]')==True, \"is_nested('[]') should return True.\""
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    sum_ = 0\n    for item in lst:\n        sum_ += (item*item)\n    return sum_\n",
        "test": "assert "
    },
    {
        "number": 134,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    \n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha() and not txt[-1].isalpha():\n            return True\n        else:\n            return False\n",
        "test": "assert     check_if_last_char_is_a_letter('abcd') == False, \"All lowercase letters\""
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if len(arr) < 3:\n        return -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([4,5,3,2,1]) == 0"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    neg = []\n    pos = []\n    for i in lst:\n        if i >= 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    if neg == []:\n        return (None, None)\n    elif pos == []:\n        return (None, None)\n    else:\n        return (min(neg), max(pos))\n",
        "test": "assert     largest_smallest_integers([]) == (None, None), \"test #1\""
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Solution\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(12,4) == 12 "
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    while n >= 0:\n        if n % 2 == 0 and n == 2 * n:\n            return True\n        n -= 1\n    return False\n",
        "test": "assert     is_equal_to_sum_even(20)"
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return math.factorial(n)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return '_'.join(text.split())\n",
        "test": "assert     fix_spaces('a b c') == 'a_b_c'"
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if file_name.find('.') == -1:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    elif len(file_name) >= 3:\n        if file_name[0] == '0' or file_name[0] == '1' or file_name[0] == '2' or file_name[0] == '3' or file_name[0] == '4' or file_name[0] == '5' or file_name[0] == '6' or file_name[0] == '7' or file_name[0] == '8' or file_name[0] == '9':\n            if file_name[1] == '.':\n                if file_name[2] == '.':\n                    if file_name[3] == '0' or file_name[3] == '1' or file_name[3] == '2' or file_name[3] == '3' or file_name[3] == '4' or file_name[3] == '5' or file_name[3] == '6' or file_name[3] == '7' or file_name[3] == '8' or file_name[3] == '9':\n                        if file_name[4] == '.' or file_name[4] == 'txt' or file_name[4] == 'exe' or file_name[4] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n",
        "test": "assert     file_name_check('a') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    #You can write any code you like below this line\n    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n    return result\n",
        "test": "assert "
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    words = re.split(\" \", sentence)\n    primes = prime_generator()\n    primes_dict = dict(zip(primes, primes))\n    result = \"\"\n    for word in words:\n        if len(word) in primes_dict:\n            result += word + \" \"\n    return result[:-1]\n",
        "test": "assert "
    },
    {
        "number": 144,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if x[0] == \"0\":\n        return False\n    elif x[1] == \"0\":\n        return False\n    elif x[0].isdigit() == True and x[1].isdigit() == True and n[0].isdigit() == True and n[1].isdigit() == True:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"3/4\", \"2/3\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return nums\n",
        "test": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    odd_nums = []\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num not in odd_nums:\n            odd_nums.append(num)\n    return len(odd_nums)\n",
        "test": "assert     specialFilter([1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6]) == 5"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    import math\n    return int(math.factorial(n) / (2 * math.factorial(n - 2)))\n",
        "test": "assert     get_max_triples(8) == 15, \"Wrong answer\""
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    #lista de orbitas\n    orbitas = []\n    #lista de planetas\n    planeta = []\n",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return sorted(lst)\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert "
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    s = 0\n    for num in lst:\n        if num % 2!= 0:\n            s += num**2\n    return s\n    \ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    #guesses = []\n    #for i in range(len(game)):\n    #    if(game[i]==guess[i]):\n    #        guesses.append(0)\n    #    else:\n    #        guesses.append(abs(game[i]-guess[i]))\n    #return(guesses)\n    return(abs(game[0]-guess[0])+abs(game[1]-guess[1])+abs(game[2]-guess[2])+abs(game[3]-guess[3])+abs(game[4]-guess[4])+abs(game[5]-guess[5]))\n    \n    \n    \n    \n    ",
        "test": "assert     compare([1,3,4],"
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    ext_lst = []\n    ext_str ='my_class.{}'\n    ext_name_lst = []\n    for ext in extensions:\n        # print(ext)\n        ext_name = ext.lower()\n        ext_count = ext_name.count('.')\n        ext_name_lst.append(ext_name)\n        if ext_count == 1:\n            if ext_name in ext_lst:\n                continue\n            else:\n                ext_lst.append(ext_name)\n    ext_lst.sort(key=lambda x: x.count('.') + x.count('_'))\n    # print(ext_lst)\n    if len(ext_lst) == 0:\n        return class_name\n    else:\n        return ext_str.format(ext_lst[0])\n",
        "test": "assert Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese\""
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    ab = a + a\n    return b in ab or ab in b\n",
        "test": "assert     cycpattern_check(\"chimichangenot\", \"chimichangenot\") == True"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    even, odd = 0, 0\n",
        "test": "assert "
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # use a hash table to map integers to their roman equivalents\n    n_roman_dict = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    # for roman numeral, we need to start from least significant digit\n    roman_numeral = ''\n    while number > 0:\n        for (k, v) in n_roman_dict.items():\n            if k <= number:\n                roman_numeral += v\n                number -= k\n                break\n    return roman_numeral\n",
        "test": "assert     int_to_mini_roman(10) == \"X\""
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(2, 3, 4) == False, 'Should be False'"
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    max_characters = 0\n    max_words = \"\"\n    for word in words:\n        if len(word) > max_characters:\n            max_characters = len(word)\n            max_words = word\n    return max_words\n",
        "test": "assert     find_max([\"vibhuti\", \"chinmay\", \"rahul\", \"ram\"]) == \"vibhuti\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    need = min(need, remaining)\n    eaten_carrots = number + need\n    leftover_carrots = remaining - need\n    return [eaten_carrots, leftover_carrots]\n",
        "test": "assert     eat(1, 1, 0) ==    [1, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # step1. add\n    if operator == '+':\n        return sum(operand)\n    # step2. mul\n    if operator == '*':\n        return reduce(lambda x, y: x * y, operand)\n    # step3. div\n    if operator == '/':\n        if operand == 0:\n            return 0\n        return reduce(lambda x, y: x // y, operand)\n    # step4. exp\n    if operator == '**':\n        return reduce(lambda x, y: x ** y, operand)\n    # step5. sub\n    if operator == '-':\n        return reduce(lambda x, y: x - y, operand)\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    result = []\n    for x in s:\n        if x.isalpha():\n            if x.isupper():\n                result.append(x.lower())\n            else:\n                result.append(x.upper())\n        else:\n            result.append(x)\n    return ''.join(result)\n",
        "test": "assert     solve('') == ''"
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5(\"\")     == None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    integers = list(range(a, b+1))\n    # evens = list(filter(lambda n: n % 2 == 0, integers))\n    evens = [i for i in integers if i % 2 == 0]\n    return evens\n",
        "test": "assert     generate_integers(1, 10) == [2,4,6,8,10]"
    }
]