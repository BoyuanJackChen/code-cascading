[
    {
        "number": 0,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return len(numbers) >= 3 and len([n for n in numbers if abs(n - numbers[0]) <= threshold]) > 0\n",
        "test": "assert has_close_elements([2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0.3)"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    paren_string = ''.join(paren_string.split())\n    open_parens = []\n    new_string = []\n    for c in paren_string:\n        if c == '(':\n            open_parens.append(c)\n        elif c == ')':\n            if len(open_parens) == 0:\n                new_string.append(')')\n            else:\n                open_parens.pop()\n    return new_string\n",
        "test": "assert     separate_paren_groups('') == []"
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    # TODO: implement\n    return float(number)\n",
        "test": "assert     truncate_number(3.75) == 3.75"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n    if balance < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) is False"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(e - mean) for e in numbers) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 25.0"
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers + [delimeter]\n    else:\n        return numbers[:2] + [delimeter] + intersperse(numbers[2:], delimeter)\n",
        "test": "assert     intersperse([], 3) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n",
        "test": "assert "
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n",
        "test": "assert     filter_by_substring(['cat', 'dog', 'lion', 'fox'], 'cat') == ['cat']"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        else:\n            max_list.append(max(max_list[i - 1], numbers[i]))\n    return max_list\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if not string:\n        return ''\n    res = None\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            if res is None or len(res) > len(string[:i]):\n                res = string[:i]\n    return string + res[::-1]\n",
        "test": "assert     is_palindrome(\"aba\") == True"
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n",
        "test": "assert     string_xor(\"\", \"abcdefg\") == \"\""
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    # make a dictionary of length to count of each char\n    char_counts = {}\n    # make the list of length to char counts\n    for char in strings:\n        if char not in char_counts:\n            char_counts[char] = 1\n        else:\n            char_counts[char] += 1\n    # find the longest string in the dictionary\n    longest_string = None\n    longest_count = 0\n    for char in char_counts:\n        if char_counts[char] > longest_count:\n            longest_string = char\n            longest_count = char_counts[char]\n    return longest_string\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    while a > 0 and b > 0:\n        if a >= b:\n            a = a % b\n        else:\n            b = b % a\n    return max(a, b)\n",
        "test": "assert     greatest_common_divisor(9, 3) == 3, 'greatest_common_divisor(9, 3) == 3'"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i + 1]\n        prefixes.append(prefix)\n    return prefixes\n",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    return''.join([f'{x}' for x in range(n+1)])\n",
        "test": "assert     string_sequence(2) ==' 0  1'"
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    # for char in string:\n    #     if string.count(char) > 1:\n    #         return False\n    # return True\n    return len(set(string))\n",
        "test": "assert count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    # Your code goes here (remove this comment when you are done)\n    return_list = []\n    for string in music_string:\n        if string == 'o':\n            return_list.append(4)\n        elif string == 'o|':\n            return_list.append(2)\n        elif string == '.':\n            return_list.append(1)\n        else:\n            return_list.append(1)\n    return return_list\n",
        "test": "assert "
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"aaa\", \"aaa\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    numbers_list = []\n    numbers_list = numbers.split()\n    new_list = []\n    for i in numbers_list:\n        new_list.append(i)\n    new_list = sorted(new_list, reverse=True)\n    new_string =''.join(new_list)\n    return new_string\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\""
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    numbers = sorted(numbers)\n    return (numbers[0], numbers[-1])\n",
        "test": "assert     find_closest_elements([2.4, 5.6]) == (2.4, 5.6)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    # Divide by the largest number\n    return [(n / max(numbers)) for n in numbers]\n",
        "test": "assert     rescale_to_unit([0, 1]) == [0, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
    },
    {
        "number": 23,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return len(string)\n",
        "test": "assert         isinstance(strlen(''),     int)"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "test": "assert     largest_divisor(8) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    \n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    if n > 2:\n        result.append(n)\n    return result\n",
        "test": "assert     factorize(4) == [2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    output = []\n    for n in numbers:\n        if n not in output:\n            output.append(n)\n    return output\n",
        "test": "assert     remove_duplicates([1, 1, 1, 1]) == [1]"
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    new_str = ''\n    for char in string:\n        if char.isupper():\n            new_str += char.lower()\n        elif char.islower():\n            new_str += char.upper()\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert flip_case(\"HELLO WORLD\") == \"hello world\""
    },
    {
        "number": 28,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"world!\"]) == concatenate([\"Hello\", \"world!\"])"
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert     get_positive([1, 2, -3, 4, 5]) == [1, 2, 4, 5]"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    xs = list(xs)\n    # make xs non zero\n    xs[0] = -xs[0]\n    for i in range(1, len(xs) - 1):\n        xs[i] = -xs[i]\n    return -(xs[-1] / xs[-2])\n",
        "test": "assert     find_zero([1, 1]) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted([i for i in l if i % 3!= 0]) + sorted([i for i in l if i % 3 == 0])",
        "test": "assert     sort_third([]) == [], \"sort_third did not return correct list\""
    },
    {
        "number": 34,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return sorted(set(l))",
        "test": "assert     unique([1, 2, 3, 3, 3, 3, 3, 3, 4]) == sorted(set([1, 2, 3, 4]))"
    },
    {
        "number": 35,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "test": "assert     max_element([5,1,2,3,4]) == 5, \"Wrong!\""
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    n = len(l)\n    even = l[0:n//2]\n    odd = l[n//2:]\n    return sorted(odd) + sorted(even)\n",
        "test": "assert sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # enumerate every letter in the string.\n    for i, letter in enumerate(s):\n        # if the index of the letter is multiple of 3, we switch letters.\n        if i % 3 == 0:\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2]\n    return s\n",
        "test": "assert "
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if n <= 1:\n        return 2\n    a = 2\n    b = 3\n    for _ in range(n - 2):\n        c = a + b\n        a, b = b, c\n        if c % 2 == 0:\n            return c\n    return c\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,-1,-2,0,1,1,2,2,3,0,2]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    pass\n    # REPLACE THE FOLLOWING LINE WITH YOUR EXECUTION\n",
        "test": "assert "
    },
    {
        "number": 42,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([2]) == [3]"
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return True if sum(l) == 0 else False\n",
        "test": "assert pairs_sum_to_zero([2, 1, 3]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return str(x)\n",
        "test": "assert     change_base(1, 2) == \"1\""
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    #area = (a * h)/2\n    area = 0.5 * (a * h)\n    return area\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    if n < 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    if not l:\n        raise ValueError(\"Empty list\")\n    l_len = len(l)\n    if l_len % 2 == 1:\n        return sorted(l)[l_len//2]\n    return sum(sorted(l)[l_len//2-1:l_len//2+1])/2\n",
        "test": "assert median([1,2,2,4]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    text = text.lower()\n    text = ''.join(char for char in text if char.isalnum())\n    return text == text[::-1]\n",
        "test": "assert "
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert "
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    vowels = \"aeiouAEIOU\"\n    remove = \"\"\n    for letter in text:\n        if letter not in vowels:\n            remove += letter\n    return remove\n",
        "test": "assert     remove_vowels(\"\") == \"\", \"Wrong Output\""
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([], 1) == True"
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return x + y\n    \ndef add_with_func(x, y):\n    return x + y\n",
        "test": "assert     add(-2, 2) == 0"
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return len(set(s0) - set(s1)) == 0\n",
        "test": "assert     same_chars('abcd', 'abcd') == True"
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(0) == 0"
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    \n    while \">>>\" in brackets:\n        brackets = brackets.replace(\">>>\", \"<>\")\n    return brackets == \"<>\"\n",
        "test": "assert     correct_bracketing(\"<)\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    return all(x <= y or y <= x for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5, 6]) == True, \"All the elements except the last one are increasing\""
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    common = []\n    l1, l2 = set(l1), set(l2)\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    common.sort()\n    return common\n",
        "test": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    # Find the greatest divisor of n not including 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    # If the loop doesn't break, the n is prime\n    return n\n",
        "test": "assert largest_prime_factor(28) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum(range(1, n+1))\n",
        "test": "assert     sum_to_n(8) == 24"
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    open_brackets = 0\n    for b in brackets:\n        if b == \"(\":\n            open_brackets += 1\n        elif b == \")\":\n            open_brackets -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets == 0\n",
        "test": "assert     correct_bracketing(\"(())\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return [x * (x + 1) for x in xs]\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(1) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n    # or\n    # return len([letter for letter in s if letter in \"aeiou\"])\n",
        "test": "assert     vowels_count(FIX) == 4, \"\"\""
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # If shift > len(x), reverse the number\n    if shift > len(x):\n        x = x[-shift:] + x[:-shift]\n    else:\n        x = x[shift:] + x[:shift]\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return sum(int(i) for i in s if i.isdigit())\n",
        "test": "assert     digitSum(\"\") == 0, \"input an empty string\""
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    return len(s) - len(s.split(\" \"))\n",
        "test": "assert fruit_distribution(\"0\",5) == 0, \"Example 4\""
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if not arr: return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # checking if the list is empty\n    if len(lst) == 0:\n        return -1\n    \n    # setting the maximum frequency and its corresponding value\n    max_frequency = max(lst, key=lst.count)\n    maximum_value = max(lst)\n    \n    # checking if the frequency of the maximum value is higher than 1\n    if max_frequency > 1:\n        # if yes then returns the maximum_value if not then returns -1\n        return maximum_value if max_frequency >= maximum_value else -1\n    \n    # if the frequency of the maximum value is 1 then returns the max_frequency\n    return max_frequency\n",
        "test": "assert search([2,2,3]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    min_val = min(lst)\n    max_val = max(lst)\n    return sorted(lst, key=lambda x: -(min_val - x) - (max_val - x))\n",
        "test": "assert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    s = (a + b + c) / 2\n    if a > b and a > c and b > c:\n        return round(s * (s - a) * (s - b) * (s - c), 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(3, 4, 5) == -1, \"Test 3: {0}\".format(triangle_area(3, 4, 5))"
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2],2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(arr) == 1:\n        return 0\n",
        "test": "assert     smallest_change([1,2,3,2,1,4,5]) == 2, \"wrong\""
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e']"
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    primes = []\n    primes.append(2)\n    primes.append(3)\n    primes.append(5)\n    primes.append(7)\n    primes.append(11)\n    primes.append(13)\n    primes.append(17)\n    primes.append(19)\n    primes.append(23)\n    primes.append(29)\n    primes.append(31)\n    primes.append(37)\n    primes.append(41)\n    primes.append(43)\n    primes.append(47)\n    primes.append(53)\n    primes.append(59)\n    primes.append(61)\n    primes.append(67)\n    primes.append(71)\n    primes.append(73)\n    primes.append(79)\n    primes.append(83)\n    primes.append(89)\n    primes.append(97)\n    for i in range(1,100):\n        if (i%3 == 0) and (i%5 == 0):\n            for prime in primes:\n                if (i%prime!= 0):\n                    continue\n                else:\n                    return True\n    return False\n",
        "test": "assert is_multiply_prime(6) == True"
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return x ** 1 == n\n",
        "test": "assert     is_simple_power(1, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    # your code here\n    \n    return a**3 == a\n    \n",
        "test": "assert not iscube(5)"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    hex_str = \"0123456789ABCDEF\"\n    dec = int(num, 16)\n    prime_nums = []\n    dec = int(num, 16)\n    for i in range(len(hex_str)):\n        if dec % i!= 0:\n            prime_nums.append(i)\n    count = 0\n    for i in prime_nums:\n        if (i - 2) % 4 == 0:\n            count += 1\n    print(count)\n",
        "test": "assert "
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if decimal == 0:\n        return \"db\"\n    s = \"\"\n    while decimal!= 0:\n        rem = decimal % 2\n        s = s + str(rem)\n        decimal = decimal // 2\n    return \"db\" + s + \"db\"\n",
        "test": "assert     decimal_to_binary(14) == '11010'"
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    seen = set()\n    n = len(s)\n    i = 0\n    while i < n:\n        letter = s[i]\n        if letter in seen:\n            return False\n        else:\n            seen.add(letter)\n        if i < n-2:\n            letter2 = s[i+1]\n            if letter == letter2:\n                return False\n        i += 1\n    return True\n    ",
        "test": "assert "
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    res = []\n    for i in grades:\n        if i >= 3.7:\n            res.append('A+')\n        elif i >= 3.3:\n            res.append('A')\n        elif i >= 3.0:\n            res.append('A-')\n        elif i >= 2.7:\n            res.append('B+')\n        elif i >= 2.3:\n            res.append('B')\n        elif i >= 2.0:\n            res.append('B-')\n        elif i >= 1.7:\n            res.append('C+')\n        elif i >= 1.3:\n            res.append('C')\n        elif i >= 1.0:\n            res.append('C-')\n        elif i >= 0.7:\n            res.append('D+')\n        elif i >= 0.3:\n            res.append('D')\n        elif i >= 0.0:\n            res.append('D-')\n        else:\n            res.append('E')\n    return res\n",
        "test": "assert "
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    return len(string) in {2, 3, 5, 7}\n",
        "test": "assert prime_length(\"15\") == True"
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    return \"\".join(list(map(str, bin(N)[2:])))\n",
        "test": "assert solve(1) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # your code here\n    new_lst = lst\n    while lst:\n        index = 0\n        while lst[index] % 2 == 0:\n            index += 1\n        if index == len(lst):\n            break\n        new_lst.append(lst[index])\n        del lst[index]\n    return new_lst\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n",
        "test": "assert     anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    x_coordinates = []\n    for row_index, row in enumerate(lst):\n        if x in row:\n            x_coordinates.append((row_index, row.index(x)))\n    x_coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return sorted(x_coordinates, key=lambda x: (x[0], -x[1]))\n    \ndef get_coordinates(lst, x):\n    \"\"\"\n    Given lst, find coordinates of x.\n    Return tuple of tuples (row, column),\n    where row and column are indexes of the matrix.\n    \"\"\"\n    for i, row in enumerate(lst):\n        if x in row:\n            return i, row.index(x)\n",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    length = len(array)\n    sums = sum_array(array)\n    if sums % 2!= 0:\n        # sum odd\n        for i in range(length):\n            for j in range(i + 1, length):\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n    else:\n        # sum even\n        for i in range(length):\n            for j in range(i + 1, length):\n                if array[i] < array[j]:\n                    array[i], array[j] = array[j], array[i]\n    return array\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    import string\n    #s = str(s)\n    #lower = string.ascii_lowercase\n    #upper = string.ascii_uppercase\n    #alphas = lower + upper\n    #print(alphas)\n    s = str(s)\n    s = s.upper()\n    s = list(s)\n    #print(s)\n    #alphabet = lower + upper\n    alphabet = string.ascii_uppercase\n    for i in range(len(s)):\n        if s[i] == \" \":\n            s[i] = \" \"\n    for i in range(len(alphabet)):\n        if alphabet[i] == \" \":\n            alphabet = alphabet[i:] + alphabet[:i]\n    #print(alphabet)\n    #print(s)\n    l = len(alphabet)\n    for i in range(len(s)):\n        if s[i]!= \" \":\n            alphabet_pos = alphabet.index(s[i])\n            s[i] = alphabet[alphabet_pos + 2]\n    encrypted = \"\".join(s)\n    return encrypted\n",
        "test": "assert     encrypt('') == ''"
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    idx = lst.index(min(lst))\n    if idx < len(lst) - 1:\n        return lst[idx + 1]\n    else:\n        return None\n",
        "test": "assert next_smallest([4, 4, 4, 1, 2, 4]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            count += 1\n    return count\n",
        "test": "assert is_bored('I!') == 1"
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return x == y + z and (x, y, z).count(int) == 3\n",
        "test": "assert     any_int(4, 6, 7) == False, \"Fourth\""
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c\n    # \u043a\u0430\u043a \u0438\u0437 \u0432\u043b\u043e\u0432 \u043c\u043e\u043d\u043e\u0433\u0438\u0434\u0440\u0430\u0442\n    vowels = 'aeiou'\n    \n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n    keys = list(vowels) + keys\n    # \u0414\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443\n    for key in keys:\n        message = message.replace(key, chr(ord(key) - 2))\n    return message\n    \n",
        "test": "assert     encode('aBC') == 'BCD'"
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    res = 0\n    for i in lst:\n        while i > 0:\n            res += int(i%10)\n            i = int(i/10)\n    return res\n",
        "test": "assert     skjkasdkd([]) == 0, \"Wrong answer with input list: []\""
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    return len(dict) == 0 or len(dict.keys()) == len(dict.values())\n",
        "test": "assert     check_dict_case(dict(k1='v1', k2='V2')) == True, \"Wrong case.\""
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    def isPrime(num):\n        if num <= 1: return False\n        for i in range(2, num):\n            if num % i == 0: return False\n        return True\n",
        "test": "assert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    product = 1\n    for i in range(1, abs(a) + 1):\n        product *= i\n    for i in range(1, abs(b) + 1):\n        product //= i\n    return product",
        "test": "assert multiply(1, 1) == 1"
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    assert isinstance(s, str)\n    counter = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            counter += 1\n    return counter\n",
        "test": "assert count_upper('a') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"13.5\") == 14"
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return [n]\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    s_list = s.split(\", \")\n    return s_list\n",
        "test": "assert words_string(\"a\") == [\"a\"]"
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    if x % 2!= 0 and y % 2!= 0:\n        return -1\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    else:\n        return min(x, y)\n",
        "test": "assert choose_num(1, 10) == 1"
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    if n > m:\n        return -1\n    return int((n+m)/2)\n",
        "test": "assert rounded_avg(1, 1) == 1"
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for i in x:\n        if i % 10!= 0:\n            return x\n    return x\n    \n",
        "test": "assert     unique_digits([1,5,6,7,8,9]) == sorted([1, 5, 6, 7, 8, 9])"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        arr.sort()\n        arr = arr[::-1]\n        res = []\n        for i in range(len(arr)):\n            if 1 <= arr[i] <= 9:\n                res.append(name[arr[i]-1])\n        return res\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n",
        "test": "assert     f(1) == [1], \"f(1) does not work\""
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    evens = 0\n    odds = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        l = len(s)\n        if s == s[::-1]:\n            if l % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)\n",
        "test": "assert even_odd_palindrome(1) == (0,1)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return sum(1 for elem in arr if elem > 0)\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    arr = sorted(arr)\n    flag = 0\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i - 1]:\n            flag = 1\n            break\n        \n    if flag == 0:\n        return False\n    \n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([]) == True, \"Wrong output\""
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # TODO: IMPLEMENT ME\n    \n    #for element in lst1:\n    #    if element%2!= 0:\n    #        return \"NO\"\n    #for element in lst2:\n    #    if element%2!= 0:\n    #        return \"NO\"\n    #for i in range(len(lst1)):\n    #    if lst1[i]%2!= 0:\n    #        return \"NO\"\n    #for i in range(len(lst2)):\n    #    if lst2[i]%2!= 0:\n    #        return \"NO\"\n    \n    for element in lst1:\n        if element%2!= 0:\n            return \"NO\"\n    for element in lst2:\n        if element%2!= 0:\n            return \"NO\"\n    \n    for i in range(len(lst1)):\n        if lst1[i]%2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i]%2!= 0:\n            return \"NO\"\n    \n    return \"YES\"\n    \ndef test_exchange():\n    print(\"Testing exchange()...\", end=\"\")\n    assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n    assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n    assert(exchange([1, 2, 3, 4], [1, 2, 4, 3]) == \"NO\")\n    assert(exchange([1, 2, 3, 4], [1, 2, 3, 5]) == \"NO\")\n    assert(exchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == \"NO\")\n    assert(exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == \"YES\")\n    assert(exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]) == \"NO\")\n    assert(exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]) == \"YES\")\n    assert(exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 8]) == \"NO\")\n    print(\"Passed!\")\n",
        "test": "assert     exchange(lst1 = [1, 2, 3, 4, 5], lst2 = [3, 5, 1, 2, 4, 6, 7]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    hist = {}\n    for let in test:\n        if let in hist:\n            hist[let] += 1\n        else:\n            hist[let] = 1\n    return hist\n",
        "test": "assert     histogram(\"\") == {}"
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    rev = s[::-1]\n    for i in range(len(s)):\n        if s[i] in c:\n            rev = rev[:i] + rev[i+1:]\n    if s == rev:\n        return (rev,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete('','') == ('', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    count = 0\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(odd_digits(lst[i]))\n    for i in lst1:\n        if i%2!=0:\n            count+=1\n    output = []\n    output.append(\"the number of odd elements \"+str(count)+\"n the str\"+str(count)+\"ng \"+str(count)+\" of the \"+str(count)+\"nput.\")\n    return output\n",
        "test": "assert odd_count([\"21\"]) == [\"the number of odd elements in the string 3 of the input\"]"
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    sum = 0\n    cur_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        cur_sum += num\n        sum = max(cur_sum, sum)\n        min_sum = min(min_sum, sum)\n    return min_sum\n",
        "test": "assert     minSubArraySum([0]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    def max_fill_helper(grid, i, j, c, res):\n        \n        if j < 0 or i < 0:\n            return res\n        if grid[i][j] == 0:\n            return max_fill_helper(grid, i, j-1, c, res)\n        elif grid[i][j] == 1:\n            cur_fill = c - grid[i][j]\n            if cur_fill <= 0:\n                return res\n            elif cur_fill <= c:\n                res = max(res, 1 + max_fill_helper(grid, i, j-1, cur_fill, res))\n            else:\n                res = max(res, 1 + max_fill_helper(grid, i-1, j-1, c-grid[i][j], res))\n        return res\n    \n    return max_fill_helper(grid, len(grid)-1, len(grid[0])-1, capacity, 0)\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    return sorted(arr, key=lambda x: x*2)\n",
        "test": "assert     sort_array([7, 8, 1, 2, 3, 4, 5, 6]) == sorted("
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    words = s.split()\n    return list(filter(lambda word: len([letter for letter in word if letter.isalpha() and letter.islower()]) == n, words))\n",
        "test": "assert     select_words(\"I like apples\", 5) == []"
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    stack = []\n    open_p = 0\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n            open_p += 1\n        else:\n            if len(stack) == 0 or stack[-1]!= '(':\n                return 'No'\n            stack.pop()\n            open_p -= 1\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens([['(', ')'], ['(', ')', ')', '(']]) == 'No', \\"
    },
    {
        "number": 120,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "test": "assert     maximum([1],     1) == [1]"
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2==0])",
        "test": "assert     solution([0,0,0]) == 0, 'EvenSum'"
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    return sum(min(int(str(n)[0]+str(n)[1]), int(str(n)[0])) for n in arr[:k])\n",
        "test": "assert     add_elements([], 0) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    if n == 1:\n        return [1]\n    collatz_sequence = get_odd_collatz(n // 2)\n    if n % 2 == 0:\n        collatz_sequence.append(n)\n        return collatz_sequence\n    else:\n        collatz_sequence.append(3 * n + 1)\n        return collatz_sequence\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return True if len(date) == 10 and all(i in str(range(1,13)) for i in date.split('-')) and all(i in str(range(1,31)) for i in date.split('-')) and all(i in str(range(1,29)) for i in date.split('-')) and (date.split('-')[1]!= '02') and (date.split('-')[2]!= '02') else False\n",
        "test": "assert    valid_date('1-10-1944') == False"
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return ','.join(txt.split()).split(',')\n",
        "test": "assert     split_words('foo') == ['foo']"
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 1, 2, 3]) == False, \"1 duplicates\""
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    if interval1[0] > interval2[0] or interval1[1] < interval2[0]: return \"NO\"\n    else: return \"YES\" if math.gcd(interval1[1] - interval1[0], interval2[1] - interval2[0]) == 1 else \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    if len(arr) == 0:\n        return None\n    return sum([abs(x) * (1 if x > 0 else -1) for x in arr])\n",
        "test": "assert     prod_signs([-1,-2,3]) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def helper(r, c, k, visited):\n        if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0 or visited[r][c]:\n            return\n        visited[r][c] = True\n        if k == 0:\n            return\n        helper(r + 1, c, k - 1, visited)\n        helper(r - 1, c, k - 1, visited)\n        helper(r, c + 1, k - 1, visited)\n        helper(r, c - 1, k - 1, visited)\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    if n < 3:\n        return [1, 1, 1, ]\n    a, b, c = 1, 1, 1\n    result = [1, 1, 1, ]\n    for i in range(3, n + 1):\n        c = a + b + c\n        a, b, c = b, c, c\n        result.append(c)\n    return result\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    while n >= 1:\n        if n % 10 % 2 == 1:\n            return n % 10 * digits(n // 10)\n        n //= 10\n    return 0\n",
        "test": "assert     digits(2)        == 0"
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return True if string.count('[') == string.count(']') + string.count('{') else False\n",
        "test": "assert not is_nested(\"([)\")"
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return sum(x*x for x in lst)\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return not txt[-1].isalpha() and txt[-1] not in'\\t\\n'\n",
        "test": "assert not(check_if_last_char_is_a_letter(\"This is a test of the emergency broadcasting system. Emergency broadcast sir\"))"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not arr:\n        return -1\n",
        "test": "assert can_arrange([0, 1, 2, 1, 2, 1, 0, 1, 2]) == 3"
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if a == None or a < i:\n            a = i\n        if b == None or b > i:\n            b = i\n    return (a, b)\n",
        "test": "assert     largest_smallest_integers([1,2,3,4]) == (4,1)"
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    #return None if type(a) is not int and type(b) is not int\n    if type(a) is str and type(b) is str:\n        if a > b:\n            return a\n        return b\n    if type(a) is int and type(b) is int:\n        if a > b:\n            return a\n        return b\n    if type(a) is float and type(b) is float:\n        if a > b:\n            return a\n        return b\n",
        "test": "assert     compare_one(2,3)     ==     3"
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    evens = [2,4,6,8]\n    total = 0\n    for i in evens:\n        total += i\n    return total == n\n    \n",
        "test": "assert     is_equal_to_sum_even(11)    == False, \"is_equal_to_sum_even: 11 is not equal to the sum of 4 even numbers\""
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    fact = 1\n    while(n > 0):\n        fact *= n\n        n -= 1\n    return fact\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    text = text.replace(' ', '_')\n    text = ''.join(text.split())\n    return text\n    \ndef get_words(text):\n    \"\"\"\n    Given a string text, return a list of strings containing all the words in text \n    \n    get_words(\"A test\") == ['a', 'test']\n    get_words(\"My favorite color is blue\") == ['my', 'favorite', 'color', 'is', 'blue']\n    \"\"\"\n    text = text.split()\n    return text\n",
        "test": "assert     fix_spaces('foo') == 'foo'"
    },
    {
        "number": 141,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name[0].isalpha() == False:\n        return 'No'\n    if file_name.lower().endswith('.txt')!= True:\n        return 'No'\n    if file_name.lower().endswith('.exe')!= True:\n        return 'No'\n    if file_name.lower().endswith('.dll')!= True:\n        return 'No'\n    return 'Yes'\n    \ndef show_files(file_names):\n    \"\"\"Return a string of all files within the input directory\n    \"\"\"\n    for i in range(len(file_names)):\n        file_names[i] = file_names[i].replace('\\\\','/')\n    return '\\n'.join(file_names)\n",
        "test": "assert     file_name_check('') == 'No', 'The empty string is not a valid file name!'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    new_list = []\n    for elem in lst:\n        if elem % 3 == 0:\n            new_list.append(elem*elem)\n        elif elem % 4 == 0:\n            new_list.append(elem*elem*elem)\n    \n    return sum(new_list)\n    \n    \ndef palindrome(string):\n    \"\"\"\n    This function shall check whether a given string is palindrome or not. \n    \n    Example:\n    Input = 'abba'\n    Output = True\n    \n    Input = 'abc'\n    Output = False\n    \n    Input = 'a'\n    Output = False\n    \n    Input = 'abcd'\n    Output = False\n    \"\"\"\n    \n    reversed_string = string[::-1]\n    \n    return reversed_string == string\n    \n    \ndef maximum_sum(lst):\n    \"\"\"\n    This function shall return the maximum sum of an array of integers. \n    \n    Example:\n    Input = [-5, 1, 2, -1]\n    Output = 3\n    \n    Input = [-5, 1, 2, -5, 1, -3]\n    Output = 6\n    \"\"\"\n    \n    # O(n)\n    \n    if len(lst) == 0:\n        return 0\n    \n    # O(n)\n    \n    max_sum = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_sum = lst[i] + lst[j]\n            \n            if max_sum < current_sum:\n                max_sum = current_sum\n    \n    return max_sum\n    \n    \ndef find_sub_string(string, pattern):\n    \"\"\"\n    This function shall return the starting index of the first occurrence of the substring in the given string. \n    \n    Example:\n    Input = 'abababc', 'ab'\n    Output = 0\n    \n    Input = 'abababc', 'bc'\n    Output = 3\n    \n    Input = 'abababc', 'ab'\n    Output = 2\n    \n    Input = 'abababc', 'abc'\n    Output = -1\n    \"\"\"\n    \n    i = 0\n    j = 0\n    \n    while i < len(string) and j < len(pattern):\n        \n        if string[i] == pattern[j]:\n            j += 1\n            i += 1\n        else:\n            i += 1\n            j = 0\n            \n    if j == len(pattern):\n        return i-j\n    return -1\n    \n    \ndef test_find_sub_string():\n    \"\"\"\n    Example:\n    Input = 'abababc', 'ab'\n    Output = 0\n    \n    Input = 'abababc', 'bc'\n    Output = 3\n    \n    Input = 'abababc', 'ab'\n    Output = 2\n    \n    Input = 'abababc', 'abc'\n    Output = -1\n    \"\"\"\n    \n    assert find_sub_string('abababc', 'ab') == 0\n    assert find_sub_string('abababc', 'bc') == 3\n    assert find_sub_string('abababc', 'ab') == 2\n    assert find_sub_string('abababc', 'abc') == -1\n    assert find_sub_string('abc', 'abc') == 0\n    \n    \ndef find_odd_occurrences(lst):\n    \"\"\"\n    This function shall return an array of all odd-indexed occurrences of an integer in a given list. \n    \n    Example:\n    Input = [1,2,2,3,4,5,6,7,7,8,9]\n    Output = [2,3,7,7]\n    \n    Input = [1,2,3]\n    Output = []\n    \"\"\"\n    \n    if len(lst) == 0:\n        return []\n    \n    odd_numbers = []\n    \n    for i in range(len(lst)):\n        if i % 2!= 0:\n            odd_numbers.append(lst[i])\n    \n    return odd_numbers\n    \n",
        "test": "assert "
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    # Solution\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word)!= len(set(word)):\n            continue\n        else:\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert     words_in_sentence('hi') == 'hi'"
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    try:\n        numer, denom = x.split(\"/\")\n        numer = int(numer)\n        denom = int(denom)\n        if denom == 0:\n            return False\n        else:\n            return True\n    except Exception as e:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"1/4\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == 0:\n                nums[i], nums[j] = nums[j], nums[i]\n            elif nums[i] + nums[j] > 0:\n                break\n            else:\n                continue\n    return nums\n",
        "test": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    nums = list(nums)\n    count = 0\n    for i in range(len(nums)):\n        if (nums[i] > 10 and nums[i] % 2 == 1) or (nums[i] < 10 and nums[i] % 2 == 0):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    def triple_sum(n):\n        arr = [1, 3, 7, 13, 21]\n        return triple_sum_helper(arr, n)\n",
        "test": "assert get_max_triples(2) == 3"
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    \n    # Your code goes here\n    # Planets\n    planets = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7,\n    }\n    \n    # Orbit\n    orbits = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7,\n    }\n    \n    # Return empty tuple if any of planet1 and planet2 are not correct planet names\n    if (planet1 not in planets.keys()) or (planet2 not in planets.keys()) or \\\n    (planet1 not in orbits.keys()) or (planet2 not in orbits.keys()):\n        return ()\n    \n    # Find the orbit of planet1 and planet2\n    orbit1 = planets[planet1]\n    orbit2 = planets[planet2]\n    \n    # Find the total number of orbits\n    totalOrbit = orbit1 + orbit2\n    \n    # Calculate the distance between planet1 and planet2\n    distance = abs(orbit1-orbit2)\n    \n    # Return the planets with distance smaller than totalOrbit\n    return tuple(list(planets.keys())[list(orbits.values()).index(distance):list(orbits.values()).index(totalOrbit)])\n    ",
        "test": "assert     bf('venus', 'earth') == ()"
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    new_list = []\n    for item in lst:\n        if len(item) > 1:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n",
        "test": "assert     sorted_list_sum([])     == []"
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return x if n % x == 0 else y\n",
        "test": "assert     x_or_y(3, 2, 3) == 3"
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    # Create a list of the absolute value of the elements in the list\n    # Return the sum of the squares of the negative numbers in the list\n    if len(lst) == 0:\n        return 0\n    else:\n        lst_abs = list(abs(x) for x in lst)\n        return sum(x * x for x in lst_abs if x < 0)\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    return [0 if guess[i] == score else abs(guess[i] - score) for i,score in enumerate(game)]\n    \n",
        "test": "assert     compare([7,14,22,29,35,42,47,57,64],[7,14,22,29,35,42,47,57,64]) == [0,0,0,0,0,0,0,0,0], 'Wrong'"
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    # Write your code here\n    extension_list = []\n    for extension in extensions:\n        extension_list.append(extension.title())\n    class_dict = dict.fromkeys(extension_list)\n    for extension in extension_list:\n        class_dict[extension] = 0\n    for extension in extensions:\n        class_dict[extension.title()] += 1\n    strongest_extension = ''\n    strength = 0\n    for key, value in class_dict.items():\n        if value > strength:\n            strength = value\n            strongest_extension = key\n    return class_name + '.' + strongest_extension\n",
        "test": "assert Strongest_Extension('Cheese', ['Slices', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.Slices'"
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if b in a or a in b:\n        return True\n    else:\n        return False",
        "test": "assert     cycpattern_check('hello','hello') == True, 'Second'"
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    \n    return (num % 10 % 2, num // 10 % 2)\n",
        "test": "assert even_odd_count(0) == (0, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    if not isinstance(number, int):\n        raise ValueError(\"The input must be an int, but given {}.\".format(type(number)))\n    if number > 1000 or number < 1:\n        raise ValueError(\"The input must be an int between 1 and 1000, but given {}.\".format(number))\n    val = number\n    roman = \"\"\n    while val >= 1:\n        if val == 1:\n            roman = roman + \"I\"\n        elif val == 5:\n            roman = roman + \"V\"\n        elif val == 10:\n            roman = roman + \"X\"\n        elif val == 50:\n            roman = roman + \"L\"\n        elif val == 100:\n            roman = roman + \"C\"\n        elif val == 500:\n            roman = roman + \"D\"\n        elif val == 1000:\n            roman = roman + \"M\"\n        else:\n            roman = roman + \"I\"\n        val = val - 1\n    return roman\n",
        "test": "assert     int_to_mini_roman(1) == 'I'"
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    # triangle has equal sides\n    if a == b == c:\n        return False\n    # triangle has only one side\n    elif a == b or b == c or a == c:\n        return True\n    # triangle has two equal sides\n    elif a == b == c == a or a == b == c == b or a == c == b == c:\n        return True\n    # triangle has neither equal sides nor equal sides\n    else:\n        return False\n",
        "test": "assert not right_angle_triangle(10,10,10)"
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"mamal\", \"nana\", \"nana\"]) == \"mamal\", \"Wrong\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return eat_recursive(number, need, remaining, 0, 0)\n",
        "test": "assert "
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result = result + operand[i]\n        elif operator[i-1] == '-':\n            result = result - operand[i]\n        elif operator[i-1] == '*':\n            result = result * operand[i]\n        elif operator[i-1] == '//':\n            result = result // operand[i]\n        elif operator[i-1] == '**':\n            result = result ** operand[i]\n        else:\n            print('Invalid operator')\n            break\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    s = s.replace(' ', '')\n    if s:\n        if s[0].isalpha():\n            s = s[::-1]\n    return s\n",
        "test": "assert solve('a') == 'a'"
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # TODO: Improve this to be more efficient.\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    numbers = []\n    for n in range(a, b + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n",
        "test": "assert     generate_integers(0, 10) == [0, 2, 4, 6, 8, 10]"
    }
]