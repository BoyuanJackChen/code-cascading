[
    {
        "number": 0,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    length = len(numbers)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if (numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert ",
        "num_ids": 177
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    paren_list = list(paren_string)\n",
        "test": "assert     separate_paren_groups('{1,(2),3}') == ['{', '1', ',', '(', '2', ',', '3', '}']",
        "num_ids": 499
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Separate into integer and fraction\n    integer, fraction = divmod(number, 1)\n    return integer\n",
        "test": "assert     truncate_number(2.0) == 2",
        "num_ids": 147
    },
    {
        "number": 3,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if operations[0] <= 0:\n        return True\n    for i in range(1, len(operations)):\n        if operations[i] > 0:\n            return False\n    return False\n",
        "test": "assert ",
        "num_ids": 206
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    mean = sum(numbers) / len(numbers)\n    deviations = (n - mean for n in numbers)\n    return sum(abs(x) for x in deviations) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1.",
        "num_ids": 197
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not numbers:\n        return []\n    n = len(numbers)\n    if n == 1:\n        return [numbers[0], delimeter]\n    else:\n        return [delimeter] * (n - 1) + numbers + [delimeter]\n",
        "test": "assert     intersperse([], 0) == []",
        "num_ids": 215
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    paren_strings = list(paren_string.split(' '))\n    nested_list = []\n    for string in paren_strings:\n        depth = 0\n        nested_list.append(depth)\n        for char in string:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n        nested_list.append(depth)\n",
        "test": "assert     parse_nested_parens('(((()()()()()(((())))((((())())))())))') == [",
        "num_ids": 255
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    filtered_list = []\n    for string in strings:\n        if substring.lower() in string.lower():\n            filtered_list.append(string)\n    return filtered_list\n",
        "test": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"foo\") == []",
        "num_ids": 226
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 183
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(numbers) == 1:\n        return numbers\n    last_max = numbers[0]\n    maxes = []\n    for num in numbers[1:]:\n        last_max = max(last_max, num)\n        maxes.append(last_max)\n    return maxes\n",
        "test": "assert ",
        "num_ids": 239
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # base cases\n    if not string:\n        return ''\n",
        "test": "assert make_palindrome('bac') == 'bac'",
        "num_ids": 223
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # return ''.join(chr(int(x, 2) ^ int(y, 2)) for x, y in zip(a, b))\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "test": "assert         string_xor(\"\", \"\") == \"\"",
        "num_ids": 218
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert     longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']) == 'aaaaaa'",
        "num_ids": 171
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(2,2) == 2",
        "num_ids": 136
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if not string:\n        return []\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 146
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    numbers = '0'\n    if n > 0:\n        numbers = numbers +'' +''.join(map(str, range(1, n+1)))\n    return numbers\n",
        "test": "assert     string_sequence(5) == '0 1 2 3 4'",
        "num_ids": 142
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1",
        "num_ids": 101
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    music_string = music_string.strip()\n    notes = ['o', 'o|', '.', '|o|', '|o', '.', '.', '|o|', 'o|', 'o|', '|o|', 'o|', '|o', 'o|', '|o|', 'o|', 'o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o",
        "test": "assert     parse_music(\"'o|'|'o'\") == [2,2,1]",
        "num_ids": 1386
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"\", \"1\")     == 0",
        "num_ids": 227
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    new_numbers = numbers.split()\n    new_numbers.sort()\n    return \" \".join(new_numbers)\n",
        "test": "assert     sort_numbers(\"one two\") == \"two one\", \"one two failed\"",
        "num_ids": 204
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    nums = numbers[:]\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    idx = None\n    num = None\n    if diff == 0:\n        return (nums[0], nums[1])\n    else:\n        for i, num in enumerate(nums):\n            if diff == 0:\n                return (num, num)\n            if abs(num - max_num) < abs(num - min_num):\n                diff = abs(num - max_num)\n                idx = i\n                num = max_num\n                max_num = num\n            else:\n                diff = abs(num - min_num)\n                idx = i\n                num = min_num\n                min_num = num\n    return (nums[idx], nums[idx + 1])\n",
        "test": "assert ",
        "num_ids": 332
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n",
        "test": "assert ",
        "num_ids": 423
    },
    {
        "number": 22,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return filter(lambda x: isinstance(x, int), values)\n",
        "test": "assert ",
        "num_ids": 112
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0, \"Empty string should return 0\"",
        "num_ids": 97
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    divisor = 1\n    while n > divisor:\n        divisor += 1\n    return divisor\n",
        "test": "assert largest_divisor(3) == 3",
        "num_ids": 125
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    import math\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(8) == [2, 2, 2]",
        "num_ids": 372
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    n = len(numbers)\n    s = set(numbers)\n    return list(s)\n",
        "test": "assert     remove_duplicates([1, 2, 1, 3, 4]) == [1, 2, 3, 4], \"Wrong!\"",
        "num_ids": 120
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('abc') == 'ABC'",
        "num_ids": 119
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 122
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\", \"test4\"], \"test\") == [\"test\", \"test1\", \"test2\", \"test3\", \"test4\"]",
        "num_ids": 214
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 129
    },
    {
        "number": 31,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if n < 1:\n        return False\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(7) == True",
        "num_ids": 159
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    xs = sorted(xs)\n    if xs[0] == 0:\n        return None\n    if xs[0]!= 0 and xs[0] > 0:\n        return 0\n    if xs[0]!= 0 and xs[0] < 0:\n        return 0\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        return 0\n    if xs[0] > 0:\n        return 0\n    if xs[1] == 0:\n        return 1\n    if xs[1] == 1:\n        return xs[2]\n    if xs[1] == -1:\n        return -xs[2]\n    if xs[1] == -2:\n        return 0\n    if xs[1] == -3:\n        return -xs[2]\n    if xs[1] == -4:\n        return 0\n    if xs[1] == -5:\n        return xs[2]\n    if xs[1] == -6:\n        return 0\n    if xs[1] == -7:\n        return -xs[2]\n    if xs[1] == -8:\n        return 0\n    if xs[1] == -9:\n        return xs[2]\n    if xs[1] == -10:\n        return 0\n    if xs[1] == -11:\n        return -xs[2]\n    if xs[1] == -12:\n        return 0\n    if xs[1] == -13:\n        return -xs[2]\n    if xs[1] == -14:\n        return 0\n    if xs[1] == -15:\n        return -xs[2]\n    if xs[1] == -16:\n        return 0\n    if xs[1] == -17:\n        return -xs[2]\n    if xs[1] == -18:\n        return 0\n    if xs[1] == -19:\n        return -xs[2]\n    if xs[1] == -20:\n        return 0\n    if xs[1] == -21:\n        return -xs[2]\n    if xs[1] == -22:\n        return 0\n    if xs[1] == -23:\n        return -xs[2]\n    if xs[1] == -24:\n        return 0\n    if xs[1] == -25:\n        return -xs[2]\n    if xs[1] == -26:\n        return 0\n    if xs[1] == -27:\n        return -xs[2]\n    if xs[1] == -28:\n        return 0\n    if xs[1] == -29:\n        return -xs[2]\n    if xs[1] == -30:\n        return 0\n    if xs[1] == -31:\n        return -xs[2]\n    if xs[1] == -32:\n        return 0\n    if xs[1] == -33:\n        return -xs[2]\n    if xs[1] == -34:\n        return 0\n    if xs[1] == -35:\n        return -xs[2]\n    if xs[1] == -36:\n        return 0\n    if xs[1] == -37:\n        return -xs[2]\n    if xs[1] == -38:\n        return 0\n    if xs[1] == -39:\n        return -xs[2]\n    if xs[1] == -40:\n        return 0\n    if xs[1] == -41:\n        return -xs[2]\n    if xs[1] == -42:\n        return 0\n    if xs[1] == -43:\n        return -xs[2]\n    if xs[1] == -44:\n        return 0\n    if xs[1] == -45:\n        return -xs[2]\n    if xs[1] == -46:\n        return 0\n    if xs[1] == -47:\n        return -xs[2]\n    if xs[1] == -48:\n        return 0\n    if xs[1] == -49:",
        "test": "assert find_zero([1, 2, 3]) == 2",
        "num_ids": 1223
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    l_sorted = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_sorted.append(l[i])\n        else:\n            l_sorted.append(l[i])\n            l_sorted.append(l[i])\n    return l_sorted\n",
        "test": "assert ",
        "num_ids": 381
    },
    {
        "number": 34,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([0, 1, 1, 1, 1, 1, 2, 2, 2, 2]) == [0, 1, 2]",
        "num_ids": 140
    },
    {
        "number": 35,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if l == []:\n        return None\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_element([1,3,2,4]) == 4",
        "num_ids": 167
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    count = 0\n    for i in range(1, n):\n        if i % 7 == 0:\n            count += 1\n            if i % 11 == 0:\n                count += 1\n                if i % 13 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     fizz_buzz(15) == 4",
        "num_ids": 237
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    even_indices = []\n    odd_indices = []\n    for i, val in enumerate(l):\n        if i%2 == 0:\n            even_indices.append(val)\n        else:\n            odd_indices.append(val)\n    even_indices.sort()\n    odd_indices.sort()\n    l = even_indices + odd_indices\n    return l\n",
        "test": "assert     sort_even([1,2,3,4,5,6,7,8]) == [1,3,5,7,2,4,6,8]",
        "num_ids": 478
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not s:\n        return \"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"Hello\") == \"Hlo\"",
        "num_ids": 395
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n < 0:\n        raise ValueError(f\"{n} is not prime\")\n    if n == 0 or n == 1:\n        return 2\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n        if is_prime(b):\n            return b\n",
        "test": "assert ",
        "num_ids": 188
    },
    {
        "number": 40,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return any((x + y + z) == 0 for x, y, z in combinations(l, 3))\n",
        "test": "assert ",
        "num_ids": 204
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    col_num = 0\n    for i in range(n-1):\n        for j in range(n-1):\n            if (cars_a[i].x_coord + cars_a[i].speed >= cars_b[j].x_coord) and (cars_a[i].x_coord - cars_a[i].speed <= cars_b[j].x_coord + cars_b[j].width):\n                if cars_a[i].y_coord <= cars_b[j].y_coord + cars_b[j].height:\n                    col_num += 1\n                    cars_b[j].hit(cars_a[i].velocity)\n                    cars_a[i].hit(cars_b[j].velocity)\n    return col_num\n",
        "test": "assert ",
        "num_ids": 428
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 148
    },
    {
        "number": 43,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    seen_elements = set()\n    for i in l:\n        if -i in seen_elements:\n            return True\n        seen_elements.add(i)\n    return False\n",
        "test": "assert ",
        "num_ids": 196
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    y = x % base\n    if y == 0:\n        return str(y)\n    else:\n        return change_base(y, base) + str(x//base)\n",
        "test": "assert change_base(13, 8) == '11000'",
        "num_ids": 139
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    area = a * h * 0.5\n    return area\n",
        "test": "assert ",
        "num_ids": 43
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    # return (fib4(n-1) + fib4(n-2)) if n > 1 else 0\n    a, b, c = 0, 1, 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n    return c\n",
        "test": "assert     fib4(1) == 0",
        "num_ids": 263
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    #create list\n    list_sorted = sorted(l)\n    len_list = len(list_sorted)\n    index = len_list//2\n    if len_list % 2 == 1:\n        return list_sorted[index]\n    else:\n        return (list_sorted[index-1] + list_sorted[index])/2\n",
        "test": "assert median([1,2,3]) == 2",
        "num_ids": 271
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    text = text.lower()\n    for i in range(len(text)//2):\n        if text[i]!= text[len(text)-i-1]:\n            return False\n    return True\n",
        "test": "assert     is_palindrome('racecar') == True",
        "num_ids": 189
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return (n % p)\n",
        "test": "assert modp(10, 17) == 10",
        "num_ids": 59
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"\") == \"\"",
        "num_ids": 178
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if text.startswith(vowel):\n            return text[1:]\n    return text\n",
        "test": "assert     remove_vowels(\"\")     == \"\"",
        "num_ids": 199
    },
    {
        "number": 52,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in l:\n        if i <= t:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 69
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 81
    },
    {
        "number": 54,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"Hello World\", \"Hello World\")        ==     True",
        "num_ids": 137
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1)    == 1",
        "num_ids": 120
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    closing_bracket_stack = []\n    for i, bracket in enumerate(brackets):\n        if bracket == \"<\":\n            if not closing_bracket_stack:\n                return False\n            if closing_bracket_stack[-1] == \">\":\n                closing_bracket_stack.pop()\n            else:\n                return False\n        elif bracket == \">\":\n            closing_bracket_stack.append(bracket)\n    return False\n",
        "test": "assert     correct_bracketing(\"(\") == False, \"wrong\"",
        "num_ids": 419
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    count = 1\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            count = count + 1\n        if count > 1:\n            return False\n    return True\n",
        "test": "assert     not monotonic([10, 10, 8, 7, 6, 5])",
        "num_ids": 173
    },
    {
        "number": 58,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    \n    l3 = []\n    for num in l1:\n        if num in l2 and num not in l3:\n            l3.append(num)\n    return sorted(l3)\n",
        "test": "assert ",
        "num_ids": 189
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    largest_prime = 2\n    if n % 2 == 0:\n        n /= 2\n        if n % largest_prime == 0:\n            largest_prime = largest_prime * 2\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            largest_prime = i\n            break\n    return largest_prime\n",
        "test": "assert     largest_prime_factor(5) == 5",
        "num_ids": 242
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 102
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    open_brackets = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(())\") == True",
        "num_ids": 345
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # YOUR CODE HERE\n    # Return a new list of coefficients that is the derivative of xs\n    n = len(xs)\n    # Your code here\n    return [xs[i] * (n-i) for i in range(0,n)]\n",
        "test": "assert ",
        "num_ids": 215
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 221
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # get count of vowels in the string\n    vowels = 'aeiouy'\n    count = 0\n    for v in vowels:\n        for c in s:\n            if c == v:\n                count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 275
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n",
        "test": "assert     circular_shift(5, 1) == '5'",
        "num_ids": 228
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return ord(s[0])\n    else:\n        return ord(s[0]) + digitSum(s[1:])\n",
        "test": "assert     digitSum('1234567890123') == 45",
        "num_ids": 151
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    # Total number of apples and oranges\n    apple, orange = s.split()\n    n_a, n_o = int(apple), int(orange)\n    \n    # Number of fruits in the basket\n    n_fruits = n_a + n_o\n    \n    # Number of mangoes\n    mangoes = n_o - n_a\n    \n    if mangoes == 0:\n        return n_fruits\n    else:\n        return mangoes\n",
        "test": "assert ",
        "num_ids": 1221
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    even_values = list()\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n    if len(even_values) == 0:\n        return []\n    smallest = min(even_values)\n    smallest_index = even_values.index(smallest)\n    return [smallest, smallest_index]\n",
        "test": "assert     pluck([2, 6, 3, 2]) == [2, 0]",
        "num_ids": 221
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    # Check if the list is empty\n    if not lst:\n        return -1\n    \n    # Assign variable to the last element\n    elif len(lst) == 1:\n        return lst[0]\n",
        "test": "assert ",
        "num_ids": 275
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # TODO: Implement this function.\n    pass\n    return lst\n",
        "test": "assert ",
        "num_ids": 391
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if a + b > c and b + c > a and c + a > b:\n        return round((a * b * c) / 2, 2)\n    return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 5",
        "num_ids": 434
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return True if q[-1]==q[0] and sum(q)<=w and all(is_palindrome(i) for i in q) else False\n",
        "test": "assert ",
        "num_ids": 238
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return min(len(arr)-arr.index(arr[-1]), len(arr)-arr.index(arr[0]))\n",
        "test": "assert ",
        "num_ids": 145
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    cnt = []\n    for elem in lst1:\n        for el in lst2:\n            if len(elem) < len(el) and elem == el:\n                cnt.append(elem)\n    return cnt\n",
        "test": "assert ",
        "num_ids": 320
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    multiprime_array = [2,3,5]\n    if a % 2 == 0:\n        return False\n    for mprime in multiprime_array:\n        if mprime*a == a:\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(9) == False",
        "num_ids": 211
    },
    {
        "number": 76,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return x ** n == x\n",
        "test": "assert is_simple_power(0, 1) == True",
        "num_ids": 102
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return a**3 == a\n",
        "test": "assert not iscube(4)",
        "num_ids": 53
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    num = num.upper()\n    for i in num:\n        if i not in \"ABCDEF\":\n            continue\n        else:\n            return int(i == \"B\") + int(i == \"D\") + int(i == \"E\") + int(i == \"F\")\n",
        "test": "assert hex_key(\"1F\") == 8, \"incorrect value\"",
        "num_ids": 325
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not isinstance(decimal, int):\n        raise TypeError(\"You must give a number.\")\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 215
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return s.count(s[0]) == len(s) and s[0] not in s[1:]\n",
        "test": "assert is_happy(\"ghi\") == False, \"Should not be happy\"",
        "num_ids": 189
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    gpa_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            gpa_list.append('A+')\n        elif grade >= 3.7:\n            gpa_list.append('A')\n        elif grade >= 3.3:\n            gpa_list.append('A-')\n        elif grade >= 3.0:\n            gpa_list.append('B+')\n        elif grade >= 2.7:\n            gpa_list.append('B')\n        elif grade >= 2.3:\n            gpa_list.append('B-')\n        elif grade >= 2.0:\n            gpa_list.append('C+')\n        elif grade >= 1.7:\n            gpa_list.append('C')\n        elif grade >= 1.3:\n            gpa_list.append('C-')\n        elif grade >= 1.0:\n            gpa_list.append('D+')\n        elif grade >= 0.7:\n            gpa_list.append('D')\n        elif grade >= 0.0:\n            gpa_list.append('D-')\n        else:\n            gpa_list.append('E')\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'], 'WRONG ANSWER'",
        "num_ids": 1090
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_length(\"Able was I, ere I saw Elba\") == False",
        "num_ids": 165
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    counter = 0\n    for i in range(1, n+1):\n        if i % 10 == 1:\n            if (i - (i // 10)) % 10 == 1:\n                counter += 1\n        else:\n            if i % (i // 10) == 1:\n                counter += 1\n    return counter\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 271
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    # Solution\n    return\n",
        "test": "assert ",
        "num_ids": 1154
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(0, len(lst), 2):\n        lst.append(lst[i])\n    return lst\n",
        "test": "assert ",
        "num_ids": 137
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    shuffle = \"\".join(s.split())\n    shuffle = ''.join(sorted(shuffle))\n    return shuffle\n",
        "test": "assert     anti_shuffle(\"hello\") == \"ehllo\"",
        "num_ids": 476
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    result = []\n    for row in lst:\n        for idx, elem in enumerate(row):\n            if elem == x:\n                result.append((idx, idx))\n",
        "test": "assert ",
        "num_ids": 472
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Create a new list with the same length as the given array\n    #...\n",
        "test": "assert ",
        "num_ids": 272
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # define a helper function\n    def helper(s):\n        a = ord('a')\n        b = ord('b')\n        c = ord('c')\n        d = ord('d')\n        e = ord('e')\n        f = ord('f')\n        g = ord('g')\n        h = ord('h')\n        i = ord('i')\n        j = ord('j')\n        k = ord('k')\n        l = ord('l')\n        m = ord('m')\n        n = ord('n')\n        o = ord('o')\n        p = ord('p')\n        q = ord('q')\n        r = ord('r')\n        s = ord('s')\n        t = ord('t')\n        u = ord('u')\n        v = ord('v')\n        w = ord('w')\n        x = ord('x')\n        y = ord('y')\n        z = ord('z')\n        return (chr(a+((s+2)*(a-a+2))), chr(b+((s+2)*(b-b+2))), chr(c+((s+2)*(c-c+2))), chr(d+((s+2)*(d-d+2))), chr(e+((s+2)*(e-e+2))), chr(f+((s+2)*(f-f+2))), chr(g+((s+2)*(g-g+2))), chr(h+((s+2)*(h-h+2))), chr(i+((s+2)*(i-i+2))), chr(j+((s+2)*(j-j+2))), chr(k+((s+2)*(k-k+2))), chr(l+((s+2)*(l-l+2))), chr(m+((s+2)*(m-m+2))), chr(n+((s+2)*(n-n+2))), chr(o+((s+2)*(o-o+2))), chr(p+((s+2)*(p-p+2))), chr(q+((s+2)*(q-q+2))), chr(r+((s+2)*(r-r+2))), chr(s+((s+2)*(s-s+2))), chr(t+((s+2)*(t-t+2))), chr(u+((s+2)*(u-u+2))), chr(v+((s+2)*(v-v+2))), chr(w+((s+2)*(w-w+2))), chr(x+((s+2)*(x-x+2))), chr(y+((s+2)*(y-y+2))), chr(z+((s+2)*(z-z+2))))\n    \n    # call the helper function and return the result\n    return helper(s)\n",
        "test": "assert ",
        "num_ids": 984
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if lst[-1] <= lst[-2]:\n        return lst[-1]\n    if lst[0] <= lst[-1]:\n        return lst[0]\n    for i in range(0, len(lst)-2):\n        if lst[i] <= lst[i+1] and lst[i+1] <= lst[i+2]:\n            return lst[i+1]\n    return None\n",
        "test": "assert ",
        "num_ids": 259
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return S.count(\"I\")\n",
        "test": "assert     is_bored('I.') == 1",
        "num_ids": 171
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y == z and isinstance(x,int) and isinstance(y,int) and isinstance(z,int)\n",
        "test": "assert     any_int(0, 0, 1) == False, \"Error. Please, try again.\"",
        "num_ids": 217
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    for i in range(len(message)):\n        if message[i].isalpha():\n            if message[i].isupper():\n                if ord(message[i])+2>ord('Z'):\n                    message=message[:i]+chr(ord(message[i])+2-ord('Z'))+message[i+1:]\n                else:\n                    message=message[:i]+chr(ord(message[i])+2)+message[i+1:]\n            else:\n                if ord(message[i])+2>ord('a'):\n                    message=message[:i]+chr(ord(message[i])+2-ord('a'))+message[i+1:]\n                else:\n                    message=message[:i]+chr(ord(message[i])+2)+message[i+1:]\n    return message\n",
        "test": "assert     encode('') == ''",
        "num_ids": 663
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    #!!! You can split the list in groups of size 3.\n    #!!! Iterate over the groups, find the largest prime and add the value from the group to the output\n    #!!! Return the output as an int.\n    output = 0\n    lst.sort()\n    for i in range(0,len(lst),3):\n        a = lst[i]\n        b = lst[i+1]\n        c = lst[i+2]\n        for j in range(2,b):\n            if b % j == 0:\n                break\n            elif b == 1:\n                return b\n        else:\n            c = c * 10\n            output += a\n            output += c\n    return output\n",
        "test": "assert ",
        "num_ids": 406
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for k in dict:\n            if type(k)!= str or type(dict[k])!= str:\n                return False\n            elif k.isupper() or k.islower():\n                continue\n            else:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({'gokul': 'kajs', 'Kajs':'sdf', 'kajsd':'sdf', 'kajs': 'kajs'}) == False, 'no single key'",
        "num_ids": 344
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    prime_numbers = []\n    for i in range(n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert ",
        "num_ids": 241
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    print(a % 10, a // 10)\n    print(b % 10, b // 10)\n    return a * b\n",
        "test": "assert ",
        "num_ids": 236
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    i = 0\n    count = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 2\n    return count\n",
        "test": "assert     count_upper('mOVE') == 1, \"Should be:'m', 'O', 'V', 'e'\"",
        "num_ids": 206
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    num = int(value)\n    closest = num\n    if num > 0:\n        closest = num\n    elif num < 0:\n        closest = -num\n    if abs(num) == 1:\n        return closest\n    elif abs(num) == 0.5:\n        return int(num)\n    elif abs(num) == 0:\n        return 0\n    else:\n        if abs(num) < closest:\n            return closest\n        else:\n            return int(num)\n",
        "test": "assert ",
        "num_ids": 234
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return [0]\n    elif n % 2 == 0:\n        return make_a_pile(n-2) + [n*2]\n    else:\n        return make_a_pile(n-1) + [n*2+1]\n",
        "test": "assert     make_a_pile(0) == [0]",
        "num_ids": 299
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return s.split()\n",
        "test": "assert     words_string(\"My name is Angela\") == [\"My\", \"name\", \"is\", \"Angela\"]",
        "num_ids": 197
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    elif x > y:\n        return -1\n    elif x < y:\n        return -1\n    else:\n        return -1\n",
        "test": "assert     choose_num(5, 10) == 10",
        "num_ids": 156
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if n > m:\n        return -1\n",
        "test": "assert ",
        "num_ids": 148
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    out_list = []\n    for i in x:\n        if is_digit(i) == False:\n            out_list.append(i)\n    return sorted(out_list)\n",
        "test": "assert     unique_digits([1,2,3,4,5,6,7,8,9,10]) ==    [1,3,5,7,9,10]",
        "num_ids": 208
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # iterate through the array\n    for i in range(len(arr)):\n        # if the value is in between 1 and 9\n        if 1 <= arr[i] <= 9:\n            # set the name to the corresponding number\n            arr[i] = numbers[arr[i]]\n    # reverse the array\n    arr.reverse()\n    # sort the array\n    arr.sort()\n    return arr\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['Ten', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']",
        "num_ids": 526
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    n = int(n)\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    else:\n        return [f(i-1) for i in range(1,n+1)]\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 250
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # calculate palindromes that range from 1 to n\n    #   * then count how many are even and odd\n    #   * return tuple with counts\n    count_even, count_odd = 0, 0\n    for i in range(1, n+1):\n        # we need to check palindrome sequence\n        if is_palindrome(i) and i % 2 == 0:\n            count_even += 1\n        if is_palindrome(i) and i % 2 == 1:\n            count_odd += 1\n",
        "test": "assert ",
        "num_ids": 268
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    count = 0\n    for num in arr:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num = num // 10\n        if sum(digits) > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([-1,2,3]) == 2",
        "num_ids": 1293
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # code here\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0] >= arr[1]:\n            return True\n        else:\n            return False\n    elif len(arr) > 2:\n        for i in range(0, len(arr)):\n            if i == 0:\n                if arr[i] >= arr[i+1]:\n                    return False\n            elif i == len(arr) - 1:\n                if arr[i] >= arr[i-1]:\n                    return False\n            else:\n                if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                    return False\n        return True\n",
        "test": "assert     move_one_ball([1,3,2]) == False",
        "num_ids": 481
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if lst2 == lst1:\n        return \"YES\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 1:\n                for j in range(len(lst2)):\n                    if lst2[j] % 2 == 0:\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n                        if lst1 == lst2:\n                            return \"YES\"\n                        else:\n                            lst1[i], lst2[j] = lst2[j], lst1[i]\n        return \"NO\"\n",
        "test": "assert     exchange([], []) == \"YES\"",
        "num_ids": 507
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    if not test:\n        return {}\n    \n    hist = {}\n    \n    for letter in test:\n        if hist.get(letter):\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    \n    return hist\n",
        "test": "assert     histogram(\"g\") == {\"g\": 1}",
        "num_ids": 345
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    for char in s:\n        if char in c:\n            s = s.replace(char,'')\n    if s=='':\n        return (s,'True')\n    else:\n        return (s,'False')\n",
        "test": "assert     reverse_delete(s = \"abcc\", c = \"cb\") == (False, 'cba')",
        "num_ids": 318
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return [\"the number of odd elements {0} of the string {1} of the {2}.\".format(\n        odd_count_helper(lst[i]),\n        lst[i],\n        i+1,\n        )\n        for i in range(len(lst))\n        if len(lst[i]) > 1]\n",
        "test": "assert     odd_count([\"9\", \"8\", \"7\", \"4\", \"4\", \"9\"]) == [\"0\", \"0\", \"1\", \"1\", \"1\", \"0\"]",
        "num_ids": 492
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(len(nums)):\n        sum = nums[i]\n        for j in range(i+1, len(nums)):\n            sum += nums[j]\n            if sum < 0:\n                break\n        if sum >= 0:\n            return sum\n",
        "test": "assert ",
        "num_ids": 227
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Solution\n    \n    # Helper function\n    def is_valid(grid, row, col):\n        if row < 0 or col < 0:\n            return False\n        if row >= len(grid) or col >= len(grid[0]):\n            return False\n        return True\n",
        "test": "assert ",
        "num_ids": 102
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sorted(arr, key = lambda x: x * -1 if x else 0)\n",
        "test": "assert     sort_array([1,1,1,1,1]) == [1,1,1,1,1]",
        "num_ids": 223
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    return \n",
        "test": "assert ",
        "num_ids": 211
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    for i in range(1, len(word)):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('FROM') == ''",
        "num_ids": 316
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    new_lst = []\n    \n    for i, val in enumerate(lst):\n        if val == '(':\n            new_lst.append(i)\n        else:\n            new_lst.append(i)\n            \n    for i in range(len(lst)):\n        if lst[i] == ')':\n            if i!= len(lst) - 1:\n                if lst[i+1]!= '(':\n                    return 'No'\n                else:\n                    new_lst.pop(0)\n    if len(new_lst) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['((())', '))()()']) == 'No'",
        "num_ids": 294
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # initialize\n    max_list = []\n    arr = sorted(arr)\n    # find the max\n    for i in range(k):\n        max_list.append(arr[i])\n    # print(max_list)\n    return max_list\n",
        "test": "assert ",
        "num_ids": 202
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sum(lst[2::2])\n",
        "test": "assert False == solution([])",
        "num_ids": 141
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    start, end = 0, 0\n    while end < len(arr):\n        while end < len(arr) and len(str(arr[start])) <= k:\n            start += 1\n        end += 1\n        while end < len(arr) and len(str(arr[end])) <= k:\n            end += 1\n        if end - start >= k:\n            end -= 1\n        arr[start:end] = [sum(arr[start:end])]\n    return sum(arr)\n",
        "test": "assert     add_elements(list(range(100, 0, -1)), 4) == 101",
        "num_ids": 342
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        result.append(n)\n    return sorted(result)\n",
        "test": "assert     get_odd_collatz(2) == [2]",
        "num_ids": 261
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if not date:\n        return False\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 4 and day > 29:\n        return False\n    if month == 6 and day > 30:\n        return False\n    if month == 9 and day > 30:\n        return False\n    if month == 11 and day > 30:\n        return False\n    if month == 1 and day > 31:\n        return False\n    if month == 3 and day > 31:\n        return False\n    if month == 5 and day > 31:\n        return False\n    if month == 7 and day > 31:\n        return False\n    if month == 8 and day > 31:\n        return False\n    if month == 10 and day > 31:\n        return False\n    if month == 12 and day > 31:\n        return False\n    if year < 0:\n        return False\n    return True\n",
        "test": "assert     valid_date('1-2-2019') == True, '1-2-2019 is a valid date'",
        "num_ids": 699
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return txt.split(' ')\n",
        "test": "assert     split_words('abc') == ['ab', 'c']",
        "num_ids": 82
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "test": "assert ",
        "num_ids": 126
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \"\"\"My Solution\"\"\"\n    \"\"\"# Check if the first interval intersects the second\n    if (interval1[0] <= interval2[0] and interval1[0] >= interval2[1]) or (\n        interval1[0] >= interval2[0] and interval1[0] <= interval2[1]):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert ",
        "num_ids": 413
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if not arr:\n        return None\n    product = 1\n    for i in arr:\n        if i >= 0:\n            product *= i\n        else:\n            product *= -i\n    return product\n",
        "test": "assert     prod_signs([1, -2, -1, 0, 0]) == 0, prod_signs([1, -2, -1, 0, 0])",
        "num_ids": 262
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    n = len(grid)\n    if n < 2: return []\n    if k > n: return []\n",
        "test": "assert ",
        "num_ids": 467
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n < 1:\n        return None\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    res = []\n    res.append(1)\n    res.append(3)\n    for i in range(n):\n        res.append(tri(i)[i])\n    return res\n",
        "test": "assert ",
        "num_ids": 213
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 1\n    if n % 10 % 2 == 1:\n        return n*digits(n//10)\n    else:\n        return 0",
        "test": "assert     digits(1) == 1",
        "num_ids": 316
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 278
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sum([x**2 for x in lst])\n",
        "test": "assert ",
        "num_ids": 146
    },
    {
        "number": 134,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha() and not txt[-1].isalpha():\n            return True\n        else:\n            return False\n",
        "test": "assert     check_if_last_char_is_a_letter('abcd') == False, \"All lowercase letters\"",
        "num_ids": 275
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if len(arr) < 3:\n        return -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([4,5,3,2,1]) == 0",
        "num_ids": 179
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return ((min(lst) if lst else None), (max(lst) if lst else None))",
        "test": "assert     largest_smallest_integers([0,1,2,4]) == (0,-4)",
        "num_ids": 299
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # Solution\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(12,4) == 12 ",
        "num_ids": 463
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return n%2 == 0 and (n - n%2)%2 == 0\n",
        "test": "assert     is_equal_to_sum_even(18)",
        "num_ids": 145
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return math.factorial(n)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 132
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return text.replace(\" \", \"_\")\n",
        "test": "assert     fix_spaces('a b c') == 'a_b_c'",
        "num_ids": 89
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if file_name.find('.') == -1:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    elif len(file_name) >= 3:\n        if file_name[0] == '0' or file_name[0] == '1' or file_name[0] == '2' or file_name[0] == '3' or file_name[0] == '4' or file_name[0] == '5' or file_name[0] == '6' or file_name[0] == '7' or file_name[0] == '8' or file_name[0] == '9':\n            if file_name[1] == '.':\n                if file_name[2] == '.':\n                    if file_name[3] == '0' or file_name[3] == '1' or file_name[3] == '2' or file_name[3] == '3' or file_name[3] == '4' or file_name[3] == '5' or file_name[3] == '6' or file_name[3] == '7' or file_name[3] == '8' or file_name[3] == '9':\n                        if file_name[4] == '.' or file_name[4] == 'txt' or file_name[4] == 'exe' or file_name[4] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n",
        "test": "assert     file_name_check('my_test1.txt') == 'No', 'the output is not correct'",
        "num_ids": 734
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    final_sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            final_sum += lst[i] ** 2\n        if i % 4 == 0:\n            final_sum += lst[i] ** 3\n    return final_sum\n",
        "test": "assert ",
        "num_ids": 301
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    words = sentence.split()\n",
        "test": "assert ",
        "num_ids": 217
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if x[0] == \"0\":\n        return False\n    elif x[1] == \"0\":\n        return False\n    elif x[0].isdigit() == True and x[1].isdigit() == True and n[0].isdigit() == True and n[1].isdigit() == True:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"3/4\", \"2/3\") == True",
        "num_ids": 254
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return nums\n",
        "test": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 309
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    special = 0\n    for i in nums:\n        if (i >= 10 and (i % 2)!= 0):\n            special += 1\n    return special\n",
        "test": "assert ",
        "num_ids": 284
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def is_multiple_of_three(n):\n        return n % 3 == 0\n    return sum([is_multiple_of_three(i) and is_multiple_of_three(j) and is_multiple_of_three(k) for i in range(n+1) for j in range(i+1, n+1) for k in range(j+1, n+1) if i+j+k == n])\n",
        "test": "assert ",
        "num_ids": 270
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    planets = {\"Sun\": 0, \"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n    planets1 = {\"Sun\": 0, \"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n    list1 = []\n    for i in range(1,9):\n        list1.append(planets1[planet1])\n        planets1[planet1] += 1\n    for i in range(1,9):\n        if planets[planet2] < planets1[planet1] - i:\n            list1.append(planets1[planet2])\n            planets1[planet2] += 1\n    list1.sort()\n    return tuple(list1)\n",
        "test": "assert ",
        "num_ids": 425
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return sorted(lst)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 451
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\nprint(x_or_y(4, 2, 8))\n",
        "test": "assert ",
        "num_ids": 116
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    s = 0\n    for num in lst:\n        if num % 2!= 0:\n            s += num**2\n    return s\n    \ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 251
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    score = []\n    guess = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(game[i] - guess[i]))\n        guess.append(game[i])\n    return score\n    \n    \n",
        "test": "assert     compare([[100,100,100],[0,0,100],[0,0,100],[0,100,100]], ",
        "num_ids": 339
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if class_name not in extensions:\n        return class_name\n    for extension in extensions:\n        extension_class = extension.split('.')\n        extension_class = extension_class[1]\n        if extension_class.isupper():\n            extension_class = extension_class.upper()\n        if class_name.islower():\n            class_name = class_name.upper()\n        if (extension_class.upper() - class_name.upper()) > (extension_class.lower() - class_name.lower()):\n            return extension_class\n    return class_name\n",
        "test": "assert ",
        "num_ids": 239
    },
    {
        "number": 154,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    ab = a + a\n    return b in ab or ab in b\n",
        "test": "assert     cycpattern_check('waterbottle','erbottlewat') == True",
        "num_ids": 336
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    num_list = list(str(num))\n    even = 0\n    odd = 0\n    for num in num_list:\n        if int(num) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert ",
        "num_ids": 141
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = abs(number)\n    roman = ''\n    number = n\n    thousands = int(n // 1000)\n    n = n - thousands * 1000\n    for x in range(thousands):\n        roman = roman +'m'\n    if n >= 900:\n        roman = roman + 'cm'\n        n = n - 900\n    if n >= 500:\n        roman = roman + 'd'\n        n = n - 500\n    if n >= 400:\n        roman = roman + 'cd'\n        n = n - 400\n    if n >= 100:\n        roman = roman + 'c'\n        n = n - 100\n    if n >= 90:\n        roman = roman + 'xc'\n        n = n - 90\n    if n >= 50:\n        roman = roman + 'l'\n        n = n - 50\n    if n >= 40:\n        roman = roman + 'xl'\n        n = n - 40\n    if n >= 10:\n        roman = roman + 'x'\n        n = n - 10\n    if n >= 9:\n        roman = roman + 'ix'\n        n = n - 9\n    if n >= 5:\n        roman = roman + 'v'\n        n = n - 5\n    if n >= 4:\n        roman = roman + 'iv'\n        n = n - 4\n    if n >= 1:\n        roman = roman + 'i'\n        n = n - 1\n    return roma",
        "test": "assert     int_to_mini_roman(4) == \"IV\"",
        "num_ids": 860
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(2, 3, 4) == False, 'Should be False'",
        "num_ids": 1129
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    max_characters = 0\n    max_words = \"\"\n    for word in words:\n        if len(word) > max_characters:\n            max_characters = len(word)\n            max_words = word\n    return max_words\n",
        "test": "assert     find_max([ \"apple\", \"banana\", \"grape\", \"grape\", \"mango\" ] ) == \"banana\", \"Fail\"",
        "num_ids": 374
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if number >= need:\n        return [number - need, 0]\n    elif number == 0 and need == remaining:\n        return [remaining, remaining]\n    elif number < need:\n        return [need - number, need - number]\n",
        "test": "assert     eat(1, 1, 0) ==    [1, 0]",
        "num_ids": 503
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # your code here\n    if len(operator) == 0:\n        return 0\n    else:\n        if operator[0] == '+':\n            return do_plus(operand[0], operand[1])\n        elif operator[0] == '-':\n            return do_minus(operand[0], operand[1])\n        elif operator[0] == '*':\n            return do_multiply(operand[0], operand[1])\n        elif operator[0] == '//':\n            return do_floor_division(operand[0], operand[1])\n        else:\n            return do_power(operand[0], operand[1])\n",
        "test": "assert ",
        "num_ids": 291
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # your code here\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n            elif s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n    return s\n",
        "test": "assert ",
        "num_ids": 298
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5(\"\")     == None",
        "num_ids": 268
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    integers = list(range(a, b+1))\n    # evens = list(filter(lambda n: n % 2 == 0, integers))\n    evens = [i for i in integers if i % 2 == 0]\n    return evens\n",
        "test": "assert     generate_integers(1, 10) == [2,4,6,8,10]",
        "num_ids": 162
    }
]