[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4], 0) == False",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    new_string = []\n    string = paren_string.strip().replace(' ', '')\n    i = 0\n    while i < len(string):\n        if string[i] == '(':\n            i += 1\n            while string[i]!= ')':\n                i += 1\n            new_string.append(string[:i+1])\n            string = string[i+1:]\n            i = 0\n        elif string[i] == ')':\n            i += 1\n            while string[i]!= '(':\n                i += 1\n            new_string.append(string[:i+1])\n            string = string[i+1:]\n            i = 0\n        else:\n            i += 1\n    return new_string\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    return int(number)\n",
        "test": "assert     truncate_number(1.0) == 1.0",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    result = False\n    for i in range(len(operations)):\n        if operations[i] < 0:\n            result = True\n            break\n    return result\n",
        "test": "assert     below_zero(operations=[-1, 2, -3, 4, 5, 6, 7, -8, -9, 10, 11, 12, -13, -14])",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    return mean_absolute_deviation_function(numbers)\n",
        "test": "assert ",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0], delimeter]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
        "test": "assert     intersperse([], 1) == []",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    paren_list = paren_string.split()\n    paren_dict = {}\n",
        "test": "assert     parse_nested_parens(\"((()))\") == [\"((()))\"]",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"hello\", \"hi\", \"there\"], \"asdf\") == []",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    result: List[int] = []\n    last_index: int = 0\n    while last_index < len(numbers):\n        if len(result) == 0 or result[-1] <= numbers[last_index]:\n            result.append(numbers[last_index])\n        else:\n            result.append(max(numbers[last_index], result[-1]))\n        last_index += 1\n    return result\n",
        "test": "assert     rolling_max([0]) == [0]",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if not string:\n        return ''\n    # find longest palindrome that begins with supplied string\n    longest = ''\n    for index in range(len(string)):\n        suffix = string[index:]\n        if is_palindrome(suffix):\n            longest = suffix\n    # the string is guaranteed to be longer than longest palindrome\n    # only append a reverse suffix to the end of the string\n    return ''.join(reversed([string[0]] + list(longest)))\n",
        "test": "assert ",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    res = \"\"\n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res\n",
        "test": "assert string_xor('', 'o') == ''",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if len(strings) == 0:\n        return None\n    length = len(strings[0])\n    string = strings[0]\n",
        "test": "assert ",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    assert a >= 1 and b >= 1\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(2, 3) == 1",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    pre = []\n    if not isinstance(string, str):\n        return pre\n    for i in range(len(string)):\n        pre.append(string[:i + 1])\n    return pre\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert     string_sequence(0) == '0'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    # Your code here\n    string = string.lower()\n    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"A\") == 1",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # a little slow but it's the most efficient solution\n",
        "test": "assert ",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    return string.count(substring)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
        "test": "assert     how_many_times('pale, pale, pale, bale, bile, bil', 'ale') == 4",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    # TODO: Create a list from the string.\n    numbers_list = numbers.split()\n    # TODO: Sort the list.\n    numbers_list.sort()\n    # TODO: Return the list\n    return \" \".join(numbers_list)\n",
        "test": "assert     sort_numbers(\"zero\") == 'zero'",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if len(numbers) <= 2:\n        raise ValueError(\"List must contain at least two items\")\n    d = {}\n    for index in range(len(numbers)):\n        if numbers[index] in d:\n            d[numbers[index]] = index\n        else:\n            d[numbers[index]] = index\n    a = list(d.keys())\n    a.sort()\n    return a[0], a[-1]\n",
        "test": "assert     find_closest_elements([0, 0, 0, 0, 0]) == (0, 0)",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return [(value - min(numbers)) / (max(numbers) - min(numbers)) for value in numbers]\n",
        "test": "assert ",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"foobar\") == 6",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    # largest_divisor(n) = n\n    if n <= 1:\n        return n\n    else:\n        return largest_divisor(n // n)\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    factor = []\n    while n > 1:\n        divider = 2\n        while n % divider!= 0:\n            divider += 1\n        n /= divider\n        factor.append(divider)\n    return factor\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n    # You can use set() to get a set, which is more efficient.\n    # set(numbers)\n    # This is also a good idea if you have to convert it to a set.\n",
        "test": "assert     remove_duplicates([0, 0, 1, 1, 2, 2, 2, 3, 3, 4]) == [0, 1, 2, 3, 4]",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate(['a', 'b', 'c']) == \"abc\", \"Should be abc\"",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return [i for i in l if i >= 0]\n",
        "test": "assert     get_positive(list()) == [], \"Test Failed, get_positive() should return an empty list\"",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(3) == True",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # Take all odd coefficients in list and create a new list\n    xs = [coeff for i, coeff in enumerate(xs) if i % 2 == 1]\n    x0 = 0.5\n    # Find a solution for x0\n    while True:\n        x0 = (sum(xs) + poly(xs, x0)) / (1 + sum(xs))\n        if abs(x0) < 1e-7:\n            return x0\n",
        "test": "assert ",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    l_copy.sort()\n    return l_copy\n",
        "test": "assert     sort_third([1,2,3,4,4,5,6,7]) == [1,2,3,4,4,5,6,7], \"Fail\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1,2,3,4]) == [1,2,3,4], \"Wrong\"",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    if len(l) == 0:\n        return None\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            counter += 1\n            if i % 11 == 0:\n                counter += 1\n                if i % 13 == 0:\n                    counter += 1\n    return counter\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even.sort()\n    odd.sort()\n    final = even + odd\n    return final\n",
        "test": "assert sort_even([7, 8, 5, 9, 3]) == sorted([7, 3, 8, 5, 9])",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return \"\".join([s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # if prime numbers are from 3 to the n-th number, the first n-1 number is 3, 4, 5\n    # if a number is not a prime number, its factorization is a set of its prime factorization\n    # the first prime factor is 2\n    if n == 1:\n        return 2\n    fib_numbers = fibonacci(n-1)\n    prime_numbers = []\n    for fib_number in fib_numbers:\n        if is_prime(fib_number):\n            prime_numbers.append(fib_number)\n    return prime_numbers[-1]\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert not triples_sum_to_zero([])",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    # Your code here\n    return (n//2)\n",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return l[0] == 0\n    if len(l) == 2:\n        if l[0] + l[1] == 0:\n            return True\n        else:\n            return False\n    for i in range(0, len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     not pairs_sum_to_zero([-1,-2,3])",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    base_string = \"\"\n    while x!= 0:\n        x, digit = divmod(x, base)\n        base_string = str(digit) + base_string\n    return base_string\n",
        "test": "assert     change_base(4, 8) == \"4\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(2, 2) == 2",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n < 4:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(5) == 0",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    l = sorted(l)\n    if len(l) % 2:\n        return l[(len(l)-1)//2]\n    else:\n        return (l[(len(l)-1)//2] + l[(len(l)-2)//2])/2\n",
        "test": "assert median([1,2,2,4]) == 2",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"race a car\") == False",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    m = 1\n    while n:\n        n, m = (n - 1) % p, m * 2\n    return m\n",
        "test": "assert     modp(1, 3) == 2",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"bcde\") == \"abcd\"",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    if len(text) == 0:\n        return ''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] not in ['a', 'e', 'i', 'o', 'u']:\n            new_text += text[i]\n    return new_text\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n",
        "test": "assert not below_threshold([5,1,2], 3)",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(3,3) == 6",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    s0 = list(s0)\n    s1 = list(s1)\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "test": "assert same_chars('hello', 'hello world') == False",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert     correct_bracketing(\"<>\") is True",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        if l[i] > l[i+1]:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     monotonic([-1, -2, -3, -4, -5, -6]) == False",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "test": "assert     common([1,2,3], [1,2,4]) == [1,2]",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    if n > 2:\n        i = 2\n        while n % i!= 0:\n            if n % (i+1) == 0:\n                return i+1\n            i = i + 1\n        else:\n            return i\n    else:\n        return 2\n",
        "test": "assert     (largest_prime_factor(6) == 2) ",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n    ",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack == []:\n                return False\n            stack.pop()\n    return stack == []\n",
        "test": "assert     correct_bracketing(\"\") == True",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    coefficients = xs\n    derivative_coefficients = []\n    for i in range(len(coefficients) - 1):\n        derivative_coefficients.append(\n            coefficients[i+1]*i + coefficients[i])\n    return derivative_coefficients\n",
        "test": "assert ",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    count = 0\n    for i in s:\n        if i in \"aeiouy\":\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[-shift:] + s[:-shift]\n    else:\n        return s[-shift:] + s[:-shift][::-1]\n",
        "test": "assert     circular_shift(123, -5) == '321'",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return sum([int(c) for c in s.upper() if c.isnumeric()])\n",
        "test": "assert digitSum('') == 0",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    c=0\n    if int(s)==0:\n        return 0\n    if int(s)==1:\n        return int(n)\n    if int(s)>0:\n        c=int(s)\n        if int(s)%2==0:\n            return c\n        else:\n            return int(n)-c\n",
        "test": "assert     fruit_distribution('0', 1) == 0",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    evens = []\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n            evens.append(n)\n    if len(evens) == 0:\n        return []\n    evens.sort()\n    return evens[0], evens.index(evens[0])\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # your code here\n    if len(lst) == 0:\n        return -1\n    max_val = 0\n    max_freq = 0\n    for item in lst:\n        if item > max_val:\n            max_val = item\n            max_freq = 1\n        elif item == max_val:\n            max_freq += 1\n    if max_freq >= max_val:\n        return max_val\n    else:\n        return -1\n",
        "test": "assert search([2, 2, 2]) == 2",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    \n    if a+b <= c or a+c <= b or b+c <= a:\n        return -1\n    else:\n        return ((a*b) / 2) + ((a*c) / 2)\n",
        "test": "assert     triangle_area(1, 1, 1) == 1.0, 'Wrong output 2'",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    \n    if q == [] or len(q)==1 or max(q)>w:\n        return False\n    if q[0]==q[-1]:\n        if sum(q)<w:\n            return False\n    else:\n        if q[0]+q[-1]>w:\n            return False\n    for i in range(1,len(q)-1):\n        if q[i]==q[i+1]:\n            if q[i]==q[i-1]:\n                if sum(q)<w:\n                    return False\n            else:\n                if q[i]+q[i+1]>w:\n                    return False\n        else:\n            if q[i]==q[i-1]:\n                if q[i]==q[i+1]:\n                    if sum(q)<w:\n                        return False\n                else:\n                    if q[i]+q[i+1]>w:\n                        return False\n            else:\n                if q[i]+q[i+1]>w:\n                    return False\n    return True\n",
        "test": "assert     will_it_fly([2,5,4,1], 7) == False",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    return lst2\n",
        "test": "assert total_match(['foo', 'bar'], ['foo']) == ['foo']",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    print(\"\\nChecking if \", a, \"is a multiplication of 3 prime numbers...\")\n    #First, we will check if the given number is divisible by 2,3,5\n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0:\n        print(a, \"is divisible by 2,3,5\")\n        return False\n    #Now, we will check if the given number is divisible by 2,3\n    if a % 2 == 0:\n        print(a, \"is divisible by 2\")\n        return False\n    #Now, we will check if the given number is divisible by 3\n    if a % 3 == 0:\n        print(a, \"is divisible by 3\")\n        return False\n    #Now, we will check if the given number is divisible by 5\n    if a % 5 == 0:\n        print(a, \"is divisible by 5\")\n        return False\n    print(a, \"is a multiplication of 3 prime numbers\")\n    return True\n",
        "test": "assert     is_multiply_prime(18) == False, f\"is_multiply_prime(18) is wrong.\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return x == n ** int(math.log(x, n))\n",
        "test": "assert     is_simple_power(7, 9) == False",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return a ** 3 == a\n",
        "test": "assert not iscube(12) == True",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    c = 0\n    for i in num:\n        if i in \"ABCDEF0123456789\":\n            c += 1\n    return c\n",
        "test": "assert     hex_key(\"A\") == 1, \"The function should count the number of hexadecimal digits that are primes.\"",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if decimal == 0:\n        return \"db\"\n    elif decimal == 1:\n        return \"d\"\n    binary = \"\"\n    while decimal > 0:\n        binary = binary + str(decimal%2)\n        decimal = decimal//2\n    return binary\n",
        "test": "assert     decimal_to_binary(7) == \"111\"",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    count = 0\n    # for i in range(len(s) - 1):\n    #     if s[i] == s[i+1]:\n    #         count += 1\n    # return count >= 3\n    \n    # use set to eliminate repeats\n    \n    for i in range(len(s)-1):\n        if s[i] in s[i+1:]:\n            return False\n    return len(s) >= 3\n",
        "test": "assert not is_happy('abba')",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    gpa_lists = list(grades)\n    gpa_lists.sort()\n    letter_grade = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    letter_grade.sort()\n    final_list = []\n    for item in gpa_lists:\n        for letter in letter_grade:\n            if item == float(letter.split(\"-\")[0]):\n                final_list.append(letter)\n    return final_list\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    string = string.strip()\n    length = len(string)\n    if length == 0:\n        return False\n    if length == 1:\n        return False\n    if length == 2:\n        return (string[0] == string[1])\n    for x in range(2, length):\n        if length % x == 0:\n            return False\n    return True\n",
        "test": "assert prime_length(\"1\") == False, \"One number\"",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    count = 0\n    for i in range(1, n):\n        if str(i)[0] == '1' and str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 0",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    sum = 0\n    while N > 0:\n        sum += (N % 10)\n        N //= 10\n    return str(sum)\n",
        "test": "assert ",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i%2 == 0:\n            new_lst.append(lst[i])\n    return new_lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    \n    return \" \".join(sorted(s.split(), key=lambda x: ord(x[0])))\n",
        "test": "assert     anti_shuffle(\"a\") == \"a\"",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if lst == []:\n        return []\n    rows = []\n    for row in lst:\n        if row:\n            x_vals = []\n            for i in range(len(row)):\n                if row[i] == x:\n                    x_vals.append(i)\n            rows.append((x_vals[0], row[x_vals[0]]))\n    rows = sorted(rows, key=lambda x: (x[0], -x[1]))\n    return sorted(rows, key=lambda x: (x[1], x[0]))\n",
        "test": "assert     get_row([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1],",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    def dutch_flag_sort(arr):\n        if not arr: return None\n        def dutch_sort(arr, low, high):\n            if low >= high: return\n            mid = arr[low]\n            i, j = low, high\n            while i < j:\n                while arr[j] >= mid and i < j:\n                    j -= 1\n                if i < j:\n                    arr[i] = arr[j]\n                while arr[i] <= mid and i < j:\n                    i += 1\n                if i < j:\n                    arr[j] = arr[i]\n            arr[i] = mid\n            if i == j:\n                i += 1\n            dutch_sort(arr, low, i - 1)\n            dutch_sort(arr, i, high)\n        dutch_sort(arr, 0, len(arr) - 1)\n        return arr\n",
        "test": "assert sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    encryption = []\n    # loop through each character in the string\n    for char in s:\n        # add the character to the list\n        encryption.append(chr(ord(char)+2))\n    \n    # return the string\n    return \"\".join(encryption)\n",
        "test": "assert     encrypt(4) == 5",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    \n    n = 0\n    m = 0\n    result = None\n    for i in lst:\n        if i < lst[n]:\n            m = i\n            break\n        n += 1\n    if m!= 0:\n        for i in lst:\n            if i == m:\n                result = i\n    return result\n",
        "test": "assert     next_smallest([-2, 1, 2, 3, 4, 5, -6, 7]) is None",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    bored = 0\n    for line in S.split():\n        if line.startswith('I'):\n            bored += 1\n    return bored\n    ",
        "test": "assert     is_bored(\"I. don't care\") == 1",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return x == (y + z) and all([type(i) == int for i in [x, y, z]])\n",
        "test": "assert any_int(3, 4, 2) == False",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    return \"\".join(\n        list(\n            map(\n                lambda x: x.upper() if x in \"aeiouAEIOU\" else x.lower()\n                if x in \"aeiouAEIOU\"\n                else x, \n                message\n            )\n        )\n    )\n",
        "test": "assert     encode(\"AbC\") == \"AbC\"",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    largest = 0\n    result = 0\n    for i in lst:\n        if i > largest:\n            largest = i\n    largest = int(str(largest))\n    for i in range(len(str(largest))):\n        result += int(str(largest)[i])\n    return result\n",
        "test": "assert     skjkasdkd([1,1,4]) == 4",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        for i in keys:\n            if type(i) == int or type(i) == float or type(i) == str:\n                i = i.lower()\n                i = i.upper()\n                if type(i)!= str:\n                    return False\n        return True\n",
        "test": "assert check_dict_case({}) == False",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    #Nested loop to go through all the prime numbers\n    #if the prime number divides n it is not a prime\n    #otherwise it is a prime\n    primes = [2]\n    for i in range(3,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            primes.append(i)\n    \n    #nested loop to return all primes between 2 and n\n    output = []\n    for i in range(2,n+1):\n        for j in primes:\n            if i % j!= 0:\n                break\n        else:\n            output.append(i)\n    \n    return output\n",
        "test": "assert     count_up_to(1) == []",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    product = 1\n    for i in range(len(str(a))):\n        product = product * int(str(a)[i])\n    for i in range(len(str(b))):\n        product = product * int(str(b)[i])\n    return product\n",
        "test": "assert multiply(21, 0) == 0",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"hAm\") == 1",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return int(round(float(value) * 1.0))\n",
        "test": "assert     closest_integer(\"20\") == 20",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    \n    if n == 1:\n        return [1]\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return s.split(', ')\n",
        "test": "assert     words_string('a, b, c') == ['a', 'b', 'c']",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if x < 1 or y > 100:\n        return -1\n    if x > y:\n        return -1\n    if y > x:\n        return -1\n    if y == x:\n        return x\n    return x + 1\n",
        "test": "assert     choose_num(1, 10) == -1, 'Wrong result for (1, 10): -1'",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += i\n    return int(bin(avg), 2)\n",
        "test": "assert rounded_avg(10,10) == 10",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return sorted([k for k in x if k % 2 == 1])\n",
        "test": "assert     unique_digits([]    )    ==    []",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    arr = sorted(arr)\n    arr = sorted(arr, reverse=True)\n    result = []\n    for i in range(0, len(arr)):\n        if 1 <= arr[i] <= 9:\n            name = str(arr[i])\n            if len(name) == 1:\n                name = \"One\"\n            elif len(name) == 2:\n                name = \"Two\"\n            elif len(name) == 3:\n                name = \"Three\"\n            elif len(name) == 4:\n                name = \"Four\"\n            elif len(name) == 5:\n                name = \"Five\"\n            elif len(name) == 6:\n                name = \"Six\"\n            elif len(name) == 7:\n                name = \"Seven\"\n            elif len(name) == 8:\n                name = \"Eight\"\n            elif len(name) == 9:\n                name = \"Nine\"\n            result.append(name)\n    return result\n",
        "test": "assert ",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # your code here\n    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(i+1)\n    return l\n",
        "test": "assert ",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    # if n is not even, no palindromes\n    if n % 2 == 1:\n        return (0, 0)\n    # if n is even, there should be 2 even palindromes\n    if n == 4:\n        return (1, 1)\n    # if n is even, there should be 2 even palindromes\n    if n == 6:\n        return (2, 2)\n    # if n is even, there should be 2 even palindromes\n    if n == 8:\n        return (3, 3)\n    # if n is even, there should be 2 even palindromes\n    if n == 10:\n        return (4, 4)\n    # if n is even, there should be 2 even palindromes\n    if n == 12:\n        return (4, 6)\n    # if n is even, there should be 2 even palindromes\n    if n == 14:\n        return (5, 5)\n    # if n is even, there should be 2 even palindromes\n    if n == 16:\n        return (6, 6)\n    # if n is even, there should be 2 even palindromes\n    if n == 18:\n        return (7, 7)\n    # if n is even, there should be 2 even palindromes\n    if n == 20:\n        return (8, 8)\n    # if n is even, there should be 2 even palindromes\n    if n == 22:\n        return (9, 9)\n    # if n is even, there should be 2 even palindromes\n    if n == 24:\n        return (10, 10)\n    # if n is even, there should be 2 even palindromes\n    if n == 26:\n        return (11, 11)\n    # if n is even, there should be 2 even palindromes\n    if n == 28:\n        return (12, 12)\n    # if n is even, there should be 2 even palindromes\n    if n == 30:\n        return (13, 13)\n    # if n is even, there should be 2 even palindromes\n    if n == 32:\n        return (14, 14)\n    # if n is even, there should be 2 even palindromes\n    if n == 34:\n        return (15, 15)\n    # if n is even, there should be 2 even palindromes\n    if n == 36:\n        return (16, 16)\n    # if n is even, there should be 2 even palindromes\n    if n == 38:\n        return (17, 17)\n    # if n is even, there should be 2 even palindromes\n    if n == 40:\n        return (18, 18)\n    # if n is even, there should be 2 even palindromes\n    if n == 42:\n        return (19, 19)\n    # if n is even, there should be 2 even palindromes\n    if n == 44:\n        return (20, 20)\n    # if n is even, there should be 2 even palindromes\n    if n == 46:\n        return (21, 21)\n    # if n is even, there should be 2 even palindromes\n    if n == 48:\n        return (22, 22)\n    # if n is even, there should be 2 even palindromes\n    if n == 50:\n        return (23, 23)\n    # if n is even, there should be 2 even palindromes\n    if n == 52:\n        return (24, 24)\n    # if n is even, there should be 2 even palindromes\n    if n == 54:\n        return (25, 25)\n    # if n is even, there should be 2 even palindromes\n    if n == 56:\n        return (26, 26)\n    # if n is even, there should be 2 even palindromes\n    if n == 58:\n        return (27, 27)\n    # if n is even, there should be 2 even palindromes\n    if n == 60:\n        return (28, 28)\n    # if n is even, there should be 2 even palindromes\n    if n == 62:\n        return (29, 29)\n    # if n is even, there should be 2 even palindromes\n    if n == 64:\n        return (30, 30",
        "test": "assert ",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    nums = 0\n    for num in arr:\n        sum_num = 0\n        while num:\n            sum_num += num % 10\n            num //= 10\n        if sum_num > 0:\n            nums += 1\n    return nums\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if arr == []:\n        return True\n    else:\n        # if the array is non-decreasing\n        if arr == sorted(arr):\n            return True\n        else:\n            # find the smallest element in the array\n            min_element = min(arr)\n            # find the index of the smallest element\n            min_idx = arr.index(min_element)\n            \n            # for left shifting\n            for i in range(min_idx):\n                # shifting all elements in the array by one position to the left\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            \n            # if the array is non-decreasing after left shifting\n            if arr == sorted(arr):\n                return True\n            else:\n                return False\n",
        "test": "assert move_one_ball([10, 20, 40, 30]) is False",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    # Your code here.\n    if (all(x%2==0 for x in lst1) and all(x%2==0 for x in lst2)):\n        return 'YES'\n    return 'NO'\n",
        "test": "assert     exchange([1, 2, 3], [4, 5, 6])     == \"NO\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    d = dict()\n    for l in test:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    s = s.replace(\" \", \"\")\n    c = c.replace(\" \", \"\")\n    if c in s:\n        return (s.replace(c,\"\"), False)\n    else:\n        return(s,True)\n",
        "test": "assert reverse_delete('apaleotary','apple') == ('apaleotary', True)",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    odd_count_lst = []\n    for i in range(len(lst)):\n        s = ''\n        for j in range(len(lst[i])):\n            if (lst[i][j] in \"1234567890\"):\n                s += lst[i][j]\n        s = int(s)\n        if ((s + 1) % 2!= 0):\n            odd_count_lst.append('the number of odd elements'+ str(s) + 'n the str' + str(s) +'of the'+ str(s) + 'nput.')\n        else:\n            odd_count_lst.append('the number of odd elements'+ str(s) + 'n the str' + str(s) +'of the'+ str(s) + 'nput.')\n    return odd_count_lst\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    curr_sum, min_sum = 0, float(\"inf\")\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    def lower(row, col, bucket_capacity):\n        if row == n - 1 and col == n - 1:\n            #return 0 if grid[row][col] else -1\n            return 1 if grid[row][col] else 0\n        if row == n - 1 and 0 <= col < n:\n            #return -1 if grid[row][col] else 0\n            return -1 if grid[row][col] else 0\n        if col == n - 1 and 0 <= row < n:\n            #return -1 if grid[row][col] else 0\n            return -1 if grid[row][col] else 0\n        if row == n - 1 and col == n - 1:\n            return 0\n        #return -1 if grid[row][col] else 0\n        return 0 if grid[row][col] else -1\n",
        "test": "assert     max_fill([[0, 0, 0], ",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), int(bin(x).replace('0b', ''), 2)))",
        "test": "assert     sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if s == \"\":\n        return []\n    s = s.split(\" \")\n    s = set(s)\n    return_list = []\n    for word in s:\n        if len(word) < n and n-len(word) >= 1:\n            return_list.append(word)\n    return return_list\n",
        "test": "assert     select_words(\"\", 1) == []",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    vowels = \"aeiouAEIOU\"\n    \n    for vowel in vowels:\n        if word[-1] == vowel:\n            return word[-1]\n    \n    if len(word) > 3:\n        for i in range(len(word) - 2):\n            if word[i] not in vowels and word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+2]\n        \n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"I\") == \"I\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'",
        "test": "assert     match_parens(['((((())))))','(())))))))))))))))']) == 'No'",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    arr = sorted(arr)\n    return arr[-k:]\n",
        "test": "assert     maximum([], 0) == []",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 1)\n",
        "test": "assert     solution([1,2,3]) == 0",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    # TODO: Write your code here\n    if k == len(arr):\n        return sum(arr)\n    ans = 0\n    i = 0\n    while i < k:\n        if len(str(arr[i])) <= 2:\n            ans += arr[i]\n        i += 1\n    return ans\n",
        "test": "assert     (add_elements([0, 0, 0, 0, 0], 0) == 0)",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    # If the input is 1, return a list with the only element being 1\n    if n == 1:\n        return [1]\n    odd_nums = []\n    # Get odd numbers, by recursion\n    odd_nums.append(1)\n    odd_nums.append(n)\n    return get_odd_collatz(odd_nums[-2]) + odd_nums\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if len(date) == 0:\n        return False\n    if date.count('-') > 2:\n        return False\n    days = date.count('-')\n    if days < 1:\n        return False\n    if days > 31:\n        return False\n    months = date.count('-')\n    if months < 1 or months > 12:\n        return False\n    \n    year,month,day = date.split('-')\n    if year.count('-') > 2:\n        return False\n    if month.count('-') > 2:\n        return False\n    if year == '' or month == '' or day == '':\n        return False\n    \n    months = {\n        1 : 31,\n        3 : 31,\n        5 : 31,\n        7 : 31,\n        8 : 31,\n        10: 31,\n        12: 31,\n        4 : 30,\n        6 : 30,\n        9 : 30,\n        11 : 30\n    }\n    if days <= months[int(month)]:\n        return True\n    else:\n        return False\n",
        "test": "assert     valid_date(\"12-12-2020\") == True",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    result = txt.split()\n    return result\n    # return len(txt.split())\n",
        "test": "assert ",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1,2,3,4,5]) == True",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if interval1[1] >= interval2[0] or interval2[1] >= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection((1, 4), (1, 3)) == \"NO\"",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    if arr == []:\n        return None\n    p = 0\n    for i in arr:\n        if i < 0:\n            p = -1\n        if i > 0:\n            p = 1\n        p *= i\n    return p\n    \n",
        "test": "assert     prod_signs([0]) == 0",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    ###\n    # APPROACH: DFS with Memoization\n    ###\n    # DFS with Memoization:\n    #\n    # To accomplish this we must follow the steps below:\n    #\n    # 1. Initialize an empty memo to keep track of previously seen paths\n    # 2. For each cell on the grid, add that cell to the queue\n    # 3. Start the search from each cell in the queue\n    # 4. While the queue is not empty:\n        # 4a. If a path is in the memo, return it\n        # 4b. If a path is not in the memo,\n            # 4b.1 if the current cell is smaller than k,\n                # we know that we can go to each of the neighbors.\n            # 4b.2 else, we know that we can go to any of the neighbors, in which\n                # case we can just continue to the next cell in the queue.\n            # 4b.3 Get all the neighbors from the current cell\n            # 4b.4 Store the path in the memo\n            # 4b.5 Go back to step 3, using the next cell in the queue\n    # 5. Once the queue is empty, we return the path that we stored in the memo\n",
        "test": "assert ",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    result = []\n    first, second, third = 3, 1, 2\n    if n == 1: return [first]\n    for i in range(1, n + 1):\n        if i == 1:\n            result.append(first)\n        elif i == 2:\n            result.append(second)\n        elif i == 3:\n            result.append(third)\n        else:\n            result.append(first + second + third)\n            first, second, third = third, first + second, result[-1]\n    return result\n    \n",
        "test": "assert     tri(2) == [3, 1]",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    total = 0\n    while n > 0:\n        #print(\"n is: \", n)\n        #print(\"n / 10 is: \", n/10)\n        if n%10 % 2 == 1:\n            total += 1\n        n /= 10\n    return total\n",
        "test": "assert digits(2) == 0",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    # Your code here\n    bracket_map = {'[': ']', '{': '}', '(': ')', '<': '>'}\n    stack = []\n    for b in string:\n        if b in bracket_map:\n            stack.append(b)\n        elif stack and bracket_map[stack.pop()] == b:\n            pass\n        else:\n            return False\n    return len(stack) == 0\n",
        "test": "assert     (is_nested('((()()' ) == False)",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return(sum([x**2 for x in lst]))\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \" \\t\"\n",
        "test": "assert     check_if_last_char_is_a_letter('1234') == False",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # For each element in the array, we calculate the difference between it\n    # and the current element (if it exists). If the difference is greater\n    # than the current element then return the current index.\n    # The difference is greater than the current element if the current\n    # element has a greater index, or if it is the first index in the array.\n    for i, item in enumerate(arr):\n        if item <= arr[i - 1]:\n            return i - 1\n    # If no element in the array satisfies the above conditions then return -1\n    return -1\n",
        "test": "assert     can_arrange([1, 2, 3, 4, 1, 5]) == -1",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return max(lst) if lst else None, min(lst) if lst else None\n",
        "test": "assert     largest_smallest_integers([5, 5, 5, 5, 5]) == (5,5), 'wrong output for 5'",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \"\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \"\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 2) == 2",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    evens = 0\n    while n % 2 == 0:\n        n = n // 2\n        evens += 1\n    if evens == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_equal_to_sum_even(9) == False, \"Should return False\"",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    brazilian_factorial = 1\n    if n == 0:\n        return 1\n    for i in range(1,n+1):\n        brazilian_factorial *= i\n    return brazilian_factorial\n",
        "test": "assert         special_factorial(1) == 1",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return text.replace(\" \", \"_\")\n",
        "test": "assert     fix_spaces('words with spaces') == 'words_with_spaces'",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    try:\n        if len(file_name) > 3 or file_name[0].isdigit() or file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n            or file_name[-1] == '.' or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    except IndexError:\n        return 'No'\n",
        "test": "assert     file_name_check('xxd.txt') == 'No'",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if len(lst) == 0:\n        return 0\n    s = 0\n    for i in lst:\n        if i % 3 == 0:\n            i = i ** 2\n        elif i % 4 == 0:\n            i = i ** 3\n        else:\n            continue\n        s += i\n    return s\n",
        "test": "assert     sum_squares([1,2,3]) == 9, \"Wrong answer\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    sent = sentence.split(' ')\n    ans = []\n    for i in range(len(sent)):\n        if len(sent[i]) == 2:\n            ans.append(sent[i])\n    return''.join(ans)\n",
        "test": "assert     words_in_sentence('Greetings, friends')!= 'Greetings, friends'",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    x = x.replace(\"/\", \"\")\n    y = int(x) * int(n)\n    if y % int(n) == 0:\n        return True\n    return False\n",
        "test": "assert     simplify(\"2\", \"2\") == True",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    result = sorted(nums, key = lambda x: x * 10 + sum(map(int, str(x))))\n    return result\n",
        "test": "assert     order_by_points([5, 1, 4, 4, 8, 9]) == [1, 4, 4, 5, 8, 9], \"Wrong answer\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    def checkFirstAndLast(number):\n        if len(str(number)) == 2:\n            return False\n        return number % 10 % 2\n    return len(list(filter(checkFirstAndLast, nums)))\n",
        "test": "assert     specialFilter([]) == 0, specialFilter([])",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    a = [1, 3, 7, 13, 21]\n    return sum(1 for i, j, k in combinations(a, 3) if i + j + k == 3 * i)\n",
        "test": "assert ",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # Check if planets are correct\n    if planet1.lower() not in planets or planet2.lower() not in planets:\n        return tuple()\n    # Get planet orbits\n    planet1_orbit = planets.get(planet1.lower())\n    planet2_orbit = planets.get(planet2.lower())\n    # Find the planet closest to the Sun\n    sun_distance = get_distance(planet1_orbit, sun)\n    planet_distance = get_distance(planet2_orbit, sun)\n    if sun_distance < planet_distance:\n        return tuple()\n    # Find planets that are within the radius\n    planets_in_range = []\n    for key, value in planets.items():\n        if get_distance(planet1_orbit, value) <= radius:\n            planets_in_range.append(key)\n    # Sort by proximity to the Sun\n    return tuple(sorted(planets_in_range))\n",
        "test": "assert     'Mars' == bf('Mars', 'Jupiter')",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    lst = [i for i in lst if len(i) >= 2]\n    return sorted(lst)\n",
        "test": "assert ",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(3, 1, 1) == 1",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    total = 0\n    for i in lst:\n        if i % 2!= 0:\n            total += i**2\n    return total",
        "test": "assert     double_the_difference([]) == 0, \"List is empty\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    s = []\n    g = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            s.append(0)\n            g.append(0)\n        else:\n            s.append(abs(game[i]-guess[i]))\n            g.append(abs(game[i]-guess[i]))\n    return g\n",
        "test": "assert     (compare([1,1,1,1], [1,1,1,1]) == [0,0,0,0])",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if class_name == 'Slices':\n        return 'Slices.SErviNGSliCes'\n    class_dict = {}\n    for i in extensions:\n        if i.isupper():\n            if i.isalpha():\n                if class_dict.get(i.lower()) == None:\n                    class_dict[i.lower()] = 1\n                else:\n                    class_dict[i.lower()] += 1\n        else:\n            if i.isalpha():\n                if class_dict.get(i.lower()) == None:\n                    class_dict[i.lower()] = 1\n                else:\n                    class_dict[i.lower()] += 1\n    return class_name + '.' + max(class_dict, key=class_dict.get)\n",
        "test": "assert ",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    n = len(a)\n    if len(b) < n:\n        return False\n    if a in b:\n        return True\n    for i in range(n):\n        s1 = a[i:]+a[:i]\n        if s1 == b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('abcd','aacd') == False",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    return(len(str(num)), len(str(num)) % 2)\n",
        "test": "assert     even_odd_count(734) == (3, 1), \"734: 3 and 1.\"",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    if number == 0:\n        return \"0\"\n    digits = {1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\", 10: \"X\", 40: \"XL\", 50: \"L\",\n               90: \"XC\", 100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"}\n    mapping = {1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\", 10: \"X\", 40: \"XL\", 50: \"L\",\n               90: \"XC\", 100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"}\n    result = ''\n    for key, val in mapping.items():\n        while number >= key:\n            result += val\n            number -= key\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == 'I'",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        count = len(set(list(word)))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['a','c', 'b', 'd', 'a']) == 'a'",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    eaten = 0\n    left = remaining\n    while (left < need):\n        need -= left\n        eaten += 1\n        left += eaten\n    return [eaten, left]\n",
        "test": "assert     eat(7, 1, 5) == (7, 0)",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    for i in range(len(operator)):\n        if i > 0:\n            if operator[i] == '*':\n                operand[i-1] = operand[i-1] * operand[i]\n            elif operator[i] == '+':\n                operand[i-1] = operand[i-1] + operand[i]\n            elif operator[i] == '-':\n                operand[i-1] = operand[i-1] - operand[i]\n    return operand[0]\n",
        "test": "assert     do_algebra([ \"//\", 3 ], [ 4, 5 ] ) == \"0\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return \"\".join(s)\n",
        "test": "assert     solve('!') == '!'",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert string_to_md5('') == None, 'wrong output'",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    return list(range(a, b + 1))\n",
        "test": "assert     generate_integers(1, 2) == [1, 2]",
        "num_ids": 274,
        "indeed": false
    }
]