[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    size = len(numbers)\n    if size < 2:\n        return False\n    # List from largest to smallest\n    numbers.sort()\n    i = 0\n    j = size - 1\n    while i < j:\n        if numbers[i] + numbers[j] <= threshold:\n            i += 1\n            j -= 1\n        else:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.1)"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    s = paren_string\n    result = []\n    i = 0\n    while i < len(s):\n        curr = s[i]\n        if curr == '(':\n            j = i + 1\n            while j < len(s):\n                if s[j] == '(':\n                    j += 1\n                elif s[j] == ')':\n                    j += 1\n                    result.append(''.join(s[i:j]))\n                    i = j\n                    break\n                else:\n                    j += 1\n        i += 1\n    return result\n",
        "test": "assert     separate_paren_groups('') == []"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return float(number - math.floor(number))\n",
        "test": "assert     truncate_number(0.3) == 0.3"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    prev_balance = 0\n    for op in operations:\n        prev_balance += op\n        if prev_balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    mean = sum(numbers) / len(numbers)\n    squared_difference = sum(n ** 2 for n in numbers)\n    return squared_difference / len(numbers) - (mean ** 2)\n",
        "test": "assert     mean_absolute_deviation([1.2, 2.3, 4.6, 4.3]) == 0.2"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if not numbers:\n        return numbers\n    if len(numbers) == 1:\n        return [numbers[0], delimeter, numbers[0]]\n    \n    return [*numbers[:len(numbers) - 1], delimeter, *numbers[1:]]\n    \n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return_list = []\n    parens_string = paren_string.split()\n    for i in range(len(parens_string)):\n        if parens_string[i] == \"(\":\n            return_list.append(len(parens_string))\n        elif parens_string[i] == \")\":\n            return_list.append(len(parens_string) - return_list.pop())\n        else:\n            continue\n    return return_list\n",
        "test": "assert     parse_nested_parens(\"()\") == []"
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"ba\") == [\"bar\", \"baz\"]"
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = 0\n    product_numbers = 1\n    for i in numbers:\n        sum_numbers += i\n        product_numbers *= i\n    return (sum_numbers, product_numbers)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if not numbers:\n        return []\n    last_max = numbers[0]\n    output = []\n    for n in numbers:\n        if n > last_max:\n            last_max = n\n        output.append(last_max)\n    return output\n",
        "test": "assert     rolling_max([5,4,3,2,1]) == [5,5,5,5,5]"
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    for index in range(len(string)):\n        if is_palindrome(string[:index]):\n            return string[:index] + string[index:]\n",
        "test": "assert "
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    return ''.join([str((int(a[i]) + int(b[i])) % 2) for i in range(len(a))])\n",
        "test": "assert     string_xor('0', '0') == '0'"
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    # Define a helper function and call it recursively\n    def helper(strings, current_string):\n        if len(strings) == 0:\n            return current_string\n        if len(current_string) > len(strings[0]):\n            return helper(strings[1:], current_string)\n        else:\n            return helper(strings[1:], current_string + strings[0])\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "test": "assert     greatest_common_divisor(10, 5) == 5"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "assert all_prefixes('ab') == ['a', 'ab']"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return''.join([f'{i}' for i in range(n+1)])\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert count_distinct_characters('a') == 1, \"Second Test failed\""
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    notes = music_string.split()\n    return [4 if 'o' in note else 2 if 'o|' in note else 1 if ''.join('.' if ''.join('|' if char == '|' else '.' for char in note) == '|' else 'o' for char in note) == 'o|' else 1 if ''.join('.' if char == '|' else 'o' for char in note) == '|' else 2 for note in notes]\n",
        "test": "assert     parse_music(\"o\") == [4]"
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    assert substring!= \"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"pl\") == 0"
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    numbers = list(numbers.split())\n    numbers.sort()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers(\"one\") == \"one\""
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"find_closest_elements requires length >= 2\")\n    # sort in ascending order\n    numbers.sort()\n    # find two elements with closest values\n    smaller = numbers[0]\n    larger = numbers[-1]\n    larger_index = numbers.index(larger)\n    smaller_index = numbers.index(smaller)\n    smaller = numbers[smaller_index + 1]\n    if abs(larger - smaller) < abs(larger - numbers[0]):\n        larger = smaller\n        smaller = numbers[0]\n    if abs(larger - smaller) < abs(larger - numbers[-1]):\n        larger = smaller\n        smaller = numbers[-1]\n    return smaller, larger\n",
        "test": "assert     find_closest_elements([3, 1, 2]) == (1, 2)"
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0.5, 1]) == [0, 0.5, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return [int(i) for i in values if type(i) is int]\n",
        "test": "assert     filter_integers([]) == [], 'No integers'"
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n",
        "test": "assert largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    # Iterate through the input list\n    seen = set()\n    return_list = []\n    for n in numbers:\n        if n not in seen:\n            return_list.append(n)\n            seen.add(n)\n    return return_list\n",
        "test": "assert     remove_duplicates([1,2,3]) == [1,2,3]"
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('This is a test.') == \"THIS is a test.\""
    },
    {
        "number": 28,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    # if the list is empty, return empty string\n    if len(strings) == 0:\n        return ''\n    # if the list is not empty\n    elif len(strings)!= 0:\n        # join each string in the list\n        return ''.join(strings)\n",
        "test": "assert     concatenate([\"\", \"\", \"\"]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"one\", \"two\", \"three\"], \"one\") == [\"one\"]"
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert     get_positive([0, 1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    \n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(17) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # Make xs an even list of numbers\n    if not isinstance(xs, list):\n        raise TypeError(\"xs must be list\")\n    if not len(xs) % 2 == 0:\n        raise ValueError(\"xs must be an even list\")\n    if not all([isinstance(i, float) for i in xs]):\n        raise TypeError(\"xs must contain only floats\")\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # code goes here\n    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n            l_new.sort()\n    return l_new\n",
        "test": "assert     sort_third([1, 3, 4, 6, 8, 9, 11, 15]) == sorted([3, 1, 4, 6, 8, 9, 11, 15])"
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([3,4,3,3,5]) == [3,4,5]"
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for i in l:\n            if max < i:\n                max = i\n        return max\n",
        "test": "assert     max_element([1,2,4]) == 4, \"Wrong max element\""
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    counter = 0\n    for i in range(n):\n        if i % 11 == 7:\n            counter += 1\n        elif i % 13 == 7:\n            counter += 1\n    return counter\n",
        "test": "assert     fizz_buzz(0) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    #l = list(l)\n    #l_even = []\n    #l_odd = []\n    #for num in l:\n    #    if num%2 == 0:\n    #        l_even.append(num)\n    #    else:\n    #        l_odd.append(num)\n    #l_even = sorted(l_even)\n    #l_odd = sorted(l_odd)\n    #l = l_even + l_odd\n    #return l\n",
        "test": "assert sort_even([3, 4, 5, 6, 7, 8, 9]) == sort_even([3, 4, 5, 5, 6, 7, 8, 8])"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert     encode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        if fibonacci(n-1) % 2 == 0:\n            return fibonacci(n-1) + fibonacci(n-2)\n        else:\n            return fibonacci(n-1) + fibonacci(n-2) + 2\n",
        "test": "assert     prime_fib(1) == 2, \"Prime fibonacci number should be 2\""
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if (l[i]+l[j]+l[k]) == 0 and i!= j!= k!= i:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,2,3,4,5]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    num_collisions = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (i==j or abs(car_pos_1[i][0] - car_pos_1[j][0]) < 2*car_size_1[i] and abs(car_pos_1[i][1] - car_pos_1[j][1]) < 2*car_size_1[i]):\n                num_collisions += 1\n            if (i==j or abs(car_pos_2[i][0] - car_pos_2[j][0]) < 2*car_size_2[i] and abs(car_pos_2[i][1] - car_pos_2[j][1]) < 2*car_size_2[i]):\n                num_collisions += 1\n    return num_collisions\n",
        "test": "assert     car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([]) == [], \"incr_list\""
    },
    {
        "number": 43,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    \n    #this is a good question, with no helper functions, and just one loop\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([3, 4, 5, -3]) == True"
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return str(x).zfill(base)\n",
        "test": "assert change_base(10, 3) == '3'"
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return.5 * a * h\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5"
    },
    {
        "number": 48,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('a') == True, \"Not a palindrome\""
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if n < 0 or p < 0:\n        raise ValueError(\"n and p must be >= 0\")\n    while n >= p:\n        n -= p\n    return n\n",
        "test": "assert     modp(2, 5) == 2"
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    \n    return ''.join(char for char in text if not char in 'aeiouAEIOU')",
        "test": "assert     remove_vowels(\"pineapple\") == \"apple\""
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([20, -3, -2, -5, -6], -3) == False"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3, \"Try again\""
    },
    {
        "number": 54,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "test": "assert     same_chars('abc', 'abc') == True"
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    assert n > 0, \"n must be greater than 0\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(2) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    i = 0\n    while i < len(brackets):\n        if brackets[i] == \"<\":\n            j = i + 1\n            while j < len(brackets) and brackets[j]!= \">\":\n                j += 1\n            if j == len(brackets):\n                return False\n            else:\n                i = j\n        i += 1\n    return True\n",
        "test": "assert     correct_bracketing(\"<()><()>\")"
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if l:\n        return l[-1] < l[-2]\n    return True\n",
        "test": "assert     monotonic([1,2,3,4,0]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert         common([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3], 'common failed'"
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n % 2 == 0:\n        while n % 2 == 0:\n            n = n // 2\n        return 2\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    return n\n",
        "test": "assert     largest_prime_factor(100) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1, f\"sum_to_n({1}) == 1, but got: {sum_to_n(1)}\""
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    open_brackets = list(brackets)\n    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(brackets[i])\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n    return len(stack) == 0\n    \n",
        "test": "assert     correct_bracketing('') == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    for i in range(1, len(xs)):\n        xs[i] = xs[i] * xs[i - 1]\n    return xs\n",
        "test": "assert     derivative([0, 3, 6]) == [6]"
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 1\n    else: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\")\n",
        "test": "assert "
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    assert shift >= 0\n    assert isinstance(shift, int)\n    if shift == 0:\n        return x\n    else:\n        return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift('1234', 2) == '3412', 'Correct'"
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not s:\n        return 0\n    else:\n        return sum(ord(x) for x in s if x.isupper())\n",
        "test": "assert     digitSum(\"\") == 0, \"incorrect\""
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if (s.isdigit() == False):\n        return -1\n    if (s.isdigit() == True):\n        if (s == \"\" or s == \"0\"):\n            return 0\n        elif (int(s) > 0):\n            n = int(n)\n            apples = int(s)\n            while apples > 0:\n                mango_num = n % 10\n                n = int(n / 10)\n                apples = apples - mango_num\n            return apples\n        else:\n            return -1\n",
        "test": "assert "
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # Complete the below function\n    if len(arr) == 0:\n        return []\n",
        "test": "assert     pluck([]) == [], \"Test 2 Failed\""
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if lst == []:\n        return -1\n    \n    lst.sort()\n    lst.reverse()\n    \n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    i = 0\n    lst_length = len(lst)\n    if lst_length == 0:\n        return []\n    for i in range(lst_length):\n        if i == 0:\n            pass\n        elif lst[i] > lst[i-1]:\n            continue\n        else:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n            i = 0\n    return lst\n",
        "test": "assert     strange_sort_list([3,1,2]) == [1,2,3]"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # Simplify math\n    a, b, c = a**2, b**2, c**2\n    p = (a + b + c) / 2\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    return round(s, 2)\n",
        "test": "assert     triangle_area(1, 2, 2) == 0.5"
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if(is_balanced(q) and sum(q)<=w):\n        return True\n    else:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if len(arr) == 1: return 0\n    if len(arr) == 2: return 1\n    \n    # find the longest substring\n    longest_palindrome = ''\n    for i in range(len(arr)):\n        # print(\"i: \" + str(i))\n        for j in range(len(arr)):\n            # print(\"j: \" + str(j))\n            sub_string = arr[i:j+1]\n            if sub_string == sub_string[::-1]:\n                if len(sub_string) > len(longest_palindrome):\n                    longest_palindrome = sub_string\n    \n    # find the smallest change (i.e., how many elements are needed to change to make the array palindromic)\n    left_pointer = 0\n    right_pointer = len(longest_palindrome) - 1\n    \n    # start the changes with the first element\n    changes = 1\n    while left_pointer < right_pointer:\n        # print(\"left_pointer: \" + str(left_pointer) + \", right_pointer: \" + str(right_pointer))\n        # print(\"changes: \" + str(changes))\n        if longest_palindrome[left_pointer] == longest_palindrome[right_pointer]:\n            # print(\"same\")\n            left_pointer += 1\n            right_pointer -= 1\n            changes += 1\n        else:\n            break\n    \n    return changes\n",
        "test": "assert     smallest_change([1,2,3,4,5]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    res=[]\n    for i in lst1:\n        if len(i)>len(lst2):\n            break\n        if len(i)==len(lst2):\n            res.append(i)\n    return res\n",
        "test": "assert "
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    primes = [2,3,5,7,11,13,17]\n    if a == 0:\n        return False\n    for p in primes:\n        while a % p == 0:\n            a = a/p\n            if p == 13:\n                return True\n    return False\n",
        "test": "assert     is_multiply_prime(30) == False"
    },
    {
        "number": 76,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return n**int(x)==x\n    \n",
        "test": "assert     is_simple_power(1, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return a * a * a == a\n    \ndef is_palindrome(a):\n    '''\n    Write a function that takes a nonnegative integer a and returns True\n    if a is a palindrome, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(121) ==> True\n    is_palindrome(212) ==> False\n    is_palindrome(10) ==> True\n    is_palindrome(11) ==> False\n    is_palindrome(1) ==> True\n    is_palindrome(0) ==> True\n    is_palindrome(12) ==> False\n    is_palindrome(-1) ==> False\n    '''\n    return str(a) == str(a)[::-1]\n    \ndef is_leap_year(a):\n    '''\n    Write a function that takes a nonnegative integer and returns True\n    if a is a leap year, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_leap_year(0) ==> False\n    is_leap_year(1) ==> False\n    is_leap_year(4) ==> True\n    is_leap_year(100) ==> False\n    is_leap_year(1234) ==> True\n    is_leap_year(400) ==> False\n    is_leap_year(2000) ==> True\n    is_leap_year(3000) ==> False\n    '''\n    return (a % 4 == 0 and a % 100!= 0) or (a % 400 == 0)\n    \ndef is_prime(a):\n    '''\n    Write a function that takes a nonnegative integer a and returns True\n    if a is a prime number, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(4) ==> False\n    is_prime(11) ==> True\n    is_prime(26) ==> True\n    is_prime(29) ==> False\n    is_prime(31) ==> False\n    is_prime(100) ==> False\n    '''\n    if a == 0:\n        return False\n    elif a == 1:\n        return False\n    else:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    \ndef is_perfect_square(a):\n    '''\n    Write a function that takes an integer a and returns True\n    if a is a perfect square, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_perfect_square(1) ==> False\n    is_perfect_square(9) ==> True\n    is_perfect_square(100) ==> False\n    is_perfect_square(121) ==> True\n    '''\n    if a == 0:\n        return False\n    else:\n        if a == 1:\n            return True\n        else:\n            if a % (a//2) == 0:\n                return True\n            else:\n                return False\n",
        "test": "assert     iscube(1) "
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # return len(re.findall(r'\\d', num))\n    return sum([int(i) in [2, 3, 5, 7] for i in num])\n",
        "test": "assert "
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if isinstance(decimal, int):\n        binary = bin(decimal)[2:]\n        return \"db\" + binary + \"db\"\n",
        "test": "assert "
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    for i in range(0, len(s)-2):\n        if s[i] == s[i+1]:\n            if s[i+1] == s[i+2]:\n                return True\n    return False\n",
        "test": "assert     is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade < 3.0:\n            letter_grades.append('F')\n        elif grade < 3.3:\n            letter_grades.append('D')\n        elif grade < 3.7:\n            letter_grades.append('C')\n        elif grade < 3.9:\n            letter_grades.append('B')\n        elif grade < 4.0:\n            letter_grades.append('A')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) "
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    \n    # A prime number is that it is only divisible by 1 and itself. So we\n    # need to check to see if the total number of characters in the string is\n    # divisible by itself.\n    \n    # We can use the modulus operator to do this. The modulo operator takes\n    # two inputs, the first one is the string we want to check and the second\n    # is the divisor. The divisor is basically the number that we are checking\n    # for. So the formula is string % divisor.\n    \n    # If the division between the length of the string and the divisor\n    # is 1 then the string is prime.\n    \n    # Now we can also do the same thing but we need to check to see if the\n    # divisor is less than the length of the string. If that is the case then\n    # the string is prime.\n    \n    # We need to make sure that we are not checking a string that we know will\n    # not be a prime.\n    \n    if len(string) <= 1:\n        return False\n    \n    # Now check to see if the divisor is less than the length of the string\n    # we are checking. If it is less than the length of the string we know\n    # the string is not prime.\n    if string[0] == string[-1]:\n        return False\n    \n    # Now we need to check if the divisor is less than the length of the\n    # string. If it is less than the length of the string we know the string\n    # is not prime.\n    if string[0]!= string[-1]:\n        return False\n    \n    # Now we have to check to see if the divisor is not at the end of the\n    # string. If it is not at the end of the string we know the string is not\n    # prime.\n    if len(string) > 2:\n        for i in range(2, len(string)):\n            if string[0]!= string[-1]:\n                return False\n    return True",
        "test": "assert     prime_length(\"\") is False"
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    count_1 = 0\n    count_2 = 0\n",
        "test": "assert     starts_one_ends(100) == 20"
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # Return the value of the sum of the digits in N in binary\n    return str(N)",
        "test": "assert     solve(1) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            i += 1\n            continue\n        lst.insert(i,lst.pop(i+1))\n        i += 2\n    return lst\n",
        "test": "assert     add([2,2,3,4,4]) == [2,2,4,4,4]"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return''.join(sorted(s.split()))\n",
        "test": "assert "
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    \n    if not lst:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # write your code here\n    return sorted(array)\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    cipher = ''\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            ind = alphabet.find(s[i])\n            if ind < 26:\n                ind = ind + 2\n            else:\n                ind = ind - 26\n            cipher = cipher + alphabet[ind]\n        else:\n            cipher = cipher + s[i]\n    return cipher\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument \n    and returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    cipher = ''\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            ind = alphabet.find(s[i])\n            if ind < 26:\n                ind = ind - 2\n            else:\n                ind = ind - 26\n            cipher = cipher + alphabet[ind]\n        else:\n            cipher = cipher + s[i]\n    return cipher\ndef main():\n    print('Welcome to the Caesar Cipher!')\n    mode = input('Press \"e\" to encrypt or \"d\" to decrypt: ')\n    s = input('Enter the message: ')\n    if mode == 'e':\n        print(encrypt(s))\n    elif mode == 'd':\n        print(decrypt(s))\n    else:\n        print('Invalid mode. Please try again.')\n    return\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    lst.sort()\n    if lst:\n        return lst[1]\n",
        "test": "assert "
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # we'll check for the first character in the string\n    # if it's an I, we'll return True\n    return S.startswith('I')\n",
        "test": "assert     is_bored('I.am bored of your words, I.am bored of my life.') == 1"
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return (x == (y + z) and (x ** y == x ** z) and (type(x) == type(y) == type(z)))\n",
        "test": "assert     any_int(1, 2, 1) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    result = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in message:\n        if letter in alphabet:\n            result += alphabet[alphabet.index(letter)+2]\n            result += alphabet[alphabet.index(letter)-1]\n        else:\n            result += letter\n    return result\n",
        "test": "assert encode('This is the correct message') == 'hT sT iT sT'"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # first solution\n    # prime_list = []\n    # for num in lst:\n    #     flag = 0\n    #     for num2 in range(2, int(num**(1/2))+1):\n    #         if num % num2 == 0:\n    #             flag = 1\n    #             break\n    #     if flag == 0:\n    #         prime_list.append(num)\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        for key in dict:\n            if key.isupper():\n                if key.lower()!= key:\n                    return False\n            elif key.islower():\n                if key.upper()!= key:\n                    return False\n            else:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({'a': 1}) is False"
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    my_list = []\n    if n >= 2:\n        my_list.append(2)\n    if n >= 3:\n        my_list.append(3)\n    for i in range(4,n+1):\n        if is_prime(i):\n            my_list.append(i)\n    return my_list\n",
        "test": "assert     count_up_to(1) == []"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    a = str(a)\n    b = str(b)\n    c = a[::-1]\n    d = b[::-1]\n    e = len(c)\n    f = len(d)\n    while (e < f):\n        c = c + '0'\n        e = e + 1\n    while (f < e):\n        d = d + '0'\n        f = f + 1\n    c = int(c)\n    d = int(d)\n    return c * d\n",
        "test": "assert "
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    \n    count = 0\n    \n    # Your code here\n    return count\n",
        "test": "assert count_upper('U') == 0, 'U'"
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"14.5\") == 14"
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n % 2 == 0:\n        return list(range(1, n+1))\n    else:\n        return list(range(1, n+1, 2))\n",
        "test": "assert     make_a_pile(1) == [1], \"1st test case\""
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    s = s.split(\",\")\n    return s\n",
        "test": "assert words_string('this,is,an,example') == ['this', 'is', 'an', 'example']"
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    x = int(x)\n    y = int(y)\n    res = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            res = i\n    return res\n",
        "test": "assert     choose_num(1, 11) == 10"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if n > m:\n        return -1\n    return int(bin(round(((n + m) / 2))), 2)\n",
        "test": "assert     rounded_avg(0, 1) == 0"
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([2,4,6,8]) == [2,4,6,8], 'FAILED'"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    if arr == []:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if n <= 1:\n        return []\n    else:\n        if n % 2 == 0:\n            return [1] + f(n - 1)\n        else:\n            return [1] + sum(f(i) for i in range(1, n + 1))\n    \n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_palindrome(i+1):\n                even += 1\n            else:\n                odd += 1\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not arr:\n        return 0\n    num_count = 0\n    for num in arr:\n        # get sum of num's digits\n        curr_sum = 0\n        while num > 0:\n            curr_sum += num % 10\n            num = num // 10\n        if curr_sum > 0:\n            num_count += 1\n    return num_count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    curr_max = arr[0]\n    \n    for i in range(1,len(arr)):\n        if curr_max > arr[i]:\n            return False\n        else:\n            curr_max = max(curr_max, arr[i])\n        \n    return True\n",
        "test": "assert "
    },
    {
        "number": 110,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([0, 2, 3], [1, 2, 3]) == \"NO\", \"Wrong answer in exchange()!\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    hist = {}\n    for ch in test:\n        if ch in hist:\n            hist[ch] += 1\n        else:\n            hist[ch] = 1\n    return hist\n",
        "test": "assert     'a' in histogram('abracadabra')"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if s == \"\": return (c,False)\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s.pop(i)\n            break\n    return ''.join(s),s==s[::-1]\n",
        "test": "assert     reverse_delete(\"abab\", \"ba\") == ('abab', True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(n,\n    len(lst[n]), len(lst)) for n,_ in enumerate(lst) if len(lst[n])%2!= 0]\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    # The algorithm works for any array and can be easily extended to any non-negative integer array\n    # since the partial sum of a non-empty sub-array is guaranteed to be at least as large as the\n    # partial sum of the whole array.\n    #\n    # The algorithm is brute force and iterative.\n    #\n    # Algorithm:\n    #\n    # Set the starting point. If the sum of the whole array is smaller than 0,\n    # it is possible to never reach the end of the array, thus return 0.\n    #\n    # Set the end point.\n    #\n    # Start looping from the beginning of the array\n    #\n    # Calculate the partial sum and compare it with the minSum.\n    # If the partial sum is smaller than minSum, update minSum.\n    #\n    # Repeat the same process until the end of the array is reached.\n    #\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    minSum = 0\n    if len(nums) == 0:\n        return 0\n",
        "test": "assert     minSubArraySum([]) == 0, 'No minSubArraySum'"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    n = len(grid)\n    k = len(grid[0])\n    max_len = math.ceil(math.sqrt(k))\n    dp = [[0] * (capacity+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, capacity+1):\n            if grid[i-1][0] < j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-grid[i-1][0]]+grid[i-1][1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][capacity]\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # your code here\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([10,1,2,3]) == [1,2,3,10]"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(s) == 0:\n        return []\n    words = []\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i+1:].find(s[i]) == -1:\n                words.append(s[i:])\n    return words\n",
        "test": "assert select_words(\"Behold my beloved\", 2) == [\"behold\", \"beloved\"]"
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    pass\n",
        "test": "assert     get_closest_vowel(\"yesterday\") == \"y\""
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if lst[0] == lst[1]:\n        return 'Yes'\n    for i in range(2, len(lst)):\n        if lst[i] == '(' and lst[i-1] == ')':\n            return 'Yes'\n        elif lst[i] == ')' and lst[i-1] == '(':\n            return 'No'\n    return 'No'",
        "test": "assert     match_parens(['((())','()()()','()()'])    ==    'No'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return sorted(arr)[-k:]\n",
        "test": "assert     maximum([], 0) == []"
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total\n    \n",
        "test": "assert     solution([1,2,3,4,4,3,2,1]) == 10"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return sum(sorted(arr)[:k])\n",
        "test": "assert     add_elements([2, 3, 5], 2) == 13"
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n <= 1:\n        return [1]\n    if n % 2!= 0:\n        return [n]\n    result = []\n    while n!= 1:\n        if n % 2!= 0:\n            result.append(n)\n        n = n / 2 if n % 2!= 0 else n * 3 + 1\n    return result\n",
        "test": "assert     get_odd_collatz(1) == [1], 'get_odd_collatz(1) should return [1]'"
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    days = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    months = ['01','03','05','07','08','10','12']\n    \n    if not date:\n        return False\n    \n    date_form = date.split('-')\n    try:\n        date_m = int(date_form[0])\n        date_d = int(date_form[1])\n        date_y = int(date_form[2])\n        if date_m < 1 or date_m > 12 or date_d < 1 or date_d > 31 or (date_m == 4 and date_d > 30) or (date_m == 6 and date_d > 30) or (date_m == 9 and date_d > 30) or (date_m == 11 and date_d > 30):\n            return False\n        if date_m == 2:\n            if date_y > 20:\n                return False\n        else:\n            if date_y < 1800 or date_y > 2020:\n                return False\n    except:\n        return False\n    \n    return True\n",
        "test": "assert     valid_date(\"11-1-2010\") == True, \"1. The first test case is wrong\""
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('ab cd efg hijk lmn op qr st uv wxyz') == ['ab', 'cd', 'efg', 'hijk', 'lmn', 'op', 'qr','st', 'uv', 'wxyz']"
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sorted(lst) == lst",
        "test": "assert not is_sorted([1, 4, 6, 1, 5, 9, 5, 8])"
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 < start2 and end2 < end1:\n        return \"YES\"\n    elif start1 <= end2 and end1 <= end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"YES\", \"Wrong output\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return sum(1 * (int(x) > 0) * (int(x) < 0) for x in arr)\n",
        "test": "assert     prod_signs([0, -1, 0]) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # binary search\n    # O(N * N)\n    # def minPathHelper(grid, k):\n    #     N = len(grid)\n    #     curr = 0\n    #     start = grid[0][0]\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    s = [3, 1, 3]\n    if n == 0:\n        return s\n    elif n == 1:\n        return s\n    elif n == 2:\n        return s + [1]\n    else:\n        return s + [sum(s[-2:]) + sum(s[-3:])] + [sum(s[-2:])]\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return int(n/10)\n",
        "test": "assert     digits(6) == 0, \"Should be 0\""
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    flag = 0\n    if len(string) < 3:\n        return False\n    elif string[0]!= '[':\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            flag += 1\n        elif string[i] == ']':\n            flag -= 1\n        elif string[i] == ']':\n            return False\n        if flag < 0:\n            return False\n    return True\n",
        "test": "assert     is_nested('')     == False"
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum([i ** 2 for i in lst])\n",
        "test": "assert "
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return txt[-1].isalpha() and txt[-1]!=''\n",
        "test": "assert not check_if_last_char_is_a_letter('go ')"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    arr = sorted(arr)\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i - 1] < arr[i]:\n            max_index = i\n        else:\n            break\n    return max_index\n",
        "test": "assert "
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # if lst == []:\n    #     return (None, None)\n    # elif lst == [0]:\n    #     return (None, None)\n    # elif lst == [-1]:\n    #     return (-1, 1)\n    # elif lst == []:\n    #     return (None, None)\n    # else:\n    if lst == []:\n        return (None, None)\n    else:\n        max_num = max(lst)\n        min_num = min(lst)\n        if max_num > 0:\n            return (max_num, min_num)\n        elif max_num < 0:\n            return (min_num, max_num)\n        else:\n            return (None, None)\n",
        "test": "assert largest_smallest_integers([2, 4, 6, 8, 10]) == (10, 2)"
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     compare_one(10, 10.1) == 10.1"
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return n % 2 == 0 and n >= 4\n",
        "test": "assert     is_equal_to_sum_even(4)"
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert     special_factorial(0) == 1, 'incorrect special_factorial'"
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # Your code here\n    return text.replace(' ', '_')\n",
        "test": "assert     fix_spaces('hello world') == 'hello_world'"
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if '.' in file_name and len(file_name) <= 3:\n        sub_str = file_name[0]\n        if sub_str.isalpha():\n            if sub_str.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                if file_name[1:].isalpha() and file_name[1:].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                    if file_name[2:].lower() in 'txt exe dll'.split():\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    return \"No\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "test": "assert     file_name_check(\"abc\") == \"No\", \"First test case fails\""
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i ** 3\n    return sum\n",
        "test": "assert     sum_squares(list_5) == 25, \"List does not match\""
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    words = sentence.split()\n    # output = []\n    # for word in words:\n    #     if isPrime(len(word)):\n    #         output.append(word)\n    return \" \".join(sorted(words, key=lambda word: len(word)))\n",
        "test": "assert     words_in_sentence(\"Hello World\") == \"Hello World\""
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if (float(x.replace(\"/\", \".\")) == float(n.replace(\"/\", \".\"))):\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"4/6\", \"1/2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    s = 0\n    for n in nums:\n        s += n\n    nums.sort(key = lambda x: s*x)\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sum(1 for x in nums if x > 10 and x % 2 == 1)\n",
        "test": "assert     specialFilter([7, 8, 10, 11, 15]) == 2"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            k = n - i - j\n            if i * i - i + 1 == j * j - j + 1 == k * k - k + 1:\n                result += 1\n    return result\n",
        "test": "assert "
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    planets = {\n        \"Mercury\": 0,\n        \"Venus\": 0,\n        \"Earth\": 0,\n        \"Mars\": 0,\n        \"Jupiter\": 0,\n        \"Saturn\": 0,\n        \"Uranus\": 0,\n        \"Neptune\": 0\n    }\n    for planet in planets.keys():\n        if planet == planet1:\n            planets[planet] = planets[planet1] + 1\n        elif planet == planet2:\n            planets[planet] = planets[planet2] + 1\n        else:\n            planets[planet] = planets[planet1] + planets[planet2]\n    return planets",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    out = []\n    for i in lst:\n        if len(i) > 0 and not i.isdigit():\n            out.append(i)\n    l = len(lst)\n    for i in range(len(out)):\n        if i == 0:\n            out[i] = out[i]\n        elif out[i] == out[i - 1]:\n            out[i] = out[i - 1]\n        else:\n            out[i] = out[i - 1] + out[i]\n    out.sort()\n    return out\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n",
        "test": "assert     x_or_y(1, 2, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    sum = 0\n    \n    #Find odd and even numbers\n    odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if(lst[i] % 2!= 0):\n            odd += lst[i] ** 2\n        else:\n            even += lst[i] ** 2\n    return(odd + even)\n    \ndef half_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    half_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    half_the_difference([-1, -2, 0]) == 0\n    half_the_difference([9, -2]) == 81\n    half_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    \n    #Find odd and even numbers\n    odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if(lst[i] % 2!= 0):\n            odd += lst[i] ** 2\n        else:\n            even += lst[i] ** 2\n    return(odd - even)\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    return abs((game - guess))\n",
        "test": "assert     compare([1,2,3,4],[3,3,1,4]) == [0,1,2,0], \"wrong\""
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return class_name+\".\"+max(extensions, key=lambda x: x.count('.')-x.count('_'))\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('abcd','abcd') == True"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return tuple(int(d) for d in str(num) if int(d) % 2 == 0)\n",
        "test": "assert     even_odd_count(100) == (0,0)"
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    num_dict = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII',\n                19: 'XIX', 20: 'XX', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX',\n                90: 'XC', 100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC',\n                800: 'DCCC', 900: 'CM', 1000: 'M'}\n    roman = ''\n    while number > 0:\n        for k in num_dict.keys():\n            if k >= number:\n                number = number - k\n                roman = num_dict[k] + roman\n                break\n    return roman\n",
        "test": "assert     int_to_mini_roman(1) == 'I'"
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # sides_lengths = [a, b, c]\n    sides_lengths = [a, b, c]\n    \n    if sides_lengths.count(min(sides_lengths)) == 3:\n        if a**2 + b**2 == c**2:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert not right_angle_triangle(3, 4, 5)"
    },
    {
        "number": 158,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    max_length = 0\n    max_length_word = \"\"\n    for word in words:\n        word_length = len(set(word))\n        if word_length > max_length:\n            max_length = word_length\n            max_length_word = word\n    return max_length_word\n",
        "test": "assert     find_max([\"hello\",\"hi\",\"hello\"]) == \"hello\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if need > remaining:\n        return [remaining, need-remaining]\n    if need == 0:\n        return [number, 0]\n    if number == 0:\n        return [need, 0]\n    if number <= 0:\n        return [remaining, need-remaining]\n    return eat(number-1, need, remaining-need)\n",
        "test": "assert     eat(80, 160, 250) ==     [160, 380]"
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return None\n",
        "test": "assert     do_algebra([], [1,2,3,4,5,6]) == None"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # your code here\n    l = list(s)\n    for i in range(len(l)):\n        if l[i].isalpha():\n            if l[i].isupper():\n                l[i] = l[i].lower()\n            else:\n                l[i] = l[i].upper()\n    return \"\".join(l)\n",
        "test": "assert     solve('a') == 'A'"
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert     (string_to_md5(\"\") is None) "
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return list(range(a, b+1, 2))\n",
        "test": "assert     generate_integers(2,5) == [2,4]"
    }
]