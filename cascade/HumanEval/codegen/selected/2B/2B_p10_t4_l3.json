[
    {
        "number": 0,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] <= threshold and numbers[i + 1] <= threshold:\n            return True\n    return False\n",
        "test": "assert has_close_elements([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    paren_string = paren_string.replace(' ','')\n    open_paren_list = []\n    parenthesis_list = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_list.append(i)\n        elif paren_string[i] == ')':\n            parenthesis_list.append(paren_string[open_paren_list.pop() + 1:i])\n    return parenthesis_list\n",
        "test": "assert     separate_paren_groups(\"(a) (b) (c)\") == [\"a\", \"b\", \"c\"]",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    return float(f\"{number:.2f}\")\n",
        "test": "assert     truncate_number(0.3) == 0.3",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    current_balance = 0\n    for op in operations:\n        current_balance += op\n        if current_balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero(    [1, 2, 3, 4]) == False",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "    # Calculate the mean.\n    numbers_mean = mean(numbers)\n    # Calculate the sum of absolute differences.\n    sum_absolute_difference = sum([abs(n - numbers_mean) for n in numbers])\n    # Calculate the Mean Absolute Deviation (MAD).\n    return sum_absolute_difference / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.0",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    if not numbers:\n        return []\n    if not delimeter:\n        return numbers\n    if delimeter == 1:\n        return numbers\n    i = 1\n    while i < len(numbers)-1:\n        numbers.insert(i, delimeter)\n        i += delimeter*2\n    return numbers\n",
        "test": "assert     intersperse([], 5) ==    []",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "    i = 0\n    paren_stack = []\n    paren_string = paren_string.replace(\"()\", \"\")\n    paren_string = paren_string.replace(\"(\", \" \")\n    paren_string = paren_string.replace(\")\", \" \")\n    paren_string = paren_string.split()\n    for i in range(len(paren_string)):\n        paren_stack.append(paren_string[i])\n    for i in range(len(paren_stack)):\n        if '(' in paren_stack:\n            paren_stack.remove('(')\n    return paren_stack\n",
        "test": "assert     parse_nested_parens(\"()\") == []",
        "num_ids": 1657,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert filter_by_substring([], 'abc') == []",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    \n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n",
        "test": "assert     sum_product([0,0,0,0]) == (0, 0)",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    length = len(numbers)\n    max_value = 0\n    result = []\n    for i in range(length):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 2394,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    if is_palindrome(string):\n        return string\n    else:\n        # Get longest palindrome that ends in a symbol at the end of the string.\n        # Get the string prefix of the longest palindrome.\n        # Try the longest prefix of the palindrome with the first symbol at the end.\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        pass\n",
        "test": "assert     is_palindrome(\"racecar\")    == True",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "    return ''.join(format(int(x) ^ int(y), '04b') for x, y in zip(a, b))\n",
        "test": "assert     string_xor(\"CD\", \"ED\") == \"AB\"",
        "num_ids": 1912,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if not strings:\n        return None\n    # if len(strings) == 1:\n    #     return strings[0]\n    shortest = strings[0]\n    for string in strings:\n        if len(string) < len(shortest):\n            shortest = string\n    return shortest\n",
        "test": "assert     longest([]) == None",
        "num_ids": 2064,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "test": "assert     greatest_common_divisor(17, 17) == 17",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 2306,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "    s = ''\n    for i in range(n + 1):\n        s += str(i) +''\n    return s.strip()\n",
        "test": "assert ",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    count = 0\n    for letter in string:\n        if letter.isalpha():\n            count += 1\n    return count\n",
        "test": "assert count_distinct_characters(\"abcd\") == 4",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    music_list = music_string.split()\n    return_list = []\n    count = 0\n    for i in music_list:\n        if i == 'o':\n            count += 4\n        elif i == 'o|':\n            count += 2\n        elif i == '.':\n            count += 1\n    return return_list\n    \n",
        "test": "assert     parse_music('') == []",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"how are you?\", \"I\") == 0",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers(\"one zero three zero five one\") ",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "    min_diff = float('inf')\n    smallest_index = None\n    largest_index = None\n    # go through the list looking for the smallest difference\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[0]\n        if diff < min_diff:\n            min_diff = diff\n            smallest_index = i\n    # find the largest difference\n    largest_diff = float('-inf')\n    largest_index = None\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[-1]\n        if diff > largest_diff:\n            largest_diff = diff\n            largest_index = i\n    return numbers[smallest_index], numbers[largest_index]\n",
        "test": "assert     find_closest_elements([1, 1, 1.5, 1.5, 2, 2, 2, 2, 2]) == (1, 2)",
        "num_ids": 2863,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    assert numbers, 'List must contain at least 2 elements'\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value <= max_value, 'Input numbers must be in the range 0 < x < 1'\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0, 0.5, 1, 1, 0.5, 0, 0, 0, 0]) == [0, 0, 0.5, 1, 1, 0.5, 0, 0, 0, 0]",
        "num_ids": 1895,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    filtered = []\n    for v in values:\n        if isinstance(v, int) or isinstance(v, float):\n            filtered.append(v)\n    return filtered\n",
        "test": "assert     filter_integers([1, 2, 3, 'a', 4.0, 5]) == [1, 2, 3, 4, 5], 'Wrong return value'",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(1) == 1, \"Your code did not work!\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                factors.append(i)\n                n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(1) == []",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    unique = []\n    for i in numbers:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], \"foo\") == []",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    new_list = []\n    for number in l:\n        if number > 0:\n            new_list.append(number)\n    return new_list\n",
        "test": "assert get_positive([]) == []",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(5) == True",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    assert(len(xs) % 2 == 0)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i/2\n",
        "test": "assert     find_zero([-1, 1]) == 0",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if len(l) < 3:\n        return l\n    else:\n        i = 0\n        while i < len(l) - 1:\n            if l[i] % 3!= 0:\n                for j in range(i + 1, len(l)):\n                    if l[i] % 3 == 0 and l[j] % 3 == 0:\n                        if l[i] < l[j]:\n                            l[i], l[j] = l[j], l[i]\n                i += 1\n            else:\n                i += 1\n    return l",
        "test": "assert     sort_third([]) ==    []",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1, 1, 2, 2, 3]) == [1, 2, 3], \"1\"",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    if len(l) == 0:\n        return None\n    max_value = l[0]\n    for i in range(1,len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n",
        "test": "assert     max_element([1,2,3]) == 3, \"Max element = 3\"",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    counter = 0\n    for x in range(1, n + 1):\n        if x % 3 == 0:\n            if x % 5 == 0:\n                counter += 1\n        elif x % 7 == 0:\n            counter += 1\n    return counter\n",
        "test": "assert fizz_buzz(13) == 1",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new.append(l[i])\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l_new.append(l[i])\n    return sorted(l_new)\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    # TODO\n    count = 0\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            if sum(l[i:j+1]) == 0:\n                count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     (triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == True)",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "    n_collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if (i+1) == (j+1) or (i-1) == (j-1):\n                    n_collisions += 1\n    return n_collisions\n",
        "test": "assert     car_race_collision(1) == 0, 'car_race_collision(1) failed'",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    for a in range(len(l)-1):\n        for b in range(a + 1, len(l)):\n            if l[a] + l[b] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"pairs_sum_to_zero for empty list.\"",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    # result = 0\n    # while x > 0:\n    #     result = result * 10 + x % base\n    #     x //= 10\n    # return str(result)\n    return f\"{x:b}\"\n",
        "test": "assert     change_base(10, 2) == \"1010\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(1, 5) == 2.5",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    \n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    l.sort()\n    if len(l) % 2:\n        return l[len(l)//2]\n    else:\n        return sum(l[len(l)//2-1:len(l)//2+1])/2\n",
        "test": "assert     median([1,2,3,4,5]) == 3, \"Wrong median\"",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    \n    if text == '':\n        return True\n    \n    text = text.lower()\n    text = text.replace(\" \", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"?\", \"\")\n    \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_palindrome(\"Rohit\")",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    x = 1\n    for i in range(n):\n        x = (x * x) % p\n    return x\n",
        "test": "assert     modp(1, 2) == 1",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\", \"encode_shift and decode_shift are not complementary\"",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if text.find(vowel)!= -1:\n            text = text.replace(vowel, \"\")\n    return text\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\"",
        "num_ids": 1826,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, -2, 3], 1) is False",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return x + y\n",
        "test": "assert add(1,2) == 3",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return True if len(s0) == len(s1) and len(s0) > 0 and len(set(s0)) == len(set(s1)) else False\n",
        "test": "assert     same_chars(\"abcd\", \"abcd\")",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char!= stack.pop():\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"<()\") == False, \"<\"",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    prev = float(\"-inf\")\n    for x in l:\n        if prev > x:\n            return False\n        prev = x\n    return True\n",
        "test": "assert not monotonic([1, 2, 3, 2, 1, 3, 2, 1, 3, 2])",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([1,2,3,4], [2,3,4,5]) == [2,3,4], 'Wrong!'",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    if n == 1:\n        return n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(9) == 3",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert     sum_to_n(5) == 15, 'Function not working.'",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    balance = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            balance += 1\n        if brackets[i] == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n",
        "test": "assert not correct_bracketing(\"(((()))\")",
        "num_ids": 1651,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    xs = np.array(xs)\n    return np.insert(xs[1:] - xs[:-1], 0, 1)\n",
        "test": "assert ",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count('hello') == 2",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    n = len(str(x))\n    if shift > n:\n        x = str(x)[::-1]\n        shift = n - shift\n    result = int(x[shift:] + x[:shift])\n    return str(result)\n",
        "test": "assert     circular_shift(10, 8) == '1', 'Circular shift should be equal to 1'",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    return sum([ord(i) for i in s if i.isupper()])\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    m = 0\n    n = s.count('m')\n    a = s.count('a')\n    o = s.count('o')\n    m = a + o + m\n    return m-n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert fruit_distribution('000', 0) == 0",
        "num_ids": 2599,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "    i = 0\n    max_count = 0\n    max_int = 0\n    while i < len(lst):\n        count = lst.count(lst[i])\n        if count > max_count:\n            max_count = count\n            max_int = lst[i]\n        i += 1\n    return max_int if max_count >= 2 else -1\n",
        "test": "assert search([]) == -1",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] > lst[1] and lst[0] > lst[2]:\n            return [lst[1], lst[0], lst[2]]\n        if lst[0] < lst[1] and lst[0] < lst[2]:\n            return [lst[2], lst[0], lst[1]]\n        if lst[1] > lst[2]:\n            return [lst[2], lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0], lst[2]]\n    if len(lst) == 4:\n        if lst[0] > lst[1] and lst[0] > lst[2] and lst[0] > lst[3]:\n            return [lst[1], lst[0], lst[2], lst[3]]\n        if lst[0] < lst[1] and lst[0] < lst[2] and lst[0] < lst[3]:\n            return [lst[3], lst[0], lst[2], lst[1]]\n        if lst[1] > lst[2] and lst[1] > lst[3]:\n            return [lst[2], lst[1], lst[3], lst[0]]\n        if lst[1] < lst[2] and lst[1] < lst[3]:\n            return [lst[3], lst[1], lst[2], lst[0]]\n        if lst[2] > lst[3] and lst[2] > lst[0]:\n            return [lst[3], lst[2], lst[1], lst[0]]\n        if lst[2] < lst[3] and lst[2] < lst[0]:\n            return [lst[1], lst[2], lst[3], lst[0]]\n        if lst[3] > lst[0]:\n            return [lst[1], lst[3], lst[2], lst[0]]\n        else:\n            return [lst[1], lst[2], lst[3], lst[0]]\n    if len(lst) == 5:\n        if lst[0] > lst[1] and lst[0] > lst[2] and lst[0] > lst[3] and lst[0] > lst[4]:\n            return [lst[1], lst[0], lst[2], lst[3], lst[4]]\n        if lst[0] < lst[1] and lst[0] < lst[2] and lst[0] < lst[3] and lst[0] < lst[4]:\n            return [lst[4], lst[0], lst[2], lst[3], lst[1]]\n        if lst[1] > lst[2] and lst[1] > lst[3] and lst[1] > lst[4]:\n            return [lst[2], lst[1], lst[3], lst[4], lst[0]]\n        if lst[1] < lst[2] and lst[1] < lst[3] and lst[1] < lst[4]:\n            return [lst[4], lst[1], lst[2], lst[3], lst[0]]\n        if lst[2] > lst[3] and lst[2] > lst[4]:\n            return [lst[3], lst[2], lst[1], lst[4], lst[0]]\n        if lst[2] < lst[3] and lst[2] < lst[4]:\n            return ",
        "test": "assert     strange_sort_list([]) == [], 'incorrect'",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        return (a * b * 0.5) / 2\n",
        "test": "assert triangle_area(2,2,2) == 1",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    if type(q)==list:\n        if len(q)==0:\n            return True\n        else:\n            if q[0]==q[-1]:\n                if sum(q)<=w and q[0]>=0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3], 2) == False",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "    changes = 0\n    max_seen = 0\n    for i in range(len(arr)):\n        if arr[i] < max_seen:\n            changes += 1\n            max_seen = arr[i]\n    return changes\n",
        "test": "assert     smallest_change([1,1,1])    ==    0",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert     (total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c'])",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    for i in range(2,101):\n        if i*3<=a:\n            if a%i==0:\n                return False\n            if i*3>a:\n                if a%i==0:\n                    return False\n    return True\n",
        "test": "assert     is_multiply_prime(35) == False, \"35 is not the multiplication of 3 prime numbers\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return True if x == n**(int(x/n)) else False\n",
        "test": "assert     is_simple_power(2, 3) == False, \"2 is not a simple power of 3\"",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    if a%3 == 0 and a%4 == 0 and a%5 == 0:\n        return True\n    return False\n",
        "test": "assert     iscube(8) == False",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    # your code here\n    pass\n",
        "test": "assert     hex_key('') == None",
        "num_ids": 2928,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "    pass\n",
        "test": "assert     decimal_to_binary(15) == '11101'",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    h = set()\n    for i in range(len(s)):\n        if s[i] in h:\n            return False\n        h.add(s[i])\n    return len(h) >= 3\n",
        "test": "assert is_happy(\"abbba\") == False",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    return [[\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"], grades]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"B+\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])",
        "num_ids": 4111,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    length = len(string)\n    if length > 1:\n        is_prime = True\n        for i in range(2, length):\n            if length % i == 0:\n                is_prime = False\n                break\n        return is_prime\n    else:\n        return False\n",
        "test": "assert    prime_length('dwadwadg') == False",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "    count = 0\n    i = 1\n    while count < n:\n        if str(i) == str(i)[::-1]:\n            count += 1\n        i += 1\n    return count\n    \ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 2\n    assert starts_one_ends(3) == 1\n    assert starts_one_ends(4) == 2\n    assert starts_one_ends(5) == 2\n    assert starts_one_ends(6) == 3\n    assert starts_one_ends(7) == 4\n    assert starts_one_ends(8) == 4\n    assert starts_one_ends(9) == 5\n    assert starts_one_ends(10) == 6\n    assert starts_one_ends(11) == 6\n    assert starts_one_ends(12) == 7\n    assert starts_one_ends(13) == 7\n    assert starts_one_ends(14) == 8\n    assert starts_one_ends(15) == 8\n    assert starts_one_ends(16) == 9\n    assert starts_one_ends(17) == 9\n    assert starts_one_ends(18) == 10\n    assert starts_one_ends(19) == 10\n    assert starts_one_ends(20) == 11\n    assert starts_one_ends(21) == 11\n    assert starts_one_ends(22) == 12\n    assert starts_one_ends(23) == 12\n    assert starts_one_ends(24) == 13\n    assert starts_one_ends(25) == 13\n    assert starts_one_ends(26) == 14\n    assert starts_one_ends(27) == 14\n    assert starts_one_ends(28) == 15\n    assert starts_one_ends(29) == 15\n    assert starts_one_ends(30) == 16\n    assert starts_one_ends(31) == 16\n    assert starts_one_ends(32) == 17\n    assert starts_one_ends(33) == 17\n    assert starts_one_ends(34) == 18\n    assert starts_one_ends(35) == 18\n    assert starts_one_ends(36) == 19\n    assert starts_one_ends(37) == 19\n    assert starts_one_ends(38) == 20\n    assert starts_one_ends(39) == 20\n    assert starts_one_ends(40) == 21\n    assert starts_one_ends(41) == 21\n    assert starts_one_ends(42) == 22\n    assert starts_one_ends(43) == 22\n    assert starts_one_ends(44) == 23\n    assert starts_one_ends(45) == 23\n    assert starts_one_ends(46) == 24\n    assert starts_one_ends(47) == 24\n    assert starts_one_ends(48) == 25\n    assert starts_one_ends(49) == 25\n    assert starts_one_ends(50) == 26\n    assert starts_one_ends(51) == 26\n    assert starts_one_ends(52) == 27\n    assert starts_one_ends(53) == 27\n    assert starts_one_ends(54) == 28\n    assert starts_one_ends(55) == 28\n    assert starts_one_ends(56) == 29\n    assert starts_one_ends(57) == 29\n    assert starts_one_ends(58) == 30\n    assert starts_one_ends(59) == 30\n    assert starts_one_ends(60) == 31\n    assert starts_one_ends(61) == 31\n    assert starts_one_ends(62) == 32\n    assert starts_one_ends(63) == 32\n    assert starts_one_ends(64) == 33\n    assert starts_one_ends(65) == 33\n    assert starts_one_ends(66) == 34\n    assert starts_one_ends(67) == 34\n    assert starts_one_ends(68) == 35\n    assert starts_one_ends(69) == 35\n    assert starts_one_ends(70) == 36\n    assert starts_one_ends(71) == 36\n    assert starts_one_ends(72) == 37\n    assert starts_one_ends(73) == 37\n    assert starts_one_ends(74) == 38\n    asser",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    if N == 0:\n        return '0'\n    else:\n        return str(bin(N).count('1')).replace('0b','')\n",
        "test": "assert isinstance(solve(10000), str)",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    sum = 0\n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            sum += lst[i]\n    return sum\n",
        "test": "assert ",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    \n    res = []\n    for word in s.split():\n        for j in range(0,len(word)):\n            res.append(word[j])\n    return \"\".join(res)\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    if not lst:\n        return []\n    if x not in lst[0]:\n        return []\n    result = [(i, x) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert     get_row([[], [], []], 0) == []",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    # your code here\n    return sorted(array)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    # your code here\n    return s\n",
        "test": "assert     encrypt('') == ''",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    \n    # O(n) time complexity\n    \n    # O(n) space complexity\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return lst[i+1]\n    return None\n    \n    # This one is O(n) time complexity\n    # This one is O(1) space complexity\n    if not lst:\n        return None\n    l = sorted(lst)\n    return l[1]\n    \ndef next_smallest2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # O(n) time complexity\n    \n    # O(n) space complexity\n    \n    if not lst:\n        return None\n    \n    l = sorted(lst)\n    return l[1]\n",
        "test": "assert next_smallest([]) == None",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    return S.count(\"I\")\n",
        "test": "assert     is_bored('I?') == 1, 'No. 2'",
        "num_ids": 2140,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    return any([x == (y + z), x == (y - z), x == (y * z)]) and all([type(x) == int, type(y) == int, type(z) == int])",
        "test": "assert any_int(1, 2, 3) == False",
        "num_ids": 1851,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    result = []\n    for i in message:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return \"\".join(result)\n",
        "test": "assert     encode(\"HeLlO\") == \"hElLo\"",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    max = 0\n    for i in lst:\n        s = str(i)\n        if is_prime(int(s[0])) and is_prime(int(s[1])):\n            if max < int(s):\n                max = int(s)\n    return sum([int(s) for s in str(max)])\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 2504,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if key.islower()!= True and key.isupper()!= True:\n            return False\n    return True\n        \n",
        "test": "assert check_dict_case({}) == False",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    primes = []\n    if n == 0:\n        return primes\n    elif n < 2:\n        return primes\n    else:\n        for num in range(2, n + 1):\n            is_prime = True\n            for prime in primes:\n                if num % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(num)\n        return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return int(a/10) * int(b/10)\n",
        "test": "assert ",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper(\"\") == 0",
        "num_ids": 1860,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    n = float(value)\n    if n == int(n):\n        return int(n)\n    return int(round(n))\n",
        "test": "assert     closest_integer(2.1) == 2",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "    result = []\n    if n % 2 == 0:\n        result.append(n)\n        n = n - 2\n    else:\n        result.append(n)\n        n = n - 1\n    while n > 0:\n        result.append(n)\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n - 1\n    return result\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    words = s.split(\",\")\n    return words\n",
        "test": "assert     words_string(\"word1\") == ['word1']",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    # your code here\n    return -1\n",
        "test": "assert choose_num(5, 5) == -1",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n",
        "test": "assert     rounded_avg(5,2) == -1",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    try:\n        if arr == None:\n            return []\n        if len(arr) == 0:\n            return []\n        \n        arr_reverse = []\n        # for every element in the array, reverse it\n        for i in range(len(arr)):\n            arr_reverse.append(arr[i])\n        arr_reverse.reverse()\n        \n        # add each element in the reverse array to a new array\n        arr_numbers = []\n        for i in range(len(arr)):\n            number = arr_reverse[i]\n            number_str = str(number)\n            \n            # if the number is between 1 and 9, and its value is between 1 and 9\n            # add it to the array\n            if number_str[0] == \"1\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"2\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"3\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"4\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"5\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"6\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"7\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"8\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"9\":\n                arr_numbers.append(number_str)\n        \n        # we reverse the array to get the right order\n        arr_numbers.reverse()\n        \n        # for each number in the numbers array, replace its digit by its name\n        numbers_names = []\n        for i in range(len(arr_numbers)):\n            number = arr_numbers[i]\n            number_str = number[0]\n            if number_str == \"1\":\n                numbers_names.append(\"One\")\n            if number_str == \"2\":\n                numbers_names.append(\"Two\")\n            if number_str == \"3\":\n                numbers_names.append(\"Three\")\n            if number_str == \"4\":\n                numbers_names.append(\"Four\")\n            if number_str == \"5\":\n                numbers_names.append(\"Five\")\n            if number_str == \"6\":\n                numbers_names.append(\"Six\")\n            if number_str == \"7\":\n                numbers_names.append(\"Seven\")\n            if number_str == \"8\":\n                numbers_names.append(\"Eight\")\n            if number_str == \"9\":\n                numbers_names.append(\"Nine\")\n        \n        # return the array\n        return numbers_names\n    except Exception:\n        raise Exception",
        "test": "assert     by_length([2, 5, 9]) == [\"Two\", \"Five\", \"Nine\"]",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    return list(map(factorial, range(1, n + 1)))",
        "test": "assert     f(1) == [1], f(1)",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "    if n < 10:\n        return (1, n - 1)\n    even_count, odd_count = 0, 0\n    is_odd = True\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(divmod(num,10)) > 0:\n                count += 1\n        else:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0, \"Empty array\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    def move_one(arr, num):\n        #start from the right\n        start_index = len(arr)-1\n        i=start_index\n        while i>0 and arr[i-1]>=arr[i]:\n            i-=1\n        if i<start_index:\n            return False\n        #move left\n        while i>start_index:\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            i-=1\n        return True\n    if len(arr)==0:\n        return True\n    while True:\n        if move_one(arr, arr[0]):\n            return True\n        arr.pop(0)\n    return False\n",
        "test": "assert     move_one_ball([]) == True, \"Wrong output\"",
        "num_ids": 2432,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    count_even = 0\n    for i in lst1:\n        if i%2 == 0:\n            count_even += 1\n    if count_even == 0:\n        return \"NO\"\n    else:\n        for j in lst2:\n            if j%2 == 0:\n                count_even -= 1\n        if count_even == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "test": "assert     exchange(lst1=[4,2,1,2], lst2=[2,2,2,4]) == \"NO\"",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    if len(test) == 0:\n        return {}\n    res = {}\n    for i in test:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\n",
        "test": "assert     histogram('aab') == {'a': 2, 'b': 1}",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    return_value = ()\n    return_val = True\n    length = len(c)\n    for i in range(length):\n        for j in range(length):\n            if s[i]!= c[j]:\n                return_val = False\n                break\n        if not return_val:\n            break\n    if return_val:\n        return_value = (s,True)\n    else:\n        return_value = (s,False)\n    return return_value\n",
        "test": "assert     reverse_delete('','') == ('',True)",
        "num_ids": 3656,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    return ['the number of odd elements'+ str(i) + 'n the str' + str(i) +'of the'+ str(i) + 'input.' for i in range(1, len(lst) + 1)]\n",
        "test": "assert odd_count([]) == []",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    if len(nums) == 0:\n        return 0\n    result = None\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if result == None or result > current_sum:\n            result = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return result\n",
        "test": "assert     minSubArraySum([0]) == 0",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return 0\n",
        "test": "assert     max_fill([",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    # input: string s, int n\n    # output: list of words\n    # return all words in s that have exactly n consonants\n    # \"\".join([\"a\"]) -> \"\"\n    # \"\".join([\"a\", \"b\"]) -> \"ab\"\n    # split(\",\") -> ['', '', '']\n    # split(\" \".join([\"a\"])) -> ['a']\n    # split(\" \".join([\"a\", \"b\"])) -> ['a', 'b']\n    # split(s.split(\" \")) -> ['', '', '', '', '', '']\n    # s = \" \".join(s.split(\" \"))\n    s = s.lower().split(\" \")\n    def is_consonant(c):\n        return c.lower() not in \"aeiou\"\n    def count_consonants(s):\n        count = 0\n        for c in s:\n            if is_consonant(c):\n                count += 1\n        return count\n    return [word for word in s if count_consonants(word)==n]\n",
        "test": "assert ",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    \n    vowels = \"aeiouAEIOU\"\n    \n    if len(word) < 2:\n        return \"\"\n        \n    else:\n        vowel = \"\"\n        \n        for i in range(len(word)-1, -1, -1):\n            if word[i] in vowels:\n                vowel = word[i]\n                break\n                \n        if vowel == \"\":\n            return \"\"\n                \n        else:\n            i = len(word) - 1\n            while word[i] not in vowels:\n                i = i - 1\n                if i == -1:\n                    return \"\"\n                    \n            return word[i]\n",
        "test": "assert get_closest_vowel('tree') == 'e'",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    stack = []\n    balanced = 0\n    for paren in lst:\n        if paren == '(':\n            balanced += 1\n            stack.append(paren)\n        else:\n            if balanced == 0:\n                return 'No'\n            else:\n                stack.pop()\n                balanced -= 1\n",
        "test": "assert     match_parens(['((', '()', ')))', ')()()']) == 'No', 'Second test case is wrong'",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    # sort the list from max to min and return the first k\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([1], 1) == [1]",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    return sum(lst[::2])\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    if n <= k:\n        return sum(arr)\n",
        "test": "assert     add_elements([], 1) == 0",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "    odd_numbers = [1]\n    current = 2\n    while current!= 1:\n        if current % 2 == 0:\n            current = current//2\n        else:\n            current = (3*current)+1\n        odd_numbers.append(current)\n    return sorted(odd_numbers)\n",
        "test": "assert ",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    if not date:\n        return False\n    date = date.split('-')\n    if len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:\n        return False\n    if int(date[0]) in range(1,32) and int(date[1]) in range(1,32):\n        return True\n    elif int(date[0]) in range(1,31) and int(date[1]) in range(1,32):\n        return True\n    elif int(date[0]) in range(1,30) and int(date[1]) in range(1,31):\n        if int(date[0]) == 2:\n            return True\n        elif int(date[0]) in range(4,13) and int(date[1]) in range(1,32):\n            return True\n        elif int(date[0]) in range(1,13) and int(date[1]) in range(1,32):\n            return True\n        elif int(date[0]) in range(1,32) and int(date[1]) in range(1,32):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     valid_date('1-1-2100') == False, 'First test case is wrong'",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    words = txt.split(' ')\n    words = list(filter(None, words))\n    return words\n",
        "test": "assert     split_words('spam') == ['spam']",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if len(lst) < 2:\n        return True\n    if lst[0] < lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return False\n",
        "test": "assert     is_sorted([3,3,1]) == False",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    # define a function to check if a given number is prime\n    def isprime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    # define a function to get intersection of two intervals\n    def getintersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    # check if two intervals have intersection\n    if getintersection(interval1, interval2) == interval1:\n        return \"YES\"\n    elif getintersection(interval1, interval2) == interval2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     (intersection((1, 2), (2, 4)) == \"NO\"), \"input = (1, 2), (2, 4) => output = NO\"",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    result = 0\n    for i in arr:\n        if i == 1:\n            result += 1\n        elif i == -1:\n            result -= 1\n        elif i == 0:\n            pass\n        else:\n            return None\n    return result\n",
        "test": "assert     prod_signs([-5,-2,3,4]) == None, 'Wrong'",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    R, C = len(grid), len(grid[0])\n",
        "test": "assert ",
        "num_ids": 2769,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n    if n > 2:\n        return [1,3] + tri(n-2) + tri(n-1)\n",
        "test": "assert       tri(0)  == []",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    return int(n % 10) * int(n // 10) * int(n // 100) * int(n // 1000) * int(n // 10000) * int(n // 100000) * int(n // 1000000) * int(n // 10000000) * int(n // 100000000) * int(n // 1000000000) * int(n // 10000000000) * int(n // 1000000000000)\n",
        "test": "assert     digits(20) == 0",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    if string == '':\n        return False\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        elif string[i] == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert     is_nested('(]') == False",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    result = 0\n    for i in lst:\n        result += i*i\n    return result\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 2694,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    return len(txt) > 0 and not txt[-1].isalpha() and not txt[-1].isnumeric()\n",
        "test": "assert     check_if_last_char_is_a_letter('1') == False",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    i = 0\n    while i < len(arr)-1:\n        if arr[i] > arr[i+1]:\n            return i\n        i += 1\n    return -1\n",
        "test": "assert     can_arrange([]) == -1, 'test4'",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    #return a, b\n    \n    def largest_smallest_integer(lst):\n    \n        #this is how we get the smallest\n        smallest = None\n        if len(lst) > 0:\n            if lst[0] < 0:\n                smallest = lst[0]\n            else:\n                smallest = None\n            \n            #this is the second smallest\n            largest = None\n            if lst[0] < 0:\n                largest = lst[0]\n            else:\n                largest = None\n            \n            for i in range(len(lst)):\n                if lst[i] > 0:\n                    if largest is None:\n                        largest = lst[i]\n                    else:\n                        largest = max(largest, lst[i])\n                    if smallest is None:\n                        smallest = lst[i]\n                    else:\n                        smallest = min(smallest, lst[i])\n            return (largest, smallest)\n    \n        return (None, None)\n    \n    return largest_smallest_integer(lst)\n    \n    \n",
        "test": "assert     largest_smallest_integers([]) == (None, None), 'Should be (None, None)'",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    a, b = float(a), float(b)\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 2)        ==     2,    \"Compare_one incorrect\"",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    if (n % 2 == 0) or (n < 2):\n        return False\n    \n    sum = 0\n    while (n >= 2):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = (n-1)//2\n        sum += n\n    \n    return True if sum == n else False\n    \ndef is_not_divisible_by_seven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 7.\n    Example\n    is_not_divisible_by_seven(7) == False\n    is_not_divisible_by_seven(14) == True\n    is_not_divisible_by_seven(19) == False\n    is_not_divisible_by_seven(24) == False\n    \"\"\"\n    if (n % 7 == 0) or (n % 2 == 0):\n        return False\n    \n    sum = 0\n    while (n >= 7):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = (n-1)//2\n        sum += n\n    \n    return True if sum == n else False\n    \ndef is_divisible_by_seven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 7.\n    Example\n    is_divisible_by_seven(7) == False\n    is_divisible_by_seven(14) == True\n    is_divisible_by_seven(19) == False\n    is_divisible_by_seven(24) == False\n    \"\"\"\n    if (n % 7 == 0) or (n % 2 == 0):\n        return False\n    \n    sum = 0\n    while (n >= 7):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = (n-1)//2\n        sum += n\n    \n    return True if sum == n else False\n    \ndef is_divisible_by_three_and_five(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 3 and 5.\n    Example\n    is_divisible_by_three_and_five(7) == True\n    is_divisible_by_three_and_five(14) == True\n    is_divisible_by_three_and_five(19) == False\n    is_divisible_by_three_and_five(24) == False\n    \"\"\"\n    return is_divisible_by_seven(n) and is_divisible_by_three_and_five(n//7)\n    \ndef is_divisible_by_three_and_five_or_seven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 3 and 5 or 7.\n    Example\n    is_divisible_by_three_and_five_or_seven(7) == True\n    is_divisible_by_three_and_five_or_seven(14) == True\n    is_divisible_by_three_and_five_or_seven(19) == False\n    is_divisible_by_three_and_five_or_seven(24) == False\n    \"\"\"\n    return is_divisible_by_three_and_five(n) or is_divisible_by_seven(n)\n    \ndef is_divisible_by_three_and_five_or_seven_or_nine(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 3, 5, or 7.\n    Example\n    is_divisible_by_three_and_five_or_seven_or_nine(7) == True\n    is_divisible_by_three_and_five_or_seven_or_nine(14) == True\n    is_divisible_by_three_and_five_or_seven_or_nine(19) == False\n    is_divisible_by_three_and_five_or_seven_or_nine(24) == False\n    \"\"\"\n    return i",
        "test": "assert     is_equal_to_sum_even(2) == False",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact\n",
        "test": "assert     special_factorial(5) == 120, \"correctness test\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    return text.replace(' ', '_').replace('  ', '-').replace('   ', '-')\n",
        "test": "assert     fix_spaces('test') == 'test', \"Test case 1 fail.\"",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    if file_name.find(\".\") < 0:\n        return \"No\"\n    file_name = file_name.split(\".\")\n    if file_name[0].isalpha():\n        return \"No\"\n    for i in file_name:\n        if i.isalpha():\n            if i.islower():\n                return \"No\"\n            else:\n                return \"Yes\"\n        elif i.isdigit():\n            return \"No\"\n        elif i.isupper():\n            return \"No\"\n        elif i == \"\":\n            return \"No\"\n        elif i == \".\":\n            return \"No\"\n        else:\n            return \"No\"\n        \ndef menu():\n    \"\"\"Function to display the menu\"\"\"\n    print(\"1. Get all files in a folder\")\n    print(\"2. Get all files in a folder, sorted by size\")\n    print(\"3. Get all files in a folder, sorted by last modified time\")\n    print(\"4. Get a file from the folder\")\n    print(\"5. Get all files in a sub-folder\")\n    print(\"6. Get all files in a sub-folder, sorted by size\")\n    print(\"7. Get all files in a sub-folder, sorted by last modified time\")\n    print(\"8. Get all files in a sub-folder, sorted by modification time\")\n    print(\"9. List all files and sub-folders in a folder\")\n    print(\"10. List all files and sub-folders in a folder, sorted by size\")\n    print(\"11. List all files and sub-folders in a folder, sorted by last modified time\")\n    print(\"12. List all files and sub-folders in a folder, sorted by modification time\")\n    print(\"13. Create a file\")\n    print(\"14. Create a folder\")\n    print(\"15. Change the permissions of a file\")\n    print(\"16. Delete a file\")\n    print(\"17. Delete a folder\")\n    print(\"18. Create a symbolic link\")\n    print(\"19. Delete a symbolic link\")\n    print(\"20. Make a file executable\")\n    print(\"21. Make a file non-executable\")\n    print(\"22. Make a folder executable\")\n    print(\"23. Make a folder non-executable\")\n    print(\"24. Delete a file from the file system\")\n    print(\"25. Delete a folder from the file system\")\n    print(\"26. Rename a file\")\n    print(\"27. Rename a folder\")\n    print(\"28. Copy a file\")\n    print(\"29. Copy a folder\")\n    print(\"30. Move a file\")\n    print(\"31. Move a folder\")\n    print(\"32. Reroute all files\")\n    print(\"33. Delete all files\")\n    print(\"34. Delete all files and folders\")\n    print(\"35. Move a file to a new location\")\n    print(\"36. Move a file to a new location, sorted by size\")\n    print(\"37. Move a file to a new location, sorted by last modified time\")\n    print(\"38. Move a file to a new location, sorted by modification time\")\n    print(\"39. Create a new file\")\n    print(\"40. Create a new folder\")\n    print(\"41. Create a new file, sorted by size\")\n    print(\"42. Create a new file, sorted by last modified time\")\n    print(\"43. Create a new file, sorted by modification time\")\n    print(\"44. Create a new folder, sorted by size\")\n    print(\"45. Create a new folder, sorted by last modified time\")\n    print(\"46. Create a new folder, sorted by modification time\")\n    print(\"47. Create a new folder, sorted by last modified time\")\n    print(\"48. Create a new file, sorted by size\")\n    print(\"49. Create a new file, sorted by last modified time\")\n    print(\"50. Create a new file, sorted by modification time\")\n    print(\"51. Create a new folder, sorted by size\")\n    print(\"52. Create a new folder, sorted by last modified time\")\n    print(\"53. Create a new folder, sorted by modification time\")\n    print(\"54. Create a new folder, sorted by last modified time\")\n    print(\"55. Delete a folder\")\n    print(\"56. Delete a folder, sorted by size\")\n    print(\"57. Delete a folder, sorted by last modified time\")\n    print(\"58. Delete a folder, sorted by modification time\")\n",
        "test": "assert     file_name_check(\"zz0\") == \"No\"",
        "num_ids": 2555,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    result = 0\n    for entry in lst:\n        if entry % 3 == 0 or entry % 4 == 0:\n            result += entry**2\n    return result\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "    words = sentence.split()\n    return \" \".join(sorted(words, key=len))\n",
        "test": "assert     words_in_sentence(    'hello') == \"hello\"",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    print(\"\\n\\n\")\n    print(\"simplify\")\n    print(x, \"/\", n)\n    x_n = x.split(\"/\")\n    n_n = n.split(\"/\")\n    n_1 = n_n[0]\n    n_2 = n_n[1]\n    print(x_n, n_n)\n    print(\"n_1 = \" + n_1)\n    print(\"n_2 = \" + n_2)\n    n_1_int = int(n_1)\n    n_2_int = int(n_2)\n    print(\"n_1_int = \" + str(n_1_int))\n    print(\"n_2_int = \" + str(n_2_int))\n    if n_1_int == 0 or n_2_int == 0:\n        return False\n    if n_1_int == 1:\n        return True\n    else:\n        if x_n[1] == \"0\":\n            return False\n        x_n_1 = x_n[0]\n        x_n_2 = x_n[1]\n        x_n_1_int = int(x_n_1)\n        x_n_2_int = int(x_n_2)\n        if x_n_1_int == 0:\n            return True\n        if x_n_1_int > 0:\n            x_n_1_int = x_n_1_int\n        else:\n            x_n_1_int = -x_n_1_int\n        if x_n_2_int == 0:\n            return False\n        if x_n_2_int > 0:\n            x_n_2_int = x_n_2_int\n        else:\n            x_n_2_int = -x_n_2_int\n        if n_1_int > n_2_int:\n            n_1_int = n_1_int\n        else:\n            n_1_int = n_1_int\n            n_2_int = n_2_int\n        return True\n",
        "test": "assert     simplify(\"0/1\", \"0/1\") == False",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    nums.sort(key=lambda n: (sum(int(i) for i in str(n)),n))\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 2452,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num // 10 % 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    a = []\n    for i in range(1, n+1):\n        for j in range(i + 1, n+1):\n            k = n - i - j\n            if i + j + k == n:\n                a.append(i)\n                a.append(j)\n                a.append(k)\n    return len(a)\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    planets = {\"Mars\":(0.6, \"Saturn\"),\n               \"Jupiter\":(0.2, \"Uranus\"),\n               \"Saturn\":(0.6, \"Neptune\"),\n               \"Uranus\":(0.8, \"Jupiter\"),\n               \"Neptune\":(0.4, \"Saturn\")}\n    \n    if planet1 in planets and planet2 in planets:\n        p1_id, p2_id = planets[planet1]\n        p1_len, p2_len = len(p1_id), len(p2_id)\n        if p1_len == p2_len:\n            return (p1_id, p2_id)\n        elif p1_len < p2_len:\n            return (p1_id, ) + bf(p2_id, planet1)\n        else:\n            return (p2_id, ) + bf(p1_id, planet2)\n    else:\n        return ()\n",
        "test": "assert     bf('Mercury', 'Earth') ==     ()",
        "num_ids": 3792,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return sorted(sorted(lst, key=len), key=len)\n    ",
        "test": "assert sorted_list_sum([]) == []",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2, 1, 1) == 1",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    if not lst:\n        return 0\n    \n    odd_nums = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_nums += num ** 2\n    return odd_nums\n",
        "test": "assert double_the_difference([]) == 0, \"The output is not correct\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    out = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            out.append(0)\n        else:\n            out.append(abs(guess[i]-game[i]))\n    return out\n",
        "test": "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
        "num_ids": 1551,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    extensions.sort(reverse=True)\n    highest_extension = extensions[0]\n    for i in range(len(extensions)):\n        if extensions[i].isupper():\n            if extensions[i].lower() > extensions[i]:\n                extensions[i] = extensions[i].lower()\n    return class_name + '.' + highest_extension\n",
        "test": "assert     Strongest_Extension(\"Glucose\", [\"Cheese\"]) == \"Glucose.Cheese\", \"Check if you get the correct value\"",
        "num_ids": 1878,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    for i in range(1,len(a)+1):\n        if a[i:] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"abcd\", \"abc\")    == True, \"Third\"",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "    return (num % 10, (num // 10 + 1) % 2)\n",
        "test": "assert     even_odd_count(12) == (2,0)",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "    rv = []\n    roman = {1:'I', 5:'V', 10:'X', 50:'L', 100:'C', 500:'D', 1000:'M'}\n    for k in sorted(roman, reverse=True):\n        while number >= k:\n            number -= k\n            rv.append(roman[k])\n    return ''.join(rv)\n",
        "test": "assert     int_to_mini_roman(1) == 'I'",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2) and a!= b!= c\n",
        "test": "assert     right_angle_triangle(1, 2, 4) == False",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    max = None\n    for word in words:\n        if max == None or len(max) < len(word):\n            max = word\n    return max\n",
        "test": "assert     find_max([\"python\", \"hi\", \"hello\"]) == \"python\", \"Should return 'python'\"",
        "num_ids": 2346,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    # Conditions\n    if number == 0 or need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number, remaining - need]\n",
        "test": "assert     eat(0, 0, 1000) == [0, 1000]",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            operand = add(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '-':\n            operand = subtract(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '*':\n            operand = multiply(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '/':\n            operand = divide(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '^':\n            operand = exponentiate(operand, operator[i+1])\n            i += 2\n",
        "test": "assert ",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    #base case\n    if not s:\n        return s\n    #determine whether we need to reverse\n    if s[0].isalpha():\n        #reverse if upper\n        if s[0].isupper():\n            return s[::-1].upper()\n        #reverse if lower\n        else:\n            return s[::-1].lower()\n    else:\n        #return original\n        return s[::-1]\n",
        "test": "assert solve(\"\") == \"\"",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    # \"9b4c78b1ac86d0d7ab1f86a9ba78e33\"\n    if text == '':\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "test": "assert     generate_integers(5, 10) == [6, 8, 10]",
        "num_ids": 1646,
        "indeed": false
    }
]