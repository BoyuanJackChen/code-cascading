[
    {
        "number": 0,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5], 0.1)"
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "    paren_list = []\n    for paren in paren_string.split(\" \"):\n        paren_list.append(paren.strip())\n    return paren_list\n",
        "test": "assert     separate_paren_groups('()') == ['()']"
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    integer_part, decimal_part = math.modf(number)\n    decimal_part = round(decimal_part, 10)\n    return decimal_part\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    if not operations:\n        return False\n    balance = 0\n    for operation in operations:\n        if operation >= 0:\n            balance += operation\n        else:\n            balance -= operation\n    if balance < 0:\n        return True\n    return False\n",
        "test": "assert not below_zero([0, 3, 2, -2])"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "    if not numbers:\n        raise ValueError('No input numbers!')\n    \n    mean = sum(numbers) / len(numbers)\n    res = 0.0\n    for num in numbers:\n        res += abs(num - mean)\n    return res / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.5"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    return numbers + (delimeter - 1) * [delimeter]\n",
        "test": "assert     intersperse([1, 2, 3, 4], 0) ==    [1, 2, 3, 4]"
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    nested_parens = {}\n    num_level = 0\n    index = 0\n    while index < len(paren_string):\n        paren = paren_string[index]\n        index += 1\n        if paren in '({[':\n            nested_parens[paren] = num_level\n        elif paren in ')])':\n            if num_level == 0:\n                return list(nested_parens.values())\n            else:\n                last_open_paren = paren_string[index - 1]\n                index += 1\n                if nested_parens[last_open_paren] == nested_parens[paren]:\n                    return list(nested_parens.values())\n                else:\n                    num_level -= 1\n    return list(nested_parens.values())\n",
        "test": "assert     parse_nested_parens(\"\") == []"
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert filter_by_substring([\"a\", \"b\", \"ab\", \"abc\", \"abcd\", \"abcde\"], \"cde\") == [\"abcde\"]"
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    elif len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    else:\n        return (numbers[0] + sum_product(numbers[1:])[0], numbers[0] * sum_product(numbers[1:])[1])\n",
        "test": "assert     sum_product([]) == (0, 1),'sum_product([]) incorrect!'"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    max_value = None\n    result = []\n    for x in numbers:\n        if max_value is None or x > max_value:\n            max_value = x\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    max_prefix = None\n    max_suffix = None\n    for prefix_len in range(len(string), -1, -1):\n        prefix = string[:prefix_len]\n        suffix = string[prefix_len:]\n        if is_palindrome(prefix):\n            max_suffix = suffix\n            max_prefix = prefix\n            break\n    return (max_prefix + max_suffix)[::-1]\n",
        "test": "assert     make_palindrome(\"\") == \"\""
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "test": "assert     string_xor(\"\", \"\") == \"\""
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n",
        "test": "assert     longest([]) == None, \"empty list\""
    },
    {
        "number": 13,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(3,2) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n",
        "test": "assert all_prefixes(\"hi\") == [\"h\", \"hi\"]"
    },
    {
        "number": 15,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"0 1\"\n    elif n == 3:\n        return \"0 1 2\"\n    elif n == 4:\n        return \"0 1 2 3\"\n    elif n == 5:\n        return \"0 1 2 3 4\"\n    else:\n        return \"0 1 2 3 4 5\"\n",
        "test": "assert     string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    \n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n        elif char.isupper():\n            count += 1\n        else:\n            count += 1\n    \n    return count\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    i = 0\n    notes = []\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        i += 1\n    return notes\n",
        "test": "assert     parse_music(\"'o'\") == [4]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    return len(string.split(substring)) - 1\n",
        "test": "assert how_many_times('hello', 'h') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    numbers = numbers.split()\n    for i in range(len(numbers)):\n        for j in range(len(numbers)-1):\n            if numbers[j] < numbers[j+1]:\n                numbers[j],numbers[j+1] = numbers[j+1],numbers[j]\n    return \" \".join(numbers)\n",
        "test": "assert     sort_numbers(\"one\") == \"one\""
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    low_num = numbers[0]\n    high_num = numbers[0]\n    for num in numbers:\n        if num < low_num:\n            low_num = num\n        if num > high_num:\n            high_num = num\n    return low_num, high_num\n",
        "test": "assert     find_closest_elements([2,3,5,9,9]) == (2,9)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return [i / max(numbers) for i in numbers]\n",
        "test": "assert "
    },
    {
        "number": 22,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 23,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    return len(string)\n",
        "test": "assert strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n    \n",
        "test": "assert factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "    return list(dict.fromkeys(numbers))\n",
        "test": "assert     remove_duplicates([0]) == [0]"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n    \n    \ndef main() -> None:\n    \"\"\"main function for program\"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE TERRIFIC HUMAN!\\n\")\n",
        "test": "assert     flip_case('')     == '', 'Empty string should return an empty string.'"
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "test": "assert     concatenate([\"\", \"\"]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"as\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    positive_numbers = []\n    for number in l:\n        if number > 0:\n            positive_numbers.append(number)\n    return positive_numbers\n",
        "test": "assert     get_positive([1, 2, 3, -4, -1, -2, 3]) ==  [1, 2, 3, 3]"
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for n_i in range(2, int(n ** 0.5) + 1):\n        if n % n_i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False, \"1 is not prime\""
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            break\n    for i in range(i, len(xs)):\n        if xs[i] == 0:\n            return xs[i]\n    return xs[i]\n",
        "test": "assert     find_zero([0, 0]) == 0.0"
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if (i%3 == 0):\n            l2.append(l[i])\n        else:\n            l1.append(l[i])\n    l3 = l1 + l2\n    l3.sort()\n    return l3\n",
        "test": "assert     sort_third([3, 6, 2, 3, 5, 1]) == [1, 2, 3, 3, 5, 6]"
    },
    {
        "number": 34,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return sorted(set(l), key=l.index)\n",
        "test": "assert     unique([0, 0, 1, 2, 2, 2, 3, 4, 4]) == [0, 1, 2, 3, 4]"
    },
    {
        "number": 35,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    if not l:\n        return None\n    max_i = 0\n    max_j = 0\n    for i in range(len(l)):\n        if l[i] > l[max_i]:\n            max_i = i\n        elif l[i] == l[max_i]:\n            if max_j < i:\n                max_j = i\n    return l[max_i]\n",
        "test": "assert     max_element([-1, -2, -3, -4, -5]) == -1"
    },
    {
        "number": 36,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    count = 0\n    for i in range(n):\n        if i%7 == 0 or i%11 == 0 or i%13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(0)    ==     0, fizz_buzz(0)"
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    return sorted(l, key=lambda x: (x % 2 == 0, x))\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"ab\")) == \"ab\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    if n < 3:\n        return 2\n    fib = 3\n    primes = {2}\n    while fib < n:\n        fib += fib\n        primes.add(fib)\n    return fib\n",
        "test": "assert     prime_fib(0) == 2, \"prime_fib(0) == 2 should be True\""
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    seen = set()\n    for num in l:\n        if -(num) in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert not triples_sum_to_zero([1, 1, 1, 1])"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    return 0\n",
        "test": "assert     car_race_collision(2) == 0, '2nd case fails'"
    },
    {
        "number": 42,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    l = list(l)\n    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "test": "assert     incr_list([1]) == [2]"
    },
    {
        "number": 43,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n    \ndef no_sum_to_zero(l):\n    \"\"\"\n    no_sum_to_zero takes a list of integers as an input.\n    it returns True if there is no two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> no_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> no_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> no_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> no_sum_to_zero([2, 4, -5, 3, 5, 7])\n    False\n    >>> no_sum_to_zero([1])\n    True\n    \"\"\"\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j] == 0:\n                return False\n    return True\n",
        "test": "assert not pairs_sum_to_zero([3, 6, -1, -2, -2])"
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    return str(x)\n",
        "test": "assert     change_base(1, 2)    ==    \"1\""
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "    return (a*h)/2\n",
        "test": "assert     triangle_area(0, 1) == 0"
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0, \"The first value of fib4 should be 0\""
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    sorted_list = sorted(l)\n    half_list = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[half_list]\n    else:\n        return (sorted_list[half_list - 1] + sorted_list[half_list]) / 2\n",
        "test": "assert median([1]) == 1, \"One element\""
    },
    {
        "number": 48,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    \n    return text == text[::-1]\n",
        "test": "assert not is_palindrome('abc')"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    assert p > 0\n    i = 0\n    while n > 0:\n        i += (n % 2) * ((p >> i) % 2)\n        n //= 2\n        i %= p\n    return i\n",
        "test": "assert     modp(0, 10) == 0"
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    letters = 'aeiou'\n    for i in letters:\n        if i in text:\n            text = text.replace(i, \"\")\n    return text\n",
        "test": "assert     remove_vowels('h') == 'h'"
    },
    {
        "number": 52,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for number in l:\n        if number > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([10, 15, 20, 25, 40], 30) == False"
    },
    {
        "number": 53,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    s0_set = set(s0)\n    s1_set = set(s1)\n    return s0_set == s1_set\n",
        "test": "assert same_chars(\"coding\", \"coding\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    opening = set(brackets)\n    for i in range(1, len(brackets) - 1, 2):\n        if brackets[i] not in opening:\n            return False\n    return True\n",
        "test": "assert not correct_bracketing(\"<a)\")"
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            return False\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "test": "assert     not monotonic([0, 9, 1, 4, 2])"
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    result = []\n    for elem in l1:\n        if elem in l2 and elem not in result:\n            result.append(elem)\n    return result\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2, 'Should be 2'"
    },
    {
        "number": 60,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "test": "assert sum_to_n(5) == 15"
    },
    {
        "number": 61,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    nesting = 0\n    for char in brackets:\n        if char == \"(\":\n            nesting += 1\n        elif char == \")\":\n            nesting -= 1\n        if nesting < 0:\n            return False\n    return nesting == 0\n",
        "test": "assert not correct_bracketing(\"(])\")"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i + 1] + xs[i] * (i + 1) for i in range(len(xs) - 1)]\n",
        "test": "assert     derivative([-1, -1]) == [-2]"
    },
    {
        "number": 63,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    fib = 0\n    fib1 = 0\n    fib2 = 1\n    for i in range(1, n):\n        fib = fib1 + fib2\n        fib1 = fib2\n        fib2 = fib\n    return fib\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    vowels = 'aeiouy'\n    counter = 0\n    for x in vowels:\n        for i in range(len(s)):\n            if x == s[i]:\n                counter += 1\n    return counter\n",
        "test": "assert     vowels_count('') == 0"
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    if shift > len(str(x)):\n        return int(str(x)[::-1])\n    return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     circular_shift(\"12345678\", 0) == \"12345678\""
    },
    {
        "number": 66,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    res = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            res += ord(s[i]) - ord('0')\n    return res\n",
        "test": "assert digitSum(\"\") == 0, digitSum(\"\")"
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    return 0\n",
        "test": "assert fruit_distribution('0', 5) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "    evens = []\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            evens.append((node, i))\n    if len(evens) == 0:\n        return []\n    return min(evens, key=lambda x: x[0])\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    greatest = 0\n    freq = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] > 0:\n            if lst[i] > greatest:\n                greatest = lst[i]\n                freq = lst[i]\n            elif lst[i] == greatest:\n                if freq < lst[i]:\n                    freq = lst[i]\n        i += 1\n    return -1 if freq == 0 else greatest\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    return sorted(lst, key=lambda x: (len(lst), x))\n",
        "test": "assert     strange_sort_list([1, 1, 1, 1]) == [1, 1, 1, 1]"
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    a, b, c = sorted([a, b, c])\n    return 1/2 * a * b if a**2 + b**2 == c**2 else -1\n",
        "test": "assert triangle_area(10,20,30) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "    import operator\n    return operator.eq(list(map(operator.add, q, q[1:])), q) and sum(q) <= w\n",
        "test": "assert     will_it_fly([],0) == True"
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    if not arr:\n        return 0\n    arr.sort()\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count\n",
        "test": "assert     smallest_change([]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    # count the number of chars in the first list\n    length_list_1 = len(lst1)\n    # count the number of chars in the second list\n    length_list_2 = len(lst2)\n    # if the number of chars in the first list is equal to the second list\n    if length_list_1 == length_list_2:\n        # return the first list\n        return lst1\n    # if the number of chars in the first list is less than the second list\n    elif length_list_1 < length_list_2:\n        # create a new list which stores the chars from the first list\n        total_chars = []\n        # add the chars in the first list to the new list\n        for i in range(length_list_1):\n            # add them to the new list\n            total_chars.append(lst1[i])\n        # return the new list\n        return total_chars\n    # if the number of chars in the first list is more than the second list\n    elif length_list_1 > length_list_2:\n        # create a new list which stores the chars from the second list\n        total_chars = []\n        # add the chars in the second list to the new list\n        for i in range(length_list_2):\n            # add them to the new list\n            total_chars.append(lst2[i])\n        # return the new list\n        return total_chars\n",
        "test": "assert total_match(['abc', 'xyz'], ['abc', 'xyz']) == ['abc', 'xyz']"
    },
    {
        "number": 75,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    for i in range(3, 100):\n        if a % i == 0:\n            if i!= a and a % 2 == 0:\n                return False\n            else:\n                return True\n    return False\n",
        "test": "assert not is_multiply_prime(12)"
    },
    {
        "number": 76,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    return x % n == 0\n",
        "test": "assert     is_simple_power(9, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    while a >= 0:\n        x = a % 10\n        a = a // 10\n        if x**3 == a:\n            return True\n    return False\n",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    digits = {\n    0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0,\n    'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0, \n    '0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0\n    }\n    for digit in num:\n        if digit in digits:\n            digits[digit] += 1\n    for digit in digits:\n        if digits[digit] == 3:\n            return 1\n    return 0",
        "test": "assert     hex_key('') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    binary_str = ''\n    while decimal > 0:\n        binary_str += str(decimal%2)\n        decimal = decimal//2\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str\n",
        "test": "assert "
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    # Every 3 consecutive characters in a string are distinct\n    # If more than 3 consecutive chars are same, then not happy\n    c_str = s[::3]\n    if len(c_str) == 3:\n        return c_str.count(c_str[0]) == 3 and c_str.count(c_str[1]) == 3 and c_str.count(c_str[2]) == 3\n    else:\n        return False",
        "test": "assert     is_happy('a') == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    return list(map(numerical_grade, grades))\n",
        "test": "assert "
    },
    {
        "number": 82,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return len(string) == len(set(string)) == 2\n",
        "test": "assert     prime_length('32') == True"
    },
    {
        "number": 83,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n        elif i == n:\n            count += 1\n        elif i % 10 == 1:\n            count += 1\n        elif i % 10 == 0:\n            count += 1\n        else:\n            count += 2\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    return bin(N)[2:]\n",
        "test": "assert     solve(0) == \"0\""
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    \n    even = []\n    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            even.append(lst[i])\n        i += 1\n    return even",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    \n    # your code here\n    result = []\n    if not lst or not x:\n        return result\n    \n    x_col_lst = get_col(lst, x)\n    # for each row, check if it has all elements in column\n    for r in range(len(lst)):\n        for col in x_col_lst:\n            if col not in lst[r]:\n                break\n        else:\n            result.append((r, 0))\n    \n    # sort result by rows in ascending order\n    return sorted(result, key=lambda t: (t[0], t[1]))\n",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    return array\n",
        "test": "assert     sort_array([5, 5, 5, 5]) == [5, 5, 5, 5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    return ''.join(new_alphabet[(alphabet.index(c) + s) % len(alphabet)] for c in s)\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    #check if list is empty\n    if not lst:\n        return None\n    # sort list\n    lst.sort()\n    #return the first 2\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 1, 2, 1, 2, 4, 5, 1]) == 1"
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    # Your code here\n    return S.count(\"I\")\n",
        "test": "assert     is_bored(\"I\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return (x + y == z and type(x)==int and type(y)==int and type(z)==int)\n",
        "test": "assert any_int(1.2, 2, 3) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    def encode_function(message):\n        #ensures that it's a string\n        message = str(message)\n        #stores the vowels\n        vowels = 'aeiouAEIOU'\n        #stores the encoded message\n        encoded = ''\n        #stores the new encoded message\n        new = ''\n        #finds the location of each vowel in the message\n        for i in range(len(message)):\n            if message[i] in vowels:\n                new += message[i] + message[i+1]\n            else:\n                new += message[i]\n        #returns the new message\n        return new\n    return encode_function(message)",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    s = 0\n    for x in lst:\n        if int(str(x)[0]) == 0:\n            s = s\n        else:\n            s += x\n    return s\n",
        "test": "assert     skjkasdkd([]) == 0, \"empty input\""
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    \n    if len(dict) == 0:\n        return False\n    \n    lower_keys = [x.lower() for x in dict]\n    upper_keys = [x.upper() for x in dict]\n    \n    for i in lower_keys:\n        if i not in dict:\n            return False\n    \n    for i in upper_keys:\n        if i not in dict:\n            return False\n    \n    return True",
        "test": "assert not check_dict_case({})"
    },
    {
        "number": 96,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    array = []\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            array.append(i)\n    return array\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return a * b\n",
        "test": "assert multiply(1, 1) == 1"
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert not count_upper('eminem') == 2"
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    return int(value) if float(value) == int(float(value)) else int(round(float(value)))\n",
        "test": "assert     closest_integer(\"15\") == 15"
    },
    {
        "number": 100,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return [n//2] + make_a_pile(n-1)\n        else:\n            return [n-1] + make_a_pile(n-1)\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    return s.split(\", \")\n",
        "test": "assert words_string(\"One\") == [\"One\"]"
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if x < y:\n        x, y = y, x\n    if x == y:\n        return x\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n",
        "test": "assert     choose_num(20,20) == 20"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "    if n > m:\n        return -1\n    else:\n        rounded = ((m+1) - n)//2\n        return format(rounded, 'b')\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    return sorted(set(i for i in x if i%2 == 1))\n",
        "test": "assert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==  [1]"
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    sorted_arr = sorted(arr)\n    print(f\"arr = {arr}, sorted_arr = {sorted_arr}\")\n    result = []\n    for num in sorted_arr:\n        if (num >= 1 and num <= 9):\n            result.append(\"One\" if num == 1 else f\"Two\" if num == 2 else f\"Three\" if num == 3 else f\"Four\" if num == 4 else f\"Five\" if num == 5 else f\"Six\" if num == 6 else f\"Seven\" if num == 7 else f\"Eight\" if num == 8 else f\"Nine\" if num == 9 else None)\n    print(f\"result = {result}\")\n    return result\n",
        "test": "assert     by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(int(i + 1))\n    return result\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    res = (0, 0)\n    for i in range(2, n):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                res = (res[0] + 1, res[1])\n            else:\n                res = (res[0], res[1] + 1)\n    return res\n",
        "test": "assert     even_odd_palindrome(1) == (0, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            sum = 0\n            while num > 0:\n                sum += num % 10\n                num = num // 10\n            if sum > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0, 'Empty array.'"
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    print(lst1)\n    print(lst2)\n    # TODO: your code here\n    a = 0\n    for i in range(len(lst1)):\n        if (lst1[i] % 2 == 0) == 1:\n            a = 1\n            break\n    if a == 1:\n        return \"NO\"\n    else:\n        for i in range(len(lst2)):\n            if (lst2[i] % 2 == 0) == 1:\n                a = 1\n                break\n        if a == 1:\n            return \"NO\"\n        else:\n            for i in range(len(lst1)):\n                if (lst1[i] % 2 == 0) == 1:\n                    for j in range(len(lst2)):\n                        if (lst2[j] % 2 == 0) == 1:\n                            lst1[i], lst2[j] = lst2[j], lst1[i]\n                            if i == j and (lst1 == lst2):\n                                return \"YES\"\n                            break\n                    if i == j and (lst1 == lst2):\n                        return \"YES\"\n            return \"NO\"\n",
        "test": "assert     exchange([1], [2]) == \"NO\", \"Lists of different lengths\""
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d",
        "test": "assert     ('a' in histogram('a b b b b')) == True"
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    s = list(s)\n    c = list(c)\n    for i in range(len(c)):\n        if c[i] in s:\n            s.remove(c[i])\n    if len(s) == 0:\n        return(\"\",True)\n    else:\n        return(s,False)\n",
        "test": "assert     reverse_delete('','') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    output = []\n    for i in lst:\n        if len(i)%2!= 0:\n            output.append(\"the number of odd elements \"+str(len(i))+\"n the str\"+str(len(i))+\"ng \"+str(len(i))+\" of the \"+str(len(i))+\"nput.\")\n        else:\n            output.append(\"the number of odd elements 0n the str0ng 0 of the 0nput.\")\n    return output\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    if not nums:\n        return -1\n    min_sum, min_idx = float(\"inf\"), 0\n    for i, num in enumerate(nums):\n        # min_sum = min(min_sum, sum[min_idx: i + 1])\n        min_sum = min(min_sum, min_sum + num, num)\n        if min_sum == num:\n            min_idx = i + 1\n    return min_sum\n",
        "test": "assert     minSubArraySum([0]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    # check if there is any empty well\n    if not any(not r for r in grid):\n        return 0\n",
        "test": "assert max_fill([[1,1,1],[0,1,1],[1,0,1]], 1) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    return sorted(arr, key=lambda x: x if x > 0 else 0)\n",
        "test": "assert     sort_array([1,0,1,0,1,1]) == [0,0,1,1,1,1]"
    },
    {
        "number": 117,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    \n    words = []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in s.split():\n        if len(i) >= n and i[0] in consonants:\n            words.append(i)\n            \n    return words\n",
        "test": "assert     select_words(\"\", 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    for i in range(len(word) - 1):\n        if word[i] in \"aeiouAEIOU\":\n            if word[i + 1] in \"aeiouAEIOU\":\n                return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('z') == '', \"Expected, received {}\".format(get_closest_vowel('z'))"
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    #s = '(()())'\n    s = '()(())()'\n    st = []\n    for i in s:\n        if i == '(':\n            st.append(i)\n        elif i == ')':\n            if len(st) == 0:\n                return 'No'\n            else:\n                st.pop()\n    if len(st) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens([('(', ')')]) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert maximum([], 1) == [], \"Wrong\""
    },
    {
        "number": 121,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    return sum([num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 1])\n",
        "test": "assert     solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    if k > len(arr):\n        return 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            count += arr[i]\n    for i in range(k, len(arr)):\n        curr = arr[i]\n        for j in range(2, len(str(curr))):\n            count += curr\n    return count\n",
        "test": "assert     add_elements([], 0) == 0, 'Error: 1'"
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "    if n == 1:\n        return [1]\n    \n    odd = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        odd.append(n)\n    odd.sort()\n    return odd\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    date = date.split('-')\n    if len(date[0]) == 3 and len(date[1]) == 2 and len(date[2]) == 4:\n        day = date[1]\n        month = date[0]\n        year = date[2]\n        if month.lower() in ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']:\n            if int(month.lower()[0:3]) < 1 or int(month.lower()[0:3]) > 12:\n                return False\n            elif int(month.lower()[0:3]) == 2:\n                if int(day) > 29:\n                    return False\n            else:\n                if int(month.lower()[0:3]) == 4:\n                    if int(day) > 30:\n                        return False\n                else:\n                    if int(day) > 28:\n                        return False\n        else:\n            return False\n        if int(day) > 31:\n            return False\n        elif int(month.lower()[0:3]) == 2:\n            if int(year) > 29:\n                return False\n        else:\n            if int(year) > 30:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert not     valid_date('-15-31-2001')"
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    #split by space\n    return txt.split()\n    #split by commas\n    #return txt.split(',')\n",
        "test": "assert     split_words('lorem ipsum') == ['lorem', 'ipsum']"
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    flag = True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     is_sorted([3,4,3,4]) == False, \"Wrong Answer\""
    },
    {
        "number": 127,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    s = set()\n    if interval1[0] > interval1[1]:\n        i1 = interval1[1], interval1[0]\n    else:\n        i1 = interval1[0], interval1[1]\n    if interval2[0] > interval2[1]:\n        i2 = interval2[1], interval2[0]\n    else:\n        i2 = interval2[0], interval2[1]\n    for i in range(i1[0], i1[1] + 1):\n        if i in s:\n            return \"NO\"\n        s.add(i)\n    for i in range(i2[0], i2[1] + 1):\n        if i in s:\n            return \"NO\"\n        s.add(i)\n    return \"YES\"\n",
        "test": "assert     (intersection((1, 2), (2, 4))) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    n = len(arr)\n    if n == 0:\n        return None\n    else:\n        return sum([abs(x) * (1 if x > 0 else -1 if x < 0 else 0) for x in arr])\n",
        "test": "assert     prod_signs([]) == None, 'wrong result'"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    def fib(n):\n        \"\"\"returns fibonacci series till n\"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        return fib(n - 1) + fib(n - 2)\n    return fib(n + 1)\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    count = 0\n    while n > 0:\n        count += n % 10\n        n = n // 10\n    return count\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    '''\n    '''\n    def brackets(string):\n        string = string.replace(' ','')\n        start = 0\n        #iterate over the string\n        for i in range(len(string)):\n            if string[i] == '[':\n                start = i+1\n                #search for ending brackets\n                if string[start] == ']':\n                    string = string[:start] + string[start:].replace(']','') + '['\n                    break\n            if string[i] == '(':\n                start = i+1\n                if string[start] == ')':\n                    string = string[:start] + string[start:].replace(')','') + '('\n                    break\n        return string\n    \n    return len(brackets(string)) > 0\n",
        "test": "assert not is_nested('')"
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    \n    return sum([x**2 for x in lst])\n",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    # your code here\n    if txt:\n        if txt[-1].isalpha():\n            if len(txt)!= 1:\n                if txt.split(\" \")[-1].isalpha():\n                    return False\n                else:\n                    return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter('0') == False"
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED!\\n\")",
        "test": "assert can_arrange([1, 2, 3, 3, 5]) == 2"
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    def find_max_min(lst):\n        if not lst:\n            return None, None\n        elif len(lst) == 1:\n            return lst[0], lst[0]\n        else:\n            max_num = lst[0]\n            min_num = lst[0]\n            for i in lst:\n                if i > max_num:\n                    max_num = i\n                if i < min_num:\n                    min_num = i\n            return max_num, min_num\n    return find_max_min(lst)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert compare_one(2.0, 3.0) == 3.0"
    },
    {
        "number": 138,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    return n % 2 == 0 and (n - 4) % 2 == 0\n",
        "test": "assert     is_equal_to_sum_even(5) == False"
    },
    {
        "number": 139,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    result = 1\n    while n > 0:\n        result *= n\n        n -= 1\n    return result\n",
        "test": "assert     special_factorial(1) == 1, \"Wrong value\""
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    return text.replace(\" \",\"_\").replace(\"  \",\"_\")\n",
        "test": "assert     fix_spaces(\"hello world\") == \"hello_world\""
    },
    {
        "number": 141,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    try:\n        letter = file_name[0]\n        if letter not in set(string.ascii_letters):\n            return 'No'\n        if len(file_name) <= 3:\n            return 'No'\n        if '.' not in file_name:\n            return 'No'\n        if file_name[-3:] not in set(['txt', 'exe', 'dll']):\n            return 'No'\n        if file_name[0] not in set(string.ascii_letters):\n            return 'No'\n        if file_name[1] not in set(string.ascii_letters):\n            return 'No'\n        if file_name[2] not in set(string.digits):\n            return 'No'\n        if file_name[0] == file_name[1] == file_name[2] == letter:\n            return 'No'\n        return 'Yes'\n    except:\n        return 'No'\n",
        "test": "assert     file_name_check(    '1.txt') == 'No', print('The function should return \"No\" for a file name with fewer than 3 digits.')"
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] * lst[i]\n        elif i % 4 == 0:\n            sum += lst[i] * lst[i] * lst[i]\n        else:\n            pass\n    return sum\n",
        "test": "assert     sum_squares([]) == 0, \"When no element is there, the sum of squares should be 0.\""
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    words_list = sentence.split()\n    return ''.join(words_list)\n",
        "test": "assert words_in_sentence('a') == 'a', 'incorrect'"
    },
    {
        "number": 144,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    return str(x).split(\"/\")[0] == str(n).split(\"/\")[0]\n    \n",
        "test": "assert     simplify(\"2/3\", \"3/2\") == False, \"Should be False\""
    },
    {
        "number": 145,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    for i in range(len(nums)-1):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            counter += 1\n    return counter\n",
        "test": "assert     specialFilter([]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    \n    for i in range(1, n):\n        if i * (i + 1) / 2 % 3 == 1:\n            return 1\n    return 0\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "    planets = {\"Jupiter\" : \"Saturn\", \"Earth\" : \"Venus\", \"Mars\" : \"Earth\", \"Venus\" : \"Mars\",\n            \"Mercury\" : \"Venus\", \"Saturn\" : \"Mercury\", \"Uranus\" : \"Venus\", \"Neptune\" : \"Venus\",\n            \"Venus\" : \"Mercury\", \"Earth\" : \"Mars\", \"Mars\" : \"Earth\", \"Jupiter\" : \"Uranus\",\n            \"Saturn\" : \"Jupiter\", \"Uranus\" : \"Saturn\", \"Neptune\" : \"Jupiter\", \"Mercury\" : \"Earth\"}\n    list_of_paths = []\n    if (planet1 in planets) and (planet2 in planets):\n        for orbit in planets:\n            if planet1 == planets[orbit]:\n                for orbit2 in planets:\n                    if planet2 == planets[orbit2]:\n                        list_of_paths.append([orbit, orbit2])\n        return tuple(sorted(list_of_paths))\n    else:\n        return tuple([])\n",
        "test": "assert     (bf(\"jupiter\", \"venus\") == ())"
    },
    {
        "number": 149,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    # return sorted(lst)\n    lst.sort()\n    return sorted(lst, key=len)\n",
        "test": "assert sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(5, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    count = 0\n    for i in lst:\n        if i == 0 or i%1 == 0:\n            continue\n        else:\n            count += i*i\n    return count\n",
        "test": "assert     double_the_difference([]) == 0, 'No numbers!'"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    if game[0] == guess[0]:\n        return [0]*len(guess)\n    else:\n        return [(abs(game[i]-guess[i]) - 1) for i in range(len(guess))]\n",
        "test": "assert compare([1,1,3], [1,1,3]) == [0,0,0], \"Okay, it's gonna be easy\""
    },
    {
        "number": 153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    # if class_name in extensions:\n    #     return class_name+'.'+class_name\n    # else:\n    #     count_cap = 0\n    #     count_low = 0\n    #     for extension in extensions:\n    #         if 'A' in extension:\n    #             count_cap += 1\n    #         else:\n    #             count_low += 1\n    #     return '{}.{}'.format(class_name, class_name)\n    return '{}.{}'.format(class_name, max(extensions, key=lambda x: (x.count('A'), -x.count('A'))))\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\""
    },
    {
        "number": 154,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    rotations = [\"\",a[1:]+a[0],a[:-1]+a[0],a[1:]+a[-1]]\n    for word in rotations:\n        if word in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('hello','hello') == True, '1st case'"
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem % 2:\n            odd += 1\n        else:\n            even += 1\n    return even, odd\n",
        "test": "assert     even_odd_count(0) == (0, 0), f\"incorrect value for even_odd_count: {even_odd_count(0)}\""
    },
    {
        "number": 156,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "    # I - > I\n    roman_vals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    for key in roman_vals:\n        if number == key:\n            return roman_vals[key]\n    raise ValueError('Out of range, must be between 1 and 1000')\n",
        "test": "assert     int_to_mini_roman(1) == 'I'"
    },
    {
        "number": 157,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    else:\n        if abs(a*a - b*b) <= 1 and abs(a*a - c*c) <= 1 and abs(b*b - c*c) <= 1:\n            return True\n        else:\n            return False\n",
        "test": "assert     right_angle_triangle(1, 3, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    max_char = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in max_char:\n                count += 1\n        if count < len(word):\n            max_char = word\n    return max_char\n",
        "test": "assert find_max([\"is\", \"is\", \"is\", \"is\"]) == \"is\""
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "    if number == 0:\n        return [need, remaining]\n    elif number < 0:\n        return [0, 0]\n    elif need > remaining:\n        return eat(number - 1, need, remaining)\n    else:\n        return eat(number - 1, need, remaining - need)\n",
        "test": "assert     eat(5, 5, 10) == [5, 0] "
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    if len(operator) == 0:\n        return operand[0]\n",
        "test": "assert     (do_algebra([], [1]) == 1)"
    },
    {
        "number": 161,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    s = list(s)\n    l = 0\n    r = len(s)-1\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[l], s[r] = s[r].upper(), s[l].upper()\n            elif s[i].islower():\n                s[l], s[r] = s[r].lower(), s[l].lower()\n            l += 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n    return \"\".join(s)",
        "test": "assert solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "test": "assert     (string_to_md5('') == None)"
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n",
        "test": "assert     generate_integers(2, 10) == [2, 4, 6, 8, 10]"
    }
]