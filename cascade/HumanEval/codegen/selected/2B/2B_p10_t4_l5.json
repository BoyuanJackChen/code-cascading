[
    {
        "number": 0,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n",
        "test": "assert not has_close_elements([1.2], 1.2)",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    paren_groups = []\n    next_open_brace = ''\n    paren_group = ''\n    for i in paren_string:\n        if i == '(':\n            next_open_brace += i\n        elif i == ')':\n            paren_group += i\n            paren_groups.append(paren_group)\n            paren_group = ''\n            next_open_brace = ''\n        else:\n            paren_group += i\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    num, dec = str(number).split(\".\")\n    dec = dec[:max(1, len(dec) - 1)]\n    return float(num + \".\" + dec)\n",
        "test": "assert     truncate_number(0.5) == 0.5",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    balance = 0\n    for i in range(len(operations)):\n        if balance < 0:\n            return True\n        balance += operations[i]\n    return False\n",
        "test": "assert     below_zero([10]) == False",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    mean_of_numbers = sum(numbers) / len(numbers)\n    return (sum([abs(x - mean_of_numbers) for x in numbers]) / len(numbers))\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1",
        "num_ids": 1360,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert     intersperse([], 1) == []",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "    def get_max_depth(paren_string: str, level: int, max_depth: int) -> int:\n        \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n        For each of the group, output the deepest level of nesting of parentheses.\n        E.g. (()()) has maximum two levels of nesting while ((())) has three.\n",
        "test": "assert     parse_nested_parens
        "num_ids": 3297,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    filtered = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            filtered.append(strings[i])\n    return filtered\n",
        "test": "assert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"dog\") == []",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    sum_num = 0\n    pro_num = 1\n    if len(numbers) == 0:\n        return (sum_num, pro_num)\n    else:\n        for num in numbers:\n            sum_num += num\n            pro_num *= num\n    return (sum_num, pro_num)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    result = []\n    max_value = float(\"-inf\")\n    for number in numbers:\n        if number > max_value:\n            max_value = number\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([5, 2, 5, 3, 5]) == [5, 5, 5, 5, 5]",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix\n",
        "test": "assert     make_palindrome(\"abcd\") == \"abcd\"",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "test": "assert     string_xor(\"1\",\"1\") == \"0\"",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    # your code here\n    if strings == []:\n        return None\n    \n    max_len = len(strings[0])\n    max_str = strings[0]\n    for word in strings:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str\n",
        "test": "assert     longest([]) is None,    \"1 - Expected None, got: {}\".format(longest([]) )",
        "num_ids": 2074,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    while a!= 0:\n        a, b = b%a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(2,4) == 2",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]",
        "num_ids": 2396,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    distinct_characters = set()\n    for character in string:\n        if character.isalpha():\n            distinct_characters.add(character.lower())\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    res = []\n    new_note = 0\n    for elem in music_string:\n        if elem == 'o' or elem == 'o|':\n            res.append(4)\n        elif elem == '.':\n            res.append(1)\n        elif elem == '|':\n            new_note = 1\n        elif elem =='':\n            if new_note:\n                res.append(1)\n                new_note = 0\n        else:\n            print(f'invalid input, got {elem}')\n    return res\n",
        "test": "assert     parse_music(\"o|\") == [4]",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)\n",
        "test": "assert     how_many_times(\"hiabcdef\", \"def\") == 1",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\"",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    min_diff = float(\"inf\")\n    min_idx = None\n    min_idx_2 = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_diff:\n                min_diff = abs(numbers[i] - numbers[j])\n                min_idx = i\n                min_idx_2 = j\n    return numbers[min_idx], numbers[min_idx_2]\n",
        "test": "assert find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)",
        "num_ids": 2564,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    min_number = numbers[0]\n    max_number = numbers[0]\n",
        "test": "assert ",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return list(filter(lambda x: isinstance(x, int) or isinstance(x, float), values))\n",
        "test": "assert     filter_integers([1,2,'a']) == [1,2]",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    if not string:\n        return 0\n    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    i = 1\n    while n % i!= 0:\n        i = i + 1\n    return i\n",
        "test": "assert largest_divisor(3) == 1",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    # print(f'{n}')\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 2354,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n",
        "test": "assert     remove_duplicates([1, 1, 2, 3, 3])     ==     [1, 2, 3]",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    upper = string.upper()\n    lower = upper.lower()\n    return lower\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    return ''.join(strings)\n",
        "test": "assert concatenate([]) == \"\", \"Error\"",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    return [x for x in l if x >= 0]\n",
        "test": "assert     get_positive([]) == [], \"Wrong result\"",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 31,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    if n < 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(13) == True",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "    roots = []\n    if len(xs) % 2 == 1:\n        return -1\n",
        "test": "assert     find_zero([1, 2, 0]) == -1, \"1 + 2 + 0 = 1\"",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    l1 = []\n    l2 = []\n    \n    for i in l:\n        if i%3 == 0:\n            l2.append(i)\n        else:\n            l1.append(i)\n    l1.sort()\n    return l1+l2\n    \n    \n    \n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert         unique([1, 2, 2, 3]) == sorted([1, 2, 3])",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    return max(l)\n",
        "test": "assert max_element([-2, 1, -4, 3]) == 3",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(100) == fizz_buzz(100)",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    l = list(l)\n    even_indices = []\n    odd_indices = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n    even_indices.sort()\n    odd_indices.sort()\n    l = even_indices + odd_indices\n    return l\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    groups = s.split(\"@@\")\n    # decode groups.\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"AAA\") == \"AAA\"",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    if len(l) < 3:\n        return False\n    l = set(l)\n    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0 and i!= j and i!= k and j!= k:\n                    return True\n    return False\n",
        "test": "assert not triples_sum_to_zero([-2, 0, 1])",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    assert n > 0, 'Please enter a positive integer value for n.'\n    total_collisions = 0\n    for x in range(1, n+1):\n        for y in range(1, n):\n            if (x * abs(y)) >= n:\n                break\n            if x < y:\n                total_collisions += 1\n    return total_collisions\n",
        "test": "assert car_race_collision(2) == 0",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return list(map(lambda x: x+1, l))\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    count = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     pairs_sum_to_zero([1,-2,-3,-4]) == False",
        "num_ids": 1951,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    # define some constants\n    base_10 = '0123456789'\n    # define some constants\n    base_10 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    # convert to list\n    x_as_list = list(str(x))\n    # loop through\n    for i in range(len(x_as_list)):\n        # check if character is in base_10\n        if x_as_list[i] in base_10:\n            # if yes, convert\n            x_as_list[i] = str(base_10.index(x_as_list[i]))\n    # remove leading zeros\n    while x_as_list[0] == '0':\n        x_as_list.pop(0)\n    # return number\n    return ''.join(x_as_list)\n",
        "test": "assert     change_base(1, 8) == \"1\"",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(10, 20) == 100",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    n = len(l)\n    if n < 1:\n        raise ValueError(\"median requires at least one element\")\n    if n == 1:\n        return l[0]\n    sorted_l = sorted(l)\n    index = n//2\n    if n % 2 == 0:\n        return sorted_l[index-1] + sorted_l[index] / 2\n    else:\n        return sorted_l[index]\n",
        "test": "assert     median([1, 1, 2, 3, 4, 5, 7]) == 3",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    \n    text = text.lower()\n    text = ''.join(filter(str.isalnum, text))\n    return text == text[::-1]\n",
        "test": "assert     is_palindrome('') == True, 'Blank string is not palindrome'",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     (modp(4, 5) == 1)",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"c\") == \"c\"",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join(ch for ch in text if ch not in vowels)\n",
        "test": "assert     remove_vowels('he') == 'h', \"remove_vowels(he) should return h\"",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3,5,6,8,12], 10) == False",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 3) == 5",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    return all([s0.count(ch) == s1.count(ch) for ch in s0])\n",
        "test": "assert     same_chars(\"ab\", \"ab\")",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append('>')\n        elif bracket == '>':\n            if bracket_stack == []:\n                return False\n            bracket_stack.pop()\n        else:\n            return False\n    return bracket_stack == []\n",
        "test": "assert     correct_bracketing(\"<>\") == True, \"The last closing bracket does not match its corresponding opening bracket\"",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if l == []:\n        return False\n    last_element = l[0]\n    for i in l:\n        if i < last_element:\n            return False\n        last_element = i\n    return True\n",
        "test": "assert     monotonic([1,2,3,4,3]) == False, \"Wrong test\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n",
        "test": "assert     common([], []) == []",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    largest = 0\n    for i in range(2, n):\n        while n % i == 0:\n            largest = i\n            n = n // i\n    if n > 1:\n        largest = n\n    return largest\n",
        "test": "assert largest_prime_factor(9) == 3",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"()\") == True",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return list(map(lambda x: x + 2, xs[1:]))\n",
        "test": "assert ",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0, \"fibfib(0) is wrong\"",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    vowels = 0\n    for char in s:\n        if char in \"aeiou\":\n            vowels += 1\n    return vowels\n",
        "test": "assert     vowels_count('') == 0",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    x = str(x)\n    if len(x) < shift:\n        x = x[::-1]\n        return x + x[:shift][::-1]\n    else:\n        return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift(str(123456789), -3) == \"789123456\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c) - ord('A') + 1\n    return sum\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    return n-s.count('o')-s.count('a')\n",
        "test": "assert fruit_distribution(\"0\",0) == 0",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    if arr[0] % 2 == 0:\n        return arr[:2]\n    return arr[:1]\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    n = 0\n    m = 0\n    for i in lst:\n        if i > 0:\n            n += 1\n    if n == 0:\n        return -1\n    for i in lst:\n        if i == 0:\n            continue\n        if i > m:\n            m = i\n    return m",
        "test": "assert     search([]) == -1",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        first = min(lst)\n        return [first] + strange_sort_list(list(filter(lambda x: x > first, lst)))\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if(a + b > c and a + c > b and b + c > a):\n        return round((a * b * 0.5), 2)\n    else:\n        return -1",
        "test": "assert     triangle_area(1, 2, 3) == -1",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    if q==None or len(q)==0:\n        return False\n    if len(q)==1 and q[0]<=w:\n        return True\n    elif len(q)==2 and q[0]+q[1]<=w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,1],1) == False",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    ones_changes = 0\n    twos_changes = 0\n    ones_to_two = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            ones_changes += 1\n            ones_to_two += 1\n        elif arr[i] == 2:\n            twos_changes += 1\n            ones_to_two += 1\n    if (ones_changes == 0):\n        return twos_changes\n    elif (twos_changes == 0):\n        return ones_changes\n    elif (twos_changes > ones_changes):\n        return ones_changes\n    else:\n        return twos_changes\n",
        "test": "assert     smallest_change([1, 2, 3, 4]) == 1",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert total_match([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    for i in range(3,101,3):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(33) == False",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    # hint: keep exponent divisiblity test.\n    return n**x == x\n",
        "test": "assert     is_simple_power(2, 4) == False",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    \n    return a**3 == a\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    # new_num = num.upper()\n    # lenght = len(num)\n    # a = len(num) - 1\n    # count = 0\n    # for i in range(lenght):\n    #     if int(new_num[i]) == 0 or int(new_num[i]) == 1:\n    #         count += 1\n    # print(count)\n    # if int(num) > 1:\n    #     if num[-1] == \"0\":\n    #         num = num[:-1]\n    #         count = count + 1\n    #     for i in range(lenght):\n    #         if num[i] == \"0\" or num[i] == \"1\":\n    #             count = count + 1\n    #     return count\n    # else:\n    #     return 0\n    # print(count)\n    a = num.upper()\n    b = 0\n    c = 0\n    if len(a) > 1:\n        for i in range(len(a)):\n            if a[i] == \"0\":\n                b = i\n                break\n    if len(a) > 1:\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == \"0\":\n                c = i\n                break\n    if len(a) == 1:\n        return 1\n    elif len(a) == 2 and a[0] == \"0\" and a[1] == \"0\":\n        return 0\n    elif len(a) == 2 and a[0] == \"0\" and a[1]!= \"0\":\n        return 1\n    else:\n        return (len(a)-b-c)\n",
        "test": "assert     hex_key('') == 0, '0'",
        "num_ids": 1461,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "    return ''.join([str(x) for x in decimal_to_binary_recursive(decimal)[::-1]])\n",
        "test": "assert     decimal_to_binary(16) == '10100'",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    if s.count(s[0]) == len(s):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_happy('abac') == False",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    grades.sort(reverse=True)\n    letter_grades = []\n    for x in grades:\n        if x >= 4.0:\n            letter_grades.append('A+')\n        elif 3.7 <= x <= 4.0:\n            letter_grades.append('A')\n        elif 3.3 <= x <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 <= x <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 <= x <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 <= x <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 <= x <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 <= x <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 <= x <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 <= x <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 <= x <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 <= x <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 3791,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    n = len(string)\n    prime_list = []\n    for i in range(2, n+1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            prime_list.append(i)\n    if n in prime_list:\n        return True\n    else:\n        return False\n",
        "test": "assert     prime_length(\"11\") == True",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "    # count number of numbers\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    bina_num = bin(N)\n    bina_num = bina_num.replace(\"0b\", \"\")\n    print(bina_num)\n    return bina_num\n",
        "test": "assert     solve(3) == \"11\"",
        "num_ids": 2879,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = i+1\n    return lst",
        "test": "assert     add([]) == [] ",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle('') == ''",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "    res = []\n    for row in lst:\n        for i, j in enumerate(row):\n            if j == x:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 1) == [(0, 0), (0, 1), (1, 0), (1, 1)], \"Wrong\"",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    array.sort(key=lambda x: (x, -x))\n    return array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    return_val = \"\"\n    for i in range(len(s)):\n        if s[i].isupper():\n            return_val = return_val + alphabet[(alphabet.index(s[i]) + 2) % 26]\n        else:\n            return_val = return_val + alphabet[(alphabet.index(s[i]) - 2) % 26]\n    return return_val\n",
        "test": "assert     (encrypt(\"\")==\"\" )",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    if n == 1:\n        return lst[0]\n    l = lst[:]\n    l.sort()\n    return l[1]\n",
        "test": "assert next_smallest([]) == None, \"error 3\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    bored_count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith(\"I\"):\n            bored_count += 1\n    return bored_count\n",
        "test": "assert     is_bored('') == 0, 'Empty sentence'",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    return x == y + z and type(x) == int and type(y) == int and type(z) == int\n    \n",
        "test": "assert any_int(4,5,7) == False",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    encoded = \"\"\n    vowels = 'aeiou'\n    \n    for i in message:\n        if i.lower() in vowels:\n            index = vowels.index(i.lower())\n            encoded += vowels[index + 2]\n        else:\n            encoded += i\n",
        "test": "assert ",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    my_list = []\n    for i in lst:\n        my_list.append(int(str(i)))\n",
        "test": "assert ",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    if dict == {}:\n        return False\n    for i in dict:\n        if type(dict[i])!= str:\n            return False\n        if i.isupper() and dict[i].islower():\n            return False\n        if i.islower() and dict[i].isupper():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, 'Empty dictionary'",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    prime_numbers = primes(n)\n    next_prime = n\n    prime_numbers_array = []\n    while len(prime_numbers_array) < n:\n        for prime in prime_numbers:\n            if prime > next_prime:\n                break\n            if prime == next_prime:\n                prime_numbers_array.append(prime)\n                next_prime += prime\n                break\n    return prime_numbers_array\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "    return int(a * b % 100)\n",
        "test": "assert     (multiply(5, 6) == 30)",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\")    == 0, \"Empty String\"",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    x = float(value)\n    if x == int(x):\n        return int(x)\n    else:\n        return int(x + (abs(x) - abs(int(x))))\n",
        "test": "assert     closest_integer(\"-14.5\")!= -15",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    if n % 2 == 0:\n        n += 1\n    levels = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n -= 2\n        else:\n            n -= 2\n        levels.append(n)\n    return levels\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    return s.split(', ')\n",
        "test": "assert words_string('testing, words') == ['testing', 'words']",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    if x < y:\n        return -1\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n        return x\n    elif x < y:\n        for i in range(x + 1, y):\n            if i % 2 == 0:\n                return i\n",
        "test": "assert     choose_num(3, 5) == -1, \"Wrong answer in choose_num\"",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n",
        "test": "assert     rounded_avg(1, 1) == 1",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    seen = set()\n    return_list = []\n    for i in x:\n        return_list.append(i)\n        if i not in seen:\n            seen.add(i)\n    return sorted(return_list)\n",
        "test": "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    arr_length = len(arr)\n    if arr_length == 0: return []\n    \n    # Sort the array\n    for i in range(arr_length):\n        for j in range(arr_length - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \n    # Reverse the array\n    arr_length = len(arr)\n    for i in range(arr_length):\n        for j in range(arr_length - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            \n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr_length = len(arr)\n    result = []\n    for i in range(arr_length):\n        if arr[i] in range(1, 9 + 1):\n            if arr[i] == 1:\n                result.append(\"One\")\n            elif arr[i] == 2:\n                result.append(\"Two\")\n            elif arr[i] == 3:\n                result.append(\"Three\")\n            elif arr[i] == 4:\n                result.append(\"Four\")\n            elif arr[i] == 5:\n                result.append(\"Five\")\n            elif arr[i] == 6:\n                result.append(\"Six\")\n            elif arr[i] == 7:\n                result.append(\"Seven\")\n            elif arr[i] == 8:\n                result.append(\"Eight\")\n            else:\n                result.append(\"Nine\")\n    return result\n",
        "test": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res",
        "test": "assert     f(1) == [1]",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    even_odd = 0\n    odd_even = 0\n    odd_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_odd += 1\n        elif is_palindrome(i) and i % 2!= 0:\n            odd_even += 1\n        elif not is_palindrome(i) and i % 2 == 0:\n            odd_odd += 1\n",
        "test": "assert ",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    nums = 0\n    for i in arr:\n        if i > 0:\n            nums += 1\n    return nums\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    # special case where array is empty\n    if len(arr) == 0:\n        return True\n    # if we find a single element which is less than the last element then this\n    # is not possible to get non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([]) == True, 'Correctness4'",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    \n    lst1 = [num for num in lst1 if num % 2 == 0]\n    lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    if lst1 == lst2:\n        return \"YES\"\n    return \"NO\"\n    \n",
        "test": "assert     exchange([1, 2], []) ==    \"NO\"",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    s = s.lower()\n    c = c.lower()\n    #for i in range(len(s)):\n    #    if s[i] in c:\n    #        s = s.replace(s[i],'')\n    s = s.replace(c,'')\n    #s = s[::-1]\n    #print(s)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n        \ns = 'abcde'\nc = 'ae'\nresult = reverse_delete(s,c)\nprint(result)\n",
        "test": "assert     reverse_delete(\"bob\", \"\") == (\"bob\", True)",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j == '0':\n                count += 1\n        count += count % 2\n        output.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {count}nput.\")\n    return output\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    assert nums, 'Empty nums'\n    \n    min_sum = float('inf')\n    current_sum = 0\n    for n in nums:\n        current_sum += n\n        \n        if current_sum <= min_sum:\n            min_sum = current_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([0]) == 0",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    # TODO: Write your code here\n",
        "test": "assert     max_fill(",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    return sorted(arr, key=lambda x: (x*2,x))\n",
        "test": "assert sort_array([]) == []",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    words = []\n    if len(s) == 0:\n        return words\n    for word in s.split():\n        if len(word) <= n:\n            words.append(word)\n    return words\n",
        "test": "assert     select_words(\"\", 0) == []",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "    \n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n        else:\n            return ''\n",
        "test": "assert     get_closest_vowel('abc') == ''",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    stack = []\n    for paren in lst:\n        if paren == '(':\n            stack.append(paren)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(('(()(', '()')) == 'No', '2'",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "    # TODO: Write your solution here\n    n = len(arr)\n    if k >= n:\n        return arr\n    max_value = max(arr[:k])\n    max_index = arr.index(max_value)\n    # max_index = len(arr) - k\n    # print(max_index)\n    return arr[max_index:] + arr[:max_index]\n",
        "test": "assert     maximum([], 4) == []",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    ret = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 1:\n            ret += lst[i]\n    return ret\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([], 1) == 0",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + get_odd_collatz(collatz(n))\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 2186,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    try:\n        return date!= \"\" and (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 31 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 30 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 30 and\n                1 <= int(date.split('-')[1]) <= 12 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 1 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        )\n    except:\n        return False\n",
        "test": "assert     valid_date('') == False",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') ==     ['hello', 'world']",
        "num_ids": 2038,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    return lst == sorted(set(lst))\n",
        "test": "assert     is_sorted([1, 2, 3]) is True, 'First'",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    intersection = 0\n    if intersection < 0:\n        return 'NO'\n    elif intersection == 0:\n        return 'NO'\n    else:\n        for i in range(interval1[0], interval1[1]+1):\n            if i in range(interval2[0], interval2[1]+1):\n                intersection += 1\n        if not isPrime(intersection):\n            return 'NO'\n        else:\n            return 'YES'\n",
        "test": "assert     intersection((1, 2), (5, 7)) == \"NO\", \"Wrong result for (1, 2) and (5, 7)\"",
        "num_ids": 1878,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    if arr == []:\n        return None\n    prod = 1\n    for i in arr:\n        if i == 0:\n            continue\n        if i > 0:\n            prod *= i\n        elif i < 0:\n            prod *= -i\n    return prod",
        "test": "assert     prod_signs([]) == None, \"wrong answer for empty arr\"",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    # DFS\n    # \n    def dfs(grid, m, n, k, visited):\n        if k == 0:\n            return [i for i in range(m*n)]\n        # edge case\n        if m == 0 or n == 0:\n            return []\n",
        "test": "assert     minPath([[2,1,2,1,2],",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if n < 2:\n        return []\n    ret = []\n    a, b, c = 3, 1, 0\n    while n:\n        ret.append(a)\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return ret\n",
        "test": "assert     tri(2) == [3, 1]",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    # Make a list of the digits of n\n    digits = list(str(n))\n    # For each digit in the list of the digits,\n    # check if the digit is an odd number\n    odds = 0\n    for digit in digits:\n        if int(digit) % 2!= 0:\n            odds += 1\n    # If the number of odd digits is odd,\n    # return 0. If not, return the product.\n    if odds % 2 == 0:\n        return 0\n    else:\n        return product(digits)\n    \ndef product(digits):\n    \"\"\"Given a list of digits, return the product of those digits\n    For example, product([1,2,3,4]) == 24\n    \"\"\"\n    product = 1\n    for digit in digits:\n        product *= int(digit)\n    return product\n",
        "test": "assert     digits(1) == 1",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    string = string.replace(' ', '')\n    if '[]' not in string:\n        return False\n    else:\n        sub_str = string.split('[]')\n        for element in sub_str:\n            if element == '':\n                sub_str.remove(element)\n        if len(sub_str) == 1:\n            return False\n        else:\n            return True\n",
        "test": "assert not is_nested('')",
        "num_ids": 1361,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    return round(sum([x**2 for x in lst]), 2)",
        "test": "assert     sum_squares([0, 0, 0, 0, 0]) == 0",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    return not txt or txt[-1].isalpha() and txt.find(' ') == -1\n",
        "test": "assert     check_if_last_char_is_a_letter('text') == True",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] <= arr[i-1]:\n            return -1\n        i += 1\n    return i-1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    # Edge cases\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (None, lst[0])\n    \n    # Pre-processing\n    negatives = list(filter(lambda x: x < 0, lst))\n    positives = list(filter(lambda x: x > 0, lst))\n    \n    # Calculations\n    if len(negatives) > 0:\n        smallest = negatives[0]\n        largest = negatives[-1]\n    else:\n        smallest = None\n        largest = None\n    if len(positives) > 0:\n        largest = positives[0]\n        smallest = positives[-1]\n    else:\n        largest = None\n        smallest = None\n    \n    # Formatting\n    if smallest == None and largest == None:\n        return (None, None)\n    if smallest == None:\n        return (None, largest)\n    if largest == None:\n        return (smallest, None)\n    return (smallest, largest)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if a == b:\n        return None\n    if type(a) == float or type(a) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    if type(b) == float or type(b) == int:\n        if b > a:\n            return b\n        else:\n            return a\n",
        "test": "assert     compare_one(1, 1.1) == 1.1",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    return n%2 == 0 and n//2 >= 4\n",
        "test": "assert is_equal_to_sum_even(9) == False, \"9 is even\"",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    res = 1\n    if n == 0:\n        return 1\n    for i in range(1, n):\n        res *= (i+1)\n    return res\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    return '-'.join(text.split())\n",
        "test": "assert fix_spaces( \" hello_world \" ) == \"hello_world\"",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    if len(file_name) > 3 and file_name.count('.') == 1 and file_name[0].isalpha() and file_name[-3:] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('123.txt') == 'No'",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4 == 0:\n                lst[i] = lst[i]**2\n            else:\n                lst[i] = lst[i]**3\n        sum += lst[i]\n    return sum\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    words = sentence.split(' ')\n    words = [word for word in words if word.isalpha()]\n    return \" \".join(words)\n",
        "test": "assert     words_in_sentence('i do not know what this is') == 'i do not know what this is'",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    x = str(x)\n    n = str(n)\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if int(x[0]) == 1 and int(n[0]) == 1:\n        return True\n    if int(x[0]) == 1 and int(n[1]) == 1:\n        return True\n    if int(x[1]) == 1 and int(n[0]) == 1:\n        return True\n    if int(x[1]) == 1 and int(n[1]) == 1:\n        return True\n    return False\n",
        "test": "assert     simplify(\"0/2\", \"2/4\") == False",
        "num_ids": 2802,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    nums.sort()\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2) % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([11,3,14,19,21,28]) == 3, \"Wrong answer\"",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    res = 0\n    i = 2\n    while i*i <= n:\n        j = i\n        while j*j <= n:\n            k = j\n            while k*k <= n:\n                if (i*i + j*j + k*k) % 3 == 0:\n                    res += 1\n                k += 1\n            j += 1\n        i += 1\n    return res",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    return (planet1, planet2)\n",
        "test": "assert     bf('Mercury', 'Mars') ==     ('Mercury', 'Mars'), 'Mercury-Mars'",
        "num_ids": 2238,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    \n    sorted_list = []\n    sorted_list = sorted(lst)\n    return sorted_list\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    if n in range(2, 5) or n in range(8, 10):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(2, 2, 3) == 2",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    \n    if lst == []:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num % 2 == 1:\n                total += num**2\n        return total\n            \n",
        "test": "assert         double_the_difference([])                    == 0",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "    return list(abs(game-guess) for guess,game in zip(guess,game))\n",
        "test": "assert     compare([0,3,0,3,0,3,0,0,1,0],[0,3,3,2,0,0,1,0,3,0]) == [0,0,0,0,1,1,1,0,0,0]",
        "num_ids": 1402,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # this is the code to calculate the strength of each extension\n    extensions_strength = []\n    for i in extensions:\n        if i.isupper():\n            extensions_strength.append(len(i)-2)\n        elif i.islower():\n            extensions_strength.append(len(i)-1)\n    extensions_strength.sort()\n    return class_name + extensions_strength[-1]",
        "test": "assert ",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return a in b[::-1] or b in a\n",
        "test": "assert     cycpattern_check('hello', 'abc') == False",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    return (num % 10 if num % 10 % 2 == 0 else num % 10 + 1, num // 10)\n",
        "test": "assert     even_odd_count(0) == (0, 0)",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "    if number == 0:\n        return ''\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xiix'\n    if number == 22:\n        return 'xiiix'\n    if number == 23:\n        return 'xiiiix'\n    if number == 24:\n        return 'xivix'\n    if number == 25:\n        return 'xvix'\n    if number == 26:\n        return 'xviix'\n    if number == 27:\n        return 'xviiix'\n    if number == 28:\n        return 'xviiiix'\n    if number == 29:\n        return 'xixix'\n    if number == 30:\n        return 'xxi'\n    if number == 31:\n        return 'xxii'\n    if number == 32:\n        return 'xxiii'\n    if number == 33:\n        return 'xxiv'\n    if number == 34:\n        return 'xxv'\n    if number == 35:\n        return 'xxvi'\n    if number == 36:\n        return 'xxvii'\n    if number == 37:\n        return 'xxviii'\n    if number == 38:\n        return 'xxix'\n    if number == 39:\n        return 'xxx'\n    if number == 40:\n        return 'xxx'\n    if number == 41:\n        return 'xxxi'\n    if number == 42:\n        return 'xxii'\n    if number == 43:\n        return 'xxiii'\n    if number == 44:\n        return 'xxiv'\n    if number == 45:\n        return 'xxv'\n    if number == 46:\n        return 'xxvi'\n    if number == 47:\n        return 'xxvii'\n    if number == 48:\n        return 'xxviii'\n    if number == 49:\n        return 'xxix'\n    if number == 50:\n        return 'xxl'\n    if number == 51:\n        return 'xxli'\n    if number == 52:\n        return 'xxlii'\n    if number == 53:\n        return 'xxliv'\n    if number == 54:\n        return 'xxlv'\n    if number == 55:\n        return 'xxlvi'\n    if number == 56:\n        return 'xxlvii'\n    if number == 57:\n        return 'xxlviii'\n    if number == 58:\n        return 'xxlix'\n    if number == 59:\n        return 'xxlx'\n    if number == 60:\n        return 'xxlix'\n    if number == 61:\n        return 'xxlxi'\n    if number == 62:\n        return 'xxliv'\n    if number == 63:\n        return 'xxlv'\n    if number == 64:\n        return 'xxlvi'\n    if number == 65:\n        return 'xxlvii'\n    if number == 66:\n        return 'xxlviii'\n    if number == 67:\n        return 'xxlix'\n    if number == 68:\n        return 'xxlx'\n    if number == 69:\n        return 'xxli'\n    if number == 70:\n        return 'xxliv'\n    if number == 71:\n        return 'xxlv'\n",
        "test": "assert     int_to_mini_roman(1) == \"i\"",
        "num_ids": 2774,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    \n    # There are only three sides of a right-angled triangle\n    if a == b == c:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False",
        "test": "assert     right_angle_triangle(6, 10, 5) == False",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n",
        "test": "assert     find_max([\"a\", \"b\", \"c\", \"a\", \"a\"]) == \"a\"",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    \n    # calculate how many carrots you need to eat\n    if remaining < need:\n        return [number, remaining]\n    else:\n        return [number+need, remaining - need]\n",
        "test": "assert     eat(0, 10, 0) ==     [0, 0]",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    # First, put the elements of operand in a 2D array, and the elements of operator\n    # in a 2D array.\n    length_operand = len(operand) - 1\n    length_operator = len(operator)\n    matrix_operand = [[0 for i in range(length_operand+1)] for j in range(length_operator)]\n    matrix_operator = [[0 for i in range(length_operand+1)] for j in range(length_operator)]\n",
        "test": "assert ",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if not s:\n        return s\n    s = s.lower() if s[0].isalpha() else s.upper()\n    return s[::-1]\n",
        "test": "assert     solve('') == ''",
        "num_ids": 1685,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    if text == '':\n        return None\n    hash_obj = hashlib.md5()\n    hash_obj.update(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n",
        "test": "assert string_to_md5('') == None",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "test": "assert generate_integers(1, 100)!= generate_integers(1, 100+1)",
        "num_ids": 806,
        "indeed": false
    }
]