[
    {
        "number": 0,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 0.1) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string ",
        "test": "assert     separate_paren_groups(\"((()()))()\") == [\"((()()))()\"]"
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return number - math.floor(number)\n",
        "test": "assert     truncate_number(2.5) == 2.0"
    },
    {
        "number": 3,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance = balance + operation\n    return balance < 0\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return 0.0\n    x_mean = sum(numbers) / n\n    return sum(abs(x - x_mean) for x in numbers) / n\n",
        "test": "assert "
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return [delimeter] + numbers + [delimeter]\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string ",
        "test": "assert     parse_nested_parens(\"(((()()))()\") == [3, 3]"
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"f\") == [\"f\"]"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_ += i\n        product *= i\n    return (sum_, product)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(max_list)]))\n    return max_list\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + longest_palindrome[::-1]\n",
        "test": "assert "
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n",
        "test": "assert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"1c0111001f010100061a024b5\") == \"1c0111001f010100061a024b53535009181c\""
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "test": "assert "
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n",
        "test": "assert     parse_music(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    numbers = numbers.split()\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    numbers = list(map(str, numbers))\n    numbers =''.join(numbers)\n    return numbers\n",
        "test": "assert     sort_numbers('three') == 'three'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # TODO: Write your code here\n    return min(numbers), max(numbers)\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "assert "
    },
    {
        "number": 22,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert "
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(24) == 4"
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
        "test": "assert "
    },
    {
        "number": 26,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n",
        "test": "assert "
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return string.swapcase()\n",
        "test": "assert "
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\""
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"d\") == [\"d\", \"e\", \"f\"]"
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 31,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert "
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i\n    return None\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 3,
        "answer": "    l_copy = l.copy()\n    l_copy.sort()\n    l_copy_copy = l_copy.copy()\n    l_copy_copy.sort()\n    l_copy_copy_copy = l_copy_copy.copy()\n    l_copy_copy_copy.sort()\n    l_copy_copy_copy_copy = l_copy_copy_copy.copy()\n    l_copy_copy_copy_copy_copy.sort()\n    l_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy.copy()\n    l_copy_copy_copy_copy_copy_copy_copy.sort()\n    l_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy.copy()\n    l_copy_copy_copy_copy_copy_copy_copy_copy_copy.sort()\n    l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy.copy()\n    l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.copy()\n    l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_cop",
        "test": "assert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,44"
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]"
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(20) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even.sort()\n    l_odd.sort()\n    return l_even + l_odd\n",
        "test": "assert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]"
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"a\")) == \"a\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 40,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert "
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Your code here\n    return 0\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]"
    },
    {
        "number": 43,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert "
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x % base)\n",
        "test": "assert     change_base(10, 2) == '1010'"
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return a * h / 2\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert "
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "test": "assert "
    },
    {
        "number": 48,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return text == text[::-1]\n",
        "test": "assert "
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\""
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\""
    },
    {
        "number": 52,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "test": "assert "
    },
    {
        "number": 53,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return x + y\n",
        "test": "assert "
    },
    {
        "number": 54,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return len(set(s0) & set(s1)) == len(set(s0)) == len(set(s1))\n",
        "test": "assert     same_chars(\"hello\", \"hello\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    return brackets == \"\"\n",
        "test": "assert     correct_bracketing(\"<(>)\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "test": "assert "
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_prime_factor(6) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert "
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    brackets = brackets.replace(\" \", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.split(\",\")\n    for i in range(len(brackets)):\n        if brackets[i] == \"\":\n            continue\n        if brackets[i][0] == \"(\" and brackets[i][-1] == \")\":\n            brackets[i] = brackets[i][1:-1]\n        else:\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"()\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return [xs[i] + xs[i+1] * xs[i] + xs[i+2] * xs[i] ** 2 for i in range(len(xs) - 1)]\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert "
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)[-shift:] + str(x)[:-shift]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"\") == 0, \"Empty string\""
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "    return s.count(\"mango\")\n",
        "test": "assert "
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    return []\n",
        "test": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    if len(lst) == 0:\n        return -1\n    max_freq = 0\n    max_val = 0\n    for i in lst:\n        if i > max_val:\n            max_val = i\n            max_freq = 1\n        elif i == max_val:\n            max_freq += 1\n    if max_freq >= max_val:\n        return max_val\n    else:\n        return -1\n",
        "test": "assert "
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if not lst:\n        return []\n    else:\n        return sorted(lst, key=lambda x: (x, x))\n",
        "test": "assert     strange_sort_list([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1\n",
        "test": "assert "
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # O(n) time | O(n) space\n    # if arr is empty, return 0\n    if len(arr) == 0:\n        return 0\n",
        "test": "assert "
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert "
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a // i):\n                return True\n    return False\n",
        "test": "assert "
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return x**int(n) == x\n",
        "test": "assert     is_simple_power(2, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return a**3 == a\n",
        "test": "assert "
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if num[i] in \"ABCDEF\":\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return \"db\" + \"\".join(str(int(i)) for i in bin(decimal)[2:])\n",
        "test": "assert     decimal_to_binary(3) == '11'"
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i in range(len(s) - 2):\n    #         if s[i] == s[i + 1]:\n    #             return False\n    #     return True\n    # return False\n    # if len(s) < 3:\n    #     return False\n    # else:\n    #     for i i",
        "test": "assert "
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    grades = sorted(grades)\n    grades = list(grades)\n    grades.reverse()\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grades = list(grades)\n    grade",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']"
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n",
        "test": "assert "
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n        elif i == n:\n            count += 1\n        elif i[0] == 1 or i[-1] == 1:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return sum(int(i) for i in str(N))\n",
        "test": "assert "
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1)\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ord(x)))\n",
        "test": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he quick ao uxrry brw ojmw fx ojmw lzyg dog\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if not lst:\n        return []\n    \n    row_dict = {}\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                row_dict[i] = j\n    \n    row_dict = sorted(row_dict.items(), key=lambda x: (x[0], -x[1]))\n    \n    return [(i, j) for i, j in row_dict]\n",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Your code here\n    return sorted(array)\n",
        "test": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return s.translate(str.maketrans(string.ascii_lowercase, \n        string.ascii_lowercase[2:] + string.ascii_lowercase[:2]))\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if lst[0] < lst[1]:\n        return lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i]\n    return lst[0]\n",
        "test": "assert "
    },
    {
        "number": 91,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return S.count(\"I\")\n",
        "test": "assert "
    },
    {
        "number": 92,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return (x == y + z) and (type(x) == int) and (type(y) == int) and (type(z) == int)\n",
        "test": "assert "
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    \n    # Your code here\n    \n    # Replace vowels with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet\n    \n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel\n    # in the english alphabet",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i > 9]\n    lst = [i for i in lst if i > 1]\n    lst = [i for i in lst if i > 3]\n    lst = [i for i in lst if i > 5]\n    lst = [i for i in lst if i > 7]\n    lst = [i for i in lst if i > 11]\n    lst = [i for i in lst if i > 13]\n    lst = [i for i in lst if i > 17]\n    lst = [i for i in lst if i > 19]\n    lst = [i for i in lst if i > 23]\n    lst = [i for i in lst if i > 29]\n    lst = [i for i in lst if i > 31]\n    lst = [i for i in lst if i > 37]\n    lst = [i for i in lst if i > 41]\n    lst = [i for i in lst if i > 47]\n    lst = [i for i in lst if i > 53]\n    lst = [i for i in lst if i > 59]\n    lst = [i for i in lst if i > 61]\n    lst = [i for i in lst if i > 67]\n    lst = [i for i in lst if i > 71]\n    lst = [i for i in lst if i > 73]\n    lst = [i for i in lst if i > 79]\n    lst = [i for i in lst if i > 83]\n    lst = [i for i in lst if i > 89]\n    lst = [i for i in lst if i > 97]\n    lst = [i for i in lst if i > 101]\n    lst = [i for i in lst if i > 103]\n    lst = [i for i in lst if i > 107]\n    lst = [i for i in lst if i > 109]\n    lst = [i for i in lst if i > 113]\n    lst = [i for i in lst if i > 127]\n    lst = [i for i in lst if i > 131]\n    lst = [i for i in lst if i > 137]\n    lst = [i for i in lst if i > 139]\n    lst = [i for i in lst if i > 149]\n    lst = [i for i in lst if i > 151]\n    lst = [i for i in lst if i > 157]\n    lst = [i for i in lst if i > 163]\n    lst = [i for i in lst if i > 167]\n    lst = [i for i in lst if i > 173]\n    lst = [i for i in lst if i > 179]\n    lst = [i for i in lst if i > 181]\n    lst = [i for i in lst if i > 191]\n    lst = [i for i in lst if i > 193]\n    lst = [i for i in lst if i > 197]\n    lst = [i for i in lst if i > 199]\n    lst = [i for i in lst if i > 201]\n    lst = [i for i in lst if i > 211]\n    lst = [i for i in lst if i > 213]\n    lst = [i for i in lst if i > 217]\n    lst = [i for i in lst if i > 219]\n    lst = [i for i in lst if i > 221]\n    lst = [i for i in lst if i > 227]\n    lst = [i for i in lst if i > 229]\n    lst = [i for i in lst if i > 233]\n    lst = [i for i in lst if i > 239]\n    lst = [i for i in lst if i > 241]\n    lst = [i for i in lst i",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if type(dict[key])!= str:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, \"Empty dictionary\""
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "test": "assert "
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return int(str(a) * str(b))\n",
        "test": "assert "
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n - 1)\n    else:\n        return [n] + make_a_pile(n - 1) + make_a_pile(n - 2)\n",
        "test": "assert     make_a_pile(4) == [1, 1, 1, 1]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return s.split(', ')\n",
        "test": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"]"
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if x > y:\n        return -1\n    if x == y:\n        return x\n    if x < y:\n        return choose_num(x + 2, y)\n",
        "test": "assert "
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n > m:\n        return -1\n    return int(bin(int(round(n + m / 2))), 2)\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 3,
        "answer": "    return sorted(list(set(x)))\n",
        "test": "assert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    return\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [i + j for i in f(n - 1) for j in range(1, i + 1)]\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_palindrome(4) == (0, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return True\n        else:\n            return False\n    if len(arr) == 3:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return True\n        else:\n            return False\n    if len(arr) == 4:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3]:\n            return True\n        else:\n            return False\n    if len(arr) == 5:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4]:\n            return True\n        else:\n            return False\n    if len(arr) == 6:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5]:\n            return True\n        else:\n            return False\n    if len(arr) == 7:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6]:\n            return True\n        else:\n            return False\n    if len(arr) == 8:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6] and arr[0] > arr[7]:\n            return True\n        else:\n            return False\n    if len(arr) == 9:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6] and arr[0] > arr[7] and arr[0] > arr[8]:\n            return True\n        else:\n            return False\n    if len(arr) == 10:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6] and arr[0] > arr[7] and arr[0] > arr[8] and arr[0] > arr[9]:\n            return True\n        else:\n            return False\n    if len(arr) == 11:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6] and arr[0] > arr[7] and arr[0] > arr[8] and arr[0] > arr[9] and arr[0] > arr[10]:\n            return True\n        else:\n            return False\n    if len(arr) == 12:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6] and arr[0] > arr[7] and arr[0] > arr[8] and arr[0] > arr[9] and arr[0] > arr[10] and arr[0] > arr[11]:\n            return True\n        else:\n            return False\n    if len(arr) == 13:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] and arr[0] > arr[6] an",
        "test": "assert "
    },
    {
        "number": 110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) and all(x % 2 == 0 for x in lst2) else \"NO\"\n",
        "test": "assert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n",
        "test": "assert     histogram(\"hello\") == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}"
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    s = s.lower()\n    c = c.lower()\n    s = s.replace(' ','')\n    c = c.replace(' ','')\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete(\"\",\"\") == (\"\",True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst), i, len(lst)) for i in range(1, len(lst)+1)]\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n",
        "test": "assert "
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # TODO: Write your code here\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number of times you need to lower the buckets\n    # return the number o",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([1,2,3,4,5,6,7,8,9,10,0,0,0]) == [0,0,0,1,2,3,4,5,6,7,8,9,10]"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return []\n",
        "test": "assert "
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    vowels = \"aeiou\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert "
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst",
        "test": "assert     match_parens(['(())', '()()', '()()', '()()', '()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Solution 1\n    # Time: O(n)\n    # Space: O(n)\n    # if k == 0:\n    #     return []\n    # if k == 1:\n    #     return arr[:k]\n    # if k == len(arr):\n    #     return arr\n    # max_num = arr[0]\n    # for i in range(1, k):\n    #     if arr[i] > max_num:\n    #         max_num = arr[i]\n    # return [max_num] + maximum(arr[k:], k)\n",
        "test": "assert     maximum([1,2,3,4,5], 6) == [5,4,3,2,1,0]"
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1])\n",
        "test": "assert     solution([1,2,3,4,5,6,7,8]) == 0, \"Should be 0\""
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    return sum(sorted(arr)[:k])\n",
        "test": "assert     add_elements([1, 2, 3, 4, 5], 5) == 20"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(odd_collatz)\n",
        "test": "assert     get_odd_collatz(4) == [1, 2, 3, 5]"
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if date == '':\n        return False\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    if len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 31:\n        return False\n    if int(date[2]) < 1 or int(date[2]) > 2020:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 30:\n        return False\n    if int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0]) == 11:\n        if int(date[1]) < 1 or int(date[1]) > 30:\n            return False\n    if int(date[0]) == 2:\n        if int(date[1]) < 1 or int(date[1]) > 28:\n            return False\n    return True\n",
        "test": "assert     valid_date(\"\") == False, \"Empty string\""
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('a,b,c,d,e,f') == ['a', 'b', 'c', 'd', 'e', 'f']"
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    return sorted(lst) == lst\n",
        "test": "assert "
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] or interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:",
        "test": "assert "
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not arr:\n        return None\n    return sum(abs(x) * (1 if x > 0 else -1) for x in arr)\n",
        "test": "assert     prod_signs([-1, 1, 1, 1]) == 1"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # TODO: Write your code here\n    # return []\n    # return minPath_helper(grid, k)\n    return minPath_helper_memo(grid, k)\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 2, 1]\n    return [1, 2, 1] + tri(n - 1) + tri(n - 2) + tri(n - 3)\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 * digits(n // 10)\n",
        "test": "assert "
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if len(string) < 3:\n        return False\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    if string[0] == '[' and string[-1] == '[':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == '[':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    return False\n",
        "test": "assert "
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return sum([x**2 for x in lst])\n    \n",
        "test": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 144"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalpha() in word_list\n",
        "test": "assert     check_if_last_char_is_a_letter('hello world!') == False"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Create a dictionary with the values as the keys and the indices as the\n    # values.\n    d = {}\n    for i, val in enumerate(arr):\n        if val in d:\n            d[val].append(i)\n        else:\n            d[val] = [i]\n    # Find the largest index of an element which is not greater than or\n    # equal to the element immediately preceding it.\n    for val in d:\n        if len(d[val]) == 1:\n            continue\n        if d[val][0] < d[val][1]:\n            return d[val][0]\n    return -1\n",
        "test": "assert "
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not lst:\n        return (None, None)\n    neg = []\n    pos = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        elif i > 0:\n            pos.append(i)\n    if neg:\n        return (max(neg), min(pos))\n    else:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-7, -6)"
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n",
        "test": "assert "
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    if file_name[-3:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('abc.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n    return sum\n",
        "test": "assert "
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    # Your code here\n    return \"\".join(sorted(set(sentence.split()), key=len))\n",
        "test": "assert     words_in_sentence(\"I am a boy and girl and a girl and a girl\") == \"I am a boy and girl and a girl and a girl\""
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if int(x[0]) == 0:\n        return False\n    if int(n[0]) == 0:\n        return False\n    if int(x[1]) == 0:\n        return False\n    if int(n[1]) == 0:\n        return False\n    if int(x[0]) == int(n[0]) and int(x[1]) == int(n[1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"1/2\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 3,
        "answer": "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
        "test": "assert     order_by_points
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10!= 0:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    # Your code here\n    return 0\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    return ()\n",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n",
        "test": "assert "
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert "
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x % 2!= 0])\n",
        "test": "assert     double_the_difference([1,2,3,4,5,6,7,8]) == 21"
    },
    {
        "number": 152,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n",
        "test": "assert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # Your code here\n    return class_name + '.' + extensions[0]\n",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if a in b:\n        return True\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('hello','hello') == True"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    return (num % 10, num // 10)\n",
        "test": "assert "
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if number == 0:\n        return 'zero'\n    if number < 0 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xi'\n    if number == 22:\n        return 'xii'\n    if number == 23:\n        return 'xiii'\n    if number == 24:\n        return 'xiv'\n    if number == 25:\n        return 'xv'\n    if number == 26:\n        return 'xvi'\n    if number == 27:\n        return 'xvii'\n    if number == 28:\n        return 'xviii'\n    if number == 29:\n        return 'xix'\n    if number == 30:\n        return 'xxi'\n    if number == 31:\n        return 'xxii'\n    if number == 32:\n        return 'xxiii'\n    if number == 33:\n        return 'xxiv'\n    if number == 34:\n        return 'xxv'\n    if number == 35:\n        return 'xxvi'\n    if number == 36:\n        return 'xxvii'\n    if number == 37:\n        return 'xxviii'\n    if number == 38:\n        return 'xxix'\n    if number == 39:\n        return 'xxx'\n    if number == 40:\n        return 'xx'\n    if number == 41:\n        return 'xxi'\n    if number == 42:\n        return 'xxii'\n    if number == 43:\n        return 'xxiii'\n    if number == 44:\n        return 'xxiv'\n    if number == 45:\n        return 'xxv'\n    if number == 46:\n        return 'xxvi'\n    if number == 47:\n        return 'xxvii'\n    if number == 48:\n        return 'xxviii'\n    if number == 49:\n        return 'xxix'\n    if number == 50:\n        return 'xxxi'\n    if number == 51:\n        return 'xxii'\n    if number == 52:\n        return 'xxiii'\n    if number == 53:\n        return 'xxiv'\n    if number == 54:\n        return 'xxv'\n    if number == 55:\n        return 'xxvi'\n    if number == 56:\n        return 'xxvii'\n    if number == 57:\n        return 'xxviii'\n    if number == 58:\n        return 'xxix'\n    if number == 59:\n        return 'xxxi'\n    if number == 60:\n        return 'xxii'\n    if number == 61:\n        return 'xxiii'\n    if number == 62:\n        return 'xxiv'\n    if number == 63:\n        return 'xxv'\n    if number == 64:\n        return 'xxvi'\n    if number == 65:\n        return 'xxvii'\n    if number == 66:\n        return 'xxviii'\n    if number == 67:\n        return 'xxix'\n    if number == 68:\n        return 'xxxi'\n    if number == 69:\n        return 'xxii'\n    if number == 70:\n        return 'xxiii'\n    if number == 71:",
        "test": "assert     int_to_mini_roman(4) == 'IV'"
    },
    {
        "number": 157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"hello\", \"world\", \"hello\"]) == \"hello\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if number < need:\n        return [number, need - number]\n    else:\n        return [number, remaining - need]\n",
        "test": "assert     eat(0, 0, 1000) == [0, 1000]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "    # TODO: Write your code here\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    if not s:\n        return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return \"\".join(s)\n",
        "test": "assert     solve(\"aAa\") == \"aAA\""
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "test": "assert     generate_integers(1, 10000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]"
    }
]