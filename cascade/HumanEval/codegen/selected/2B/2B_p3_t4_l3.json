[
    {
        "number": 0,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] <= threshold and numbers[i + 1] <= threshold:\n            return True\n    return False\n",
        "test": "assert has_close_elements([1, 2, 3, 4, 5], 2) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    paren_string = paren_string.replace(\"(\", \"\")\n    paren_string = paren_string.replace(\")\", \"\")\n    paren_string = paren_string.split(\")(\")\n    return paren_string\n",
        "test": "assert     separate_paren_groups('()())())('    ) == ['()()()()', '()()', '()()()'],\\"
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    num = Decimal(number)\n    return int(num)\n",
        "test": "assert "
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    current_balance = 0\n    for op in operations:\n        current_balance += op\n        if current_balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero(    [1, 2, 3, 4]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # Calculate the mean\n    mean = sum(numbers) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([10, 10, 12, 20]) == 2.5"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if not numbers:\n        return []\n    if not delimeter:\n        return numbers\n    if delimeter == 1:\n        return numbers\n    i = 1\n    while i < len(numbers)-1:\n        numbers.insert(i, delimeter)\n        i += delimeter*2\n    return numbers\n",
        "test": "assert     intersperse([1,2,3],2) == [1,2,2,3]"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    i = 0\n    paren_stack = []\n    paren_string = paren_string.replace(\"()\", \"\")\n    paren_string = paren_string.replace(\"(\", \" \")\n    paren_string = paren_string.replace(\")\", \" \")\n    paren_string = paren_string.split()\n    for i in range(len(paren_string)):\n        paren_stack.append(paren_string[i])\n    for i in range(len(paren_stack)):\n        if '(' in paren_stack:\n            paren_stack.remove('(')\n    return paren_stack\n",
        "test": "assert     parse_nested_parens(\"()\") == []"
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert filter_by_substring([], 'abc') == []"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    \n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n",
        "test": "assert     sum_product([0,0,0,0]) == (0, 0)"
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    length = len(numbers)\n    max_value = 0\n    result = []\n    for i in range(length):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if is_palindrome(string):\n        return string\n    else:\n        # Get longest palindrome that ends in a symbol at the end of the string.\n        # Get the string prefix of the longest palindrome.\n        # Try the longest prefix of the palindrome with the first symbol at the end.\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        pass\n",
        "test": "assert     make_palindrome(\"\") == \"\""
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    ans = \"\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\n",
        "test": "assert "
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n",
        "test": "assert     longest([\"pogoda\", \"dzien\"]) == None, \"Wrong result for list of strings\""
    },
    {
        "number": 13,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert "
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return''.join(map(str, range(n+1)))\n",
        "test": "assert string_sequence(2) == '0 1'"
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    count = 0\n    for letter in string:\n        if letter.isalpha():\n            count += 1\n    return count\n",
        "test": "assert count_distinct_characters(\"abcd\") == 4"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [len(x) for x in music_string.split('|')]\n",
        "test": "assert "
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"this is a test string\", \"is\") == 2"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    numbers = numbers.split()\n    numbers = sorted(numbers, key=lambda x: int(x))\n    return \" \".join(numbers)\n",
        "test": "assert     sort_numbers('8 8') == '8 8'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    numbers.sort()\n    closest_two = numbers[0], numbers[1]\n    for i in range(2, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < abs(numbers[i] - closest_two[1]):\n            closest_two = numbers[i], numbers[i-1]\n    return closest_two\n",
        "test": "assert     find_closest_elements([]) == ()"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 22,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert "
    },
    {
        "number": 23,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(1) == 1, \"Your code did not work!\""
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    fac = []\n    if not n:\n        fac = []\n    elif n == 1:\n        fac = [1]\n    elif n == 2:\n        fac = [1, 2]\n    else:\n        x = 2\n        while n % 2 == 0:\n            fac.append(2)\n            n //= 2\n        while n > 1:\n            for i in range(3, int(n ** 0.5 + 1), 2):\n                while n % i == 0:\n                    fac.append(i)\n                    n //= i\n                    if n == 1:\n                        break\n            if n > 1:\n                fac.append(n)\n            x *= 2\n    return fac\n",
        "test": "assert     factorize(1) == [1]"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    unique = []\n    for i in numbers:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     remove_duplicates([1, 2, 2]) == [1, 2]"
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return string.swapcase()\n",
        "test": "assert "
    },
    {
        "number": 28,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "test": "assert     concatenate([\"\"]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], \"foo\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    new_list = []\n    for number in l:\n        if number > 0:\n            new_list.append(number)\n    return new_list\n",
        "test": "assert get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(5) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert(len(xs) % 2 == 0)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i/2\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if len(l) < 3:\n        return l\n    else:\n        i = 0\n        while i < len(l) - 1:\n            if l[i] % 3!= 0:\n                for j in range(i + 1, len(l)):\n                    if l[i] % 3 == 0 and l[j] % 3 == 0:\n                        if l[i] < l[j]:\n                            l[i], l[j] = l[j], l[i]\n                i += 1\n            else:\n                i += 1\n    return l",
        "test": "assert     sort_third([]) ==    []"
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1, 1, 2, 2, 3]) == [1, 2, 3], \"1\""
    },
    {
        "number": 35,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(l) == 0:\n        return None\n    max_value = l[0]\n    for i in range(1,len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n",
        "test": "assert     max_element([1,2,3]) == 3, \"Max element = 3\""
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return sum(count_n(x) for x in range(1, n+1) if count_n(x) == 1)\n",
        "test": "assert "
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new.append(l[i])\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l_new.append(l[i])\n    return sorted(l_new)\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return encode_cyclic(s[::-1])\n",
        "test": "assert "
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if n < 2:\n        return 2\n    else:\n        return (prime_fib(n-1) + prime_fib(n-2))\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    #time complexity O(n)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if -l[i]-l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -2, -1]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    n_collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if (i+1) == (j+1) or (i-1) == (j-1):\n                    n_collisions += 1\n    return n_collisions\n",
        "test": "assert     car_race_collision(1) == 0, 'car_race_collision(1) failed'"
    },
    {
        "number": 42,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([1,2,3]) ==    [2,3,4], \"incr_list should return a list with elements incremented by 1\""
    },
    {
        "number": 43,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j]==0:\n                return True\n    return False\n",
        "test": "assert "
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # result = 0\n    # while x > 0:\n    #     result = result * 10 + x % base\n    #     x //= 10\n    # return str(result)\n    return f\"{x:b}\"\n",
        "test": "assert "
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return (a*h)/2\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n <= 2:\n        return n\n",
        "test": "assert "
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list) // 2] + sorted_list[len(sorted_list) // 2 - 1]) / 2\n    else:\n        return sorted_list[len(sorted_list) // 2]\n",
        "test": "assert     median([5, 6, 9, 9, 9]) == 9, \"Wrong answer\""
    },
    {
        "number": 48,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    if text == '':\n        return True\n    \n    text = text.lower()\n    text = text.replace(\" \", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"?\", \"\")\n    \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_palindrome(\"Rohit\")"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        n = p - n\n    return ((n * pow(n, p - 2, p)) % p)\n",
        "test": "assert     (modp(2,5) == 1)"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"BANANA\") == \"BABABA\""
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n",
        "test": "assert     remove_vowels(\"I'm a teacher\") == \"Im a b\""
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    for x in l:\n        if x <= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, -2, 3], 1) is False"
    },
    {
        "number": 53,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return x + y\n    \ndef add_many(*args: int):\n    \"\"\"Add a series of numbers\n",
        "test": "assert "
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return all(s0.count(ch) == s1.count(ch) for ch in s0)\n",
        "test": "assert     same_chars(\"abcd\", \"abcd\")"
    },
    {
        "number": 55,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(5) == 5"
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char!= stack.pop():\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"<{[(])>\") is False, \"For <{[(])>\""
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    assert l, \"List cannot be empty\"\n    start = l[0]\n    for i in range(len(l)):\n        if start > l[i]:\n            return False\n        start = l[i]\n    return True\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5, 6, 7, 8]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    i = 0\n    j = 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n",
        "test": "assert     common([1,2,3,4], [2,3,4,5]) == [2,3,4], 'Wrong!'"
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 1:\n        return n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(4) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "test": "assert "
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Start with one opening bracket and increment for each closing bracket:\n    opening_brackets = 1\n    closing_brackets = 0\n    for c in brackets:\n        if c == '(':\n            opening_brackets += 1\n        else:\n            closing_brackets += 1\n        if opening_brackets == closing_brackets:\n            return True\n    return False\n",
        "test": "assert     correct_bracketing(\"((((((((((())))))))()))))()\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(xs) < 1:\n        return []\n    if len(xs) == 1:\n        return [1]\n    dxs = []\n    dxs.append(xs[0])\n    for i in range(1, len(xs) - 1):\n        dxs.append(xs[i] * (i + 1))\n    dxs.append(xs[-1])\n    return dxs\n",
        "test": "assert derivative([1, -2, -3]) == [-4, 6, 3]"
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return s.lower().count('a') + s.lower().count('e') + s.lower().count('i') + \\\n        s.lower().count('o') + s.lower().count('u') - \\\n        s.lower().count('y')\n",
        "test": "assert "
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return sum([ord(i) for i in s if i.isupper()])\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    mangos = 0\n    apples = 0\n    oranges = 0\n    for i in s:\n        if i == '0':\n            apples += 1\n        elif i == '1':\n            oranges += 1\n        elif i == '2':\n            mangos += 1\n    ans = n - apples - oranges - mangos\n    if ans == 0:\n        return 0\n    return ans\n",
        "test": "assert fruit_distribution('10',2) == 0, f'The output is wrong, the correct answer is: 0. The output is: {fruit_distribution(\"10\",2)}'"
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    arr = sorted([n for n in arr if n % 2 == 0])\n    return arr[:1] if arr else []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if len(lst) == 0:\n        return -1\n    else:\n        max_freq = max(lst)\n        return max_freq if max_freq > 1 else -1",
        "test": "assert search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if lst == []:\n        return []\n",
        "test": "assert     strange_sort_list([]) == [], 'incorrect'"
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        return (a * b * 0.5) / 2\n",
        "test": "assert triangle_area(2,2,2) == 1"
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if type(q)==list:\n        if len(q)==0:\n            return True\n        else:\n            if q[0]==q[-1]:\n                if sum(q)<=w and q[0]>=0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3], 2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr.sort()\n    return sum([abs(a-i) for a, i in enumerate(arr[:-1], 1)])\n",
        "test": "assert "
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    n1 = len(lst1)\n    n2 = len(lst2)\n    n = n1 if n1 < n2 else n2\n",
        "test": "assert "
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(2,101):\n        if i*3<=a:\n            if a%i==0:\n                return False\n            if i*3>a:\n                if a%i==0:\n                    return False\n    return True\n",
        "test": "assert     is_multiply_prime(35) == False, \"35 is not the multiplication of 3 prime numbers\""
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    # if n == 1:\n    #     return True\n    # elif n == 0:\n    #     return False\n    # elif n % 2 == 0:\n    #     return False\n    # else:\n    #     return True\n    if n > 1 and x ** 1 == x:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_simple_power(2, 2) == True, \"2 is a simple power of 2\""
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return a**3 == a\n",
        "test": "assert     iscube(8) == False"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    x = \"ABCDEF01\"\n    y = \"\"\n    d = 0\n    for i in range(0,len(num)):\n        if num[i] == x[0] or num[i] == x[1] or num[i] == x[2] or num[i] == x[3] or num[i] == x[4] or num[i] == x[5] or num[i] == x[6] or num[i] == x[7]:\n            if num[i] == x[0] or num[i] == x[1] or num[i] == x[2]:\n                y = y + x[0]\n            if num[i] == x[3] or num[i] == x[4] or num[i] == x[5]:\n                y = y + x[1]\n            if num[i] == x[6] or num[i] == x[7]:\n                y = y + x[2]\n            if num[i] == x[8] or num[i] == x[9]:\n                y = y + x[3]\n            if num[i] == x[10] or num[i] == x[11] or num[i] == x[12] or num[i] == x[13] or num[i] == x[14] or num[i] == x[15]:\n                y = y + x[4]\n            if num[i] == x[16] or num[i] == x[17] or num[i] == x[18] or num[i] == x[19] or num[i] == x[20] or num[i] == x[21] or num[i] == x[22] or num[i] == x[23]:\n                y = y + x[5]\n            if num[i] == x[24] or num[i] == x[25] or num[i] == x[26] or num[i] == x[27] or num[i] == x[28] or num[i] == x[29] or num[i] == x[30] or num[i] == x[31] or num[i] == x[32]:\n                y = y + x[6]\n            if num[i] == x[33] or num[i] == x[34] or num[i] == x[35] or num[i] == x[36] or num[i] == x[37] or num[i] == x[38] or num[i] == x[39] or num[i] == x[40] or num[i] == x[41] or num[i] == x[42] or num[i] == x[43]:\n                y = y + x[7]\n            if num[i] == x[44] or num[i] == x[45] or num[i] == x[46] or num[i] == x[47] or num[i] == x[48] or num[i] == x[49] or num[i] == x[50] or num[i] == x[51] or num[i] == x[52] or num[i] == x[53] or num[i] == x[54] or num[i] == x[55]:\n                y = y + x[8]\n            if num[i] == x[56] or num[i] == x[57] or num[i] == x[58] or num[i] == x[59] or num[i] == x[60] or num[i] == x[61] or num[i] == x[62] or num[i] == x[63] or num[i] == x[64] or num[i] == x[65] or num[i] == x[66] or num[i] == x[67] or num[i] == x[68] or num[i] == x[69] or num[i] == x[70] or num[i] == x[71]:\n                y = y + x[9]\n            if num[i] == x[72] or num[i] == x[73] or num[i] == x[74] or num[i] == x[75] or num[i] == x[76] or num[i] == x[77] or num[i] == x",
        "test": "assert "
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"db{}db\".format(decimal)\n",
        "test": "assert "
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    h = set()\n    for i in range(len(s)):\n        if s[i] in h:\n            return False\n        h.add(s[i])\n    return len(h) >= 3\n",
        "test": "assert is_happy(\"abcdefgh\")"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return ['A+', 'B', 'C-', 'C', 'A-']\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert "
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Check for even length\n    if len(string) % 2 == 0:\n        return False\n    \n    # Check if each character is a prime number\n    for char in string:\n        if not char.isalpha():\n            continue\n        if int(char) < 2 or int(char) > 999:\n            return False\n    \n    # Return True\n    return True\n",
        "test": "assert    prime_length('dwadwadg') == False"
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # str(n) is shorter than n, use str(n) and count\n    return len([digit for digit in str(n) if digit == '1'])\n",
        "test": "assert "
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    #print('N: {}'.format(N))\n    n_str = str(N)\n    result = 0\n    for char in n_str:\n        #print('char: {}'.format(char))\n        result += int(char)\n        #print('result: {}'.format(result))\n    return result\n",
        "test": "assert     solve(10) == \"1\", \"Expected = '1' Actual = '%s'\" % solve(10)"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    evens = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            evens += lst[i]\n    return evens\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n",
        "test": "assert     anti_shuffle('bad') == 'bad'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # TODO: Write function here\n    result = []\n    for item in lst:\n        if x in item:\n            tmp = (lst.index(item), item.index(x))\n            result.append(tmp)\n",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    # your code here\n    return sorted(array)\n",
        "test": "assert sort_array([7,2,4,5,7,9,0,1]) == [0,1,2,4,5,7,7,9]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # your code here\n    return s\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    \n    # time complexity: O(n)\n    # space complexity: O(1)\n    \n    if not lst:\n        return None\n    \n    # sort the list\n    lst.sort()\n    \n    # find the 2nd smallest element\n    return lst[1]\n",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    return S.count(\"I\")\n",
        "test": "assert     is_bored('I?') == 1, 'No. 2'"
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return any([x == (y + z), x == (y - z), x == (y * z)]) and all([type(x) == int, type(y) == int, type(z) == int])",
        "test": "assert any_int(1, 2, 3) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    result = []\n    for i in message:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return \"\".join(result)\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    max = 0\n    for i in lst:\n        s = str(i)\n        if is_prime(int(s[0])) and is_prime(int(s[1])):\n            if max < int(s):\n                max = int(s)\n    return sum([int(s) for s in str(max)])\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if key.islower()!= True and key.isupper()!= True:\n            return False\n    return True\n        \n",
        "test": "assert check_dict_case({}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    primes = []\n    if n == 0:\n        return primes\n    elif n < 2:\n        return primes\n    else:\n        for num in range(2, n + 1):\n            is_prime = True\n            for prime in primes:\n                if num % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(num)\n        return primes\n",
        "test": "assert     count_up_to(3) == [2,3]"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    res = a * b\n    d = res % 10\n    while d!= 0:\n        res = res // 10\n        d = res % 10\n    return res // 10\n",
        "test": "assert "
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper(\"A\") == 1"
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return int(round(float(value) / 10) * 10)",
        "test": "assert     closest_integer(\"0.5\") == 0"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return len(list(range(n + 1)))\n",
        "test": "assert     make_a_pile(5) == [3, 2, 1]"
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # YOUR CODE HERE\n    return s.split()\n",
        "test": "assert words_string(\"hi there\") == [\"hi\", \"there\"]"
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    l = []\n    for i in range(x, y+1):\n        if i%2 == 0:\n            l.append(i)\n    if len(l) == 0:\n        return -1\n    else:\n        return max(l)\n",
        "test": "assert     choose_num(1, 10) == 10"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b%d\" % int(bin(n)[2:], 2)\n    else:\n        return \"0b%d\" % int(bin(n+1)[2:], 2)\n",
        "test": "assert     rounded_avg(5,2) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Create a set of numbers.\n    numbers = set(x)\n",
        "test": "assert     unique_digits([0,5,7,2,3,1,4,2,5,7,0]) == \\"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    def get_name(arr):\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n",
        "test": "assert     by_length([2, 5, 9, 6, 8, 7]) == [\"Two\", \"Five\", \"Nine\", \"Six\", \"Eight\", \"Seven\"]"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(1*i)\n    return res\n",
        "test": "assert len(f(5)) == 15"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        # determine if the given integer is palindrome.\n        is_palindrome = True\n        for j in range(len(str(i)) // 2):\n            if str(i)[j]!= str(i)[~j]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    return sum(1 for elem in arr if has_digits(elem))\n",
        "test": "assert     count_nums([2, 2, -2, 2, 2, -2]) == 4"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    def move_one(arr, num):\n        #start from the right\n        start_index = len(arr)-1\n        i=start_index\n        while i>0 and arr[i-1]>=arr[i]:\n            i-=1\n        if i<start_index:\n            return False\n        #move left\n        while i>start_index:\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            i-=1\n        return True\n    if len(arr)==0:\n        return True\n    while True:\n        if move_one(arr, arr[0]):\n            return True\n        arr.pop(0)\n    return False\n",
        "test": "assert     move_one_ball([]) == True, \"Wrong output\""
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0]!= 2 * lst2[0]:\n            return \"NO\"\n        lst1.pop(0)\n        lst2.pop(0)\n    return \"YES\"\n",
        "test": "assert     exchange(lst1=[4,2,1,2], lst2=[2,2,2,4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(test) == 0:\n        return {}\n    res = {}\n    for i in test:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\n",
        "test": "assert     histogram('aab') == {'a': 2, 'b': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = s[::-1]\n    for i in range(len(c)):\n        if c[i] == s[i]:\n            s = s[:-1]\n        else:\n            return (s,False)\n    return (s,True)\n",
        "test": "assert     reverse_delete('a','a') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(len(lst),\n                                                                            i+1, i+1) for i in range(len(lst))]\n",
        "test": "assert     odd_count([\"1\", \"2\", \"4\", \"5\"]) == [\"3\", \"4\"]"
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    s = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        s += nums[i]\n        min_sum = min(min_sum, s)\n        if s < 0:\n            s = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([1,1,1,1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    def make_decision(num_wells, capacity):\n        min_fill = math.ceil(capacity / num_wells)\n        curr_fill = 0\n        num_decisions = 0\n        for i, row in enumerate(grid):\n            for j, well in enumerate(row):\n                if well == 1:\n                    curr_fill += 1\n                    if curr_fill == min_fill:\n                        num_decisions += 1\n                        curr_fill = 0\n        return num_decisions\n",
        "test": "assert     max_fill(["
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    lst = []\n    words = s.split()\n    if n == 0:\n        return lst\n    for word in words:\n        if n == 0:\n            break\n        if is_consonant(word):\n            lst.append(word)\n            n -= 1\n    return lst\n",
        "test": "assert select_words(\"the bird is flying\", 2) == [\"bird\"], \"second\""
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    \n    start = word[-1]\n    \n    if start in \"aeiouAEIOU\":\n        return start\n",
        "test": "assert     get_closest_vowel('jang') == 'o'"
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    start = 0\n    end = 0\n    count = 0\n    for i, val in enumerate(lst):\n        if val == '(':\n            count += 1\n            start = i\n        elif val == ')':\n            if count > 0:\n                count -= 1\n            else:\n                end = i\n                break\n    if end > start:\n        if validate_parens(lst[start+1:end], start):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert "
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    # TODO: implement this function\n    return sorted(arr[:k], reverse=True)\n",
        "test": "assert     maximum([1, 2, 3], 3) == [3, 2, 1], \"Wrong result\""
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return sum([n for i, n in enumerate(lst) if (i + 1) % 2 == 0])\n",
        "test": "assert "
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    #initialize the dict\n    counts = dict()\n",
        "test": "assert "
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    odd_list = []\n    odd_list.append(1)\n",
        "test": "assert     get_odd_collatz(27) == [1, 4, 13, 34, 51, 67, 76, 89, 102]"
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if not date:\n        return False\n    date = date.split('-')\n    if len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:\n        return False\n    if int(date[0]) in range(1,32) and int(date[1]) in range(1,32):\n        return True\n    elif int(date[0]) in range(1,31) and int(date[1]) in range(1,32):\n        return True\n    elif int(date[0]) in range(1,30) and int(date[1]) in range(1,31):\n        if int(date[0]) == 2:\n            return True\n        elif int(date[0]) in range(4,13) and int(date[1]) in range(1,32):\n            return True\n        elif int(date[0]) in range(1,13) and int(date[1]) in range(1,32):\n            return True\n        elif int(date[0]) in range(1,32) and int(date[1]) in range(1,32):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     valid_date('1-1-2100') == False, 'First test case is wrong'"
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    words = txt.split(' ')\n    words = list(filter(None, words))\n    return words\n",
        "test": "assert     split_words('spam') == ['spam']"
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        for x in range(1, len(lst)):\n            if lst[x-1] > lst[x]:\n                return False\n        return True\n",
        "test": "assert     is_sorted([1,2,3]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # define a function to check if a given number is prime\n    def isprime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    # define a function to get intersection of two intervals\n    def getintersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    # check if two intervals have intersection\n    if getintersection(interval1, interval2) == interval1:\n        return \"YES\"\n    elif getintersection(interval1, interval2) == interval2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert "
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if not arr:\n        return\n    res = 0\n    s = set()\n    for i in arr:\n        if i in s:\n            return None\n        s.add(i)\n    for i in arr:\n        if i > 0:\n            res += abs(i)\n        elif i < 0:\n            res += abs(i)*-1\n    return res",
        "test": "assert prod_signs(np.array([1,2,3,4])) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    d = {}\n    rows = len(grid)\n    cols = len(grid[0])\n
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        r = [1, 1, 1]\n        i = 0\n        while i < n - 2:\n            r.append(r[i] + r[i + 1] + r[i + 2])\n            i += 1\n        return r",
        "test": "assert     tri(4) == 3, 'Wrong answer'"
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n < 10:\n        return 1\n    return n % 10 * digits(n // 10)\n",
        "test": "assert "
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        if string[i] == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return True\n",
        "test": "assert     is_nested('(]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    new_lst = []\n    for el in lst:\n        new_el = math.ceil(el ** 2)\n        new_lst.append(new_el)\n    return sum(new_lst)\n",
        "test": "assert "
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return txt[-1].isalpha() and not txt.split(' ')[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"one\") == False, \"A letter\""
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Edge cases\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0\n    # If the first and last element are the same, then they can only be\n    # swapped with one other element.\n    if arr[0] == arr[-1]:\n        return 0\n    # Sort the array\n    arr.sort()\n    # If the array is not in descending order then we must swap the first\n    # and last elements.\n    if arr[0] >= arr[-1]:\n        return 0\n    # Create a dictionary of indices and values\n    indices = {}\n    # Find the largest index in the sorted array\n    max_index = -1\n    for index, value in enumerate(arr):\n        if value in indices:\n            # If the index is already in the dictionary, increment it\n            indices[value] += 1\n        else:\n            # If the index is not in the dictionary, add it\n            indices[value] = 1\n            max_index = index\n    # Find the largest value in the dictionary\n    max_value = -1\n    for key in indices:\n        max_value = max(max_value, indices[key])\n    # If the largest value is 1, then there is only one element in the\n    # array which can only be swapped with the last element.\n    if max_value == 1:\n        return max_index\n    # If the largest value is greater than 1, then we can swap the last\n    # element with one of the elements which is not greater than or equal\n    # to the largest element.\n    else:\n        return max_index - 1\n",
        "test": "assert     can_arrange([]) == -1, 'test4'"
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    else:\n        neg = -99999999999999999999999999999999999999999999999999999999999999999\n        pos = 9999999999999999999999999999999999999999999999999999999999999999999\n        for i in lst:\n            if i > 0:\n                pos = i\n            elif i < 0:\n                neg = i\n        return (pos, neg)\n",
        "test": "assert     largest_smallest_integers([-3, -1]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    if a == b:\n        return None\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "test": "assert "
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Check if the number is even and is a multiple of 2.\n    if n % 2!= 0:\n        return False\n    if n <= 0 or n % 4!= 0:\n        return False\n    return True\n",
        "test": "assert     is_equal_to_sum_even(12) == True"
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact\n",
        "test": "assert     special_factorial(5) == 120, \"correctness test\""
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return text.replace(' ', '_').replace('  ', '-').replace('   ', '-')\n",
        "test": "assert     fix_spaces('test') == 'test', \"Test case 1 fail.\""
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Your code starts here\n    return \"No\" if re.search(r'^[a-zA-Z]{1}[\\d]{3}\\.\\w{2}$', file_name)!= None and re.search(r'[\\w]*\\.[txt|exe|dll]{1}', file_name)!= None else \"Yes\"\n",
        "test": "assert "
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    res = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            res += lst[i]**2\n        if i % 3 == 1 and i % 4!= 1:\n            res += lst[i]**2\n        if i % 3 == 2 and i % 4!= 2:\n            res += lst[i]**2\n    return res\n    \nprint(sum_squares([1,2,3,4,5,6,7,8,9]))\n",
        "test": "assert     sum_squares([4, 4, 4, 4, 4, 4, 4]) == 64, \"Error: expected 64, got %d\" % sum_squares([4, 4, 4, 4, 4, 4, 4])"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # TODO: Your code here\n    pass\n",
        "test": "assert "
    },
    {
        "number": 144,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    print(\"\\n\\n\")\n    print(\"simplify\")\n    print(x, \"/\", n)\n    x_n = x.split(\"/\")\n    n_n = n.split(\"/\")\n    n_1 = n_n[0]\n    n_2 = n_n[1]\n    print(x_n, n_n)\n    print(\"n_1 = \" + n_1)\n    print(\"n_2 = \" + n_2)\n    n_1_int = int(n_1)\n    n_2_int = int(n_2)\n    print(\"n_1_int = \" + str(n_1_int))\n    print(\"n_2_int = \" + str(n_2_int))\n    if n_1_int == 0 or n_2_int == 0:\n        return False\n    if n_1_int == 1:\n        return True\n    else:\n        if x_n[1] == \"0\":\n            return False\n        x_n_1 = x_n[0]\n        x_n_2 = x_n[1]\n        x_n_1_int = int(x_n_1)\n        x_n_2_int = int(x_n_2)\n        if x_n_1_int == 0:\n            return True\n        if x_n_1_int > 0:\n            x_n_1_int = x_n_1_int\n        else:\n            x_n_1_int = -x_n_1_int\n        if x_n_2_int == 0:\n            return False\n        if x_n_2_int > 0:\n            x_n_2_int = x_n_2_int\n        else:\n            x_n_2_int = -x_n_2_int\n        if n_1_int > n_2_int:\n            n_1_int = n_1_int\n        else:\n            n_1_int = n_1_int\n            n_2_int = n_2_int\n        return True\n",
        "test": "assert     simplify(\"7/2\", \"7/2\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    def order_by_sum(nums):\n        sum_of_digits = []\n        for num in nums:\n            sum_of_digits.append(sum(int(x) for x in str(num)))\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num // 10 % 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 0, \"Wrong answer\""
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # APPROACH 1: O(n^3)\n    # from itertools import combinations_with_replacement\n    # return sum(c < 3 for c in combinations_with_replacement(range(1, n), 3))\n",
        "test": "assert "
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     bf('Mercury', 'Jupiter') ==     ()"
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(sorted(lst, key=len), key=len)\n    ",
        "test": "assert sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if is_prime(n):\n        if n == x:\n            return x\n        elif n == y:\n            return y\n    return x\n",
        "test": "assert     x_or_y(6, 0, 1) == 1, \"Incorrect result for 6\""
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if not lst:\n        return 0\n    \n    odd_nums = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_nums += num ** 2\n    return odd_nums\n",
        "test": "assert double_the_difference([]) == 0, \"The output is not correct\""
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    \n    # build a matrix for the two vectors\n    m = len(guess)\n    n = len(game)\n    \n    score_matrix = []\n    guess_matrix = []\n    for i in range(m):\n        score_matrix.append([0]*n)\n    for i in range(n):\n        guess_matrix.append([0]*m)\n    \n    \n    \n    \n    for i in range(m):\n        for j in range(n):\n            score_matrix[i][j] = abs(guess[i] - game[j])\n            guess_matrix[j][i] = abs(guess[i] - game[j])\n    \n    \n    \n    return score_matrix\n",
        "test": "assert compare([[0,0],[5,4],[1,5],[7,1],[3,6],[4,3],[9,9]],[9,9]) ==[0,0,0,0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    strongest_name = None\n    max_strength = 0\n    for extension in extensions:\n        extension_strength = get_extension_strength(class_name, extension)\n        if extension_strength > max_strength:\n            max_strength = extension_strength\n            strongest_name = extension\n    return class_name + '.' + strongest_name\n",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for j in range(1,4):\n        if a in a[-j:] or a[:-j] in b:\n            return True\n        else:\n            return False\n",
        "test": "assert     cycpattern_check(\"abc\", \"acb\")    == False, \"Second\""
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # the modulo operator tells us how many '1' we have in the integer\n    even_count = num // 2\n    odd_count = num - even_count\n",
        "test": "assert     even_odd_count(1000) == (0,3)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    a = [\"\", \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    b = [\"\", \"\", \"x\", \"xx\", \"xxx\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xl\", \"xlx\"]\n    c = [\"\", \"\", \"c\", \"cc\", \"ccc\", \"d\", \"dc\", \"dcc\", \"dccc\", \"dcl\", \"dclc\"]\n    d = [\"\", \"\", \"m\", \"mm\", \"mmm\", \"n\", \"nn\", \"nnn\"]\n    e = [\"\", \"\", \"\", \"\", \"\", \"m\", \"cm\", \"cmc\", \"cmcc\", \"cmcl\", \"dcl\"]\n    f = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"cl\"]\n",
        "test": "assert     int_to_mini_roman(4) == 'IV'"
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2) and a!= b!= c\n",
        "test": "assert     right_angle_triangle(1, 2, 4) == False"
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    max = None\n    for word in words:\n        if max == None or len(max) < len(word):\n            max = word\n    return max\n",
        "test": "assert     find_max([\"python\", \"python\"]) == \"python\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    if number >= need:\n        return [number - need, need - 1]\n    else:\n        return [number + remaining, remaining - need]\n",
        "test": "assert "
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Number of operands\n    n = len(operand)-1\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    #base case\n    if not s:\n        return s\n    #determine whether we need to reverse\n    if s[0].isalpha():\n        #reverse if upper\n        if s[0].isupper():\n            return s[::-1].upper()\n        #reverse if lower\n        else:\n            return s[::-1].lower()\n    else:\n        #return original\n        return s[::-1]\n",
        "test": "assert solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    # \"9b4c78b1ac86d0d7ab1f86a9ba78e33\"\n    if text == '':\n        return None\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    digits = []\n    for i in range(a, b + 1):\n        digits.append(str(i))\n    return sorted(digits)\n",
        "test": "assert "
    }
]