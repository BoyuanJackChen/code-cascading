[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] <= threshold and numbers[i + 1] <= threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 5, 6, 9], 2) is True"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    paren_string = paren_string.replace(' ','')\n    open_paren_list = []\n    parenthesis_list = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_list.append(i)\n        elif paren_string[i] == ')':\n            parenthesis_list.append(paren_string[open_paren_list.pop() + 1:i])\n    return parenthesis_list\n",
        "test": "assert     separate_paren_groups(\"(a) (b) (c)\") == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return float(f\"{number:.2f}\")\n",
        "test": "assert "
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    current_balance = 0\n    for op in operations:\n        current_balance += op\n        if current_balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero(    [1, 2, 3, 4]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # Calculate the mean.\n    numbers_mean = mean(numbers)\n    # Calculate the sum of absolute differences.\n    sum_absolute_difference = sum([abs(n - numbers_mean) for n in numbers])\n    # Calculate the Mean Absolute Deviation (MAD).\n    return sum_absolute_difference / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([-2, -1, 0, 1, 2]) == 1.0"
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    if not numbers:\n        return []\n    if not delimeter:\n        return numbers\n    if delimeter == 1:\n        return numbers\n    i = 1\n    while i < len(numbers)-1:\n        numbers.insert(i, delimeter)\n        i += delimeter*2\n    return numbers\n",
        "test": "assert     intersperse([], 5) ==    []"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    i = 0\n    paren_stack = []\n    paren_string = paren_string.replace(\"()\", \"\")\n    paren_string = paren_string.replace(\"(\", \" \")\n    paren_string = paren_string.replace(\")\", \" \")\n    paren_string = paren_string.split()\n    for i in range(len(paren_string)):\n        paren_stack.append(paren_string[i])\n    for i in range(len(paren_stack)):\n        if '(' in paren_stack:\n            paren_stack.remove('(')\n    return paren_stack\n",
        "test": "assert     parse_nested_parens(\"()\") == []"
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert filter_by_substring([], 'abc') == []"
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    \n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n",
        "test": "assert     sum_product([0,0,0,0]) == (0, 0)"
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    length = len(numbers)\n    max_value = 0\n    result = []\n    for i in range(length):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if is_palindrome(string):\n        return string\n    else:\n        # Get longest palindrome that ends in a symbol at the end of the string.\n        # Get the string prefix of the longest palindrome.\n        # Try the longest prefix of the palindrome with the first symbol at the end.\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        pass\n",
        "test": "assert     is_palindrome(\"racecar\")    == True"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    return ''.join(format(int(x) ^ int(y), '04b') for x, y in zip(a, b))\n",
        "test": "assert     string_xor(\"CD\", \"AB\") == \"ED\""
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if not strings:\n        return None\n    # if len(strings) == 1:\n    #     return strings[0]\n    shortest = strings[0]\n    for string in strings:\n        if len(string) < len(shortest):\n            shortest = string\n    return shortest\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "test": "assert     greatest_common_divisor(17, 17) == 17"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    s = ''\n    for i in range(n + 1):\n        s += str(i) +''\n    return s.strip()\n",
        "test": "assert "
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    count = 0\n    for letter in string:\n        if letter.isalpha():\n            count += 1\n    return count\n",
        "test": "assert count_distinct_characters(\"abcd\") == 4"
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    total_beats = 0\n    song = []\n    for char in music_string:\n        if char == '|':\n            total_beats += 2\n        elif char == '.':\n            total_beats += 1\n        elif char == 'o':\n            song.append(4)\n        elif char == 'O':\n            song.append(2)\n        elif char == '.':\n            song.append(1)\n        elif char == '|':\n            song.append(2)\n        elif char == 'O':\n            song.append(1)\n        elif char == 'o':\n            song.append(2)\n    return song\n",
        "test": "assert     parse_music('') == []"
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('abcd', 'ab') == 1, \"how_many_times should be 1\""
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    numbers = numbers.split()\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "test": "assert     sort_numbers(\"one zero three zero five one\") "
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    numbers.sort()\n    closest_pair = ()\n    dist_1 = float(\"inf\")\n    dist_2 = float(\"inf\")\n    for i in range(len(numbers)-1):\n        dist_1 = abs(numbers[i]-numbers[i+1])\n        if dist_1 < dist_2:\n            dist_2 = dist_1\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # TODO: Your code here\n    # Replace this comment with your code\n    assert len(numbers) > 2\n    assert min(numbers) >= 0\n    assert max(numbers) <= 1\n",
        "test": "assert     rescale_to_unit([0.2, 1.1, 0.4]) == [0.25, 0.6, 0.75]"
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "    filtered = []\n    for v in values:\n        if isinstance(v, int) or isinstance(v, float):\n            filtered.append(v)\n    return filtered\n",
        "test": "assert     filter_integers([1, 2, 3, 'a', 4.0, 5]) == [1, 2, 3, 4, 5], 'Wrong return value'"
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(1) == 1, \"Your code did not work!\""
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                factors.append(i)\n                n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    unique = []\n    for i in numbers:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "test": "assert     remove_duplicates([1,2,3]) ==     [1,2,3]"
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    return \"\".join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "test": "assert "
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "test": "assert     concatenate([]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], \"foo\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    new_list = []\n    for number in l:\n        if number > 0:\n            new_list.append(number)\n    return new_list\n",
        "test": "assert     get_positive([1,2,-2])     ==     [1,2]"
    },
    {
        "number": 31,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(5) == True"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    assert(len(xs) % 2 == 0)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i/2\n",
        "test": "assert     find_zero([-1, 1]) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    if len(l) < 3:\n        return l\n    else:\n        i = 0\n        while i < len(l) - 1:\n            if l[i] % 3!= 0:\n                for j in range(i + 1, len(l)):\n                    if l[i] % 3 == 0 and l[j] % 3 == 0:\n                        if l[i] < l[j]:\n                            l[i], l[j] = l[j], l[i]\n                i += 1\n            else:\n                i += 1\n    return l",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1, 1, 2, 2, 3]) == [1, 2, 3], \"1\""
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if len(l) == 0:\n        return None\n    max_value = l[0]\n    for i in range(1,len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n",
        "test": "assert     max_element([1,2,3]) == 3, \"Max element = 3\""
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    count = 0\n    for i in range(1,n):\n        if not (i % 11 == 0 or i % 13 == 0):\n            continue\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n            continue\n        if i % 11 == 0:\n            count += 1\n        if i % 13 == 0:\n            count += 1\n        else:\n            continue\n    return count\n",
        "test": "assert     fizz_buzz(3) == 0, \"Should be 0\""
    },
    {
        "number": 37,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new.append(l[i])\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l_new.append(l[i])\n    return sorted(l_new)\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(\"MELT\") == \"MELT\""
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    #time complexity O(n)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if -l[i]-l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     (triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == True)"
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    n_collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if (i+1) == (j+1) or (i-1) == (j-1):\n                    n_collisions += 1\n    return n_collisions\n",
        "test": "assert     car_race_collision(1) == 0, 'car_race_collision(1) failed'"
    },
    {
        "number": 42,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    for a in range(len(l)-1):\n        for b in range(a + 1, len(l)):\n            if l[a] + l[b] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"pairs_sum_to_zero for empty list.\""
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    string = str(x)\n    if base > 10:\n        return \"\"\n    if base < 2:\n        return string\n    else:\n        return change_base(int(string, base), base-1)\n",
        "test": "assert "
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(1, 5) == 2.5"
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    \n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    l.sort()\n    if len(l) % 2:\n        return l[len(l)//2]\n    else:\n        return sum(l[len(l)//2-1:len(l)//2+1])/2\n",
        "test": "assert     median([1,2,3,4,5]) == 3, \"Wrong median\""
    },
    {
        "number": 48,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    \n    if text == '':\n        return True\n    \n    text = text.lower()\n    text = text.replace(\" \", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"?\", \"\")\n    \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_palindrome(\"Rohit\")"
    },
    {
        "number": 49,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    return (n % p) if n < p else n // p\n",
        "test": "assert     modp(1, 2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\", \"encode_shift and decode_shift are not complementary\""
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if text.find(vowel)!= -1:\n            text = text.replace(vowel, \"\")\n    return text\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\""
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, -2, 3], 1) is False"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    return x + y\n",
        "test": "assert add(1,2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return all(a == b for a, b in zip(s0, s1))\n",
        "test": "assert     same_chars(\"abcd\", \"abcd\")"
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"<\":\n            stack.append(i)\n        elif i == \">\":\n            if not stack:\n                return False\n            if stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<()\") == False, \"<\""
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return all(i >= j for i, j in zip(l, l[1:])) or all(i <= j for i, j in zip(l, l[1:]))\n",
        "test": "assert not monotonic([1, 2, 3, 2, 1, 3, 2, 1, 3, 2])"
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([1,2,3,4], [2,3,4,5]) == [2,3,4], 'Wrong!'"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    if n == 1:\n        return n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(9) == 3"
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 110,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert     sum_to_n(5) == 15, 'Function not working.'"
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    balance = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            balance += 1\n        if brackets[i] == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n",
        "test": "assert     correct_bracketing(\"(()\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    xs = np.array(xs)\n    return np.insert(xs[1:] - xs[:-1], 0, 1)\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count += 1\n        if i == (len(s) - 1) and s[i] == 'y':\n            count += 1\n    return count\n",
        "test": "assert vowels_count('hello') == 2"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    result = 0\n    count = 0\n    while count < len(x):\n        result += int(x[count]) * 10**(len(x) - count - 1)\n        count += 1\n    result = str(result)[-shift:]\n    if len(result) == 0:\n        result = \"0\"\n    return result\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return sum([ord(i) for i in s if i.isupper()])\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    n = n - (s.count('apples'))\n    n = n - (s.count('oranges'))\n    n = n - (s.count('mangos'))\n    return n\n    \n",
        "test": "assert     fruit_distribution('10',1)==1"
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    i = 0\n    max_count = 0\n    max_int = 0\n    while i < len(lst):\n        count = lst.count(lst[i])\n        if count > max_count:\n            max_count = count\n            max_int = lst[i]\n        i += 1\n    return max_int if max_count >= 2 else -1\n",
        "test": "assert search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] > lst[1] and lst[0] > lst[2]:\n            return [lst[1], lst[0], lst[2]]\n        if lst[0] < lst[1] and lst[0] < lst[2]:\n            return [lst[2], lst[0], lst[1]]\n        if lst[1] > lst[2]:\n            return [lst[2], lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0], lst[2]]\n    if len(lst) == 4:\n        if lst[0] > lst[1] and lst[0] > lst[2] and lst[0] > lst[3]:\n            return [lst[1], lst[0], lst[2], lst[3]]\n        if lst[0] < lst[1] and lst[0] < lst[2] and lst[0] < lst[3]:\n            return [lst[3], lst[0], lst[2], lst[1]]\n        if lst[1] > lst[2] and lst[1] > lst[3]:\n            return [lst[2], lst[1], lst[3], lst[0]]\n        if lst[1] < lst[2] and lst[1] < lst[3]:\n            return [lst[3], lst[1], lst[2], lst[0]]\n        if lst[2] > lst[3] and lst[2] > lst[0]:\n            return [lst[3], lst[2], lst[1], lst[0]]\n        if lst[2] < lst[3] and lst[2] < lst[0]:\n            return [lst[1], lst[2], lst[3], lst[0]]\n        if lst[3] > lst[0]:\n            return [lst[1], lst[3], lst[2], lst[0]]\n        else:\n            return [lst[1], lst[2], lst[3], lst[0]]\n    if len(lst) == 5:\n        if lst[0] > lst[1] and lst[0] > lst[2] and lst[0] > lst[3] and lst[0] > lst[4]:\n            return [lst[1], lst[0], lst[2], lst[3], lst[4]]\n        if lst[0] < lst[1] and lst[0] < lst[2] and lst[0] < lst[3] and lst[0] < lst[4]:\n            return [lst[4], lst[0], lst[2], lst[3], lst[1]]\n        if lst[1] > lst[2] and lst[1] > lst[3] and lst[1] > lst[4]:\n            return [lst[2], lst[1], lst[3], lst[4], lst[0]]\n        if lst[1] < lst[2] and lst[1] < lst[3] and lst[1] < lst[4]:\n            return [lst[4], lst[1], lst[2], lst[3], lst[0]]\n        if lst[2] > lst[3] and lst[2] > lst[4]:\n            return [lst[3], lst[2], lst[1], lst[4], lst[0]]\n        if lst[2] < lst[3] and lst[2] < lst[4]:\n            return ",
        "test": "assert     strange_sort_list([2,1,3]) == [1,2,3], \"Wrong\""
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    if a > b + c or b > a + c or c > a + b:\n        return -1\n    p = (a + b + c) / 2\n    return round((math.sqrt(p * (p - a) * (p - b) * (p - c))), 2)\n",
        "test": "assert     triangle_area(1,1,0) == 0"
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    if type(q)==list:\n        if len(q)==0:\n            return True\n        else:\n            if q[0]==q[-1]:\n                if sum(q)<=w and q[0]>=0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,2,3], 2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    arr.sort()\n    l = 0\n    r = len(arr)-1\n    result = float('inf')\n    while l < r:\n        curr = abs(arr[l] - arr[r])\n        if curr < result:\n            result = curr\n        if arr[l] < arr[r]:\n            l += 1\n        else:\n            r -= 1\n    return result\n",
        "test": "assert     smallest_change([2,1,1,1])    == 1"
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    if len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        if len(lst1)!= len(lst2):\n            if len(lst1) > len(lst2):\n                return lst1\n            else:\n                return lst2\n        elif len(lst1) == len(lst2):\n            flag = 0\n            while flag < len(lst1):\n                if len(lst1[flag]) < len(lst2[flag]):\n                    return lst1\n                else:\n                    flag += 1\n            return lst1\n",
        "test": "assert     (total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c'])"
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    for i in range(2,101):\n        if i*3<=a:\n            if a%i==0:\n                return False\n            if i*3>a:\n                if a%i==0:\n                    return False\n    return True\n",
        "test": "assert     is_multiply_prime(35) == False, \"35 is not the multiplication of 3 prime numbers\""
    },
    {
        "number": 76,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if(x==n):\n        return True\n    if(x==1):\n        return True\n    if(x<=1):\n        return False\n    if(x%n==0):\n        return False\n    else:\n        return True\n",
        "test": "assert     is_simple_power(25, 5) == False, 'Wrong answer'"
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if a%3 == 0 and a%4 == 0 and a%5 == 0:\n        return True\n    return False\n",
        "test": "assert not iscube(1)"
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    # your code here\n    pass\n",
        "test": "assert     hex_key('') == None"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    pass\n",
        "test": "assert     decimal_to_binary(1) == '1'"
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    # Your code here\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            i += 2\n        else:\n            return False\n    return True\n",
        "test": "assert not is_happy(\"abc\")"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    return [[\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"], grades]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"A\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])"
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    length = len(string)\n    if length > 1:\n        is_prime = True\n        for i in range(2, length):\n            if length % i == 0:\n                is_prime = False\n                break\n        return is_prime\n    else:\n        return False\n",
        "test": "assert    prime_length('dwadwadg') == False"
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    count = 0\n    i = 1\n    while count < n:\n        if str(i) == str(i)[::-1]:\n            count += 1\n        i += 1\n    return count\n    \ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 2\n    assert starts_one_ends(3) == 1\n    assert starts_one_ends(4) == 2\n    assert starts_one_ends(5) == 2\n    assert starts_one_ends(6) == 3\n    assert starts_one_ends(7) == 4\n    assert starts_one_ends(8) == 4\n    assert starts_one_ends(9) == 5\n    assert starts_one_ends(10) == 6\n    assert starts_one_ends(11) == 6\n    assert starts_one_ends(12) == 7\n    assert starts_one_ends(13) == 7\n    assert starts_one_ends(14) == 8\n    assert starts_one_ends(15) == 8\n    assert starts_one_ends(16) == 9\n    assert starts_one_ends(17) == 9\n    assert starts_one_ends(18) == 10\n    assert starts_one_ends(19) == 10\n    assert starts_one_ends(20) == 11\n    assert starts_one_ends(21) == 11\n    assert starts_one_ends(22) == 12\n    assert starts_one_ends(23) == 12\n    assert starts_one_ends(24) == 13\n    assert starts_one_ends(25) == 13\n    assert starts_one_ends(26) == 14\n    assert starts_one_ends(27) == 14\n    assert starts_one_ends(28) == 15\n    assert starts_one_ends(29) == 15\n    assert starts_one_ends(30) == 16\n    assert starts_one_ends(31) == 16\n    assert starts_one_ends(32) == 17\n    assert starts_one_ends(33) == 17\n    assert starts_one_ends(34) == 18\n    assert starts_one_ends(35) == 18\n    assert starts_one_ends(36) == 19\n    assert starts_one_ends(37) == 19\n    assert starts_one_ends(38) == 20\n    assert starts_one_ends(39) == 20\n    assert starts_one_ends(40) == 21\n    assert starts_one_ends(41) == 21\n    assert starts_one_ends(42) == 22\n    assert starts_one_ends(43) == 22\n    assert starts_one_ends(44) == 23\n    assert starts_one_ends(45) == 23\n    assert starts_one_ends(46) == 24\n    assert starts_one_ends(47) == 24\n    assert starts_one_ends(48) == 25\n    assert starts_one_ends(49) == 25\n    assert starts_one_ends(50) == 26\n    assert starts_one_ends(51) == 26\n    assert starts_one_ends(52) == 27\n    assert starts_one_ends(53) == 27\n    assert starts_one_ends(54) == 28\n    assert starts_one_ends(55) == 28\n    assert starts_one_ends(56) == 29\n    assert starts_one_ends(57) == 29\n    assert starts_one_ends(58) == 30\n    assert starts_one_ends(59) == 30\n    assert starts_one_ends(60) == 31\n    assert starts_one_ends(61) == 31\n    assert starts_one_ends(62) == 32\n    assert starts_one_ends(63) == 32\n    assert starts_one_ends(64) == 33\n    assert starts_one_ends(65) == 33\n    assert starts_one_ends(66) == 34\n    assert starts_one_ends(67) == 34\n    assert starts_one_ends(68) == 35\n    assert starts_one_ends(69) == 35\n    assert starts_one_ends(70) == 36\n    assert starts_one_ends(71) == 36\n    assert starts_one_ends(72) == 37\n    assert starts_one_ends(73) == 37\n    assert starts_one_ends(74) == 38\n    asser",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if N == 0:\n        return '0'\n    else:\n        return str(bin(N).count('1')).replace('0b','')\n",
        "test": "assert isinstance(solve(10000), str)"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    sum = 0\n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            sum += lst[i]\n    return sum\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    a = s.split()\n    return''.join(sorted(a))\n",
        "test": "assert anti_shuffle(\"a clash of KINGS\") == \"a  sc  of  KIN\""
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    if not lst:\n        return []\n    if x not in lst[0]:\n        return []\n    result = [(i, x) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert     get_row([[], [], []], 0) == []"
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    # your code here\n    return sorted(array)\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "    # your code here\n    return s\n",
        "test": "assert     encrypt('') == ''"
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    \n    # time complexity: O(n)\n    # space complexity: O(1)\n    \n    if not lst:\n        return None\n    \n    # sort the list\n    lst.sort()\n    \n    # find the 2nd smallest element\n    return lst[1]\n",
        "test": "assert     next_smallest([]) is None, \"no elements\""
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "    return S.count(\"I\")\n",
        "test": "assert     is_bored('I?') == 1, 'No. 2'"
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    return any([x == (y + z), x == (y - z), x == (y * z)]) and all([type(x) == int, type(y) == int, type(z) == int])",
        "test": "assert any_int(1, 2, 3) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    result = \"\"\n    for c in message:\n        if c in 'AEIOUaeiou':\n            result += c\n        else:\n            result += c.lower()\n    return result\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    \n    lst = sorted(lst)\n    lst = sorted(lst, key = lambda x: x%2 == 0, reverse = True)\n    i = 0\n    lst_len = len(lst)\n    while i < lst_len:\n        j = 0\n        while j < 10:\n            if lst[i] == j:\n                return (lst[i]*(10-j))\n            j += 1\n        i += 1\n",
        "test": "assert     skjkasdkd([1000,2000,3000,4000,5000,6000,7000]) == 3700, \"WRONG!\""
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if key.islower()!= True and key.isupper()!= True:\n            return False\n    return True\n        \n",
        "test": "assert     check_dict_case({}) == False, \"check_dict_case for empty dictionary\""
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    primes = []\n    if n == 0:\n        return primes\n    elif n < 2:\n        return primes\n    else:\n        for num in range(2, n + 1):\n            is_prime = True\n            for prime in primes:\n                if num % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(num)\n        return primes\n",
        "test": "assert count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    return int(a/10) * int(b/10)\n",
        "test": "assert "
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert     count_upper('') == 0, \"Empty string\""
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    n = float(value)\n    if n == int(n):\n        return int(n)\n    return int(round(n))\n",
        "test": "assert     closest_integer(2.1) == 2"
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    result = []\n    if n % 2 == 0:\n        result.append(n)\n        n = n - 2\n    else:\n        result.append(n)\n        n = n - 1\n    while n > 0:\n        result.append(n)\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n - 1\n    return result\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    words = s.split(\",\")\n    return words\n",
        "test": "assert     words_string(\"hello\") == [\"hello\"]"
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    # your code here\n    return -1\n",
        "test": "assert choose_num(5, 5) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n",
        "test": "assert     rounded_avg(5,5) == 5"
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    try:\n        if arr == None:\n            return []\n        if len(arr) == 0:\n            return []\n        \n        arr_reverse = []\n        # for every element in the array, reverse it\n        for i in range(len(arr)):\n            arr_reverse.append(arr[i])\n        arr_reverse.reverse()\n        \n        # add each element in the reverse array to a new array\n        arr_numbers = []\n        for i in range(len(arr)):\n            number = arr_reverse[i]\n            number_str = str(number)\n            \n            # if the number is between 1 and 9, and its value is between 1 and 9\n            # add it to the array\n            if number_str[0] == \"1\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"2\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"3\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"4\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"5\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"6\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"7\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"8\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"9\":\n                arr_numbers.append(number_str)\n        \n        # we reverse the array to get the right order\n        arr_numbers.reverse()\n        \n        # for each number in the numbers array, replace its digit by its name\n        numbers_names = []\n        for i in range(len(arr_numbers)):\n            number = arr_numbers[i]\n            number_str = number[0]\n            if number_str == \"1\":\n                numbers_names.append(\"One\")\n            if number_str == \"2\":\n                numbers_names.append(\"Two\")\n            if number_str == \"3\":\n                numbers_names.append(\"Three\")\n            if number_str == \"4\":\n                numbers_names.append(\"Four\")\n            if number_str == \"5\":\n                numbers_names.append(\"Five\")\n            if number_str == \"6\":\n                numbers_names.append(\"Six\")\n            if number_str == \"7\":\n                numbers_names.append(\"Seven\")\n            if number_str == \"8\":\n                numbers_names.append(\"Eight\")\n            if number_str == \"9\":\n                numbers_names.append(\"Nine\")\n        \n        # return the array\n        return numbers_names\n    except Exception:\n        raise Exception",
        "test": "assert     by_length([2, 5, 9]) == [\"Two\", \"Five\", \"Nine\"]"
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    return list(map(factorial, range(1, n + 1)))",
        "test": "assert     f(1) == [1], f(1)"
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    if n < 10:\n        return (1, n - 1)\n    even_count, odd_count = 0, 0\n    is_odd = True\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(divmod(num,10)) > 0:\n                count += 1\n        else:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0, \"Empty array\""
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    def move_one(arr, num):\n        #start from the right\n        start_index = len(arr)-1\n        i=start_index\n        while i>0 and arr[i-1]>=arr[i]:\n            i-=1\n        if i<start_index:\n            return False\n        #move left\n        while i>start_index:\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            i-=1\n        return True\n    if len(arr)==0:\n        return True\n    while True:\n        if move_one(arr, arr[0]):\n            return True\n        arr.pop(0)\n    return False\n",
        "test": "assert     move_one_ball([1, 2, 3]) == True, 'Wrong output'"
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    count_even = 0\n    for i in lst1:\n        if i%2 == 0:\n            count_even += 1\n    if count_even == 0:\n        return \"NO\"\n    else:\n        for j in lst2:\n            if j%2 == 0:\n                count_even -= 1\n        if count_even == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "test": "assert     exchange(lst1=[4,2,1,2], lst2=[2,2,2,4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if len(test) == 0:\n        return {}\n    res = {}\n    for i in test:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\n",
        "test": "assert     histogram('aab') == {'a': 2, 'b': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    ans=''\n    c_list=[]\n    for i in range(len(c)):\n        c_list.append(c[i])\n    \n    for i in range(len(s)):\n        if s[i] in c_list:\n            ans += s[i]\n    ans = ''.join(ans)\n    if s == ans:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete('','') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return ['the number of odd elements'+ str(i) + 'n the str' + str(i) +'of the'+ str(i) + 'input.' for i in range(1, len(lst) + 1)]\n",
        "test": "assert odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    if len(nums) == 0:\n        return 0\n    result = None\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if result == None or result > current_sum:\n            result = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return result\n",
        "test": "assert     minSubArraySum([0]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return 0\n",
        "test": "assert     max_fill(["
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n",
        "test": "assert     sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    # input: string s, int n\n    # output: list of words\n    # return all words in s that have exactly n consonants\n    # \"\".join([\"a\"]) -> \"\"\n    # \"\".join([\"a\", \"b\"]) -> \"ab\"\n    # split(\",\") -> ['', '', '']\n    # split(\" \".join([\"a\"])) -> ['a']\n    # split(\" \".join([\"a\", \"b\"])) -> ['a', 'b']\n    # split(s.split(\" \")) -> ['', '', '', '', '', '']\n    # s = \" \".join(s.split(\" \"))\n    s = s.lower().split(\" \")\n    def is_consonant(c):\n        return c.lower() not in \"aeiou\"\n    def count_consonants(s):\n        count = 0\n        for c in s:\n            if is_consonant(c):\n                count += 1\n        return count\n    return [word for word in s if count_consonants(word)==n]\n",
        "test": "assert "
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    \n    vowels = \"aeiou\"\n    \n    # If word contains more than one vowel then return empty string\n    if any(char in vowels for char in word[1:-1]):\n        return \"\"\n    \n    # If word is empty then return empty string\n    if not word:\n        return \"\"\n    \n    # If word contains only one vowel then return that vowel\n    if len(word) == 1:\n        return word\n    \n    # If word contains more than one vowel then check the distance of the vowel to the right side of the word\n    # and the vowel to the left side of the word. If distance to the right is shorter then return the vowel.\n    \n    return word[min(word.index(\"i\"), word.index(\"a\")):max(word.index(\"i\"), word.index(\"a\")) + 1]\n",
        "test": "assert     get_closest_vowel('pink') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    stack = []\n    balanced = 0\n    for paren in lst:\n        if paren == '(':\n            balanced += 1\n            stack.append(paren)\n        else:\n            if balanced == 0:\n                return 'No'\n            else:\n                stack.pop()\n                balanced -= 1\n",
        "test": "assert     match_parens(['((', '()', ')))', ')()()']) == 'No', 'Second test case is wrong'"
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    # sort the list from max to min and return the first k\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([1], 1) == [1]"
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if len(lst) < 2:\n        return 0\n    s, e, so, se = 0, 0, 0, 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            e += lst[i]\n        else:\n            so += lst[i]\n        if i % 2 == 0:\n            se += lst[i]\n        else:\n            s += lst[i]\n    return e - so\n",
        "test": "assert     solution([1,2,3,4,5]) == 3"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    # For every digit in the first k numbers in the array, we will add it to the number.\n    # We will also look at the remaining numbers and add the closest number to the result.\n    # Since we can't add the closest number in the array, the final result will be at most 24.\n    # Time: O(n + k)\n    # Space: O(k)\n    if k == 0: return 0\n    result = 0\n    for i in range(k):\n        result += min(arr[i], 10)\n    for i in range(k, len(arr)):\n        result += arr[i]\n        result -= arr[i - k]\n    return result\n",
        "test": "assert     add_elements([0, 1, 3, 4, 6], 2) == 10"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    odd_numbers = [1]\n    current = 2\n    while current!= 1:\n        if current % 2 == 0:\n            current = current//2\n        else:\n            current = (3*current)+1\n        odd_numbers.append(current)\n    return sorted(odd_numbers)\n",
        "test": "assert "
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    d = date.split('-')\n    if not len(d) == 3:\n        return False\n    d = map(int, d)\n    year, month, day = d\n    if month < 1 or month > 12:\n        return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 28:\n            return False\n    return True\n",
        "test": "assert     valid_date('1-1-2100') == False, 'First test case is wrong'"
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    words = txt.split(' ')\n    words = list(filter(None, words))\n    return words\n",
        "test": "assert     split_words('spam') == ['spam']"
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    if len(lst) < 2:\n        return True\n    if lst[0] < lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return False\n",
        "test": "assert     is_sorted([1,2,3]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "    # define a function to check if a given number is prime\n    def isprime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    # define a function to get intersection of two intervals\n    def getintersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    # check if two intervals have intersection\n    if getintersection(interval1, interval2) == interval1:\n        return \"YES\"\n    elif getintersection(interval1, interval2) == interval2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     (intersection((1, 2), (2, 4)) == \"NO\"), \"input = (1, 2), (2, 4) => output = NO\""
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    result = 0\n    for i in arr:\n        if i == 1:\n            result += 1\n        elif i == -1:\n            result -= 1\n        elif i == 0:\n            pass\n        else:\n            return None\n    return result\n",
        "test": "assert     prod_signs([-5,-2,3,4]) == None, 'Wrong'"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    R, C = len(grid), len(grid[0])\n",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n    if n > 2:\n        return [1,3] + tri(n-2) + tri(n-1)\n",
        "test": "assert       tri(0)  == []"
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    return int(n % 10) * int(n // 10) * int(n // 100) * int(n // 1000) * int(n // 10000) * int(n // 100000) * int(n // 1000000) * int(n // 10000000) * int(n // 100000000) * int(n // 1000000000) * int(n // 10000000000) * int(n // 1000000000000)\n",
        "test": "assert     digits(10) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        if string[i] == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return True\n",
        "test": "assert     is_nested('()[]{}') == True"
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    result = 0\n    for i in lst:\n        result += i*i\n    return result\n",
        "test": "assert sum_squares([1,2,3]) == 14, 'Wrong result'"
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return len(txt) > 0 and not txt[-1].isalpha() and not txt[-1].isnumeric()\n",
        "test": "assert     check_if_last_char_is_a_letter('a') == False, \"Wrong\""
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    max_ind = 0\n    for i in range(len(arr) - 1):\n        if arr[i + 1] <= arr[i]:\n            max_ind = i\n    return max_ind\n",
        "test": "assert     can_arrange([1, 1, 2, 3, 5]) == 0"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n    if negative == []:\n        return None, None\n    if positive == []:\n        return None, None\n    else:\n        return min(negative), max(positive)\n",
        "test": "assert     largest_smallest_integers([1,2,3,4]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     compare_one(1, 2)        ==     2,    \"Compare_one incorrect\""
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    # Check if the number is even and is a multiple of 2.\n    if n % 2!= 0:\n        return False\n    if n <= 0 or n % 4!= 0:\n        return False\n    return True\n",
        "test": "assert     is_equal_to_sum_even(2) == False"
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact\n",
        "test": "assert     special_factorial(5) == 120, \"correctness test\""
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    return text.replace(' ', '_').replace('  ', '-').replace('   ', '-')\n",
        "test": "assert     fix_spaces('test') == 'test', \"Test case 1 fail.\""
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    if file_name.find(\".\") < 0:\n        return \"No\"\n    file_name = file_name.split(\".\")\n    if file_name[0].isalpha():\n        return \"No\"\n    for i in file_name:\n        if i.isalpha():\n            if i.islower():\n                return \"No\"\n            else:\n                return \"Yes\"\n        elif i.isdigit():\n            return \"No\"\n        elif i.isupper():\n            return \"No\"\n        elif i == \"\":\n            return \"No\"\n        elif i == \".\":\n            return \"No\"\n        else:\n            return \"No\"\n        \ndef menu():\n    \"\"\"Function to display the menu\"\"\"\n    print(\"1. Get all files in a folder\")\n    print(\"2. Get all files in a folder, sorted by size\")\n    print(\"3. Get all files in a folder, sorted by last modified time\")\n    print(\"4. Get a file from the folder\")\n    print(\"5. Get all files in a sub-folder\")\n    print(\"6. Get all files in a sub-folder, sorted by size\")\n    print(\"7. Get all files in a sub-folder, sorted by last modified time\")\n    print(\"8. Get all files in a sub-folder, sorted by modification time\")\n    print(\"9. List all files and sub-folders in a folder\")\n    print(\"10. List all files and sub-folders in a folder, sorted by size\")\n    print(\"11. List all files and sub-folders in a folder, sorted by last modified time\")\n    print(\"12. List all files and sub-folders in a folder, sorted by modification time\")\n    print(\"13. Create a file\")\n    print(\"14. Create a folder\")\n    print(\"15. Change the permissions of a file\")\n    print(\"16. Delete a file\")\n    print(\"17. Delete a folder\")\n    print(\"18. Create a symbolic link\")\n    print(\"19. Delete a symbolic link\")\n    print(\"20. Make a file executable\")\n    print(\"21. Make a file non-executable\")\n    print(\"22. Make a folder executable\")\n    print(\"23. Make a folder non-executable\")\n    print(\"24. Delete a file from the file system\")\n    print(\"25. Delete a folder from the file system\")\n    print(\"26. Rename a file\")\n    print(\"27. Rename a folder\")\n    print(\"28. Copy a file\")\n    print(\"29. Copy a folder\")\n    print(\"30. Move a file\")\n    print(\"31. Move a folder\")\n    print(\"32. Reroute all files\")\n    print(\"33. Delete all files\")\n    print(\"34. Delete all files and folders\")\n    print(\"35. Move a file to a new location\")\n    print(\"36. Move a file to a new location, sorted by size\")\n    print(\"37. Move a file to a new location, sorted by last modified time\")\n    print(\"38. Move a file to a new location, sorted by modification time\")\n    print(\"39. Create a new file\")\n    print(\"40. Create a new folder\")\n    print(\"41. Create a new file, sorted by size\")\n    print(\"42. Create a new file, sorted by last modified time\")\n    print(\"43. Create a new file, sorted by modification time\")\n    print(\"44. Create a new folder, sorted by size\")\n    print(\"45. Create a new folder, sorted by last modified time\")\n    print(\"46. Create a new folder, sorted by modification time\")\n    print(\"47. Create a new folder, sorted by last modified time\")\n    print(\"48. Create a new file, sorted by size\")\n    print(\"49. Create a new file, sorted by last modified time\")\n    print(\"50. Create a new file, sorted by modification time\")\n    print(\"51. Create a new folder, sorted by size\")\n    print(\"52. Create a new folder, sorted by last modified time\")\n    print(\"53. Create a new folder, sorted by modification time\")\n    print(\"54. Create a new folder, sorted by last modified time\")\n    print(\"55. Delete a folder\")\n    print(\"56. Delete a folder, sorted by size\")\n    print(\"57. Delete a folder, sorted by last modified time\")\n    print(\"58. Delete a folder, sorted by modification time\")\n",
        "test": "assert     file_name_check(\"0\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    result = 0\n    for entry in lst:\n        if entry % 3 == 0 or entry % 4 == 0:\n            result += entry**2\n    return result\n",
        "test": "assert     sum_squares([1, 2, 3]) == 9, \"Correct\""
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    words = sentence.split()\n    return \" \".join(sorted(words, key=len))\n",
        "test": "assert     words_in_sentence(\"a b c\") == \"a b c\""
    },
    {
        "number": 144,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    if str(x)[0]!= '/':\n        x = x + \"/1\"\n    x = x.split('/')\n    \n    if int(x[0])/int(x[1]) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"2/3\", \"2/3\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    nums.sort(key=lambda n: (sum(int(i) for i in str(n)),n))\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num // 10 % 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    a = []\n    for i in range(1, n+1):\n        for j in range(i + 1, n+1):\n            k = n - i - j\n            if i + j + k == n:\n                a.append(i)\n                a.append(j)\n                a.append(k)\n    return len(a)\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    planets = {\"Mars\":(0.6, \"Saturn\"),\n               \"Jupiter\":(0.2, \"Uranus\"),\n               \"Saturn\":(0.6, \"Neptune\"),\n               \"Uranus\":(0.8, \"Jupiter\"),\n               \"Neptune\":(0.4, \"Saturn\")}\n    \n    if planet1 in planets and planet2 in planets:\n        p1_id, p2_id = planets[planet1]\n        p1_len, p2_len = len(p1_id), len(p2_id)\n        if p1_len == p2_len:\n            return (p1_id, p2_id)\n        elif p1_len < p2_len:\n            return (p1_id, ) + bf(p2_id, planet1)\n        else:\n            return (p2_id, ) + bf(p1_id, planet2)\n    else:\n        return ()\n",
        "test": "assert     bf('Mercury', 'Earth') ==     ()"
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    return sorted(sorted(lst, key=len), key=len)\n    ",
        "test": "assert sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(2, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        odd_numbers = 0\n        for i in range(len(lst)):\n            if lst[i] % 2!= 0:\n                odd_numbers += lst[i] ** 2\n        return odd_numbers\n    \n    \n",
        "test": "assert     double_the_difference([-2, -4, 3, -10]) == 29"
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    out = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            out.append(0)\n        else:\n            out.append(abs(guess[i]-game[i]))\n    return out\n",
        "test": "assert     compare([0,1,2], [0,2,1]) == [0,1,1], \"Wrong\""
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    extensions.sort(reverse=True)\n    highest_extension = extensions[0]\n    for i in range(len(extensions)):\n        if extensions[i].isupper():\n            if extensions[i].lower() > extensions[i]:\n                extensions[i] = extensions[i].lower()\n    return class_name + '.' + highest_extension\n",
        "test": "assert     Strongest_Extension(\"Glucose\", [\"Cheese\"]) == \"Glucose.Cheese\", \"Check if you get the correct value\""
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    for i in range(1,len(a)+1):\n        if a[i:] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"abc\", \"abcd\")    == True, \"First\""
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    return (num % 10, (num // 10 + 1) % 2)\n",
        "test": "assert     even_odd_count(12) == (2,0)"
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    rv = []\n    roman = {1:'I', 5:'V', 10:'X', 50:'L', 100:'C', 500:'D', 1000:'M'}\n    for k in sorted(roman, reverse=True):\n        while number >= k:\n            number -= k\n            rv.append(roman[k])\n    return ''.join(rv)\n",
        "test": "assert     int_to_mini_roman(1) == 'I'"
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2) and a!= b!= c\n",
        "test": "assert     right_angle_triangle(1, 2, 4) == False"
    },
    {
        "number": 158,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    max = None\n    for word in words:\n        if max == None or len(max) < len(word):\n            max = word\n    return max\n",
        "test": "assert     find_max(['hello', 'goodbye', 'yes']) == 'goodbye'"
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    # Conditions\n    if number == 0 or need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number, remaining - need]\n",
        "test": "assert     eat(0, 0, 1000) == [0, 1000]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            operand = add(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '-':\n            operand = subtract(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '*':\n            operand = multiply(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '/':\n            operand = divide(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '^':\n            operand = exponentiate(operand, operator[i+1])\n            i += 2\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    #base case\n    if not s:\n        return s\n    #determine whether we need to reverse\n    if s[0].isalpha():\n        #reverse if upper\n        if s[0].isupper():\n            return s[::-1].upper()\n        #reverse if lower\n        else:\n            return s[::-1].lower()\n    else:\n        #return original\n        return s[::-1]\n",
        "test": "assert     solve(\"\")        ==     \"\""
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    # \"9b4c78b1ac86d0d7ab1f86a9ba78e33\"\n    if text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "test": "assert     generate_integers(5, 10) == [6, 8, 10]"
    }
]