[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    for index in range(len(numbers) - 1):\n        if numbers[index + 1] - numbers[index] < threshold:\n            return True\n",
        "test": "assert not has_close_elements([1.2], 1.2)",
        "num_ids": 949
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    paren_groups = []\n    next_open_brace = ''\n    paren_group = ''\n    for i in paren_string:\n        if i == '(':\n            next_open_brace += i\n        elif i == ')':\n            paren_group += i\n            paren_groups.append(paren_group)\n            paren_group = ''\n            next_open_brace = ''\n        else:\n            paren_group += i\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 971
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    integer_part = int(number)\n    fractional_part = number - integer_part\n    return fractional_part\n",
        "test": "assert     truncate_number(0.5) == 0.5",
        "num_ids": 349
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    balance = 0\n    for i in range(len(operations)):\n        if balance < 0:\n            return True\n        balance += operations[i]\n    return False\n",
        "test": "assert     below_zero([10]) == False",
        "num_ids": 1410
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n",
        "test": "assert ",
        "num_ids": 294
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]",
        "num_ids": 692
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    pass\n",
        "test": "assert     parse_nested_parens(\"((()()))\") == [4]",
        "num_ids": 544
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    filtered = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            filtered.append(strings[i])\n    return filtered\n",
        "test": "assert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"dog\") == []",
        "num_ids": 939
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    sum_num = 0\n    pro_num = 1\n    if len(numbers) == 0:\n        return (sum_num, pro_num)\n    else:\n        for num in numbers:\n            sum_num += num\n            pro_num *= num\n    return (sum_num, pro_num)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 536
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n        if max_element < numbers[i]:\n            max_element = numbers[i]\n        max_list.append(max_element)\n    return max_list\n",
        "test": "assert     rolling_max([5, 2, 5, 3, 5]) == [5, 5, 5, 5, 5]",
        "num_ids": 917
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix\n",
        "test": "assert     make_palindrome(\"abcd\") == \"abcd\"",
        "num_ids": 548
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "test": "assert     string_xor('1001','1001') == '0000'",
        "num_ids": 402
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    # your code here\n    if strings == []:\n        return None\n    \n    max_len = len(strings[0])\n    max_str = strings[0]\n    for word in strings:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str\n",
        "test": "assert     longest([]) is None,    \"1 - Expected None, got: {}\".format(longest([]) )",
        "num_ids": 498
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    while a!= 0:\n        a, b = b%a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(2,4) == 2",
        "num_ids": 230
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes\n",
        "test": "assert ",
        "num_ids": 1305
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 325
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 283
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    res = []\n    new_note = 0\n    for elem in music_string:\n        if elem == 'o' or elem == 'o|':\n            res.append(4)\n        elif elem == '.':\n            res.append(1)\n        elif elem == '|':\n            new_note = 1\n        elif elem =='':\n            if new_note:\n                res.append(1)\n                new_note = 0\n        else:\n            print(f'invalid input, got {elem}')\n    return res\n",
        "test": "assert     parse_music(\"o|\") == [4]",
        "num_ids": 754
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)\n",
        "test": "assert     how_many_times(\"hiabcdef\", \"def\") == 1",
        "num_ids": 366
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    numbers_list = numbers.split()\n    numbers_list = sorted(numbers_list)\n    sorted_numbers = \"\"\n    for i in numbers_list:\n        sorted_numbers += i\n    return sorted_numbers\n",
        "test": "assert     sort_numbers(\"one zero\") == \"zero one\"",
        "num_ids": 523
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    min_diff = float(\"inf\")\n    min_idx = None\n    min_idx_2 = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_diff:\n                min_diff = abs(numbers[i] - numbers[j])\n                min_idx = i\n                min_idx_2 = j\n    return numbers[min_idx], numbers[min_idx_2]\n",
        "test": "assert find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)",
        "num_ids": 1506
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # Calculate the min and max values from the numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n",
        "test": "assert ",
        "num_ids": 442
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1,2,'a']) == [1,2]",
        "num_ids": 1126
    },
    {
        "number": 23,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if not string:\n        return 0\n    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 159
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    i = 1\n    while n % i!= 0:\n        i = i + 1\n    return i\n",
        "test": "assert largest_divisor(3) == 1",
        "num_ids": 348
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    # print(f'{n}')\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 678
    },
    {
        "number": 26,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n",
        "test": "assert     remove_duplicates([1, 1, 2, 3, 3])     ==     [1, 2, 3]",
        "num_ids": 671
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 270
    },
    {
        "number": 28,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"first\", \"second\"]) == \"firstsecond\"",
        "num_ids": 480
    },
    {
        "number": 29,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []",
        "num_ids": 836
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return [x for x in l if x >= 0]\n",
        "test": "assert     get_positive([]) == [], \"Wrong result\"",
        "num_ids": 488
    },
    {
        "number": 31,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    for divisor in range(2, n):\n        if n % divisor == 0:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 297
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    xs = xs.copy()\n    xs.sort()\n    i = 0\n    while i < len(xs):\n        if xs[i] > 0:\n            break\n        i += 1\n    if xs[i] < 0:\n        print('there is no solution')\n        return\n    i = 0\n    while xs[i] > 0:\n        i += 1\n    while xs[i] < 0:\n        i += 1\n    if i == len(xs) - 1:\n        return -xs[i - 1] / xs[i]\n    return -xs[i - 1] / (xs[i] - xs[i - 1])\n",
        "test": "assert ",
        "num_ids": 394
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    l_sorted = []\n    l_sorted.append(l[0])\n    for i in range(1, len(l)):\n        if i % 3 == 0:\n            l_sorted.append(l[i])\n    return l_sorted\n",
        "test": "assert sort_third([3, 6, 1, 9, 2, 5]) == [1, 2, 3, 5, 6, 9]",
        "num_ids": 525
    },
    {
        "number": 34,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert         unique([1, 2, 2, 3]) == sorted([1, 2, 3])",
        "num_ids": 566
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return max(l)\n",
        "test": "assert max_element([-2, 1, -4, 3]) == 3",
        "num_ids": 285
    },
    {
        "number": 36,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return sum(1 for x in range(1, n) if x % 3 == 0 and x % 5 == 0 or x % 7 == 0)\n",
        "test": "assert     fizz_buzz(100) == fizz_buzz(100)",
        "num_ids": 481
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    evens = []\n    l = l.copy()\n    for i in range(0, len(l), 2):\n        evens.append(l[i])\n    l.sort()\n    evens.sort()\n    return evens + l[1::2]\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1679
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # split encoded string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"AAA\") == \"AAA\"",
        "num_ids": 582
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 389
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -2, 4, 5, -4, 6, -8, 10, -5]) == True, \"Wrong result for the input list\"",
        "num_ids": 855
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    assert n > 0, 'Please enter a positive integer value for n.'\n    total_collisions = 0\n    for x in range(1, n+1):\n        for y in range(1, n):\n            if (x * abs(y)) >= n:\n                break\n            if x < y:\n                total_collisions += 1\n    return total_collisions\n",
        "test": "assert car_race_collision(2) == 0",
        "num_ids": 393
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert ",
        "num_ids": 103
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    count = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     pairs_sum_to_zero([1,1,1,1]) == False",
        "num_ids": 492
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    # define some constants\n    base_10 = '0123456789'\n    # define some constants\n    base_10 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    # convert to list\n    x_as_list = list(str(x))\n    # loop through\n    for i in range(len(x_as_list)):\n        # check if character is in base_10\n        if x_as_list[i] in base_10:\n            # if yes, convert\n            x_as_list[i] = str(base_10.index(x_as_list[i]))\n    # remove leading zeros\n    while x_as_list[0] == '0':\n        x_as_list.pop(0)\n    # return number\n    return ''.join(x_as_list)\n",
        "test": "assert     change_base(1, 8) == \"1\"",
        "num_ids": 664
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(10, 20) == 100",
        "num_ids": 142
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 417
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    n = len(l)\n    if n < 1:\n        raise ValueError(\"median requires at least one element\")\n    if n == 1:\n        return l[0]\n    sorted_l = sorted(l)\n    index = n//2\n    if n % 2 == 0:\n        return sorted_l[index-1] + sorted_l[index] / 2\n    else:\n        return sorted_l[index]\n",
        "test": "assert     median([1, 1, 2, 3, 4, 5, 7]) == 3",
        "num_ids": 610
    },
    {
        "number": 48,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    # we must make sure that we don't have anything other than alphanumeric\n    text = ''.join(filter(str.isalnum, text))\n    \n    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"racecar\") == True, \"Weird\"",
        "num_ids": 335
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n",
        "test": "assert modp(1, 3) == 3 and modp(3, 3) == 1",
        "num_ids": 184
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert ",
        "num_ids": 255
    },
    {
        "number": 51,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join(ch for ch in text if ch not in vowels)\n",
        "test": "assert     remove_vowels('he') == 'h', \"remove_vowels(he) should return h\"",
        "num_ids": 597
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3,5,6,8,12], 10) == False",
        "num_ids": 273
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 3) == 5",
        "num_ids": 110
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars(\"ab\", \"ab\")",
        "num_ids": 299
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 271
    },
    {
        "number": 56,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append('>')\n        elif bracket == '>':\n            if bracket_stack == []:\n                return False\n            bracket_stack.pop()\n        else:\n            return False\n    return bracket_stack == []\n",
        "test": "assert     correct_bracketing(\"<>\") == True, \"The last closing bracket does not match its corresponding opening bracket\"",
        "num_ids": 786
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            return True\n    return True",
        "test": "assert     monotonic([1,1,1,1,1])",
        "num_ids": 687
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n",
        "test": "assert     common([], []) == []",
        "num_ids": 711
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert largest_prime_factor(9) == 3",
        "num_ids": 442
    },
    {
        "number": 60,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 440
    },
    {
        "number": 61,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    count_open = 0\n    count_close = 0\n    for ch in brackets:\n        if ch == \"(\":\n            count_open += 1\n        elif ch == \")\":\n            count_close += 1\n    return count_close == count_open\n",
        "test": "assert     correct_bracketing(\"()\") == True",
        "num_ids": 591
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    derivative_list = []\n    for x in range(1, len(xs)):\n        derivative_list.append((xs[x] * x) - (xs[x - 1] * x))\n    return derivative_list\n",
        "test": "assert derivative([0, 2, 2]) == [2, 4, 4]",
        "num_ids": 614
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0, \"fibfib(0) is wrong\"",
        "num_ids": 367
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    vowels = 0\n    for char in s:\n        if char in \"aeiou\":\n            vowels += 1\n    return vowels\n",
        "test": "assert     vowels_count('a') == 1",
        "num_ids": 405
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    x = str(x)\n    if len(x) < shift:\n        x = x[::-1]\n        return x + x[:shift][::-1]\n    else:\n        return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift(123, 0) == '123'",
        "num_ids": 383
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 270
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    return(s.count('mango'))",
        "test": "assert fruit_distribution(\"0\",0) == 0",
        "num_ids": 600
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 580
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    n = 0\n    m = 0\n    for i in lst:\n        if i > 0:\n            n += 1\n    if n == 0:\n        return -1\n    for i in lst:\n        if i == 0:\n            continue\n        if i > m:\n            m = i\n    return m",
        "test": "assert     search([2, 2, 2, 2]) == 2",
        "num_ids": 670
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        first = min(lst)\n        return [first] + strange_sort_list(list(filter(lambda x: x > first, lst)))\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 646
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if(a + b > c and a + c > b and b + c > a):\n        return round((a * b * 0.5), 2)\n    else:\n        return -1",
        "test": "assert     triangle_area(1, 2, 3) == -1",
        "num_ids": 336
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if q==None or len(q)==0:\n        return False\n    if len(q)==1 and q[0]<=w:\n        return True\n    elif len(q)==2 and q[0]+q[1]<=w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1,1],1) == False",
        "num_ids": 609
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # O(n) time and space\n    counter = 1\n    curr_sum = 0\n    curr_max = 0\n    for i in range(len(arr)-1):\n        curr_sum += arr[i]\n        if i < len(arr)-2:\n            curr_max = max(curr_max, arr[i] + arr[i+1])\n        if curr_max >= counter:\n            counter = curr_max\n    return counter\n",
        "test": "assert ",
        "num_ids": 322
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) <= len(lst2[i]):\n            result.append(lst1[i])\n    return result\n",
        "test": "assert ",
        "num_ids": 501
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if a <= 100:\n        return False\n    for i in range(2, a//2):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 246
    },
    {
        "number": 76,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    # hint: keep exponent divisiblity test.\n    return n**x == x\n",
        "test": "assert     is_simple_power(2, 4) == False",
        "num_ids": 451
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    \n    return a**3 == a\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1128
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    num = num.upper()\n    l = 0\n    count = 0\n    for n in num:\n        l += 1\n        if n == 'B':\n            count += 1\n        if l == 3:\n            if n in 'ABCD':\n                count += 1\n            l = 0\n    return count\n",
        "test": "assert     hex_key('') == 0, '0'",
        "num_ids": 644
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    \n    return \"db\" + decimal_to_binary_helper(decimal)\n",
        "test": "assert     decimal_to_binary(-3) == \"db00\", \"Should be 'db00'\"",
        "num_ids": 459
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return True\n    return False\n",
        "test": "assert     is_happy(\"aa\") == False",
        "num_ids": 346
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    grades.sort(reverse=True)\n    letter_grades = []\n    for x in grades:\n        if x >= 4.0:\n            letter_grades.append('A+')\n        elif 3.7 <= x <= 4.0:\n            letter_grades.append('A')\n        elif 3.3 <= x <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 <= x <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 <= x <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 <= x <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 <= x <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 <= x <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 <= x <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 <= x <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 <= x <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 <= x <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 1564
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    else:\n        return True\n",
        "test": "assert     prime_length(\"4\") == True",
        "num_ids": 417
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    # hard to make it an array since it can only be positive\n    # also counts start and end in the same number\n    return count(n, 1, 1)\n",
        "test": "assert     starts_one_ends(4) == 2",
        "num_ids": 372
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    bina_num = bin(N)\n    bina_num = bina_num.replace(\"0b\", \"\")\n    print(bina_num)\n    return bina_num\n",
        "test": "assert     solve(3) == \"11\"",
        "num_ids": 1482
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = i+1\n    return lst",
        "test": "assert     add([]) == [] ",
        "num_ids": 369
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # return ''.join(sorted(s.split()))\n    new_s = ''\n    for i,c in enumerate(s.split()):\n        new_s = new_s + c[::-1] +''\n    return new_s.strip()\n",
        "test": "assert     anti_shuffle('') == ''",
        "num_ids": 335
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    out = []\n    for i in range(len(lst)):\n        coords = []\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append((i, j))\n        coords.sort()\n        coords.sort(key=lambda x: x[1], reverse=True)\n        out.append(coords)\n    return out\n",
        "test": "assert ",
        "num_ids": 732
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    array.sort(key=lambda x: (x, -x))\n    return array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 582
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return s[1:].join([s[0]] + s[2:].join([s[0]]))\n",
        "test": "assert ",
        "num_ids": 884
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    if n == 1:\n        return lst[0]\n    l = lst[:]\n    l.sort()\n    return l[1]\n",
        "test": "assert next_smallest([]) == None, \"error 3\"",
        "num_ids": 558
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    count = 0\n    for word in S.split():\n        if word.startswith('I') and word!= \"I\":\n            count += 1\n    return count\n",
        "test": "assert     is_bored('I.? how are you?') == True",
        "num_ids": 486
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return True if (x+y) == (y+z) and all([type(i) == int for i in [x,y,z]]) else False\n  \n  \n",
        "test": "assert any_int(2,3,5) == False",
        "num_ids": 342
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    \n    # Creating a list of all characters\n    charList = list(message)\n",
        "test": "assert ",
        "num_ids": 453
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    import math as m\n    max_prime = 0\n    for x in lst:\n        if x > max_prime and is_prime(x):\n            max_prime = x\n    return sum([int(i) for i in str(max_prime)])\n",
        "test": "assert ",
        "num_ids": 479
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if dict == {}:\n        return False\n    for i in dict:\n        if type(dict[i])!= str:\n            return False\n        if i.isupper() and dict[i].islower():\n            return False\n        if i.islower() and dict[i].isupper():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, 'Empty dictionary'",
        "num_ids": 834
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    primes = get_prime_list(n)\n    count = 0\n    array = []\n    for i in range(n):\n        if count < n and is_prime(i):\n            count += 1\n            array.append(i)\n    return array\n",
        "test": "assert ",
        "num_ids": 525
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    return int(a * b % 100)\n",
        "test": "assert     (multiply(5, 6) == 30)",
        "num_ids": 311
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    s_lower = s.lower()\n    count = 0\n    for i in range(len(s_lower)):\n        if s_lower[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"AFTEOSL\") == 3",
        "num_ids": 340
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    x = float(value)\n    if x == int(x):\n        return int(x)\n    else:\n        return int(x + (abs(x) - abs(int(x))))\n",
        "test": "assert     closest_integer(\"3.1\") == 3, \"Should be 3\"",
        "num_ids": 332
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n-1)\n    return [n-1] + make_a_pile(n-2)",
        "test": "assert     make_a_pile(3) == [1,1,1]",
        "num_ids": 625
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    return s.split(', ')\n",
        "test": "assert words_string('testing, words') == ['testing', 'words']",
        "num_ids": 465
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if x < y:\n        return -1\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n        return x\n    elif x < y:\n        for i in range(x + 1, y):\n            if i % 2 == 0:\n                return i\n",
        "test": "assert     choose_num(-1, 0) == -1, \"Wrong answer in choose_num\"",
        "num_ids": 483
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    if n < m:\n        return -1\n    else:\n        return int(bin(int((n+m)/2))[2:],2)\n",
        "test": "assert rounded_avg(4,4) == 4",
        "num_ids": 362
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    s = []\n    for i in range(len(x)):\n        s.append(x[i] % 10)\n    return sorted(set(s))\n",
        "test": "assert ",
        "num_ids": 378
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # edge cases\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1 and arr[0] < 1 or arr[0] > 9:\n        return []\n    if arr[0] < 1 or arr[0] > 9:\n        return []\n    \n    # other cases\n    nums = []\n    for i in arr:\n        if i < 1 or i > 9:\n            continue\n        nums.append(num2word[i])\n    nums.sort()\n    \n    # reverse the array\n    nums.reverse()\n    \n    # convert the string to a list of characters\n    nums_list = []\n    for i in nums:\n        nums_list.append(i)\n    \n    return nums_list\n",
        "test": "assert ",
        "num_ids": 639
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return f(n - 1) + [i + 1 for i in f(n - 1)]\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 1401
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    count_even, count_odd = 0, 0\n",
        "test": "assert     even_odd_palindrome(5) == (0, 4)",
        "num_ids": 487
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    nums = 0\n    for i in arr:\n        if i > 0:\n            nums += 1\n    return nums\n",
        "test": "assert     count_nums([2, -3, 9, -4]) == 2, 'Wrong'",
        "num_ids": 1448
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # special case where array is empty\n    if len(arr) == 0:\n        return True\n    # if we find a single element which is less than the last element then this\n    # is not possible to get non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([10,20,30,40,50]) == True",
        "num_ids": 727
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    \n    lst1 = [num for num in lst1 if num % 2 == 0]\n    lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    if lst1 == lst2:\n        return \"YES\"\n    return \"NO\"\n    \n",
        "test": "assert     exchange([1, 2], []) ==    \"NO\"",
        "num_ids": 496
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    \n    d = {}\n    for item in test.lower().split():\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n",
        "test": "assert     histogram('aaaa') == {'a': 4, 'a': 1}",
        "num_ids": 1535
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return (s[::-1].replace(c,''),True if s==s[::-1] else False)\n    \n",
        "test": "assert     reverse_delete(s = \"a\", c = \"aa\") == (\"a\", True)",
        "num_ids": 736
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    odd_counts = []\n    for i in range(len(lst)):\n        odds = 0\n        for char in lst[i]:\n            if (ord(char) % 2)!= 0:\n                odds += 1\n        odd_counts.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(odds, i+1, i+1))\n    return odd_counts\n",
        "test": "assert ",
        "num_ids": 452
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if not nums:\n        return 0\n    best = nums[0]\n    curr = nums[0]\n    for i in range(1, len(nums)):\n        curr = min(nums[i], curr + nums[i])\n        best = min(best, curr)\n    return best\n",
        "test": "assert ",
        "num_ids": 376
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return math.ceil(sum([sum(row) for row in grid]) / capacity)\n",
        "test": "assert ",
        "num_ids": 501
    },
    {
        "number": 116,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([1,1,1,1]) == [1,1,1,1]",
        "num_ids": 757
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(s) == 0:\n        return []\n    if n < 1:\n        return []\n    words = s.split()\n    ans = []\n    for i in range(len(words)):\n        if s.count(words[i][0]) == n:\n            ans.append(words[i])\n    return ans\n",
        "test": "assert     select_words(\"hey there this is a string\", 4) == []",
        "num_ids": 757
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    closest = \"\"\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiou\":\n            if word[i + 1] in \"aeiou\" and word[i]!= word[i + 1]:\n                closest = word[i + 1]\n                break\n    return closest\n",
        "test": "assert     get_closest_vowel('abc') == ''",
        "num_ids": 687
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    stack = []\n    for paren in lst:\n        if paren == '(':\n            stack.append(paren)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(('(()(', '()')) == 'No', '2'",
        "num_ids": 480
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # TODO: Write your solution here\n    n = len(arr)\n    if k >= n:\n        return arr\n    max_value = max(arr[:k])\n    max_index = arr.index(max_value)\n    # max_index = len(arr) - k\n    # print(max_index)\n    return arr[max_index:] + arr[:max_index]\n",
        "test": "assert maximum([1,2,3,4,5], 1) == [1,2,3,4,5]",
        "num_ids": 568
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    ret = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 1:\n            ret += lst[i]\n    return ret\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 693
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([1, 2, 3, 4], 2) == 3",
        "num_ids": 311
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + get_odd_collatz(collatz(n))\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1470
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    try:\n        return date!= \"\" and (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 31 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 30 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 30 and\n                1 <= int(date.split('-')[1]) <= 12 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 1 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        )\n    except:\n        return False\n",
        "test": "assert     valid_date('2-1-2000') == False, 'fail'",
        "num_ids": 938
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') ==     ['hello', 'world']",
        "num_ids": 1554
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    # checks if list has more than 1 duplicate of the same number\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3]) is True, 'First'",
        "num_ids": 268
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    # Edge case\n    if interval1[0] >= interval2[1] or interval2[0] >= interval1[1]:\n        return \"NO\"\n    # Brute force\n    if interval1 == interval2:\n        return \"YES\"\n    # Intersection\n    ans = float('inf')\n    for i in range(1, min(interval1[1], interval2[1]) + 1):\n        if interval1[1] >= interval2[0] + i:\n            if ans > i:\n                ans = i\n    return str(ans)\n",
        "test": "assert intersection((1,2),(1,2)) == 'YES'",
        "num_ids": 784
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if not arr:\n        return None\n    summ = 0\n    for x in arr:\n        if x > 0:\n            summ += x\n        elif x < 0:\n            summ -= x\n        elif x == 0:\n            pass\n    return summ\n",
        "test": "assert     prod_signs([]) == None, \"wrong answer for empty arr\"",
        "num_ids": 433
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if k < 1 or k > len(grid) * len(grid[0]):\n        return []\n",
        "test": "assert ",
        "num_ids": 174
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    # My first attempt\n    '''\n    result = []\n    result.append(3)\n    result.append(1)\n    result.append(2)\n    for i in range(3, n + 1):\n        a = result[i - 1]\n        b = result[i - 2]\n        c = result[i - 3]\n        result.append(a + b + c)\n    return result\n    '''\n    \n    # A better solution\n    '''\n    def trib(n):\n        a, b, c = 1, 1, 1\n        for _ in range(1, n + 1):\n            yield a\n            a, b, c = b, c, a + b + c\n",
        "test": "assert ",
        "num_ids": 617
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if n % 2 == 0:\n        return 0\n    return sum(map(int, str(n)))\n",
        "test": "assert     digits(2) == 0",
        "num_ids": 331
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if (len(string) == 0):\n        return False\n    stack = []\n    for i in range(len(string)):\n        if (string[i] == \"[\"):\n            stack.append(i)\n        elif (string[i] == \"]\"):\n            if len(stack) == 0:\n                return False\n            elif (string[stack[-1]] == \"[\"):\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert not is_nested('')",
        "num_ids": 647
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return round(sum([x**2 for x in lst]), 2)",
        "test": "assert     sum_squares([0, 0, 0, 0, 0]) == 0",
        "num_ids": 427
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return not txt or txt[-1].isalpha() and txt.find(' ') == -1\n",
        "test": "assert     check_if_last_char_is_a_letter('text') == True",
        "num_ids": 336
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    max_index = -1\n    for i, x in enumerate(arr):\n        if x > arr[i - 1]:\n            max_index = i\n    return max_index\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 545
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # Add your code here\n    return None, None\n",
        "test": "assert     largest_smallest_integers([-1,-2,-3,-4,-5,-6]) == (5, -1), \"error in test 4\"",
        "num_ids": 625
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if a == b:\n        return None\n    if type(a) == float or type(a) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    if type(b) == float or type(b) == int:\n        if b > a:\n            return b\n        else:\n            return a\n",
        "test": "assert     compare_one(1, 1.1) == 1.1",
        "num_ids": 598
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    return n%2 == 0 and n//2 >= 4\n",
        "test": "assert     is_equal_to_sum_even(5) == False",
        "num_ids": 232
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    res = 1\n    if n == 0:\n        return 1\n    for i in range(1, n):\n        res *= (i+1)\n    return res\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 288
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    return '-'.join(text.split())\n",
        "test": "assert fix_spaces( \" hello_world \" ) == \"hello_world\"",
        "num_ids": 342
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    file_name = file_name.strip()\n    if(file_name.count('.') == 1):\n        if(file_name[0].isalpha()):\n            if(file_name.count('.') == 2 and (file_name.split('.')[1] in ['txt', 'exe', 'dll'])):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert file_name_check('b') == 'No'",
        "num_ids": 891
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4 == 0:\n                lst[i] = lst[i]**2\n            else:\n                lst[i] = lst[i]**3\n        sum += lst[i]\n    return sum\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 593
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # your code here\n    words = sentence.split()\n    for word in words:\n        if len(word) == 1:\n            continue\n        if not is_prime(len(word)):\n            continue\n        else:\n            return word\n    return None",
        "test": "assert words_in_sentence('This is a test of words') == 'this is a test'",
        "num_ids": 517
    },
    {
        "number": 144,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if(n == \"1/1\"):\n        return True\n    elif(x == \"1/0\"):\n        return False\n    elif(x == \"0/1\"):\n        return False\n    else:\n        return False\n",
        "test": "assert     simplify('1/2', '3/4') == False",
        "num_ids": 1021
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    nums.sort()\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 607
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2 == 1) and (num % 10 > 5 and num % 10 < 7):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 0",
        "num_ids": 456
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    count = 0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k = n - i - j\n            if i*i + j*j + k*k == 3*(i+j+k):\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 408
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    #planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\"]\n    \n    try:\n        if planet1 not in planets or planet2 not in planets:\n            raise ValueError\n        return sorted(planets, key=lambda x:distance(planet1, x))\n    except ValueError:\n        return ()\n",
        "test": "assert     bf('mercury','venus') == ()",
        "num_ids": 1052
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    \n    sorted_list = []\n    sorted_list = sorted(lst)\n    return sorted_list\n",
        "test": "assert     sorted_list_sum([\"a\"]) == [\"a\"]",
        "num_ids": 603
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if n % x == 0 and n % y == 0:\n        return x\n    else:\n        return y\n    \n    \nprint(x_or_y(7, 34, 12)) #>>> 34\nprint(x_or_y(15, 8, 5)) #>>> 5\nprint(x_or_y(1, 5, 6)) #>>> 5\nprint(x_or_y(5, 8, 6)) #>>> 8\n",
        "test": "assert ",
        "num_ids": 332
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    \n    if lst == []:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num % 2 == 1:\n                total += num**2\n        return total\n            \n",
        "test": "assert         double_the_difference([])                    == 0",
        "num_ids": 719
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    # Your code here\n    r = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            r.append(0)\n        else:\n            r.append(abs(game[i] - guess[i]))\n    return r\n",
        "test": "assert     compare(range(3), [2,1,0]) == range(0,3)",
        "num_ids": 667
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    class_name = class_name.upper()\n    res = ''\n    extensions = sorted(extensions, key=lambda x: (-len(x), x))\n    for ext in extensions:\n        if class_name.find(ext.lower()) > -1:\n            res += class_name[:class_name.find(ext.lower())] + '.' + ext.upper() + '.'\n    return res\n",
        "test": "assert ",
        "num_ids": 523
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return a in b[::-1] or b in a\n",
        "test": "assert cycpattern_check(\"abc\", \"defg\") == False",
        "num_ids": 320
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n",
        "test": "assert     even_odd_count(3412) == (2, 2)",
        "num_ids": 411
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    assert number > 0 and number <= 1000, \"0 <= number <= 1000\"\n",
        "test": "assert ",
        "num_ids": 1706
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) and (b ** 2 + c ** 2 == a ** 2)\n",
        "test": "assert     right_angle_triangle(6, 10, 5) == False",
        "num_ids": 379
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n",
        "test": "assert     find_max(['python', 'x', 'xxx', 'xxx', 'xxxx']) ==    'python'",
        "num_ids": 609
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    \n    result = []\n",
        "test": "assert ",
        "num_ids": 341
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # get the length of the operand list\n    length_of_operand_list = len(operand)\n    # check whether the length of operator list is equal to the length of operand list minus one\n    if length_of_operand_list == len(operator)-1:\n        # if the length of operator list is equal to the length of operand list minus one, the first and last element of operand list are the operand of operator list\n        # set the first operand of operand list to be operand of the operator list and the second operand to be the result of the algebric expression\n        operator[0] = operand[0]\n        operator[-1] = do_algebra(operator, operand[1:])\n        return do_algebra(operator[:-1], operand[1:])\n    else:\n        # if the length of operator list is equal to the length of operand list minus one, the first element of operand list are the operand of operator list\n        # set the first operand of operand list to be the result of the algebric expression\n        operator[0] = do_algebra(operator[:-1], operand[1:])\n        return operator[0]\n",
        "test": "assert ",
        "num_ids": 911
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    if not s:\n        return s\n    s = s.lower() if s[0].isalpha() else s.upper()\n    return s[::-1]\n",
        "test": "assert     solve('a') == 'a'",
        "num_ids": 618
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if text == '':\n        return None\n    hash_obj = hashlib.md5()\n    hash_obj.update(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n",
        "test": "assert string_to_md5('') == None",
        "num_ids": 678
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "test": "assert generate_integers(1, 100)!= generate_integers(1, 100+1)",
        "num_ids": 443
    }
]