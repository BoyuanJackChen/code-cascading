[
    {
        "number": 0,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1] + threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 0.5)",
        "num_ids": 388
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    paren_group_list = []\n    curr_paren_group = \"\"\n    for character in paren_string:\n        if character == \"(\":\n            curr_paren_group += character\n        elif character == \")\":\n            curr_paren_group += character\n            if curr_paren_group!= \"()\":\n                paren_group_list.append(curr_paren_group)\n            curr_paren_group = \"\"\n        else:\n            curr_paren_group += character\n    # if a new group is left\n    if curr_paren_group!= \"\":\n        paren_group_list.append(curr_paren_group)\n    return paren_group_list\n",
        "test": "assert     separate_paren_groups(\"(a+b)\") == [\"(a+b)\"]",
        "num_ids": 1034
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # find integer part\n    integer_part = int(number)\n    # find decimal part\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert     truncate_number(1.8) == 0.8",
        "num_ids": 334
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    bal = 0\n    for op in operations:\n        if op > 0:\n            bal += op\n        else:\n            if bal < 0:\n                return True\n            bal = op\n    return bal < 0\n",
        "test": "assert     below_zero([0, 1]) == False",
        "num_ids": 316
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n",
        "test": "assert ",
        "num_ids": 289
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    result = []\n    for i, num in enumerate(numbers):\n        if i == 0:\n            result.append(num)\n        elif i == len(numbers)-1:\n            result.append(num)\n        else:\n            result.append(num)\n            result.append(delimeter)\n    return result\n",
        "test": "assert     intersperse([], '1') == []",
        "num_ids": 479
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    curr_level = 0\n    curr_parens = []\n    # your code here\n    return curr_parens",
        "test": "assert ",
        "num_ids": 702
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"somethings\", \"this\", \"also\", \"sthings\", \"somethings\", \"and something\"], \"s\") == [\"somethings\", \"this\", \"and something\"], \"Test 2\"",
        "num_ids": 416
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        s = sum(numbers)\n        p = 1\n        for i in range(len(numbers)):\n            p *= numbers[i]\n        return (s, p)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 356
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    for i in range(len(numbers)):\n        numbers[i] = max(numbers[i], numbers[i-1])\n    return numbers\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]",
        "num_ids": 616
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if is_palindrome(string):\n        return string\n",
        "test": "assert     is_palindrome('racecar') == True",
        "num_ids": 677
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 303
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > len(longest_str):\n            longest_str = strings[i]\n    return longest_str\n",
        "test": "assert     longest([]) == None",
        "num_ids": 313
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "test": "assert     greatest_common_divisor(2, 6) == 2",
        "num_ids": 304
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]",
        "num_ids": 350
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return''.join(f'{i}' for i in range(n + 1))\n",
        "test": "assert     string_sequence(6) == '0 1 2 3 4 5'",
        "num_ids": 301
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1",
        "num_ids": 284
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # your code here\n    return_list = []\n",
        "test": "assert parse_music('oo|oo|oo|o') == [4, 2, 2, 2]",
        "num_ids": 353
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times(\"aabcd\", \"b\") == 1",
        "num_ids": 258
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    numbers_str = numbers.split()\n    numbers_lst = []\n    for i in numbers_str:\n        if i == 'one':\n            numbers_lst.append(1)\n        elif i == 'two':\n            numbers_lst.append(2)\n        elif i == 'three':\n            numbers_lst.append(3)\n        elif i == 'four':\n            numbers_lst.append(4)\n        elif i == 'five':\n            numbers_lst.append(5)\n        elif i =='six':\n            numbers_lst.append(6)\n        elif i =='seven':\n            numbers_lst.append(7)\n        elif i == 'eight':\n            numbers_lst.append(8)\n        elif i == 'nine':\n            numbers_lst.append(9)\n",
        "test": "assert ",
        "num_ids": 525
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    length = len(numbers)\n    if length == 1:\n        return numbers[0], numbers[0]\n    if length == 2:\n        return numbers[0], numbers[1]\n    left, right = numbers[0], numbers[-1]\n    largest_diff = abs(left - right)\n    for i in range(length):\n        for j in range(i + 1, length):\n            # calculate absolute difference\n            diff = abs(numbers[i] - numbers[j])\n            if diff < largest_diff:\n                largest_diff = diff\n                left, right = numbers[i], numbers[j]\n    return left, right\n",
        "test": "assert     find_closest_elements([1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]) == (1.5, 1.5)",
        "num_ids": 1049
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    min_value = float(min(numbers))\n    max_value = float(max(numbers))\n    return [(num - min_value) / (max_value - min_value) for num in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0, 0, 1]) == [0, 0, 0, 1]",
        "num_ids": 515
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    #return list(filter(is_int, values))\n    return list(filter(lambda x: isinstance(x, int) or isinstance(x, float), values))\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 458
    },
    {
        "number": 23,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return len(string)\n    # return len(string.encode())\n",
        "test": "assert strlen('hello') == 5",
        "num_ids": 102
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "test": "assert     largest_divisor(9) == 3",
        "num_ids": 334
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    factors = []\n",
        "test": "assert     factorize(7) == [2,3]",
        "num_ids": 382
    },
    {
        "number": 26,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result\n",
        "test": "assert     remove_duplicates([1,2,3,4,4,5,6,7,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 511
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return string.swapcase()\n",
        "test": "assert ",
        "num_ids": 220
    },
    {
        "number": 28,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\", \"concatenate doesn't work\"",
        "num_ids": 162
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []",
        "num_ids": 229
    },
    {
        "number": 30,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 375
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_prime(3) == True, \"3 is prime\"",
        "num_ids": 399
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    for x in range(len(xs)):\n        if xs[x] == 0:\n            return x\n    return None\n",
        "test": "assert ",
        "num_ids": 798
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    l_copy = l.copy()\n    l_copy.sort()\n    for i in range(len(l_copy)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    return l_copy\n",
        "test": "assert ",
        "num_ids": 268
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([]) == []",
        "num_ids": 242
    },
    {
        "number": 35,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not l:\n        return None\n    return max(l)\n",
        "test": "assert     max_element([1,2,3,4]) == 4",
        "num_ids": 216
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(13) == 1",
        "num_ids": 358
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    sorted_even = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            sorted_even.append(l[i])\n    for i in range(1, len(l)):\n        if i % 2 == 0:\n            for j in range(len(sorted_even) - 1):\n                if sorted_even[j] > l[i]:\n                    sorted_even.insert(j, l[i])\n                    break\n    return sorted_even\n",
        "test": "assert     sort_even([1, 2, 3, 4, 5]), \"The function is not correct\"",
        "num_ids": 586
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"ABCDEFGHI\")!= \"ABCDEFGHIJ\"",
        "num_ids": 451
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if n <= 1:\n        return\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert prime_fib(100) == 4 ",
        "num_ids": 349
    },
    {
        "number": 40,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # create dict from list\n    dict = {}\n    for i in l:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    # iterate through dict, if 3 elements sum to 0\n    for i in dict:\n        if dict[i] >= 3:\n            if i * 3 in dict:\n                if dict[i] * 3!= dict[i * 3]:\n                    return True\n    return False\n",
        "test": "assert     not triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -2, -1])",
        "num_ids": 493
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if n <= 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-1)\n",
        "test": "assert     car_race_collision(5) == 0",
        "num_ids": 472
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4], \"incr_list 1\"",
        "num_ids": 247
    },
    {
        "number": 43,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    # Write your code here.\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, -3, 1]) == False",
        "num_ids": 322
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    y = x\n    string = ''\n    while y > 0:\n        y, digit = divmod(y, base)\n        string = str(digit) + string\n    return string\n",
        "test": "assert     change_base(10, 2) == '1010'",
        "num_ids": 345
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return a * h / 2\n",
        "test": "assert ",
        "num_ids": 63
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    assert isinstance(n, int) and n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 1292
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError('Empty list')\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n // 2]\n",
        "test": "assert     median([1,2,3,4,5]) == 3",
        "num_ids": 344
    },
    {
        "number": 48,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abba') == True",
        "num_ids": 196
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    assert 0 <= p < 2**n\n    return pow(p, 2**n - 2, 2**n)\n",
        "test": "assert     modp(10, 20) == 0, \"Wrong Answer\"",
        "num_ids": 234
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 324
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n",
        "test": "assert     remove_vowels(\"\") == \"\"",
        "num_ids": 342
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return True if len(l) == 0 or all(x < t for x in l) else False\n",
        "test": "assert     below_threshold([], 1)    == True",
        "num_ids": 180
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return x + y\n",
        "test": "assert add(1,2) == 3",
        "num_ids": 100
    },
    {
        "number": 54,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    count = 0\n    for i in range(len(s0)):\n        if s0[i] == s1[i]:\n            count += 1\n        else:\n            return False\n    return count == len(s0)\n",
        "test": "assert     same_chars(\"car\", \"car\")        == True",
        "num_ids": 422
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    assert n >= 0\n",
        "test": "assert ",
        "num_ids": 174
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    opening_brackets = 0\n    closing_brackets = 0\n    if len(brackets) % 2 == 1:\n        brackets = brackets + \">\"\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        if bracket == \">\":\n            closing_brackets += 1\n    if opening_brackets!= closing_brackets:\n        return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<]>\") == False",
        "num_ids": 721
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return all(x<=y for x, y in zip(l, l[1:])) or all(x>=y for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([1,2,3,4,5,6,7])",
        "num_ids": 310
    },
    {
        "number": 58,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([2, 3, 6, 8], [3, 4, 5, 6]) == []",
        "num_ids": 286
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    assert n > 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert largest_prime_factor(19) == 19",
        "num_ids": 253
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    total = 0\n    if n <= 0:\n        return total\n    else:\n        for i in range(1, n + 1):\n            total = total + i\n        return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 181
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    stack = []\n    # keep inserting opening bracket until you encounter a closing bracket\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert     correct_bracketing(\"()\") == True, \"Brackets not found!\"",
        "num_ids": 490
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    xs.reverse()\n    ret = []\n    for i in range(1, len(xs)):\n        ret.append(xs[i]*i)\n    ret.reverse()\n    return ret\n",
        "test": "assert ",
        "num_ids": 309
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(2) == 1",
        "num_ids": 347
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('helloworld') == 3",
        "num_ids": 469
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    x = str(x)\n    if shift < 0:\n        shift = -shift\n        x = x[shift:] + x[:shift]\n    elif shift > 0:\n        x = x[shift:] + x[:shift]\n    else:\n        return x\n    return int(x)\n",
        "test": "assert ",
        "num_ids": 496
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert     digitSum(\"21\") == 3",
        "num_ids": 188
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return (n-s) - (s-1)\n",
        "test": "assert     fruit_distribution(\"2\", 2) == 1",
        "num_ids": 895
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if not arr:\n        return []\n    else:\n        # O(n)\n        even_nums = sorted(filter(lambda x: (x % 2 == 0), arr))\n        if len(even_nums) == 0:\n            return []\n        elif len(even_nums) == 1:\n            return [even_nums[0], arr.index(even_nums[0])]\n        else:\n            return [even_nums[0], arr.index(even_nums[0])]\n",
        "test": "assert     pluck([2,5,6,7,5]) == [2,0]",
        "num_ids": 1598
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    l = 0\n    freq = 0\n    m = 0\n    if lst == []:\n        return -1\n    else:\n        for i in lst:\n            if i > 0:\n                if i > m:\n                    m = i\n                    freq = 1\n                elif i == m:\n                    freq += 1\n            else:\n                return -1\n        if freq > 0:\n            return m\n        else:\n            return -1\n",
        "test": "assert     search([5,5,7,7,7,7]) == 7, \"Wrong Answer\"",
        "num_ids": 587
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return sorted(lst, key=int)\n",
        "test": "assert     strange_sort_list([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "num_ids": 451
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    # define a few parameters\n    s = (a + b + c) / 2\n    t = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if t == int(t):\n        return t\n    return -1\n",
        "test": "assert     triangle_area(3, 4, 1) == 0, \"Should return 0 if the sum of any two sides is > 3\"",
        "num_ids": 407
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([\"a\", \"a\", \"a\"], 1) == True, \"Expected True\"",
        "num_ids": 713
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    possible = set()\n    for num in range(1, len(arr)):\n        possible = possible.union(set(range(num, -1, -1)))\n        possible = possible.union(set(range(0, num + 1)))\n    return min(possible - set(arr))",
        "test": "assert     smallest_change([1, 2, 3, 4, 5]) == 0",
        "num_ids": 457
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert     total_match(['one', 'two', 'three'], ['one', 'two', 'three']) ==     ['one', 'two', 'three']",
        "num_ids": 415
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            if (3 * i + 1) % i!= 0 and (3 * i - 1) % i!= 0:\n                return True\n    return False",
        "test": "assert     is_multiply_prime(9) == True, \"First test\"",
        "num_ids": 407
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return int(n**x) == x\n",
        "test": "assert     is_simple_power(5,2) == False",
        "num_ids": 291
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if a**3 == a:\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 106
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return len([el for el in num if el.isnumeric()])\n",
        "test": "assert     hex_key(\"\") == 0, \"the empty string should be 0\"",
        "num_ids": 1814
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"",
        "test": "assert     decimal_to_binary(1) == \"db01\"",
        "num_ids": 291
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if len(set(s)) == 1:\n            return True\n        else:\n            return False\n    while len(s) > 1:\n        if len(set(s))!= 1:\n            return False\n        s = s[1:]\n    return True\n",
        "test": "assert     is_happy(\"abb\")    == False, \"is_happy function should return False\"",
        "num_ids": 712
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    res = []\n    for gpa in grades:\n        if gpa >= 3.3:\n            res.append('A')\n        elif gpa >= 3.0:\n            res.append('A-')\n        elif gpa >= 2.7:\n            res.append('B+')\n        elif gpa >= 2.3:\n            res.append('B')\n        elif gpa >= 2.0:\n            res.append('B-')\n        elif gpa >= 1.7:\n            res.append('C+')\n        elif gpa >= 1.3:\n            res.append('C')\n        elif gpa >= 0.7:\n            res.append('C-')\n        elif gpa >= 0.3:\n            res.append('D+')\n        elif gpa >= 0.0:\n            res.append('D')\n        else:\n            res.append('E')\n    return res\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']",
        "num_ids": 1633
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return len(string) in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n",
        "test": "assert     prime_length(\"\") == False, \"Should be False\"",
        "num_ids": 306
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    counter = 0\n    for i in range(1, n+1):\n        str_i = str(i)\n        if str_i[0] == \"1\" and str_i[-1] == \"1\":\n            counter += 1\n        elif str_i[0] == \"1\":\n            counter += 1\n        elif str_i[-1] == \"1\":\n            counter += 1\n    return counter\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 320
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    \n    # Converting N into a string\n    binary = str(bin(N))[2:]\n    \n    # Getting total sum\n    total = 0\n    for i in binary:\n        total += int(i)\n    return total\n    \ndef test(expected, got):\n    \"\"\"\n    Prints 'OK' if expected == got, prints '*' if expected and got are not equal\n    \"\"\"\n    if expected == got:\n        print('OK')\n    else:\n        print('*', expected, '!=', got)\n",
        "test": "assert     solve(20) == 2",
        "num_ids": 315
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    for i in range(1,len(lst)):\n        if i%2==0:\n            lst[i]=lst[i] + lst[i-1]\n    return lst\n",
        "test": "assert ",
        "num_ids": 310
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return \" \".join([word for word in sorted(s.split(), key=lambda x: ord(x))])\n",
        "test": "assert anti_shuffle(\"a b c\") == \"a b c\"",
        "num_ids": 414
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    def _get_row(lst, x, r, c):\n        \"\"\"\n        Find integers x in the row\n        \"\"\"\n        for i in range(len(lst)):\n            if x in lst[i]:\n                r.append(i)\n                c.append(lst[i].index(x))\n        return r, c\n    \n    result = []\n    r, c = _get_row(lst, x, result, [])\n    \n    return sorted(sorted(zip(r, c)), key=lambda x: (x[0], x[1]))\n",
        "test": "assert ",
        "num_ids": 1214
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([]) ==    []",
        "num_ids": 448
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[6:] + alphabet[:6]\n    \n    def encrypt_helper(input_string):\n        if not isinstance(input_string, str):\n            return str\n        return \"\".join([new_alphabet[alphabet.find(letter)] for letter in input_string])\n    \n    return encrypt_helper(s)\n",
        "test": "assert ",
        "num_ids": 689
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    # ********** Attempt 1 - Brute Force **********\n    # Time: O(n^2) / Space: O(1)\n    # for i in range(len(lst)):\n    #     for j in range(i + 1, len(lst)):\n    #         if lst[j] < lst[i]:\n    #             return lst[j]\n",
        "test": "assert     next_smallest([1, 2, 3]) == None",
        "num_ids": 745
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    count = 0\n    \n    for sentence in S.split('.'):\n        if sentence.startswith(\"I\"):\n            count += 1\n    \n    return count\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     is_bored('') == 0, 'No bored sentences'",
        "num_ids": 279
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return x == sum([y,z]) and all([type(n)==int for n in [x, y, z]])\n",
        "test": "assert     any_int(2, 3, 5) == False",
        "num_ids": 235
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    encoded_message = ''\n    for letter in message:\n        if letter in 'aeiouAEIOU':\n            encoded_message += chr(219 - ord(letter))\n        else:\n            encoded_message += letter\n    return encoded_message\n",
        "test": "assert ",
        "num_ids": 277
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    max_prime = -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    sum_digit = 0\n    for i in lst:\n        if i > max_prime:\n            max_prime = i\n    for i in str(max_prime):\n        sum_digit += int(i)\n    return sum_digit\n",
        "test": "assert ",
        "num_ids": 453
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if len(dict.keys())!= 0:\n        for i in dict.keys():\n            if not isinstance(i, str):\n                return False\n        for j in dict.values():\n            if not isinstance(j, str):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     check_dict_case({}) == False, \"The dictionary is empty\"",
        "num_ids": 1515
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    primes = []\n    i = 2\n    while i < n + 1:\n        for k in range(2, i):\n            if i % k == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    return primes\n",
        "test": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "num_ids": 536
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    r = 0\n    while a > 0:\n        r = r*10 + a%10\n        a = a//10\n    return r*b\n",
        "test": "assert     multiply(1, 2) == 2",
        "num_ids": 292
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n    \n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 2\n    count_lower('dBBE') returns 1\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_odd_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in odd indices.\n    \n    For example:\n    count_odd_vowels('aBCdEf') returns 0\n    count_odd_vowels('abcdefg') returns 2\n    count_odd_vowels('dBBE') returns 1\n    \"\"\"\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n",
        "test": "assert     count_upper('') == 0",
        "num_ids": 623
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    value = float(value)\n    if abs(value) < 1:\n        return int(value)\n    if value > 0:\n        return int(value + 0.5)\n    return int(value - 0.5)\n",
        "test": "assert     closest_integer(\"14.5\") == 15, \"closest_integer incorrect\"",
        "num_ids": 220
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if not n:\n        return []\n    if n == 1:\n        return [1]\n    return make_a_pile(n - 1) + [n + 2]\n",
        "test": "assert     make_a_pile(1)     ==  [1]",
        "num_ids": 580
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return s.split(', ')\n",
        "test": "assert words_string('a') == ['a']",
        "num_ids": 216
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if x <= y:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n    else:\n        return -1\n",
        "test": "assert     choose_num(1, 3) == 2",
        "num_ids": 419
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    avg = (n+m)/2\n    avg = int(avg)\n    return avg\n",
        "test": "assert     rounded_avg(1, 3)     ==  2",
        "num_ids": 422
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    x = list(x)\n    x = sorted(x, reverse=True)\n    unique_x = []\n    for i in x:\n        if not any(i % 10 == j for j in unique_x):\n            unique_x.append(i)\n    return unique_x\n",
        "test": "assert     unique_digits([3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 316
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    if not arr: return []\n    \n    arr.sort()\n    \n    # reverse the array\n    arr.reverse()\n    \n    # get a list of numbers between 1 and 9\n    arr = [str(i) for i in arr if 1 <= int(i) <= 9]\n    \n    # return sorted list of numbers\n    return arr\n",
        "test": "assert by_length([5, 4, 3, 2, 1, 2, 3, 4, 5]) == [1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "num_ids": 714
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if n < 0:\n        raise ValueError(\"n < 0 not allowed\")\n    if n == 0:\n        return []\n    result = f(n-1)\n    if n%2 == 0:\n        result.append(n)\n    else:\n        result.extend(list(range(1,n+1)))\n    return result\n    \nif __name__ == '__main__':\n    print(f(5))\n    print(f(6))\n    print(f(7))\n    print(f(10))\n    print(f(11))\n    print(f(12))",
        "test": "assert ",
        "num_ids": 420
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "test": "assert ",
        "num_ids": 596
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sum(1 for i in arr if sum(int(c) for c in str(abs(i))) > 0)\n",
        "test": "assert     count_nums([]) == 0, \"Empty array\"",
        "num_ids": 332
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    #Base case \n    if len(arr) == 0:\n        return True\n",
        "test": "assert ",
        "num_ids": 253
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # IMPLEMENT THIS FUNCTION HERE\n    if sum(lst1) == 0:\n        return \"YES\"\n    if sum(lst2) == 0:\n        return \"NO\"\n    if sum(lst1) % 2!= 0:\n        return \"NO\"\n    return \"YES\"",
        "test": "assert     exchange([1, 2, 3], [2, 3, 1]) == \"YES\", \"Error!\"",
        "num_ids": 837
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    d = {}\n    for e in test:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return d\n",
        "test": "assert     histogram('hello world') == {'o': 1, 'w': 1, 'h': 1, 'l': 1}",
        "num_ids": 481
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if len(s)==0:\n        return (\"\",True)\n    if len(c)==0:\n        return (\"\",False)\n    i=0\n    j=0\n    result=\"\"\n    while i<len(s) and j<len(c):\n        if s[i]==c[j]:\n            result=result+s[i]\n            i=i+1\n            j=j+1\n        else:\n            i=i+1\n    if j<len(c):\n        result=result+s[i:]\n    if i<len(s):\n        result=result+s[:i]\n    if s==result:\n        return (result,True)\n    return (result,False)\n",
        "test": "assert     reverse_delete('abc', 'c') == ('c', True)",
        "num_ids": 648
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    output = []\n    for i in lst:\n        odds = 0\n        for j in i:\n            if j % 2!= 0:\n                odds += 1\n        output.append(f'the number of odd elements {odds}n the str{i}ng {odds} of the {i}nput.')\n    return output\n",
        "test": "assert ",
        "num_ids": 542
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # initialize two variables: curr_sum, min_sum\n    # for each index, subtract nums[index]\n    # if curr_sum is less than min_sum, update min_sum\n    curr_sum = 0\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        # if the curr_sum is less than min_sum, update min_sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        # if the curr_sum is equal to min_sum,\n        # update curr_sum to the curr_sum\n        elif curr_sum == min_sum:\n            curr_sum = curr_sum + nums[i + 1]\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 685
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # Consider all possible wells and keep track of the minimum number of\n    # steps to go down the wells.\n    wells = []\n    n = len(grid)\n    for i in range(n):\n        row = grid[i]\n        wells.append([i, 0, 0, 0])\n        wells[i][1] = row.count(1)\n    \n    wells = sorted(wells, key=lambda x:x[1], reverse=True)\n",
        "test": "assert ",
        "num_ids": 1596
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count(\"1\")))\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 493
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return [word for word in s.split() if len([x for x in word if x.lower() in \"aeiou\"]) == n]\n",
        "test": "assert     select_words('', 0) == []",
        "num_ids": 390
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"AEIOU\":\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('owen') == ''",
        "num_ids": 311
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    # Write your code here\n    stack = []\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'\n",
        "test": "assert     match_parens(('(())', ) ) == 'Yes', 'Test 1 fails'",
        "num_ids": 1447
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert     maximum([1], 1) == [1]",
        "num_ids": 421
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2)])\n",
        "test": "assert     solution([1, 1]) == 1, \"2\"",
        "num_ids": 421
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Edge case\n    if not arr or k > len(arr):\n        return 0\n",
        "test": "assert not add_elements([12], 1)",
        "num_ids": 502
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    odd_list = []\n    while n > 1:\n        if n % 2:\n            odd_list.append(n)\n            n = 3 * n + 1\n        else:\n            n //= 2\n    odd_list.append(1)\n    return odd_list\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 488
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if date==\"\":\n        return False\n    else:\n        month=int(date[0:2])\n        day=int(date[3:5])\n        year=int(date[6:10])\n        if year>=0 and year<=9999:\n            if month<1 or month>12:\n                return False\n            if month in (1,3,5,7,8,10,12):\n                if day<=31:\n                    return True\n                else:\n                    return False\n            if month in (4,6,9,11):\n                if day<=30:\n                    return True\n                else:\n                    return False\n            if month==2:\n                if (year%4==0 and year%100!=0) or (year%4==0 and year%100==0 and year%400==0):\n                    if day<=29:\n                        return True\n                    else:\n                        return False\n                else:\n                    if day<=28:\n                        return True\n                    else:\n                        return False\n        else:\n            return False\n",
        "test": "assert     valid_date('') == False",
        "num_ids": 1114
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    words = txt.lower().split()\n    res = []\n    for i in words:\n        res.append(i)\n    return res\n",
        "test": "assert     split_words('test') == ['test']",
        "num_ids": 325
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if len(lst) == 0 or len(lst) == 1:\n        return True\n    if lst[0] >= lst[1]:\n        return is_sorted(lst[1:])\n    return False\n",
        "test": "assert ",
        "num_ids": 259
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if not interval1[0] <= interval2[0] <= interval1[1] or not interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if (interval1[1] - interval1[0]) == (interval2[1] - interval2[0]):\n        return \"YES\"\n    if (interval1[1] - interval1[0]) % 2 == 0:\n        return \"YES\"\n    if (interval1[1] - interval1[0]) > 2:\n        return \"YES\"\n    if (interval2[1] - interval2[0]) % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"NO\"",
        "num_ids": 588
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if len(arr) == 0:\n        return None\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            if i == 0:\n                arr[i] *= -1\n            else:\n                arr[i] *= -1\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] * prod_signs(arr[1:])\n",
        "test": "assert     prod_signs([1, 0, -2, 0]) == 0",
        "num_ids": 517
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    M, N = len(grid), len(grid[0])\n    if k == 0 or not grid or not grid[0]:\n        return grid\n",
        "test": "assert ",
        "num_ids": 558
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    \n    a = 1\n    b = 2\n    c = 3\n    \n    l = [a,b,c]\n    \n    for i in range(n-2):\n        a,b,c = b,c,a + b + c\n        l.append(a)\n        \n    return l\n",
        "test": "assert      tri(2)      ==      [1, 2, 3], \"n = 2, 1 + 2 + 3 = 5\"",
        "num_ids": 592
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    if n % 10 % 2!= 0:\n        return 0\n    return 1 + digits(n//10)\n",
        "test": "assert digits(1) == 0",
        "num_ids": 222
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    nested = False\n    string = string.replace(' ', '')\n    for i in range(0, len(string)):\n        if (string[i] == '[') and (string[i] == ']') and (string[i+1] == '['):\n            nested = True\n    return nested\n",
        "test": "assert not is_nested('([{}])')",
        "num_ids": 409
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Your code here\n    lst = [float(x)**2 for x in lst]\n    return sum(lst)\n    \n",
        "test": "assert     sum_squares(['a', 'b', 'c', 'd']) == 'a^2 + b^2 + c^2 + d^2'",
        "num_ids": 468
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    #pass\n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha():\n            if txt.split() == []:\n                return True\n            else:\n                return False\n        else:\n            return False\n    ",
        "test": "assert check_if_last_char_is_a_letter('word') == False",
        "num_ids": 430
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    \n    if len(arr) < 3:\n        return -1\n",
        "test": "assert ",
        "num_ids": 458
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    if any(x < 0 for x in lst):\n        return (None, None)\n    return (min(lst), max(lst))",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 757
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # if a is None or b is None:\n    #     return None\n    # if a == b:\n    #     return None\n    # elif a > b:\n    #     return a\n    # else:\n    #     return b\n",
        "test": "assert     compare_one(1, 1) == None",
        "num_ids": 486
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    return n % 2 == 0 and (n // 2) % 2 == 0 and (n // 2) * 2 == n\n",
        "test": "assert     is_equal_to_sum_even(12) == True",
        "num_ids": 327
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    f = 1\n    for i in range(1,n+1):\n        f = f * i\n    return f\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 338
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    return text.replace(' ', '_')\n",
        "test": "assert     fix_spaces(\"this has a space\") == \"this_has_a_space\"",
        "num_ids": 219
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    file_name = file_name.replace(\".\", \"\")\n    if file_name.count(\".\") > 1 or len(file_name) == 0 or not file_name[0].isalpha() or not file_name[1:].isalpha():\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert     file_name_check('ex.txt') == 'Yes'",
        "num_ids": 537
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 or i%4!= 0:\n            sum = sum + lst[i]**2\n    return sum\n",
        "test": "assert sum_squares([1,2,3,4,5]) == 1 + 4 + 9 + 16",
        "num_ids": 645
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    words = []\n    for word in sentence.split():\n        words.append(word)\n",
        "test": "assert ",
        "num_ids": 348
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 358
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), x))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 551
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    oddCount = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            oddCount += 1\n    return oddCount\n",
        "test": "assert     specialFilter([-1, -3, -5, -7, -9, -3, -1]) == 8",
        "num_ids": 363
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i*i - i + 1) % 3 == 0 and (j*j - j + 1) % 3 == 0 and (i*j*j - i + j + 1) % 3 == 0:\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 353
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # Create a list that contains all of the planets.\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    # Create a list to store the distances between the orbits of planet1 and planet2\n    distances = []\n    # Create a dictionary to store the orbits of planet1 and planet2\n    orbits = {}\n    for p in planets:\n        orbits[p] = []\n    # Set the distance between planet1 and planet2 to infinity\n    distances.append(float('inf'))\n    # Create an empty list to store the shortest distances from planet1 and planet2\n    shortest_distances = []\n    # Create a list to store the shortest distances from planet1 and planet2\n    shortest_distances_planets = []\n    # Get the index of planet1\n    planet1_index = planets.index(planet1)\n    # Get the index of planet2\n    planet2_index = planets.index(planet2)\n    # Create a for loop to calculate the distance between planet1 and planet2\n    for i in range(len(planets)):\n        distances[i] = distances[i] + get_distance(planets[planet1_index], planets[i])\n        distances[i] = distances[i] + get_distance(planets[i], planets[planet2_index])\n    # Get the shortest distance from planet1 and planet2\n    for i in range(len(distances)):\n        if distances[i] < distances[planet1_index]:\n            distances[i] = distances[i] - get_distance(planets[i], planets[planet1_index])\n            shortest_distances.append(distances[i])\n        if distances[i] < distances[planet2_index]:\n            distances[i] = distances[i] - get_distance(planets[i], planets[planet2_index])\n            shortest_distances.append(distances[i])\n    # Get the index of the shortest distance from planet1 and planet2\n    shortest_distance_index_1 = 0\n    shortest_distance_index_2 = 0\n    # Create a for loop to find the shortest distance from planet1 and planet2\n    for i in range(len(shortest_distances)):\n        if shortest_distances[i] < shortest_distances[shortest_distance_index_1]:\n            shortest_distance_index_1 = i\n        if shortest_distances[i] < shortest_distances[shortest_distance_index_2]:\n            shortest_distance_index_2 = i\n    # Create a list to store the shortest distance from planet1 and planet2\n    shortest_distances_planets.append(planets[shortest_distance_index_1])\n    shortest_distances_planets.append(planets[shortest_distance_index_2])\n    # Return the shortest distance from planet1 and planet2\n    return shortest_distances_planets\n",
        "test": "assert     (bf('Earth', 'Venus') == (('Earth', 'Venus'), ('Venus', 'Mercury'), ('Mercury', 'Mars'), ('Mars', 'Jupiter'), ('Jupiter', 'Saturn'), ('Saturn', 'Uranus'), ('Uranus', 'Neptune')))",
        "num_ids": 2668
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    s = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            s.append(i)\n    return sorted(s)\n",
        "test": "assert ",
        "num_ids": 416
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return y\n    return x\n",
        "test": "assert     x_or_y(1, 1, 1)     ==     1",
        "num_ids": 266
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    if len(lst) == 0:\n        return 0\n    return sum([x**2 for x in lst if (x % 2)!= 0])\n",
        "test": "assert     double_the_difference([]) == 0, \"Empty list\"",
        "num_ids": 374
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    results = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            results.append(0)\n        else:\n            results.append(abs(guess[i] - game[i]))\n    return results\n",
        "test": "assert     compare([(0,0,0),(1,1,1)],[(0,0,0),(1,1,1)]) == [0,0]",
        "num_ids": 791
    },
    {
        "number": 153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    \n    return class_name + '.' + extensions[0]\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 678
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return any(i in b for i in a[1:])\n",
        "test": "assert     cycpattern_check(\"cab\",\"ca\") == True",
        "num_ids": 372
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    even = 0\n    odd = 0\n",
        "test": "assert even_odd_count(1234) == (1, 3)",
        "num_ids": 339
    },
    {
        "number": 156,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if number == 1:\n        return \"I\"\n    elif number == 2:\n        return \"II\"\n    elif number == 3:\n        return \"III\"\n    elif number == 4:\n        return \"IV\"\n    elif number == 5:\n        return \"V\"\n    elif number == 6:\n        return \"VI\"\n    elif number == 7:\n        return \"VII\"\n    elif number == 8:\n        return \"VIII\"\n    elif number == 9:\n        return \"IX\"\n    elif number == 10:\n        return \"X\"\n    elif number == 11:\n        return \"XI\"\n    elif number == 12:\n        return \"XII\"\n    elif number == 13:\n        return \"XIII\"\n    elif number == 14:\n        return \"XIV\"\n    elif number == 15:\n        return \"XV\"\n    elif number == 16:\n        return \"XVI\"\n    elif number == 17:\n        return \"XVII\"\n    elif number == 18:\n        return \"XVIII\"\n    elif number == 19:\n        return \"XIX\"\n    elif number == 20:\n        return \"XX\"\n    elif number == 30:\n        return \"XXX\"\n    elif number == 40:\n        return \"XL\"\n    elif number == 50:\n        return \"L\"\n    elif number == 60:\n        return \"LX\"\n    elif number == 70:\n        return \"LXX\"\n    elif number == 80:\n        return \"LXXX\"\n    elif number == 90:\n        return \"XC\"\n    elif number == 100:\n        return \"C\"\n    elif number == 200:\n        return \"CC\"\n    elif number == 300:\n        return \"CCC\"\n    elif number == 400:\n        return \"CD\"\n    elif number == 500:\n        return \"D\"\n    elif number == 600:\n        return \"DC\"\n    elif number == 700:\n        return \"DCC\"\n    elif number == 800:\n        return \"DCCC\"\n    elif number == 900:\n        return \"CM\"\n    elif number == 1000:\n        return \"M\"\n    else:\n        return \"-\"",
        "test": "assert     int_to_mini_roman(1) == \"I\"",
        "num_ids": 1369
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return (a*a) == (b*b) + (c*c)\n",
        "test": "assert     right_angle_triangle(1,2,3) == False",
        "num_ids": 1398
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['hello', 'hello']) == 'hello', \"Find_max\"",
        "num_ids": 352
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    total = number + remaining\n    eaten = number - need\n    \n    if (total == 0 and eaten == 0):\n        return []\n    elif (total == 0 and eaten > 0):\n        return [-1, eaten]\n    elif (total > 0 and eaten == 0):\n        return [-2, total]\n    else:\n        return [-1, total-eaten]\n",
        "test": "assert ",
        "num_ids": 1506
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if len(operator) > 1:\n        if operator[0] == '+':\n            return sum(operand)\n        elif operator[0] == '-':\n            return sum(operand)\n        elif operator[0] == '*':\n            return sum(operand)\n        elif operator[0] == '/':\n            return sum(operand) // (len(operand)-1)\n        elif operator[0] == '**':\n            return sum(operand) ** (len(operand)-1)\n    else:\n        return operand[0]\n",
        "test": "assert do_algebra(['+', 2], [1, 2]) == 3",
        "num_ids": 499
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    string = s\n    if not string.isalpha():\n        return string[::-1]\n    for index, i in enumerate(string):\n        if i.islower():\n            string = string[:index] + string[index].upper() + string[index + 1:]\n            string = string[:index] + string[index].lower() + string[index + 1:]\n        elif i.isupper():\n            string = string[:index] + string[index].lower() + string[index + 1:]\n            string = string[:index] + string[index].upper() + string[index + 1:]\n        else:\n            pass\n    return string\n",
        "test": "assert not solve('a') == solve('b')",
        "num_ids": 740
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 405
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return list(range(a, b+1, 2))\n",
        "test": "assert generate_integers(10, 10) == [10]",
        "num_ids": 157
    }
]