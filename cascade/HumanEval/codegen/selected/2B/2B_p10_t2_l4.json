[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    sorted_numbers = sorted(numbers)\n    last_number = sorted_numbers[0]\n    for number in sorted_numbers[1:]:\n        if number - last_number <= threshold:\n            return True\n        else:\n            last_number = number\n    return False\n",
        "test": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.1) == True",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    result = []\n    open_parens = ['(', '[', '{']\n    close_parens = [')', ']', '}']\n    open_stack = []\n    idx = 0\n    while idx < len(paren_string):\n        curr_paren = paren_string[idx]\n        if curr_paren in open_parens:\n            open_stack.append(curr_paren)\n        elif curr_paren in close_parens:\n            if not open_stack:\n                result.append(curr_paren)\n            else:\n                open_paren = open_stack.pop()\n                if open_paren == '(':\n                    result.append('()')\n                elif open_paren == '[':\n                    result.append('[]')\n                elif open_paren == '{':\n                    result.append('{}')\n        idx += 1\n    return result\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    \n    number = number + 0.001\n    # print(f'number = {number}')\n    \n    int_part, dec_part = math.modf(number)\n    # print(f'int_part = {int_part}')\n    # print(f'dec_part = {dec_part}')\n    \n    int_part = int(int_part)\n    # print(f'int_part = {int_part}')\n    \n    return dec_part\n",
        "test": "assert     truncate_number(0.125) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    n = len(operations)\n    if n == 0:\n        return False\n    i = 0\n    while i < n - 1:\n        if operations[i] <= 0:\n            i += 1\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     below_zero([0,1,0,2,3,-5]) is False",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    avg = sum(numbers) / len(numbers)\n    return sum([abs(n - avg) for n in numbers]) / len(numbers)\n",
        "test": "assert ",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    if len(numbers) == 0:\n        return []\n    return [delimeter] + numbers + [delimeter]\n",
        "test": "assert ",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    paren_stack = []\n    result = []\n    for paren in paren_string.split(' '):\n        if paren == '(':\n            paren_stack.append(1)\n        elif paren == ')':\n            while paren_stack and paren_stack[-1]!= 0:\n                paren_stack.pop()\n            paren_stack.pop()\n        else:\n            paren_stack.append(0)\n    for i in range(len(paren_stack)):\n        result.append(paren_stack[i])\n    return result\n",
        "test": "assert     parse_nested_parens('()') == [0]",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring(['apple', 'banana', 'potato'], 'potato') == ['potato']",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    return (total, product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if not res or res[-1] < numbers[i]:\n            res.append(numbers[i])\n        else:\n            res.append(max(res[-1], numbers[i]))\n    return res\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5])    ==    [1, 2, 3, 4, 5]",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    if not string:\n        return ''\n    \n    # Find longest prefix that is a palindrome\n    prefix = string[:len(string)//2]\n    while prefix and not is_palindrome(prefix):\n        prefix = prefix[:-1]\n    \n    if prefix:\n        # Append the prefix to the end of the string\n        return string + prefix\n    else:\n        return string\n",
        "test": "assert     is_palindrome('ab') == False",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert     string_xor(\"\", \"\") == \"\"",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        tmp = strings[0]\n        for string in strings:\n            if len(string) >= len(tmp):\n                tmp = string\n        return tmp\n",
        "test": "assert     longest(['aaa','aaa','aaa']) == 'aaa'",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n",
        "test": "assert     greatest_common_divisor(4, 2) == 2",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "assert     all_prefixes(\"A\") == [\"A\"]",
        "num_ids": 2619,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return '{0} {1}'.format(n, string_sequence(n - 1))\n",
        "test": "assert \"0 1 2 3 4 5 6 7 8 9 10\".split() == [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0, \"Expected 0\"",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    res = []\n    for i in music_string:\n        if i == 'o':\n            res.append(4)\n        elif i == 'o|':\n            res.append(2)\n        elif i == '.':\n            res.append(1)\n    return res\n",
        "test": "assert     parse_music(\"\") == []",
        "num_ids": 3325,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    count = 0\n    index = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('google.com','e') == 1, \"Should be 1, but it's not\"",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    largest = numbers[0]\n    smallest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (smallest, largest)\n",
        "test": "assert     find_closest_elements([2,4]) == (2,4)",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0.5, 0.4, 1]) == [0, 0.5, 0.4, 1]",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([0, 1, 2, 3]) == [0, 1, 2, 3]",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"h\") == 1",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    divisor = 1\n    while n%divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(1) == 1, \"Test case 1 failed\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n//2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n//i\n    if n!= 1:\n        result.append(n)\n    return result\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return list(set(numbers))\n    #return list(map(numbers.remove, numbers))\n",
        "test": "assert     remove_duplicates([1,2,3,4]) ==     [1,2,3,4]",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert     concatenate([\"Tina\", \"Coder\"]) == \"TinaCoder\"",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([], \"ab\") == []",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    if n == 2:\n        return True\n    if n <= 3 or n % 2 == 0:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == False",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            return xs[i]\n    return -999999\n",
        "test": "assert ",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    \n    l_copy = l.copy()\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n    \n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    \n    l_copy.sort()\n    return l_copy\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    s = set(l)\n    return sorted(s)\n",
        "test": "assert     unique([1, 2, 3, 3, 2, 1]) == [1, 2, 3]",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    max_num = l[0]\n    for i in range(len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "test": "assert     max_element([2, 6, 8, 10]) == 10, 'Max element in the list'",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return sum(n // i == 7 or n // i == 13 for i in range(1, n + 1))\n",
        "test": "assert     fizz_buzz(1) == 0, \"1 should be 0\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            new_l.append(l[i])\n    for i in range(len(l)):\n        if i%2!= 0:\n            new_l.append(l[i])\n    return new_l\n",
        "test": "assert     sort_even([0,1,2,3,4,5]) == [0,2,4,1,3,5]",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic('a') == 'a'",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    if n <= 1:\n        return 2\n    a = 3\n    b = 5\n    fib_n = a + b\n    while fib_n!= n:\n        fib_n = a + b\n        a = b\n        b = fib_n\n    return fib_n\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    # Set up\n    car_col_count = 0\n    \n    # Loop through cars\n    for car_index in range(n):\n        # Loop through cars\n        for other_index in range(n):\n            # if car_index!= other_index\n            if car_index!= other_index:\n                # if car_index is moving left to right\n                if (car_index < n - 1):\n                    # if car_index is moving right to left\n                    if (car_index > 0):\n                        # if cars are overlapping\n                        if car_index == other_index:\n                            # increment car collision count\n                            car_col_count += 1\n        \n    return car_col_count\n",
        "test": "assert     car_race_collision(1) == 0, \"Test 1 Failed\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    # Base 10 to Base 2\n    x_in_base2 = format(x, 'b')\n    x_in_base10 = int(x_in_base2, 2)\n    return str(x_in_base10)\n",
        "test": "assert     change_base(1, 10) == '1'",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return a * h / 2\n",
        "test": "assert     triangle_area(1, 2) == 1",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(0) == 0, 'fib4(0)'",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    # find the middle element\n    n = len(l)\n    if n == 0:\n        return None\n    else:\n        mid = n // 2\n        if n % 2 == 0:\n            return (l[mid] + l[mid - 1]) / 2.0\n        else:\n            return l[mid]",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3, \"Wrong median\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return text == text[::-1]\n",
        "test": "assert not is_palindrome(\"A man, a plan, a canal: Panama\")",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "    # The modulus is defined to be 0 modulo the prime number p\n    return n % p\n",
        "test": "assert     modp(10, 5) == 0, \"10 mod 5 should be 0\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"cxryzihanpvbcf\") == \"xiryszphbwcfl\"",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return text[0:].replace('a','b').replace('e','b').replace('i','b').replace('o','b').replace('u','b')\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     remove_vowels('A mere monkey is not') =='reduced'",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert not below_threshold([5, 1, 3, 4, 5], 5)",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return x + y\n",
        "test": "assert     add(0, 5) == 5",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "test": "assert     same_chars('grape', 'applee') == False",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    assert n > 0\n    if n <= 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    while \"<\" in brackets:\n        left = brackets.index(\"<\")\n        bracket = brackets[left]\n        if bracket == \"<\":\n            if \">\" not in brackets[left+1:]:\n                return False\n        if bracket == \">\":\n            if \">\" not in brackets[left+1:]:\n                return False\n        brackets = brackets[left+1:]\n    return True\n",
        "test": "assert     correct_bracketing(\"<]\") == False",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    a = l[0]\n    if len(l) == 1:\n        return True\n    for i in range(1, len(l)):\n        if a < l[i]:\n            return False\n        a = l[i]\n    return True\n",
        "test": "assert     monotonic([1, 2, 4, 3]) == False",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    l1 = set(l1)\n    l2 = set(l2)\n    return sorted(l1 & l2)\n",
        "test": "assert     common([], []) == []",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    largest = 0\n    if n == 0:\n        return -1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > largest:\n        largest = n\n    return largest\n",
        "test": "assert largest_prime_factor(3) == 3",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    i = 1\n    total = 0\n    while i <= n:\n        total += i\n        i += 1\n    print(total)\n    return total\n",
        "test": "assert sum_to_n(10) == 55",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    num_open = brackets.count(\"(\")\n    num_close = brackets.count(\")\")\n    return num_open == num_close\n",
        "test": "assert     correct_bracketing(\"\") == True, \"Test 1 Passed\"",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    return [i * x for i, x in enumerate(xs[1:], start=1)]\n",
        "test": "assert     derivative([0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0]) == \\",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    count = 0\n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"aabb\") == 2",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    # number of digits in x\n    digits = len(str(x))\n    # circular shift of x by shift\n    circ_shift = x * shift\n    # set leftmost digits in the original integer to the rightmost digits of\n    # the new integer\n    if shift > digits:\n        circ_shift = circ_shift[:-shift]\n    return str(circ_shift)\n",
        "test": "assert     circular_shift('123456789', 1) == '123456789'",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    # Do your work here\n    return sum([int(i) for i in s.upper() if i.isdigit()])\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    a = s.split()\n    sum = 0\n    for i in range(1, len(a) - 1):\n        if a[i] == \"apples\":\n            sum += int(a[i - 1])\n        if a[i] == \"oranges\":\n            sum += int(a[i - 1])\n    if a[len(a) - 1] == \"oranges\":\n        sum += int(a[len(a) - 1])\n    return sum",
        "test": "assert     fruit_distribution(\"00\",2) == 0",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    if not arr:\n        return arr\n",
        "test": "assert pluck([1, 2, 3]) == [1, 1]",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    lst.sort(reverse=True)\n    for i in range(0, len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1",
        "test": "assert     search([1,1,1,1,1]) == 1, 'incorrect'",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    if len(lst) == 0:\n        return lst\n    return sorted(lst, key=lambda x: (x, -x))\n",
        "test": "assert     strange_sort_list([10,1,4,1,4,6,3,2,2]) ==     [1,1,2,2,3,4,4,6,10]",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    a, b, c = sorted((a, b, c))\n    if a + b > c and a + c > b and b + c > a:\n        return (a * b * 0.5)\n    return -1\n",
        "test": "assert     triangle_area(a=5, b=8, c=12) == 20",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    def f(l):\n        if l[0] == l[-1] and l[0] == len(l)-1:\n            if sum(l) <= w:\n                return True\n        else:\n            return False\n    return f(q)",
        "test": "assert     will_it_fly([3,6,1,5],3) == False",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    arr.sort()\n    rev = arr[::-1]\n    i = 0\n    j = len(arr)-1\n    ans = len(arr)\n    while i < j:\n        if arr[i]!= rev[j]:\n            ans = min(ans, j-i)\n            if arr[i] < rev[j]:\n                i += 1\n            else:\n                j -= 1\n        else:\n            i += 1\n            j -= 1\n    return ans\n",
        "test": "assert     smallest_change([]) == 0, \"Empty list\"",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match(['AA', 'AA'], ['BB', 'AA']) == ['AA', 'AA'], 'Error 2'",
        "num_ids": 2095,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    for i in range(2,100):\n        if a % i == 0:\n            if(i % 3 ==0 or i % 5 ==0):\n                return True\n            return False\n    return False\n",
        "test": "assert     is_multiply_prime(0) == False",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return x**n == x\n",
        "test": "assert     is_simple_power(24, 3) == False, \"Wrong\"",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "    if (a**3) % a == 0:\n        return True\n    return False\n",
        "test": "assert     iscube(1) == True, \"iscube(1) = False\"",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    res = 0\n    for i in num:\n        res += 1 if i in 'ABED1A33' else 0\n    return res\n",
        "test": "assert     hex_key(\"\") ==     0, \"check the correctness of hex_key\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    if decimal < 0:\n        raise ValueError(\"This function can't be applied to negative numbers\")\n    return f\"db{decimal:b}\"\n",
        "test": "assert     decimal_to_binary(1) == 'db1'",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s)-2):\n        if s[i] not in seen:\n            seen.add(s[i])\n        else:\n            return False\n    return True\n",
        "test": "assert     is_happy('aa') == False",
        "num_ids": 1684,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    grades = sorted(grades)\n    grades_list = []\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades_list.append(\"A+\")\n        elif grades[i] >= 3.7:\n            grades_list.append(\"A\")\n        elif grades[i] >= 3.3:\n            grades_list.append(\"A-\")\n        elif grades[i] >= 3.0:\n            grades_list.append(\"B+\")\n        elif grades[i] >= 2.7:\n            grades_list.append(\"B\")\n        elif grades[i] >= 2.3:\n            grades_list.append(\"B-\")\n        elif grades[i] >= 2.0:\n            grades_list.append(\"C+\")\n        elif grades[i] >= 1.7:\n            grades_list.append(\"C\")\n        elif grades[i] >= 1.3:\n            grades_list.append(\"C-\")\n        elif grades[i] >= 1.0:\n            grades_list.append(\"D+\")\n        elif grades[i] >= 0.7:\n            grades_list.append(\"D\")\n        elif grades[i] >= 0.0:\n            grades_list.append(\"D-\")\n        elif grades[i] < 0.0:\n            grades_list.append(\"E\")\n    return grades_list\n",
        "test": "assert     numerical_letter_grade([3.0, 4.0, 4.0]) == ['B+', 'A+', 'A+']",
        "num_ids": 4112,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 110,
        "answer": "    return True if len(string) > 1 and all(string[i]!= string[i + 1] for i in range(len(string) - 1)) else False\n",
        "test": "assert     prime_length(\"\") == False, \"Empty string should return False\"",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if int(str(i)[0]) == 1 or int(str(i)[-1]) == 1:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(2) == 1",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    return str(bin(N)).replace(\"0b\", \"\")\n",
        "test": "assert     solve(0) == \"0\", \"Wrong!\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2!= 0:\n                lst.append(lst[i])\n    return lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    new_str = \"\"\n    for i in s.split(\" \"):\n        new_str += \" \" + i[::-1]\n    return new_str[1:]\n",
        "test": "assert ",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    \n    if lst == []:\n        return []\n    elif lst[0] == []:\n        return []\n    else:\n        return get_row(lst[1:], x) + [(i, j) for i, row in enumerate(lst) for j in sorted(row, reverse=True)]\n    \ndef get_col(lst, y):\n    \"\"\"\n    Same as above, but in different order.\n    \"\"\"\n    \n    if lst == []:\n        return []\n    elif lst[0] == []:\n        return []\n    else:\n        return get_col(lst[1:], y) + [(i, j) for i, row in enumerate(lst) for j in sorted(row)]\n    \ndef get_cell(lst, x, y):\n    \"\"\"\n    Same as above, but in different order.\n    \"\"\"\n    \n    if lst == [] or lst == [[]]:\n        return []\n    elif lst[0] == [] or lst[0] == [[]]:\n        return []\n    else:\n        return get_cell(lst[1:], x, y) + [(i, j) for i, row in enumerate(lst) for j in sorted(row)]",
        "test": "assert     get_row([[], []], 1) == []",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    sorted_array = []\n",
        "test": "assert     sort_array([1]) == None, \"Input 1\"",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "    string = list(s)\n    index = 0\n    while index < len(string):\n        if ord(string[index]) >= 65 and ord(string[index]) <= 90:\n            string[index] = chr(ord(string[index]) - 2)\n        else:\n            string[index] = chr(ord(string[index]) + 2)\n        index += 1\n    encryp_string = ''.join(string)\n    return encryp_string\n",
        "test": "assert     encrypt(\"\") == \"\"",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    if not lst: return None\n    min_val = lst[0]\n    min_idx = 0\n    for idx, val in enumerate(lst):\n        if val < min_val:\n            min_val = val\n            min_idx = idx\n    return lst[min_idx+1]\n",
        "test": "assert     next_smallest([1,2,3]) == 2, \"Should return the next smallest number.\"",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    count = 0\n    for i in S.split():\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n",
        "test": "assert     is_bored('') == 0, 'Empty string'",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    a,b,c=x,y,z\n    if a+b==c:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     any_int(3, 3, 4) == False",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    alpha = list('abcdefghijklmnopqrstuvwxyz')\n    for letter in range(len(message)):\n        if message[letter].isalpha() and message[letter].lower()!= message[letter]:\n            if message[letter] in alpha:\n                if alpha.index(message[letter]) + 2 < 26:\n                    message = message[:letter] + message[letter].lower() + message[letter + 1:letter + 2] + message[letter].upper() + message[letter + 2:]\n                    \n    return message\n",
        "test": "assert     encode('Yaay') == 'Yaay'",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    # your code here\n    for number in lst:\n        temp_number = number\n        prime_flag = False\n        while temp_number > 0:\n            if temp_number % 2 == 0:\n                prime_flag = False\n                break\n            else:\n                prime_flag = True\n            temp_number = temp_number // 10\n        if prime_flag:\n            continue\n        else:\n            largest_prime = 0\n            while temp_number > 0:\n                if temp_number % 10 == 3 or temp_number % 10 == 7:\n                    temp_number = temp_number // 10\n                    continue\n                elif largest_prime < temp_number % 10:\n                    largest_prime = temp_number % 10\n                temp_number = temp_number // 10\n        lst.remove(number)\n        lst.append(largest_prime)\n    return sum(lst)\n",
        "test": "assert     skjkasdkd([])    == 0",
        "num_ids": 3204,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, \"Test 1: Input is empty\"",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [2]\n    arr = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            arr.append(i)\n    return arr\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    return a*b\n",
        "test": "assert     multiply(12, 12) == 144, \"failed unit test 1\"",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return sum(1 for i in range(1, len(s) - 1, 2) if s[i] in 'AEIOU')\n",
        "test": "assert     count_upper(\"\") == 0, \"Empty String\"",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(\"0\")     == 0",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    if n == 0:\n        return []\n    if n % 2 == 0:\n        return make_a_pile(n-2) + [n]\n    if n % 2 == 1:\n        return make_a_pile(n-1) + [n]\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    words = s.split(\", \")\n    return words\n",
        "test": "assert words_string('foo') == ['foo']",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    for num in range(x, y+1):\n        if num % 2 == 0:\n            return num\n",
        "test": "assert     choose_num(2,3) == 2",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int(bin(round((n + m)/2)).replace(\"0b\", \"\"), 2)\n    \n",
        "test": "assert     rounded_avg(1, 1) == 1",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    # Sorting list of all even digits and unique list of odd digits\n    x = sorted(list(set(x) - set([d for d in x if d % 2 == 0])))\n    return x\n",
        "test": "assert     unique_digits([1, 1, 9, 1]) == [1, 9]",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    return_list = []\n    for i in reversed_arr:\n        if i < 10:\n            return_list.append(digits_dict[i])\n        else:\n            return_list.append(i)\n    return return_list\n",
        "test": "assert ",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    # Your code here\n    output = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            output.append(1)\n        else:\n            output.append(int(i*(i+1)/2))\n    return output\n",
        "test": "assert     f(2) == [1,1]",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    n_1 = n\n    n_2 = n - 1\n    n_3 = n + 1\n    res = (0, 0)\n    if n == 1:\n        return (1, 0)\n    if n % 2 == 0:\n        return (1, 0)\n    if n % 2 == 1:\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_1 - i):\n                res = (2, 2)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_2 - i):\n                res = (2, 2)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_3 - i):\n                res = (2, 2)\n                break\n    else:\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_1 - i):\n                res = (1, 1)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_2 - i):\n                res = (1, 1)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_3 - i):\n                res = (1, 1)\n                break\n    return res\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0), \"Fail\"",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            check = True\n            while check:\n                if num % 10 == 0:\n                    num = num//10\n                else:\n                    check = False\n            if num > 0:\n                count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "    # code here\n    if len(arr) == 0:\n        return True\n    arr.append(arr.pop(0))\n    if len(arr) == 1:\n        return True\n    if arr[-2] <= arr[-1]:\n        return False\n    return move_one_ball(arr[:-2])\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 1:\n            return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1[i] = lst1[i] / 2\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            lst2[i] = lst2[i] / 2\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5], [1,2,3,4,5]) == \"NO\"",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    histo = {}\n    \n    if not test:\n        return histo\n    \n    for i in test:\n        if i in histo:\n            histo[i] += 1\n        else:\n            histo[i] = 1\n    \n    return histo\n    \n    \nif __name__ == \"__main__\":\n    # Test cases\n    print(histogram('a b c')) == {'a': 1, 'b': 1, 'c': 1}\n    print(histogram('a b b a')) == {'a': 2, 'b': 2}\n    print(histogram('a b c a b')) == {'a': 2, 'b': 2}\n    print(histogram('b b b b a')) == {'b': 4}\n    print(histogram('')) == {}",
        "test": "assert         histogram(\"abcab\") == {\"a\": 2, \"b\": 2, \"c\": 1}",
        "num_ids": 3162,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    \n    #res = []\n    #for i in range(len(c)):\n    #    if c[i] in s:\n    #        res.append(s.replace(c[i],'',1))\n    #return (''.join(res),True) if all(elem ==res[0] for elem in res) else (''.join(res),False)\n    \n    res,flag = \"\",False\n    for i in range(len(c)):\n        if c[i] in s:\n            s = s.replace(c[i],'',1)\n            flag = True\n    return(res,flag)\n    \nif __name__ == '__main__':\n    s = \"abcde\"\n    c = \"ae\"\n    print(reverse_delete(s,c))\n    \n    s = \"abcdef\"\n    c = \"b\"\n    print(reverse_delete(s,c))\n    \n    s = \"abcdedcba\"\n    c = \"ab\"\n    print(reverse_delete(s,c))",
        "test": "assert     reverse_delete('a','a') == ('',True)",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    str_lst = []\n    for i in range(len(lst)):\n        str_lst.append(lst[i].replace(\"0\", \"\").replace(\"1\", \"\").replace(\"0\", \"\"))\n    for j in range(len(lst)):\n        if len(lst[j]) % 2 == 1:\n            str_lst[j] += \"1\"\n    return [str_lst[i] + \" the number of odd elements \" + str(len(lst[i]) % 2) + \"n the str\" + str(i) + \"ng \" + str(len(lst[i]) % 2) + \"of the \" + str(i) + \"nput.\" for i in range(len(lst))]\n",
        "test": "assert odd_count([]) == [], 'Empty list should return empty list'",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    # Base case\n    if len(nums) == 0:\n        return 0\n    # Initialize the minSum and initial elements\n    minSum = nums[0]\n    currentSum = nums[0]\n    # Iterate over the input array\n    for num in nums:\n        # Check for the current sum and keep track of the minSum\n        currentSum = currentSum + num\n        minSum = min(minSum, currentSum)\n        # Calculate the current sum using minSum\n        currentSum = currentSum - nums[nums.index(num)]\n    return minSum\n",
        "test": "assert     minSubArraySum([1,2]) == 1",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    row_length = len(grid)\n    col_length = len(grid[0])\n    max_columns = math.ceil(capacity/col_length)\n    result = 0\n    for i in range(row_length):\n        result += int(max_columns - grid[i].count(1))\n    return result\n",
        "test": "assert     max_fill([[1,2,0,0],[0,0,1,0],[0,1,0,1],[0,0,1,0]], 3) == 7, 'Wrong max_fill result'",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return sorted(arr, key=lambda x: x*(x>0))\n",
        "test": "assert     sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    return []\n",
        "test": "assert     select_words('bad_', 0) == []",
        "num_ids": 1966,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    for i in range(1, len(word)):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('aapple') == 'a', 'First case'",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    p1 = 0\n    p2 = 0\n    m1 = 0\n    m2 = 0\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            p1 = p1 + 1\n            m1 = m1 + 1\n        if lst[i] == ')':\n            p2 = p2 + 1\n            m2 = m2 + 1\n        if p1 == p2 and m1 == m2:\n            return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(('((()))')) == 'Yes'",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "test": "assert     maximum([], 0) == []",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    x = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            x += lst[i]\n    return x",
        "test": "assert solution([]) == 0",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    # TODO: add your code here\n    n = len(arr)\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    print(sum)\n",
        "test": "assert ",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    odd_nums = []\n    odd_nums.append(1)\n    while n!= 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = 3 * n + 1\n        odd_nums.append(n)\n    odd_nums.sort()\n    return odd_nums\n    \n    \ndef test_get_odd_collatz():\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(7) == [1, 7]\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(16) == [1, 5, 16]\n    assert get_odd_collatz(18) == [1, 6, 18]\n    assert get_odd_collatz(35) == [1, 5, 16, 35]\n    assert get_odd_collatz(90) == [1, 7, 21, 34, 42, 46, 55, 66, 78, 89]\n    assert get_odd_collatz(100) == [1, 7, 21, 34, 45, 55, 65, 78, 89, 100]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    month = {\n        \"01\": 31,\n        \"03\": 31,\n        \"05\": 30,\n        \"07\": 31,\n        \"08\": 31,\n        \"10\": 31,\n        \"12\": 30,\n        \"04\": 30,\n        \"06\": 30,\n        \"09\": 31,\n        \"11\": 30\n    }\n    # check if the month is in the dict\n    month_check = month.get(date.split(\"-\")[0])\n    if not month_check:\n        return False\n    #check if the month is in the dict\n    if date.split(\"-\")[1].isdigit() and len(date.split(\"-\")) == 3:\n        day = int(date.split(\"-\")[1])\n        month_name = date.split(\"-\")[0]\n        year = int(date.split(\"-\")[2])\n        if not (day > 0 and day <= month_check) or not (month_name in month.keys() and day <= month_check):\n            return False\n    else:\n        return False\n    if year > 0 and year < 3000:\n        return True\n    else:\n        return False\n",
        "test": "assert valid_date(\"\") is False",
        "num_ids": 2142,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return txt.split(' ')\n",
        "test": "assert     split_words('foo') == ['foo']",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    count = {}\n    for number in lst:\n        count[number] = count.get(number, 0) + 1\n    return len(count) == len(lst) and count[lst[0]] == 1\n",
        "test": "assert not is_sorted([3,5,5,1,2,4])",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    if interval1[0] < interval1[1] and interval2[0] < interval2[1]:\n        # print(\"YES\")\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] > interval2[1]:\n        # print(\"NO\")\n        return \"NO\"\n    else:\n        # print(\"NO\")\n        return \"NO\"\n",
        "test": "assert not intersection((1, 2), (2, 4)) == \"NO\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if len(arr) == 0:\n        return None\n    sign = 0\n    product = 1\n    for num in arr:\n        if num >= 0:\n            sign += num\n        else:\n            sign = -sign\n        product *= abs(num)\n    return sign * product\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    # Dynamic programming\n    n = len(grid)\n    if n == 0 or k == 0: return []\n    dp = [[float('inf')] * n for _ in range(k+1)]\n    dp[0][0] = 0\n    for i in range(1, k+1):\n        for j in range(n):\n            for k in range(n):\n                if k == 0 or j == 0 or j == n - 1 or k == n - 1:\n                    dp[i][j] = grid[j][k]\n                    continue\n                for l in range(i):\n                    dp[i][j] = min(dp[i][j], dp[l][j-1] + dp[l][j])\n    return grid[n-1][k-1:]\n",
        "test": "assert ",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    res = [1, 1, 1]\n    for i in range(3, n + 1):\n        res.append(sum(res[i - 2: i]))\n    return res\n",
        "test": "assert ",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    return (n % 10) * (n // 10 % 10) * (n // 100 % 10) * (n // 1000 % 10) * (n // 10000)\n",
        "test": "assert digits(0) == 0",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        if i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert not is_nested('[')",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    a = sum(x*x for x in lst)\n    return round(a)",
        "test": "assert     sum_squares([0, 1, 2, 3]) == 14, \"Wrong result\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalpha()\n",
        "test": "assert not check_if_last_char_is_a_letter('Hello world!')",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([1,3,2]) == 1",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    lst.sort()\n    if lst == [] or any([i < 0 for i in lst]):\n        return None, None\n    return (lst[-1], lst[0])\n",
        "test": "assert     largest_smallest_integers([-0.0,-1.0,-2.0,-3.0]) == (None, None)",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        return compare_two(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return compare_two(a, b)\n    else:\n        return a if a > b else b\n",
        "test": "assert     compare_one(1.2, 2) == 2",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    return (n % 2 == 0) and (n % 4 == 0) and (n % 6 == 0) and (n % 8 == 0)\n",
        "test": "assert not is_equal_to_sum_even(1)",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    out = text.strip()\n    if text.count(' ') == 0:\n        return out\n    else:\n        i = 0\n        while i < len(out):\n            if out[i] =='':\n                out = out[:i] + '_' + out[i+1:]\n            i += 1\n        if out.count(' ') > 2:\n            out = out.replace(' ', '-')\n    return out\n",
        "test": "assert     fix_spaces(\"hello\") == \"hello\"",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    for i in range(len(file_name)):\n        if file_name[i].isdigit():\n            return 'No'\n        if i == 0 and not file_name[0].isalpha():\n            return 'No'\n        if file_name[i] == '.':\n            return 'No'\n        if not file_name[i].isalpha() and not file_name[i].isdigit():\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('.pptx') == 'No'",
        "num_ids": 3225,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**2\n        elif i % 4 == 0:\n            sum += i**3\n    return sum\n",
        "test": "assert ",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    s = sentence.split(' ')\n    res = ''\n    for i in s:\n        if len(res) == 0 or len(i) == len(res):\n            res = i\n        else:\n            break\n    return res",
        "test": "assert     words_in_sentence(\"hi\") == \"hi\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    \n    if x.count('/')!= 0:\n        numerator = int(x.split('/')[0])\n        denominator = int(x.split('/')[1])\n        if numerator == 0 or denominator == 0:\n            return False\n        if numerator % denominator == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert not simplify('1/2','1/3')",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return sorted(nums, key=lambda item: sum([int(digit) for digit in str(item)]))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    odds = 0\n    for n in nums:\n        if n % 2 == 1 and n >= 10 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n            odds += 1\n    return odds\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9, 10, 12, 15, 17, 19]) == 3",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    for i in range(n):\n        for j in range(i + 1, n):\n            k = n - (i + j)\n            if i + j + k == n and (i + j) * (i + k) % 3 == 0:\n                return 1\n    return 0\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    \n    x = planet1\n    y = planet2\n    \n    if x == \"Mercury\":\n        if y == \"Venus\":\n            return (\"Venus\")\n        else:\n            return (\"Earth\", \"Mars\", \"Jupiter\")\n            \n    if x == \"Venus\":\n        if y == \"Earth\":\n            return (\"Earth\", \"Mars\", \"Jupiter\")\n        else:\n            return (\"Venus\")\n        \n    if x == \"Mars\":\n        if y == \"Earth\":\n            return (\"Earth\", \"Jupiter\", \"Saturn\")\n        else:\n            return (\"Mars\")\n            \n    if x == \"Jupiter\":\n        if y == \"Saturn\":\n            return (\"Saturn\", \"Uranus\", \"Neptune\")\n        else:\n            return (\"Jupiter\")\n            \n    if x == \"Saturn\":\n        if y == \"Uranus\":\n            return (\"Uranus\", \"Neptune\")\n        else:\n            return (\"Saturn\")\n            \n    if x == \"Uranus\":\n        if y == \"Neptune\":\n            return (\"Neptune\")\n        else:\n            return (\"Uranus\")\n            \n    if x == \"Neptune\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Neptune\")\n    \n    if x == \"Mars\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Mars\")\n            \n    if x == \"Earth\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Earth\", \"Mars\")\n            \n    if x == \"Jupiter\":\n        if y == \"Saturn\":\n            return (\"Saturn\")\n        else:\n            return (\"Jupiter\")\n            \n    if x == \"Saturn\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Saturn\")\n            \n    if x == \"Uranus\":\n        if y == \"Neptune\":\n            return (\"Neptune\")\n        else:\n            return (\"Uranus\")\n            \n    if x == \"Neptune\":\n        if y == \"Saturn\":\n            return (\"Saturn\")\n        else:\n            return (\"Neptune\")\n",
        "test": "assert (sorted(bf('venus','saturn')) == ['venus', 'jupiter', 'neptune'])",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n",
        "test": "assert ",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2, 1, 1) == 1",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    \n    # === Start your solution ===\n    \n    if not lst:\n        return 0\n    \n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num**2\n            \n    return odd_sum\n    \n    # === End of solution ===\n",
        "test": "assert ",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return [abs(guess-score) for guess,score in zip(guess,game)]\n",
        "test": "assert     compare([1,1,1],[1,1,1]) == [0,0,0], 'incorrect result'",
        "num_ids": 1820,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    # class_name = \"my_class\"\n    # extensions = ['AA', 'Be', 'CC']\n    return class_name + \".\" + extensions[0]\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Not Correct'",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    for i in range(1,len(b)):\n        # print(b[:i])\n        if b[:i] in a:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"abc\", \"abc\") == True, \"Should be True\"",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    # complete this function\n    even = 0\n    odd = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n",
        "test": "assert even_odd_count(1) == (0, 1)",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    num_to_roman_map = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"l\",\n                        50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\",\n                        1000: \"m\", 3000: \"ml\", 3100: \"mc\", 4000: \"cdxiv\", 5000: \"dv\",\n                        4999: \"cdxvi\"}\n    roman_num = \"\"\n    while number > 0:\n        for key in num_to_roman_map:\n            if key <= number:\n                roman_num += num_to_roman_map[key]\n                number -= key\n                break\n    return roman_num.lower()\n",
        "test": "assert     int_to_mini_roman(1) == \"i\"",
        "num_ids": 3119,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "    if a == b and a == c:\n        return False\n    elif a == b or a == c or b == c:\n        return True\n    else:\n        if (a**2) + (b**2) == (c**2):\n            return True\n        else:\n            return False\n",
        "test": "assert     right_angle_triangle(4, 5, 6) == False",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    \n    max_char = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_char = len(set(word))\n        if unique_char > max_char:\n            max_char = unique_char\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"abcde\", \"y\"]) == \"abcde\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    \n    # Your code starts here!\n",
        "test": "assert     eat(0, 0, 0) == None",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    result = None\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result = operand[0] + operand[1]\n        elif operator[i] == '-':\n            result = operand[0] - operand[1]\n        elif operator[i] == '*':\n            result = operand[0] * operand[1]\n        elif operator[i] == '/':\n            result = operand[0] // operand[1]\n        elif operator[i] == '**':\n            result = operand[0] ** operand[1]\n        i += 1\n    return result\n",
        "test": "assert ",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert solve(\"\") == \"\"",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") is None",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n",
        "test": "assert     generate_integers(1, 10) == [2,4,6,8,10]",
        "num_ids": 525,
        "indeed": false
    }
]