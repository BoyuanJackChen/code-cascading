[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4], 0) == False"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    new_string = []\n    string = paren_string.strip().replace(' ', '')\n    i = 0\n    while i < len(string):\n        if string[i] == '(':\n            i += 1\n            while string[i]!= ')':\n                i += 1\n            new_string.append(string[:i+1])\n            string = string[i+1:]\n            i = 0\n        elif string[i] == ')':\n            i += 1\n            while string[i]!= '(':\n                i += 1\n            new_string.append(string[:i+1])\n            string = string[i+1:]\n            i = 0\n        else:\n            i += 1\n    return new_string\n",
        "test": "assert     separate_paren_groups(\"\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return int(number)\n",
        "test": "assert     truncate_number(1.0) == 1.0"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = False\n    for i in range(len(operations)):\n        if operations[i] < 0:\n            result = True\n            break\n    return result\n",
        "test": "assert     below_zero(operations=[-1, 2, -3, 4, 5, 6, 7, -8, -9, 10, 11, 12, -13, -14])"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(n - mean) for n in numbers]) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([-10, 2, 5, 7, 9, -4]) == 5.5"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0], delimeter]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
        "test": "assert     intersperse([], 1) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    parens = [i.strip() for i in paren_string.split()]\n    stack = []\n",
        "test": "assert     parse_nested_parens('((()))') == [1]"
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"hello\", \"hi\", \"there\"], \"asdf\") == []"
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    result: List[int] = []\n    last_index: int = 0\n    while last_index < len(numbers):\n        if len(result) == 0 or result[-1] <= numbers[last_index]:\n            result.append(numbers[last_index])\n        else:\n            result.append(max(numbers[last_index], result[-1]))\n        last_index += 1\n    return result\n",
        "test": "assert     rolling_max([0]) == [0]"
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: Fix this algorithm\n",
        "test": "assert "
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    res = \"\"\n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res\n",
        "test": "assert string_xor('', 'o') == ''"
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n",
        "test": "assert "
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    assert a >= 1 and b >= 1\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(2, 3) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    pre = []\n    if not isinstance(string, str):\n        return pre\n    for i in range(len(string)):\n        pre.append(string[:i + 1])\n    return pre\n",
        "test": "assert     all_prefixes(\"\") == []"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert     string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Your code here\n    string = string.lower()\n    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"A\") == 1"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    output = []\n    for s in music_string:\n        if s == '.':\n            output.append(4)\n        elif s == '|':\n            output.append(2)\n        elif s == 'o':\n            output.append(1)\n        elif s == 'o|':\n            output.append(2)\n    return output\n",
        "test": "assert     parse_music(\"o|.|o|.|o|.|o|o|o|o|.|o|o|.|o|o|o|o|o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return len(string.replace(substring, \"\")) - len(string.replace(substring, \"\").replace(substring, \"\"))\n",
        "test": "assert     how_many_times('abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return \" \".join(sorted(numbers))\n",
        "test": "assert     sort_numbers('fourty fifty zero one two three four') == 'zero fourty fifty fourty zero one two three four'"
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # sort the input list and grab the two smallest and largest numbers\n    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    # find the difference between the largest and the smallest numbers in the list\n    difference = largest - smallest\n",
        "test": "assert     find_closest_elements([1]) == None "
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    max_n = max(numbers)\n    min_n = min(numbers)\n    rescaled_numbers = []\n",
        "test": "assert rescale_to_unit([0, 0.2, 0.5, 0.7]) == [0, 0.25, 0.5, 0.75]"
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"foobar\") == 6"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    def divisor(n):\n        for i in range(2, int(n/2) + 1):\n            if n % i == 0:\n                return i\n        return n\n    return divisor(n)\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return []\n    if n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n    # You can use set() to get a set, which is more efficient.\n    # set(numbers)\n    # This is also a good idea if you have to convert it to a set.\n",
        "test": "assert     remove_duplicates([0, 0, 1, 1, 2, 2, 2, 3, 3, 4]) == [0, 1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "test": "assert     flip_case(\"\") == \"\""
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate(['a', 'b', 'c']) == \"abc\", \"Should be abc\""
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]"
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return [i for i in l if i >= 0]\n",
        "test": "assert     get_positive([1, 2, 3, -1]) == [1, 2, 3]"
    },
    {
        "number": 31,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5 + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for x in range(0, len(xs)):\n        if xs[x]!= 0:\n            break\n    return x\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    l_copy.sort()\n    return l_copy\n",
        "test": "assert (sort_third([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,1])"
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1,2,3,4]) == [1,2,3,4], \"Wrong\""
    },
    {
        "number": 35,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            counter += 1\n            if i % 11 == 0:\n                counter += 1\n                if i % 13 == 0:\n                    counter += 1\n    return counter\n",
        "test": "assert     fizz_buzz(0) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return sorted(l, key=lambda i: i % 2 == 0)\n",
        "test": "assert "
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return \"\".join([s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n",
        "test": "assert encode_cyclic(\"abc\") == decode_cyclic(encode_cyclic(\"abc\"))"
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # if prime numbers are from 3 to the n-th number, the first n-1 number is 3, 4, 5\n    # if a number is not a prime number, its factorization is a set of its prime factorization\n    # the first prime factor is 2\n    if n == 1:\n        return 2\n    fib_numbers = fibonacci(n-1)\n    prime_numbers = []\n    for fib_number in fib_numbers:\n        if is_prime(fib_number):\n            prime_numbers.append(fib_number)\n    return prime_numbers[-1]\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert not triples_sum_to_zero([])"
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Your code here\n    return (n//2)\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return l[0] == 0\n    if len(l) == 2:\n        if l[0] + l[1] == 0:\n            return True\n        else:\n            return False\n    for i in range(0, len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,-1]) == True"
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    base_string = \"\"\n    while x!= 0:\n        x, digit = divmod(x, base)\n        base_string = str(digit) + base_string\n    return base_string\n",
        "test": "assert     change_base(4, 8) == \"4\""
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(2, 2) == 2"
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 4:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(5) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    l = sorted(l)\n    length = len(l)\n    if length % 2:\n        return l[length // 2]\n    else:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n",
        "test": "assert median([1,2,2,4]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"race a car\") == False"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    m = 1\n    while n:\n        n, m = (n - 1) % p, m * 2\n    return m\n",
        "test": "assert     modp(1, 3) == 2"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return encode_shift(s)[::-1]\n",
        "test": "assert "
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if len(text) == 0:\n        return ''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] not in ['a', 'e', 'i', 'o', 'u']:\n            new_text += text[i]\n    return new_text\n",
        "test": "assert     remove_vowels(\"hello\") == \"hll\""
    },
    {
        "number": 52,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "test": "assert not below_threshold([5,1,2], 3)"
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x + y\n",
        "test": "assert     add(3,3) == 6"
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    s0 = list(s0)\n    s1 = list(s1)\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "test": "assert same_chars('hello', 'hello') == True"
    },
    {
        "number": 55,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(0) == 0"
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert     correct_bracketing(\"<]\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        if l[i] > l[i+1]:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     monotonic([1, 2, 3, 2, 4]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "test": "assert     common([1,2,3], [1,2,4]) == [1,2]"
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n > 2:\n        i = 2\n        while n % i!= 0:\n            if n % (i+1) == 0:\n                return i+1\n            i = i + 1\n        else:\n            return i\n    else:\n        return 2\n",
        "test": "assert     (largest_prime_factor(6) == 2) "
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n    ",
        "test": "assert     sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack == []:\n                return False\n            stack.pop()\n    return stack == []\n",
        "test": "assert     correct_bracketing(\"\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [n*i for i, n in enumerate(xs)]\n",
        "test": "assert derivative([1, 2, 3, 4]) == [2, 2, 3, 0]"
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    if count == 0:\n        return 1\n    else:\n        return count\n",
        "test": "assert     vowels_count(\"ABCDEFGH\") == 4, \"Fourth test case does not pass.\""
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    shift = shift % len(str(x))\n    if shift == 0:\n        return str(x)\n    \n    return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # Your Code Below:\n    s = s.upper()\n    num = 0\n    for i in s:\n        if(ord(i) >= 65 and ord(i) <= 90):\n            num += ord(i)\n        else:\n            continue\n    return num\n",
        "test": "assert digitSum('') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    distribution = s.split(\" \")\n    apple = int(distribution[0])\n    orange = int(distribution[1])\n    mango = apple + orange\n    return mango\n",
        "test": "assert "
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    # # Approach 1: \n    # if not arr or len(arr) < 1:\n    #     return []\n    # if len(arr) == 1:\n    #     return [arr[0], 0]\n    # smallest_even, smallest_even_index = arr[0], 0\n    # for i in range(1, len(arr)):\n    #     # smallest_even = arr[i] if arr[i] % 2 == 0 and arr[i] < smallest_even else smallest_even\n    #     # smallest_even_index = i if arr[i] % 2 == 0 and arr[i] < smallest_even_index else smallest_even_index\n    #     if arr[i] % 2 == 0:\n    #         if arr[i] < smallest_even:\n    #             smallest_even = arr[i]\n    #             smallest_even_index = i\n    # return [smallest_even, smallest_even_index]\n",
        "test": "assert "
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # your code here\n    if len(lst) == 0:\n        return -1\n    max_val = 0\n    max_freq = 0\n    for item in lst:\n        if item > max_val:\n            max_val = item\n            max_freq = 1\n        elif item == max_val:\n            max_freq += 1\n    if max_freq >= max_val:\n        return max_val\n    else:\n        return -1\n",
        "test": "assert search([2, 2, 2]) == 2"
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    if a+b <= c or a+c <= b or b+c <= a:\n        return -1\n    else:\n        return ((a*b) / 2) + ((a*c) / 2)\n",
        "test": "assert     triangle_area(1, 1, 1) == 1.0, 'Wrong output 2'"
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    if is_palindromic(q) and sum(q)<=w:\n        return True\n    else:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # convert the array to a stack\n    # start with the maximum value, then compare to the next value. if the next value is greater,\n    # we can take the next element, and go back one\n    # if the next value is not greater, we can change the current element to the next element\n    # then check to see if the stack is empty\n    # if the stack is empty, return 0\n    \n    # convert the array to a stack\n    stack = []\n    for element in arr:\n        stack.append(element)\n    \n    # start with the maximum value, then compare to the next value. if the next value is greater,\n    # we can take the next element, and go back one\n    # if the next value is not greater, we can change the current element to the next element\n    # then check to see if the stack is empty\n    # if the stack is empty, return 0\n",
        "test": "assert "
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    return lst2\n",
        "test": "assert total_match(['foo', 'bar'], ['foo']) == ['foo']"
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    print(\"\\nChecking if \", a, \"is a multiplication of 3 prime numbers...\")\n    #First, we will check if the given number is divisible by 2,3,5\n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0:\n        print(a, \"is divisible by 2,3,5\")\n        return False\n    #Now, we will check if the given number is divisible by 2,3\n    if a % 2 == 0:\n        print(a, \"is divisible by 2\")\n        return False\n    #Now, we will check if the given number is divisible by 3\n    if a % 3 == 0:\n        print(a, \"is divisible by 3\")\n        return False\n    #Now, we will check if the given number is divisible by 5\n    if a % 5 == 0:\n        print(a, \"is divisible by 5\")\n        return False\n    print(a, \"is a multiplication of 3 prime numbers\")\n    return True\n",
        "test": "assert     is_multiply_prime(18) == False, f\"is_multiply_prime(18) is wrong.\""
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return x == n ** int(math.log(x, n))\n",
        "test": "assert     is_simple_power(7, 9) == False"
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return a ** 3 == a\n",
        "test": "assert not iscube(12) == True"
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    c = 0\n    for i in num:\n        if i in \"ABCDEF0123456789\":\n            c += 1\n    return c\n",
        "test": "assert     hex_key(\"AAB\") == 3"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n",
        "test": "assert "
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    count = 0\n    # for i in range(len(s) - 1):\n    #     if s[i] == s[i+1]:\n    #         count += 1\n    # return count >= 3\n    \n    # use set to eliminate repeats\n    \n    for i in range(len(s)-1):\n        if s[i] in s[i+1:]:\n            return False\n    return len(s) >= 3\n",
        "test": "assert not is_happy('abba')"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n",
        "test": "assert "
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if len(string) == 2:\n        return True\n    if string[0] == '0' or len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == '0':\n            continue\n        elif is_prime(int(string[i])) == False:\n            return False\n    return True\n",
        "test": "assert prime_length(\"1\") == False, \"One number\""
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    num = 1\n    count = 0\n    while num < 10**n:\n        if str(num)[0] == '1' and str(num)[-1] == '1':\n            count += 1\n        num += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if N == 0:\n        return \"0\"\n    sum_binary_numbers = 0\n    number = str(N)\n    for char in number:\n        sum_binary_numbers += int(char)\n    return \"1\" if sum_binary_numbers == 0 else format(sum_binary_numbers, \"08b\")\n",
        "test": "assert     solve(255) == '11111111111', 'Test 4 (correct)'"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            res += lst[i]\n    return res\n",
        "test": "assert     add([1,2,3]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    \n    return \" \".join(sorted(s.split(), key=lambda x: ord(x[0])))\n",
        "test": "assert     anti_shuffle(\"a\") == \"a\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    def get_tuple_row(r, c):\n        \"\"\"\n        Get a tuple representing the (row, column) in a 2D array of integers.\n        Each element in the tuple is 0 or 1 - to represent whether the given row has a\n        value at the given column.\n        \"\"\"\n        return (r, c)\n    \n    def get_value(r, c):\n        \"\"\"\n        Get the value at a specific row and column.\n        \"\"\"\n        return lst[r][c]\n    \n    def sort_by_row(lst):\n        \"\"\"\n        Sort list by rows in ascending order.\n        \"\"\"\n        return sorted(lst, key=lambda r: r[0])\n    \n    def sort_by_col(lst):\n        \"\"\"\n        Sort list by columns in descending order.\n        \"\"\"\n        return sorted(lst, key=lambda r: r[1], reverse=True)\n    \n    def get_coordinates(row, col):\n        \"\"\"\n        Get a tuple representing the (row, column) in a 2D array of integers.\n        Each element in the tuple is 0 or 1 - to represent whether the given row has a\n        value at the given column.\n        \"\"\"\n        return get_tuple_row(row, col)\n    \n    def get_value_row(r, c):\n        \"\"\"\n        Get the value at a specific row and column.\n        \"\"\"\n        return get_value(r, c)\n    \n    def is_valid(row, col):\n        \"\"\"\n        Checks whether a row and column is valid or not, i.e., it's within the range of the matrix.\n        \"\"\"\n        return 0 <= row <= len(lst)-1 and 0 <= col <= len(lst[0])-1\n    \n    def get_tuples():\n        \"\"\"\n        Get all tuples representing the coordinates in a 2D array of integers.\n        \"\"\"\n        tuples = []\n        for r in range(len(lst)):\n            for c in range(len(lst[0])):\n                tuples.append(get_coordinates(r, c))\n        return tuples\n    \n    def get_all_tuples():\n        \"\"\"\n        Get all tuples representing the coordinates in a 2D array of integers.\n        \"\"\"\n        tuples = get_tuples()\n        for r in range(len(lst)):\n            for c in range(len(lst[0])):\n                tuples.append(get_value_row(r, c))\n        return tuples\n    \n    def get_tuples_with_col():\n        \"\"\"\n        Get all tuples representing the coordinates in a 2D array of integers.\n        \"\"\"\n        tuples = get_all_tuples()\n        for r in range(len(lst)):\n            for c in range(len(lst[0])):\n                tuples.append((r, c))\n        return tuples\n    \n    def get_col(r, c):\n        \"\"\"\n        Get a list of values in a specific column.\n        \"\"\"\n        col = []\n        for row in range(len(lst)):\n            col.append(get_value_row(row, c))\n        return col\n    \n    def get_rows(r):\n        \"\"\"\n        Get a list of values in a specific row.\n        \"\"\"\n        rows = []\n        for c in range(len(lst[0])):\n            rows.append(get_value_row(r, c))\n        return rows\n    \n    def is_valid_row(row, val):\n        \"\"\"\n        Checks whether a row has a value at a specific column.\n        \"\"\"\n        return 0 <= row <= len(lst)-1\n    \n    def is_valid_col(col, val):\n        \"\"\"\n        Checks whether a column has a value at a specific row.\n        \"\"\"\n        return 0 <= col <= len(lst[0])-1\n    \n    def get_values_col(col):\n        \"\"\"\n        Get a list of values in a specific column.\n        \"\"\"\n        values = []\n        for r in range(len(lst)):\n            values.append(get_value_row(r, col))\n        return values\n    \n    def get_values_row(row):\n        \"\"\"\n        Get a list of values in ",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    array.sort()\n    if array[0] + array[-1] % 2 == 0:\n        return array[::-1]\n    return arra",
        "test": "assert sort_array([5, 1, 1, 2, 0, 0]) ==    [0, 0, 1, 1, 2, 5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    s2 = s.lower()\n    s3 = list(s2)\n    for i in range(len(s3)):\n        if s3[i] in 'a,e,i,o,u,y':\n            s3[i] = s3[i].upper()\n        else:\n            s3[i] = chr(ord(s3[i])-2)\n    s4 = ''.join(s3)\n    return s4\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if lst == [] or lst[0] == min(lst):\n        return None\n    else:\n        return lst[1]\n        \ndef swap(lst, i, j):\n    \"\"\"\n    You are given a list.\n    Write a function swap() that swaps elements at indices i and j.\n    Return None if the list is empty or i > j.\n    \n    swap([1, 2, 3, 4], 0, 2) == [2, 1, 3, 4]\n    swap([2, 1, 3, 4], 1, 3) == [2, 1, 3, 4]\n    swap([1, 2, 3, 4], 1, 4) == None\n    swap([], 0, 1) == None\n    \"\"\"\n    if lst == []:\n        return None\n    elif i > j:\n        return lst\n    else:\n        lst[i], lst[j] = lst[j], lst[i]\n        return lst\n",
        "test": "assert     next_smallest([10, 5, 0, 1]) == 5"
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for i in S:\n        if i == 'I':\n            count = count + 1\n        if i == '?':\n            count = count + 1\n        if i == '!':\n            count = count + 1\n    if count == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_bored(\"I. don't care\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return x == (y + z) and all([type(i) == int for i in [x, y, z]])\n",
        "test": "assert any_int(3, 4, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return \"\".join(\n        list(\n            map(\n                lambda x: x.upper() if x in \"aeiouAEIOU\" else x.lower()\n                if x in \"aeiouAEIOU\"\n                else x, \n                message\n            )\n        )\n    )\n",
        "test": "assert     encode(\"AbC\") == \"AbC\""
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    largest = 0\n    result = 0\n    for i in lst:\n        if i > largest:\n            largest = i\n    largest = int(str(largest))\n    for i in range(len(str(largest))):\n        result += int(str(largest)[i])\n    return result\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        for i in keys:\n            if type(i) == int or type(i) == float or type(i) == str:\n                i = i.lower()\n                i = i.upper()\n                if type(i)!= str:\n                    return False\n        return True\n",
        "test": "assert check_dict_case({}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #Nested loop to go through all the prime numbers\n    #if the prime number divides n it is not a prime\n    #otherwise it is a prime\n    primes = [2]\n    for i in range(3,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            primes.append(i)\n    \n    #nested loop to return all primes between 2 and n\n    output = []\n    for i in range(2,n+1):\n        for j in primes:\n            if i % j!= 0:\n                break\n        else:\n            output.append(i)\n    \n    return output\n",
        "test": "assert     count_up_to(1) == []"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    product = 1\n    for i in range(len(str(a))):\n        product = product * int(str(a)[i])\n    for i in range(len(str(b))):\n        product = product * int(str(b)[i])\n    return product\n",
        "test": "assert multiply(5, 6) == 30"
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return sum(1 for i in range(0, len(s), 2) if s[i] in \"AEIOU\")\n",
        "test": "assert count_upper(\"qwer\") == 2"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    assert value.isnumeric(), \"Input should be a number\"\n    if value == \"0\":\n        return 0\n    v = int(value)\n    if value == \"0\":\n        return 0\n    if v % 2 == 0:\n        return v\n    if v % 2 == 1:\n        return v + 1\n",
        "test": "assert     closest_integer(\"-2.4\") == -2"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    if n == 1:\n        return [1]\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    return s.split(\",\")\n",
        "test": "assert     words_string('apples,bananas,cherries') == ['apples', 'bananas', 'cherries']"
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if x < 1 or y > 100:\n        return -1\n    if x > y:\n        return -1\n    if y > x:\n        return -1\n    if y == x:\n        return x\n    return x + 1\n",
        "test": "assert     choose_num(1, 10) == -1, 'Wrong result for (1, 10): -1'"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return \"0b\" + str(int(n))\n    return \"0b\" + str(int(n + (m - n) / 2))\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sorted([x for x in x if all(x % 10!= i % 10 for i in range(1,10))])\n",
        "test": "assert unique_digits([2,2,3,4]) == [2,3,4], \"2,2,3,4 is not unique_digits([2,2,3,4]):\""
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr.sort()\n    arr.reverse()\n    # make length of 1 numbers 2\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            arr[i] = \"Two\"\n        elif arr[i] - arr[i - 1] == 2:\n            arr[i] = \"Three\"\n        elif arr[i] - arr[i - 1] == 3:\n            arr[i] = \"Four\"\n        elif arr[i] - arr[i - 1] == 4:\n            arr[i] = \"Five\"\n        elif arr[i] - arr[i - 1] == 5:\n            arr[i] = \"Six\"\n        elif arr[i] - arr[i - 1] == 6:\n            arr[i] = \"Seven\"\n        elif arr[i] - arr[i - 1] == 7:\n            arr[i] = \"Eight\"\n        elif arr[i] - arr[i - 1] == 8:\n            arr[i] = \"Nine\"\n        else:\n            arr[i] = str(arr[i])\n    return arr\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: Implement the function\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        f_ = []\n        for i in range(2, n):\n            f_.append(1)\n            for j in range(2, i):\n                f_.append(f_[-1] + f_[-2])\n        return f_\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert 1 <= n <= 10 ** 3\n    even_counter, odd_counter = 0, 0\n",
        "test": "assert even_odd_palindrome(6) == (2, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    sum_digit = 0\n    for element in arr:\n        if element < 0:\n            sum_digit = sum_digit * -1\n        else:\n            sum_digit = sum_digit + element\n    if sum_digit < 0:\n        sum_digit = sum_digit * -1\n    return len(arr) - sum_digit\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not arr:\n        return True\n    if len(arr)==1:\n        return True\n    if arr[0]>arr[-1]:\n        return False\n    \n    for i in range(1, len(arr)):\n        if arr[i-1]>=arr[i]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([10, 20, 40, 30]) is False"
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # Your code here.\n    if (all(x%2==0 for x in lst1) and all(x%2==0 for x in lst2)):\n        return 'YES'\n    return 'NO'\n",
        "test": "assert     exchange([1, 2, 3], [4, 5, 6])     == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    d = dict()\n    for l in test:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n",
        "test": "assert     histogram(\"\") == {}"
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    s = s.replace(\" \", \"\")\n    c = c.replace(\" \", \"\")\n    if c in s:\n        return (s.replace(c,\"\"), False)\n    else:\n        return(s,True)\n",
        "test": "assert reverse_delete('apaleotary','apple') == ('apaleotary', True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    odd_count_lst = []\n    for i in range(len(lst)):\n        s = ''\n        for j in range(len(lst[i])):\n            if (lst[i][j] in \"1234567890\"):\n                s += lst[i][j]\n        s = int(s)\n        if ((s + 1) % 2!= 0):\n            odd_count_lst.append('the number of odd elements'+ str(s) + 'n the str' + str(s) +'of the'+ str(s) + 'nput.')\n        else:\n            odd_count_lst.append('the number of odd elements'+ str(s) + 'n the str' + str(s) +'of the'+ str(s) + 'nput.')\n    return odd_count_lst\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    curr_sum, min_sum = 0, float(\"inf\")\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([2,2]) == 2"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    ans = 0\n    m = math.floor(capacity / len(grid))\n    for row in grid:\n        if sum(row) >= m:\n            ans += 1\n    return ans\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), int(bin(x).replace('0b', ''), 2)))",
        "test": "assert     sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]"
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if s == \"\":\n        return []\n    s = s.split(\" \")\n    s = set(s)\n    return_list = []\n    for word in s:\n        if len(word) < n and n-len(word) >= 1:\n            return_list.append(word)\n    return return_list\n",
        "test": "assert     select_words(\"ab\", 0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    vowels = \"aeiouAEIOU\"\n    \n    for vowel in vowels:\n        if word[-1] == vowel:\n            return word[-1]\n    \n    if len(word) > 3:\n        for i in range(len(word) - 2):\n            if word[i] not in vowels and word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+2]\n        \n    return \"\"\n",
        "test": "assert "
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    balanced = {'(':')', '{':'}', '[':']'}\n    for char in balanced.values():\n        if char in lst: return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['((((())))))','(())))))))))))))))']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \"\"\"\n    # Brute Force\n    res = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                res.append(arr[i])\n                break\n        if len(res) == k:\n            return res\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return sum([int(lst[i]) for i in range(len(lst)) if i % 2 == 1])\n",
        "test": "assert     solution([1,2,3,4,5,6,7,8,9,10]) == sum([2,4,6,8,10])"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # TODO: Write your code here\n    if k == len(arr):\n        return sum(arr)\n    ans = 0\n    i = 0\n    while i < k:\n        if len(str(arr[i])) <= 2:\n            ans += arr[i]\n        i += 1\n    return ans\n",
        "test": "assert     (add_elements([0, 0, 0, 0, 0], 0) == 0)"
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 1:\n        return []\n    res = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        res.append(n)\n    return sorted(res)\n",
        "test": "assert     get_odd_collatz(2) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if len(date) == 0:\n        return False\n    if date.count('-') > 2:\n        return False\n    days = date.count('-')\n    if days < 1:\n        return False\n    if days > 31:\n        return False\n    months = date.count('-')\n    if months < 1 or months > 12:\n        return False\n    \n    year,month,day = date.split('-')\n    if year.count('-') > 2:\n        return False\n    if month.count('-') > 2:\n        return False\n    if year == '' or month == '' or day == '':\n        return False\n    \n    months = {\n        1 : 31,\n        3 : 31,\n        5 : 31,\n        7 : 31,\n        8 : 31,\n        10: 31,\n        12: 31,\n        4 : 30,\n        6 : 30,\n        9 : 30,\n        11 : 30\n    }\n    if days <= months[int(month)]:\n        return True\n    else:\n        return False\n",
        "test": "assert     valid_date(\"12-12-2020\") == True"
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return txt.split()\n    ",
        "test": "assert     split_words('a,b,c,d, e') == ['a','b','c','d','e']"
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1,2,3,4,5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if(interval1[0] < interval2[0] and interval1[1] >= interval2[0]):\n        if(interval1[0] <= interval2[1] and interval1[1] >= interval2[1]):\n            return \"YES\"\n        elif(interval1[0] <= interval2[0] and interval1[1] < interval2[0]):\n            return \"YES\"\n        elif(interval1[0] > interval2[1] and interval1[0] <= interval2[1]):\n            return \"YES\"\n        elif(interval1[0] > interval2[1]):\n            return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 4), (1, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if arr == []:\n        return None\n    p = 0\n    for i in arr:\n        if i < 0:\n            p = -1\n        if i > 0:\n            p = 1\n        p *= i\n    return p\n    \n",
        "test": "assert     prod_signs([0]) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    def min_path(grid, k, i, j):\n        if i >= len(grid) or j >= len(grid) or k < 0:\n            return\n        if grid[i][j] == k:\n            for di, dj in dirs:\n                if i + di >= 0 and i + di < len(grid) and j + dj >= 0 and j + dj < len(grid):\n                    if grid[i + di][j + dj] == k:\n                        min_path(grid, k - 1, i + di, j + dj)\n        else:\n            return\n        \n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path(grid, k, 0, 0)\n    return grid[0][0]",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = []\n    first, second, third = 3, 1, 2\n    if n == 1: return [first]\n    for i in range(1, n + 1):\n        if i == 1:\n            result.append(first)\n        elif i == 2:\n            result.append(second)\n        elif i == 3:\n            result.append(third)\n        else:\n            result.append(first + second + third)\n            first, second, third = third, first + second, result[-1]\n    return result\n    \n",
        "test": "assert     tri(2) == [3, 1]"
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # Loop over every digit in n\n    # If it's an odd number, add it to the product\n    # Else, keep going\n    product = 1\n    while n > 0:\n        if n % 10 % 2 == 1:\n            product *= n % 10\n        n = n // 10\n    return product\n",
        "test": "assert     digits(111) == 5, \"Digits\""
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    if not string:\n        return False\n    if string[0]=='[':\n        if string[1]==']':\n            for i in string[2:-1]:\n                if i=='[':\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return(sum([x**2 for x in lst]))\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \" \\t\"\n",
        "test": "assert check_if_last_char_is_a_letter(\"add\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # For each element in the array, we calculate the difference between it\n    # and the current element (if it exists). If the difference is greater\n    # than the current element then return the current index.\n    # The difference is greater than the current element if the current\n    # element has a greater index, or if it is the first index in the array.\n    for i, item in enumerate(arr):\n        if item <= arr[i - 1]:\n            return i - 1\n    # If no element in the array satisfies the above conditions then return -1\n    return -1\n",
        "test": "assert "
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return max(lst) if lst else None, min(lst) if lst else None\n",
        "test": "assert     largest_smallest_integers([5, 5, 5, 5, 5]) == (5,5), 'wrong output for 5'"
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \"\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \"\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 1) == None"
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    evens = 0\n    while n % 2 == 0:\n        n = n // 2\n        evens += 1\n    if evens == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_equal_to_sum_even(10) == False, \"Should return False\""
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    brazilian_factorial = 1\n    if n == 0:\n        return 1\n    for i in range(1,n+1):\n        brazilian_factorial *= i\n    return brazilian_factorial\n",
        "test": "assert         special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return text.replace(\" \", \"_\")\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    try:\n        if len(file_name) > 3 or file_name[0].isdigit() or file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n            or file_name[-1] == '.' or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    except IndexError:\n        return 'No'\n",
        "test": "assert     file_name_check('xxd.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return 0\n    s = 0\n    for i in lst:\n        if i % 3 == 0:\n            i = i ** 2\n        elif i % 4 == 0:\n            i = i ** 3\n        else:\n            continue\n        s += i\n    return s\n",
        "test": "assert     sum_squares([1,2,3]) == 9, \"Wrong answer\""
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # TODO: Your code here\n    res = \"\"\n    tmp = \"\"\n    # for each letter of the sentence\n    for c in sentence:\n        # if the letter is not a space\n        if c!= \" \":\n            # if the next letter is a space\n            if tmp!= \" \":\n                # add the previous letter to the result\n                res += tmp\n                # add the letter to the result\n                res += c\n                # empty the temporary string\n                tmp = \"\"\n            else:\n                tmp += c\n    # if there is a leftover letter\n    if tmp!= \"\":\n        # add the leftover letter to the result\n        res += tmp\n    return res\n",
        "test": "assert "
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    n = int(n)\n    x = str(x)\n    if x == '' or n == 0:\n        return False\n",
        "test": "assert "
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    result = sorted(nums, key = lambda x: x * 10 + sum(map(int, str(x))))\n    return result\n",
        "test": "assert     order_by_points([5, 1, 4, 4, 8, 9]) == [1, 4, 4, 5, 8, 9], \"Wrong answer\""
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num!= 1 and num!= 3 and num!= 5 and num!= 7 and num!= 9:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0, specialFilter([])"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i * (i - 1) // 2) % 3 == 0:\n            for j in range(i + 1, n):\n                if (i * j) % 3 == 0:\n                    for k in range(j + 1, n):\n                        if (i * k) % 3 == 0:\n                            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    mercury = planet1\n    venus = planet2\n    i = 0\n    while i < len(planets):\n        if planets[i].lower() == mercury:\n            mercury = planets[i+1]\n            i += 1\n        if planets[i].lower() == venus:\n            venus = planets[i+1]\n            i += 1\n    return (mercury, venus)\n",
        "test": "assert     bf('Mercury', 'Venus') == (('Mercury', 'Venus'), "
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(3, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    total = 0\n    for i in lst:\n        if i % 2!= 0:\n            total += i**2\n    return total",
        "test": "assert     double_the_difference([]) == 0, \"List is empty\""
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    s = []\n    g = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            s.append(0)\n            g.append(0)\n        else:\n            s.append(abs(game[i]-guess[i]))\n            g.append(abs(game[i]-guess[i]))\n    return g\n",
        "test": "assert     (compare([1,1,1,1], [1,1,1,1]) == [0,0,0,0])"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Write your code here\n    return class_name + '.' + max(extensions, key=lambda x: x[1:].count('e') - x[1:].count('E'))\n",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if a.find(b)!= -1 or a.find(b.lower())!= -1 or a.find(b.upper())!= -1:\n        return True\n    else:\n        return False\n    pass\n",
        "test": "assert     cycpattern_check('abcd','abcd') == True"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return(len(str(num)), len(str(num)) % 2)\n",
        "test": "assert "
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    roman_num = ''\n    num_dict = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix',\n                10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii',\n                18: 'xviii', 19: 'xix'}\n    for i in range(1, number + 1):\n        if i < 4:\n            roman_num += num_dict[i]\n        elif i >= 4 and i <= 9:\n            roman_num += num_dict[i]\n        elif i >= 10 and i <= 40:\n            roman_num += num_dict[10] + num_dict[i]\n        elif i >= 41 and i <= 60:\n            roman_num += num_dict[20] + num_dict[i]\n        elif i >= 61 and i <= 80:\n            roman_num += num_dict[30] + num_dict[i]\n        elif i >= 81 and i <= 900:\n            roman_num += num_dict[40] + num_dict[i]\n        elif i >= 901 and i <= 1000:\n            roman_num += num_dict[50] + num_dict[i]\n        else:\n            roman_num += num_dict[100] + num_dict[i]\n    return roman_num\n    \ndef int_to_roman_small(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n",
        "test": "assert     int_to_mini_roman(4) == 'IV'"
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        count = len(set(list(word)))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['a','c', 'b', 'd', 'a']) == 'a'"
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # your code here\n    return number + need - remaining",
        "test": "assert "
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        else:\n            result = result ** operand[i]\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return \"\".join(s)\n",
        "test": "assert solve(\"\") == \"\", \"An empty string is correct.\""
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "test": "assert string_to_md5('') == None, 'wrong output'"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return range(a, b+1, 2)\n",
        "test": "assert     generate_integers(3, 5) == [3, 4]"
    }
]