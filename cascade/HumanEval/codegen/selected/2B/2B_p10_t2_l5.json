[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    for i, num in enumerate(numbers[:-1]):\n        for j in range(i+1, len(numbers)):\n            if num - numbers[j] <= threshold:\n                return True\n    return False\n",
        "test": "assert not has_close_elements([1.2], 1.2)"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    paren_groups = []\n    next_open_brace = ''\n    paren_group = ''\n    for i in paren_string:\n        if i == '(':\n            next_open_brace += i\n        elif i == ')':\n            paren_group += i\n            paren_groups.append(paren_group)\n            paren_group = ''\n            next_open_brace = ''\n        else:\n            paren_group += i\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    num, dec = str(number).split(\".\")\n    dec = dec[:max(1, len(dec) - 1)]\n    return float(num + \".\" + dec)\n",
        "test": "assert     truncate_number(0.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([10]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    mean_of_numbers = sum(numbers) / len(numbers)\n    return (sum([abs(x - mean_of_numbers) for x in numbers]) / len(numbers))\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1"
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    def get_max_depth(paren_string: str, level: int, max_depth: int) -> int:\n        \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n        For each of the group, output the deepest level of nesting of parentheses.\n        E.g. (()()) has maximum two levels of nesting while ((())) has three.\n",
        "test": "assert     parse_nested_parens('( ) ( ) ( )') == [0, 1, 1, 1]"
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    filtered = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            filtered.append(strings[i])\n    return filtered\n",
        "test": "assert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"dog\") == []"
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    sum_num = 0\n    pro_num = 1\n    if len(numbers) == 0:\n        return (sum_num, pro_num)\n    else:\n        for num in numbers:\n            sum_num += num\n            pro_num *= num\n    return (sum_num, pro_num)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    result = []\n    max_value = float(\"-inf\")\n    for number in numbers:\n        if number > max_value:\n            max_value = number\n        result.append(max_value)\n    return result\n",
        "test": "assert     rolling_max([5, 2, 5, 3, 5]) == [5, 5, 5, 5, 5]"
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix\n",
        "test": "assert     make_palindrome(\"abcd\") == \"abcd\""
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "test": "assert     string_xor(\"1\",\"1\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    # your code here\n    if strings == []:\n        return None\n    \n    max_len = len(strings[0])\n    max_str = strings[0]\n    for word in strings:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str\n",
        "test": "assert     longest([]) is None,    \"1 - Expected None, got: {}\".format(longest([]) )"
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    while a!= 0:\n        a, b = b%a, a\n    return b\n",
        "test": "assert     greatest_common_divisor(2,4) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]"
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3"
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    res = []\n    new_note = 0\n    for elem in music_string:\n        if elem == 'o' or elem == 'o|':\n            res.append(4)\n        elif elem == '.':\n            res.append(1)\n        elif elem == '|':\n            new_note = 1\n        elif elem =='':\n            if new_note:\n                res.append(1)\n                new_note = 0\n        else:\n            print(f'invalid input, got {elem}')\n    return res\n",
        "test": "assert     parse_music(\"o|\") == [4]"
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)\n",
        "test": "assert     how_many_times(\"hiabcdef\", \"def\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\""
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    min_diff = float(\"inf\")\n    min_idx = None\n    min_idx_2 = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_diff:\n                min_diff = abs(numbers[i] - numbers[j])\n                min_idx = i\n                min_idx_2 = j\n    return numbers[min_idx], numbers[min_idx_2]\n",
        "test": "assert find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    min_number = numbers[0]\n    max_number = numbers[0]\n",
        "test": "assert "
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1,2,'a']) == [1,2]"
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if not string:\n        return 0\n    return len(string)\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    i = 1\n    while n % i!= 0:\n        i = i + 1\n    return i\n",
        "test": "assert     largest_divisor(3) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    # print(f'{n}')\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n",
        "test": "assert     remove_duplicates([1, 1, 2, 3, 3])     ==     [1, 2, 3]"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"first\", \"second\"]) == \"firstsecond\""
    },
    {
        "number": 29,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return [x for x in l if x >= 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "    if n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n    return True\n",
        "test": "assert     is_prime(13) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    assert len(xs) % 2 == 0, \"xs must have even number of coefficients\"\n    assert all([coeff >= 0 for coeff in xs]), \"xs must be non-negative\"\n    x = 0\n    while (round(poly(xs, x), 6)!= 0):\n        x += 1\n    return x\n",
        "test": "assert     poly([1, 2, 3], 2) == 6"
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    return sorted(l, key=lambda x: (x % 3!= 0, x))\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert         unique([1, 2, 2, 3]) == sorted([1, 2, 3])"
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(100) == fizz_buzz(100)"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    l = list(l)\n    even_indices = []\n    odd_indices = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n    even_indices.sort()\n    odd_indices.sort()\n    l = even_indices + odd_indices\n    return l\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    groups = s.split(\"@@\")\n    # decode groups.\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"AAA\") == \"AAA\""
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(1) == 1"
    },
    {
        "number": 40,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    # Write your code here\n    seen = set()\n    for i in range(len(l)):\n        if l[i] in seen:\n            return False\n        seen.add(l[i])\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert not triples_sum_to_zero([-2, 0, 1])"
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    return 0\n",
        "test": "assert car_race_collision(2) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return list(map(lambda x: x+1, l))\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    count = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     pairs_sum_to_zero([1, -2, 3]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    # define some constants\n    base_10 = '0123456789'\n    # define some constants\n    base_10 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    # convert to list\n    x_as_list = list(str(x))\n    # loop through\n    for i in range(len(x_as_list)):\n        # check if character is in base_10\n        if x_as_list[i] in base_10:\n            # if yes, convert\n            x_as_list[i] = str(base_10.index(x_as_list[i]))\n    # remove leading zeros\n    while x_as_list[0] == '0':\n        x_as_list.pop(0)\n    # return number\n    return ''.join(x_as_list)\n",
        "test": "assert     change_base(1, 8) == \"1\""
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(10, 20) == 100"
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    n = len(l)\n    if n < 1:\n        raise ValueError(\"median requires at least one element\")\n    if n == 1:\n        return l[0]\n    sorted_l = sorted(l)\n    index = n//2\n    if n % 2 == 0:\n        return sorted_l[index-1] + sorted_l[index] / 2\n    else:\n        return sorted_l[index]\n",
        "test": "assert     median([1, 1, 2, 3, 4, 5, 7]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    \n    text = text.lower()\n    text = ''.join(filter(str.isalnum, text))\n    return text == text[::-1]\n",
        "test": "assert     is_palindrome('') == True, 'Blank string is not palindrome'"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    assert p > 0, 'p must be positive'\n    while n >= p:\n        n, r = divmod(n, p)\n        assert r == 0,'modulo operation is buggy: {} / {} = {}'.format(n, p, r)\n    return n\n",
        "test": "assert     (modp(0, 5) == 0)"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"y\") == \"y\""
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join(ch for ch in text if ch not in vowels)\n",
        "test": "assert     remove_vowels('he') == 'h', \"remove_vowels(he) should return h\""
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3,5,6,8,12], 10) == False"
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if s0 == s1:\n        return True\n    else:\n        return False\n",
        "test": "assert     same_chars(\"ab\", \"ab\")"
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        elif c == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n",
        "test": "assert     correct_bracketing(\"<>\") == True, \"The last closing bracket does not match its corresponding opening bracket\""
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if l == []:\n        return False\n    last_element = l[0]\n    for i in l:\n        if i < last_element:\n            return False\n        last_element = i\n    return True\n",
        "test": "assert         monotonic([1,2,3,4,3]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    largest = 0\n    for i in range(2, n):\n        while n % i == 0:\n            largest = i\n            n = n // i\n    if n > 1:\n        largest = n\n    return largest\n",
        "test": "assert largest_prime_factor(8) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    bracket_dict = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for char in brackets:\n        if char in bracket_dict:\n            if char in stack:\n                return False\n            else:\n                stack.append(bracket_dict[char])\n    return True\n",
        "test": "assert     correct_bracketing(\"()\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    return list(map(lambda x: x + 2, xs[1:]))\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0, \"fibfib(0) is wrong\""
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    vowels = 0\n    for char in s:\n        if char in \"aeiou\":\n            vowels += 1\n    return vowels\n",
        "test": "assert     vowels_count('') == 0"
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    x = str(x)\n    if len(x) < shift:\n        x = x[::-1]\n        return x + x[:shift][::-1]\n    else:\n        return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift(123, 0) == '123'"
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])",
        "test": "assert     digitSum(\"\") == 0, \"Expected 0\""
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    return n-s.count('o')-s.count('a')\n",
        "test": "assert     fruit_distribution(\"0\",0)    == 0, \"Wrong answer with input: {0}\""
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    n = 0\n    m = 0\n    for i in lst:\n        if i > 0:\n            n += 1\n    if n == 0:\n        return -1\n    for i in lst:\n        if i == 0:\n            continue\n        if i > m:\n            m = i\n    return m",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        first = min(lst)\n        return [first] + strange_sort_list(list(filter(lambda x: x > first, lst)))\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    if(a + b > c and a + c > b and b + c > a):\n        return round((a * b * 0.5), 2)\n    else:\n        return -1",
        "test": "assert     triangle_area(1, 2, 3) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return not q or (q==q[::-1] and sum(q)<=w)\n",
        "test": "assert     will_it_fly([1,1],1) == False"
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    arr_len = len(arr)\n    i = arr_len - 1\n    while i > 0:\n        if arr[i]!= arr[~i]:\n            return i\n        i -= 1\n    return 0\n",
        "test": "assert     smallest_change([1,1,1,1,1,1,1,1]) == 0, 'Second'"
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "test": "assert total_match([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]"
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    for x in range(2,100):\n        if x % 2 == 0 and x > 2 and x % 3 == 0:\n            continue\n        if a % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(11) == False"
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    # hint: keep exponent divisiblity test.\n    return n**x == x\n",
        "test": "assert     is_simple_power(2, 4) == False"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    \n    return a**3 == a\n",
        "test": "assert iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    # new_num = num.upper()\n    # lenght = len(num)\n    # a = len(num) - 1\n    # count = 0\n    # for i in range(lenght):\n    #     if int(new_num[i]) == 0 or int(new_num[i]) == 1:\n    #         count += 1\n    # print(count)\n    # if int(num) > 1:\n    #     if num[-1] == \"0\":\n    #         num = num[:-1]\n    #         count = count + 1\n    #     for i in range(lenght):\n    #         if num[i] == \"0\" or num[i] == \"1\":\n    #             count = count + 1\n    #     return count\n    # else:\n    #     return 0\n    # print(count)\n    a = num.upper()\n    b = 0\n    c = 0\n    if len(a) > 1:\n        for i in range(len(a)):\n            if a[i] == \"0\":\n                b = i\n                break\n    if len(a) > 1:\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == \"0\":\n                c = i\n                break\n    if len(a) == 1:\n        return 1\n    elif len(a) == 2 and a[0] == \"0\" and a[1] == \"0\":\n        return 0\n    elif len(a) == 2 and a[0] == \"0\" and a[1]!= \"0\":\n        return 1\n    else:\n        return (len(a)-b-c)\n",
        "test": "assert     hex_key('') == 0, '0'"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return ''.join([str(x) for x in decimal_to_binary_recursive(decimal)[::-1]])\n",
        "test": "assert     decimal_to_binary(0) == '00'"
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    return sum([len(set(s[i:i+3])) == 3 for i in range(len(s)-2)]) >= 3\n",
        "test": "assert     is_happy(\"aa\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    grades.sort(reverse=True)\n    letter_grades = []\n    for x in grades:\n        if x >= 4.0:\n            letter_grades.append('A+')\n        elif 3.7 <= x <= 4.0:\n            letter_grades.append('A')\n        elif 3.3 <= x <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 <= x <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 <= x <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 <= x <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 <= x <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 <= x <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 <= x <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 <= x <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 <= x <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 <= x <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']"
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    n = len(string)\n    prime_list = []\n    for i in range(2, n+1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            prime_list.append(i)\n    if n in prime_list:\n        return True\n    else:\n        return False\n",
        "test": "assert     prime_length(\"ABCDEFGHI\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n % 10\n            n //= 10\n        return count\n    \n    # This is the most optimized solution\n    # O(1) time and space\n    # use a for-loop, and then an if statement\n    count = 0\n    for i in range(1, n+1):\n        if count_ones(i) == 1:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    \n    s = str(N)\n    \n    if s[0] == \"1\":\n        sum = N + 10\n    elif s[0] == \"0\":\n        sum = N\n    else:\n        sum = N - 10\n    \n    return sum",
        "test": "assert "
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = i+1\n    return lst",
        "test": "assert     add([]) == [] "
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    # return ''.join(sorted(s.split()))\n    new_s = ''\n    for i,c in enumerate(s.split()):\n        new_s = new_s + c[::-1] +''\n    return new_s.strip()\n",
        "test": "assert     anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    res = []\n    for row in lst:\n        for i, j in enumerate(row):\n            if j == x:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 3) == [(0, 0), (0, 1), (1, 0), (1, 1)], \"Wrong\""
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    array.sort(key=lambda x: (x, -x))\n    return array\n",
        "test": "assert     sort_array([1,3,2,5,4,6]) == sorted([1,2,3,4,5,6])"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    return_val = \"\"\n    for i in range(len(s)):\n        if s[i].isupper():\n            return_val = return_val + alphabet[(alphabet.index(s[i]) + 2) % 26]\n        else:\n            return_val = return_val + alphabet[(alphabet.index(s[i]) - 2) % 26]\n    return return_val\n",
        "test": "assert     (encrypt(\"\")==\"\" )"
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    if n == 1:\n        return lst[0]\n    l = lst[:]\n    l.sort()\n    return l[1]\n",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    bored_count = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i] == \"I\":\n            if words[i] == words[i+1]:\n                bored_count += 1\n    return bored_count\n",
        "test": "assert     is_bored('') == 0, 'Empty sentence'"
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return x == y + z and type(x) == int and type(y) == int and type(z) == int\n    \n",
        "test": "assert     any_int(1, 2, 2) == False, \"Second\""
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    encoded = \"\"\n    vowels = 'aeiou'\n    \n    for i in message:\n        if i.lower() in vowels:\n            index = vowels.index(i.lower())\n            encoded += vowels[index + 2]\n        else:\n            encoded += i\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    my_list = []\n    for i in lst:\n        my_list.append(int(str(i)))\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if len(dict) > 0:\n        if all(isinstance(k, str) for k in dict.keys()) and all(isinstance(v, str) for v in dict.values()):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_dict_case({}) == False, 'Empty dictionary'"
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17]\n    for i in range(len(primes)):\n        if primes[i] > n:\n            return primes\n        else:\n            primes[i] += 1\n    return primes\n",
        "test": "assert "
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    # TODO\n    while len(str(b))!= 1:\n        a, b = b % 10, a * 10\n    return a * b\n",
        "test": "assert     multiply(123, 34) == 234, \"You have a problem with the unit digits.\""
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    count = 0\n    for i in range(len(s) - 1):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\")    == 0, \"Empty String\""
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    x = float(value)\n    if x == int(x):\n        return int(x)\n    else:\n        return int(x + (abs(x) - abs(int(x))))\n",
        "test": "assert     closest_integer(\"1.1\") == 1"
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    if n % 2 == 0:\n        n += 1\n    levels = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n -= 2\n        else:\n            n -= 2\n        levels.append(n)\n    return levels\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return s.split(', ')\n",
        "test": "assert words_string('testing, words') == ['testing', 'words']"
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    if x < y:\n        return -1\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n        return x\n    elif x < y:\n        for i in range(x + 1, y):\n            if i % 2 == 0:\n                return i\n",
        "test": "assert     choose_num(3, 5) == -1, \"Wrong answer in choose_num\""
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n",
        "test": "assert     rounded_avg(1, 1) == 1"
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    seen = set()\n    return_list = []\n    for i in x:\n        return_list.append(i)\n        if i not in seen:\n            seen.add(i)\n    return sorted(return_list)\n",
        "test": "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    arr_length = len(arr)\n    if arr_length == 0: return []\n    \n    # Sort the array\n    for i in range(arr_length):\n        for j in range(arr_length - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \n    # Reverse the array\n    arr_length = len(arr)\n    for i in range(arr_length):\n        for j in range(arr_length - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            \n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr_length = len(arr)\n    result = []\n    for i in range(arr_length):\n        if arr[i] in range(1, 9 + 1):\n            if arr[i] == 1:\n                result.append(\"One\")\n            elif arr[i] == 2:\n                result.append(\"Two\")\n            elif arr[i] == 3:\n                result.append(\"Three\")\n            elif arr[i] == 4:\n                result.append(\"Four\")\n            elif arr[i] == 5:\n                result.append(\"Five\")\n            elif arr[i] == 6:\n                result.append(\"Six\")\n            elif arr[i] == 7:\n                result.append(\"Seven\")\n            elif arr[i] == 8:\n                result.append(\"Eight\")\n            else:\n                result.append(\"Nine\")\n    return result\n",
        "test": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']"
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    even_odd = 0\n    odd_even = 0\n    odd_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_odd += 1\n        elif is_palindrome(i) and i % 2!= 0:\n            odd_even += 1\n        elif not is_palindrome(i) and i % 2 == 0:\n            odd_odd += 1\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                num = arr[i] + arr[j]\n                num = str(num)\n                if num[0] > '0':\n                    count += 1\n    return count",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        while arr[0] < arr[1]:\n            arr.pop(0)\n            arr.append(arr[0])\n            arr.pop(0)\n        if arr[0] > arr[-1]:\n            arr.reverse()\n        if len(arr) > 1:\n            while arr[0] == arr[1]:\n                arr.pop(0)\n                arr.append(arr[0])\n                arr.pop(0)\n        if arr[0] > arr[-1]:\n            arr.reverse()\n        return True\n",
        "test": "assert     move_one_ball([10,20,30,40,50]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    \n    lst1 = [num for num in lst1 if num % 2 == 0]\n    lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    if lst1 == lst2:\n        return \"YES\"\n    return \"NO\"\n    \n",
        "test": "assert     exchange([1, 2], []) ==    \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts\n",
        "test": "assert     histogram('aa') == {'a': 2}"
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    s = s.lower()\n    c = c.lower()\n    #for i in range(len(s)):\n    #    if s[i] in c:\n    #        s = s.replace(s[i],'')\n    s = s.replace(c,'')\n    #s = s[::-1]\n    #print(s)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n        \ns = 'abcde'\nc = 'ae'\nresult = reverse_delete(s,c)\nprint(result)\n",
        "test": "assert     reverse_delete( \"c\", \"b\") == (\"c\", True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j == '0':\n                count += 1\n        count += count % 2\n        output.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {count}nput.\")\n    return output\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    assert nums, 'Empty nums'\n    \n    min_sum = float('inf')\n    current_sum = 0\n    for n in nums:\n        current_sum += n\n        \n        if current_sum <= min_sum:\n            min_sum = current_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([1,4,5]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    # TODO: Write your code here\n",
        "test": "assert     max_fill("
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return sorted(arr, key=lambda x: (x*2,x))\n",
        "test": "assert     sort_array([1, 1, 1, 1, 1, 1, 1]) == sorted([1, 1, 1, 1, 1, 1, 1])"
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    words = s.split()\n    res = []\n    for word in words:\n        if len(word) == n:\n            res.append(word)\n    return res\n",
        "test": "assert     select_words(\"hi\", 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    \n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n        else:\n            return ''\n",
        "test": "assert     get_closest_vowel('abc') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    stack = []\n    for paren in lst:\n        if paren == '(':\n            stack.append(paren)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(('(()(', '()')) == 'No', '2'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if count < k and arr[i] > arr[count]:\n            count += 1\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    ret = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 1:\n            ret += lst[i]\n    return ret\n",
        "test": "assert     solution([3, 7, 9, 4, 4]) == 11"
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    k_arr = arr[:k]\n    return sum(int(str(element)[:2]) for element in k_arr)\n",
        "test": "assert     add_elements([], 1) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + get_odd_collatz(collatz(n))\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    try:\n        return date!= \"\" and (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 31 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 30 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 30 and\n                1 <= int(date.split('-')[1]) <= 12 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 1 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        )\n    except:\n        return False\n",
        "test": "assert     valid_date('') == False"
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') ==     ['hello', 'world']"
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        for i in range(1,len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3]) is True, 'First'"
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    intersection = 0\n    if intersection < 0:\n        return 'NO'\n    elif intersection == 0:\n        return 'NO'\n    else:\n        for i in range(interval1[0], interval1[1]+1):\n            if i in range(interval2[0], interval2[1]+1):\n                intersection += 1\n        if not isPrime(intersection):\n            return 'NO'\n        else:\n            return 'YES'\n",
        "test": "assert     intersection((1,2), (4,6)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    if arr == []:\n        return None\n    prod = 1\n    for i in arr:\n        if i == 0:\n            continue\n        if i > 0:\n            prod *= i\n        elif i < 0:\n            prod *= -i\n    return prod",
        "test": "assert     prod_signs([]) == None, \"wrong answer for empty arr\""
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    # DFS\n    # \n    def dfs(grid, m, n, k, visited):\n        if k == 0:\n            return [i for i in range(m*n)]\n        # edge case\n        if m == 0 or n == 0:\n            return []\n",
        "test": "assert     minPath([[2,1,2,1,2],"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    if n < 2:\n        return []\n    ret = []\n    a, b, c = 3, 1, 0\n    while n:\n        ret.append(a)\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return ret\n",
        "test": "assert     tri(2) == [3, 1]"
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    if n == 0:\n        return 0\n    elif n % 10 % 2:\n        return n % 10 * digits(n//10)\n    else:\n        return digits(n//10)\n",
        "test": "assert     digits(4) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    if (len(string) == 0):\n        return False\n    stack = []\n    for i in range(len(string)):\n        if (string[i] == \"[\"):\n            stack.append(i)\n        elif (string[i] == \"]\"):\n            if len(stack) == 0:\n                return False\n            elif (string[stack[-1]] == \"[\"):\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert not is_nested('')"
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return round(sum([x**2 for x in lst]), 2)",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return not txt or txt[-1].isalpha() and txt.find(' ') == -1\n",
        "test": "assert     check_if_last_char_is_a_letter('text') == True"
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] <= arr[i-1]:\n            return -1\n        i += 1\n    return i-1\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    # Edge cases\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (None, lst[0])\n    \n    # Pre-processing\n    negatives = list(filter(lambda x: x < 0, lst))\n    positives = list(filter(lambda x: x > 0, lst))\n    \n    # Calculations\n    if len(negatives) > 0:\n        smallest = negatives[0]\n        largest = negatives[-1]\n    else:\n        smallest = None\n        largest = None\n    if len(positives) > 0:\n        largest = positives[0]\n        smallest = positives[-1]\n    else:\n        largest = None\n        smallest = None\n    \n    # Formatting\n    if smallest == None and largest == None:\n        return (None, None)\n    if smallest == None:\n        return (None, largest)\n    if largest == None:\n        return (smallest, None)\n    return (smallest, largest)\n",
        "test": "assert     largest_smallest_integers([1, 2, 3, 4]) == (4, 1)"
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if a == b:\n        return None\n    if type(a) == float or type(a) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    if type(b) == float or type(b) == int:\n        if b > a:\n            return b\n        else:\n            return a\n",
        "test": "assert     compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    return n%2 == 0 and n//2 >= 4\n",
        "test": "assert is_equal_to_sum_even(9) == False, \"9 is even\""
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    res = 1\n    if n == 0:\n        return 1\n    for i in range(1, n):\n        res *= (i+1)\n    return res\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    return '-'.join(text.split())\n",
        "test": "assert fix_spaces( \" hello_world \" ) == \"hello_world\""
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    file_name = file_name.strip()\n    if(file_name.count('.') == 1):\n        if(file_name[0].isalpha()):\n            if(file_name.count('.') == 2 and (file_name.split('.')[1] in ['txt', 'exe', 'dll'])):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert     file_name_check('123.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4 == 0:\n                lst[i] = lst[i]**2\n            else:\n                lst[i] = lst[i]**3\n        sum += lst[i]\n    return sum\n",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    words = sentence.split(' ')\n    words = [word for word in words if word.isalpha()]\n    return \" \".join(words)\n",
        "test": "assert     words_in_sentence('i do not know what this is') == 'i do not know what this is'"
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    x = str(x)\n    n = str(n)\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if int(x[0]) == 1 and int(n[0]) == 1:\n        return True\n    if int(x[0]) == 1 and int(n[1]) == 1:\n        return True\n    if int(x[1]) == 1 and int(n[0]) == 1:\n        return True\n    if int(x[1]) == 1 and int(n[1]) == 1:\n        return True\n    return False\n",
        "test": "assert     simplify('0/2', '1/2') == False"
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    nums.sort()\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2 == 1) and (num % 10 > 5 and num % 10 < 7):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    res = 0\n    i = 2\n    while i*i <= n:\n        j = i\n        while j*j <= n:\n            k = j\n            while k*k <= n:\n                if (i*i + j*j + k*k) % 3 == 0:\n                    res += 1\n                k += 1\n            j += 1\n        i += 1\n    return res",
        "test": "assert     get_max_triples(10) == 2"
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    return (planet1, planet2)\n",
        "test": "assert     bf('Mercury', 'Venus') ==     ('Mercury', 'Venus'), 'Mercury-Venus'"
    },
    {
        "number": 149,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    \n    sorted_list = []\n    sorted_list = sorted(lst)\n    return sorted_list\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    if n in range(2, 5) or n in range(8, 10):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(2, 2, 3) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    \n    if lst == []:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num % 2 == 1:\n                total += num**2\n        return total\n            \n",
        "test": "assert double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return list(abs(game-guess) for guess,game in zip(guess,game))\n",
        "test": "assert     compare([0,2,1,1,0,0,0,1,0,0],[1,2,3,2,1,0,1,0,0,1]) == [1,1,1,1,1,0,1,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    # this is the code to calculate the strength of each extension\n    extensions_strength = []\n    for i in extensions:\n        if i.isupper():\n            extensions_strength.append(len(i)-2)\n        elif i.islower():\n            extensions_strength.append(len(i)-1)\n    extensions_strength.sort()\n    return class_name + extensions_strength[-1]",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return a in b[::-1] or b in a\n",
        "test": "assert     cycpattern_check('hello', 'abc') == False"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n",
        "test": "assert     even_odd_count(3412) == (2, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Argument must be a positive integer\")\n    if number <= 0:\n        raise ValueError(\"Argument must be a positive integer\")\n    if number > 1000:\n        raise OverflowError(\"Argument must be less than or equal to 1000\")\n    digits = (('', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'),\n        ('', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'),\n        ('', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'),\n        ('', 'M', 'MM', 'MMM'))\n    if number < 4:\n        return digits[0][number]\n    for num in range(4, number + 1):\n        for i, d in enumerate(digits[num // 100]):\n            if num % (100 * i + d) == 0:\n                return digits[num // 100][i] + d\n        if num % (100 * num) == 0:\n            return digits[num // 100][num // 100]\n    raise OverflowError(\"Argument must be less than or equal to 1000\")\n",
        "test": "assert     int_to_mini_roman(1) == \"I\""
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(6, 10, 5) == False"
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n",
        "test": "assert     find_max(['python', 'x', 'xxx', 'xxx', 'xxxx']) ==    'python'"
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    # Your code here!\n    if remaining >= need:\n        number += need\n        remaining -= need\n        return [number, remaining]\n    else:\n        number += remaining\n        remaining = 0\n        return [number, 0]\n",
        "test": "assert     eat(1, 0, 10) == (1, 10)"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    # First, put the elements of operand in a 2D array, and the elements of operator\n    # in a 2D array.\n    length_operand = len(operand) - 1\n    length_operator = len(operator)\n    matrix_operand = [[0 for i in range(length_operand+1)] for j in range(length_operator)]\n    matrix_operator = [[0 for i in range(length_operand+1)] for j in range(length_operator)]\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    if not s:\n        return s\n    upper = False\n    lower = False\n    s = list(s)\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if c.islower():\n                s[i] = c.upper()\n                lower = True\n            else:\n                s[i] = c.lower()\n                upper = True\n        else:\n            s[i] = c\n    if lower and upper:\n        return ''.join(s)\n    return ''.join(s)\n",
        "test": "assert     solve('abc') == 'ABC'"
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if text == '':\n        return None\n    hash_obj = hashlib.md5()\n    hash_obj.update(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n",
        "test": "assert     (string_to_md5('') == None)"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "test": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]"
    }
]