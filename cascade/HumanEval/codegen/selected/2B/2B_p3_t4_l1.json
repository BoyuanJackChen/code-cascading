[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    min_elements = 2\n    if len(numbers) <= min_elements:\n        return False\n    \n    numbers = list(sorted(numbers))\n    last = numbers.pop()\n    res = False\n    for n in numbers:\n        if abs(last - n) < threshold:\n            res = True\n        last = n\n    return res\n",
        "test": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.1)",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    output = []\n    paren_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(\"(\")\n        elif paren_string[i] == \")\":\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                output.append(paren_string[i])\n    return output\n",
        "test": "assert     separate_paren_groups('(()()()()((()()()' == ['(()()()()((()()()))', '(()()()()(()()()))', '(()()()()()((()()()'], \\",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return float(number - math.floor(number))\n",
        "test": "assert     truncate_number(0.3) == 0.3",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    prev_balance = 0\n    for op in operations:\n        prev_balance += op\n        if prev_balance < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([-1, -2]) == True",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n",
        "test": "assert ",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return ([delimeter] * (len(numbers) - 1) + numbers)\n",
        "test": "assert idesperse([1, 2, 3],'') == ['1', '2', '3']",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return_list = []\n    parens_string = paren_string.split()\n    for i in range(len(parens_string)):\n        if parens_string[i] == \"(\":\n            return_list.append(len(parens_string))\n        elif parens_string[i] == \")\":\n            return_list.append(len(parens_string) - return_list.pop())\n        else:\n            continue\n    return return_list\n",
        "test": "assert     parse_nested_parens(\"((())\") == []",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"ba\") == [\"bar\", \"baz\"]",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = 0\n    product_numbers = 1\n    for i in numbers:\n        sum_numbers += i\n        product_numbers *= i\n    return (sum_numbers, product_numbers)\n",
        "test": "assert sum_product([3]) == (3, 3)",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if not numbers:\n        return []\n    last_max = numbers[0]\n    output = []\n    for n in numbers:\n        if n > last_max:\n            last_max = n\n        output.append(last_max)\n    return output\n",
        "test": "assert     rolling_max([1]) == [1]",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    assert string\n    string = string.replace(' ', '')\n    l = len(string)\n    if l <= 1:\n        return string\n",
        "test": "assert     is_palindrome('aabbbbbaaa') == False",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return ''.join([str((int(a[i]) + int(b[i])) % 2) for i in range(len(a))])\n",
        "test": "assert     string_xor('0', '0') == '0'",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # Define a helper function and call it recursively\n    def helper(strings, current_string):\n        if len(strings) == 0:\n            return current_string\n        if len(current_string) > len(strings[0]):\n            return helper(strings[1:], current_string)\n        else:\n            return helper(strings[1:], current_string + strings[0])\n",
        "test": "assert longest([]) == None",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "test": "assert     greatest_common_divisor(10, 5) == 5",
        "num_ids": 210,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "assert all_prefixes('ab') == ['a', 'ab']",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join(f'{i}' for i in range(n + 1))\n",
        "test": "assert ",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert count_distinct_characters(\"\") == 0",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    notes = music_string.split()\n    return [4 if 'o' in note else 2 if 'o|' in note else 1 if ''.join('.' if ''.join('|' if char == '|' else '.' for char in note) == '|' else 'o' for char in note) == 'o|' else 1 if ''.join('.' if char == '|' else 'o' for char in note) == '|' else 2 for note in notes]\n",
        "test": "assert     parse_music(\"o|oo|.|.|.|o|o|o|.|o|o|.|o\") == [4,4,1,2,2,2,1,1,1,2,1,1,1,2,1]",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"pl\") == 0",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sorted(numbers.split(' '))\n",
        "test": "assert     sort_numbers(\"four one three two five six seven eight nine zero\") == \"nine zero one three four two five six seven eight\"",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    length = len(numbers)\n    if length <= 2:\n        raise ValueError(f\"The length of numbers must be greater than 2, found {length}\")\n    numbers_and_distances = {}\n    for i in range(length):\n        numbers_and_distances[i] = abs(numbers[i] - numbers[i - 1])\n    min_distance_index = min(numbers_and_distances, key=numbers_and_distances.get)\n    return numbers[min_distance_index - 1], numbers[min_distance_index + 1]\n",
        "test": "assert     find_closest_elements([4,7,2,1,5]) == (2, 1)",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n",
        "test": "assert ",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return [int(i) for i in values if type(i) is int]\n",
        "test": "assert     filter_integers([]) == [], 'No integers'",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"test_\") == 5",
        "num_ids": 126,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n",
        "test": "assert largest_divisor(1) == 1",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Iterate through the input list\n    seen = set()\n    return_list = []\n    for n in numbers:\n        if n not in seen:\n            return_list.append(n)\n            seen.add(n)\n    return return_list\n",
        "test": "assert     remove_duplicates([1,1,2]) == [1,2]",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = \"\"\n    for letter in string:\n        if letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter.upper()\n    return result\n",
        "test": "assert ",
        "num_ids": 164,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # if the list is empty, return empty string\n    if len(strings) == 0:\n        return ''\n    # if the list is not empty\n    elif len(strings)!= 0:\n        # join each string in the list\n        return ''.join(strings)\n",
        "test": "assert     concatenate([\"\", \"\", \"\"]) == \"\"",
        "num_ids": 156,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert list(filter_by_prefix([\"super-hero-tron\", \"spider-man\", \"dragonball-super\"], \"z\")) == []",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert     get_positive([0, 1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    import math\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, max_divisor+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert not is_prime(4)",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return i\n    return False\n",
        "test": "assert ",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # code goes here\n    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n            l_new.sort()\n    return l_new\n",
        "test": "assert     sort_third([1]) == [1], \"Test 4 failed\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1, 1, 1, 1]) == [1]",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for i in l:\n            if max < i:\n                max = i\n        return max\n",
        "test": "assert     max_element([1,2,4]) == 4, \"Wrong max element\"",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(n+1):\n        if i % 15 == 7:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    #l = list(l)\n    #l_even = []\n    #l_odd = []\n    #for num in l:\n    #    if num%2 == 0:\n    #        l_even.append(num)\n    #    else:\n    #        l_odd.append(num)\n    #l_even = sorted(l_even)\n    #l_odd = sorted(l_odd)\n    #l = l_even + l_odd\n    #return l\n",
        "test": "assert sort_even([3, 4, 5, 6, 7, 8, 9]) == sort_even([3, 4, 5, 5, 6, 7, 8, 8])",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert     encode_cyclic(\"\") == \"\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        if fibonacci(n-1) % 2 == 0:\n            return fibonacci(n-1) + fibonacci(n-2)\n        else:\n            return fibonacci(n-1) + fibonacci(n-2) + 2\n",
        "test": "assert     prime_fib(1) == 2, \"Prime fibonacci number should be 2\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if (l[i]+l[j]+l[k]) == 0 and i!= j!= k!= i:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,3,2,-2,7]) == False",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    num_collisions = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (i==j or abs(car_pos_1[i][0] - car_pos_1[j][0]) < 2*car_size_1[i] and abs(car_pos_1[i][1] - car_pos_1[j][1]) < 2*car_size_1[i]):\n                num_collisions += 1\n            if (i==j or abs(car_pos_2[i][0] - car_pos_2[j][0]) < 2*car_size_2[i] and abs(car_pos_2[i][1] - car_pos_2[j][1]) < 2*car_size_2[i]):\n                num_collisions += 1\n    return num_collisions\n",
        "test": "assert     car_race_collision(0) == 0",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([0, 1, 2]) == [1, 2, 3]",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    #this is a good question, with no helper functions, and just one loop\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 0]) == False",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    assert 0 < x < base\n    base_str = ''\n    while x!= 0:\n        base_str = str(x % base) + base_str\n        x = x // base\n    return base_str\n",
        "test": "assert change_base(3, 8) == \"173\", \"Incorrect conversion\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    area = a * h / 2\n    return area\n",
        "test": "assert ",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('a') == True, \"Not a palindrome\"",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(2, 3) == 1",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert ",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    vowels = 'aeiou'\n    new = ''\n    for char in text:\n        if char not in vowels:\n            new += char\n    return new\n",
        "test": "assert     remove_vowels(\"\") == \"\", \"Third assertion\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([20, -3, -2, -5, -6], -3) == False",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3, \"Try again\"",
        "num_ids": 59,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "test": "assert     same_chars(\"spam\", \"ham\") == False",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    assert n > 0, \"n must be greater than 0\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(2) == 1",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    brackets = list(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\">\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"<()><()>\")",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if l:\n        return l[-1] < l[-2]\n    return True\n",
        "test": "assert monotonic([1,2,3,4]) == False",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert         common([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3], 'common failed'",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # factors = []\n    # if n == 1:\n    #     return 1\n    # for i in range(2, n):\n    #     if n % i == 0:\n    #         factors.append(i)\n    # if factors:\n    #     return max(factors)\n    # else:\n    #     return n\n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    return factor\n",
        "test": "assert     largest_prime_factor(100) == 2",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1, f\"sum_to_n({1}) == 1, but got: {sum_to_n(1)}\"",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    open_brackets = list(brackets)\n    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(brackets[i])\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n    return len(stack) == 0\n    \n",
        "test": "assert     correct_bracketing(\"()(\") == False, \"Test 2 Failed\"",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    res = []\n    for i in range(len(xs) - 1):\n        res.append(i * xs[i] + xs[i + 1])\n    return res\n",
        "test": "assert     derivative([1,2,3,4]) == [2,6,12,24]",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert ",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    count = 0\n    for c in s:\n        if c in ['a','e','i','o','u','y']:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    x_str = str(x)\n    if len(x_str) < shift:\n        return x_str\n    else:\n        result = \"\"\n        for i in range(len(x_str)):\n            if i == len(x_str) - shift:\n                result = result + x_str[i]\n            else:\n                result = result + x_str[i]\n    return result\n",
        "test": "assert ",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sum([ord(ch) for ch in s])\n",
        "test": "assert     digitSum(\"\") == 0, \"incorrect\"",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return len(s)-int(s)-1\n    \n",
        "test": "assert ",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Complete the below function\n    if len(arr) == 0:\n        return []\n",
        "test": "assert     pluck([]) == [], \"Test 2 Failed\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if lst == []:\n        return -1\n    \n    lst.sort()\n    lst.reverse()\n    \n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1\n",
        "test": "assert     search([]) == -1",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    i = 0\n    lst_length = len(lst)\n    if lst_length == 0:\n        return []\n    for i in range(lst_length):\n        if i == 0:\n            pass\n        elif lst[i] > lst[i-1]:\n            continue\n        else:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n            i = 0\n    return lst\n",
        "test": "assert ",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a*b*c)/2,2)\n    else:\n        return -1\n    ",
        "test": "assert ",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return True if (len(q) == 0 or q == []) or sum(q) <= w and is_palindrome(q) else False\n",
        "test": "assert ",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    # TODO: Write your code here\n    \n    return len(arr) - max([len(set(arr[i:j])) for i in range(len(arr)) for j in range(i, len(arr))])\n",
        "test": "assert ",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return lst1 if len(lst1) > len(lst2) else lst2\n    # O(len(lst1) + len(lst2))\n    \nprint(total_match([], []))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\n",
        "test": "assert ",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    primes = [2,3,5,7,11,13,17]\n    if a == 0:\n        return False\n    for p in primes:\n        while a % p == 0:\n            a = a/p\n            if p == 13:\n                return True\n    return False\n",
        "test": "assert     is_multiply_prime(30) == False",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if x == 1:\n        return True\n    if x == n:\n        return False\n    elif x % n == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return a * a * a == a\n    \ndef is_palindrome(a):\n    '''\n    Write a function that takes a nonnegative integer a and returns True\n    if a is a palindrome, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(121) ==> True\n    is_palindrome(212) ==> False\n    is_palindrome(10) ==> True\n    is_palindrome(11) ==> False\n    is_palindrome(1) ==> True\n    is_palindrome(0) ==> True\n    is_palindrome(12) ==> False\n    is_palindrome(-1) ==> False\n    '''\n    return str(a) == str(a)[::-1]\n    \ndef is_leap_year(a):\n    '''\n    Write a function that takes a nonnegative integer and returns True\n    if a is a leap year, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_leap_year(0) ==> False\n    is_leap_year(1) ==> False\n    is_leap_year(4) ==> True\n    is_leap_year(100) ==> False\n    is_leap_year(1234) ==> True\n    is_leap_year(400) ==> False\n    is_leap_year(2000) ==> True\n    is_leap_year(3000) ==> False\n    '''\n    return (a % 4 == 0 and a % 100!= 0) or (a % 400 == 0)\n    \ndef is_prime(a):\n    '''\n    Write a function that takes a nonnegative integer a and returns True\n    if a is a prime number, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(4) ==> False\n    is_prime(11) ==> True\n    is_prime(26) ==> True\n    is_prime(29) ==> False\n    is_prime(31) ==> False\n    is_prime(100) ==> False\n    '''\n    if a == 0:\n        return False\n    elif a == 1:\n        return False\n    else:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    \ndef is_perfect_square(a):\n    '''\n    Write a function that takes an integer a and returns True\n    if a is a perfect square, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_perfect_square(1) ==> False\n    is_perfect_square(9) ==> True\n    is_perfect_square(100) ==> False\n    is_perfect_square(121) ==> True\n    '''\n    if a == 0:\n        return False\n    else:\n        if a == 1:\n            return True\n        else:\n            if a % (a//2) == 0:\n                return True\n            else:\n                return False\n",
        "test": "assert     iscube(1) ",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    digit_count = 0\n    for i in num:\n        if i.isdigit() and int(i) % 2 == 0:\n            digit_count += 1\n    return digit_count\n",
        "test": "assert ",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return \"db\" + \"\".join(map(lambda x: \"0\" if x == 0 else \"1\", reversed(bin(decimal)[2:]))) + \"db\"\n",
        "test": "assert     decimal_to_binary(1) == \"0b0001\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    s = s.lower()\n    if len(s) <= 2:\n        return True\n    seen = set()\n    for i in range(len(s)-2):\n        if s[i] in seen:\n            return False\n        else:\n            seen.add(s[i])\n    return True\n",
        "test": "assert is_happy('abababab') == False",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return []\n",
        "test": "assert     numerical_letter_grade([3.3, 2.3, 2.0, 2.7, 3.0, 3.3, 4.0, 4.0]) == ['A', 'B', 'C', 'C', 'A', 'A', 'B', 'B']",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    # A prime number is that it is only divisible by 1 and itself. So we\n    # need to check to see if the total number of characters in the string is\n    # divisible by itself.\n    \n    # We can use the modulus operator to do this. The modulo operator takes\n    # two inputs, the first one is the string we want to check and the second\n    # is the divisor. The divisor is basically the number that we are checking\n    # for. So the formula is string % divisor.\n    \n    # If the division between the length of the string and the divisor\n    # is 1 then the string is prime.\n    \n    # Now we can also do the same thing but we need to check to see if the\n    # divisor is less than the length of the string. If that is the case then\n    # the string is prime.\n    \n    # We need to make sure that we are not checking a string that we know will\n    # not be a prime.\n    \n    if len(string) <= 1:\n        return False\n    \n    # Now check to see if the divisor is less than the length of the string\n    # we are checking. If it is less than the length of the string we know\n    # the string is not prime.\n    if string[0] == string[-1]:\n        return False\n    \n    # Now we need to check if the divisor is less than the length of the\n    # string. If it is less than the length of the string we know the string\n    # is not prime.\n    if string[0]!= string[-1]:\n        return False\n    \n    # Now we have to check to see if the divisor is not at the end of the\n    # string. If it is not at the end of the string we know the string is not\n    # prime.\n    if len(string) > 2:\n        for i in range(2, len(string)):\n            if string[0]!= string[-1]:\n                return False\n    return True",
        "test": "assert     prime_length(\"\") is False",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n < 1:\n        return 0\n",
        "test": "assert ",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Return the value of the sum of the digits in N in binary\n    return str(N)",
        "test": "assert     solve(1) == \"1\"",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    if lst is None or len(lst) == 0:\n        return\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     add([10, 11, 12, 13, 14, 15, 16]) == [12, 14, 16]",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    new_word = \"\"\n    for letter in s.split():\n        new_word += chr(ord(letter) - 32)\n    return new_word\n",
        "test": "assert ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    row_lst = []\n    if len(lst) == 0:\n        return []\n    row_lst = [(0, i) for i in range(len(lst[0]))]\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                row_lst[i] = (i, j)\n    row_lst.sort()\n    row_lst.sort(key = lambda x: x[1], reverse = True)\n    return row_lst\n",
        "test": "assert     get_row([[1,2,3,4,5],",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # write your code here\n    return sorted(array)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            result += char\n    return result\n",
        "test": "assert encrypt(\"1234\") == \"3412\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(lst) == 0:\n        return None\n    \n    start_index = 0\n    end_index = len(lst) - 1\n    \n    while start_index < end_index:\n        if lst[start_index] <= lst[end_index]:\n            start_index += 1\n        else:\n            end_index -= 1\n            \n    return lst[start_index]\n",
        "test": "assert ",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # we'll check for the first character in the string\n    # if it's an I, we'll return True\n    return S.startswith('I')\n",
        "test": "assert is_bored(\"I am a programmer? I am a programmer!?\") == 1",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return (x == (y + z) and (x ** y == x ** z) and (type(x) == type(y) == type(z)))\n",
        "test": "assert any_int(2,2,1) == False",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return ''.join([vowels[i] if v == message[i] else message[i] for i, v in enumerate(message)])\n",
        "test": "assert     encode(\"the quick brown fox jumps over the lazy dog\") == \\",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    lst.sort()\n    i = 0\n    while True:\n        if is_prime(lst[i]):\n            break\n        i += 1\n    j = len(lst) - 1\n    while True:\n        if is_prime(lst[j]):\n            break\n        j -= 1\n    return sum(map(int, str(lst[i]) + str(lst[j])))\n",
        "test": "assert skjkasdkd([9,11,12,0]) == 36",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        for key in dict:\n            if key.isupper():\n                if key.lower()!= key:\n                    return False\n            elif key.islower():\n                if key.upper()!= key:\n                    return False\n            else:\n                return False\n        return True\n",
        "test": "assert     check_dict_case({'a': 1}) is False",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    numbers = []\n    for number in range(2,n+1):\n        # check if number is prime\n        if prime(number):\n            numbers.append(number)\n    return numbers\n",
        "test": "assert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19]",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return (int(str(a)[0]) * int(str(b)[0])) + (int(str(a)[1]) * int(str(b)[1]))\n",
        "test": "assert ",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    upper = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            upper += 1\n    return upper\n",
        "test": "assert count_upper('E') == 1, 'E'",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    # just to make it look a little bit nicer\n    # replace this with a more readable solution\n    value = str(value)\n    integer_1 = int(value)\n    integer_2 = integer_1 + 1\n    integer_3 = integer_1 - 1\n    if integer_2 < 10:\n        integer_2 = str(integer_2)\n    elif integer_3 < 10:\n        integer_3 = str(integer_3)\n    else:\n        integer_2 = str(integer_2)\n        integer_3 = str(integer_3)\n    if int(integer_1) == int(integer_2) and int(integer_1)!= 0:\n        return int(integer_1)\n    elif int(integer_1) == int(integer_3) and int(integer_1)!= 0:\n        return int(integer_1)\n    else:\n        return int(integer_2)\n",
        "test": "assert     closest_integer(\"14\") == 15",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n % 2 == 0:\n        return list(range(1, n+1))\n    else:\n        return list(range(1, n+1, 2))\n",
        "test": "assert     make_a_pile(1) == [1], \"1st test case\"",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    s = s.split(\",\")\n    return s\n",
        "test": "assert words_string('this,is,an,example') == ['this', 'is', 'an', 'example']",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if x > y:\n        return -1\n    if x <= 0 or y <= 0:\n        return -1\n    return choose_num(x + 1, y) + 1 if (x % 2 == 0) else -1\n    \n    # STRETCH: implement this function with a recursive call\n",
        "test": "assert     choose_num(3, 4) == -1",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    if n > m:\n        return -1\n    return str(bin(int(sum([i for i in range(n, m+1)])/len([i for i in range(n, m+1)]))).replace('0b', ''))\n",
        "test": "assert ",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # replace this to solve the problem\n    list_of_digits = []\n    for i in x:\n        if len(set(str(i))) == 1:\n            list_of_digits.append(i)\n    list_of_digits.sort()\n    return list_of_digits\n",
        "test": "assert     unique_digits([4,1,2,3,4,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]) == [4,1,2,3,5,6,7,8,9,0]",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # +++your code here+++\n    return\n",
        "test": "assert     by_length([3, 4, 5, 6, 9, 1, 2, 8, 7, 3, 3, 4, 5, 6, 4, 5, 6, 3, 3, 4, 5, 6]) ==     [\"Three\", \"Four\", \"Five\", \"Six\", \"Nine\", \"One\", \"Two\", \"Eight\", \"Seven\", \"Three\", \"Four\", \"Five\", \"Six\", \"Four\", \"Five\", \"Six\", \"Three\", \"Four\", \"Five\", \"Six\"]",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    fact = 1\n    fact_list = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            fact = fact * i\n        else:\n            fact = fact + i\n        fact_list.append(fact)\n    return fact_list\n",
        "test": "assert     f(4) == [4,2,1,1]",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert ",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not arr:\n        return 0\n    num_count = 0\n    for num in arr:\n        # get sum of num's digits\n        curr_sum = 0\n        while num > 0:\n            curr_sum += num % 10\n            num = num // 10\n        if curr_sum > 0:\n            num_count += 1\n    return num_count\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True if arr[0] == min(arr) else False\n    else:\n        for i in range(len(arr)):\n            if i == 0:\n                if arr[0] > arr[1]:\n                    arr = arr[1:] + arr[:1]\n                    if move_one_ball(arr):\n                        return True\n            elif i == len(arr) - 1:\n                if arr[-1] > arr[-2]:\n                    arr = arr[:-1] + arr[-1:]\n                    if move_one_ball(arr):\n                        return True\n            else:\n                if arr[i] > arr[i + 1]:\n                    arr = arr[i+1:] + arr[:i+1]\n                    if move_one_ball(arr):\n                        return True\n    return False",
        "test": "assert ",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3], [1, 2, 3]) == \"YES\", \"Wrong answer in exchange()!\"",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    hist = {}\n    for ch in test:\n        if ch in hist:\n            hist[ch] += 1\n        else:\n            hist[ch] = 1\n    return hist\n",
        "test": "assert     histogram('hellothere') == {'e': 3, 'h': 2, 'l': 2, 'o': 1, 't': 1, 'r': 1}",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    index = 0\n    while index < len(s):\n        if s[index] in c:\n            del s[index]\n        else:\n            index += 1\n    if s == s[::-1]:\n        return (s,\"\")\n    else:\n        return (s[::-1],False)\n",
        "test": "assert",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(n,\n    len(lst[n]), len(lst)) for n,_ in enumerate(lst) if len(lst[n])%2!= 0]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    total = 0\n    min_s = 0\n    for i in nums:\n        total += i\n        min_s = min(min_s, total - i)\n",
        "test": "assert ",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    counter = 0\n    row_len = len(grid)\n    col_len = len(grid[0])\n",
        "test": "assert ",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # your code here\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([10,1,2,3]) == [1,2,3,10]",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # split text into words\n    word_list = s.split(\" \")\n",
        "test": "assert ",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if lst[0] == lst[1]:\n        return 'Yes'\n    for i in range(2, len(lst)):\n        if lst[i] == '(' and lst[i-1] == ')':\n            return 'Yes'\n        elif lst[i] == ')' and lst[i-1] == '(':\n            return 'No'\n    return 'No'",
        "test": "assert     match_parens(['((())','()()()','()()'])    ==    'No'",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return sorted(arr)[-k:]\n",
        "test": "assert     maximum([], 0) == []",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total\n    \n",
        "test": "assert     solution([2, 1, 3, 5]) == 5, \"Should be 5\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    assert len(arr) > 0\n    assert k <= len(arr)\n",
        "test": "assert     add_elements([10, 20, 30, 40, 50, 60, 70, 80, 90], 2) == 120",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n <= 1:\n        return [1]\n    if n % 2!= 0:\n        return [n]\n    result = []\n    while n!= 1:\n        if n % 2!= 0:\n            result.append(n)\n        n = n / 2 if n % 2!= 0 else n * 3 + 1\n    return result\n",
        "test": "assert     get_odd_collatz(1) == [1], 'get_odd_collatz(1) should return [1]'",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return (date is not None) and (len(date)!= 0) and (len(date) == 10) and (date[2] in '0123456789') and (int(date[0:2]) in range(1,13)) and (int(date[3:5]) in range(1,32))\n",
        "test": "assert     valid_date(\"01-01-20\") == False",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    #return txt.split()\n    return txt.split(\",\")",
        "test": "assert     split_words('aaa,bbb') == ['aaa', 'bbb']",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(lst) == lst",
        "test": "assert     is_sorted([1,2,3,4,1]) == False",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 < start2 and end2 < end1:\n        return \"YES\"\n    elif start1 <= end2 and end1 <= end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((3, 5), (2, 3)) == \"NO\", \"Wrong output\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if not arr:\n        return None\n    return sum([abs(i) * (1 if i > 0 else -1 if i < 0 else 0) for i in arr])\n",
        "test": "assert     prod_signs([-1, 2, -3, 4]) == -8",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Build a graph of the grid\n    n, m = len(grid), len(grid[0])\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= 0:\n                visited.add(grid[i][j])\n",
        "test": "assert ",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3)\n",
        "test": "assert ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    while n:\n        if n % 10 % 2:\n            return n % 10\n        n //= 10\n    return 0\n",
        "test": "assert digits(24) == 0",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    flag = 0\n    if len(string) < 3:\n        return False\n    elif string[0]!= '[':\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            flag += 1\n        elif string[i] == ']':\n            flag -= 1\n        elif string[i] == ']':\n            return False\n        if flag < 0:\n            return False\n    return True\n",
        "test": "assert     is_nested('')     == False",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    res = sum([x**2 for x in lst])\n    return math.ceil(res)\n",
        "test": "assert     sum_squares([1,2,3,4,5]) == [1, 4, 9, 16, 25]",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return txt[-1].isalpha() and not txt.split()[-1]\n",
        "test": "assert not check_if_last_char_is_a_letter('go ')",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # Start the search from the last element of the array\n    # and search for the greatest element which is\n    # greater than or equal to the element at the front.\n    # Return the index of the element if it exists.\n    # If it does not exist, return -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        else:\n            return i-1\n    return -1\n",
        "test": "assert ",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # if lst == []:\n    #     return (None, None)\n    # elif lst == [0]:\n    #     return (None, None)\n    # elif lst == [-1]:\n    #     return (-1, 1)\n    # elif lst == []:\n    #     return (None, None)\n    # else:\n    if lst == []:\n        return (None, None)\n    else:\n        max_num = max(lst)\n        min_num = min(lst)\n        if max_num > 0:\n            return (max_num, min_num)\n        elif max_num < 0:\n            return (min_num, max_num)\n        else:\n            return (None, None)\n",
        "test": "assert ",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(\"1.0\", \"1.0\") == None",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return n % 2 == 0 and n >= 4\n",
        "test": "assert     is_equal_to_sum_even(4)",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    ...\n",
        "test": "assert special_factorial(5) == 120",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # Your code here\n    return text.replace(' ', '_')\n",
        "test": "assert fix_spaces('hello-world') == 'hello-world'",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    a = False\n    b = False\n    c = False\n    if len(file_name) < 3:\n        a = False\n    else:\n        a = True\n    if file_name[0].isalpha() == False:\n        b = False\n    else:\n        b = True\n    if file_name.count('.')!= 1:\n        c = False\n    else:\n        c = True\n    if a and b and c:\n        return 'Yes'\n    else:\n        return 'No'\n    \n",
        "test": "assert     file_name_check(\"abc\") == \"No\", \"First test case fails\"",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    new_list = []\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            new_list.append(lst[i]**2)\n        elif i % 4 == 0 and i % 3!= 0:\n            new_list.append(lst[i]**3)\n    return sum(new_list)\n",
        "test": "assert     sum_squares([2, 4, 6]) == 38",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # TODO: Write your code here\n    return\n",
        "test": "assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"thequickbrownfoxjumpsoverthelazydog\"",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if (float(x.replace(\"/\", \".\")) == float(n.replace(\"/\", \".\"))):\n        return True\n    else:\n        return False\n",
        "test": "assert     (simplify(\"1/4\", \"2/4\") == True) == False",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    s = 0\n    for n in nums:\n        s += n\n    nums.sort(key = lambda x: s*x)\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sum(1 for x in nums if x > 10 and x % 2 == 1)\n",
        "test": "assert     specialFilter([7, 8, 10, 11, 15]) == 2",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def helper(n):\n        # helper(n) : the number of triples (a[i], a[j], a[k])\n        # where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n        # The number of such triples is n * (n - 1) * n / 6\n        result = 0\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        result += 1\n        return result\n    a = [i for i in range(1, n + 1)]\n    return helper(n)\n",
        "test": "assert ",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    planet1 = planets[planet1]\n    planet2 = planets[planet2]\n    bf = planet1[\"orbit\"].union(planet2[\"orbit\"])\n    bf = bf.difference(set(planets.keys()))\n    bf = sorted(bf)\n    return bf\n",
        "test": "assert ",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    pass\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n",
        "test": "assert     x_or_y(1, 2, 1) == 1",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    sum = 0\n    \n    #Find odd and even numbers\n    odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if(lst[i] % 2!= 0):\n            odd += lst[i] ** 2\n        else:\n            even += lst[i] ** 2\n    return(odd + even)\n    \ndef half_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    half_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    half_the_difference([-1, -2, 0]) == 0\n    half_the_difference([9, -2]) == 81\n    half_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    \n    #Find odd and even numbers\n    odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if(lst[i] % 2!= 0):\n            odd += lst[i] ** 2\n        else:\n            even += lst[i] ** 2\n    return(odd - even)\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    out = []\n    for i in range(len(guess)):\n        if guess[i]!= game[i]:\n            out.append(abs(guess[i]-game[i]))\n        else:\n            out.append(0)\n    return out\n",
        "test": "assert     compare([3, 2, 7, 6], [4, 6, 2, 4]) == [1, 0, 1, 2]",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    highest_strength = float(\"-inf\")\n    strongest_name = \"\"\n    for extension in extensions:\n        extension_strength = -1 * sum([1 if letter.isupper() else 0 for letter in extension]) - sum([1 if letter.islower() else 0 for letter in extension])\n        if extension_strength > highest_strength:\n            highest_strength = extension_strength\n            strongest_name = extension\n    return class_name + \".\" + strongest_name",
        "test": "assert ",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('abcd','abcd') == True",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return tuple(int(d) for d in str(num) if int(d) % 2 == 0)\n",
        "test": "assert     even_odd_count(100) == (0,0)",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    num_dict = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII',\n                19: 'XIX', 20: 'XX', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX',\n                90: 'XC', 100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC',\n                800: 'DCCC', 900: 'CM', 1000: 'M'}\n    roman = ''\n    while number > 0:\n        for k in num_dict.keys():\n            if k >= number:\n                number = number - k\n                roman = num_dict[k] + roman\n                break\n    return roman\n",
        "test": "assert     int_to_mini_roman(1) == 'I'",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # sides_lengths = [a, b, c]\n    sides_lengths = [a, b, c]\n    \n    if sides_lengths.count(min(sides_lengths)) == 3:\n        if a**2 + b**2 == c**2:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert ",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    max_length = 0\n    max_length_word = \"\"\n    for word in words:\n        word_length = len(set(word))\n        if word_length > max_length:\n            max_length = word_length\n            max_length_word = word\n    return max_length_word\n",
        "test": "assert     find_max([\"hello\",\"hi\",\"hello\"]) == \"hello\"",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return\n",
        "test": "assert     (eat(3, 4, 2) ==     [3, 2]), \"Should return 3 carrots after three meals and 2 carrots after three meals\"",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: complete the function\n    \n    if(len(operator) == 1):\n        if(operator[0] == '+'):\n            return operand[0] + operand[1]\n        elif(operator[0] == '-'):\n            return operand[0] - operand[1]\n        elif(operator[0] == '*'):\n            return operand[0] * operand[1]\n        elif(operator[0] == '/'):\n            return operand[0] // operand[1]\n        elif(operator[0] == '^'):\n            return operand[0] ** operand[1]\n    elif(len(operator) == 2):\n        if(operator[0] == '+'):\n            return operand[0] + operand[1] + do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '-'):\n            return operand[0] - operand[1] - do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '*'):\n            return operand[0] * operand[1] * do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '/'):\n            return operand[0] // operand[1] * do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '^'):\n            return operand[0] ** operand[1] * do_algebra(operator[1], operand[2:])\n        \n        \n    return 0\n",
        "test": "assert ",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # your code here\n    l = list(s)\n    for i in range(len(l)):\n        if l[i].isalpha():\n            if l[i].isupper():\n                l[i] = l[i].lower()\n            else:\n                l[i] = l[i].upper()\n    return \"\".join(l)\n",
        "test": "assert solve(\"\") == \"\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n",
        "test": "assert string_to_md5(\"\") == None",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return range(a, b+1)[::2]\n",
        "test": "assert     generate_integers(1, 5) ==     [1, 3, 5]",
        "num_ids": 154,
        "indeed": false
    }
]