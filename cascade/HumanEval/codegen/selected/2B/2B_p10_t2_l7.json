[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 0.5)",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    paren_group_list = []\n    curr_paren_group = \"\"\n    for character in paren_string:\n        if character == \"(\":\n            curr_paren_group += character\n        elif character == \")\":\n            curr_paren_group += character\n            if curr_paren_group!= \"()\":\n                paren_group_list.append(curr_paren_group)\n            curr_paren_group = \"\"\n        else:\n            curr_paren_group += character\n    # if a new group is left\n    if curr_paren_group!= \"\":\n        paren_group_list.append(curr_paren_group)\n    return paren_group_list\n",
        "test": "assert     separate_paren_groups('') == []",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    # find integer part\n    integer_part = int(number)\n    # find decimal part\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert     truncate_number(1.8) == 0.8",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    bal = 0\n    for op in operations:\n        if op > 0:\n            bal += op\n        else:\n            if bal < 0:\n                return True\n            bal = op\n    return bal < 0\n",
        "test": "assert     below_zero([0, 1]) == False",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    total_sum = 0\n    total_size = 0\n    for num in numbers:\n        total_sum += abs(num)\n        total_size += 1\n    mean = total_sum / total_size\n    return total_sum / total_size\n",
        "test": "assert     mean_absolute_deviation([-2, -1.2, 0, 1.3]) == 2.2",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    result = []\n    for i, num in enumerate(numbers):\n        if i == 0:\n            result.append(num)\n        elif i == len(numbers)-1:\n            result.append(num)\n        else:\n            result.append(num)\n            result.append(delimeter)\n    return result\n",
        "test": "assert     intersperse([], '1') == []",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    paren_levels = []\n    current_paren = 0\n    for char in paren_string:\n        if char == '(':\n            current_paren += 1\n        if char == ')':\n            current_paren -= 1\n        if current_paren < 0:\n            raise ValueError('Unexpected parentheses')\n        if char!='' and char!= ')':\n            paren_levels.append(current_paren)\n    if paren_levels:\n        return paren_levels\n    return paren_levels + [0]\n",
        "test": "assert     parse_nested_parens(\"(())()\") ==     3, 'The (()()) should return 3.'",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "test": "assert filter_by_substring([\"Hello\", \"Bye\", \"World\"], \"Hello\") == [\"Hello\",]",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        s = sum(numbers)\n        p = 1\n        for i in range(len(numbers)):\n            p *= numbers[i]\n        return (s, p)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    for i in range(len(numbers)):\n        numbers[i] = max(numbers[i], numbers[i-1])\n    return numbers\n",
        "test": "assert     rolling_max([2,2,2,2]) == [2,2,2,2]",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    if is_palindrome(string):\n        return string\n",
        "test": "assert     is_palindrome('racecar') == True",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n    # return ''.join([chr(int(i, 2) ^ int(j, 2)) for i, j in zip(a, b)])\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > len(longest_str):\n            longest_str = strings[i]\n    return longest_str\n",
        "test": "assert     longest([]) == None",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "test": "assert     greatest_common_divisor(1, 1) == 1",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    return \" \".join(map(str, range(n+1)))\n",
        "test": "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(1)\n        elif char == '|':\n            notes.append(2)\n        elif char == '|':\n            notes.append(1)\n        elif char == '|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(2)\n    return notes\n",
        "test": "assert     parse_music('''",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('ABCD', 'A') == 1",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if len(numbers) < 2:\n        return (None, None)\n    smallest_diff = float('inf')\n    smallest_index = None\n    largest_diff = float('-inf')\n    largest_index = None\n    for i in range(len(numbers)):\n        if numbers[i] < smallest_diff:\n            smallest_diff = numbers[i]\n            smallest_index = i\n        if numbers[i] > largest_diff:\n            largest_diff = numbers[i]\n            largest_index = i\n    return (numbers[smallest_index], numbers[largest_index])\n",
        "test": "assert     find_closest_elements([1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]) == (1.5, 1.5)",
        "num_ids": 2091,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    min_value = float(min(numbers))\n    max_value = float(max(numbers))\n    return [(num - min_value) / (max_value - min_value) for num in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0, 0, 1]) == [0, 0, 0, 1]",
        "num_ids": 1959,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    #return list(filter(is_int, values))\n    return list(filter(lambda x: isinstance(x, int) or isinstance(x, float), values))\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return len(string)\n    # return len(string.encode())\n",
        "test": "assert strlen('hello') == 5",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "test": "assert     largest_divisor(6) == 1",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    if n < 2:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n // i\n            factors.append(i)\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert     factorize(10) == [2, 5]",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result\n",
        "test": "assert     remove_duplicates([1,2,3,4,4,5,6,7,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "    return string.lower().upper()\n",
        "test": "assert flip_case(\"a1b2c3D\") == \"A1B2C3D\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\", \"concatenate doesn't work\"",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_prime(3) == True, \"3 is prime\"",
        "num_ids": 1267,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    for i in range(len(xs) - 1, -1, -1):\n        if xs[i]!= 0:\n            return xs[i] / xs[i+1]\n    return xs[0] / xs[1]\n",
        "test": "assert ",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "    l_new = l[:]\n    for i in range(len(l_new)):\n        if i % 3 == 0:\n            continue\n        l_new.sort()\n    return l_new\n",
        "test": "assert     sort_third([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10], \"Expected: [2, 4, 6, 8, 10], got: \" + str(sort_third([2, 4, 6, 8, 10]))",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([]) == []",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    if not l:\n        return None\n    return max(l)\n",
        "test": "assert     max_element([3,3,1]) == 3",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    result = 0\n    if n % 7 == 0:\n        result += 1\n    if n % 11 == 0:\n        result += 1\n    if n % 13 == 0:\n        result += 1\n    return result\n",
        "test": "assert     fizz_buzz(13) == 1",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + sorted(odd)\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"ABCDEFGHI\")!= \"ABCDEFGHIJ\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        if is_prime(n):\n            return n\n        else:\n            return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert prime_fib(2) == 3",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    l_set = set(l)\n    for i in l:\n        if -1*i in l_set and -2*i in l_set and -3*i in l_set:\n            return True\n        else:\n            return False\n",
        "test": "assert     (triples_sum_to_zero([1,2,3]) == False)",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    if n <= 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-1)\n",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "test": "assert     incr_list([1]) == [2]",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "    # Write your code here.\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([5, -3, 4, 1]) is False",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    assert x >= 0 and base >= 2, \"Input not valid.\"\n    if base == 10:\n        return str(x)\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    digits_dict = {num: c for num, c in zip(range(base), digits)}\n    result = \"\"\n    while x > 0:\n        result = digits_dict[x % base] + result\n        x //= base\n    return result\n",
        "test": "assert     change_base(10, 2) == '1010'",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(2, 3) == 1.5",
        "num_ids": 205,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    assert isinstance(n, int) and n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError('Empty list')\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n // 2]\n",
        "test": "assert     median([1,2,3,4,5]) == 3",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abba') == True",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    while n < 0:\n        n += p\n    return n % p\n",
        "test": "assert     modp(4, 2) == 0, \"0 should be 0\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n",
        "test": "assert     remove_vowels(\"\") == \"\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    return True if len(l) == 0 or all(x < t for x in l) else False\n",
        "test": "assert     below_threshold([], 1)    == True",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return x + y\n",
        "test": "assert add(1,2) == 3",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    count = 0\n    for i in range(len(s0)):\n        if s0[i] == s1[i]:\n            count += 1\n        else:\n            return False\n    return count == len(s0)\n",
        "test": "assert     same_chars(\"car\", \"car\")        == True",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert ",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    opening_brackets = 0\n    closing_brackets = 0\n    if len(brackets) % 2 == 1:\n        brackets = brackets + \">\"\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        if bracket == \">\":\n            closing_brackets += 1\n    if opening_brackets!= closing_brackets:\n        return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<{<(<)><\") == False, \"Input 2\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return all(x<=y for x, y in zip(l, l[1:])) or all(x>=y for x, y in zip(l, l[1:]))\n",
        "test": "assert     monotonic([1,-2,-3,4]) == False",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    l1_ = list(set(l1))\n    l2_ = list(set(l2))\n    return sorted(list(set(l1_).intersection(l2_)))\n",
        "test": "assert     common([], []) == []",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    assert n > 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert largest_prime_factor(2) == 2",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "    total = 0\n    if n <= 0:\n        return total\n    else:\n        for i in range(1, n + 1):\n            total = total + i\n        return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    stack = []\n    # keep inserting opening bracket until you encounter a closing bracket\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert     correct_bracketing(\"()\") == True, \"Brackets not found!\"",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    res = []\n    for i in range(len(xs)):\n        if i!= 0:\n            res.append(xs[i] * i)\n    return res\n",
        "test": "assert     derivative([2,4,6,8]) == [0,0,2,0]",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(2) == 1",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"\") == 0, FIX",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    x = str(x)\n    return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift(\"1\", 0) == \"1\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    return sum(map(lambda x: ord(x) - ord('0') if x.isnumeric() else ord(x) - ord('A'), s))\n",
        "test": "assert     digitSum('2') == 2, \"Should be 2\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    return s.count(\"mango\")\n",
        "test": "assert     fruit_distribution('1',1) == 0, \"This function should return 0\"",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    if not arr:\n        return []\n    else:\n        # O(n)\n        even_nums = sorted(filter(lambda x: (x % 2 == 0), arr))\n        if len(even_nums) == 0:\n            return []\n        elif len(even_nums) == 1:\n            return [even_nums[0], arr.index(even_nums[0])]\n        else:\n            return [even_nums[0], arr.index(even_nums[0])]\n",
        "test": "assert pluck([]) == []",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    l = 0\n    freq = 0\n    m = 0\n    if lst == []:\n        return -1\n    else:\n        for i in lst:\n            if i > 0:\n                if i > m:\n                    m = i\n                    freq = 1\n                elif i == m:\n                    freq += 1\n            else:\n                return -1\n        if freq > 0:\n            return m\n        else:\n            return -1\n",
        "test": "assert     search([]) == -1",
        "num_ids": 2024,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return sorted(lst, key=int)\n",
        "test": "assert     strange_sort_list([]) == [], 'Wrong! Empty list'",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    tri_area = (a + b + c) / 2\n    if tri_area == a or tri_area == b or tri_area == c:\n        return round(tri_area, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(2, 3, 4) == -1",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    \n    if (len(q) == 0 or len(q) == 1):\n        return False\n    \n    s = 0\n    for x in q:\n        s += x\n    \n    return s <= w and is_palindrome(q)\n",
        "test": "assert     will_it_fly([],100) == False",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    possible = set()\n    for num in range(1, len(arr)):\n        possible = possible.union(set(range(num, -1, -1)))\n        possible = possible.union(set(range(0, num + 1)))\n    return min(possible - set(arr))",
        "test": "assert     smallest_change([1, 1, 1]) == 0",
        "num_ids": 1672,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    if len(lst1) == 0: return lst1\n    if len(lst2) == 0: return lst2\n    if len(lst1) > len(lst2): return lst1\n    if len(lst1) < len(lst2): return lst2\n    return lst1 if len(lst1) == len(lst2) else lst2\n",
        "test": "assert     total_match([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            if (3 * i + 1) % i!= 0 and (3 * i - 1) % i!= 0:\n                return True\n    return False",
        "test": "assert     is_multiply_prime(1) == False, \"Second test\"",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if n ** int(n) == x:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_simple_power(5,2) == False",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "    # Your code here\n    return int(a ** (1/3)) == a\n",
        "test": "assert iscube(0) == True",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    return len([el for el in num if el.isnumeric()])\n",
        "test": "assert     hex_key(\"\") == 0, \"the empty string should be 0\"",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    bin_str = bin(decimal)\n    print(bin_str)\n    # bin_str = '{0:b}'.format(decimal)\n    # print(bin_str)\n    print(bin_str.replace(\"b\",\"\"))\n    return bin_str.replace(\"b\",\"\")\n",
        "test": "assert     decimal_to_binary(1) == '01'",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if len(set(s)) == 1:\n            return True\n        else:\n            return False\n    while len(s) > 1:\n        if len(set(s))!= 1:\n            return False\n        s = s[1:]\n    return True\n",
        "test": "assert not is_happy('aab')",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    gpa_scores = sorted(grades)\n    letter_grades = []\n    for gpa in gpa_scores:\n        if gpa >= 3.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.3:\n            letter_grades.append('A')\n        elif gpa >= 3.0:\n            letter_grades.append('A-')\n        elif gpa >= 2.7:\n            letter_grades.append('B+')\n        elif gpa >= 2.3:\n            letter_grades.append('B')\n        elif gpa >= 2.0:\n            letter_grades.append('B-')\n        elif gpa >= 1.7:\n            letter_grades.append('C+')\n        elif gpa >= 1.3:\n            letter_grades.append('C')\n        elif gpa >= 1.0:\n            letter_grades.append('C-')\n        elif gpa >= 0.7:\n            letter_grades.append('D+')\n        elif gpa >= 0.3:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert ",
        "num_ids": 4409,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    return len(string) in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n",
        "test": "assert     prime_length(\"a\") == False, \"Should be False\"",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    counter = 0\n    for i in range(1, n+1):\n        str_i = str(i)\n        if str_i[0] == \"1\" and str_i[-1] == \"1\":\n            counter += 1\n        elif str_i[0] == \"1\":\n            counter += 1\n        elif str_i[-1] == \"1\":\n            counter += 1\n    return counter\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    sum = 0\n    while N > 0:\n        sum += N % 10\n        N = N // 10\n    return str(sum)\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 100,
        "answer": "    for i in range(1,len(lst)):\n        if i%2 == 1:\n            lst.append(lst[i-1])\n    return lst\n",
        "test": "assert     add(lst=[5, 2, 3, 7, 6, 1, 8, 4, ]), 4 == sum(i if i % 2 == 0 else i for i in lst)",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    return \" \".join([word for word in sorted(s.split(), key=lambda x: ord(x))])\n",
        "test": "assert anti_shuffle(\"a b c\") == \"a b c\"",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    if lst:\n        return sorted(sorted(zip(*lst)), key=lambda x: (x[0], -x[1]))\n    else:\n        return []\n",
        "test": "assert ",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([]) ==    []",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    encrypt_string = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    for char in s:\n        index = alphabet.find(char)\n        encrypt_string += alphabet[(index + 2) % 26]\n",
        "test": "assert encrypt(\"Hello\") == \"Hlle\"",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    # ********** Attempt 1 - Brute Force **********\n    # Time: O(n^2) / Space: O(1)\n    # for i in range(len(lst)):\n    #     for j in range(i + 1, len(lst)):\n    #         if lst[j] < lst[i]:\n    #             return lst[j]\n",
        "test": "assert     next_smallest([1, 2, 3]) == None",
        "num_ids": 1408,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    bored = 0\n    for word in S.split():\n        if word == \"I\":\n            bored += 1\n    return bored\n",
        "test": "assert     is_bored('') == 0, 'No bored sentences'",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "    return x == sum([y,z]) and all([type(n)==int for n in [x, y, z]])\n",
        "test": "assert     any_int(2, 3, 5) == False",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    message = list(message)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(message)):\n        if message[i] in alphabet:\n            if message[i] == 'a' or message[i] == 'e' or message[i] == 'i' or message[i] == 'o' or message[i] == 'u':\n                if message[i+2] == 'a' or message[i+2] == 'e' or message[i+2] == 'i' or message[i+2] == 'o' or message[i+2] == 'u':\n                    message[i] = message[i+2]\n                    message[i+2] = message[i]\n            if message[i] == 't':\n                message[i] = 'T'\n            if message[i] == 'h':\n                message[i] = 'H'\n            if message[i] == 'c':\n                message[i] = 'C'\n            if message[i] =='s':\n                message[i] = 'S'\n            if message[i] == 'g':\n                message[i] = 'G'\n            if message[i] =='m':\n                message[i] = 'M'\n            if message[i] == 'k':\n                message[i] = 'K'\n            if message[i] == 'q':\n                message[i] = 'Q'\n    message = ''.join(message)\n    return message\n",
        "test": "assert ",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    prime_numbers = set()\n    for i in lst:\n        # print(i)\n        for j in range(2, i+1):\n            if i%j == 0:\n                prime_numbers.add(j)\n                break\n    # print(prime_numbers)\n    ans = 0\n    for i in prime_numbers:\n        ans += i\n    return ans\n",
        "test": "assert     skjkasdkd([10, 5, 3, 7, 2, 1]) == 17",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if len(dict.keys())!= 0:\n        for i in dict.keys():\n            if not isinstance(i, str):\n                return False\n        for j in dict.values():\n            if not isinstance(j, str):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     check_dict_case({}) == False, \"The dictionary is empty\"",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    primes = []\n    i = 2\n    while i < n + 1:\n        for k in range(2, i):\n            if i % k == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    r = 0\n    while a > 0:\n        r = r*10 + a%10\n        a = a//10\n    return r*b\n",
        "test": "assert     multiply(1, 2) == 2",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return 0\n    \ndef count_upper2(s):\n    \"\"\"\n    Better solution:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s if c.isupper())\n    \ndef count_upper3(s):\n    return sum(1 for c in s if c.isupper())\n",
        "test": "assert     count_upper('') == 0",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    value = float(value)\n    if abs(value) < 1:\n        return int(value)\n    if value > 0:\n        return int(value + 0.5)\n    return int(value - 0.5)\n",
        "test": "assert     closest_integer(\"14.5\") == 15, \"closest_integer incorrect\"",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    if not n:\n        return []\n    if n == 1:\n        return [1]\n    return make_a_pile(n - 1) + [n + 2]\n",
        "test": "assert     make_a_pile(1)     ==  [1]",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    # split string by comma or space\n    words = s.split(\",\")\n    # convert to lowercase and strip whitespaces\n    words = [w.strip() for w in words]\n    return words\n",
        "test": "assert words_string('a') == ['a']",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if x <= y:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n    else:\n        return -1\n",
        "test": "assert choose_num(2, 3) == 2",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    avg = (n+m)/2\n    avg = int(avg)\n    return avg\n",
        "test": "assert     rounded_avg(1, 3)     ==  2",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    return sorted(list(set([i for i in x if i % 2!= 0])))\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        if len(arr) <= 3:\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        else:\n            arr.sort(reverse = True)\n            arr = list(map(str,arr))\n            arr = arr[1:9]\n            arr.reverse()\n            arr = \"\".join(arr)\n            arr = list(map(int, arr))\n            return arr\n",
        "test": "assert     by_length([1, 2, 3]), \"Non-integer elements\"",
        "num_ids": 2347,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    \n    # check if n is a positive integer\n    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    factorial = 1\n    lst = list()\n    for i in range(1, n+1):\n        factorial *= i\n        if i % 2 == 0:\n            lst.append(factorial)\n        else:\n            lst.append(sum(range(1, i+1)))\n    return lst\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    even = odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(n-i):\n            even += 1\n        if is_palindrome(i) and not is_palindrome(n-i):\n            odd += 1\n    return (even, odd)\n",
        "test": "assert ",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    sum_of_digits = 0\n    count = 0\n    for num in arr:\n        sum_of_digits += num\n        if sum_of_digits >= 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0, \"Empty array\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([0,2,3,4,5,6,7,8,9,10]) == True",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    # Algorithm:\n    # Get the length of lst1 and lst2\n    l1_len = len(lst1)\n    l2_len = len(lst2)\n    # If lst1 has odd number of elements, return \"NO\"\n    if l1_len % 2 == 1:\n        return \"NO\"\n    # If lst2 has odd number of elements, return \"NO\"\n    if l2_len % 2 == 1:\n        return \"NO\"\n    # If l1 is longer than lst2, swap lst1 and lst2\n    if l1_len > l2_len:\n        lst1, lst2 = lst2, lst1\n    # If lst1 is shorter than lst2, swap lst1 and lst2\n    if l1_len < l2_len:\n        lst1, lst2 = lst2, lst1\n    # If lst1 is longer than lst2, swap lst1 and lst2\n    if l1_len > l2_len:\n        lst1, lst2 = lst2, lst1\n    # Starting at the end of lst1, remove the even numbers from lst2\n    for i in range(l2_len-1):\n        if lst1[i] % 2 == 0:\n            lst2.pop(i)\n            lst2.insert(i, lst1[i])\n    # If lst2 still has elements, return \"NO\"\n    if len(lst2)!= 0:\n        return \"NO\"\n    # If lst2 still has no elements, return \"YES\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([2, 2, 2], [2, 4, 2]) == \"NO\", \"You are correct\"",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    histo = {}\n    for i in test:\n        if i in histo:\n            histo[i] += 1\n        else:\n            histo[i] = 1\n    return histo\n",
        "test": "assert     (histogram(\"aaabbc\") == {'a': 3, 'b': 2, 'c': 1} )",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    n = len(s)\n    ans = s[:n]\n    for i in range(n):\n        if s[i] in c:\n            ans = ans[:i] + ans[i+1:]\n    return (ans,True if ans==ans[::-1] else False)\n    ",
        "test": "assert     reverse_delete(\"g\",\"g\") == (\"\", True)",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return \"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst), len(lst[0]), len(lst))\n",
        "test": "assert     odd_count([\"5\", \"2\", \"3\"]) == [\"3\", \"2\", \"1\"], \"Should return ['3', '2', '1']\"",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    # initialize two variables: curr_sum, min_sum\n    # for each index, subtract nums[index]\n    # if curr_sum is less than min_sum, update min_sum\n    curr_sum = 0\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        # if the curr_sum is less than min_sum, update min_sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        # if the curr_sum is equal to min_sum,\n        # update curr_sum to the curr_sum\n        elif curr_sum == min_sum:\n            curr_sum = curr_sum + nums[i + 1]\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    # Your code here\n    rows, cols = len(grid), len(grid[0])\n    # check if it is 0, if so, we can return 0 as we don't have any emptying\n    if rows * cols == 0:\n        return 0\n    # initialize the buckets\n    buckets = [[0]*capacity for _ in range(rows)]\n    # for each row and col\n    for row in range(rows):\n        for col in range(cols):\n            # if it's not the 0, then we increase the bucket capacity\n            if grid[row][col] == 1:\n                buckets[row][0] += 1\n    # for each row\n    for row in range(1, rows):\n        # and for each col\n        for col in range(1, cols):\n            # if it is not the 0, we increase the bucket capacity\n            if grid[row][col] == 1:\n                buckets[row][0] += 1\n            # if it is 0, we increase the bucket capacity\n            else:\n                buckets[row][0] = 0\n    # we initialize the bucket capacity and bucket counter\n    bucket_cap, bucket_count = capacity, 0\n    # for each row\n    for row in range(rows):\n        # and for each col\n        for col in range(bucket_cap):\n            # if the capacity of the bucket is 0, we need to increase the bucket capacity\n            # we increase the bucket capacity by 1\n            if buckets[row][col] == 0:\n                bucket_cap += 1\n                bucket_count += 1\n    # return the bucket capacity that has been used\n    return bucket_count\n",
        "test": "assert ",
        "num_ids": 2500,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count(\"1\")))\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return [word for word in s.split() if len([x for x in word if x.lower() in \"aeiou\"]) == n]\n",
        "test": "assert     select_words('', 0) == []",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    # we can use the shorter method from the leetcode page\n    # v = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    # for i in word[::-1]:\n    #     if i in v:\n    #         return i\n    # return \"\"\n    # just an easier way\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"lemonade\") == \"e\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    # Write your code here\n    stack = []\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'\n",
        "test": "assert     match_parens(('(())', ) ) == 'Yes', 'Test 1 fails'",
        "num_ids": 1774,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert     maximum([], 0) == []",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2)])\n",
        "test": "assert     solution([1, 1]) == 1, \"2\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    # Edge case\n    if not arr or k > len(arr):\n        return 0\n",
        "test": "assert not add_elements([12], 1)",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    sequence = []\n    while n > 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    if date==\"\":\n        return False\n    else:\n        month=int(date[0:2])\n        day=int(date[3:5])\n        year=int(date[6:10])\n        if year>=0 and year<=9999:\n            if month<1 or month>12:\n                return False\n            if month in (1,3,5,7,8,10,12):\n                if day<=31:\n                    return True\n                else:\n                    return False\n            if month in (4,6,9,11):\n                if day<=30:\n                    return True\n                else:\n                    return False\n            if month==2:\n                if (year%4==0 and year%100!=0) or (year%4==0 and year%100==0 and year%400==0):\n                    if day<=29:\n                        return True\n                    else:\n                        return False\n                else:\n                    if day<=28:\n                        return True\n                    else:\n                        return False\n        else:\n            return False\n",
        "test": "assert     valid_date('') == False",
        "num_ids": 2300,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    words = txt.split()\n    return words\n",
        "test": "assert     split_words('test') == ['test']",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "    # Your code here\n    return sorted(lst) == lst\n",
        "test": "assert is_sorted([1, 2, 3, 4]) == True",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    if not interval1[0] <= interval2[0] <= interval1[1] or not interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if (interval1[1] - interval1[0]) == (interval2[1] - interval2[0]):\n        return \"YES\"\n    if (interval1[1] - interval1[0]) % 2 == 0:\n        return \"YES\"\n    if (interval1[1] - interval1[0]) > 2:\n        return \"YES\"\n    if (interval2[1] - interval2[0]) % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     intersection((1, 3), (2, 4)) == \"NO\"",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    # check for empty array\n    if len(arr) == 0:\n        return None\n",
        "test": "assert     prod_signs([1, -1, -1, 2, -1, -1, -1]) == None",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    def find_min_path(grid, k, curr_index):\n        if k == 0:\n            return curr_index\n",
        "test": "assert minPath([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]], 2) == ",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    \n    a = 1\n    b = 2\n    c = 3\n    \n    l = [a,b,c]\n    \n    for i in range(n-2):\n        a,b,c = b,c,a + b + c\n        l.append(a)\n        \n    return l\n",
        "test": "assert      tri(2)      ==      [1, 2, 3], \"n = 2, 1 + 2 + 3 = 5\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    return sum(int(d) for d in str(n) if int(d)%2)\n",
        "test": "assert     digits(1)    == 1",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    nested = False\n    string = string.replace(' ', '')\n    for i in range(0, len(string)):\n        if (string[i] == '[') and (string[i] == ']') and (string[i+1] == '['):\n            nested = True\n    return nested\n",
        "test": "assert not is_nested('([{}])')",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return sum([x*x for x in lst])\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    # +++ SUCCESSFUL SOLUTION +++\n    return (txt[-1].isalpha() and txt[-1] not in [\" \", \".\", \",\", \"'\", \"!\", \"?\"])\n",
        "test": "assert     check_if_last_char_is_a_letter('a') == True",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    last = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] >= last:\n            return i\n        else:\n            last = arr[i]\n    return -1\n",
        "test": "assert ",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    if any(x < 0 for x in lst):\n        return (None, None)\n    return (min(lst), max(lst))",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    # if a is None or b is None:\n    #     return None\n    # if a == b:\n    #     return None\n    # elif a > b:\n    #     return a\n    # else:\n    #     return b\n",
        "test": "assert     compare_one(1, 1) == None",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    return n % 2 == 0 and (n // 2) % 2 == 0 and (n // 2) * 2 == n\n",
        "test": "assert     is_equal_to_sum_even(15) == False",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    f = 1\n    for i in range(1,n+1):\n        f = f * i\n    return f\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").strip(\"_\")\n    \n    \ndef main():\n    \"\"\"\n    Do not edit this function. It is used to write your docstring.\n    \"\"\"\n    print(fix_spaces.__doc__)\n",
        "test": "assert     fix_spaces(\"this has a space\") == \"this_has_a_space\"",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    file_name = file_name.replace(\".\", \"\")\n    if file_name.count(\".\") > 1 or len(file_name) == 0 or not file_name[0].isalpha() or not file_name[1:].isalpha():\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert     file_name_check('1.txt') == 'No', 'Function file_name_check does not return \"No\" for a valid file name'",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 or i%4!= 0:\n            sum = sum + lst[i]**2\n    return sum\n",
        "test": "assert sum_squares([1,2,3,4,5]) == 1 + 4 + 9 + 16",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    words = sentence.split()\n    return ''.join(set(words))\n",
        "test": "assert words_in_sentence(\"Hello\") == \"Hello\", \"Your function should return a string with the words in a sentence\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    x_str = str(x)\n    n_str = str(n)\n    if x_str[0] == \"/\":\n        x_str = x_str[1:]\n    if x_str[-1] == \"/\":\n        x_str = x_str[:-1]\n    if n_str[0] == \"/\":\n        n_str = n_str[1:]\n    if n_str[-1] == \"/\":\n        n_str = n_str[:-1]\n    if x_str == n_str:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(x = \"2/4\", n = \"1/2\") == False",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), x))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    filtered_list = []\n    for i in nums:\n        if (len(str(i)) > 2) and (i % 2 == 1) and (i % 10 == 1):\n            filtered_list.append(i)\n    return len(filtered_list)\n",
        "test": "assert ",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i*i - i + 1) % 3 == 0 and (j*j - j + 1) % 3 == 0 and (i*j*j - i + j + 1) % 3 == 0:\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return tuple(sorted(s for s in planets if planet1 in orbit_tree[s] and planet2 in orbit_tree[s]))\n",
        "test": "assert ",
        "num_ids": 3190,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "    return list(sorted(filter(lambda s: len(s) == len(max(lst, key=len)), lst)))\n",
        "test": "assert     sorted_list_sum([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\"]",
        "num_ids": 1848,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return y\n    return x\n",
        "test": "assert     x_or_y(1, 1, 1)     ==     1",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    if len(lst) == 0:\n        return 0\n    return sum([x**2 for x in lst if (x % 2)!= 0])\n",
        "test": "assert     double_the_difference([]) == 0, \"Empty list\"",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    results = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            results.append(0)\n        else:\n            results.append(abs(guess[i] - game[i]))\n    return results\n",
        "test": "assert     compare([1,2,3,4,5,6],[1,2,3,4,5,6]) == [0,0,0,0,0,0], 'incorrect compare function'",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "    \n    return class_name + '.' + extensions[0]\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return any(i in b for i in a[1:])\n",
        "test": "assert (cycpattern_check('abcd', 'abcd') == True), 'Should return True for the second case.'",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    n_even = 0\n    n_odd = 0\n    n_string = str(num)\n    for n in n_string:\n        if int(n) % 2 == 0:\n            n_even += 1\n        else:\n            n_odd += 1\n    return (n_even, n_odd)\n",
        "test": "assert ",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    if number == 1:\n        return \"I\"\n    elif number == 2:\n        return \"II\"\n    elif number == 3:\n        return \"III\"\n    elif number == 4:\n        return \"IV\"\n    elif number == 5:\n        return \"V\"\n    elif number == 6:\n        return \"VI\"\n    elif number == 7:\n        return \"VII\"\n    elif number == 8:\n        return \"VIII\"\n    elif number == 9:\n        return \"IX\"\n    elif number == 10:\n        return \"X\"\n    elif number == 11:\n        return \"XI\"\n    elif number == 12:\n        return \"XII\"\n    elif number == 13:\n        return \"XIII\"\n    elif number == 14:\n        return \"XIV\"\n    elif number == 15:\n        return \"XV\"\n    elif number == 16:\n        return \"XVI\"\n    elif number == 17:\n        return \"XVII\"\n    elif number == 18:\n        return \"XVIII\"\n    elif number == 19:\n        return \"XIX\"\n    elif number == 20:\n        return \"XX\"\n    elif number == 30:\n        return \"XXX\"\n    elif number == 40:\n        return \"XL\"\n    elif number == 50:\n        return \"L\"\n    elif number == 60:\n        return \"LX\"\n    elif number == 70:\n        return \"LXX\"\n    elif number == 80:\n        return \"LXXX\"\n    elif number == 90:\n        return \"XC\"\n    elif number == 100:\n        return \"C\"\n    elif number == 200:\n        return \"CC\"\n    elif number == 300:\n        return \"CCC\"\n    elif number == 400:\n        return \"CD\"\n    elif number == 500:\n        return \"D\"\n    elif number == 600:\n        return \"DC\"\n    elif number == 700:\n        return \"DCC\"\n    elif number == 800:\n        return \"DCCC\"\n    elif number == 900:\n        return \"CM\"\n    elif number == 1000:\n        return \"M\"\n    else:\n        return \"-\"",
        "test": "assert     int_to_mini_roman(1) == \"I\"",
        "num_ids": 2278,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return (a*a) == (b*b) + (c*c)\n",
        "test": "assert right_angle_triangle(4, 5, 6) == False",
        "num_ids": 1751,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['hello', 'hello']) == 'hello', \"Find_max\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    # Do not remove the below line\n    # if your code in python is not working, try to make a version that can run in java.\n    # if you can't get java to run in python, then try to make a version that can run in java.\n    return [number + need, remaining - need]\n    # Code starts here\n",
        "test": "assert     eat(6, 10, 2) == [18, 2], \"eat function is not correct\"",
        "num_ids": 2852,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    if len(operator) > 1:\n        if operator[0] == '+':\n            return sum(operand)\n        elif operator[0] == '-':\n            return sum(operand)\n        elif operator[0] == '*':\n            return sum(operand)\n        elif operator[0] == '/':\n            return sum(operand) // (len(operand)-1)\n        elif operator[0] == '**':\n            return sum(operand) ** (len(operand)-1)\n    else:\n        return operand[0]\n",
        "test": "assert do_algebra(['+', 2], [1, 2]) == 3",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return s if s.islower() else s[::-1].swapcase()\n",
        "test": "assert not solve('a') == solve('b')",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "test": "assert     generate_integers(0, 1) == [0]",
        "num_ids": 508,
        "indeed": false
    }
]