[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    for index in range(len(numbers) - 1):\n        if numbers[index + 1] - numbers[index] < threshold:\n            return True\n",
        "test": "assert not has_close_elements([1.2], 1.2)",
        "num_ids": 619
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if paren_string is None:\n        raise ValueError\n",
        "test": "assert     separate_paren_groups(\"(((()())))\") == [\"(((()())))\"]",
        "num_ids": 367
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    integer_part = int(number)\n    fractional_part = number - integer_part\n    return fractional_part\n",
        "test": "assert     truncate_number(0.5) == 0.5",
        "num_ids": 230
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([3, 2, -1, 1]) == True",
        "num_ids": 1236
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    n = len(numbers)\n    total = 0\n    for i in range(n):\n        total += abs(numbers[i] - mean(numbers))\n    return total / n\n",
        "test": "assert ",
        "num_ids": 188
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]",
        "num_ids": 385
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    paren_stack = []\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n            paren_stack.pop()\n",
        "test": "assert     parse_nested_parens('(()()())(()())') == [0,1,2,3,4]",
        "num_ids": 338
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    filtered = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            filtered.append(strings[i])\n    return filtered\n",
        "test": "assert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"dog\") == []",
        "num_ids": 481
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    sum_num = 0\n    pro_num = 1\n    if len(numbers) == 0:\n        return (sum_num, pro_num)\n    else:\n        for num in numbers:\n            sum_num += num\n            pro_num *= num\n    return (sum_num, pro_num)\n",
        "test": "assert sum_product([1]) == (1, 1)",
        "num_ids": 317
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n        if max_element < numbers[i]:\n            max_element = numbers[i]\n        max_list.append(max_element)\n    return max_list\n",
        "test": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 523
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix\n",
        "test": "assert     make_palindrome(\"abcd\") == \"abcd\"",
        "num_ids": 475
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # if len(a)!= len(b):\n    #     print(\"The input strings are of unequal length\")\n    #     exit(0)\n",
        "test": "assert     string_xor(\"11111111\", \"111110000\") == \"\"",
        "num_ids": 239
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # your code here\n    if strings == []:\n        return None\n    \n    max_len = len(strings[0])\n    max_str = strings[0]\n    for word in strings:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str\n",
        "test": "assert     longest([]) is None,    \"1 - Expected None, got: {}\".format(longest([]) )",
        "num_ids": 391
    },
    {
        "number": 13,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    while b!= 0:\n        a, b = b, a%b\n    return a\n",
        "test": "assert ",
        "num_ids": 81
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # assume this is a prefix\n    prefixes = []\n",
        "test": "assert     all_prefixes('aaab') == ['aa', 'aaab', 'aaaba', 'aaabab', 'aaababcd', 'aaababcd']",
        "num_ids": 201
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert     string_sequence(10) == \" 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"",
        "num_ids": 160
    },
    {
        "number": 16,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 147
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    res = []\n    new_note = 0\n    for elem in music_string:\n        if elem == 'o' or elem == 'o|':\n            res.append(4)\n        elif elem == '.':\n            res.append(1)\n        elif elem == '|':\n            new_note = 1\n        elif elem =='':\n            if new_note:\n                res.append(1)\n                new_note = 0\n        else:\n            print(f'invalid input, got {elem}')\n    return res\n",
        "test": "assert     parse_music(\"o|\") == [4]",
        "num_ids": 343
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)\n",
        "test": "assert     how_many_times(\"hiabcdef\", \"def\") == 1",
        "num_ids": 227
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('one zero three two') == 'one zero three two', 'Error!'",
        "num_ids": 228
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    # Hint: Remember that if you don't find a closest pair then the closest pair has to be in the middle\n    if len(numbers) <= 1:\n        return 0.0, 0.0\n    left_pointer = 0\n    right_pointer = len(numbers) - 1\n    # Your code here\n    # Set up pointer to the left and right pointer\n    # Move left pointer until the left pointer and right pointer are equal\n    # Print out left and right pointers\n    # Move right pointer to the right until left pointer and right pointer are equal\n    # Print out left and right pointers\n    # Move left pointer to the left until left pointer and right pointer are equal\n    # Print out left and right pointers\n    # Use a while loop to find the closest pair\n    # Find out if left pointer is greater than right pointer\n    # If so, then swap them\n    # Then move left pointer to the left\n    # And then again move the right pointer until the left pointer and right pointer are equal\n    # Print out the left and right pointers\n    # If left pointer is smaller than right pointer, then find the closest pair\n    # If right pointer is smaller than left pointer, then swap them\n    # Use a while loop to find the closest pair\n    # Find out if left pointer is greater than right pointer\n    # If so, then swap them\n    # Then move left pointer to the left\n    # And then again move the right pointer until the left pointer and right pointer are equal\n    # Print out the left and right pointers\n    # If left pointer is smaller than right pointer, then find the closest pair\n    # If right pointer is smaller than left pointer, then swap them\n    # Use a while loop to find the closest pair\n    # Find out if left pointer is greater than right pointer\n    # If so, then swap them\n    # Then move left pointer to the left\n    # And then again move the right pointer until the left pointer and right pointer are equal\n    # Print out the left and right pointers\n    # If left pointer is smaller than right pointer, then find the closest pair\n    while left_pointer < right_pointer:\n        if numbers[left_pointer] < numbers[right_pointer]:\n            left_pointer += 1\n        elif numbers[left_pointer] > numbers[right_pointer]:\n            right_pointer -= 1\n        else:\n            break\n    if left_pointer < right_pointer:\n        left_pointer += 1\n    elif left_pointer > right_pointer:\n        right_pointer -= 1\n    else:\n        left_pointer += 1\n    return numbers[left_pointer - 1], numbers[right_pointer]\n",
        "test": "assert     find_closest_elements([1,2,3,3,2,1]) == (1,2)",
        "num_ids": 961
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value == max_value:\n        raise ValueError('The smallest and largest values cannot be the same')\n",
        "test": "assert ",
        "num_ids": 191
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1,2,'a']) == [1,2]",
        "num_ids": 1080
    },
    {
        "number": 23,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if not string:\n        return 0\n    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 134
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    i = 1\n    while n % i!= 0:\n        i = i + 1\n    return i\n",
        "test": "assert largest_divisor(3) == 1",
        "num_ids": 219
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    # print(f'{n}')\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 450
    },
    {
        "number": 26,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n",
        "test": "assert     remove_duplicates([1, 1, 2, 3, 3])     ==     [1, 2, 3]",
        "num_ids": 395
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"apple\") == \"APPLE\"",
        "num_ids": 117
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"first\", \"second\"]) == \"firstsecond\"",
        "num_ids": 216
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []",
        "num_ids": 277
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return [x for x in l if x >= 0]\n",
        "test": "assert     get_positive([]) == [], \"Wrong result\"",
        "num_ids": 221
    },
    {
        "number": 31,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n == 1 or n == 0 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 191
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    roots = []\n    if len(xs) % 2 == 1:\n        return -1\n",
        "test": "assert ",
        "num_ids": 198
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    res = []\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            res.append(l[i])\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            res.append(l[i])\n    res = sorted(res)\n    return res\n",
        "test": "assert ",
        "num_ids": 255
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert         unique([1, 2, 2, 3]) == sorted([1, 2, 3])",
        "num_ids": 325
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return max(l)\n",
        "test": "assert max_element([-2, 1, -4, 3]) == 3",
        "num_ids": 158
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return sum(1 for x in range(1, n) if x % 3 == 0 and x % 5 == 0 or x % 7 == 0)\n",
        "test": "assert     fizz_buzz(100) == fizz_buzz(100)",
        "num_ids": 254
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n    for i in range(len(l2)):\n        l2[i] = l[i+1]\n    l2 = sorted(l2)\n    return l2\n",
        "test": "assert ",
        "num_ids": 1261
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert ",
        "num_ids": 381
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    if n>=6:\n        if is_prime(fib_list[-1]):\n            return fib_list[-1]\n        else:\n            return fib_list[-2]\n    else:\n        return fib_list[n]\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 325
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -2, 4, 5, -4, 6, -8, 10, -5]) == True, \"Wrong result for the input list\"",
        "num_ids": 515
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return 0\n",
        "test": "assert car_race_collision(2) == 0",
        "num_ids": 234
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert ",
        "num_ids": 52
    },
    {
        "number": 43,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    count = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     pairs_sum_to_zero([1, -1, 2, -2, 3, -3]) == True, \"assertion failed\"",
        "num_ids": 240
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # define some constants\n    base_10 = '0123456789'\n    # define some constants\n    base_10 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    # convert to list\n    x_as_list = list(str(x))\n    # loop through\n    for i in range(len(x_as_list)):\n        # check if character is in base_10\n        if x_as_list[i] in base_10:\n            # if yes, convert\n            x_as_list[i] = str(base_10.index(x_as_list[i]))\n    # remove leading zeros\n    while x_as_list[0] == '0':\n        x_as_list.pop(0)\n    # return number\n    return ''.join(x_as_list)\n",
        "test": "assert     change_base(1, 8) == \"1\"",
        "num_ids": 383
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return a*h/2\n",
        "test": "assert     triangle_area(10, 20) == 100",
        "num_ids": 111
    },
    {
        "number": 46,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 275
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    n = len(l)\n    if n < 1:\n        raise ValueError(\"median requires at least one element\")\n    if n == 1:\n        return l[0]\n    sorted_l = sorted(l)\n    index = n//2\n    if n % 2 == 0:\n        return sorted_l[index-1] + sorted_l[index] / 2\n    else:\n        return sorted_l[index]\n",
        "test": "assert     median([1, 1, 2, 3, 4, 5, 7]) == 3",
        "num_ids": 471
    },
    {
        "number": 48,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # we must make sure that we don't have anything other than alphanumeric\n    text = ''.join(filter(str.isalnum, text))\n    \n    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"racecar\") == True, \"Weird\"",
        "num_ids": 286
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return (n % p) * (p - 1)\n",
        "test": "assert ",
        "num_ids": 101
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert ",
        "num_ids": 177
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join(ch for ch in text if ch not in vowels)\n",
        "test": "assert     remove_vowels('he') == 'h', \"remove_vowels(he) should return h\"",
        "num_ids": 432
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1], 0) == False",
        "num_ids": 131
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 3) == 5",
        "num_ids": 90
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars(\"ab\", \"ab\")",
        "num_ids": 187
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 169
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for b in brackets:\n        if b == \">\":\n            count += 1\n        elif b == \"<\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert     correct_bracketing(\"<\") == False, \"Should be False\"",
        "num_ids": 442
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    count = 0\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            count += 1\n        elif l[i] < l[i + 1]:\n            count -= 1\n        if count!= 0:\n            return False\n    return True\n",
        "test": "assert     monotonic([1,2,3,4]) == False, \"Wrong test\"",
        "num_ids": 362
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n",
        "test": "assert     common([2,4,6,8], [2,4,6,7]) == [2,4,6], \"wrong\"",
        "num_ids": 277
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert largest_prime_factor(8) == 2",
        "num_ids": 268
    },
    {
        "number": 60,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 325
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    count_open = 0\n    count_close = 0\n    for ch in brackets:\n        if ch == \"(\":\n            count_open += 1\n        elif ch == \")\":\n            count_close += 1\n    return count_close == count_open\n",
        "test": "assert     correct_bracketing(\"()\") == True",
        "num_ids": 367
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Make a copy of xs\n    xs_copy = xs[:]\n    # Make a new list that will contain d/dx(xs)\n    dxs_dx = []\n    # Calculate d/dx for each x in xs_copy\n    for x in range(len(xs_copy)):\n        # Calculate each of d/dx\n        dxs_dx.append(xs_copy[x] * (x + 1))\n    return dxs_dx\n",
        "test": "assert     derivative([1,-2,3,4]) ==    [1,0,3,0]",
        "num_ids": 443
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0, \"fibfib(0) is wrong\"",
        "num_ids": 264
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # The length of the string is only greater than or equal to 1\n    assert len(s) >= 1\n    # The length of the string is at least 2\n    assert len(s) >= 2\n    # The string is always uppercase\n    assert s.isupper()\n    # The string is always lowercase\n    assert s.islower()\n",
        "test": "assert ",
        "num_ids": 230
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    result = \"\".join(str(int(n)) for n in x)[shift:] + str(int(x))[:shift]\n    return result\n",
        "test": "assert ",
        "num_ids": 264
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Your Code Here\n    return sum([ord(i) for i in s])\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 166
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return(s.count('mango'))",
        "test": "assert ",
        "num_ids": 318
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 297
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if lst == None or lst == []:\n        return -1\n    lst.sort()\n    if len(lst) == 0:\n        return -1\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            count += 1\n        if count >= lst[i]:\n            return lst[i]\n    return -1\n",
        "test": "assert     search([1]) == 1",
        "num_ids": 358
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        first = min(lst)\n        return [first] + strange_sort_list(list(filter(lambda x: x > first, lst)))\n",
        "test": "assert     strange_sort_list([2, 1, 0, 4, 5, 3])    ==    [0, 1, 2, 3, 4, 5]",
        "num_ids": 250
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if(a + b > c and a + c > b and b + c > a):\n        return round((a * b * 0.5), 2)\n    else:\n        return -1",
        "test": "assert     triangle_area(1, 2, 3) == -1",
        "num_ids": 224
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return not q or (q==q[::-1] and sum(q)<=w)\n",
        "test": "assert     will_it_fly([1,1],1) == False",
        "num_ids": 278
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    def compare(arr):\n        for i in range(len(arr)):\n            if i!= len(arr) - 1:\n                if arr[i]!= arr[i+1]:\n                    return True\n        return False\n",
        "test": "assert ",
        "num_ids": 183
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return lst1 + lst2\n",
        "test": "assert     total_match([\"abc\", \"def\", \"h\"], [\"a\", \"b\", \"c\"]) ==     [\"abc\", \"def\"]",
        "num_ids": 413
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    prime_a = []\n    for i in range(2, 100):\n        if is_prime(i):\n            prime_a.append(i)\n",
        "test": "assert ",
        "num_ids": 147
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # hint: keep exponent divisiblity test.\n    return n**x == x\n",
        "test": "assert     is_simple_power(10, 2) == False",
        "num_ids": 184
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # YOUR CODE HERE\n    return a**3 == a\n",
        "test": "assert ",
        "num_ids": 59
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    num = num.upper()\n    l = 0\n    count = 0\n    for n in num:\n        l += 1\n        if n == 'B':\n            count += 1\n        if l == 3:\n            if n in 'ABCD':\n                count += 1\n            l = 0\n    return count\n",
        "test": "assert     hex_key('') == 0, '0'",
        "num_ids": 325
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    binary = \"\"\n    for i in range(10):\n        if decimal % 2 == 0:\n            binary = binary + \"0\"\n            decimal = decimal // 2\n        else:\n            binary = binary + \"1\"\n            decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert     decimal_to_binary(16) == '1db0'",
        "num_ids": 245
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    return sum([len(set(s[i:i+3])) == 3 for i in range(len(s)-2)]) >= 3\n",
        "test": "assert     is_happy(\"aa\") == False",
        "num_ids": 181
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return (['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F'])[grades]\n",
        "test": "assert     numerical_letter_grade([1, 2, 3, 4, 5, 5, 5]) == \"C+\", \"Error 4\"",
        "num_ids": 637
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    else:\n        return True\n",
        "test": "assert     prime_length(\"4\") == True",
        "num_ids": 257
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Note: the \"end with 1\" part of the question is different than the \"start with 1\" part.\n    # The start with 1 part only considers the numbers that start with 1, and ends with 1,\n    # while the end with 1 part only considers the numbers that end with 1.\n",
        "test": "assert     starts_one_ends(4) == 5",
        "num_ids": 236
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    bina_num = bin(N)\n    bina_num = bina_num.replace(\"0b\", \"\")\n    print(bina_num)\n    return bina_num\n",
        "test": "assert     solve(3) == \"11\"",
        "num_ids": 353
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = i+1\n    return lst",
        "test": "assert     add([]) == [] ",
        "num_ids": 253
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # return ''.join(sorted(s.split()))\n    new_s = ''\n    for i,c in enumerate(s.split()):\n        new_s = new_s + c[::-1] +''\n    return new_s.strip()\n",
        "test": "assert     anti_shuffle('') == ''",
        "num_ids": 255
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    row_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row_lst.append((i, j))\n    row_lst.sort()\n    row_lst.sort(key=lambda x: (x[0], -x[1]))\n    return row_lst\n",
        "test": "assert     get_row([[1, 4, 3],",
        "num_ids": 535
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    array = array[:]\n    array.sort(reverse=True)\n    return array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 364
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # check if string is empty\n    if len(s) == 0:\n        return s\n    # create new list, increment the alphabet by 2\n    new = list(ALPHABET)\n    ALPHABET += ALPHABET\n    # map each character in the string to the new list\n    s = map(lambda x: new[x], map(ord, s))\n    # create a new string\n    return ''.join(list(s))\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'\n    \"\"\"\n    # check if string is empty\n    if len(s) == 0:\n        return s\n    # create new list, decrement the alphabet by 2\n    new = list(ALPHABET)\n    ALPHABET -= ALPHABET\n    # map each character in the string to the new list\n    s = map(lambda x: new[x], map(ord, s))\n    # create a new string\n    return ''.join(list(s))\n",
        "test": "assert ",
        "num_ids": 743
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #get the smallest item from the list\n    smallest = min(lst)\n    #return None if there is no next smallest\n    if smallest == max(lst):\n        return None\n    #get the index of the smallest item\n    index = lst.index(smallest)\n    #swap the smallest item with the one directly after the smallest item\n    lst[index], lst[index + 1] = lst[index + 1], lst[index]\n    #return the new smallest item\n    return smallest\n    \n",
        "test": "assert     next_smallest([2, 3, 1, 4]) == 1, 'Fourth'",
        "num_ids": 357
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    count = 0\n    for word in S.split():\n        if word.startswith('I') and word!= \"I\":\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"I am too bored. Help!\") == 0",
        "num_ids": 214
    },
    {
        "number": 92,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if (x == y + z) and (x == y - z):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 145
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return ''.join([chr(ord(c) + (ord(c) - ord('a') + 1)) if c.isalpha() else c for c in message])\n",
        "test": "assert ",
        "num_ids": 134
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return 0\n    ",
        "test": "assert ",
        "num_ids": 285
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if dict == {}:\n        return False\n    for i in dict:\n        if type(dict[i])!= str:\n            return False\n        if i.isupper() and dict[i].islower():\n            return False\n        if i.islower() and dict[i].isupper():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, 'Empty dictionary'",
        "num_ids": 402
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    if n < 1:\n        return []\n    primes = []\n    # 1 is not prime, so we need to put it first\n    primes.append(1)\n    # include 2 as prime\n    primes.append(2)\n",
        "test": "assert count_up_to(3) == [2, 3]",
        "num_ids": 310
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return int(a * b % 100)\n",
        "test": "assert ",
        "num_ids": 106
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:\n            count += 1\n    return count\n    \n",
        "test": "assert ",
        "num_ids": 172
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    number = float(value)\n",
        "test": "assert ",
        "num_ids": 164
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    num_stone = lambda n: n if n % 2 else n + 1\n    n += 1\n    while n >= 1:\n        n = num_stone(n)\n        yield n\n",
        "test": "assert     make_a_pile(11) == [11,8]",
        "num_ids": 372
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return s.split(', ')\n",
        "test": "assert words_string('testing, words') == ['testing', 'words']",
        "num_ids": 275
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # If x == y, return x\n    if x == y:\n        return x\n    # If x is greater than y, return max between x and y\n    if x > y:\n        return max(x, y)\n    # If x is smaller than y, return min between x and y\n    if x < y:\n        return min(x, y)\n",
        "test": "assert     choose_num(-1, 0) == -1, \"Wrong answer in choose_num\"",
        "num_ids": 284
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < m:\n        return -1\n    else:\n        return int(bin(int((n+m)/2))[2:],2)\n",
        "test": "assert rounded_avg(4,4) == 4",
        "num_ids": 208
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sorted([i for i in x if i > 10 and i % 2 == 0])\n",
        "test": "assert unique_digits([6,6,9,1,9,6,5,5,4,2,5]) == [6,9,5,5,4]",
        "num_ids": 281
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    if not arr: return []\n    \n    new_arr = []\n    for n in arr:\n        if 1 <= n <= 9:\n            new_arr.append(name_by_length(n))\n    \n    arr.sort()\n    arr.reverse()\n    \n    for i in range(len(arr)):\n        if arr[i] <= 9 and arr[i] >= 1:\n            new_arr.append(name_by_length(arr[i]))\n    \n    return new_arr\n",
        "test": "assert ",
        "num_ids": 432
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return f(n - 1) + [i + 1 for i in f(n - 1)]\n",
        "test": "assert     f(2) == [1,2], \"WRONG\"",
        "num_ids": 1230
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    count_even = 0\n    count_odd = 0\n",
        "test": "assert     even_odd_palindrome(5) == (1, 2)",
        "num_ids": 263
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum([int(x) for x in str(arr) if str(x).isdigit()])\n",
        "test": "assert     count_nums([2, 3, 9, -4]) == 0, 'Wrong'",
        "num_ids": 1273
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # special case where array is empty\n    if len(arr) == 0:\n        return True\n    # if we find a single element which is less than the last element then this\n    # is not possible to get non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([10,20,30,40,50]) == True",
        "num_ids": 439
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    \n    lst1 = [num for num in lst1 if num % 2 == 0]\n    lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    if lst1 == lst2:\n        return \"YES\"\n    return \"NO\"\n    \n",
        "test": "assert     exchange([1, 2], []) ==    \"NO\"",
        "num_ids": 432
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    hist = {}\n    for i in test.lower():\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n",
        "test": "assert ",
        "num_ids": 1274
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if len(c)>len(s): return ('','False')\n    result = ''\n    for i in range(len(s)-len(c)+1):\n        if s[i:i+len(c)]==c:\n            if s[i:]==s[i:][::-1]:\n                result = s[i:i+len(c)]\n                return (result,True)\n    return ('','False')\n    \n    \n",
        "test": "assert     reverse_delete('hello','ll') == (\"olleh\", False)",
        "num_ids": 509
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    odd_count = []\n    for i in lst:\n        total = 0\n        for j in i:\n            if j!= '0' and j!= '1':\n                total += 1\n        odd_count.append(\"the number of odd elements {}n the str{}n of the {}nput.\".format(total, len(i), len(i)))\n",
        "test": "assert ",
        "num_ids": 243
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Edge case: empty list\n    if len(nums) == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 119
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # edge cases\n    if not grid or not grid[0]:\n        return 0\n    if not grid[0][0]:\n        return math.inf\n    if not capacity:\n        return 0\n",
        "test": "assert ",
        "num_ids": 197
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([1,1,1,1]) == [1,1,1,1]",
        "num_ids": 362
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if s==None:\n        return []\n    else:\n        s = s.split()\n        temp = []\n        for word in s:\n            if n >= len(word) and word.count(' ') == 0 and word.count('-') == 0 and word.count('\\'') == 0:\n                if word not in temp:\n                    temp.append(word)\n        return temp\n        \n    return []\n        \nif __name__==\"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3)",
        "test": "assert ",
        "num_ids": 556
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    closest = \"\"\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiou\":\n            if word[i + 1] in \"aeiou\" and word[i]!= word[i + 1]:\n                closest = word[i + 1]\n                break\n    return closest\n",
        "test": "assert     get_closest_vowel(\"can\") == \"\"",
        "num_ids": 324
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Approach 1\n    # Build a Tree of the string\n    # Check whether the tree is balanced or not\n    # Return True if the tree is balanced\n    # Else return False\n",
        "test": "assert ",
        "num_ids": 191
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    # TODO: Write your solution here\n    n = len(arr)\n    if k >= n:\n        return arr\n    max_value = max(arr[:k])\n    max_index = arr.index(max_value)\n    # max_index = len(arr) - k\n    # print(max_index)\n    return arr[max_index:] + arr[:max_index]\n",
        "test": "assert maximum([1,2,3,4,5], 1) == [1,2,3,4,5]",
        "num_ids": 417
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    ret = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 1:\n            ret += lst[i]\n    return ret\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 476
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    k_arr = arr[:k]\n    return sum(int(str(element)[:2]) for element in k_arr)\n",
        "test": "assert     add_elements([1, 2, 3, 4], 2) == 3",
        "num_ids": 150
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    odds = []\n",
        "test": "assert ",
        "num_ids": 1186
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    #if the date string is empty return false\n    if date == \"\":\n        return False\n",
        "test": "assert ",
        "num_ids": 348
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    list_of_words = txt.split()\n    return list_of_words\n",
        "test": "assert     split_words('a b c, d e') == ['a b c', 'd e']",
        "num_ids": 1243
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # checks if list has more than 1 duplicate of the same number\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 161
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # Edge case\n    if interval1[0] >= interval2[1] or interval2[0] >= interval1[1]:\n        return \"NO\"\n    # Brute force\n    if interval1 == interval2:\n        return \"YES\"\n    # Intersection\n    ans = float('inf')\n    for i in range(1, min(interval1[1], interval2[1]) + 1):\n        if interval1[1] >= interval2[0] + i:\n            if ans > i:\n                ans = i\n    return str(ans)\n",
        "test": "assert intersection((1,2),(1,2)) == 'YES'",
        "num_ids": 455
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    if not arr: return\n    return sum([(abs(i) * (abs(i) + 1) if i < 0 else i * (i + 1))\n        for i in arr])\n",
        "test": "assert prod_signs([1, 1, 0, 0]) == 0",
        "num_ids": 206
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n",
        "test": "assert ",
        "num_ids": 114
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not isinstance(n, int):\n        raise ValueError(\"Argument should be a positive integer.\")\n    if n <= 0:\n        raise ValueError(\"Argument should be a positive integer.\")\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    a, b, c = 0, 1, 1\n    while n > 0:\n        if n == 1:\n            return [1, b, c]\n        if n == 2:\n            return [1, 1, b, c]\n        a, b, c = b, c, a + b + c\n        n -= 3\n    return a, b, c\n",
        "test": "assert ",
        "num_ids": 350
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n % 2 == 0:\n        return 0\n    return sum(map(int, str(n)))\n",
        "test": "assert     digits(2) == 0",
        "num_ids": 177
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # split the string, then find the brackets in the string\n    string = string.split(']')\n    # if the number of elements in the list is not equal to 1\n    if len(string)!= 1:\n        # check to see if there are nested brackets\n        for i in range(len(string)):\n            # check if there are nested brackets\n            if string[i].find('[]')!= -1:\n                return True\n    else:\n        return False\n",
        "test": "assert not is_nested('')",
        "num_ids": 408
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return round(sum([x**2 for x in lst]), 2)",
        "test": "assert     sum_squares([0, 0, 0, 0, 0]) == 0",
        "num_ids": 261
    },
    {
        "number": 134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return not check_if_last_char_is_a_word(txt)[0]\n",
        "test": "assert ",
        "num_ids": 97
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return max([i for i in range(len(arr)) if arr[i] < arr[i + 1]])\n",
        "test": "assert ",
        "num_ids": 333
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if lst == [] or lst == None:\n        return None, None\n    elif lst == [0] or lst == [1]:\n        return None, None\n    else:\n        minimum = float(\"inf\")\n        maximum = float(\"-inf\")\n        negative_max = 0\n        positive_min = 0\n        for i in lst:\n            if i < 0:\n                if i > minimum:\n                    minimum = i\n                    negative_max = maximum\n                elif i < negative_max:\n                    negative_max = i\n            else:\n                if i > maximum:\n                    maximum = i\n                    positive_min = minimum\n                elif i > positive_min:\n                    positive_min = i\n        return minimum, maximum\n",
        "test": "assert ",
        "num_ids": 359
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if a == b:\n        return None\n    if type(a) == float or type(a) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    if type(b) == float or type(b) == int:\n        if b > a:\n            return b\n        else:\n            return a\n",
        "test": "assert     compare_one(1, 2) == 2",
        "num_ids": 493
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return n in range(8, 15) and (n % 2 == 0)\n",
        "test": "assert is_equal_to_sum_even(150) == False",
        "num_ids": 120
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    res = 1\n    if n == 0:\n        return 1\n    for i in range(1, n):\n        res *= (i+1)\n    return res\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 237
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    return '-'.join(text.split())\n",
        "test": "assert fix_spaces( \" hello_world \" ) == \"hello_world\"",
        "num_ids": 135
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    file_name = file_name.strip()\n    if(file_name.count('.') == 1):\n        if(file_name[0].isalpha()):\n            if(file_name.count('.') == 2 and (file_name.split('.')[1] in ['txt', 'exe', 'dll'])):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert file_name_check('b') == 'No'",
        "num_ids": 536
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            i = i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            i = i ** 3\n        result += i\n    return result\n",
        "test": "assert     sum_squares([100,200,300,400,500,600,700,800,900,1000]) == 5050, 'not correct'",
        "num_ids": 406
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not sentence:\n        return\n",
        "test": "assert     words_in_sentence(' i have a red car and a blue car and a green car') == 'i have a red car and a blue car and a green car'",
        "num_ids": 350
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    n = n[::-1]\n    x = x[::-1]\n    y = \"\"\n    if len(n) > 1:\n        i = 0\n        for a in n:\n            if a == \"/\":\n                i += 1\n            else:\n                y = a + y\n        n = int(y[::-1])\n    if len(x) > 1:\n        i = 0\n        for a in x:\n            if a == \"/\":\n                i += 1\n            else:\n                y = a + y\n        x = int(y[::-1])\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return True\n    if x == 1 or n == 1:\n        return True\n    return False\n",
        "test": "assert     simplify('1/2', '3/4') == False",
        "num_ids": 633
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # O(n^2)\n    return sorted(nums, key=lambda x: (sum(x), x))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 376
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2 == 1) and (num % 10 > 5 and num % 10 < 7):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 0",
        "num_ids": 368
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k = n - i - j\n            if i*i + j*j + k*k == 3*(i+j+k):\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 200
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    list_1 = list(planets)\n    list_2 = list(planets)\n",
        "test": "assert     bf('earth','mars') == ('earth','mars','mercury','venus')",
        "num_ids": 597
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Write your code here.\n    lst = sorted(lst)\n    for x in range(1, len(lst)):\n        if lst[x]!= lst[x-1]:\n            lst.pop(x)\n    return lst\n",
        "test": "assert ",
        "num_ids": 323
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n",
        "test": "assert ",
        "num_ids": 178
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    \n    if lst == []:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num % 2 == 1:\n                total += num**2\n        return total\n            \n",
        "test": "assert         double_the_difference([])                    == 0",
        "num_ids": 381
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return -1\n    \nif __name__ == \"__main__\":\n    game = [[1,2,3,4,5,1],[1,2,3,4,2,-2]]\n    guess = [4,1,1,0,0,-2]\n    print(compare(game,guess)",
        "test": "assert     compare(scores = [70,100,90],guess =[90,70,90]) ==[0,10,0]",
        "num_ids": 432
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    strongest_extension = None\n    max_strength = -1\n    for ext in extensions:\n        strength = -1\n        for ch in ext:\n            if ch.isupper():\n                strength += 1\n            if ch.islower():\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n",
        "test": "assert ",
        "num_ids": 409
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    for i in range(1, len(b)):\n        if b.startswith(a[-i:]):\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"abc\", \"defg\") == False",
        "num_ids": 208
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n",
        "test": "assert     even_odd_count(3412) == (2, 2)",
        "num_ids": 298
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    s = ''\n    r = int(number) % 10\n    if r == 1:\n        s += 'i'\n    elif r == 2:\n        s += 'ii'\n    elif r == 3:\n        s += 'iii'\n    elif r == 4:\n        s += 'iv'\n    elif r == 5:\n        s += 'v'\n    elif r == 6:\n        s += 'vi'\n    elif r == 7:\n        s += 'vii'\n    elif r == 8:\n        s += 'viii'\n    elif r == 9:\n        s += 'ix'\n    if int(number) >= 100:\n        r = int(int(number) / 10)\n        if r == 1:\n            s += 'x'\n        elif r == 2:\n            s += 'xx'\n        elif r == 3:\n            s += 'xxx'\n        elif r == 4:\n            s += 'xl'\n        elif r == 5:\n            s += 'l'\n        elif r == 6:\n            s += 'xl'\n        elif r == 7:\n            s += 'lxx'\n        elif r == 8:\n            s += 'lxxx'\n        elif r == 9:\n            s += 'xix'\n    return s\n",
        "test": "assert ",
        "num_ids": 1387
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) and (b ** 2 + c ** 2 == a ** 2)\n",
        "test": "assert     right_angle_triangle(6, 10, 5) == False",
        "num_ids": 265
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    max_words = []\n    for word in words:\n        if len(word) > len(max_words):\n            max_words = word\n    return max_words\n",
        "test": "assert     find_max(['python', 'x', 'xxx', 'xxx', 'xxxx']) ==    'python'",
        "num_ids": 520
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    number = number if number <= 1000 else 1000\n    need = need if need <= 1000 else 1000\n    remaining = remaining if remaining <= 1000 else 1000\n",
        "test": "assert     eat(1000, 1000, 100) ==     [ 1000, 100 ]",
        "num_ids": 196
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '/':\n            if operand[i] == 0:\n                return None\n            result = result // operand[i]\n        elif operator[i] == '^':\n            result = result ** operand[i]\n    return result\n",
        "test": "assert ",
        "num_ids": 467
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not s:\n        return s\n    s = s.lower() if s[0].isalpha() else s.upper()\n    return s[::-1]\n",
        "test": "assert     solve('a') == 'a'",
        "num_ids": 426
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if text == '':\n        return None\n    hash_obj = hashlib.md5()\n    hash_obj.update(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n",
        "test": "assert string_to_md5('') == None",
        "num_ids": 396
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "test": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]",
        "num_ids": 165
    }
]