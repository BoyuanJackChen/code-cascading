[
    {
        "number": 0,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1,2,3,4], threshold=0.5)",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # TODO: Write your function here\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_list = []\n    open_paranthesis = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_list.append('(')\n            open_paranthesis += 1\n        if paren_string[i] == ')':\n            paren_list.append(')')\n            open_paranthesis -= 1\n        if open_paranthesis == 0 and i == len(paren_string) - 1:\n            paren_list.append(')')\n",
        "test": "assert ",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return float(number) - int(number)\n",
        "test": "assert     truncate_number(7.0) == 1.0",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if operations[0] < 0:\n        for i in range(1, len(operations)):\n            if operations[i] < 0:\n                return True\n            if operations[i] + operations[i-1] < 0:\n                return True\n        return False\n    else:\n        return False\n",
        "test": "assert not below_zero([0,0,1])",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Centerpoint\n    numbers_mean = sum(numbers) / len(numbers)\n",
        "test": "assert ",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    out: List[int] = []\n    if not numbers:\n        return out\n    i = 0\n    while i < len(numbers):\n        out.append(numbers[i])\n        if i < len(numbers) - 1:\n            out.append(delimeter)\n        i += 1\n    return out",
        "test": "assert     intersperse([], ')') == []",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    string_list = paren_string.split()\n    parens_stack = []\n    parens_level = 0\n    for i in string_list:\n        if i == '(':\n            parens_stack.append(parens_level)\n            parens_level += 1\n        elif i == ')':\n            parens_level -= 1\n            if len(parens_stack) > 0:\n                parens_stack.pop()\n            else:\n                raise ValueError('Expected a valid paranthesis')\n        else:\n            raise ValueError('Expected a valid paranthesis')\n",
        "test": "assert     parse_nested_parens('(((((()()()())(())))))') == [2, 1, 1, 1]",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"baz\") == []",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # your code here\n    \n    sum = 0\n    product = 1\n    if len(numbers) == 0:\n        return (0, 1)\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    maxes = []\n    max_num = max(numbers)\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        else:\n            maxes.append(max_num)\n    return maxes\n",
        "test": "assert ",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    s = string\n    for i in range(len(s), 0, -1):\n        if is_palindrome(s[:i]):\n            return s[:i] + s[i:][::-1]\n",
        "test": "assert not is_palindrome(\"Never Odd or Even\") == True",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert     string_xor(\"1100101\", \"1100011\") == \"1100101\"",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert     longest([]) is None",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return max(a, b)\n",
        "test": "assert ",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    prefixes = []\n    if len(string) == 0:\n        return prefixes\n    for index in range(len(string)):\n        prefixes.append(string[:index + 1])\n    return prefixes\n",
        "test": "assert all_prefixes(\"AE\") == [\"A\", \"AE\"]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "test": "assert string_sequence(1) == \"0\"",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    string_chars = []\n    for char in string:\n        if char not in string_chars:\n            string_chars.append(char.lower())\n    return len(string_chars)\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    i = 0\n    arr = []\n    while i < len(music_string):\n        if i + 1 <= len(music_string) - 1 and music_string[i] == 'o' and music_string[i + 1] == '|':\n            arr.append(4)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == '.' and music_string[i + 1] == '|':\n            arr.append(2)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == 'o' and music_string[i + 1] == '.':\n            arr.append(1)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == '|' and music_string[i + 1] == '|':\n            arr.append(2)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == '|' and music_string[i + 1] == '.':\n            arr.append(1)\n            i += 2\n            continue\n        i += 1\n    return arr\n",
        "test": "assert     parse_music('|o|o||o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    count = 0\n    for i in range(0, len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times('string', 'aaaaa') == 0",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    nums = list(map(int, numbers.split()))\n    nums.sort()\n    return''.join(str(num) for num in nums)\n",
        "test": "assert sort_numbers(\"four one zero two three five eight seven nine\") == \"zero nine one four three five two eight seven\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    diff = numbers[1] - numbers[0]\n    for index in range(2, len(numbers)):\n        diff = min(diff, abs(numbers[index] - numbers[index - 1]))\n    return (numbers[0], numbers[index - 1])\n",
        "test": "assert     find_closest_elements([1, 4, 5, 6, 7]) == (1, 6)",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    numbers.sort()\n    min_num = numbers[0]\n    max_num = numbers[-1]\n    rescaled_list = []\n    for num in numbers:\n        rescaled_list.append((num - min_num) / (max_num - min_num))\n    return rescaled_list\n",
        "test": "assert ",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert ",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"123\") == 3",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    d = 1\n    while n%d!= 0:\n        d += 1\n    return d\n",
        "test": "assert     largest_divisor(6) == 1",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    factors = []\n    if n == 1:\n        return [1]\n    else:\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n//i)\n    return factors\n",
        "test": "assert ",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1,2,2,3,3,4,4]) == [1,2,3,4]",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return string.swapcase()\n",
        "test": "assert ",
        "num_ids": 75,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "test": "assert filter_by_prefix([\"dog\", \"cat\", \"monkey\"], \"\") == [\"dog\", \"cat\", \"monkey\"]",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "test": "assert ",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert n >= 2, 'n has to be greater than 1'\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    xs = xs[::-1]\n    x = 0\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n        x += 1\n    return x\n",
        "test": "assert ",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not l:\n        return []\n    \n    l1 = l[:]\n    l2 = l[:]\n    \n    l2.sort()\n    \n    i = 0\n    j = 0\n    \n    while i < len(l1):\n        if j < len(l2) and l1[i] % 3 == 0:\n            l1[i] = l2[j]\n            j += 1\n        i += 1\n    \n    return l1\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    lst = []\n    for x in l:\n        if x not in lst:\n            lst.append(x)\n    return lst\n",
        "test": "assert     unique([1,2,3,3,4]) == [1,2,3,4], \"Not correct\"",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 35,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    largest = l[0]\n    for item in l:\n        if item > largest:\n            largest = item\n    return largest\n",
        "test": "assert     max_element([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 90, \"Wrong max element.\"",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n % 3 == 0 and n % 5 == 0:\n        return 1\n    elif n % 5 == 0:\n        return fizz_buzz(n//5)\n    elif n % 3 == 0:\n        return fizz_buzz(n//3)\n    else:\n        return 0\n",
        "test": "assert     fizz_buzz(30) == 1",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if not l:\n        return l\n    else:\n        i = 0\n        while i < len(l):\n            if l[i] % 2 == 0:\n                i += 1\n            else:\n                l.insert(i, l.pop(i+1))\n                break\n    return l\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert ",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert n >= 0\n",
        "test": "assert ",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        if(l[i] == 0):\n            if(i!= 0):\n                for j in range(i + 1, len(l)):\n                    if(l[j] == 0):\n                        for k in range(j + 1, len(l)):\n                            if(l[k] == 0):\n                                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([-1, -2, -3]) == False",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    n_cars = n\n    n_collisions = 0\n",
        "test": "assert car_race_collision(2) == 2",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    n = len(l)\n    for i in range(n):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([0]) == [1], \"incr_list([0]) == 1\"",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, -4]) == False",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    res = \"\"\n    while x > 0:\n        x, rem = divmod(x, base)\n        res += str(rem)\n    return res[::-1]\n",
        "test": "assert     change_base(1024, 10) == '1024', 'Incorrect'",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(1,1) == 0.5",
        "num_ids": 161,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # def fib4(n):\n    #     if n <= 1:\n    #         return n\n    #     return fib4(n - 1) + fib4(n - 2)\n",
        "test": "assert ",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n%2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2\n",
        "test": "assert ",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if not text:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "test": "assert     is_palindrome('abac') == False, 'Given string is palindrome'",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n < 0:\n        n = p - n\n    return pow(n, p - 2, p)\n",
        "test": "assert     modp(0, 1) == 0",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return encode_shift(s)\n",
        "test": "assert ",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    new_text = \"\"\n    for letter in text:\n        if letter.lower() not in 'aeiou':\n            new_text += letter\n    return new_text\n",
        "test": "assert     remove_vowels('hello') == 'hll'",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert not below_threshold([1, 2, 3, 4, 5], 2)",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return x + y\n",
        "test": "assert     add(3, 5) == 8",
        "num_ids": 49,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "test": "assert     same_chars('hello', 'hello') == True, \"Hello\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(2) == 1",
        "num_ids": 186,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    count_open = 0\n    count_close = 0\n    for char in brackets:\n        if char == \"<\":\n            count_open += 1\n        if char == \">\":\n            count_close += 1\n        if count_close > count_open:\n            return False\n    return count_close == count_open\n",
        "test": "assert     correct_bracketing(\"<]\") is False",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] < prev:\n            return False\n        prev = l[i]\n    return True\n",
        "test": "assert     monotonic([0, 1, 3, 4, 5])",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    return sorted(list(set(l1) & set(l2)))\n",
        "test": "assert ",
        "num_ids": 205,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    max_factor = 2\n    while n % max_factor!= 0:\n        max_factor += 1\n    return max_factor\n",
        "test": "assert ",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert         sum_to_n(10) == 55",
        "num_ids": 148,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    closing_brackets = []\n    opening_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            opening_brackets.append(bracket)\n        elif bracket == \")\":\n            if len(opening_brackets) == 0:\n                return False\n            closing_brackets.append(bracket)\n            opening_brackets.pop()\n    if len(opening_brackets)!= 0:\n        return False\n    for bracket in closing_brackets:\n        if bracket!= \")\":\n            return False\n    return True\n",
        "test": "assert correct_bracketing(\"(()\") == False",
        "num_ids": 942,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return [i*(xs[1] + xs[0] * xs[1]) for i, xs in enumerate(xs[1:])]\n",
        "test": "assert ",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(2) == 1",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count('tttttt') == 0",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return x[shift:] + x[:shift] if shift <= len(x) else x[-shift:] + x[:-shift]\n",
        "test": "assert circular_shift(x, 3) == 5",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = 0\n    for i in s:\n        n += ord(i)\n    return n\n",
        "test": "assert ",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    ans = 0\n    for x in range(0,n+1):\n        if s.count('apple') == x:\n            ans = ans + x\n        elif s.count('orange') == x:\n            ans = ans + x\n        elif s.count('mango') == x:\n            ans = ans + x\n    return ans\n",
        "test": "assert     fruit_distribution('13',1) == 1, 'Example 1.4'",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Q: What if we want to get the last element in the tree\n    #    We can use the idea of binary search for this.\n    #    Assume all the values in the tree are in non-decreasing order.\n    #    Then we can sort the array, and we can run a binary search on the array.\n    #    The key of this is that we want to return the element with the smallest even value.\n    #    So we use a counter, and then we can check if it's even.\n    #    If it's not even, we need to find the smallest value in the array.\n    #    If it's even, we need to find the index of the smallest value.\n    #    Assume we have a tree, and have a list of nodes in ascending order,\n    #    So we can use binary search to find the smallest value.\n    #    We can do this using the two pointers,\n    #    left_index is the smallest value in the array,\n    #    and right_index is the smallest value in the array,\n    #    until they cross.\n    #    Once they cross, we should check if the value of left_index is even.\n    #    If it is, we need to check if the value of right_index is even.\n    #    If it's not, we can use the two pointers to find the smallest value.\n    #\n    #\n    # NOTE: We can try using the value of root's right_child to find the smallest value.\n    #    But it should be noted that the array is always sorted.\n    #    So we don't have to use this value.\n",
        "test": "assert     pluck([1,2]) == [1,1]",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    #find the number of occurrences of the max element\n    max = lst[0]\n    maxcount = 1\n    for i in lst:\n        if i > max:\n            max = i\n            maxcount = 1\n        elif i == max:\n            maxcount += 1\n    return max if maxcount >= 2 else -1\n",
        "test": "assert search([4,2,4]) == 4",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return lst",
        "test": "assert     strange_sort_list([1,2,3]) == [1,2,3], \"Wrong answer\"",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    side_1, side_2, side_3 = sorted([a, b, c])\n    if (side_1 + side_2) > side_3:\n        return round((side_1*side_2)/2, 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(1, 4, 5) == -1",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    \n    q.sort()\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n    return False\n",
        "test": "assert         will_it_fly([1,2,3,4,5], 5) == False, \"The second test fails\"",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr.sort()\n    arr = arr[::-1]\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return i + 1\n    return 0\n",
        "test": "assert ",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    count = 0\n    new_lst = []\n    for char in lst1:\n        if len(char) <= len(lst2):\n            count += 1\n            new_lst.append(char)\n    return new_lst\n",
        "test": "assert     total_match([], []) == []",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    return True if a%3 == 0 and a%5 == 0 else False\n",
        "test": "assert     is_multiply_prime(99) == False, \"Test 1: is_multiply_prime(99) failed\"",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return x%n == 0\n    \ndef is_simple_power_efficient(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    elif x > n:\n        return False\n    else:\n        for i in range(2, n+1):\n            if x%i!= 0:\n                continue\n            else:\n                return False\n        return True\n",
        "test": "assert ",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if a == 0:\n        return True\n    return a**3 == a\n",
        "test": "assert     iscube(1) == True, 'failed test 1'",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    decimal = int(num, 16)\n    \n    if (decimal - 1) % 6 == 0:\n        return 1\n    \n    count = 0\n    \n    while decimal > 0:\n        if is_prime(decimal):\n            count += 1\n        decimal //= 16\n    \n    return count\n",
        "test": "assert ",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return 'db' + str(decimal_to_binary_rec(decimal))\n",
        "test": "assert decimal_to_binary(3) == 'dd'",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    d = {x: False for x in string.ascii_lowercase}\n",
        "test": "assert ",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    grades = grades.copy()\n    grades.sort()\n    letter = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F']\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return True if len(string) == 1 and string.isalpha() else False\n",
        "test": "assert prime_length(\"\") == False, \"empty string should be False\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Iterate through the digits.\n    # If digit is 1, return the sum of that number + 1.\n    # Else, return 0.\n    # If the end is 0, the number ends with 0, which is not a 1.\n    # If the start is 0, the number starts with 0, which is not a 1.\n    return sum(i + 1 if i % 10 == 1 else 0 for i in range(10))\n",
        "test": "assert ",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return ''.join(map(str, range(1, N + 1)))\n",
        "test": "assert     solve(0) == ''",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i%2 ==1)\n",
        "test": "assert ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return''.join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle(\"   \") == \"\"",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sorted(set(\n        tuple(tuple(i) for i in range(len(lst))),\n        key=lambda x: (\n            sorted(x[::2], reverse=True),\n            sorted(x[1::2], reverse=True))\n    ) if lst else [])\n",
        "test": "assert ",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if array is None:\n        return None\n    else:\n        array = list(array)\n        if not array:\n            return None\n        \n        if sum(array) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n",
        "test": "assert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def encrypt(s):\n        # 1. Create a list of each character in the string\n        a = list(s)\n        # 2. Sort the list\n        a.sort()\n        # 3. Loop through the list, if the letter is a capital letter,\n        # move it down a value. If the letter is lower, move it down\n        # by one (half of the value)\n        for i in range(len(a)):\n            if a[i].isupper():\n                a[i] = chr(ord(a[i]) + 2)\n            else:\n                a[i] = chr(ord(a[i]) + 1)\n        # 4. Return the string as a whole\n        return ''.join(a)\n    return encrypt\n",
        "test": "assert ",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # TODO\n    # return None\n",
        "test": "assert next_smallest([0,1,2,3,4,5,6,7,8,9,10]) == None",
        "num_ids": 1754,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    words = S.split('.')\n    count = 0\n    for word in words:\n        if word[0] == 'I':\n            count += 1\n    return count\n    \n",
        "test": "assert     is_bored('I') == 1, 'A sentence that starts with I should return 1'",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return(type(x) == int and type(y) == int and type(z) == int and x+y+z == y+z+x and x == y and x == z)\n",
        "test": "assert     any_int(2,3,2) == False, 'Third'",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    output = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                if letter.lower() in \"aeiou\":\n                    new_letter = letter.lower()\n                    letter = letter.upper()\n                    output += new_letter\n            else:\n                new_letter = letter.upper()\n                letter = letter.lower()\n                output += new_letter\n        else:\n            output += letter\n    return output\n",
        "test": "assert ",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    number = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]\n    for x in lst:\n        flag = False\n        for i in range(0,len(number)):\n            if x % number[i] == 0:\n                flag = True\n                break\n        if flag:\n            continue\n        else:\n            lst.append(x)\n    lst = sorted(lst,key=lambda x:x%10)\n    n = 0\n    for i in lst:\n        n = n + i%10\n    return n\n",
        "test": "assert ",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return not dict or all(isinstance(key, str) for key in dict.keys()) and all(isinstance(key, str) for key in dict.keys())\n",
        "test": "assert     check_dict_case({'a':'b'}) == True, \"Not all keys are strings\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    primes = [2,3,5,7,11,13,17]\n    if n <= len(primes) - 1:\n        return primes[:n]\n    return primes[1:]\n",
        "test": "assert ",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return 0\n",
        "test": "assert     multiply(12, 12) == 0",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert     count_upper('ab') == 0",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if value in (\"-0\", \"0\"):\n        return 0\n    else:\n        return int(round((int(value) / 10) * 10))\n",
        "test": "assert     closest_integer(\"-14.0\") == -14 ",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 1)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 1) + make_a_pile(n - 1)\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    \n    return s.split(', ')",
        "test": "assert     words_string(\"The\") == [\"The\"], \"Wrong words\"",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    res = -1\n    if x <= y:\n        return res\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                res = i\n        return res\n",
        "test": "assert     choose_num(3, 5) == -1",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return int(binary_string(int(binary_string(n) + binary_string(m)), 32), 2)\n",
        "test": "assert ",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    x_set = set(x)\n    return sorted(list(x_set))\n",
        "test": "assert     unique_digits([1, 1, 2, 3, 4, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # your code here\n    return sorted(sorted(arr), reverse=True",
        "test": "assert     by_length([1,2,3,4,5,6,7,8,9]) == [",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    a = list(range(1, n+1))\n    for i in range(1, n):\n        if i % 2 == 1:\n            a[i] = a[i] * i\n    return a\n",
        "test": "assert ",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    even_count, odd_count = 0, 0\n    for n in range(1, n + 1):\n        n_str = str(n)\n        even_odd = True if n_str[::2] == n_str[1::2] else False\n        if even_odd:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert ",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    cnt = 0\n    for num in arr:\n        tmp = 0\n        for i in str(num):\n            if int(i) < 0:\n                tmp += -1 * int(i)\n            else:\n                tmp += int(i)\n        if tmp == 0:\n            cnt += 1\n    return cnt\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if len(arr)==0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([4,5,2,3,4]) == False",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # If the lst1 is already even, then it is not possible to exchange elements between it\n    # and the lst2.\n    if all(element % 2 == 0 for element in lst1) == True:\n        return \"NO\"\n    \n    # If the lst2 is empty, then it is possible to exchange elements between the lst1 and lst2\n    # and make them all to be even.\n    if len(lst2) == 0:\n        return \"YES\"\n    \n    # If the lst1 and lst2 are of even and the largest element of lst1 is smaller\n    # than the largest element of lst2, then it is not possible to exchange elements between them\n    if all(element % 2 == 0 for element in lst1) == True:\n        return \"NO\"\n    \n    # If the largest element of lst1 is smaller than the largest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if max(lst1) < max(lst2):\n        return \"NO\"\n    \n    # If the largest element of lst2 is smaller than the largest element of lst1,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if max(lst2) < max(lst1):\n        return \"NO\"\n    \n    # If the largest element of lst1 is larger than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if min(lst1) > min(lst2):\n        return \"NO\"\n    \n    # If the smallest element of lst2 is larger than the smallest element of lst1,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if min(lst2) > min(lst1):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of even and exactly the same length,\n    # then the elements can be exchanged between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == True:\n        return \"YES\"\n    \n    # If the elements of the lst1 and lst2 are of even and exactly the same length,\n    # and the largest element of lst1 is smaller than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == True and max(lst1) < min(lst2):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of even and exactly the same length,\n    # and the largest element of lst1 is larger than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == True and max(lst1) > min(lst2):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of odd and exactly the same length,\n    # and the largest element of lst1 is smaller than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == False and max(lst1) < min(lst2):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of odd and exactly the same length,\n    # and the largest element of lst1 is larger than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == False and max(lst1) > min(lst2):\n        return \"NO\"\n    ",
        "test": "assert     exchange([5,6,7,8], [5,6,7,8]) == \"NO\"",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n",
        "test": "assert ",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    s = s.replace(\" \", \"\")\n    for i in s:\n        if i in c:\n            s = s.replace(i, \"\")\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert ",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    odds = []\n    for i in lst:\n        odd_count_str = 0\n        for j in range(len(i)):\n            if int(i[j]) % 2 == 1:\n                odd_count_str += 1\n        odds.append(odd_count_str)\n    return [\"the number of odd elements \" + str(odds[i]) + \" of the string \" + str(i) +\n     \" of the input.\" for i in range(len(lst))]\n",
        "test": "assert odd_count([]) == [], \"test failed\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    s = 0\n    res = float('inf')\n    for i in range(n):\n        s += nums[i]\n        res = min(res, s)\n        if s < 0:\n            s = 0\n    return res\n",
        "test": "assert     minSubArraySum([3,-1,2,-3,1]) == 1",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    from collections import deque\n    \n    def bfs(grid, capacity):\n        \n        rows, cols = len(grid), len(grid[0])\n        dist = [[-1]*cols for _ in range(rows)]\n        queue = deque()\n        dist[0][0] = 0\n        q_size = 0\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    queue.append((i, j))\n                    dist[i][j] = q_size\n                    q_size += 1\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in (1, 0), (0, 1), (-1, 0), (0, -1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    if dist[nx][ny] == -1:\n                        if grid[nx][ny] == 0:\n                            dist[nx][ny] = dist[x][y] + 1\n                            q_size += 1\n                            queue.append((nx, ny))\n                    else:\n                        if dist[nx][ny] > dist[x][y] + 1:\n                            dist[nx][ny] = dist[x][y] + 1\n                            q_size += 1\n                            queue.append((nx, ny))\n        return q_size, dist\n    \n    queue, q_size = bfs(grid, capacity)\n    res = queue.popleft()\n    \n    for i in range(q_size - 1):\n        if queue and queue[0] > res:\n            res = queue.popleft()\n        else:\n            break\n    \n    return res\n",
        "test": "assert ",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(arr, key=lambda x: x if x > 0 else -x)",
        "test": "assert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    \n    \"\"\"select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # Your code here\n    words = []\n    s = s.split()\n    for word in s:\n        if len(word) == n:\n            words.append(word)\n    return words\n",
        "test": "assert     select_words(\"a b c d e\", 0) == []",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    \n    vowels = 'aeiou'\n    l = len(word)\n    vowel = word[-1]\n    for i in range(l-2, -1, -1):\n        if word[i] in vowels:\n            return vowel\n    return \"\"\n",
        "test": "assert get_closest_vowel('M') == '', get_closest_vowel('M')",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # init match_parens_helper()\n    def match_parens_helper(lst):\n        '''\n        The idea is to make a stack that contains the index of the current\n        open parentheses in the input list. While traversing the input list,\n        we pop the top element of the stack and check if the index of the\n        current element equals the index of the top element of the stack. If\n        the current element is open parentheses and the top element of the\n        stack is closed parentheses, then we add this element to the result\n        list.\n        '''\n        # initialize result and stack\n        result = []\n        stack = []\n",
        "test": "assert     match_parens(['(', '()(', '())']) == 'No', \"TEST 4\"",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    # sort ascending\n    arr = sorted(arr)\n    # return the first k elements\n    return arr[:k]\n",
        "test": "assert maximum([], 2) == []",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n",
        "test": "assert     solution([]) == 0, 'test 4 is wrong'",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = len(arr)\n    j = 0\n    for i in range(k):\n        while j < n and arr[j] > 0:\n            arr[i] -= 1\n            j += 1\n    return sum(arr[:k])\n",
        "test": "assert     add_elements([4, 2, 3, 4], 3) == 17",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    odd_nums = []\n",
        "test": "assert     get_odd_collatz(4) == [1, 2, 3, 5]",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if date:\n        month = int(date.split('-')[0])\n        if 1 <= month <= 12:\n            day = int(date.split('-')[1])\n            year = int(date.split('-')[2])\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                if day <= 31 and day >= 1:\n                    return True\n                else:\n                    return False\n            if month == 4 or month == 6 or month == 9 or month == 11:\n                if day <= 30 and day >= 1:\n                    return True\n                else:\n                    return False\n            if month == 2 and day <= 29:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     valid_date('10-02-2019') == True, 'Failed: 10-02-2019'",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return txt.split()\n    \n",
        "test": "assert     split_words('abc def ghi') == ['abc', 'def', 'ghi']",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"Your function does not work!\"",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # create a dictionary\n    d = {}\n    # create an empty list\n    l = []\n    # loop through all the intervals\n    for i in range(len(interval1)):\n        # loop through the dictionary\n        for j in range(len(interval2)):\n            # append the key\n            if interval1[i][0] >= interval2[j][0] and interval1[i][1] <= interval2[j][1]:\n                # check if the key is in the dictionary\n                if interval1[i] in d:\n                    # if the key is in the dictionary\n                    if d[interval1[i]] == True:\n                        # add the key\n                        l.append(interval1[i])\n                        # change the key to False\n                        d[interval1[i]] = False\n                else:\n                    # if the key is not in the dictionary\n                    d[interval1[i]] = True\n    # create a set\n    s = set(l)\n    # check if the lenght of the set is prime\n    return len(s) == 1\n",
        "test": "assert     intersection((1, 10), (20, 30)) == \"NO\"",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # check for empty array\n    if not arr:\n        return None\n",
        "test": "assert prod_signs([-1]) == None",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if not grid or k <= 0:\n        return []\n",
        "test": "assert     minPath([[1,2],",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    trib = [3, 1, 4, 2, 5]\n    if n == 1:\n        return trib\n    for i in range(2,n):\n        trib.append(sum(trib[-3:])+ trib[-1])\n    return trib\n",
        "test": "assert     tri(6) == [1, 3, 6]",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return 0\n",
        "test": "assert     digits(9) == 0",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    string = string.replace(' ', '')\n    new_string = string\n    stack = []\n    if len(string) == 0 or len(string) == 1:\n        return False\n    else:\n        for i in range(len(string)):\n            if string[i] == '[':\n                stack.append('[')\n            elif string[i] == ']':\n                if stack!= [] and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n        if stack == []:\n            return True\n        else:\n            return False\n",
        "test": "assert     is_nested(\"\") == False",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    #return sum([(a**2) for a in lst])\n    lst_temp = lst\n    lst_temp = [a**2 for a in lst_temp]\n    return sum(lst_temp)\n    \n",
        "test": "assert     sum_squares([1, 2, 3]) == 14",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Code Here\n    return True if txt[-1].isalpha() and txt.find(' ') == -1 else False\n",
        "test": "assert check_if_last_char_is_a_letter('asdfghjkl')",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(arr) <= 1:\n        return -1\n    \n    index = -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            index = i-1\n            break\n    \n    if index == -1:\n        return -1\n    else:\n        return index\n",
        "test": "assert ",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if not lst:\n        return None, None\n    # Positive\n    pos = lst[0]\n    for i in lst:\n        if i > 0:\n            pos = i\n            break\n    # Negative\n    neg = lst[0]\n    for i in lst:\n        if i < 0:\n            neg = i\n            break\n    # Return\n    return (neg, pos)\n",
        "test": "assert ",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if type(a) == type(b) or a == b:\n        return None\n    if type(a) == float:\n        if a > b:\n            return a\n        return b\n    if type(a) == int:\n        if a > b:\n            return a\n        return b\n    if type(a) == str:\n        if a > b:\n            return a\n        return b\n",
        "test": "assert     compare_one(2, 2.0)     == None",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return n%2 == 0 and (n/2)%2 == 0 and ((n/2) + 1)%2 == 0 and ((n/2) + 2)%2 == 0\n",
        "test": "assert     is_equal_to_sum_even(13) == False, \"Error 2\"",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    factorial = 1\n    for i in range(n):\n        factorial *= n-i\n    return factorial\n",
        "test": "assert     special_factorial(2) == 2",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return re.sub(\"\\s+\", \"\", text).strip()\n    \nif __name__ == '__main__':\n    \n    #Test your function here\n    print fix_spaces(\"Example\") == \"Example\"\n    print fix_spaces(\"Example 1\") == \"Example_1\"\n    print fix_spaces(\" Example 2\") == \"_Example_2\"\n    print fix_spaces(\" Example   3\") == \"_Example-3\"\n    print fix_spaces(\"   Example 4\") == \"Example_4\"\n    print fix_spaces(\"Example 1   Example 2\") == \"_Example_1-Example_2\"\n    print fix_spaces(\"Example    Example\") == \"Example_Example",
        "test": "assert ",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if file_name == \"\":\n        return \"No\"\n    elif len(file_name) > 3 and file_name.find(\".\") == -1:\n        return \"No\"\n    elif file_name[0].isalpha() == False or file_name[0].isnumeric() == False:\n        return \"No\"\n    elif file_name[0].isalpha():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"ex\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dot\")!= -1:\n            return \"No\"\n    elif file_name[0].isdigit():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"dot\")!= -1 or file_name.find(\"exe\")!= -1:\n            return \"No\"\n    elif file_name[0].isupper():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"dot\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dll\")!= -1:\n            return \"No\"\n    return \"Yes\"\n",
        "test": "assert     file_name_check('12345.txt') == 'No'",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            result += lst[i]**2\n        else:\n            result += lst[i]\n    \n    return result\n",
        "test": "assert ",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if x == '0':\n        return False\n    x = x.replace('/', '*')\n    x = x.split('*')\n    x = [int(y) for y in x]\n    if x[1] == 1:\n        return True\n    else:\n        return False",
        "test": "assert     simplify('1/2', '1/2') == False",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 0",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Write your code here\n    a = range(n + 1)\n    count = 0\n    for i in range(1, n // 2 + 1):\n        for j in range(i + 1, n // 2 + 1):\n            k = n - j - i\n            if a[i] + a[j] + a[k] == 3:\n                count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if planet1 not in PLANETS:\n        return ()\n    if planet2 not in PLANETS:\n        return ()\n    \n    if PLANETS[planet1] < PLANETS[planet2]:\n        return (planet2, ) + bf(planet1, planet2)\n    elif PLANETS[planet1] > PLANETS[planet2]:\n        return (planet1, ) + bf(planet1, planet2)\n    else:\n        return (planet1, ) + bf(planet1, planet2)\n",
        "test": "assert ",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return sorted(lst)\n",
        "test": "assert ",
        "num_ids": 87,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n    \nif __name__ == '__main__':\n    print(\"For the given n, x should be returned if n is prime and y otherwise\")\n    x = float(input(\"Please enter x: \"))\n    y = float(input(\"Please enter y: \"))\n    n = int(input(\"Please enter n: \"))\n    print(x_or_y(n, x, y))",
        "test": "assert ",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not lst:\n        return 0\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return \n    \n",
        "test": "assert compare([1,2,3,4,5,6],[1,2,3,4,5,6]) == [0,0,0,0,0,0], 'wrong'",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    import re\n    \n    class_name = class_name.lower()\n    pattern = r\"([a-z])([A-Z])\"\n    pattern2 = r\"([A-Z])([a-z])\"\n    pattern3 = r\"([a-z])([A-Z])\"\n    strength = []\n    ext = []\n    for name in extensions:\n        comp = re.findall(pattern, name)\n        comp2 = re.findall(pattern2, name)\n        comp3 = re.findall(pattern3, name)\n        strength.append(float(comp[0][0] - comp[0][1]))\n        strength.append(float(comp2[0][0] - comp2[0][1]))\n        strength.append(float(comp3[0][0] - comp3[0][1]))\n        ext.append(name)\n    ext_strength = zip(ext, strength)\n    ext_strength = sorted(ext_strength, key=lambda x: x[1])\n    return ext_strength[0][0]\n",
        "test": "assert ",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    for i in range(len(b)):\n        if b in a or a in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('cat', 'cactt') == False",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return tuple(count_digits(num, lambda x: x % 2 == 0) + count_digits(num, lambda x: x % 2 == 1))\n",
        "test": "assert     even_odd_count(-1234) == (3, 1)",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if not isinstance(number, int) or number < 1:\n        raise ValueError('The parameter should be a positive integer.')\n",
        "test": "assert     int_to_mini_roman(4) == \"IV\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # Side lengths must be > 0 and < 100.\n    if (a < 0 or b < 0 or c < 0) or (a > 100 or b > 100 or c > 100):\n        return False\n    # 3 sides must be > 0 and < 100.\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # No vertex repeated.\n    if any(x == 0 for x in [a, b, c]):\n        return False\n    # Check that the three sides are the same length.\n    if a == b and b == c:\n        return True\n    # Check that the angles are exactly 90 degrees.\n    if a == b and b == c:\n        return True\n    # Check that the sides are as nearly as possible and that the three sides\n    # are not equal to each other.\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = {}\n    for word in words:\n        result[word] = len(word)\n    max_word = max(result.items(), key=lambda x: x[1])\n    return max_word[0]",
        "test": "assert     find_max(['hello', 'world', 'python', 'hello']) == 'hello'",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return (number + need - remaining, remaining)\n    \n    \n    \ndef find_max_value(input_list):\n    \"\"\"\n    You are the master of the door lock\n    and have just picked up the lock. You have 2 keys.\n    With each key you can pick up a card (a lockcard)\n    and throw it away.\n    In a round, you can pick up a lockcard and throw it away\n    but once you choose to throw away the lockcard, you can't choose\n    to pick it up again. You are going to be stuck in a loop forever!\n    \n    Example:\n    * find_max_value([1, 2, 3]) -> 4\n    * find_max_value([4, 2, 3]) -> 4\n    * find_max_value([1, 2, 1, 3]) -> 3\n    * find_max_value([4, 2, 3, 3]) -> 4\n    \n    Variables:\n    @input_list : list\n        The list of lockcards that you are going to work with.\n        If you are stuck in a loop, then you need to throw away a lockcard.\n    \n    Constrain:\n    * 0 <= input_list <= 1000\n",
        "test": "assert ",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    res = 0\n    for i in range(len(operator)):\n        if i == 0:\n            res = eval(str(operand[i]) + operator[i] + str(operand[i + 1]))\n        elif i == 1:\n            res = eval(str(operand[i - 1]) + operator[i] + str(operand[i]))\n        else:\n            res = eval(str(operand[i - 1]) + operator[i] + str(operand[i]))\n    return res\n",
        "test": "assert    do_algebra([\"+\"], [\"1\", \"2\"]) == 3",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    string = s.lower()\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i].isalpha():\n            if string[i].isupper():\n                new_string += string[i].lower()\n            else:\n                new_string += string[i].upper()\n        else:\n            new_string += string[i]\n    return new_string\n",
        "test": "assert solve(\"\")==\"\"",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None, \"Expected None\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return sorted([i for i in range(a, b) if i % 2 == 0])\n",
        "test": "assert     generate_integers(1, 10) == [2, 4, 6, 8]",
        "num_ids": 224,
        "indeed": false
    }
]