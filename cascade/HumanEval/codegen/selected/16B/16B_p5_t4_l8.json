[
    {
        "number": 0,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    for i, num_1 in enumerate(numbers):\n        for num_2 in numbers[i + 1:]:\n            if abs(num_1 - num_2) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0.5, 0.5, 0.6, 0.6], 0.15) == True"
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    index = 0\n    result = []\n    while index < len(paren_string):\n        current_paren_group = []\n        current_paren_index = index\n        while index < len(paren_string) and paren_string[index] == \"(\":\n            current_paren_group.append(paren_string[index])\n            index += 1\n        if current_paren_group:\n            while index < len(paren_string) and paren_string[index] == \")\":\n                current_paren_group.append(paren_string[index])\n                index += 1\n            if current_paren_group:\n                result.append(''.join(current_paren_group))\n    return result\n",
        "test": "assert     separate_paren_groups(\"()\") == [\"()\"]"
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    number_str = str(number)\n    decimals = len(number_str.split(\".\")[-1])\n    decimals = 1/(10**decimals)\n    number = number % (1+decimals)\n    number = number - (number % 1)\n    return number\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if len(operations) == 0:\n        return False\n    for i in range(0, len(operations)):\n        if operations[i] < 0 and i == 0:\n            return True\n        if operations[i] < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    mean = sum(numbers) / len(numbers)\n    differences = [abs(mean - number) for number in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0"
    },
    {
        "number": 5,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([], 1) == []"
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    # Store each paren\n    paren_list = [p for p in paren_string.split()]\n    # Initialize stack\n    s = []\n    # Loop through list and push to stack when there is opening paren,\n    # and pop when there is closing paren\n    for p in paren_list:\n        if p == '(':\n            s.append(p)\n        elif p == ')':\n            s.pop()\n    return [len(s) for paren in paren_list]\n        \n",
        "test": "assert     parse_nested_parens('(())')                 == [0]"
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    filter_list = []\n    for item in strings:\n        if substring in item:\n            filter_list.append(item)\n    return filter_list\n",
        "test": "assert     filter_by_substring(['This is a test', 'Is this a test'], 'testa') == []"
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i - 1::-1]\n    return string\n",
        "test": "assert     make_palindrome('a') == 'aa'"
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "test": "assert     string_xor(\"1\", \"1\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    if not strings:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n",
        "test": "assert     longest([\"dog\", \"cat\", \"bird\", \"horse\"]) == \"horse\""
    },
    {
        "number": 13,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"\") == []"
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "test": "assert         string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    # a dictionary to store how many time we have seen each character in our string\n    distinct_characters = {}\n    for character in string:\n        # every time we encounter a character, add it to our dictionary if it does not exist\n        if character in distinct_characters:\n            distinct_characters[character] = distinct_characters[character] + 1\n        else:\n            distinct_characters[character] = 1\n    # returns the number of distinct characters\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return [int(i[0]) if i[0] == 'o' or i[0] == 'o' else i[1] if i[0] == '.' or i[0] == '.' else 1 for i in\n            [i.split('|') for i in music_string.split()]]\n",
        "test": "assert     parse_music(\"|.o|.o|.o|.o|.\") == [1.0]"
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            if string[i: i + len(substring)] == substring:\n                count += 1\n    return count\n",
        "test": "assert     how_many_times('aa', 'aa') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    a = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    a.sort()\n    b = []\n    for x in a:\n        if x in numbers:\n            b.append(x)\n    b.sort()\n    return''.join(b)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\""
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return min(numbers), max(numbers)\n",
        "test": "assert     (find_closest_elements([1, 1, 2, 3, 5, 7]) == (1, 7)), \"error\""
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    numbers.sort()\n    min_number = numbers[0]\n    max_number = numbers[len(numbers) - 1]\n    for i in range(len(numbers)):\n        numbers[i] -= min_number\n        numbers[i] /= (max_number - min_number)\n    return numbers\n",
        "test": "assert     rescale_to_unit([1,2,3]) == [0,0.5,1]"
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen(\"hello world\") == 11"
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    assert n > 0\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert     largest_divisor(9) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n < 2:\n        return []\n    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n // i\n    if n > 2:\n        result.append(n)\n    return result\n",
        "test": "assert     [2,3] == factorize(6)"
    },
    {
        "number": 26,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    i = 0\n    while i < len(numbers):\n        j = 0\n        while j < len(numbers) - 1:\n            if numbers[j] == numbers[j+1]:\n                numbers.remove(numbers[j])\n            else:\n                j += 1\n        i += 1\n    return numbers\n",
        "test": "assert     [] == remove_duplicates([])"
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    flipped = ''\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n        elif char.isupper():\n            flipped += char.lower()\n    return flipped\n",
        "test": "assert "
    },
    {
        "number": 28,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    result = ''\n    for i in strings:\n        result += i\n    return result\n",
        "test": "assert     concatenate(['hello', 'world', 'in', 'a', 'frame'])!= \"hello world in a frame and a mouse\""
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    filtered_list = []\n    for i in range(len(strings)):\n        if strings[i].startswith(prefix):\n            filtered_list.append(strings[i])\n    return filtered_list\n",
        "test": "assert     filter_by_prefix(['python', 'java', 'c#'], 'py') == ['python']"
    },
    {
        "number": 30,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return [item for item in l if item > 0]\n",
        "test": "assert     get_positive([-3, -2, 1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(10) == False"
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"Only int or float values allowed\")\n    if any(x == 0 for x in xs):\n        return 0\n    xs = [x / xs[-1] for x in xs]\n    if len(xs) % 2!= 0 or any(x == 0 for x in xs):\n        raise ValueError(\"Only positive values are allowed\")\n    x = 1.0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        if poly(xs, x) * poly(xs, x + 0.1) < 0:\n            return x\n",
        "test": "assert     math.isclose(find_zero([1, 0, 0]), 0)"
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    l3 = sorted(l)\n    for i in range(len(l)):\n        if i%3 == 0:\n            l3[i] = l[i]\n    return l3\n",
        "test": "assert     sort_third([9,8,7,6,5,4,3,2,1]) == [9,8,7,6,5,4,3,2,1], \\"
    },
    {
        "number": 34,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1]) == [1]"
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1, 4, 5, 2, 3, 4, 6]) == 6"
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if n % 11 == 0 or n % 13 == 0:\n        return 1\n    return 0\n",
        "test": "assert     fizz_buzz(15) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    return sorted(l[::2]) + sorted(l[1::2])\n",
        "test": "assert     sort_even([1, 3, 2, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    groups = s.split('|')\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"WWWWBBBBBW\") == \"WWBBBBBBW\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    f1 = 1\n    f2 = 1\n    # Generating a Fibonacci number\n    while f2 < n:\n        f1, f2 = f2, f1+f2\n    # Computing if a Fibonacci number is prime\n    # https://www.quora.com/How-does-an-efficient-algorithm-for-checking-if-a-number-is-prime-exist\n    isPrime = True\n    i = 2\n    while i * i <= f2:\n        if f2 % i == 0:\n            isPrime = False\n            break\n        i += 1\n    if isPrime:\n        return f2\n    return None\n",
        "test": "assert     prime_fib(1) == 1"
    },
    {
        "number": 40,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    set_elements = set()\n    for num in l:\n        if num in set_elements:\n            return True\n        set_elements.add(num)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,2,3,4,5]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(2, n):\n        if abs(i-1) % (n - 1) == 0:\n            count += 1\n    return count\n",
        "test": "assert     car_race_collision(1) == 0, 'incorrect for n = 1'"
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return [i+1 for i in l]\n",
        "test": "assert "
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    #sort the list\n    l.sort()\n    #create a dictionary to store the count of each number\n    count_dict = {}\n    #loop over the list\n    for i in range(len(l)):\n        #if the number is already in the dictionary\n        if l[i] in count_dict:\n            #increment the count\n            count_dict[l[i]] += 1\n        #otherwise\n        else:\n            #add it to the dictionary with count 1\n            count_dict[l[i]] = 1\n    #loop over the dictionary\n    for j in count_dict.keys():\n        #if the number has a count of 2\n        if count_dict[j] == 2:\n            #return True\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5,6]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if x == 0:\n        return \"0\"\n    if x < 0:\n        return change_base(-x, base)\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n",
        "test": "assert     change_base(1, 2) == \"1\""
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(2, 3) == 3), \"Wrong area!\""
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n == 0:\n        raise ValueError('Error: Empty list')\n    if n % 2 == 0:\n        return (s[int(n/2)] + s[int(n/2-1)])/2\n    else:\n        return s[int((n-1)/2)]\n",
        "test": "assert     median([1]) == 1"
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # is_palindrome = lambda s: s == s[::-1]\n    # return is_palindrome(text)\n    return text == text[::-1]\n    \ndef is_palindrome_sentence(sentence: str):\n    \"\"\"\n    Checks if given sentence is a palindrome\n    >>> is_palindrome_sentence('anna izabella')\n    True\n    >>> is_palindrome_sentence('anna')\n    False\n    \"\"\"\n    return is_palindrome(sentence.replace(' ', '').lower())\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     is_palindrome(\"abba\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    if n == 0:\n        return 1\n    return (2 * modp(n - 1, p)) % p\n",
        "test": "assert     modp(0, 5) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"zebra\")) == \"zebra\", \"Test failed\""
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    # use: ''.join(char if char not in vowels else '' for char in text)\n    vowels = frozenset('aeiouAEIOU')\n    return ''.join(char for char in text if char not in vowels)\n",
        "test": "assert     remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sum(l) < t\n",
        "test": "assert     below_threshold([1,2,3,4,5], 2) == False, \"Test 2\""
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return len(s0) == len(s1) and len(s0) == len(set(s0) & set(s1))\n",
        "test": "assert not same_chars(\"ab\", \"ac\")"
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    bracket_dict = {\">\": \"<\", \"<\": \">\"}\n    stack = []\n    for char in brackets:\n        if char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif char == \"<\":\n            stack.append(char)\n    return not stack\n",
        "test": "assert     correct_bracketing(\"<\") == False, \"One opening bracket without closing\""
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    if len(l) < 3:\n        return True\n    if l[0] >= l[1]:\n        return l[0] >= l[1] and monotonic(l[1:])\n    if l[0] <= l[1]:\n        return l[0] <= l[1] and monotonic(l[1:])\n",
        "test": "assert     monotonic([0, 1, 2, 3, 4]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1 & s2)\n",
        "test": "assert     set(common([1, 2, 3], [1, 2, 4])) == set([1, 2])"
    },
    {
        "number": 59,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    largest_factor = n - 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    return largest_factor\n",
        "test": "assert     largest_prime_factor(6) == 3"
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "test": "assert     sum_to_n(10) == 55,         f\"expected 55 got {sum_to_n(10)}\""
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '(':\n            bracket_stack.append(b)\n        elif b == ')':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    if not bracket_stack:\n        return True\n    return False\n",
        "test": "assert     correct_bracketing(\"(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    ret = []\n    for i, x in enumerate(xs[1:]):\n        ret.append(i + 1)\n        ret.append(x * (i + 1))\n    return ret\n",
        "test": "assert     derivative([1, 0])     == [1, 0]"
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    assert n >= 0, 'Incorrect input!'\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    \n    return len([i for i in s if i in \"aeiouAEIOU\"])\n",
        "test": "assert     vowels_count('lintcode')                 == 3"
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if shift < 0:\n        raise ValueError(\"negative shift value\")\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     circular_shift(12, 1) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    pass\n",
        "test": "assert     digitSum('aBcD') == 65"
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    def fruit_distribution(s, n):\n        m = s.split(\" \")\n        t = []\n        for i in m:\n            if int(i) < 0:\n                t.append(int(i))\n        t.append(n - sum(t))\n        return t.count(\"mango\")\n    return fruit_distribution(s, n)\n    \n",
        "test": "assert fruit_distribution('2 2 1', 5) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    n = len(arr)\n    if n == 0:\n        return []\n    arr.sort()\n    if n == 1:\n        return [arr[0], 0]\n    for i in range(n):\n        if i % 2 == 0 and arr[i] < arr[i+1]:\n            return [arr[i], i]\n    return []\n",
        "test": "assert     [    0, 0    ] == pluck([0])"
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    # if list is empty, return -1\n    if lst == []:\n        return -1\n    else:\n        # create dictionary where key is the number, value is how many times it appears\n        dictionary = {number: lst.count(number) for number in lst}\n        # find the maximum key in the dictionary\n        max_key = max(dictionary)\n        # if the value of max_key is greater than or equal to its own value, return -1\n        if max_key >= dictionary[max_key]:\n            return -1\n        # else, return the max key\n        else:\n            return max_key",
        "test": "assert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    result = []\n    for i in range(len(lst)):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    for i in range(len(lst)):\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result\n",
        "test": "assert     strange_sort_list([1, 3, 5, 7]) == [1, 3, 5, 7]"
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    sorted_sides = sorted([a, b, c])\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        return round((sorted_sides[0] * sorted_sides[1] * 0.5), 2)\n    return -1\n",
        "test": "assert     triangle_area(3,4,5) == 6"
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    sum = 0\n    l = len(q)\n    if l % 2 == 0:\n        for i in range(0, l, 2):\n            sum += q[i]\n        if sum > w:\n            return False\n        else:\n            return True\n    else:\n        for i in range(0, l-1, 2):\n            sum += q[i]\n        if sum > w:\n            return False\n        else:\n            return True\n",
        "test": "assert     will_it_fly([1], 3) == True"
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    count = 0\n    start = None\n    for i in range(len(arr)):\n        if start == None:\n            if arr[i]!= arr[len(arr) - 1 - i]:\n                start = arr[i]\n                arr[i] = arr[len(arr) - 1 - i]\n                count += 1\n        else:\n            if arr[i]!= start:\n                count += 1\n                arr[i] = start\n    return count",
        "test": "assert     smallest_change([1,1,5,1]) == 2"
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) < len(lst2):\n            return lst1\n        else:\n            return lst2\n",
        "test": "assert     total_match(['what', 'is', 'your', 'name'], ['what', 'is', 'your', 'name'])     == ['what', 'is', 'your', 'name']"
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    if a < 10:\n        return False\n    # check if it is a multiple of 3\n    if a % 3 == 0:\n        # check if it is multiple of 2\n        if a % 2 == 0:\n            return False\n        else:\n            # if not multiply by 2, check if it is multiple of another prime number\n            for i in range(3, int(sqrt(a)) + 1):\n                if a % i == 0:\n                    return False\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(3) == False, \"a = 3 is not multiply of 3 prime numbers\""
    },
    {
        "number": 76,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if x % n == 0:\n        return True\n    return False\n",
        "test": "assert     is_simple_power(2, 2) == True"
    },
    {
        "number": 77,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return a>0 and a**(1./3.)%1==0\n",
        "test": "assert     iscube(27) == True "
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1 if num[0] in '123456789ABCDEF' else 0\n    return hex_key(num[1:]) + hex_key(num[0]) if num[0]!= '0' else hex_key(num[1:])\n",
        "test": "assert     hex_key(\"FB\") == 2"
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if decimal == 0:\n        return \"db0\"\n    bin = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        bin = str(remainder) + bin\n        decimal = decimal // 2\n    return \"db\" + bin\n",
        "test": "assert     decimal_to_binary(2) == 'db10'"
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return s.lower().count(s[0:3]) == len(s) and not len(set(s[i:i+3] for i in range(0, len(s), 3))) > 1\n",
        "test": "assert     is_happy('abca') == False"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    grades_table = {\n        4.0 : 'A+',\n        3.7 : 'A',\n        3.3 : 'A-',\n        3.0 : 'B+',\n        2.7 : 'B',\n        2.3 : 'B-',\n        2.0 : 'C+',\n        1.7 : 'C',\n        1.3 : 'C-',\n        1.0 : 'D+',\n        0.7 : 'D',\n        0.0 : 'D-',\n        0.0 : 'E',\n    }\n    result = []\n    for gpa in grades:\n        for key in grades_table.keys():\n            if gpa <= key:\n                result.append(grades_table[key])\n                break\n    return result\n",
        "test": "assert     numerical_letter_grade( [4.0, 4.0, 4.0, 4.0, 4.0, 4.0] ) == [ \"A+\", \"A+\", \"A+\", \"A+\", \"A+\", \"A+\" ], 'incorrect result'"
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(string) > 1:\n        length = len(string)\n        i = 2\n        while i <= length:\n            if length % i == 0:\n                return False\n            i += 1\n        return True\n    return False\n",
        "test": "assert     prime_length(\"5678\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return sum(len(str(i)) == n and (i == 1 or i == 10**(n-1)) for i in range(1,10**n))\n",
        "test": "assert     starts_one_ends(3) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return \"{0:b}\".format(N)\n",
        "test": "assert     solve(21) == '10101'"
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2)])\n",
        "test": "assert     add([1,3,5,7]) == 10"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    s = s.split()\n    s = [list(i) for i in s]\n    s.sort(key=lambda x: [i for i in x])\n    return ''.join(''.join(i) for i in s)\n",
        "test": "assert     anti_shuffle(\"hello, it is me!\") == \"hello, it is me!\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    if len(res) == 0:\n        return []\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res\n",
        "test": "assert     get_row([[1, 2, 3], [2, 4], [1, 1]], 4) == [(1, 2), (0, 1), (2, 2)]"
    },
    {
        "number": 88,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    if len(array) < 2:\n        return array\n    pivot = array[0]\n    left = [x for x in array if x < pivot]\n    middle = [x for x in array if x == pivot]\n    right = [x for x in array if x > pivot]\n    return sort_array(left) + middle + sort_array(right)\n",
        "test": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]"
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    n_alphabet = alphabet * 2\n    l = len(s)\n    enc = \"\"\n    for i in range(0, l):\n        c = s[i]\n        if c in alphabet:\n            index = n_alphabet.index(c)\n            if index >= 26:\n                enc += n_alphabet[index-26]\n            else:\n                enc += n_alphabet[index]\n        else:\n            enc += c\n    return enc\n",
        "test": "assert     encrypt(\"\") == \"\""
    },
    {
        "number": 90,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    \n    return S.count('I ')\n",
        "test": "assert     is_bored(\"I look forward to learning Python\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    result = False\n    if x == int(x) or y == int(y) or z == int(z):\n        result = x + y == z or y + z == x or z + x == y\n        return result\n    else:\n        return result\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\n",
        "test": "assert     any_int(1, 2, 0) == False"
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    message = message.lower()\n    message = [letter if letter in 'abcdefghijklmnopqrstuvwxyz' else letter.swapcase() for letter in message]\n    message = ''.join(message)\n    \n    vowels = {'a': 'A', 'e': 'E', 'i': 'I', 'o': 'O', 'u': 'U'}\n    \n    for vowel in vowels.keys():\n        message = message.replace(vowel, vowels[vowel])\n    return message\n",
        "test": "assert     encode('a') == 'A'"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    for i in range(0, len(lst)):\n        lst[i] = int(lst[i])\n    lst.sort()\n    for i in range(0, len(lst)):\n        lst[i] = str(lst[i])\n    #print(lst)\n    lst1 = ''.join(lst)\n    lst2 = list(lst1)\n    #print(lst2)\n    lst2.reverse()\n    #print(lst2)\n    lst3 = []\n    for i in range(0, len(lst2)):\n        lst3.append(lst2[i])\n        lst3.sort()\n    #print(lst3)\n    for i in range(0, len(lst3)):\n        lst3[i] = int(lst3[i])\n    #print(lst3)\n    lst4 = []\n    for i in range(0, len(lst3)):\n        if lst3[i] > 1:\n            for j in range(2, lst3[i]):\n                if lst3[i] % j == 0:\n                    break\n            else:\n                lst4.append(lst3[i])\n    #print(lst4)\n    if len(lst4) == 0:\n        return 1\n    else:\n        return sum(lst4)\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    if dict == {}:\n        return False\n    else:\n        keys_list = list(dict.keys())\n        return (all(keys_list[i] == keys_list[i].lower() for i in range(len(keys_list)))) or (all(keys_list[i] == keys_list[i].upper() for i in range(len(keys_list))))\n",
        "test": "assert     check_dict_case({'A':'apple','b':'banana','c':'cat'}) == False, \"all keys are strings in upper case\""
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    # initialize an empty list to store primes\n    primes = []\n    # initialize a boolean to keep track of whether the current number is prime\n    prime_is = True\n    # initialize an index for the loop\n    i = 2\n    # if n is less than 2, return an empty list\n    if n < 2:\n        return []\n    # otherwise\n    else:\n        # while the index is less than or equal to n, run the loop\n        while i <= n:\n            # if the boolean is true, set it to false\n            if prime_is:\n                prime_is = False\n                # add the index to the primes list\n                primes.append(i)\n            # if it is not prime, set the boolean to true\n            else:\n                prime_is = True\n            # increase the index by one\n            i += 1\n        # return the primes list\n        return primes\n    \ndef skip_add(n):\n    \"\"\"Implement a function that takes an integer n and returns n + n-2 + n-4 + n-6 +... + 0.\n    for example:\n    skip_add(1) => 1\n    skip_add(2) => 3\n    skip_add(10) => 30\n    skip_add(0) => 0\n    \"\"\"\n    # initialize an index variable\n    i = 0\n    # initialize an empty list\n    nums = []\n    # initialize a variable to track the sum of the list\n    total = 0\n    # while the index is less than n\n    while i < n:\n        # add the sum of the list to the total\n        total += i\n        # add the list value to the list\n        nums.append(i)\n        # increase the index by one\n        i += 2\n    # return the total\n    return total\n    \ndef array_diff(a, b):\n    \"\"\"Implement a function that takes two arrays and returns a new array that contains only the elements that are\n    in the first array, but not in the second.\n    for example:\n    array_diff([1,2],[1]) => [2]\n    array_diff([1,2,2],[1]) => [2,2]\n    array_diff([1,2,2],[2]) => [1]\n    array_diff([1,2,2],[1,2]) => []\n    array_diff([],[1,2]) => []\n    array_diff([1,2,2,2,2,3],[1,2,3]) => [2,2,2]\n    \"\"\"\n    # initialize an empty list to store the difference\n    diffs = []\n    # for each item in a\n    for item in a:\n        # if the item is in b, add it to the diffs list\n        if item not in b:\n            diffs.append(item)\n    # return the diffs list\n    return diffs\n    \ndef array_diff_alt(a, b):\n    \"\"\"Implement a function that takes two arrays and returns a new array that contains only the elements that are\n    in the first array, but not in the second.\n    for example:\n    array_diff([1,2],[1]) => [2]\n    array_diff([1,2,2],[1]) => [2,2]\n    array_diff([1,2,2],[2]) => [1]\n    array_diff([1,2,2],[1,2]) => []\n    array_diff([],[1,2]) => []\n    array_diff([1,2,2,2,2,3],[1,2,3]) => [2,2,2]\n    \"\"\"\n    # initialize an empty list to store the difference\n    diffs = []\n    # for each item in a\n    for item in a:\n        # if the item is not in b, add it to the diffs list\n        if item not in b:\n            diffs.append(item)\n    # return the diffs list\n    return diffs\n",
        "test": "assert count_up_to(1) == []"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return a*b\n",
        "test": "assert     multiply(5, 2) == 10"
    },
    {
        "number": 98,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    \n    return sum([s[i].isupper() for i in range(len(s)) if i % 2 == 0])\n",
        "test": "assert     count_upper('') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    int_val = int(value)\n    int_val = int(round(int_val))\n    return int_val\n",
        "test": "assert     closest_integer(-1.1) == -1"
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    assert isinstance(n, int) and n > 0\n    a = [n]\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n + 1\n        a.append(n)\n        if n == 1:\n            break\n    return a\n",
        "test": "assert     make_a_pile(2) == [2, 1]"
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return s.replace(' ', '').split(',')\n",
        "test": "assert     words_string('a') == ['a']"
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if (x % 2!= 0) or (y % 2!= 0):\n        return -1\n    elif x > y:\n        return -1\n    else:\n        if y - x < 5:\n            return -1\n        else:\n            for i in range(y - x + 1):\n                if (x + i) % 2 == 0:\n                    return x + i\n            return -1\n",
        "test": "assert     choose_num(3,3) == -1, \"choose_num(3,3) should return -1\""
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    # given a list of positive integers, return a list of all elements that\n    # has no even digit\n    \n    # hint: return a list of elements\n    # hint: first create a list of elements, then remove all even digit\n    \n    return []\n",
        "test": "assert unique_digits([2, 5, 2, 6, 2, 9, 6, 5, 3, 5, 5]) == [2, 5, 6, 9, 3]"
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    arr.sort()\n    arr.reverse()\n    ans = []\n    for i in arr:\n        if i == 0:\n            ans.append('Zero')\n        elif i == 1:\n            ans.append('One')\n        elif i == 2:\n            ans.append('Two')\n        elif i == 3:\n            ans.append('Three')\n        elif i == 4:\n            ans.append('Four')\n        elif i == 5:\n            ans.append('Five')\n        elif i == 6:\n            ans.append('Six')\n        elif i == 7:\n            ans.append('Seven')\n        elif i == 8:\n            ans.append('Eight')\n        elif i == 9:\n            ans.append('Nine')\n        else:\n            pass\n    return ans\n",
        "test": "assert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if n <= 0:\n        return []\n    l = [1]\n    for i in range(1,n):\n        if i%2 == 0:\n            l.append(i*l[i-1])\n        else:\n            l.append(sum(range(1,i+1)))\n    return l\n",
        "test": "assert     f(1) ==     [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    odd = 0\n    even = 0\n",
        "test": "assert     even_odd_palindrome(4) == (0, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    # Get the list of digit sums\n    sum_list = list()\n    for num in arr:\n        sum_list.append(sum([int(digit) for digit in str(abs(num))]))\n    # Count the nums\n    nums = len([num for num in arr if sum_list.count(num) > 0])\n    return nums\n",
        "test": "assert     count_nums([]) == 0, \"0 digits in array = 0\""
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    def is_non_dec(arr):\n        # non-decreasing order means arr[0] <= arr[1] >= arr[2] <= arr[3] >=...\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    def move_one_ball_2(arr):\n        # Get the non-decreasing order of the array\n        nondec = sorted(arr)\n        # If array is already sorted return True\n        if nondec == arr:\n            return True\n        # If the array is empty return True\n        if not arr:\n            return True\n        # If the array has only one element, then right shift will be possible\n        if len(arr) == 1:\n            return True\n        # if the last element of the array is smaller than the first element\n        # of the array then return False\n        if arr[0] > arr[-1]:\n            return False\n        # Otherwise, keep shifting the last element of the array\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n        # If the array is now in non-decreasing order, return True\n        if is_non_dec(arr):\n            return True\n        # Otherwise shift the last element of the array again\n        arr[-1],arr[0] = arr[0],arr[-1]\n        # If the array is now in non-decreasing order, return True\n        if is_non_dec(arr):\n            return True\n        # Otherwise return False\n        return False\n    return move_one_ball_2(arr)\n",
        "test": "assert     move_one_ball([2,1]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    for el in lst1:\n        if el % 2!= 0:\n            return \"NO\"\n    for el in lst2:\n        if el % 2!= 0:\n            return \"NO\"\n    return \"YES\"",
        "test": "assert     exchange([5,4,3,2,1], [1,3,5,7,8]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    dictionary = {}\n    test = test.split()\n    for i in test:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\n",
        "test": "assert     histogram(\"a\") ==    {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return (s.replace(c,\"\"),s[::-1].replace(c,\"\")==s[::-1])\n",
        "test": "assert     reverse_delete(\"\", \"\") == (\"\", True), \"Case2: empty string\""
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    output = []\n    for elem in lst:\n        num = 0\n        for char in elem:\n            if int(char) % 2!= 0:\n                num += 1\n        output.append(\"the number of odd elements \" + str(num) + \"n the str\" + str(len(elem)) + \"ng \" + str(len(elem)) + \" of the \" + str(len(elem)) + \"nput.\")\n    return output\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    start, end = 0, len(nums)-1\n    min_sum = sum(nums)\n    while start < end:\n        if sum(nums[start:end+1]) < min_sum:\n            min_sum = sum(nums[start:end+1])\n        start += 1\n    return min_sum",
        "test": "assert     minSubArraySum([2, 3, 1, 2, 4, 3, 2, 1, 2, 3, 2, 1]) == 3"
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return math.ceil(sum(map(sum, grid)) / capacity)\n",
        "test": "assert     max_fill([[1, 0], [1, 0], [1, 0], [1, 0]], 2) == 2"
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Incorrect\""
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    words = s.split(' ')\n    ans = []\n    for word in words:\n        if len(word) > n:\n            pass\n        else:\n            c = 0\n            for i in word:\n                if i not in ('a', 'e', 'i', 'o', 'u'):\n                    c += 1\n            if c == n:\n                ans.append(word)\n    return ans\n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
        "test": "assert     select_words('', 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return \"\"\n",
        "test": "assert     get_closest_vowel(\"x\") == \"\", \"First test\""
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    # Check if all parens are balanced.\n    for paren in lst:\n        if paren.count('(')!= paren.count(')'):\n            return 'No'\n    # Sort lst, check if every string is a concatenation of the other.\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[0] + lst[i] not in lst:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens(['()(', ')()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    if not arr or k == 0:\n        return []\n",
        "test": "assert     (maximum([1, 3, 5, 7, 9, 4, 6], 0) == [])"
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    odds = []\n    evens = []\n    sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0:\n            evens.append(lst[i])\n        else:\n            odds.append(lst[i])\n    for i in range(len(odds)):\n        sum += odds[i]\n    return sum\n",
        "test": "assert     solution([5,7,0,4]) == 11, \"case 2 failed\""
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    arr = arr[0:k]\n    return sum(int(i) for i in arr)\n",
        "test": "assert     add_elements([0, 0, 0, 0], 3) == 0, \"Test 3 Failed\""
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    collatz_seq = [n]\n    while collatz_seq[-1]!= 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(int(collatz_seq[-1] / 2))\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n    return collatz_seq\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    # your code here\n    # return True or False\n    return False\n",
        "test": "assert     valid_date(\"15-06-2020\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('') == [], \"no whitespace should split into a list of empty strings\""
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(set(lst))!= len(lst):\n        return False\n    elif len(lst) == 1:\n        return True\n    elif lst == sorted(lst):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sorted([]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    start, end = interval1\n    s2, e2 = interval2\n    # if they don't intersect, return \"NO\"\n    if end < s2 or s2 > start:\n        return \"NO\"\n    if e2 < start or end > e2:\n        return \"NO\"\n    return \"YES\"\n",
        "test": "assert     intersection((5, 7), (3, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if not arr:\n        return None\n    return sum(abs(a) * b for a, b in zip(arr, [1, -1]))\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    if k < 1:\n        return []\n",
        "test": "assert     minPath("
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3,2]\n    elif n == 3:\n        return [3,2,8]\n    else:\n        return [1,n//2,(n-1)//2,(n+1)//2]\n    \nif __name__ == '__main__':\n    print(tri(int(input())))",
        "test": "assert     tri(5) == [3, 1, 1, 1, 1]"
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    if n < 10:\n        return n\n    if n%2 == 0:\n        return 0\n    result = 1\n    for i in str(n):\n        if int(i)%2 == 0:\n            return 0\n        result *= int(i)\n    return result\n    # TODO: Question 1 - complete the body of the digits function here\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert     is_nested('') == True, 'Empty string is a valid nested string.'"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return round(sum(x**2 for x in lst))\nprint(sum_squares([1,2,3]))\n",
        "test": "assert     sum_squares([]) == 0, \"empty\""
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # if len(txt) == 1:\n    #     return True if txt.isalpha() else False\n    # if txt[:-1].isalpha():\n    #     return True\n    # return False\n    # isalpha() checks if all characters in a string are alphabets\n    # isnumeric() checks if all characters in a string are numbers\n    return len(txt) == 1 or (txt[:-1].isalpha() and txt[-1].isnumeric())\n",
        "test": "assert     check_if_last_char_is_a_letter('A B12') == False"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    i = 1\n    largest = arr[0]\n    while i < len(arr):\n        if arr[i] < largest:\n            return i\n        i += 1\n    return -1\n",
        "test": "assert     can_arrange([1, 1, 1, 2, 3, 5, 8, 13, 21, 21, 21]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if len(lst) == 0:\n        return None, None\n    positive = []\n    negative = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    if len(negative) == 0:\n        return None, min(positive)\n    return max(negative), min(positive)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    try:\n        a, b = float(a), float(b)\n        return max(a, b)\n    except ValueError:\n        return None\n",
        "test": "assert     (compare_one(12, -345) == 12)"
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    sum_of_evens = 0\n    n = int(n)\n    for i in range(1,n//2):\n        if n%i == 0:\n            sum_of_evens += i\n            sum_of_evens += n/i\n    return sum_of_evens == n\n",
        "test": "assert     is_equal_to_sum_even(2) == False, 'test failed for 2'"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n < 1:\n        return 0\n    i = n\n    factorial = 1\n    while i >= 1:\n        factorial *= i\n        i -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\"   \", \"-\").replace(\"    \", \"-\")\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    if file_name.count(\".\")!= 1 or file_name.find(\".\") == 0 or file_name.find(\".\") == len(file_name) - 1 or file_name.isnumeric():\n        return \"No\"\n    return \"Yes\"\n",
        "test": "assert     file_name_check('this.is.an.invalid.file.name') == 'No', 'Wrong result'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    \n    n = len(lst)\n    new_lst = []\n    for i in range(n):\n        if i % 3 == 0 or i % 4 == 0:\n            new_lst.append(lst[i] ** 2)\n    return sum(new_lst)\n",
        "test": "assert     sum_squares([1, 2, 3]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    pass\n",
        "test": "assert     words_in_sentence(\"Hi i am a cat\") == \"Hi cat\""
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return False\n",
        "test": "assert     not simplify('6/7', '7/3')"
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n",
        "test": "assert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    num_count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in [1, 3, 5, 7, 9] and str(num)[-1] in [1, 3, 5, 7, 9]:\n            num_count += 1\n    return num_count\n",
        "test": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0, \"incorrect output for specialFilter([1,2,3,4,5,6,7,8,9,10])\""
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    try:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    return tuple(sorted((planets[p] for p in range(p1, p2+1)), key=lambda x: planets.index(x)))\n",
        "test": "assert     bf('Earth', 'Mercury') == ()"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return sorted(lst, key = lambda s: (len(s), s))\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if n <= 1:\n        return n\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return y\n        return x\n",
        "test": "assert     x_or_y(3, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    total = 0\n    for x in lst:\n        if x % 2 == 1 and x >= 0:\n            total += x**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    \n    score = game\n    guess = guess\n    diff = [abs(i-j) for i,j in zip(score,guess)]\n    return diff\n",
        "test": "assert     [0,0] == compare([1,1],[1,1])"
    },
    {
        "number": 153,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    # O(len(extensions)) time\n    # O(len(extensions)) space\n    for extension in extensions:\n        if class_name.find(extension[0].lower()) >= 0:\n            return class_name + '.' + extension\n    return class_name + '.none'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if b in a:\n        return True\n    else:\n        pass\n    for i in range(1,len(a)):\n        if a[i:]+a[:i] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"abba\", \"trola\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    count_even, count_odd = 0, 0\n    while num > 0:\n        if num & 1 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num >> 1\n    return (count_even, count_odd)",
        "test": "assert even_odd_count(1) == (0,1)"
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    int_to_roman = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL',\n        50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    roman = \"\"\n    for divisor in sorted(int_to_roman.keys(), reverse=True):\n        while number >= divisor:\n            number -= divisor\n            roman += int_to_roman[divisor]\n    return roman\n",
        "test": "assert     int_to_mini_roman(1000) == \"M\""
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if a < b+c or b < a+c or c < b+a:\n        return False\n    return True\n",
        "test": "assert     right_angle_triangle(1, 3, 2) == False, \"Not a right triangle\""
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    max_unique = 0\n    for word in words:\n        unique_characters = len(set(word))\n        if unique_characters > max_unique:\n            max_unique = unique_characters\n            max_word = word\n    return max_word\n",
        "test": "assert     (find_max(['macaroni', 'taco', 'carrot','macaroni']) =='macaroni'),'macaroni should be returned'"
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return [number + need, remaining - need]",
        "test": "assert     eat(0, 0, 1) == [0, 1], \"eat returned wrong answer\""
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    # TODO\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == \"+\":\n            result = result + operand[i]\n        elif operator[i] == \"-\":\n            result = result - operand[i]\n        elif operator[i] == \"*\":\n            result = result * operand[i]\n        elif operator[i] == \"//\":\n            result = result // operand[i]\n        elif operator[i] == \"**\":\n            result = result ** operand[i]\n    return result\n",
        "test": "assert     do_algebra(['+'], [5]) == 5"
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return s.swapcase()\n    ",
        "test": "assert     solve(\"a\") == \"A\""
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return [i for i in range(a+1, b) if not i % 2]\n",
        "test": "assert     generate_integers(1, 3) == [2]"
    }
]