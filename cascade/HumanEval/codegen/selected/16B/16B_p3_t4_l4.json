[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if j!= i and abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5, 6], 1) == True",
        "num_ids": 521
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # return [\n    #     s\n    #     for s in paren_string.split(\"(\")\n    #     if s.endswith(\")\")\n    # ]\n",
        "test": "assert     separate_paren_groups(\"(()())\") == [\"(()())\"]",
        "num_ids": 424
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return number - int(number)\n",
        "test": "assert ",
        "num_ids": 108
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return True if min(operations) < 0 else False\n",
        "test": "assert     below_zero([5, 5, 5, 0, 5, 5, 5, 0]) == False",
        "num_ids": 283
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # return sum([abs(x - sum(numbers) / len(numbers)) for x in numbers]) / len(numbers)\n    pass\n",
        "test": "assert     mean_absolute_deviation([-1, 4, -0.5, 0, 1]) == 2.25",
        "num_ids": 274
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if not numbers:\n        return []\n",
        "test": "assert ",
        "num_ids": 194
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    paren_list = []\n",
        "test": "assert     parse_nested_parens(\"(()())\") == [1, 1]",
        "num_ids": 1285
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in strings if substring in x]\n",
        "test": "assert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"123\") == [\"123\"]",
        "num_ids": 225
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n",
        "test": "assert ",
        "num_ids": 144
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i + 1]))\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 314
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if not is_palindrome(string):\n        return string + string[::-1][1:]\n",
        "test": "assert     make_palindrome('abc') == 'abbc'",
        "num_ids": 410
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "test": "assert     string_xor('1010', '1010') == '1010'",
        "num_ids": 285
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(strings) == 0:\n        return None\n    max_str = strings[0]\n    for str_ in strings:\n        if len(str_) > len(max_str):\n            max_str = str_\n    return max_str\n",
        "test": "assert     longest([\"a\", \"abc\", \"d\", \"a\"]) == \"abc\"",
        "num_ids": 301
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(6, 9) == 3",
        "num_ids": 160
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes('') == []",
        "num_ids": 466
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return''.join(map(str, range(n+1)))\n",
        "test": "assert     string_sequence(0) == '0'",
        "num_ids": 196
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    lowercase_string = string.lower()\n    return len(set(lowercase_string))\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 257
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    notes = music_string.split('|')\n    return [len(i) for i in notes]\n",
        "test": "assert parse_music(\"|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.",
        "num_ids": 2364
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    num = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            num += 1\n    return num\n",
        "test": "assert     how_many_times('python', 'th') == 1",
        "num_ids": 332
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    numbers_list = []\n    for i in numbers.split(\" \"):\n        numbers_list.append(i)\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n",
        "test": "assert     sort_numbers('zero') == 'zero'",
        "num_ids": 519
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[2])\n",
        "test": "assert     find_closest_elements([1.2, 5.1, 5.5, 2.8, 4.1, 7.2]) == (2.8, 4.1)",
        "num_ids": 587
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [number - minimum for number in numbers] / (maximum - minimum)\n",
        "test": "assert     rescale_to_unit([1, 2, 3, 4, 5, 10, 15, 20]) == [0, 1, 1/2, 1, 2/3, 2/5, 2/5, 3/5]",
        "num_ids": 348
    },
    {
        "number": 22,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [x for x in values if type(x) == int]\n",
        "test": "assert     [1, 2, 3] == filter_integers([1, 2, 3])",
        "num_ids": 369
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    length = 0\n    for ch in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen('hello') == 5",
        "num_ids": 160
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    factor = 1\n    while factor < n:\n        factor += 1\n        if n % factor == 0:\n            return factor\n    return n\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 222
    },
    {
        "number": 25,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if n == 1:\n        return [1]\n    elif n < 1:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert     [2, 3] == factorize(2*3)",
        "num_ids": 333
    },
    {
        "number": 26,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if numbers == []:\n        return []\n    elif numbers == [1]:\n        return [1]\n    elif len(numbers) == 2:\n        if numbers[0] == numbers[1]:\n            return []\n        else:\n            return numbers\n    else:\n        flag = True\n        for i in range(1, len(numbers)):\n            if numbers[i] == numbers[i - 1]:\n                flag = False\n        if flag:\n            return numbers\n        else:\n            k = 0\n            for i in range(1, len(numbers)):\n                if numbers[i] == numbers[i - 1]:\n                    k = i\n            return numbers[:k] + remove_duplicates(numbers[k:])\n",
        "test": "assert     remove_duplicates([1,2,3,4,5,6,7,8,9,10,10,10,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 1041
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert     flip_case('Hello') == 'hELLO'",
        "num_ids": 282
    },
    {
        "number": 28,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate(['cat', 'dog']) == 'catdog', 'Expected catdog but received {}'.format(concatenate(['cat', 'dog']))",
        "num_ids": 315
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['bob', 'Rob', 'Bob'], 'bob') == ['bob', 'Bob']",
        "num_ids": 255
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [number for number in l if number > 0]\n    \ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-4, -1]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, -5, -5, -3, -10]\n    \"\"\"\n    return [number for number in l if number < 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 346
    },
    {
        "number": 31,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    assert n >= 2, \"That number is not positive.\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 262
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    assert len(xs) % 2 == 0, \"xs are coefficients of a polynomial.\\n\\\n    find_zero find x such that poly(x) = 0.\"\n    assert min(xs) >= 0, \"xs have only non negative coefficients.\"\n    assert max(xs) > 0, \"xs have only non negative coefficients.\"\n    xs = [x / max(xs) for x in xs]\n    r = range(len(xs) - 1, -1, -2)\n    for i in r:\n        if xs[i] == 0:\n            continue\n        for j in range(i - 1, -1, -1):\n            if xs[j] == 0:\n                continue\n            xs[j] -= xs[i]\n            xs[j] /= xs[j]\n        if xs[i]!= 0:\n            return xs[i]\n    raise AssertionError(\"No solution found.\")\n",
        "test": "assert     poly([1, -3, 2], 1) == 0",
        "num_ids": 623
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    sorted_list = []\n    for i in l:\n        if i % 3 == 0:\n            sorted_list.append(i)\n    for i in l:\n        if i % 3!= 0:\n            sorted_list.append(i)\n    sorted_list.sort()\n    return sorted_list\n",
        "test": "assert     sort_third([4, 4, 4, 4, 4]) == [4, 4, 4, 4, 4]",
        "num_ids": 518
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([1, 1, 2, 3, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 282
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    max_element = 0\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n",
        "test": "assert     max_element([1, 3, 5, 2]) == 5",
        "num_ids": 281
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < 7:\n        return 0\n    elif n % 11 == 0:\n        return 1 + fizz_buzz(n // 11)\n    elif n % 13 == 0:\n        return 2 + fizz_buzz(n // 13)\n    else:\n        return fizz_buzz(n - 1)\n",
        "test": "assert     fizz_buzz(73) == 1",
        "num_ids": 263
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # create a list of even indicies\n    even_ind = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_ind.append(i)\n    # sort the list of even indicies\n    even_ind.sort()\n    # create new list where odd indicies have their values copied\n    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[even_ind[i // 2]])\n        else:\n            new_l.append(l[i])\n    return new_l\n",
        "test": "assert     sort_even([6, 3, 6, 2, 3, 1]) == [6, 3, 6, 2, 3, 1],         \"Wrong result for [6, 3, 6, 2, 3, 1]\"",
        "num_ids": 636
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # split string into groups of 3 characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # get elements of each group and join them together.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"aaaa\")) == \"aaaa\", \"encoding is not correct\"",
        "num_ids": 383
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    fib_nums = [0, 1, 1]\n    while fib_nums[-1] < n:\n        nxt_num = fib_nums[-1] + fib_nums[-2]\n        for num in fib_nums:\n            if nxt_num % num == 0:\n                nxt_num += 1\n                break\n        else:\n            fib_nums.append(nxt_num)\n    return nxt_num\n",
        "test": "assert ",
        "num_ids": 365
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            if j >= i + 2:\n                if l[i] + l[j] == -l[j + 1]:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, -2, 1, 0, 5]) is True",
        "num_ids": 458
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    n = n//2\n    cnt = 0\n    for i in range(n):\n        if (i+1) % (n//2) == 0:\n            cnt += 1\n    return cnt\n",
        "test": "assert     car_race_collision(1) == 0, \"Wrong answer for car_race_collision(1)\"",
        "num_ids": 347
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 276
    },
    {
        "number": 43,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    # If the list has an odd length, it can never have a pair that sums to zero.\n    if len(l) % 2 == 1:\n        return False\n    # Sets are used to eliminate duplicates.\n    s = set(l)\n    # Create a list with a list of 2-element tuples.\n    l = [(a, -a) for a in s]\n    # Sort the list so we can iterate over it.\n    l.sort()\n    # Initialize a boolean variable that will be set to True if we find a pair\n    # that sums to zero.\n    found = False\n    # A for loop that iterates over the list of tuples.\n    for tup in l:\n        # First element of the tuple is the first element of the list.\n        first = tup[0]\n        # Second element of the tuple is the second element of the list.\n        # We negate it to obtain the negative of the second element of the list.\n        second = -tup[1]\n        # Check if the absolute value of the difference of the first element\n        # of the tuple and the negative of the second element of the tuple\n        # is in the set of values.\n        if abs(first - second) in s:\n            # If it is, we set the variable found to True and return it.\n            found = True\n            break\n    # After iterating, if we did not find a pair that sums to zero, return False.\n    return found\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Wrong output\"",
        "num_ids": 764
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    num_list = []\n    if base < 2:\n        return str(x)\n    while x!= 0:\n        num_list.append(x%base)\n        x = x//base\n    return ''.join(list(map(str, num_list[::-1])))\n",
        "test": "assert     change_base(10, 2) == \"1010\", \"10 in base 2 should be 1010\"",
        "num_ids": 383
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return round(a * h / 2, 2)\n",
        "test": "assert     triangle_area(3,4) == 6, \"the area should be 6.\"",
        "num_ids": 224
    },
    {
        "number": 46,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n==0: return 0\n    if n==1: return 0\n    if n==2: return 2\n    if n==3: return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert ",
        "num_ids": 160
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    l.sort()\n    n = len(l)\n    return (l[n//2] if n%2 == 1\n    else (l[n//2-1] + l[n//2])/2)\n",
        "test": "assert ",
        "num_ids": 294
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return text[::-1] == text\n",
        "test": "assert     is_palindrome('aba') == True",
        "num_ids": 174
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    assert 0 <= n\n    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n - 1, p)) % p\n",
        "test": "assert     modp(0, 5) == 1",
        "num_ids": 237
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\"",
        "num_ids": 190
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    vowels = \"aeiou\"\n    new = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new += char\n    return new\n",
        "test": "assert ",
        "num_ids": 150
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return all(i <= t for i in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4], 5) == True",
        "num_ids": 210
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 2) == 4",
        "num_ids": 87
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    s0 = set(s0)\n    s1 = set(s1)\n    return len(s0 - s1) == 0 and len(s1 - s0) == 0\n",
        "test": "assert     same_chars(\"foo\", \"bar\") == False",
        "num_ids": 221
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert __ == fib(1)",
        "num_ids": 177
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    left_brackets = []\n    right_brackets = []\n    for char in brackets:\n        if char == \"<\":\n            left_brackets.append(char)\n        elif char == \">\":\n            try:\n                left_brackets.pop()\n            except IndexError:\n                return False\n        else:\n            raise ValueError(\"Character is not a bracket: %s\" % char)\n    return not left_brackets\n",
        "test": "assert     correct_bracketing(\"<><>><><\") == False",
        "num_ids": 1288
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if len(l) < 2:\n        return True\n    return l == sorted(l) or l == sorted(l, reverse=True)\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5]) is True",
        "num_ids": 353
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not l1 or not l2: return []\n    s1, s2 = set(l1), set(l2)\n    return sorted(list(s1.intersection(s2)))\n",
        "test": "assert     set(common([\"a\", \"b\", \"c\", \"d\"], [\"c\", \"d\", \"e\"])) == set([\"c\", \"d\"]), \"Error\"",
        "num_ids": 495
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    if n > 2:\n        max_prime = n\n    return max_prime\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 363
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    \n    return sum(range(1, n+1))\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 157
    },
    {
        "number": 61,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if not bracket_stack:\n                return False\n            bracket_stack.pop()\n    return not bracket_stack\n",
        "test": "assert     correct_bracketing(\"())\") is False, \")\"",
        "num_ids": 361
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [i*xs[j+1] for j, i in enumerate(xs[:-1])]\n",
        "test": "assert     derivative([]) == []",
        "num_ids": 176
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    fib_list = [0, 1]\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    for i in range(2, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list[-1]\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 414
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for c in s:\n        if c in 'aeiouAEIOU':\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('yayy') == 1",
        "num_ids": 321
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:] + str(x)[:-shift][::-1]\n",
        "test": "assert     str(circular_shift(42, 1)) == '24'",
        "num_ids": 371
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n",
        "test": "assert ",
        "num_ids": 176
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    \n    pass\n    \n",
        "test": "assert fruit_distribution('254032896', 8)!= '6'",
        "num_ids": 403
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return []\n",
        "test": "assert     [] == pluck([[1, 2, 3], [4, 5], [6, 7, 8], [9, 10]])",
        "num_ids": 412
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sorted(lst, key=lambda x: x[0], reverse=True)[0][0]\n",
        "test": "assert ",
        "num_ids": 291
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return []\n    result = [lst[0]]\n    remaining = lst[1:]\n    i = 0\n    while len(remaining) > 0:\n        curr = remaining[0]\n        result = [remaining[0]] + result\n        remaining = remaining[1:]\n        if curr > i:\n            for item in remaining:\n                if item <= i:\n                    remaining.remove(item)\n            i += 1\n    return result\n",
        "test": "assert     strange_sort_list([10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10], 'WA-4'",
        "num_ids": 458
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return -1\n    else:\n        return round((sides[0] * sides[1]) / 2, 2)\n    \n    \ndef is_triangle(a, b, c):\n    '''\n    Return True if a, b, and c form a triangle\n    Otherwise return False\n    '''\n    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return False\n    else:\n        return True\n    \n    \ndef is_right(a, b, c):\n    '''\n    Return True if a, b, and c form a right triangle\n    Otherwise return False\n    '''\n    if triangle_area(a, b, c) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     triangle_area(3, 4, 5) == 6.00",
        "num_ids": 490
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if sum(q)>w:\n        return False\n    else:\n        if sum(q)==w:\n            return True\n        else:\n            return q==q[::-1]\n",
        "test": "assert     will_it_fly([10,10,1,1,1,1,1],7) == False, \"wrong result\"",
        "num_ids": 714
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # For each string of the array, if it is not a palindrome,\n    # find the length of the longest palindromic substring in the string\n    # This is the number of elements that need to change\n",
        "test": "assert ",
        "num_ids": 411
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return [item for item in lst1 if len(item) <= len(lst2)]\n",
        "test": "assert ",
        "num_ids": 229
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if a < 100:\n        for i in range(2,a):\n            if a % i!= 0:\n                continue\n            else:\n                div = a/i\n                if div % 2 == 0:\n                    continue\n                else:\n                    for j in range(2,div):\n                        if div % j!= 0:\n                            continue\n                        else:\n                            return False\n                    return True\n        return False\n    else:\n        return False",
        "test": "assert     is_multiply_prime(0) == False",
        "num_ids": 548
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return x == n**int(math.log(x, n))\n",
        "test": "assert     is_simple_power(9, 3) == True",
        "num_ids": 198
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "test": "assert     iscube(16) == False ",
        "num_ids": 185
    },
    {
        "number": 78,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    counter = 0\n    for i in num:\n        if i == '2' or i == '3' or i == '5' or i == '7':\n            counter += 1\n    return counter\n",
        "test": "assert     hex_key('') == 0, 'Wrong answer'",
        "num_ids": 491
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return 'db' + ''.join(['1' if i % 2 == 1 else '0' for i in range(len(str(decimal)), 0, -1)]) + 'db'\n",
        "test": "assert     decimal_to_binary(7) == \"111db\"",
        "num_ids": 315
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    string_list = list(s)\n    \n    counter = 0\n    if len(s) >= 3 and len(set(string_list)) == len(string_list):\n        while len(set(string_list)) == len(string_list):\n            for char in string_list:\n                counter += 1\n                if counter == len(string_list) - 2:\n                    return True\n                else:\n                    string_list.append(char)\n                    string_list.pop(0)\n    else:\n        return False\n",
        "test": "assert     is_happy(\"abcdef\") == True",
        "num_ids": 400
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    grades_list = []\n    for i in grades:\n        if i >= 4.0:\n            grades_list.append(\"A+\")\n        elif i >= 3.7:\n            grades_list.append(\"A\")\n        elif i >= 3.3:\n            grades_list.append(\"A-\")\n        elif i >= 3.0:\n            grades_list.append(\"B+\")\n        elif i >= 2.7:\n            grades_list.append(\"B\")\n        elif i >= 2.3:\n            grades_list.append(\"B-\")\n        elif i >= 2.0:\n            grades_list.append(\"C+\")\n        elif i >= 1.7:\n            grades_list.append(\"C\")\n        elif i >= 1.3:\n            grades_list.append(\"C-\")\n        elif i >= 1.0:\n            grades_list.append(\"D+\")\n        elif i >= 0.7:\n            grades_list.append(\"D\")\n        elif i >= 0.0:\n            grades_list.append(\"D-\")\n        elif i >= 0.0:\n            grades_list.append(\"E\")\n    return grades_list\n",
        "test": "assert     numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 1634
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(string) == 0:\n        return False\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19] or all([string[:i + 1] in string[i + 1:] for i in range(len(string))])\n",
        "test": "assert     prime_length(\"asdf\") == False, \"this doesn't work with strings\"",
        "num_ids": 279
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return sum(len(str(n**i)) in (1, 2) for i in range(n))\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 279
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    num_list = [int(i) for i in str(N)]\n    \n    sum_num = 0\n    for j in num_list:\n        sum_num += j\n    \n    binary_num = bin(sum_num)[2:]\n    \n    return binary_num\n",
        "test": "assert     (solve(0) == \"0\")",
        "num_ids": 240
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    for i in range(0,len(lst),2):\n        if lst[i] % 2 == 0:\n            lst[i] = lst[i] + 2\n    return lst\nprint(add([4, 2, 6, 7]))\n",
        "test": "assert     add([8, 9, 12, 16, 20, 21])     == [0, 0, 0, 0, 0, 0]",
        "num_ids": 302
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return''.join(sorted(''.join(s.split())))\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 355
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], x[1]))\n",
        "test": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 10) == []",
        "num_ids": 506
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # TODO: implement me\n    if len(array) < 2:\n        return array\n    temp = array.copy()\n    temp.sort()\n    start = 0\n    end = len(array) - 1\n    while start < end:\n        if (temp[start] + temp[end]) % 2 == 0:\n            temp[start], temp[end] = temp[end], temp[start]\n            end -= 1\n        else:\n            start += 1\n    return temp\n",
        "test": "assert     sort_array([1]) == [1], sort_array([1])",
        "num_ids": 511
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        index = alphabet.index(char)\n        new_index = index + 2\n        if new_index > len(alphabet) - 1:\n            new_index = new_index % len(alphabet)\n        result = result + alphabet[new_index]\n    return result\n",
        "test": "assert     (encrypt('a') == 'c'), \"encrypt is not working\"",
        "num_ids": 383
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([1,2,2,3,4,5]) == 2",
        "num_ids": 1365
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    ans = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            if S[i+1] == '.' or S[i+1] == '?' or S[i+1] == '!':\n                ans += 1\n    return ans\n",
        "test": "assert     is_bored(\"A.B.C.D.E.F.G.\") == 0",
        "num_ids": 424
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y+z or y == x+z or z == x+y:\n            return True\n        elif x == int(x) and y == int(y) and z == int(z):\n            return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     any_int(1, 1, 1) == False, 'incorrect output'",
        "num_ids": 609
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    message = list(message)\n    for i in range(len(message)):\n        if message[i].isupper():\n            message[i] = message[i].lower()\n        elif message[i] in 'aeiou':\n            message[i] = chr((ord(message[i])-96+2)%26+96)\n    return ''.join(message)\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, and removes all vowels. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'this is a message'\n    \"\"\"\n    \n    message = list(message)\n    for i in range(len(message)):\n        if message[i].isupper():\n            message[i] = message[i].lower()\n        elif message[i] in 'aeiou':\n            message[i] = 'a'\n    return ''.join(message)\n",
        "test": "assert     (encode('oNDoO, eXcEsseR?')!= 'nDOO, eXcEsslEr?')",
        "num_ids": 1017
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    prime = [2,3,5,7]\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 414
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not dict:\n        return False\n    lower_case_keys = []\n    upper_case_keys = []\n    for k, v in dict.items():\n        if k.isalpha() and k.islower():\n            lower_case_keys.append(k)\n        elif k.isalpha() and k.isupper():\n            upper_case_keys.append(k)\n    return len(lower_case_keys) == len(dict) or len(upper_case_keys) == len(dict)\n",
        "test": "assert     check_dict_case({\"A\": 1, \"a\": 2}) == False, \"All keys are strings in lower case\"",
        "num_ids": 503
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # O(n)\n    # n = 0 => return []\n    # n = 1 => return []\n    # n = 2 => [2]\n    # n = 3 => [2, 3]\n    # n = 4 => [2, 3, 5]\n    # n = 5 => [2, 3, 5, 7]\n    # n = 6 => [2, 3, 5, 7, 11]\n    # n = 7 => [2, 3, 5, 7, 11, 13]\n    # n = 8 => [2, 3, 5, 7, 11, 13, 17]\n    # n = 9 => [2, 3, 5, 7, 11, 13, 17, 19]\n    # n = 10 => [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    # n = 11 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    # n = 12 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    # n = 13 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    # n = 14 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    # n = 15 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    # n = 16 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    # n = 17 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n    # n = 18 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59]\n    # n = 19 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\n    # n = 20 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]\n    # n = 21 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    # n = 22 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]\n    # n = 23 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79]\n    # n = 24 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]\n    # n = 25 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n    # n = 26 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # n = 27 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    # n = 28 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]\n    # n = 29 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29",
        "test": "assert ",
        "num_ids": 1142
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        return unit_multiply(a, b)\n    else:\n        raise TypeError(\"Invalid input.\")\n",
        "test": "assert     multiply(-12, -45) == 4",
        "num_ids": 275
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    \n    if not s:\n        return None\n    \n    cnt = 0\n    for i, char in enumerate(s):\n        if char.isupper() and i%2 == 0:\n            cnt += 1\n    \n    return cnt\n",
        "test": "assert     count_upper(\"hello\") == 0",
        "num_ids": 304
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return round(float(value))\n",
        "test": "assert     closest_integer(\"13.5\") == 14",
        "num_ids": 335
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n + 2)\n    else:\n        return [n] + make_a_pile(n + 1)\n",
        "test": "assert     make_a_pile(5) == [5,4,3,4,3,2,2,2,2,2,2]",
        "num_ids": 402
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return s.replace(', ', ',').split(',')\n",
        "test": "assert     words_string('my, house, is, very, big') == ['my', 'house', 'is','very', 'big']",
        "num_ids": 344
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if x < 2 or y < x:\n        return -1\n    elif x%2 == 1 and y%2 == 1:\n        return -1\n    else:\n        if x%2 == 0:\n            for i in range(x, y+1, 2):\n                if i%2 == 0:\n                    return i\n        else:\n            for i in range(x+1, y+1, 2):\n                if i%2 == 0:\n                    return i\n            return -1\n    return -1\n",
        "test": "assert     choose_num(1, 1) == -1, choose_num(1, 1)",
        "num_ids": 400
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if n > m:\n        return -1\n    else:\n        rounded_avg_num = n + ((m - n) // 2)\n        return format(rounded_avg_num, \"b\")\n",
        "test": "assert     rounded_avg(4,10) == 0b11, \"4/10 should be 11\"",
        "num_ids": 380
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # COMPLETE ME\n    # return an empty list if the list is empty\n    if not x:\n        return []\n",
        "test": "assert ",
        "num_ids": 390
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # Write your code here\n    arr.sort(reverse=True)\n    arr2 = []\n    arr3 = []\n    for x in arr:\n        if 1<=x<=9:\n            arr2.append(x)\n    for i in range(len(arr2)):\n        arr2[i] = chr(65+arr2[i])\n    for i in range(len(arr)):\n        if i%2==0:\n            arr3.append(arr2[i])\n    return arr3\n",
        "test": "assert     by_length([6, 7, 9, 1, 2, 4, 5, 3]) == \\",
        "num_ids": 716
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    factorial_list = []\n    i = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial_list.append(i)\n        else:\n            factorial_list.append(1)\n            for k in range(1, i+1):\n                factorial_list[i-1] = factorial_list[i-1] * k\n    return factorial_list\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 408
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    res = [0, 0]\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                res[0] += 1\n            else:\n                res[1] += 1\n    return tuple(res)\n",
        "test": "assert     even_odd_palindrome(4) == (0, 2)",
        "num_ids": 391
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if len(arr) == 0:\n        return 0\n    return sum(digit_sum(n) > 0 for n in arr)\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 257
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if not arr:\n        return True\n    else:\n        arr.sort()\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            if arr[i+1]<temp:\n                return False\n        return True\n",
        "test": "assert     move_one_ball([2, 3, 1]) == True",
        "num_ids": 755
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for item in lst1:\n        if item % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4], [2,3]) == \"NO\"",
        "num_ids": 305
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Add your code here\n    d = {}\n    s = test.split()\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 363
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i] in c:\n            continue\n        else:\n            result += s[i]\n    return (result, is_palindrome(result))\n",
        "test": "assert     reverse_delete('123', '1') == ('1223', True)",
        "num_ids": 356
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    lst1=[]\n    for i in range(len(lst)):\n        count=0\n        for j in range(len(lst[i])):\n            if int(lst[i][j])%2!=0:\n                count+=1\n        lst1.append(\"the number of odd elements \"+str(count)+\" n the str\"+str(i+1)+\" of the \"+str(i+1)+\"nput.\")\n    return lst1\nprint(odd_count([\"1234567\"]))\nprint(odd_count([\"11111111\",\"22222222\"]))\n",
        "test": "assert     odd_count(['1112223333444', '222222222222', '33333111111']) == [4, 6, 2]",
        "num_ids": 712
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if not nums: return 0\n    \n    min_sum = float('inf')\n    left = 0\n    s = 0\n    for right in range(len(nums)):\n        s += nums[right]\n        while left <= right and s >= 0:\n            min_sum = min(min_sum, s)\n            s -= nums[left]\n            left += 1\n        \n    if min_sum == float('inf'):\n        return 0\n    return min_sum\n",
        "test": "assert ",
        "num_ids": 422
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    row_set, col_set = set(), set()\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                row_set.add(i)\n                col_set.add(j)\n",
        "test": "assert     max_fill(",
        "num_ids": 308
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "test": "assert ",
        "num_ids": 326
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     select_words('a b c d e f g h i j k l m n o p', 5) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']",
        "num_ids": 476
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    start, end = None, None\n    for index, char in enumerate(word):\n        if char in vowels:\n            start = index\n        else:\n            end = index\n            break\n    if start and end:\n        for char in word[end + 1:]:\n            if char in vowels:\n                return char\n    return ''\n",
        "test": "assert     get_closest_vowel('coding') == ''",
        "num_ids": 455
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for i in range(len(lst)):\n        first_str = lst[i]\n        for j in range(i + 1, len(lst)):\n            second_str = lst[j]\n            if first_str.count('(')!= first_str.count(')') or second_str.count('(')!= second_str.count(')'):\n                continue\n            else:\n                if first_str.count('(')!= first_str.count(')') or second_str.count('(')!= second_str.count(')'):\n                    continue\n                else:\n                    temp = first_str\n                    first_str = second_str\n                    second_str = temp\n                    break\n        if first_str[0] == ')' or second_str[0] == ')':\n            return 'No'\n        else:\n            break\n    return 'Yes'\n",
        "test": "assert     match_parens(['(())', '()()']) == 'Yes'",
        "num_ids": 613
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     (maximum([2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 4) == [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, ",
        "num_ids": 1292
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total",
        "test": "assert ",
        "num_ids": 142
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if k > len(arr):\n        k = len(arr)\n    sub = []\n    for i in range(k):\n        sub.append(arr[i])\n    return sum(sub)\n",
        "test": "assert     add_elements([], 3) == 0",
        "num_ids": 337
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    pass\n",
        "test": "assert     get_odd_collatz(4) == [1, 3, 10, 5, 16, 8, 4, 2, 1]",
        "num_ids": 446
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    #split the date\n    #use a dictionary to store the months and the number of days\n    #use a list to store the months\n    #list is used because indexing is better\n    month_dict = {'01':31,'02':28,'03':31,'04':30,'05':31,'06':30,'07':31,'08':31,'09':30,'10':31,'11':30,'12':31}\n    months_list = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    #get the year from the input string\n    year = date[-4:]\n    #use the last 2 characters of the date string to get the month\n    month = date[-6:-4]\n    #use the first 2 characters of the date string to get the day\n    day = date[:2]\n    #validate the month\n    if month not in months_list:\n        return False\n    elif month in months_list[:4]:\n        if int(day) > month_dict[month]:\n            return False\n        elif int(day) < 1:\n            return False\n    elif month in months_list[4:]:\n        if int(day) > month_dict[month]:\n            return False\n        elif int(day) < 1:\n            return False\n    elif month == months_list[2]:\n        if int(day) > 29:\n            return False\n        elif int(day) < 1:\n            return False\n    else:\n        return False\n    return True\n",
        "test": "assert     valid_date(\"03-22-2020\") == False, \"Wrong result for 03-22-2020\"",
        "num_ids": 652
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world'], split_words('hello world')",
        "num_ids": 249
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 2, 2, 3, 4, 5]) == True",
        "num_ids": 206
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    assert not (interval1[0] > interval1[1] or interval2[0] > interval2[1]), 'The interval is not closed'\n    return \"YES\" if interval1[0] <= interval2[0] <= interval1[1] and interval2[0] <= interval1[0] <= interval2[1] else \"NO\"\n    \n    \n    # pass\n    \n",
        "test": "assert     intersection((1,3), (2,4)) == 'NO'",
        "num_ids": 566
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 234
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    def find_paths_helper(grid, k, i, j, path, curr_len):\n        if curr_len == k:\n            return path\n",
        "test": "assert     minPath([[3, 9, 5, 6, 3, 2, 1], [8, 5, 2, 6, 9, 3, 7], ",
        "num_ids": 937
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return [1, 3, 2, 8] if n < 3 else [1, 3, 2, 8] + [sum(i) for i in zip([1, 3, 2], [i for i in range(3, n + 1)] + [0, 0])]",
        "test": "assert     tri(4)     == [1, 3, 3, 1, 4]",
        "num_ids": 1289
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    digits_list = []\n    for i in range(len(str(n))):\n        if int(str(n)[i])%2 == 0:\n            digits_list.append(0)\n        else:\n            digits_list.append(int(str(n)[i]))\n    return(np.prod(digits_list))\n",
        "test": "assert     digits(8) == 0",
        "num_ids": 257
    },
    {
        "number": 132,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return string.find('[')!= -1\n",
        "test": "assert     is_nested('[]') == True, \"wrong result\"",
        "num_ids": 324
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return sum([i**2 for i in lst])\n",
        "test": "assert     sum_squares([0, 0, 0, 0, 0]) == 0",
        "num_ids": 263
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    txt = txt[:-1]\n    if txt.isalpha():\n        return True\n    return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"Python 101: Introduction.\") == False, \"Fails\"",
        "num_ids": 382
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = len(arr)\n    if n <= 1: return -1\n    last, i = 0, 0\n    while i < n:\n        if arr[i] > last:\n            last = arr[i]\n        elif arr[i] <= last:\n            return i - 1\n        i += 1\n    return -1\n",
        "test": "assert ",
        "num_ids": 279
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    max_negative = 0\n    min_positive = 0\n    for i in lst:\n        if i < 0:\n            if i > max_negative:\n                max_negative = i\n        elif i > 0:\n            if i < min_positive:\n                min_positive = i\n    if max_negative == 0 and min_positive == 0:\n        return (None, None)\n    elif max_negative!= 0 and min_positive!= 0:\n        return (max_negative, min_positive)\n    elif max_negative == 0:\n        return (None, min_positive)\n    else:\n        return (max_negative, None)",
        "test": "assert     largest_smallest_integers([1, 2, 3, 4, 5]) == (None, None)",
        "num_ids": 519
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if type(a)!= type(b):\n        return None\n    if type(a) == str:\n        return compare_one(float(a.replace(',','.')), float(b.replace(',','.')))\n    return max(a, b)\n",
        "test": "assert     compare_one(10,20) == 20",
        "num_ids": 503
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    even_numbers = [x for x in range(0, n) if x % 2 == 0]\n    if n <= 4:\n        return False\n    elif n == sum(even_numbers):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(35) == False, \"is_equal_to_sum_even(35) is not returning False\"",
        "num_ids": 449
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    factorial = n\n    for i in range(n - 1, 1, -1):\n        factorial *= i\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 127
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"-\")\n",
        "test": "assert     fix_spaces('meeting at 16 january at 16pm') =='meeting_at_16_january_at_16pm'",
        "num_ids": 272
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # TODO: complete this function\n    return 'No'\n",
        "test": "assert     file_name_check('my_file.pdf') == 'No'",
        "num_ids": 481
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    newlst = []\n    if len(lst) == 0:\n        return 0\n    else:\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                newlst.append(lst[i]**2)\n            elif i % 4 == 0 and i % 3!= 0:\n                newlst.append(lst[i]**3)\n            else:\n                newlst.append(lst[i])\n    return sum(newlst)\n",
        "test": "assert     sum_squares([3,4,5,1]) == [9,12,15,1]",
        "num_ids": 459
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # Solution:\n    words = sentence.split(' ')\n    output = []\n    for word in words:\n        if is_prime_number(len(word)):\n            output.append(word)\n    return''.join(output)\n",
        "test": "assert     words_in_sentence('four score and seven years ago') == 'four score and seven years ago'",
        "num_ids": 387
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # make sure input is valid\n    if \"/\" in x and \"/\" in n:\n        # make sure denominators are equal\n        if n.split(\"/\")[1] == x.split(\"/\")[1]:\n            # make sure denominators are positive\n            if int(n.split(\"/\")[0]) > 0 and int(n.split(\"/\")[1]) > 0:\n                # make sure numerators are integers\n                if x.split(\"/\")[0].isdigit() and x.split(\"/\")[1].isdigit():\n                    # return true if n is a whole number\n                    if int(n.split(\"/\")[0]) % int(n.split(\"/\")[1]) == 0:\n                        return True\n    return False\n",
        "test": "assert not simplify(\"3/4\", \"1/4\")",
        "num_ids": 496
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "test": "assert     order_by_points([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]",
        "num_ids": 284
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and str(i)[0]!= str(i)[-1] and i % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Wrong answer\"",
        "num_ids": 367
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    i = 1\n    j = 2\n    count = 0\n    a = [0]*n\n    while(i<n):\n        a[i] = i*i - i + 1\n        j = i + 1\n        while(j<n):\n            a[j] = i*i - i + j + 1\n            k = j + 1\n            while(k<n):\n                if((a[i]+a[j]+a[k])%3 == 0):\n                    count += 1\n                k += 1\n            j += 1\n        i += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 337
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return tuple(planet for planet in planets if planet1 in planet or planet2 in planet)\n",
        "test": "assert     bf('Earth', 'Earth') == ('Earth', )",
        "num_ids": 1523
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 697
    },
    {
        "number": 150,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if n > 1:\n        if n % 2!= 0:\n            return x\n        else:\n            return y\n    else:\n        return y\n",
        "test": "assert     x_or_y(1, 10, 20) == 20",
        "num_ids": 340
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    #return 0\n    sum = 0\n    for i in lst:\n        if i >= 0:\n            if i % 2 == 1:\n                sum += i**2\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 298
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return [abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     (compare(game = [4, 2, 3, 1, 5], guess = [1, 2, 3, 4, 5]) == [1, 1, 0, 1, 1])",
        "num_ids": 1388
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    return class_name + '.' + max(extensions, key = lambda x: (len(x.lower()), x.upper()))\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"",
        "num_ids": 886
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    # print(a[1:])\n    # print(b[1:])\n    if b in a or a in b:\n        return True\n    return False\n",
        "test": "assert     cycpattern_check('code', 'doc') == False",
        "num_ids": 348
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    a, b = 0, 0\n    while num:\n        if num % 10 % 2:\n            a += 1\n        else:\n            b += 1\n        num //= 10\n    return (a, b)\n",
        "test": "assert     even_odd_count(0) == (0,0)",
        "num_ids": 247
    },
    {
        "number": 156,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    int_to_mini_roman.roman_map = {1:'i', 5:'v', 10:'x', 50:'l', 100:'c', 500:'d', 1000:'m'}\n    if not isinstance(number, int):\n        return 'Input must be an integer'\n    if not 1 <= number <= 1000:\n        return 'Input must be between 1 and 1000'\n    result = ''\n    while number > 0:\n        if number >= 1000:\n            result += int_to_mini_roman.roman_map[1000]\n            number -= 1000\n            continue\n        if number >= 500:\n            result += int_to_mini_roman.roman_map[500]\n            number -= 500\n            continue\n        if number >= 100:\n            result += int_to_mini_roman.roman_map[100]\n            number -= 100\n            continue\n        if number >= 50:\n            result += int_to_mini_roman.roman_map[50]\n            number -= 50\n            continue\n        if number >= 10:\n            result += int_to_mini_roman.roman_map[10]\n            number -= 10\n            continue\n        if number >= 5:\n            result += int_to_mini_roman.roman_map[5]\n            number -= 5\n            continue\n        if number >= 1:\n            result += int_to_mini_roman.roman_map[1]\n            number -= 1\n            continue\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 948
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return False\n",
        "test": "assert     right_angle_triangle(3, 4, 5) == False, 'incorrect'",
        "num_ids": 1120
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    # print(words)\n    max_len = len(words[0])\n    max_word = words[0]\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"apple\", \"onion\", \"carrot\", \"apple\", \"apple\", \"apple\"]) == \"carrot\"",
        "num_ids": 402
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     eat(6, 7, 7) == [7, 0]",
        "num_ids": 223
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # YOUR CODE HERE\n    pass\n",
        "test": "assert ",
        "num_ids": 425
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return \"\".join(\n        (\n            x if x.islower() else x.upper()\n            if x.isalpha() else x\n        )\n        for x in s\n    )",
        "test": "assert     solve(\"\") == \"\", \"Empty string\"",
        "num_ids": 374
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 176
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    lst = []\n    for i in range(a+1, b):\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n",
        "test": "assert     generate_integers(1, 5) == [2, 4]",
        "num_ids": 521
    }
]