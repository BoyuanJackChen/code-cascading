[
    {
        "number": 0,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if not isinstance(numbers, list) or not isinstance(threshold, float):\n        return False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2.1) == True"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    result = []\n    result_tmp = []\n    str_of_group = []\n    counter_of_open_parenthesis = 0\n    counter_of_close_parenthesis = 0\n    for i in paren_string:\n        if i == '(':\n            counter_of_open_parenthesis += 1\n            str_of_group.append(i)\n        elif i == ')':\n            counter_of_close_parenthesis += 1\n            str_of_group.append(i)\n    result_tmp.append(str_of_group)\n    for i in range(0, len(result_tmp)):\n        result.append(''.join(map(str, result_tmp[i])))\n    return result\n",
        "test": "assert     separate_paren_groups(\"(((())))\") == ['(((())))']"
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return 0.0\n",
        "test": "assert     truncate_number(0.45) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    for i in operations:\n        if i < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,2,3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(mean - x) for x in numbers) / len(numbers)\n",
        "test": "assert         mean_absolute_deviation([0,0,0,0,0,0]) == 0.0"
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n",
        "test": "assert     intersperse([1], 1) == [1]"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    res = []\n    parenthesis = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parenthesis.append(i)\n        elif paren_string[i] == ')':\n            res.append(parenthesis.pop())\n    return res\n",
        "test": "assert     parse_nested_parens(\"()\") == [0]"
    },
    {
        "number": 7,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert filter_by_substring([\"python\", \"ruby\", \"nodejs\", \"perl\", \"scala\"], \"scala\") == ['scala']"
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    sum_ = 0\n    prod = 1\n    for number in numbers:\n        sum_ += number\n        prod *= number\n    return sum_, prod\n",
        "test": "assert     (sum_product([]) == (0, 1))"
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    max_list: List[int] = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[0:i+1]))\n    return max_list\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''",
        "test": "assert     make_palindrome(\"ab\") == \"aba\""
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor('100', '110') == '010'"
    },
    {
        "number": 12,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(12, 8) == 4"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"\") == [], \"all prefixes of '' must be []\""
    },
    {
        "number": 15,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n    \ndef remove_first_and_last(lst: list) -> list:\n    \"\"\" Return a new list with the first and last items removed.\n    >>> remove_first_and_last([1, 2, 3, 4])\n    [2, 3]\n    >>> remove_first_and_last([1, 2, 3, 1])\n    [2, 3]\n    >>> remove_first_and_last([])\n    []\n    >>> remove_first_and_last([\"a\", \"b\", \"c\", \"d\"])\n    ['b', 'c']\n    \"\"\"\n    return lst[1:-1]\n    \ndef common_end(a: list, b: list) -> bool:\n    \"\"\"Return True if a and b have the same first and last elements.\n    >>> common_end([1, 2, 3], [7, 3])\n    True\n    >>> common_end([7, 3], [1, 2, 3])\n    True\n    >>> common_end([1, 2, 3], [7, 3, 2])\n    False\n    >>> common_end([1, 2, 3], [1, 3])\n    True\n    \"\"\"\n    return a[0] == b[0] or a[-1] == b[-1]\n    \ndef reverse_pair(txt: str) -> str:\n    \"\"\" Return the reverse pair of the input string.\n    >>> reverse_pair(\"May the fourth be with you\")\n    'you with be fourth the May'\n    >>> reverse_pair(\"That's not my string\")\n    \"I'm not that's my string\"\n    \"\"\"\n    return \" \".join(reversed(txt.split()))\n    \ndef sum_pairs(nums: list, goal: int) -> list:\n    \"\"\"Return a pair of values from nums whose sum is equal to goal.\n    >>> sum_pairs([1, 2, 2, 10], 4)\n    [2, 2]\n    >>> sum_pairs([4, 2, 10, 5, 1], 5)\n    [4, 1]\n    >>> sum_pairs([4, 2, 10, 5, 1], 6)\n    []\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == goal:\n                return [nums[i], nums[j]]\n    return []\n    \ndef find_letter_indices(txt: str, letter: str) -> list:\n    \"\"\"Return a list of the indices of all occurrences of letter in txt.\n    >>> find_letter_indices(\"abracadabra\", \"a\")\n    [0, 5, 10]\n    >>> find_letter_indices(\"abracadabra\", \"r\")\n    [7]\n    >>> find_letter_indices(\"abracadabra\", \"b\")\n    [1, 6]\n    \"\"\"\n    return [i for i in range(len(txt)) if txt[i] == letter]\n    \ndef double_index(lst: list, index: int) -> list:\n    \"\"\"Return a new list with the item at index in lst doubled.\n    >>> double_index([0, 1, 2], 0)\n    [0, 0, 2]\n    >>> double_index([0, 1, 2], 1)\n    [0, 2, 2]\n    >>> double_index([0, 1, 2], 2)\n    [0, 1, 4]\n    \"\"\"\n    return [lst[i] * 2 if i == index else lst[i] for i in range(len(lst))]\n    \ndef middle_way(a: list, b: list) -> list:\n    \"\"\"Return a list that consists of all but the first and last items of a and b.\n    >>> middle_way([1, 2, 3], [4, 5, 6])\n    [2, 3, 4, 5]\n    >>> middle_way([7, 7, 7], [3, 8, 0])\n    [7, 7, 8, 0]\n    >>> middle_way([5, 2, 9], [1, 4, 5])\n    [5, 2, 4]\n    \"\"\"\n    return a[1:-1]",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    music_string_list = music_string.split()\n    output_list = []\n    for i in music_string_list:\n        if i == 'o':\n            output_list.append(4)\n        elif i == 'o|':\n            output_list.append(2)\n        elif i == '.|':\n            output_list.append(1)\n    return output_list\n",
        "test": "assert     parse_music('.|.o|.|o|.|o|.|o|.|.|o|.|.o|.o|.o|.|.|.|.o|.o|.o|.o|.o|.o|.o|.o|.o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|."
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            cnt += 1\n    return cnt\n",
        "test": "assert     how_many_times('substring','string') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # Initialize a dictionary with the appropriate 'key' and 'value' pairs.\n    dict_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    # Set up variables for loop.\n    numbers = numbers.split(\" \")\n    # Use a loop to populate the list with sorted values.\n    for i in range(0, len(numbers)):\n        for j in range(0, len(numbers)):\n            if int(dict_numbers[numbers[i]]) < int(dict_numbers[numbers[j]]):\n                temp = numbers[i]\n                numbers[i] = numbers[j]\n                numbers[j] = temp\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers('one') == 'one'"
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return (min(numbers), max(numbers))\n",
        "test": "assert find_closest_elements([0, 0]) == (0, 0), 'Wrong answer'"
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"There are too few values to rescale\")\n    # Use list comprehension to create a copy\n    return [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n",
        "test": "assert     rescale_to_unit([0, 2, 1]) == [0, 1, 0.5]"
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "test": "assert     filter_integers([1, '2', 3, 4, 5]) == [1,3,4,5], \"A list of integers is expected\""
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello\") == 5"
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return int((n ** 0.5))\n",
        "test": "assert     largest_divisor(4) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return []\n    else:\n        factors = []\n        n_dividing = 2\n        while n!= 1:\n            if n % n_dividing == 0:\n                factors.append(n_dividing)\n                n = n / n_dividing\n            else:\n                n_dividing += 1\n    return factors\n",
        "test": "assert     [2, 5] == factorize(10)"
    },
    {
        "number": 26,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    \n    a = numbers[:]\n    numbers = []\n    \n    for i in a:\n        if i not in numbers:\n            numbers.append(i)\n    return numbers\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"Python\") == \"pYTHON\""
    },
    {
        "number": 28,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    result = \"\"\n    for i in strings:\n        result += i\n    return result\n",
        "test": "assert     concatenate(['A', 'B', 'C']) == 'ABC'"
    },
    {
        "number": 29,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n//2 + 1):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(4) == False"
    },
    {
        "number": 32,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if not xs or len(xs) % 2:\n        raise ValueError(f\"Invalid coefficients for polynomial. Coefficients must be a list of even number of terms.\")\n    xs.sort()\n    xs.reverse()\n    x0 = xs[0]\n    for i in range(2, len(xs), 2):\n        coeff = xs[i]\n        x0 = x0 / x0 - coeff / (x0 - coeff)\n    return x0\n",
        "test": "assert     poly([0], 1) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l[i]\n    return sorted(l)\n",
        "test": "assert     sort_third([1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1,1]"
    },
    {
        "number": 34,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sorted(list(set(l)))\n",
        "test": "assert     unique([1, 2, 2, 3, 3, 4, 4, 5, 2, 3]) == [1, 2, 3, 4, 5], \\"
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    max_elem = l[0]\n    for i in l:\n        if i > max_elem:\n            max_elem = i\n    return max_elem\n",
        "test": "assert     max_element([4,6,2,4,4]) == 6"
    },
    {
        "number": 36,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(7) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # return []\n    # if type(l)!= list:\n    #     raise TypeError('Please enter a list')\n    even_indexed_list = []\n    for index, val in enumerate(l):\n        if index % 2 == 0:\n            even_indexed_list.append(val)\n    even_indexed_list.sort()\n    l = l[::2]\n    l.extend(even_indexed_list)\n    return l\n",
        "test": "assert "
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert group from cycling back to normal. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 5\n    b = 13\n    for i in range(3, n):\n        a, b = b, a + b\n        if is_prime(b):\n            break\n    return b\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if len(l) < 3:\n        return False\n    l.sort()\n    if l[0] > 0:\n        return False\n    for i in range(len(l) - 1, 1, -1):\n        l_i = l[i]\n        if l_i < 0:\n            continue\n        for j in range(i - 1, 0, -1):\n            l_j = l[j]\n            if l_j < 0:\n                continue\n            l_k = -(l_i + l_j)\n            if l_k in l[:j]:\n                return True\n    return False\n",
        "test": "assert     not triples_sum_to_zero([1, 2, 3, 4, 5])"
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i < j:\n                if i % 2 == 0:\n                    if j % 2 == 1:\n                        count += 1\n                else:\n                    if j % 2 == 0:\n                        count += 1\n    return count\n",
        "test": "assert     car_race_collision(2) == 1"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]"
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    l.sort()\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]:\n                return False\n            if l[i]!= l[i+1] and l[i]+l[i+1] == 0:\n                return True\n            if l[i]!= l[i+1] and l[i]+l[i+1]!= 0:\n                return False\n        return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Empty list\""
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x%base)\n",
        "test": "assert     change_base(10, 2) == '1010', \"Wrong answer\""
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return (a * h)/2\n",
        "test": "assert     triangle_area(1, 1) == 0.5"
    },
    {
        "number": 46,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib1 = 0\n        fib2 = 2\n        result = 0\n        for i in range(3, n+1):\n            result = fib1 + fib2 + fib3 + fib4(n-4)\n            fib1 = fib2\n            fib2 = result\n        return result\n",
        "test": "assert     0 == fib4(0)"
    },
    {
        "number": 47,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    s = sorted(l)\n    n = len(l)\n    return (s[n//2] + s[(n-1)//2]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abbbba') == True, 'abbbba is a palindrome'"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert     modp(1, 5) == 2"
    },
    {
        "number": 50,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\""
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in text:\n        if char not in vowels:\n            new_string += char\n    return new_string\n",
        "test": "assert     remove_vowels(\"hello world\") == 'hll wrld', 'incorrect result for \"hello world\"'"
    },
    {
        "number": 52,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3], 1) == False"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return x + y\n",
        "test": "assert     add(3,2) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    d = {}\n    for char in s0:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    for char in s1:\n        if char in d:\n            d[char] -= 1\n        else:\n            return False\n    for k, v in d.items():\n        if v!= 0:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"bob\", \"bob\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return _fib(n)\n",
        "test": "assert "
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if len(bracket_stack) == 0:\n                return False\n            if bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            else:\n                return False\n    if len(bracket_stack)!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     correct_bracketing('<><') == False, 'ERROR'"
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if len(l) == 0 or len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        return monotonic(l[1:])\n    if l[0] > l[1]:\n        return monotonic(l[1:])\n    return False\n",
        "test": "assert     monotonic([1,2,3]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    # Set the variables\n    l1_set = set(l1)\n    l2_set = set(l2)\n    # Make a set of the common elements\n    common_set = l1_set.intersection(l2_set)\n    # And return it\n    return sorted(common_set)\n",
        "test": "assert     common([1,2,3], [5,6,7]) == []"
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    factor = 1\n    while factor * factor < n:\n        factor += 1\n    while factor > 1:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor -= 1\n    return n\n",
        "test": "assert     largest_prime_factor(3) == 3"
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return n*(n+1)//2\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        elif bracket == ')':\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    return False\n",
        "test": "assert not     correct_bracketing(\")(()\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    deriv = []\n    for i, x in enumerate(xs):\n        if i == 0:\n            deriv.append(1)\n        else:\n            deriv.append(i * x)\n    return deriv\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    assert isinstance(n, int) and n >= 0, 'FibFib must be called with an integer >= 0'\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    count = 0\n    for letter in s:\n        if letter in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"I have a cat\") == 4"
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    n = len(str(x))\n    if shift >= n:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert not ('0' == circular_shift('1', 1))"
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return sum([ord(c.upper()) for c in s if c.upper().isalpha()])\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    # check the edge case if the input is empty\n    if s == \"\":\n        return 0\n    \n    # check the edge case if the input is empty\n    if n == 0:\n        return 0\n    \n    # convert the string into a list of fruits and the total number of fruits\n    s_list = s.split()\n    total_fruits = int(s_list[0]) + int(s_list[1])\n    \n    # if the total number of fruits is not equal to the input number, return the total number of fruits\n    if total_fruits!= n:\n        return total_fruits\n    \n    # if the total number of fruits is equal to the input number, \n    # return the number of the mango fruits. The mango fruits are the number of fruits left in the basket minus the total number of the fruits.\n    return n - int(s_list[0]) - int(s_list[1])\n",
        "test": "assert     fruit_distribution('0', 0) == 0, \"prob 3\""
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    even = lambda x: x % 2 == 0\n    smalest = lambda x, y: x if even(x) and not even(y) else y\n    array = arr.copy()\n    array.sort(key=even)\n    if not array:\n        return []\n    min_even = array[0]\n    min_index = 0\n    for index, value in enumerate(array):\n        if even(value) and even(min_even):\n            min_even = value\n            min_index = index\n        elif even(value) and not even(min_even):\n            break\n    return [min_even, min_index]\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    dct = {}\n    max_value = -1\n    for i in lst:\n        if i in dct:\n            dct[i] += 1\n        else:\n            dct[i] = 1\n        if max_value < dct[i]:\n            max_value = dct[i]\n    for key, val in dct.items():\n        if val == max_value:\n            return key\n",
        "test": "assert     search([5, 3, 2, 7, 7]) == 7"
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    import math\n    n = len(lst)\n    if n == 0:\n        return []\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        x = sides[0]\n        y = sides[1]\n        z = sides[2]\n        return round((x * y * z)/(2 * (x + y + z)), 2)\n    return -1\n",
        "test": "assert     triangle_area(1, 3, 4) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return q[::] == q[::-1] and sum(q)<=w\n",
        "test": "assert     will_it_fly([5, 3, 1], 9) is False, \"Wrong output\""
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[~i]:\n            changes += 1\n    return changes\n",
        "test": "assert     smallest_change([1, 2, 3, 4, 3]) == 2, \"Wrong result for [1,2,3,4,3]\""
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    list1 = sorted(lst1)\n    list2 = sorted(lst2)\n    if len(list1) == len(list2):\n        return list1\n    elif len(list1) > len(list2):\n        for i in list2:\n            for j in list1:\n                if len(i) < len(j):\n                    list1.remove(j)\n                    break\n        return list1\n    else:\n        for i in list1:\n            for j in list2:\n                if len(i) < len(j):\n                    list2.remove(j)\n                    break\n        return list2",
        "test": "assert     total_match([\"abc\", \"def\", \"ghijk\"], [\"abc\", \"def\", \"ghijk\"]) == [\"abc\", \"def\", \"ghijk\"], \"total_match with same chars in both lists\""
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    for i in range(2, a):\n        if a % i!= 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(65) == False"
    },
    {
        "number": 76,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    for i in range(1, n+1):\n        if i**n == x:\n            return True\n        elif i**n!= x and i < n:\n            return False\n",
        "test": "assert     is_simple_power(2, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return a>0 and a**(1./3.) == int(a**(1./3.))",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    # make sure all digits are uppercase\n    num = num.upper()\n    # convert hex to decimal\n    hex_dec = int(num, 16)\n    # find the prime numbers\n    primes = find_primes(hex_dec)\n    # count the prime numbers\n    count = 0\n    for p in primes:\n        if (p % 10 == 5 or p % 10 == 7) and p > 11:\n            count += 1\n    return count\n",
        "test": "assert     hex_key(\"\") == \"0 0 0 0\""
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return \"db\" + \"\".join(str(int(d)) for d in \"{0:b}\".format(decimal)) + \"db\"\n",
        "test": "assert "
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        i = 0\n        j = 0\n        while j < len(s):\n            if i == len(s) - 1:\n                return True\n            if s[i] == s[i+1]:\n                if i + 1 == len(s) - 1:\n                    return True\n                if j == len(s) - 1:\n                    return True\n                i += 2\n            else:\n                i += 1\n            j += 1\n        return False\n",
        "test": "assert     not is_happy(\"aa\")"
    },
    {
        "number": 81,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    grade_equation = {4.0: 'A+',\n                       3.7: 'A',\n                       3.3: 'A-',\n                       3.0: 'B+',\n                       2.7: 'B',\n                       2.3: 'B-',\n                       2.0: 'C+',\n                       1.7: 'C',\n                       1.3: 'C-',\n                       1.0: 'D+',\n                       0.7: 'D',\n                       0.0: 'D-',\n                       0.0: 'E'}\n    return [grade_equation[i] for i in grades]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) "
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if len(string) == 1:\n        return True\n    else:\n        for i in range(len(string)):\n            if i!= 0 and i!= len(string)-1 and (len(string)-i) % 2!= 0 and (len(string)-i) % 3!= 0 and (len(string)-i) % 5!= 0 and (len(string)-i) % 7!= 0:\n                return False\n            elif i == 0:\n                if (len(string)-i) % 2!= 0 and (len(string)-i) % 3!= 0 and (len(string)-i) % 5!= 0 and (len(string)-i) % 7!= 0:\n                    return False\n            elif i == len(string)-1:\n                if (len(string)-i) % 2!= 0 and (len(string)-i) % 3!= 0 and (len(string)-i) % 5!= 0 and (len(string)-i) % 7!= 0:\n                    return False\n    return True\n",
        "test": "assert     prime_length('not prime') is False"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    count = 0\n    for x in range(1, n + 1):\n        if int(str(x)[0]) == 1 or int(str(x)[-1]) == 1:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if (0 <= N <= 10000):\n        binary_number = bin(N).replace(\"0b\", \"\")\n        return str(binary_number)\n    else:\n        return \"0\"\n",
        "test": "assert     solve(0) == '0'"
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2==0])\nprint(add([4, 2, 6, 7]))\n",
        "test": "assert     add([1, 3, 5, 7, 9]) == 0, add([1, 3, 5, 7, 9])"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    s = s.split(' ')\n    s.sort()\n    s =''.join(s)\n    return s\n",
        "test": "assert "
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    for i in range(len(result)):\n        result[i] = (result[i][0], result[i][1])\n    for i in range(len(result)):\n        result[i] = (result[i][0], len(lst[result[i][0]]) - result[i][1] - 1)\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result",
        "test": "assert     get_row([[1, 2, 3, 4], [5, 6], [7, 8, 9]], 10) == []"
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if len(array) == 0:\n        return []\n    \n    odd = []\n    even = []\n    for num in array:\n        if (num % 2) == 1:\n            odd.append(num)\n        else:\n            even.append(num)\n    return sorted(odd) + sorted(even)\n",
        "test": "assert     sort_array([2, 2, 1, 1]) == [1, 1, 2, 2]"
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    return \"\".join([chr((ord(c)-ord('a')+2)%26+ord('a')) for c in s])\n",
        "test": "assert     encrypt('a') == 'c'"
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(lst) <= 2:\n        return None\n    tmp = sorted(lst)\n    return tmp[1]\n",
        "test": "assert     next_smallest([0, 1, 2, 3, 4, 5]) == 1"
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    boredom = 0\n    for c in S:\n        if c == \"I\":\n            boredom += 1\n    return boredom\n",
        "test": "assert     is_bored(\"I really enjoy my job\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if x == y+z or y == x+z or z == x+y:\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "assert     any_int(2,0,1) == False, \"Wrong output\""
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded = []\n    for char in message:\n        if char.isupper():\n            encoded.append(char.lower())\n        elif char.lower() in vowels:\n            index = vowels.index(char.lower())\n            encoded.append(vowels[(index + 2) % 5])\n        else:\n            encoded.append(char)\n    return ''.join(encoded)\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    decoded = []\n    for char in message:\n        if char.isupper():\n            decoded.append(char.lower())\n        elif char.lower() in vowels:\n            index = vowels.index(char.lower())\n            decoded.append(vowels[(index - 2) % 5])\n        else:\n            decoded.append(char)\n    return ''.join(decoded)",
        "test": "assert 'l' == encode('l')"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    prime_lst = [2]\n    sum_lst = []\n    for i in lst:\n        if i in prime_lst:\n            sum_lst.append(i)\n    return sum(sum_lst)",
        "test": "assert     skjkasdkd([4,4,3,3,2,2]) == (2 + 3)"
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return all(type(i)==str for i in dict.keys()) and all(type(i)==str for i in dict.values()) and len(dict)>0\n",
        "test": "assert     check_dict_case({\"a\":\"A\", \"b\":\"B\"}) == True, \"Different case dictionary, result should be True\""
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    \n    prime_count = 0\n    result = []\n    for i in range(n):\n        if is_prime(i):\n            prime_count += 1\n            result.append(i)\n    \n    return result\n",
        "test": "assert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    #Answer\n    return a*b\n",
        "test": "assert     (multiply(12, 0) == 0)"
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    \n    # We will use string slicing\n    \n    # We know the first character of the string is uppercase\n    s1 = s[1::2]\n    \n    # We will loop over the string and check if the characters are uppercase\n    # If they are, we will increment our counter by 1\n    counter = 0\n    for i in s1:\n        if i.isupper():\n            counter += 1\n    return counter\n",
        "test": "assert     count_upper(\"ABCDE\") == 2"
    },
    {
        "number": 99,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    try:\n        value = int(float(value))\n    except:\n        return None\n    if value % 1 > 0.5:\n        value = int(value) + 1\n    else:\n        value = int(value)\n    return value\n",
        "test": "assert     closest_integer(\"14\") == 14"
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    result = [n]\n    while n > 1:\n        n = n + 1 if n % 2 == 1 else n + 2\n        result.append(n)\n    return result\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    return s.split()\n    \n    \ndef words_string(s):\n    return s.split()\n    \n    \ndef words_string(s):\n    return s.split()\n    \n",
        "test": "assert     words_string('alpha beta gamma') == ['alpha', 'beta', 'gamma']"
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    elif x <= y:\n        for num in range(x, y + 1, 2):\n            if num % 2 == 0:\n                return num\n    else:\n        for num in range(y, x + 1, 2):\n            if num % 2 == 0:\n                return num\n",
        "test": "assert     choose_num(7, 10) ==    -1, \"choose_num(7, 10) is incorrect\""
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int(bin(int((n + m) / 2))[2:])\n        # return int((n + m) / 2)\n",
        "test": "assert     rounded_avg(0, 0) == 0"
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    #using set for faster calculation\n    return sorted(set([i for i in x if i%2!= 0]))\n",
        "test": "assert     unique_digits([1,2,3,4,5]) == [1,3,5]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    \n    # Return an empty array if the array is empty\n    if not arr:\n        return []\n",
        "test": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"One Two Three Four Five Six Seven Eight Nine Zero\", \"Check the data types\""
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # n = 5\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    return [1, 2] + [f(n-1)[i] * i for i in range(1, n) if i%2]\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        j = str(i)\n        if j == j[::-1]:\n            if int(j) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "test": "assert     (even_odd_palindrome(8) == (2, 4)), \"This is not an example of a palindrome.\""
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return len([i for i in arr if sum(map(int, list(str(abs(i))))) > 0])\n",
        "test": "assert     count_nums([]) == 0, \"Wrong answer\""
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if arr is None or len(arr) == 0:\n        return True\n    # Base Case\n    if len(arr) == 1:\n        return True\n    # We know that arr[i] > arr[i+1] if there is more than one element in the array\n    # Else arr[i] == arr[i+1] if there is only one element in the array.\n    # So if we know that arr[i] > arr[i+1] and arr[i+1] > arr[i+2] then we can\n    # say that we can do right shift operation at most 2 times and we can get\n    # the sorted array.\n    i = 0\n    while i < len(arr) - 1 and arr[i] > arr[i+1]:\n        i += 1\n    if i == len(arr) - 1:\n        return True\n    # Recursively check if we can get the sorted array by doing right shift\n    # operation at most 2 times.\n    return move_one_ball(arr[0:i+1]) and move_one_ball(arr[i+1:])\n",
        "test": "assert     move_one_ball([1]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # TODO: Implement the solution\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    if len(lst1) == len(lst2):\n        if set(lst2) == set(lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for x in lst2:\n            if x % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert     exchange([1,3,5,7],[2,4,6,8]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    hist = {}\n    for i in test:\n        if i not in hist.keys():\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    return hist\n",
        "test": "assert "
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    if len(c)==0:\n        return (s,True)\n    s1=s.replace(c, \"\")\n    r=s1[::-1]\n    if r==s1:\n        return (s1,True)\n    return (s,False)\n",
        "test": "assert     reverse_delete('','') == ('', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    return [\"the number of odd elements \" + str(len(list(filter(lambda x: int(x)%2 == 1, i))))\n             + \" of the \" + str(len(i)) + \"nput.\" for i in lst]\n",
        "test": "assert     odd_count([\"1234567\", \"1234567\", \"1234567\"]) == [4, 4, 4], \"Wrong output!\""
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    sum = 0\n    sum_so_far = []\n    length = len(nums)\n    for i in range(length):\n        sum = nums[i]\n        for j in range(i, length):\n            sum += nums[j]\n            sum_so_far.append(sum)\n    min_sum = min(sum_so_far)\n    return min_sum\n",
        "test": "assert     minSubArraySum([3, 1, 1, 1, 3, 5]) == 2"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    def get_capacity(grid):\n        \"\"\"\n        Return grid capacity\n        \"\"\"\n        return sum(grid[0])\n",
        "test": "assert     max_fill([[1,0,1],"
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))",
        "test": "assert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,4,8,3,5,6,7]"
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if not s:\n        return []\n    l = s.split(' ')\n    if n < 1:\n        return []\n    return [i for i in l if len(i) >= n]\n",
        "test": "assert     select_words(\"\"    , 6) == []"
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    consonants = []\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            consonants.append(word[i])\n        else:\n            if word[i - 1] in vowels:\n                continue\n            elif word[i + 1] in vowels:\n                continue\n            else:\n                return word[i]\n    return ''\n",
        "test": "assert     get_closest_vowel(\"abracadabra\") == \"a\""
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if len(lst) % 2!= 0:\n        return 'No'\n    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['(())', '()()']) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    return sorted(arr)[-k:]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5], 1) == [5]"
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    sum_of_odd_elements = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 1:\n            sum_of_odd_elements += lst[i]\n        i += 1\n    return sum_of_odd_elements\n",
        "test": "assert     solution([0]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    # Return the sum of the elements of arr where the sum of elements is\n    # less than or equal to 2 digits.\n    nums = arr[:k]\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert     add_elements([9, 9, 9], 2) == 18"
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    result = []\n    while n!= 1:\n        result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return result + [1]\n",
        "test": "assert     [1] == get_odd_collatz(1)"
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    date = date.split('-')\n    if not date:\n        return False\n    try:\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 32 and day > 0:\n            return True\n        elif month in [4, 6, 9, 11] and day < 31 and day > 0:\n            return True\n        elif month == 2 and day < 29 and day > 0:\n            return True\n    except:\n        return False\n    return False\n",
        "test": "assert     valid_date('12-32-2020') == False"
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    # Your code here\n    txt = txt.replace(\",\",\" \")\n    if \" \" in txt:\n        return txt.split(\" \")\n    else:\n        l = 0\n        for i in txt:\n            if ord(i)%2!= 0:\n                l += 1\n        return [l]\n",
        "test": "assert     split_words('hi there mister') == ['hi', 'there','mister']"
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    \n    return all(a <= b for a, b in zip(lst, lst[1:]))\n",
        "test": "assert     is_sorted([1, 2, 3]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # take care of empty intersection\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    # take care of intersection with the right boundary\n    if interval1[0] <= interval2[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the left boundary\n    if interval2[0] <= interval1[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    # take care of intersection with the right-up corner\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    # take care of intersection with the left-up corner\n    if interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the right-down corner\n    if interval1[0] <= interval2[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the left-down corner\n    if interval2[0] <= interval1[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the diagonal\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     intersection([(1, 3), (2, 4)], [(3, 6), (5, 7)]) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if not arr:\n        return None\n",
        "test": "assert     prod_signs([]) == None, \"Empty array\""
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    lst_values = []\n    # Check if grid is too small\n    if len(grid) < 2 or len(grid[0]) < 2:\n        return None\n",
        "test": "assert     minPath( [ [1,2,3,4],"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    else:\n        fib = [1, 3]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2] + fib[i])\n        return fib\n",
        "test": "assert     tri(1) == [1]"
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    number = n\n    while number > 0:\n        if number % 2 == 0:\n            even_sum += number % 10\n        else:\n            odd_sum += number % 10\n        number = number // 10\n    if even_sum == 0:\n        return odd_sum\n    else:\n        return 0\n",
        "test": "assert     digits(4) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    if string == \"[]\":\n        return False\n    stack = [0]\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(0)\n        else:\n            stack.pop()\n            if len(stack) == 0:\n                return False\n    return True\n",
        "test": "assert     is_nested('[()[()]]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    return sum([round(x**2) for x in lst])\n",
        "test": "assert     sum_squares([1, 2, 3]) == (1**2 + 2**2 + 3**2)"
    },
    {
        "number": 134,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    txt = txt.split()\n    return txt[-1].isalpha()\n    \n",
        "test": "assert     check_if_last_char_is_a_letter('hello world! ') == False"
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    best_index = -1\n    for i, el in enumerate(arr):\n        if best_index == -1 or arr[best_index] < el:\n            best_index = i\n    return best_index\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    negative = []\n    positive = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    if negative:\n        return (max(negative), min(positive))\n    elif positive:\n        return (max(positive), min(positive))\n    else:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if type(a) == float or type(b) == float:\n        return max(a,b) if a > b else min(a,b)\n    if a > b:\n        return a\n    if b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert     (compare_one(2, 1) == 2)"
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    return True if sum([i for i in range(1, n+1) if i % 2 == 0]) == 4 else False\n",
        "test": "assert     is_equal_to_sum_even(1) == False"
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    factorial = 1\n    for num in range(n, 0, -1):\n        factorial *= num\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    text_list = text.split()\n    new_text = \"\"\n    for i in range(len(text_list)):\n        new_text += text_list[i].replace(\" \", \"_\")\n    return new_text\n",
        "test": "assert     fix_spaces(\"The cat in  the hat\") == \"The_cat_in_the_-hat\""
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if(file_name[:3].isdigit()):\n        return 'No'\n    dot_position = file_name.find('.')\n    if dot_position == -1:\n        return 'No'\n    if dot_position == len(file_name) - 3:\n        return 'No'\n    if file_name[dot_position + 1: dot_position + 3] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if file_name[:dot_position] == '':\n        return 'No'\n    return 'Yes'",
        "test": "assert     file_name_check('some.dude.exe') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if len(lst)==0:\n        return 0\n    else:\n        sum = 0\n        for i in range(len(lst)):\n            if i%4 == 0 and i%3 == 0:\n                sum += lst[i]**3\n            elif i%3 == 0:\n                sum += lst[i]**2\n            elif i%4!= 0:\n                sum += lst[i]\n        return sum\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    words = sentence.split()\n    for word in words:\n        if len(word) > 2 and is_prime(len(word)):\n            print(word)\n",
        "test": "assert     words_in_sentence("
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return False\n",
        "test": "assert     (simplify(\"1/3\", \"2/3\") is False)"
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n",
        "test": "assert     [3, 5, 8, 7, 1, 0, 4, 6, 2, 9] == order_by_points([0, 1, 2, 3, 6, 7, 4, 9, 5, 8])"
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n    \nprint(specialFilter([15, -73, 14, -15]))\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 5"
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if ((i * i - i + 1) + (j * j - j + 1)) % 3 == 0:\n                result += 1\n    return result\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    try:\n        planet1 = planets.index(planet1)\n        planet2 = planets.index(planet2)\n        result = [planets[i] for i in range(planet1+1, planet2)] + [planets[i] for i in range(planet2+1, planet1, -1)]\n        return tuple(result)\n    except:\n        return ()\n",
        "test": "assert     bf('Earth', 'Mercury') == ()"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Sol.1\n    # return sorted(lst, key=len)\n",
        "test": "assert "
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    \n    if n % 2 == 1:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(1, 3, 2) == 3"
    },
    {
        "number": 151,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return sum([i*i for i in lst if i % 2 == 1])\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    score, guess = list(game), list(guess)\n    return [0 if guess[i] == score[i] else abs(guess[i] - score[i]) for i in range(len(score))]\n",
        "test": "assert     compare([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [0,0,0,0,0,0,0], \"Compare Error\""
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    cap_count = sum(c.isupper() for c in class_name)\n    lower_count = sum(c.islower() for c in class_name)\n    \n    return class_name + \".\" + extensions[0] if (cap_count - lower_count)/len(class_name) == max(\n        (cap_count - lower_count)/len(ext) for ext in extensions) else class_name + \".\" + extensions[1]\n",
        "test": "assert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Wrong output'"
    },
    {
        "number": 154,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    pattern_arr = []\n    pattern_arr.extend(a)\n    pattern_arr.extend(a[::-1])\n    result = False\n    for x in pattern_arr:\n        if b.find(x)!= -1:\n            result = True\n            break\n    return result\n",
        "test": "assert     cycpattern_check('xyz', 'abcd') == False"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    even, odd = 0, 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n",
        "test": "assert     even_odd_count(2) == (1, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    mini_roman_dict = {\n        1000 :'m', 900 : 'cm', 500 : 'd', 400 : 'cd', 100 : 'c', 90 : 'xc',\n        50 : 'l', 40 : 'xc', 10 : 'x', 9 : 'ix', 5 : 'v', 4 : 'iv', 1 : 'i'\n    }\n    roman_numeral = \"\"\n    for num in mini_roman_dict:\n        if number == 0:\n            break\n        count = number // num\n        roman_numeral += count * mini_roman_dict[num]\n        number -= (count * num)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    #raise NotImplementedError\n    if not (a + b > c and a + c > b and b + c > a):\n        return False\n    if a == b or a == c or b == c:\n        return True\n    if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1,1,3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    \n    words_dict = {}\n    #use dict to find the words with same chars \n    #and find the one with max unique chars\n    \n    for word in words:\n        unique_chars = len(set(word))\n        words_dict[word] = unique_chars\n    \n    max_val = max(words_dict.values())\n    \n    #return the key with max unique chars if more than one key have max unique chars\n    max_unique_words = []\n    for key in words_dict:\n        if words_dict[key] == max_val:\n            max_unique_words.append(key)\n    \n    return sorted(max_unique_words)[0]\n",
        "test": "assert     find_max([\"clown\", \"clown\", \"clown\"]) == \"clown\""
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if remaining == 0:\n        return [number,0]\n    elif number < need:\n        return [number,remaining]\n    else:\n        return [number-need,remaining-need]\n",
        "test": "assert     eat(0, 0, 2) == [ 0, 2 ]"
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "test": "assert     do_algebra(['+'], [1, 2])             == 3"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return \"\".join(map(lambda x: x.swapcase() if x.isalpha() else x, s))\n",
        "test": "assert     solve(\"12345\") == \"12345\", \"2\""
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if not text:\n        return None\n",
        "test": "assert "
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "test": "assert     generate_integers(2, 5) == [2, 4]"
    }
]