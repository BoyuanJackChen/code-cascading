[
    {
        "number": 0,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return any(x1 > threshold > x2 for x1, x2 in zip(numbers, numbers[1:]))\n",
        "test": "assert     has_close_elements([1.0, 1.1, 2.0, 2.1, 3.0, 3.1], 0.1) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    print(\"\\n\\n\\nInput: \", paren_string, \"\\n\\n\\n\")\n    close_parens = []\n    open_parens = []\n    temp_str = \"\"\n    for c in paren_string:\n        if c == \" \":\n            continue\n        elif c == \"(\":\n            temp_str += c\n            open_parens.append(temp_str)\n            temp_str = \"\"\n        elif c == \")\":\n            temp_str += c\n            close_parens.append(temp_str)\n            temp_str = \"\"\n    if temp_str:\n        close_parens.append(temp_str)\n    result_list = []\n    for op in open_parens:\n        c = close_parens.pop()\n        if op == c:\n            result_list.append(op)\n        else:\n            print(op, c)\n            return []\n    return result_list\n",
        "test": "assert     separate_paren_groups('(foo(bar))()') == ['(foo(bar))()', '(foo(bar))']"
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    integer_part = math.floor(number)\n    decimal_part = math.floor(number) - integer_part\n",
        "test": "assert     truncate_number(8.65) ==     0.65"
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,2,3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # TODO: your code here\n    return 0.0\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1]) == 0.0, \"All elements are the same\""
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    new_numbers = []\n    for idx in range(len(numbers) - 1):\n        new_numbers.extend([numbers[idx], delimeter])\n    new_numbers.append(numbers[-1])\n    return new_numbers\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    parsed_string = paren_string.split()\n    return_list = []\n",
        "test": "assert     parse_nested_parens(\"(()())\") == [3, 3]"
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert     filter_by_substring([\"apple\", \"banana\", \"cherry\"], \"ba\") == [\"banana\"]"
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    \n    sum_ = 0\n    prod = 1\n    for n in numbers:\n        sum_ += n\n        prod *= n\n    return sum_, prod\n",
        "test": "assert     sum_product([1, 2]) == (3, 2)"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max(numbers[i], max_list[i - 1]))\n    return max_list\n",
        "test": "assert     rolling_max([1, 3, 2, 5]) == [1, 3, 3, 5]"
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if string == string[::-1]:\n        return string\n",
        "test": "assert     is_palindrome('racecar')"
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n",
        "test": "assert     string_xor(\"101010\", \"101010\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    lengths = [len(string) for string in strings]\n    if not lengths:\n        return None\n    return strings[lengths.index(max(lengths))]\n",
        "test": "assert     longest([\"a\", \"\", \"b\", \"\"]) == \"b\""
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n",
        "test": "assert     all_prefixes(\"flow\") == [\"f\", \"fl\", \"flo\", \"flow\"]"
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    music_list = music_string.split('|')\n    result_list = []\n    for music_note in music_list:\n        if music_note == 'o':\n            result_list.append(4)\n        elif music_note == 'o|':\n            result_list.append(2)\n        else:\n            result_list.append(1)\n    return result_list\n",
        "test": "assert     parse_music('o|o|o|o') == [4, 4, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    i = 0\n    count = 0\n    while i < len(string):\n        if string[i:].startswith(substring):\n            count += 1\n            i = i + len(substring)\n        else:\n            i = i + 1\n    return count\n",
        "test": "assert     how_many_times(\"baba\", \"baba\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    numbers_list = [int(n) for n in numbers.split(\" \")]\n    numbers_list.sort()\n    return \" \".join([str(num) for num in numbers_list])\n",
        "test": "assert     sort_numbers(\"eight one five two three seven six\") == \"one two three five six seven eight\""
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n",
        "test": "assert     find_closest_elements([2, 3, 4, 1]) == (2, 4)"
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    numbers = sorted(numbers)\n    min_n = numbers[0]\n    max_n = numbers[-1]\n    unit_scale = lambda x: (x - min_n) / (max_n - min_n)\n    return list(map(unit_scale, numbers))\n",
        "test": "assert     rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # return [x for x in values if isinstance(x, int)]\n    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "test": "assert     strlen('abc') == 3"
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for divisor in range(5, math.floor(math.sqrt(n)), 6):\n        if n % divisor == 0 and n // divisor <= divisor:\n            return divisor\n    return n\n",
        "test": "assert     largest_divisor(2) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # number of factors for n\n    number_factors = 0\n    if n == 1:\n        return [1]\n    while n % 2 == 0:\n        number_factors += 1\n        n //= 2\n    if n == 1:\n        return [2] * number_factors\n    # find number of factors for a\n    a = 3\n    while a * a <= n:\n        if n % a == 0:\n            number_factors += 1\n            b = n // a\n            if a == b:\n                return [a] * number_factors\n            n //= b\n            a = 3\n        else:\n            a += 2\n    return [n] * number_factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    temp_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in temp_list:\n            temp_list.append(numbers[i])\n    return temp_list\n",
        "test": "assert     remove_duplicates([1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return \"\".join(\n        [\n            c.upper() if c.islower() else c.lower()\n            for c in string\n        ]\n    )\n    \n",
        "test": "assert     flip_case(\"\") == \"\""
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert     concatenate(['asdf', 'qwer', 'zxcv']) == 'asdfqwerzxcv'"
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # filter_by_prefix = []\n    # for s in strings:\n    #     if s.startswith(prefix):\n    #         filter_by_prefix.append(s)\n    # return filter_by_prefix\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['aaa', 'bbb', 'bbc'], 'bb') == ['bbb', 'bbc']"
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([1, 2, 3, -4]) == [1, 2, 3]"
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    non_zero_xs = []\n    for x in xs:\n        if x!= 0:\n            non_zero_xs.append(x)\n    if len(non_zero_xs) == 0:\n        return 0\n    if len(non_zero_xs) == 1:\n        return -non_zero_xs[0]\n    if len(non_zero_xs) % 2 == 1:\n        non_zero_xs = non_zero_xs[:-1]\n    return math.pi / (math.pi - math.atan(poly(non_zero_xs, 0)))\n",
        "test": "assert     poly([0, 0], 1) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #Create a new list to store the values of l that are not divisible by three\n    l_not_div_by_three = []\n    #Create a new list to store the values of l that are divisible by three\n    l_div_by_three = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            l_div_by_three.append(l[i])\n        else:\n            l_not_div_by_three.append(l[i])\n    #Finally, insert the two lists into l\n    l_not_div_by_three.extend(l_div_by_three)\n    #Return the sorted list\n    return sorted(l_not_div_by_three)\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Incorrect.\""
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique(['a', 'b', 'c', 'd', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']"
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"List is empty.\")\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    even_l = []\n    odd_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_l.append(l[i])\n        else:\n            odd_l.append(l[i])\n    even_l = sorted(even_l)\n    return odd_l + even_l\n",
        "test": "assert sort_even([5, 4, 3, 2, 1]) == [4, 2, 3, 5, 1]"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    i = 2\n    while True:\n        if fibonacci(i) >= n:\n            if is_prime(fibonacci(i)):\n                return fibonacci(i)\n        i += 1\n",
        "test": "assert "
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for num in l:\n        for num2 in l:\n            for num3 in l:\n                if num + num2 + num3 == 0:\n                    count += 1\n    if count == 0:\n        return False\n    elif count == 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -4, -5, -1, 1, 6]) is True"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return 2 * (n * n - n)\n",
        "test": "assert     car_race_collision(1) == 0, \"wrong result for car_race_collision(1)\""
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return [i+1 for i in l]\n",
        "test": "assert"
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, 4]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = \"\"\n    x_remainder = x\n    base_num = base\n    while x_remainder >= base:\n        remainder = x_remainder % base\n        x_remainder = x_remainder // base\n        result = str(remainder) + result\n    result = str(x_remainder) + result\n    return result\n",
        "test": "assert     change_base(10, 2) == \"1010\""
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return 0.5*a*h\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n <= 2:\n        return n - 1\n    a, b = 0, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib4(1) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    return 0.5 * (l[len(l)//2 - 1] + l[len(l)//2])\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3, \"Wrong implementation!\""
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    # remove any whitespace\n    text = text.replace(' ', '')\n    text = text.lower()\n    \n    # perform reverse of given string\n    rev = text[::-1]\n    \n    # if the input is a palindrome return True, otherwise return False\n    if text == rev:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_palindrome(\"a\")"
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def modp_inner(n: int, p: int) -> int:\n        return pow(2, n, p)\n    return modp_inner(n, p)\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\""
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    vowels = 'aeiou'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "test": "assert     remove_vowels('hello') == 'hll'"
    },
    {
        "number": 52,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return all(i < t for i in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5, 6], 2) == True, 'wrong result'"
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return all([s0[i] == s1[i] for i in range(len(s0))])\n",
        "test": "assert     same_chars('apple', 'apple') == True"
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\":\n            if brackets_stack and brackets_stack[-1] == \"<\":\n                brackets_stack.pop()\n            else:\n                return False\n    return not brackets_stack\n",
        "test": "assert     correct_bracketing('<><>') == True"
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # get the difference between consecutive values\n    # if negative, we're decreasing\n    # if positive, we're increasing\n    # if == 0, all values are the same\n    diffs = [l[i+1]-l[i] for i in range(len(l)-1)]\n    if not all(diffs):\n        return False\n    return all([diffs[i] == diffs[0] for i in range(len(diffs)-1)])\n",
        "test": "assert "
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = []\n    i = 0\n    j = 0\n    l1 = list(l1)\n    l2 = list(l2)\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n",
        "test": "assert     sorted(common([], [])) == []"
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    for i in range(n - 1, 2, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert     largest_prime_factor(13195)!= 5"
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return n * (n + 1) // 2\n",
        "test": "assert     sum_to_n(1) ==     1,     \"sum_to_n(1) should be 1\""
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    brackets = list(brackets)\n    open_bracks = []\n    for b in brackets:\n        if b == '(':\n            open_bracks.append(b)\n        elif b == ')':\n            if len(open_bracks) == 0:\n                return False\n            else:\n                open_bracks.pop()\n    return len(open_bracks) == 0\n",
        "test": "assert     correct_bracketing('')"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not isinstance(xs, list):\n        return \"ERROR\"\n    if len(xs) == 0:\n        return \"ERROR\"\n    if len(xs) == 1:\n        return \"ERROR\"\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for ch in s:\n        if ch.lower() in \"aeiouy\":\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('foobar') == 3, 'wrong result for \\'foobar\\''"
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     str(circular_shift(12, 1)) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     digitSum('3+5j') == None"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    #first of all we need to get the string to a list of ints and not a list of strings\n    l = s.split()\n    #setting our variables\n    apples = 0\n    oranges = 0\n    mangos = 0\n    for i in l:\n        if 'apples' in i:\n            apples = int(i[0])\n        elif 'oranges' in i:\n            oranges = int(i[0])\n        elif'mangos' in i:\n            mangos = int(i[0])\n    return apples - oranges - mangos\n",
        "test": "assert     fruit_distribution(\"65 23 12\", 10) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    #O(n)\n    if not arr: return []\n    arr = sorted(arr, key=lambda x: x if x % 2 == 0 else 100)\n    return [arr[0], arr.index(arr[0])]\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    greatest = 0\n    frequency = 0\n    for item in lst:\n        if item > frequency:\n            greatest = item\n    return greatest\n",
        "test": "assert "
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if lst == []:\n        return []\n    # else:\n    #     tmp = lst.copy()\n    #     tmp.sort()\n    #     tmp.reverse()\n    #     return tmp\n    tmp = [min(lst)]\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    tmp.append(min(lst))\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    tmp.append(min(lst))\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    return tmp\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1\n        \n",
        "test": "assert     (triangle_area(4, 4, 5) == 2.5)"
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if w < sum(q) and is_balanced(q):\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1],2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not arr:\n        return 0\n    \n    # Get the minimum number of changes required to make the array palindromic\n    # Return the minimum number of changes\n    \n    return 0\n",
        "test": "assert     smallest_change([1, 2, 3, 2, 1]) == 0, \"Wrong output\""
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    lst1_len = []\n    lst2_len = []\n    for i in lst1:\n        lst1_len.append(len(i))\n    for i in lst2:\n        lst2_len.append(len(i))\n    if len(lst1_len) < len(lst2_len):\n        for i in lst1_len:\n            if i in lst2_len:\n                lst2_len.remove(i)\n        return lst1\n    elif len(lst1_len) > len(lst2_len):\n        for i in lst2_len:\n            if i in lst1_len:\n                lst1_len.remove(i)\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match(['aa','bb','cc'],['a','b','bb']) == ['aa','bb','cc'], \"Should be ['aa','bb','cc']\""
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    for i in range(2, a):\n        if a % i == 0 and is_prime(i) == True:\n            for j in range(2, a):\n                if a % j == 0 and is_prime(j) == True:\n                    for k in range(2, a):\n                        if a % k == 0 and is_prime(k) == True:\n                            return True\n    return False\n",
        "test": "assert "
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return int(x**(1/n))==x**(1/n)\n",
        "test": "assert     is_simple_power(0, 3) == True, \"Wrong result\""
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return a**(1/3)%1 == 0\n",
        "test": "assert     iscube(7) == False"
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # your code here\n    num = num.upper()\n    num = list(num)\n    return num.count(\"2\") + num.count(\"3\") + num.count(\"5\") + num.count(\"7\") + num.count(\"B\") + num.count(\"D\")\n",
        "test": "assert     hex_key(\"1233\") == 3, \"incorrect result for hex_key('1233')\""
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return 'db' + bin(decimal)[2:].zfill(16) + 'db'\n",
        "test": "assert     decimal_to_binary(2) == 'db101100'"
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    #SOLUTION\n    # convert s to a list\n    # create a set of the unique letters from s\n    # return True if len(s) >= 3 and set(s) == len(set(s))\n    # return False otherwise\n    return True if len(s) >= 3 and len(set(s)) == len(s) else False\n",
        "test": "assert     is_happy(\"abcd\") == True"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     numerical_letter_grade([3.8, 3.8, 3.7, 3.8, 3.8, 3.9, 3.9, 3.7, 3.7, 3.7, 3.7, 3.9, 3.8, 3.8, 3.8, 3.8, 3.7, 3.8, 3.6, 3.6]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'C+', 'C+', 'C+', 'C+', 'C+']"
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if len(string) % 2 == 0 or len(string) % 3 == 0 or len(string) % 5 == 0 or len(string) % 7 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     prime_length(\"asd\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Create list of length n to store the digits of n.\n    digits = [0] * n\n    # Iterate through each digit of n.\n    for i in range(n):\n        # Increment the appropriate digit in the list.\n        digits[i] = i + 1\n    # Initialize variables to store count of 1s and count of n.\n    count1 = 0\n    countn = 0\n    # Iterate through digits.\n    for digit in digits:\n        # Check if the digit is 1 and if so increment count1.\n        if digit == 1:\n            count1 += 1\n        # Check if the digit is n and if so increment countn.\n        elif digit == n:\n            countn += 1\n    # Return the sum of count1 and countn.\n    return count1 + countn\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    return bin(N)[2:]\n",
        "test": "assert     (solve(5) == '101')"
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = []\n    i = 0\n    while(i < len(lst)):\n        if(i%2!= 0):\n            if(isinstance(lst[i], int)):\n                result.append(lst[i])\n        i = i + 1\n    return sum(result)\n    \n",
        "test": "assert     add([]) == 0"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return''.join(sorted(s.split(), key=ord))\n",
        "test": "assert "
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if x < 0:\n        return []\n    if not lst:\n        return []\n    res = []\n    for i, row in enumerate(lst):\n        if x in row:\n            res.append((i, row.index(x)))\n    return sorted(res, key=lambda x: (x[0], x[1]))",
        "test": "assert     get_row([[1], [2], [3], [4]], 2) ==                 [(2, 0)]"
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sorted_array = []\n    if len(array) == 0:\n        return sorted_array\n",
        "test": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [5, 2, 3, 1, 8, 4]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # your code here\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    b = 'abcdefghijklmnopqrstuvwxyz'\n    c = a[:2] + b[2:] + b[:2]\n    d = c[-2:] + c[:-2]\n    e = d[-2:] + d[:-2]\n    return e\n",
        "test": "assert     encrypt(\"ABC\") == \"ZBC\""
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    # solution 1\n    if len(lst) < 2:\n        return None\n    \n    # solution 2\n    if len(lst) == 2:\n        return min(lst)\n    \n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 2, 3]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    sentences = S.split(\".\")\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\") and not sentence.strip().endswith(\"!\") and not sentence.strip().endswith(\"?\"):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert     is_bored('I am what I am.') == 1"
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    a = x+y+z\n    if type(x) == int and type(y) == int and type(z) == int:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(1, 2, 1) == True, 'Fails any_int test 2'"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    letters = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.lower()\n    encoded_message = ''\n    for i in message:\n        if i in 'aeiou':\n            encoded_message += letters[letters.index(i)+2]\n        else:\n            encoded_message += i\n    return encoded_message\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    print(lst)\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] if lst[0]>lst[1] else lst[1]\n    return max(skjkasdkd(lst[:-1]), skjkasdkd(lst[1:]))\n    # if lst == []:\n    #     return 0\n    # for i in lst:\n    #     if isPrime(i):\n    #         return sum(int(c) for c in str(i))\n    # return max(skjkasdkd(lst[:-1]), skjkasdkd(lst[1:]))\n",
        "test": "assert     skjkasdkd([1,2,3,4,5]) == 5"
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not dict:\n        return False\n    if len(dict) == 1:\n        return True\n    if not all(isinstance(key,str) for key in dict.keys()):\n        return False\n    if not all(isinstance(value,str) for value in dict.values()):\n        return False\n    if not all(key.islower() for key in dict.keys()):\n        return False\n    if not all(value.isupper() for value in dict.values()):\n        return False\n    return True\n",
        "test": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) is False, \"incorrect\""
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if type(a) == int and type(b) == int:\n        a_digits = list(str(a))\n        b_digits = list(str(b))\n        result = []\n        for d_a, d_b in zip(a_digits, b_digits):\n            result.append(int(d_a) * int(d_b))\n        return sum(result)\n    else:\n        raise TypeError\n",
        "test": "assert     multiply(1234, 5) == 6"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    return sum([1 for char in s[1::2] if char.isupper()])\n    \n",
        "test": "assert     count_upper('abcde') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    num = float(value)\n    if int(num) == num:\n        return int(num)\n    return int(num + ((num - int(num)) * -1))\n",
        "test": "assert     closest_integer(1) == 1"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # The main idea:\n    # The stones in the last level (the levels start with 0) are the middle\n    # of the odd numbers\n    \n    # Check if n is even or odd\n    if n % 2 == 0:\n        level_stones = range(0, n, 2)\n    else:\n        level_stones = range(1, n, 2)\n    \n    return list(level_stones)\n",
        "test": "assert     make_a_pile(2)             == [1,3]"
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return s.split()\n",
        "test": "assert     type(words_string('')) is list, \"Ouput should be a list\""
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if y < x:\n        return -1\n    elif y % 2 == 0:\n        if x % 2 == 0:\n            return min(x, y)\n        else:\n            return max(x, y)\n    else:\n        return -1\n        \n",
        "test": "assert     choose_num(-5, 5) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n,m+1))/len(range(n,m+1))))\n        return bin(avg)\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     unique_digits([4, 2, 7, 1, 3]) == [1, 2, 3, 7]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    arr.sort()\n    arr.reverse()\n    return [int_to_word[i] for i in arr]",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return list(range(1,n*2,2)) + [sum(range(n,0,-2))]\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return tuple(map(sum, [num % 2 for num in range(1, n+1)]))\n",
        "test": "assert     even_odd_palindrome(2) == (0, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sum([sum([int(j) for j in str(i) if int(j) >= 0]) for i in arr])\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    #Add your code here\n    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([3, 4, 2, 1]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if is_even(lst1) and is_even(lst2):\n        return \"YES\"\n    elif is_odd(lst1) and is_odd(lst2):\n        return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange([2,4,6,8], [1,2,3,4,5]) == \"YES\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    d = {}\n    test = test.lower()\n    for i in test:\n        d[i] = test.count(i)\n    return d\n",
        "test": "assert     histogram(\"a\") == {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    d = {}\n    for i in range(len(c)):\n        if c[i] not in d:\n            d[c[i]] = 1\n        else:\n            d[c[i]] += 1\n    l = len(s)\n    s1 = s[:l]\n    # print(s1)\n    for key in d:\n        count = 0\n        for i in range(l-1):\n            if s1[i] == key:\n                count += 1\n        if d[key] > count:\n            s1 = s1[:l-d[key]]\n    # print(s1)\n    flag = False\n    if s1 == s1[::-1]:\n        flag = True\n    return (s1,flag)\n",
        "test": "assert     reverse_delete(\"aabb\", \"ab\") == (\"aabb\", False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    res = []\n    for s in lst:\n        odd = 0\n        for ch in s:\n            if ch in '0123456789':\n                if int(ch) % 2 == 1:\n                    odd += 1\n        res.append(f'the number of odd elements {odd}n the str{len(s)}ng {len(s)} of the {len(lst)}nput.')\n    return res\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    min_sum = 10 ** 9 + 7\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum >= min_sum:\n                break\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n",
        "test": "assert     minSubArraySum([3, 1, 1, 3]) == 3"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def solve_problem(grid, capacity):\n        \"\"\"\n        Solves the problem and returns the solution\n        \"\"\"\n        return max_fill_brute_force(grid, capacity)\n    \n    def max_fill_brute_force(grid, capacity):\n        \"\"\"\n        Brute force solution for the Max Fill problem.\n        \"\"\"\n        # if it is a single well, we don't need to do anything\n        # and we return the amount of times we need to lower the buckets\n        if len(grid) == 1:\n            return 0\n",
        "test": "assert max_fill([[1,0,0],[0,1,1],[0,0,0]], 2) == 2"
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Wrong Answer\""
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # your code here\n    return []\n",
        "test": "assert     select_words(\"hippopotamus\", 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    for index, letter in enumerate(reversed(word)):\n        if letter.lower() in 'aeiouy':\n            return word[len(word) - index - 1]\n    return ''\n",
        "test": "assert     get_closest_vowel('aPple') == 'e'"
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n",
        "test": "assert     match_parens([\"()(\", \"()()\"]) == \"Yes\""
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(arr) < k:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    return sum(i for i in lst[::2] if i % 2!= 0",
        "test": "assert     solution([1, 2, 3, 4, 5]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    running_sum = 0\n    start = k\n    for i in range(start, len(arr)):\n        running_sum += arr[i]\n    return running_sum\n",
        "test": "assert     add_elements([4, 6, 7, 9, 9, 9], 2) == 38"
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    result = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = 3*n+1\n        result.append(n)\n    return result\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    months = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n    \n    if date == '':\n        return False\n    else:\n        date_list = date.split('-')\n        if len(date_list[0]) < 2 or len(date_list[1]) < 2 or len(date_list[2]) < 4:\n            return False\n        if int(date_list[0]) in range(1,13) and int(date_list[1]) in range(1,32) and date_list[0] in months:\n            if int(date_list[0]) == 2 and int(date_list[1]) in range(1,29) and int(date_list[2]) in range(0,100):\n                return True\n            elif int(date_list[0]) in [1,3,5,7,8,10,12] and int(date_list[1]) in range(1,32):\n                return True\n            elif int(date_list[0]) in [4,6,9,11] and int(date_list[1]) in range(1,31):\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "test": "assert     valid_date('') == False, \"Invalid date\""
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # split on whitespace\n    # split on comma\n    # return the number of letters that are odd\n    return \n",
        "test": "assert     split_words('abc,def') == ['abc', 'def']"
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst == lst[::-1]\n    # pass\n",
        "test": "assert     is_sorted([]) is True"
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return \"NO\"\n    \nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))\n    ",
        "test": "assert     intersection((1, 3), (2, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if not arr: return None\n    signs = [1, -1, 0]\n    ans = 0\n    for n in arr:\n        ans += signs.count(n) * abs(n)\n    return ans\n",
        "test": "assert     prod_signs([1, -3, 5, -6]) == -18"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Return a list of the values on the cells that the minimum path go through.\n    # Write your code here.\n    if not grid:\n        return []\n    if not k:\n        return []\n    rows, cols = len(grid), len(grid[0])\n    \n    dist = [[float(\"inf\")]*cols for _ in range(rows)]\n    prev = [[None]*cols for _ in range(rows)]\n    for row in range(rows):\n        for col in range(cols):\n            if row == 0 and col == 0:\n                dist[row][col] = 0\n            elif row == 0:\n                dist[row][col] = dist[row][col-1] + grid[row][col]\n                prev[row][col] = (row, col-1)\n            elif col == 0:\n                dist[row][col] = dist[row-1][col] + grid[row][col]\n                prev[row][col] = (row-1, col)\n            else:\n                dist[row][col] = min(dist[row-1][col], dist[row][col-1]) + grid[row][col]\n                if dist[row-1][col] < dist[row][col-1]:\n                    prev[row][col] = (row-1, col)\n                else:\n                    prev[row][col] = (row, col-1)\n    \n    # Start from the bottom right corner and keep moving up and left\n    current = (rows-1, cols-1)\n    result = []\n    while current!= (0, 0) and k:\n        row, col = current\n        if row - 1 >= 0 and col - 1 >= 0 and dist[row-1][col] < dist[row][col-1]:\n            current = (row-1, col)\n        else:\n            current = (row, col-1)\n        result.append(grid[current[0]][current[1]])\n        k -= 1\n    return result",
        "test": "assert     minPath(    [[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # fibonacci = [1, 1]\n    # even = 0\n    # for i in range(n - 1):\n    #     if i % 2 == 0:\n    #         even = 1\n    #     else:\n    #         even = 0\n    #     fibonacci.append(fibonacci[i] + fibonacci[i + 1] + even)\n    # return fibonacci\n",
        "test": "assert     tri(2) == 2"
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    odd_digits = 1\n    while n > 0:\n        if (n % 10) % 2 == 0:\n            return 0\n        odd_digits *= (n % 10)\n        n = n // 10\n    return odd_digits\n",
        "test": "assert     digits(3) == 3"
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     is_nested('[([])]') == False, \"Wrong answer\""
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    total = 0\n    for i in lst:\n        total += (i**2)\n    return int(round(total))\nprint(sum_squares([1,2,3]))\n",
        "test": "assert     sum_squares([0]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"balloons\") == True, \"wrong answer\""
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    largest_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[largest_idx]:\n            largest_idx = i\n    return -1 if largest_idx == 0 else largest_idx\n",
        "test": "assert     can_arrange([1, 2, 3, 4]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if lst == []:\n        return None, None\n    if max(lst) < 0 or min(lst) > 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if type(a) == float or type(b) == float:\n        return a if a > b else b\n    else:\n        return None if a == b else a if a > b else b\n",
        "test": "assert     compare_one(1.0, 3.0) == 3.0"
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    a, b, c, d = 0, 0, 0, 0\n    while n > 0:\n        if n % 2 == 0:\n            if n % 4 == 0:\n                return True\n            n -= 2\n            a += 1\n        else:\n            n -= 1\n            b += 1\n    return False\n",
        "test": "assert     is_equal_to_sum_even(5) == True, \"Test case 2 failed\""
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     special_factorial(2) == 2"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if''in text:\n        text = text.replace('  ', '-')\n    return text\n",
        "test": "assert     fix_spaces(\"This is a test sentence \") == \"This_is_a_test_sentence_\""
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    import re\n    if len(re.findall(\"[0-9]\", file_name)) > 3:\n        return \"No\"\n    if len(re.findall(\"[0-9]\", file_name)) < 1:\n        return \"No\"\n    if \".\" in file_name:\n        if file_name.split(\".\")[0]!= \"\":\n            if file_name[file_name.split(\".\")[0].find(\".\")+1:] not in [\"exe\", \"dll\", \"txt\"]:\n                return \"No\"\n        elif file_name.split(\".\")[1] not in [\"exe\", \"dll\", \"txt\"]:\n            return \"No\"\n    else:\n        return \"No\"\n    return \"Yes\"\n    ",
        "test": "assert     file_name_check('2.dll') == 'No', 'err #2'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    sums = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            if lst[i] > 0:\n                sums += lst[i]\n            else:\n                sums -= lst[i]\n    \n    return sums\n",
        "test": "assert     sum_squares([1, 2, 3]) == 10, \"wrong result\""
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     words_in_sentence('I am a little boy') == 'I a little boy'"
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     not simplify(\"7/12\", \"1/3\")"
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert     order_by_points([0, 3, 5, 1]) == [0, 5, 3, 1]"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Your code here\n    x = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1:\n            x += 1\n    return x\n",
        "test": "assert     specialFilter([10, 0, -1, 2, 3, 4, 5]) == 2"
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planets_lst = []\n    for item in planets:\n        if planet1 in item or planet2 in item:\n            planets_lst.append(item)\n    sorted_lst = sorted(planets_lst, key=lambda x: abs(planets.index(x) - planets.index(planet1)))\n    sorted_lst.insert(0,planet1)\n    sorted_lst.insert(1,planet2)\n    return tuple(sorted_lst)\n",
        "test": "assert     bf('Earth', 'Uranus') == ('Neptune', 'Venus', 'Mercury', 'Jupiter', 'Saturn')"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    list_with_only_odd_lengths_removed = [\n        word for word in lst if len(word) % 2 == 0\n    ]\n    list_with_only_odd_lengths_removed.sort()\n    return list_with_only_odd_lengths_removed\n",
        "test": "assert     sorted_list_sum(['a', 'l', 'e', 'r', 'h']) == ['a', 'e', 'l', 'r', 'h']"
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2, 10, 20) == 10"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = 0\n    for i in lst:\n        if i > 0:\n            if i % 2!= 0:\n                result += i**2\n    return result\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    #get the number of guesses\n    num_guesses = len(guess)\n    #create a new array to hold the differences\n    diff = []\n    #loop through the number of guesses\n    for i in range(0, num_guesses):\n        #get the difference between guess and score\n        diff_val = abs(guess[i] - game[i])\n        #add the difference to the new array\n        diff.append(diff_val)\n    return diff\n",
        "test": "assert     compare([0, 0], [0, 0]) == [0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    strongest_extension = ''\n    for extension in extensions:\n        if extension[0].isupper() and extension[1:].islower():\n            strength = len(extension) - len(extension.lower())\n        elif extension[0].islower() and extension[1:].isupper():\n            strength = len(extension) - len(extension.upper())\n        elif extension[0].isupper() and extension[1:].isupper():\n            strength = len(extension) - len(extension.lower())\n        else:\n            strength = len(extension) - len(extension.upper())\n        if strength >= len(strongest_extension):\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
        "test": "assert         Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])!= 'Slices.StuFfed'"
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return (a.find(b)!= -1 or b in a + b)\n",
        "test": "assert     cycpattern_check(\"waterbottle\", \"erbottlewat\") == True"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num//10\n    return (even, odd)\n",
        "test": "assert     even_odd_count(1) == (0, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert isinstance(number, int)\n    assert number > 0 and number <= 1000\n",
        "test": "assert     int_to_mini_roman(4) == \"IV\""
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    #return False\n    return math.isclose(math.pow(a, 2) + math.pow(b, 2), math.pow(c, 2))\n",
        "test": "assert     right_angle_triangle(5, 4, 4) == False, \"Incorrect output\""
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_word = word\n    return max_wor",
        "test": "assert "
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    if number < 0:\n        number = 0\n    if need < 0:\n        need = 0\n    if remaining < 0:\n        remaining = 0\n    \n    remaining -= need\n    number += need\n    \n    if remaining < 0:\n        remaining = 0\n        number -= need\n    \n    return [number, remaining]\n",
        "test": "assert     eat(0, 0, 1000) == [0, 1000]"
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '//':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"+\"], [2,3]) == 5"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return s\n",
        "test": "assert     solve(\"To be or not to be\") == \"To be or not to be\""
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if text == '':\n        return None\n    elif text == None:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert "
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return [x for x in range(a, b+1) if x%2 == 0]\n",
        "test": "assert     generate_integers(2, 4) == [2, 4], 'incorrect'"
    }
]