[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0, 1, 2, 3], 0.2) is False, 'incorrect'",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    result = []\n    new_list = []\n    index = 0\n    while index < len(paren_string):\n        curr_char = paren_string[index]\n        if curr_char == '(':\n            if paren_string[index + 1]!= ')':\n                new_list.append(curr_char)\n                index += 1\n            else:\n                new_list.append(curr_char)\n                new_list.append(')')\n                index += 2\n        else:\n            new_list.append(curr_char)\n            index += 1\n    result.append(''.join(new_list))\n    return result\n",
        "test": "assert     separate_paren_groups(\"(this())\") == [\"(this())\"]",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    # TODO: Decide if it should be an int or float\n    return number - int(number)\n",
        "test": "assert     truncate_number(0.0) == 0.0",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return operations[-1] <= 0\n",
        "test": "assert     below_zero([1,2,3]) == False",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    numbers_sum = 0\n    for i in numbers:\n        numbers_sum += abs(i - sum(numbers) / len(numbers))\n    return numbers_sum / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1, 2, 3, 4]) == 0.75",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    result = [delimeter] * (len(numbers) - 1)\n    result += numbers\n    return result\n",
        "test": "assert intersperse([], 3) == [], \"Should be []\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    nested_parens = [1, 1]  # nesting levels of parentheses, starting from 1.\n    nested_parens_index = [[0, 1], [0, 1]]  # initial index of each group of parentheses\n    # A group of parentheses starts at the first character and ends when we encounter a closing bracket\n    # or when we encounter an opening bracket with a higher nesting level.\n    # When we encounter an opening bracket of higher level, we record its index in nested_parens and\n    # increase its nesting level by 1.\n    # When we encounter a closing bracket, we check if the current group is nested inside an opening bracket\n    # of higher nesting level. If yes, we decrement the nesting level by 1. If not, we record its index in\n    # nested_parens and reset the nesting level.\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            nested_parens_index[0].append(index)\n            nested_parens[0] += 1\n        elif char == ')':\n            # If closing bracket matches an opening bracket of higher nesting level,\n            # we decrease the nesting level by 1.\n            if nested_parens[0] > nested_parens_index[0][-1]:\n                nested_parens[0] -= 1\n            # If closing bracket is the last character in the string, then it is not nested\n            # inside any opening bracket. We record its index in nested_parens and reset the nesting level.\n            else:\n                nested_parens_index[0].append(index)\n                nested_parens[0] = 1\n        elif char == '{':\n            nested_parens_index[1].append(index)\n            nested_parens[1] += 1\n        elif char == '}':\n            # If closing bracket matches an opening bracket of higher nesting level,\n            # we decrease the nesting level by 1.\n            if nested_parens[1] > nested_parens_index[1][-1]:\n                nested_parens[1] -= 1\n            # If closing bracket is the last character in the string, then it is not nested\n            # inside any opening bracket. We record its index in nested_parens and reset the nesting level.\n            else:\n                nested_parens_index[1].append(index)\n                nested_parens[1] = 1\n    # We return a list of the last index of each group of parentheses\n    return nested_parens_index[0][:-1] + nested_parens_index[1][:-1]\n",
        "test": "assert     parse_nested_parens(\"()\") == 0",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"tiger\", \"lion\", \"lionel\", \"cat\", \"dog\"], \"lion\") == [\"lion\", \"lionel\"]",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        else:\n            max_list.append(max(numbers[:i+1]))\n    return max_list\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    length = len(string)\n    if length == 0:\n        return string\n    if length == 1:\n        return string + string\n    if is_palindrome(string):\n        return string\n    # Find the longest palindromic substring\n    palindromic_substring = find_longest_palindromic_substring(string)\n    if palindromic_substring:\n        palindromic_substring = palindromic_substring[0]\n    else:\n        return string\n    palindromic_substring_index = string.index(palindromic_substring)\n    # Get the beginning of the string\n    palindromic_substring_prefix = string[:palindromic_substring_index]\n    # Get the ending of the string\n    palindromic_substring_suffix = string[palindromic_substring_index:]\n    # Reverse the string prefix\n    palindromic_substring_prefix = palindromic_substring_prefix[::-1]\n    # Concatenate the prefix and suffix and return the result\n    return palindromic_substring_prefix + palindromic_substring + palindromic_substring_suffix\n",
        "test": "assert     make_palindrome(\"racecar\") == \"racecar\", \"Test 1\"",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    result = []\n    for i in range(len(a)):\n        result.append(int(a[i]) ^ int(b[i]))\n    return \"\".join(str(e) for e in result)\n",
        "test": "assert     string_xor('101010', '101010') == '111011'",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    strings.sort(key=len, reverse=True)\n    return strings[0] if strings else None\n",
        "test": "assert longest(['aaaaaaaaaa', 'bbbbbbbbbb', 'ccccccccccc']) == 'ccccccccccc'",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(45, 18) == 9",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    \n    # string to store the generated string\n    string = \"\"\n    \n    # generating the string\n    for i in range(n + 1):\n        string += str(i)\n        if i < n:\n            string += \" \"\n            \n    return string\n    \n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return len(set([char.lower() for char in string]))\n",
        "test": "assert     count_distinct_characters(\"abcd\") == 4",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    parsed_music = []\n    current_beat = 0\n    while current_beat < len(music_string):\n        if music_string[current_beat] == '.':\n            current_beat += 2\n            parsed_music.append(1)\n        elif music_string[current_beat] == '|':\n            current_beat += 2\n            parsed_music.append(2)\n        elif music_string[current_beat] == 'o':\n            current_beat += 1\n            parsed_music.append(4)\n        else:\n            current_beat += 2\n            parsed_music.append(2)\n    return parsed_music\n",
        "test": "assert     parse_music('oo') == [4, 4], 'Wrong output for parse_music(\"oo\")'",
        "num_ids": 2000,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    n = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            j = 0\n            while i + j < len(string) and j < len(substring) and string[i + j] == substring[j]:\n                j += 1\n            if j == len(substring):\n                n += 1\n                i += j\n                continue\n        i += 1\n    return n\n",
        "test": "assert     how_many_times(\"the word is there\", \"not\") == 0",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    if len(numbers) == 0:\n        return numbers\n    numbers = numbers.split(' ')\n    numbers = list(filter(None, numbers))\n    return''.join(sorted(numbers))\n",
        "test": "assert     sort_numbers('one') == 'one'",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # define our two closest numbers\n    min_number = numbers[0]\n    max_number = numbers[0]\n    # traverse through all the numbers and check which is the smallest and which is the largest\n    for number in numbers:\n        if number < min_number:\n            min_number = number\n        if number > max_number:\n            max_number = number\n    # return the two closest\n    return (min_number, max_number)\n",
        "test": "assert     find_closest_elements([0.0]) == (0.0, 0.0)",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return [val for val in values if isinstance(val, int) and not isinstance(val, bool)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Filter integers\"",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello\") == 5",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    largest_divisor_value = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor_value = i\n    return largest_divisor_value\n",
        "test": "assert     largest_divisor(25) == 5",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    if n < 2:\n        return []\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert     remove_duplicates([1, 1, 1, 1]) == [1]",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    res = \"\"\n    for char in string:\n        if char.islower():\n            res += char.upper()\n        else:\n            res += char.lower()\n    return res\n",
        "test": "assert     flip_case(\"Python\") == \"pYTHON\"",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"])     == \"HelloWorld\", \"Should be HelloWorld\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"b\") ==     [\"banana\", \"berry\"]",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     [] == get_positive([])",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if n <= 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if len(xs) % 2:\n        raise ValueError('find_zero requires even number of coefficients')\n",
        "test": "assert     poly([1,1], 1) == 2",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    \n    return sorted([i for i in l if i % 3!= 0]) + [j for j in l if j % 3 == 0]\n",
        "test": "assert     sort_third([3,7,1,2,4,9,8]) == [1,2,3,4,7,8,9], \\",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return sorted(set(l))\n",
        "test": "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if l:\n        max_num = l[0]\n        for n in l:\n            if n > max_num:\n                max_num = n\n        return max_num\n    else:\n        return None\n",
        "test": "assert     max_element([1, 2, 3]) == 3",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if \"7\" in str(num):\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(101) == 2",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    return [i for _, i in sorted((i, j) for i, j in enumerate(l))]\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cyclic groups.\n    groups = [group[::-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    if n == 1:\n        return 2\n    a = 1\n    b = 1\n    for i in range(n-1):\n        a, b = b, a + b\n    while not is_prime(a):\n        a = a + 2\n    return a\n",
        "test": "assert     prime_fib(50) == 15989713",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    seen = set()\n    for i in l:\n        if i not in seen:\n            seen.add(i)\n        else:\n            if i + i in seen and i + i + i in seen:\n                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,-1,1,-1,1]) == False",
        "num_ids": 2310,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    assert n > 0\n    collisions = 0\n    cars = [tuple(range(n))]\n    for _ in range(n):\n        cars.append(tuple(reversed(cars[-1])))\n    # for the n cars, there are n-1 collisions\n    for c in cars:\n        for i in range(n-1):\n            if c[i] == c[i+1]:\n                collisions += 1\n    return collisions\n",
        "test": "assert     car_race_collision(3) == 0",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    l_set = set(l)\n    for i in l_set:\n        if -i in l_set:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, -2, 1]) == True",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    assert 2 <= base <= 16, 'base must be between 2 and 16'\n    # base 10 representation of x\n    number = int(x)\n    # base representation of x\n    res = ''\n    # convert to base 10\n    while number > 0:\n        # get last digit\n        digit = number % base\n        # append to result\n        res += str(digit)\n        # divide by base\n        number //= base\n    # return result in string format\n    return res[::-1]",
        "test": "assert     change_base(1234, 10) == '1234'",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(1, 5) == 2.5, 'Not correct'",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if n <= 3:\n        return n\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    return l[len(l) // 2]\n",
        "test": "assert     median([1,2,3,4,5]) == 3",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"aibohphobia\") == True, \"is_palindrome('aibohphobia')\"",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    if n == 0:\n        return 1\n    return (2**n) % p\n",
        "test": "assert     modp(0, 1) == 1",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert ",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    for l in text:\n        if l not in vowels:\n            result += l\n    return result\n",
        "test": "assert     remove_vowels('hello') == 'hll','remove_vowels: wrong result for \"hello\"'",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return all(i <= t for i in l)\n",
        "test": "assert     below_threshold([1,2,3], 1) == False, \"1 wrong\"",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3, \"add(1, 2) should be 3\"",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars('abc', 'cde') == False, 'incorrect'",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    # return a_n\n    # if n < 0:\n    #     return\n    # elif n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fib(n-1) + fib(n-2)\n    if n < 0:\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1, \"Fib(1) should be 1\"",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert not correct_bracketing(brackets = \"<<<<\")",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5])",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common([], []) == []",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(7) == 7",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "test": "assert ",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    count_open_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count_open_brackets += 1\n        elif count_open_brackets > 0:\n            count_open_brackets -= 1\n        else:\n            return False\n    return count_open_brackets == 0\n",
        "test": "assert not correct_bracketing(\"([]))\")",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    derivative = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        derivative[i] = xs[i + 1] * (i + 1)\n    return derivative\n",
        "test": "assert     [0, 2, 6, 12, 20] == derivative([1, 2, 3, 4, 5, 6])",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    s = s.lower()\n    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\") + s.count(\"y\")\n",
        "test": "assert     vowels_count(\"\") == 0, \"Empty string\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
        "test": "assert     circular_shift(\"1212\", 2) == '2112'",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    sums = 0\n    for i in range(len(s)):\n        if 'A' <= s[i] <= 'Z':\n            sums += ord(s[i])\n    return sums\n",
        "test": "assert     digitSum(\"\")             == 0, \"test case #2 failed\"",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    a = s.split(' ')\n    if a[0] == '0':\n        return 0\n    if n < int(a[0]):\n        return n\n    return n - int(a[0])\n",
        "test": "assert     fruit_distribution(\"5 apples and 3 oranges\", 7)     == 2",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n    else:\n        return [",
        "test": "assert ",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    freq = {}\n    \n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    freq_max = max(freq.values())\n    freq_keys = [k for k,v in freq.items() if v == freq_max]\n    \n    if freq_max == 1:\n        return -1\n    else:\n        return max(freq_keys)\n",
        "test": "assert search([5]) == -1",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)",
        "test": "assert     triangle_area(10, 20, 20) == 40",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if q == list(reversed(q)) and sum(q)<=w:\n        return True\n    else:\n        return False",
        "test": "assert     will_it_fly([1,1,1,1,1], 2) == False",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    length = len(arr)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if arr[i] == arr[j] and i!= j:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n",
        "test": "assert     smallest_change( [1, 2, 3, 4, 5, 3, 2, 1] ) == 3, \"Should be 3\"",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    if len(lst1) > len(lst2):\n        lst = lst1\n        lst2 = lst2\n    elif len(lst2) > len(lst1):\n        lst = lst2\n    else:\n        lst = lst1\n    print(lst, lst2)\n    return [word for word in lst if len(word) < len(lst2)]\n",
        "test": "assert     total_match(['ba', 'bb', 'bc'], ['aa', 'ab', 'bb', 'bb', 'bc']) ",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    \n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(12) == False, \"is_multiply_prime(12) should return False\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if x == n or x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        x = int(x)\n        return x % n == 0\n",
        "test": "assert     is_simple_power(2, 3) == False",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return a>0 and round(a**(1/3))**3==a\n",
        "test": "assert     iscube(27) == True",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    count = 0\n    for i in range(len(num)):\n        try:\n            if int(num[i:i+2], 16) in primes:\n                count += 1\n        except:\n            return count\n    return count\n",
        "test": "assert     hex_key('') == 0",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n",
        "test": "assert     decimal_to_binary(5) == '0db101'",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    hashmap = {}\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return True\n        else:\n            if s[i] not in hashmap:\n                hashmap[s[i]] = 1\n            else:\n                hashmap[s[i]] += 1\n    return False\n",
        "test": "assert     is_happy(\"d\") == False",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    \n    return [('A+' if x >= 4.0 else 'A' if x >= 3.7 else 'A-' if x >= 3.3 else 'B+' if x >= 3.0 else 'B' if x >= 2.7 else 'B-' if x >= 2.3 else 'C+' if x >= 2.0 else 'C' if x >= 1.7 else 'C-' if x >= 1.3 else 'D+' if x >= 1.0 else 'D' if x >= 0.7 else 'D-' if x >= 0.0 else 'E' if x >= 0 else 'F') for x in grades]\n",
        "test": "assert     numerical_letter_grade([4.0]) == [\"A+\"]",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    return len(string) in [x for x in range(2,int(len(string)/2) + 1) if len(string) % x == 0]\n",
        "test": "assert     prime_length('hello') == False, 'incorrect for string \"hello\"'",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    count = 0\n    if n == 1:\n        count = 1\n    else:\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == \"1\" or str(i)[-1] == \"1\":\n                count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1)     == 1",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    ans = []\n    while N > 0:\n        ans.append(N % 2)\n        N = N // 2\n    \n    return \"\".join([str(num) for num in ans[::-1]])\n    \n",
        "test": "assert     solve(10) == '1010'",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    print([x for x in lst if x%2!=0 and lst.index(x)%2==1])\n",
        "test": "assert     add([1,1,2,3]) == None",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))\n",
        "test": "assert     anti_shuffle('I say so') =='say Ies'",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    \n    result = []\n    rows = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n        rows.append((i, len(row)))\n    \n    result = sorted(result, key=lambda x: x[0])\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    result = sorted(result, key=lambda x: x[1], reverse=True)\n    \n    for i, (row, num_cols) in enumerate(rows):\n        result.insert(i, (row, 0))\n        for j in range(num_cols):\n            result.insert(i+1, (row, j+1))\n    \n    return result\n",
        "test": "assert     [(2, 1), (3, 1), (4, 1)] == get_row(lst, 2)",
        "num_ids": 1992,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    return sorted(array)\n",
        "test": "assert     (sorted(sort_array([5, 3, 2, 8, 1, 4])) == [1, 2, 3, 4, 5, 8])",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    def encrypt_helper(letter):\n        \"\"\"Create a helper function for encrypt. This function takes \n        a letter in the string as an argument and returns the letter \n        shifted two places down the alphabet\"\"\"\n        \n        lower_case_letter = letter.lower()\n        if lower_case_letter in alphabet:\n            new_position = alphabet.index(lower_case_letter) + 2\n            return alphabet[new_position]\n        else:\n            return letter\n        \n    encrypted_string = ''\n    for letter in s:\n        encrypted_string += encrypt_helper(letter)\n        \n    return encrypted_string\n",
        "test": "assert     encrypt(\"\") == \"\"",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if lst == []:\n        return None\n    a = lst\n    b = []\n    for i in range(len(a)):\n        if i == 0:\n            b = a[1:]\n        else:\n            b = b[:i] + a[i+1:]\n    c = b\n    d = min(b)\n    for i in range(len(c)):\n        if c[i] == d:\n            return c[i]\n    return None\n",
        "test": "assert     next_smallest([7, 8, 10, 11]) == 8",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    boredoms = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert     is_bored(\"This is my best friend and he is playing\") == False, \"False\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    \n  \n    if x == y or x == z or y == z:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n",
        "test": "assert     any_int(1,2,3) == False, 'False'",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    pass\n",
        "test": "assert     encode(\"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.\") == \"THQUEIKCBRWKFZRNOSJJEDMPRTVLB\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    solution = 0\n    for elem in lst:\n        if isPrime(elem):\n            solution = solution + sum(list(str(elem)))\n    return solution\n",
        "test": "assert     skjkasdkd([21, 43, 32, 32, 55, 66, 43, 46, 32, 43]) == 32",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if (type(key)!= str):\n                return False\n            elif (key.isupper()):\n                continue\n            else:\n                return False\n        return True\n        \ndef test_dict_case():\n    \"\"\"\n    Some test cases for check_dict_case\n    \"\"\"\n    print(\"Testing check_dict_case with the first dictionary:\")\n    first_dict = {\"a\":\"apple\", \"b\":\"banana\"}\n    print(check_dict_case(first_dict))\n",
        "test": "assert     check_dict_case({}) == False, 'empty dict'",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # initialize list of primes up to n\n    primes = []\n    # check if n is prime\n    if n >= 2:\n        # add 2 to the list of primes\n        primes.append(2)\n    # check if n is even\n    if n % 2 == 0:\n        # if it is even, divide it by 2\n        n = n / 2\n    else:\n        # if it is odd, continue to the next iteration\n        pass\n    # loop until n is greater than or equal to 2\n    while n > 1:\n        # check if n is prime\n        if n >= 2:\n            # if it is prime, add to the list of primes\n            primes.append(n)\n        # check if n is even\n        if n % 2 == 0:\n            # if it is even, divide it by 2\n            n = n / 2\n        else:\n            # if it is odd, check if it is prime\n            for i in range(2, int(math.sqrt(n)) + 1):\n                # if it is not prime, divide by i and n must be odd\n                if n % i == 0:\n                    # if it is not even, set n to the next odd integer\n                    if n % 2 == 0:\n                        n = (n + 1) / 2\n                    # if it is even, divide it by i and n must be odd\n                    else:\n                        n = n / i\n                        break\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    product = a*b\n    digits = []\n    for x in str(product):\n        if x.isdigit():\n            digits.append(int(x))\n    return digits[0]\n",
        "test": "assert     multiply(5, 0) == 0",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper():\n            count += 1\n    return count",
        "test": "assert     count_upper(\"i ntYpeOf uNdErFeR tExT enShOeS.\") == 6",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(14) == 14",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    return list(range(n, n * 2, n + 1))\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return s.replace(\" \", \"\").replace(\",\", \" \").split()\n",
        "test": "assert     \"This,is,a,test\".split(',') == ['This', 'is', 'a', 'test']",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if x >= y:\n        return -1\n    else:\n        for i in range(y,x+1):\n            if i%2==0 and i<=x and i>=y:\n                return i\n        return -1\n",
        "test": "assert     choose_num(5, 1) == -1, \"Test 2 failed\"",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if n < m:\n        return -1\n    else:\n        return int(bin(int((n+m) / 2)), 2)\n",
        "test": "assert ",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    return sorted([n for n in x if not any([int(d) % 2 for d in str(n)])])\n",
        "test": "assert     unique_digits([6, 34, 24, 4]) == [4, 6, 24]",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    arr.sort(reverse=True)\n    ans = []\n    for i in arr:\n        if 1 <= i <= 9:\n            ans.append(str(i))\n    for i in range(len(ans)):\n        ans[i] = num_to_name[int(ans[i])]\n    return ans\n",
        "test": "assert ",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    return (n - 1) // 2, (n + 1) // 2\n",
        "test": "assert     even_odd_palindrome(5) == (2, 3)",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return len([i for i in arr if i > 0 and sum([int(j) for j in str(i)]) > 0])\n",
        "test": "assert     count_nums([]) == 0, \"a\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    n = len(arr)\n    if n < 1:\n        return True\n    \n    curr_max = arr[0]\n    prev_max = arr[0]\n    \n    for i in range(1,n):\n        if arr[i] > curr_max:\n            prev_max = curr_max\n            curr_max = arr[i]\n        elif arr[i] > prev_max:\n            prev_max = arr[i]\n        else:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([8, 7, 6, 5, 4, 3, 2, 1]) == False",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    for i in range(len(lst1)):\n        for j in range(i+1,len(lst1)):\n            if lst1[i]+lst1[j] == lst2[i] + lst2[j]:\n                return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == \"NO\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if len(test) == 0:\n        return {}\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    # return hist\n    return max(hist, key=lambda x: hist[x])\n",
        "test": "assert ",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    new_s=s.replace(c,'')\n    if new_s == new_s[::-1]:\n        return new_s,True\n    else:\n        return new_s,False",
        "test": "assert     reverse_delete('world', 'world') == ('', True)",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    # Replace the follwing two lines with your code\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if j in ['0', '2', '4', '6', '8']:\n                continue\n            else:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \"of the \" + str(i+1) + \"input.\")\n    return result\n",
        "test": "assert ",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # time complexity: O(n^2)\n    # space complexity: O(1)\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        left = i\n        right = i + 1\n        while right < len(nums) + 1:\n            curr_sum = sum(nums[left:right])\n            min_sum = min(min_sum, curr_sum)\n            right += 1\n    return min_sum\n",
        "test": "assert     minSubArraySum([2, 3, 1, 4]) == 1, \"Wrong\"",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    m = math.floor(capacity)\n    dp = [[[0 for _ in range(m + 1)] for _ in range(cols)] for _ in range(rows)]\n    dp[0][0][m] = 1\n    for row in range(1, rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                for i in range(m + 1):\n                    dp[row][col][i] = dp[row - 1][col][i]\n            else:\n                dp[row][col][0] = dp[row - 1][col][0] + dp[row - 1][col][m]\n                for i in range(1, m + 1):\n                    dp[row][col][i] = dp[row - 1][col][i - 1] + dp[row - 1][col][i]\n    print(dp)\n    return dp[-1][-1][0]\n",
        "test": "assert     max_fill([[0, 1, 0], [0, 1, 0]], 2) == 0",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([5,1,0,1,2]) == [0,1,1,2,5]",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return [w for w in s.split() if len(w) == n and not has_non_vowel_letter(w)]\n",
        "test": "assert     select_words('', 1) == []",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    word = word.lower()\n    for i in range(1, len(word)):\n        if word[-i] in 'aeiou' and word[-i - 1] not in 'aeiou':\n            return word[-i]\n    return ''\n",
        "test": "assert     get_closest_vowel('ABCD') == ''",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if lst[0] == ')' or lst[-1] == '(':\n        return 'No'\n    lst = lst[1:-1]\n    while lst:\n        if '()' in lst:\n            lst.remove('()')\n            lst.remove('()')\n        else:\n            break\n    if len(lst) == 0:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['(', ')', ')', '(', ')']) == 'No'",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return sorted(arr)[::-1][:k]\n",
        "test": "assert     maximum([10, 20, 30, 40], 1) == [40]",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    \n    even = []\n    odd = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return sum(odd)\n",
        "test": "assert     solution([2,3,3,4,5]) == 2, \"Test 4 Failed\"",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    s = 0\n    for i in range(k):\n        s += arr[i]\n    return s\n",
        "test": "assert     add_elements([0, 0, 0, 0], 0) == 0",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    def is_odd(n):\n        return n % 2 == 1\n    \n    odd_numbers = []\n    collatz_sequence = collatz(n)\n    for item in collatz_sequence:\n        if is_odd(item):\n            odd_numbers.append(item)\n    return odd_numbers\n",
        "test": "assert ",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return False\n",
        "test": "assert     valid_date(\"13-11-2019\") == False, \"The number of days should be between 1 and 29\"",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    # Your code here\n    return txt.split()\n",
        "test": "assert     split_words('a b c') == ['a', 'b', 'c']",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    \n    # Check if list is empty\n    if len(lst) == 0:\n        return False\n    \n    # Check if list has one element\n    if len(lst) == 1:\n        return True\n    \n    # Check if list is sorted\n    if lst == sorted(lst):\n        return True\n    \n    # If list is not sorted, return False\n    return False\n",
        "test": "assert     is_sorted([1, 3, 5, 6, 2, 4]) == False",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    # YOUR CODE HERE\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or end2 < start1:\n        return \"NO\"\n    if end1 > start2 and start2 < end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 2), (3, 4)) == \"NO\"",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = [1, 1, -1, -1]\n    res = 1\n    for x in arr:\n        res *= x if x in signs else 1\n    return sum(abs(x) for x in arr) * res\n",
        "test": "assert     prod_signs([]) is None",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    if not grid or not grid[0]:\n        return []\n",
        "test": "assert ",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    l = [1, 3]\n    if n == 1: return l\n    for i in range(2, n + 1):\n        l.append(l[i - 1] + l[i - 2] + l[i - 3])\n    return l\n",
        "test": "assert ",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    result = 1\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        if digit % 2!= 0:\n            result *= digit\n    return result\n",
        "test": "assert     digits(8) == 1",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    bracket_list = []\n    for char in string:\n        if char == '[':\n            bracket_list.append(char)\n        elif char == ']':\n            if len(bracket_list) == 0:\n                return False\n            else:\n                bracket_list.pop()\n    if len(bracket_list) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_nested(\"[[]]\") == True",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    ans = 0\n    for i in lst:\n        if i < 0:\n            i = int(i) ** 2\n        else:\n            i = int(i)\n        ans += i\n    return ans\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"4\") == False, \"Wrong output for check_if_last_char_is_a_letter('4')\"",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    curr_max = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        if arr[i] < curr_max:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([9]) == -1",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    try:\n        a = max(filter(lambda x: x < 0, lst))\n        b = min(filter(lambda x: x > 0, lst))\n        return a, b\n    except ValueError:\n        return None, None",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    try:\n        return max(a, b)\n    except:\n        return None\n",
        "test": "assert     compare_one(3, 2.5) == 3",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    nums = [i for i in range(1, n // 2) if i % 2 == 0]\n    if len(nums)!= 4:\n        return False\n    return sum(nums) == n\n",
        "test": "assert     is_equal_to_sum_even(150) == False",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return 1 if n == 1 else n * special_factorial(n - 1)",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    spaces ='' * len(text)\n    if len(text) == 0:\n        return text\n    if len(text) < len(spaces):\n        spaces = spaces[:len(text)]\n    if len(text) > len(spaces):\n        spaces = spaces[:-1]\n    return text.replace(' ', '_').replace('  ', '_').replace('  ', '_').replace('  ', '_')\n    \n",
        "test": "assert     fix_spaces('asd      asd') == 'asd_-asd'",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # YOUR CODE HERE\n    if len(file_name) <= 3 or len(file_name.split(\".\")[0]) <= 1:\n        return \"No\"\n    if file_name.count(\".\") == 0:\n        return \"No\"\n    dot_index = file_name.find(\".\")\n    if file_name[dot_index + 1:].lower() not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    if file_name[:dot_index].lower() == \"\":\n        return \"No\"\n    if not file_name[:dot_index].isalpha():\n        return \"No\"\n    return \"Yes\"\n",
        "test": "assert     file_name_check(\"abc.exe.txt\") == \"No\", \"contain a valid name\"",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    sum_lst = []\n    if len(lst) == 0:\n        return 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0:\n            sum_lst.append(lst[i] ** 2)\n        elif i % 4 == 0 and i % 3!= 0:\n            sum_lst.append(lst[i] ** 3)\n        else:\n            sum_lst.append(lst[i])\n    return sum(sum_lst)",
        "test": "assert     sum_squares([2, 2, 2]) == 8",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    return''.join([word for word in sentence.split(' ') if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199] ])\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    x, n = int(x.split(\"/\")[0]), int(n.split(\"/\")[0])\n    if n == 1: return True\n    if x % n!= 0: return False\n    if n < 1: return False\n    return simplify(x//n, n)\n",
        "test": "assert     (simplify(\"2/4\", \"3/5\") == False)",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # TODO\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n",
        "test": "assert     order_by_points([54, 96, 23]) == [23, 54, 96]",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\":\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    i = 0\n    count = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            k = j + 1\n            while k < n:\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n                k += 1\n            j += 1\n        i += 1\n    return count\n",
        "test": "assert     get_max_triples(2) == 0",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        new_planets = planets[planet1_index+1:planet2_index]\n        return tuple(new_planets)\n    else:\n        return ()\n",
        "test": "assert     bf('Earth', 'Mercury') == ()",
        "num_ids": 2750,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n",
        "test": "assert     sorted_list_sum(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd'], 'error'",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    if n == 1:\n        return y\n    elif n == 2:\n        return x\n    elif n == 3:\n        return x\n    elif n == 4:\n        return y\n    elif n == 5:\n        return x\n    elif n == 6:\n        return y\n    elif n == 7:\n        return x\n    elif n == 8:\n        return y\n    elif n == 9:\n        return x\n    elif n == 10:\n        return y\n    elif n == 11:\n        return x\n    elif n == 12:\n        return y\n    elif n == 13:\n        return x\n    elif n == 14:\n        return y\n    elif n == 15:\n        return x\n    elif n == 16:\n        return y\n    elif n == 17:\n        return x\n    elif n == 18:\n        return y\n    elif n == 19:\n        return x\n    elif n == 20:\n        return y\n    elif n == 21:\n        return x\n    elif n == 22:\n        return y\n    elif n == 23:\n        return x\n    elif n == 24:\n        return y\n    elif n == 25:\n        return x\n    elif n == 26:\n        return y\n    elif n == 27:\n        return x\n    elif n == 28:\n        return y\n    elif n == 29:\n        return x\n    elif n == 30:\n        return y\n    elif n == 31:\n        return x\n    elif n == 32:\n        return y\n    elif n == 33:\n        return x\n    elif n == 34:\n        return y\n    elif n == 35:\n        return x\n    elif n == 36:\n        return y\n    elif n == 37:\n        return x\n    elif n == 38:\n        return y\n    elif n == 39:\n        return x\n    elif n == 40:\n        return y\n    elif n == 41:\n        return x\n    elif n == 42:\n        return y\n    elif n == 43:\n        return x\n    elif n == 44:\n        return y\n    elif n == 45:\n        return x\n    elif n == 46:\n        return y\n    elif n == 47:\n        return x\n    elif n == 48:\n        return y\n    elif n == 49:\n        return x\n    elif n == 50:\n        return y\n    elif n == 51:\n        return x\n    elif n == 52:\n        return y\n    elif n == 53:\n        return x\n    elif n == 54:\n        return y\n    elif n == 55:\n        return x\n    elif n == 56:\n        return y\n    elif n == 57:\n        return x\n    elif n == 58:\n        return y\n    elif n == 59:\n        return x\n    elif n == 60:\n        return y\n    elif n == 61:\n        return x\n    elif n == 62:\n        return y\n    elif n == 63:\n        return x\n    elif n == 64:\n        return y\n    elif n == 65:\n        return x\n    elif n == 66:\n        return y\n    elif n == 67:\n        return x\n    elif n == 68:\n        return y\n    elif n == 69:\n        return x\n    elif n == 70:\n        return y\n    elif n == 71:\n        return x\n    elif n == 72:\n        return y\n    elif n == 73:\n        return x\n    elif n == 74:\n        return y\n    elif n == 75:\n        return x\n    elif n == 76:\n        return y\n    elif n == 77:\n        return x\n    elif n == 78:\n        return y\n    elif n == 79:\n        return x\n    elif n == 80:\n        return y\n    elif n == 81:\n        return x\n    elif n == 82:\n        return y\n    elif n == 83:\n        return x\n    elif n == 84:\n        return y\n    elif n == 85:\n        return x\n    elif n =",
        "test": "assert     x_or_y(3, 2, 2) == 2",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    total = 0\n    for num in lst:\n        if num < 0 or num % 1!= 0:\n            continue\n        total += (num ** 2)\n    return total\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return [0 if game[i]==guess[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]",
        "num_ids": 1635,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    return '{}.{}'.format(class_name, extensions[0])\n",
        "test": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    #a=input()\n    #b=input()\n    #print(a,b)\n    if len(b) > len(a):\n        return False\n    #print(a,b)\n    x = a+a\n    #print(x)\n    if b in x:\n        return True\n    return False\n",
        "test": "assert     cycpattern_check('abcd', 'abcd') == True",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(123) == (1,2), \"Wrong output for even_odd_count(123)\"",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    numeral_map = (('M', 1000),\n                   ('CM', 900),\n                   ('D', 500),\n                   ('CD', 400),\n                   ('C', 100),\n                   ('XC', 90),\n                   ('L', 50),\n                   ('XL', 40),\n                   ('X', 10),\n                   ('IX', 9),\n                   ('V', 5),\n                   ('IV', 4),\n                   ('I', 1))\n    result = ''\n    for numeral, integer in numeral_map:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result\n",
        "test": "assert     int_to_mini_roman(1) == 'I'",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "test": "assert     right_angle_triangle(3, 4, 5.9) == False",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # your code here\n    return max(words, key = lambda word: len(set(word)))\n",
        "test": "assert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'rainbow'",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    \n    return [need, remaining - need] if remaining >= need else [number, 0]",
        "test": "assert     eat(0, 0, 10) == [0, 10]",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    expression = ''\n    operand_index = 0\n    while operand_index < len(operand):\n        if len(operator) == 0:\n            break\n        expression += str(operand[operand_index])\n        if operator[0] == '+':\n            expression +='+ '\n        elif operator[0] == '-':\n            expression +='- '\n        elif operator[0] == '*':\n            expression +='* '\n        elif operator[0] == '//':\n            expression +='// '\n        elif operator[0] == '**':\n            expression +='** '\n        operator = operator[1:]\n        operand_index += 1\n    expression += str(operand[operand_index])\n    return eval(expression)\n",
        "test": "assert     do_algebra([\"+\", \"+\"], [1, 2, 3]) == 6",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    new_string = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                i = i.lower()\n            else:\n                i = i.upper()\n        new_string += i\n    return new_string\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    import hashlib\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert ",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return list(range(a + 1, b, 2))\n",
        "test": "assert ",
        "num_ids": 262,
        "indeed": false
    }
]