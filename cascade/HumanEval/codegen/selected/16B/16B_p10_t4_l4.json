[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if j!= i and abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.2) == True"
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "    groups = []\n    stack = []\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            try:\n                stack.pop()\n            except IndexError:\n                print(f'Separate groups can not be separated at {i}th index')\n                break\n        if not stack:\n            groups.append(paren_string[:i + 1])\n    return groups\n",
        "test": "assert     separate_paren_groups(\"((()))\") == [\"((()))\"]"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(1.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    return True if min(operations) < 0 else False\n",
        "test": "assert     below_zero([5, 5, 5, 0, 5, 5, 5, 0]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers) / len(numbers)), numbers)) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1, 1, 1, 1]) == 0, \"Should be 0\""
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    return [numbers[0]] + [delimeter] + list(numbers[1:-1]) + [numbers[-1]] if len(numbers) > 1 else []\n",
        "test": "assert     intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "    level = 0\n    index = 0\n    nested_list = []\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            level += 1\n        elif paren_string[index] == ')':\n            level -= 1\n        if level > 0:\n            nested_list.append(level)\n        index += 1\n    return nested_list\n",
        "test": "assert     parse_nested_parens(\"()()()()(((()((((()))()((()(()))))))))\")     == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 7,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return [x for x in strings if substring in x]\n",
        "test": "assert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"123\") == [\"123\"]"
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n",
        "test": "assert     sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
        "number": 9,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i + 1]))\n    return result\n",
        "test": "assert     rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]"
    },
    {
        "number": 10,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    string = string.lower()\n    i = len(string) - 1\n    palindrome_suffix = ''\n    while i >= 0:\n        if is_palindrome(string[i:]):\n            palindrome_suffix = string[i:]\n            break\n        i -= 1\n    if palindrome_suffix == '':\n        return string\n    palindrome_prefix = string[:i]\n    return palindrome_prefix + palindrome_suffix[::-1]\n",
        "test": "assert     is_palindrome('abba') == True"
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\""
    },
    {
        "number": 12,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    if len(strings) == 0:\n        return None\n    max_str = strings[0]\n    for str_ in strings:\n        if len(str_) > len(max_str):\n            max_str = str_\n    return max_str\n",
        "test": "assert     longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(6, 9) == 3"
    },
    {
        "number": 14,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes('') == []"
    },
    {
        "number": 15,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    string = \" \".join([str(i) for i in range(n + 1)])\n    return string\n",
        "test": "assert     string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    lowercase_string = string.lower()\n    return len(set(lowercase_string))\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3"
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    return [4 if i in ['o', '.'] else 2 if i == 'o|' else 1 for i in music_string.split(' ')]\n",
        "test": "assert     parse_music(\"o|\") == [2]"
    },
    {
        "number": 18,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    num = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            num += 1\n    return num\n",
        "test": "assert     how_many_times('python', 'n') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    numbers_list = []\n    for i in numbers.split(\" \"):\n        numbers_list.append(i)\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n",
        "test": "assert     sort_numbers('zero') == 'zero'"
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[2])\n",
        "test": "assert     find_closest_elements([20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0]) == (20.0, 20.0)"
    },
    {
        "number": 21,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    return [0.0 if min(numbers) == max(numbers) else (n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2]) == [0, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    return [x for x in values if type(x) == int]\n",
        "test": "assert     [1, 2, 3] == filter_integers([1, 2, 3])"
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    length = 0\n    for ch in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    max_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    if n == 1:\n        return [1]\n    elif n < 1:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert     [2, 3] == factorize(2*3)"
    },
    {
        "number": 26,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    # list comprehension, new_list = [element for element in list if element not in set(list)]\n    # print(set(numbers))\n    # print(new_list)\n    # return list(set(numbers))\n    result = []\n    for x in numbers:\n        if x not in result:\n            result.append(x)\n    return result\n",
        "test": "assert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate(['cat', 'dog']) == 'catdog', 'Expected catdog but received {}'.format(concatenate(['cat', 'dog']))"
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['bob','martha','michael', 'john', 'paul', 'julius', 'jenny', 'giampaolo','sandra', 'carl'], 'c') == ['carl']"
    },
    {
        "number": 30,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    return [number for number in l if number > 0]\n    \ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-4, -1]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, -5, -5, -3, -10]\n    \"\"\"\n    return [number for number in l if number < 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n < 9:\n        return True\n    k, l = 5, n ** 0.5\n    while k <= l:\n        if n % k == 0 or n % (k + 2) == 0:\n            return False\n        k += 6\n    return True\n    \n",
        "test": "assert     is_prime(2) == True"
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs)!= 0\n    xs = [x for x in xs if x!= 0]\n    xs.sort(reverse=True)\n    xs = [x if x!= 1 else -1 for x in xs]\n    x = xs[0]\n    return x\n",
        "test": "assert     poly([1, -3, 2], 1) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    sorted_list = []\n    for i in l:\n        if i % 3 == 0:\n            sorted_list.append(i)\n    for i in l:\n        if i % 3!= 0:\n            sorted_list.append(i)\n    sorted_list.sort()\n    return sorted_list\n",
        "test": "assert     sort_third([4, 4, 4, 4, 4]) == [4, 4, 4, 4, 4]"
    },
    {
        "number": 34,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([1, 1, 2, 3, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 35,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    # Time complexity O(n)\n    # Space complexity O(1)\n    if l == []:\n        return None\n    else:\n        max_number = l[0]\n        for item in l:\n            if item > max_number:\n                max_number = item\n        return max_number\n",
        "test": "assert     max_element([1, 3, 5, 2]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                counter += 1\n    return counter\n",
        "test": "assert     fizz_buzz(10) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    # create a list of even indicies\n    even_ind = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_ind.append(i)\n    # sort the list of even indicies\n    even_ind.sort()\n    # create new list where odd indicies have their values copied\n    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[even_ind[i // 2]])\n        else:\n            new_l.append(l[i])\n    return new_l\n",
        "test": "assert     sort_even([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]"
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    # split string into groups of 3 characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # get elements of each group and join them together.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"aaaa\")) == \"aaaa\", \"encoding is not correct\""
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "    if n < 1:\n        return None\n    if n < 3:\n        return 2\n    f = 1\n    l = 1\n    while n > 2:\n        f, l = l, f + l\n        n -= 1\n    prime = True\n    i = 2\n    while i < f:\n        if f % i == 0:\n            prime = False\n            break\n        i += 1\n    if prime:\n        return f\n    else:\n        return None\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    l.sort()\n    for i in range(len(l)-2):\n        if l[i] == 0:\n            continue\n        for j in range(i+1, len(l)-1):\n            if l[i] + l[j] == 0:\n                for k in range(j+1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 1, 0, -5]) is False"
    },
    {
        "number": 41,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    c = n\n    while c > 0:\n        c = c - 1\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (n-1)/2\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (n-1)/2\n    return int(n)\n",
        "test": "assert     car_race_collision(1) == 0, \"Wrong answer for car_race_collision(1)\""
    },
    {
        "number": 42,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    l.sort()\n    l_copy = l[:]\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l_copy)):\n            if l[i] + l_copy[j] == 0:\n                return True\n            l_copy[j] = l_copy[j] + 1\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Wrong output\""
    },
    {
        "number": 44,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if base == 10:\n        return str(x)\n    elif base == 2:\n        return \"\".join([str(int(i)) for i in bin(x)[2:]])\n    elif base == 8:\n        return \"\".join([str(int(i)) for i in oct(x)[2:]])\n    elif base == 16:\n        return \"\".join([str(int(i)) for i in hex(x)[2:]])\n    else:\n        return None\n",
        "test": "assert     change_base(10, 10) == \"10\", \"10 should be 10\""
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    return round(a * h / 2, 2)\n",
        "test": "assert     triangle_area(3,4) == 6, \"the area should be 6.\""
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    numbers = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        numbers.append(numbers[i-1] + numbers[i-2] + numbers[i-3] + numbers[i-4])\n    return numbers[n]\n",
        "test": "assert     fib4(0)         == 0,         'incorrect fib4(0)'"
    },
    {
        "number": 47,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    return l[len(l) // 2]\n",
        "test": "assert     median([1,2,3,4,5,6,7,8,9,10]) == 5.5"
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return text[::-1] == text\n",
        "test": "assert     is_palindrome('aba') == True"
    },
    {
        "number": 49,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    assert p > 2\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p % 2\n    elif n % 2 == 0:\n        return (2 * modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n - 1, p) ** 2) % p\n",
        "test": "assert     modp(0, 5) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\""
    },
    {
        "number": 51,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    vowels = \"aeiou\"\n    new_string = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\n",
        "test": "assert     remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return all(i <= t for i in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4], 5) == True"
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 2) == 4"
    },
    {
        "number": 54,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    s0 = set(s0)\n    s1 = set(s1)\n    return len(s0 - s1) == 0 and len(s1 - s0) == 0\n",
        "test": "assert     same_chars(\"foo\", \"bar\") == False"
    },
    {
        "number": 55,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    brackets = list(brackets)\n    bracket_stack = []\n    for i, bracket in enumerate(brackets):\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(bracket)\n                break\n    return not bracket_stack\n",
        "test": "assert not correct_bracketing(\">\")"
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    if len(l) < 2:\n        return True\n    return l == sorted(l) or l == sorted(l, reverse=True)\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5]) is True"
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    if not l1 or not l2: return []\n    s1, s2 = set(l1), set(l2)\n    return sorted(list(s1.intersection(s2)))\n",
        "test": "assert     set(common([\"a\", \"b\", \"c\", \"d\"], [\"c\", \"d\", \"e\"])) == set([\"c\", \"d\"]), \"Error\""
    },
    {
        "number": 59,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(4) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    \n    return sum(range(1, n+1))\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if not bracket_stack:\n                return False\n            bracket_stack.pop()\n    return not bracket_stack\n",
        "test": "assert not correct_bracketing(\"())(\")"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [i*xs[j+1] for j, i in enumerate(xs[:-1])]\n",
        "test": "assert     derivative([]) == []"
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    \n    return len(list(filter(lambda x: x in 'aeiou', list(s))))\n",
        "test": "assert     vowels_count('bee') == 2, 'bee'"
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:] + str(x)[:-shift][::-1]\n",
        "test": "assert     str(circular_shift(42, 1)) == '24'"
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    \n    digitSum = 0\n    for char in s:\n        if ord(char) in range(65,91):\n            digitSum += ord(char)\n    return digitSum",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    from re import findall\n    def remove_spaces(s):\n        \"\"\"\n        remove spaces from the input string\n        \"\"\"\n        return findall(\"[0-9]+\",s)[0]\n    def remove_comas(s):\n        \"\"\"\n        remove commas from the input string\n        \"\"\"\n        return s.replace(\",\", \"\")\n    def str_to_list(s):\n        \"\"\"\n        convert a string into list of strings \n        \"\"\"\n        return s.split(\" \")\n    def fruits_to_int(l):\n        \"\"\"\n        convert the list of strings into a list of ints\n        \"\"\"\n        return list(map(int, l))\n    def sum_list(l):\n        \"\"\"\n        return the sum of the list of ints\n        \"\"\"\n        return sum(l)\n    def str_to_int(s):\n        \"\"\"\n        convert a string into an int\n        \"\"\"\n        return int(s)\n    def mango_fruits(l,n):\n        \"\"\"\n        return the number of mango fruits in the basket\n        \"\"\"\n        return n-sum(l)\n    s = remove_spaces(s)\n    s = remove_comas(s)\n    s = str_to_list(s)\n    l = fruits_to_int(s)\n    n = str_to_int(n)\n    return mango_fruits(l,n)\n",
        "test": "assert     fruit_distribution(\"0 1\", 0) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    # raise NotImplementedError\n    max_count = 0\n    count = 0\n    result = -1\n    for i in range(len(lst)):\n        count += lst.count(lst[i])\n        if lst[i]>0 and count>=lst[i]:\n            if count>max_count:\n                max_count = count\n                result = lst[i]\n    return result\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    if len(lst) == 0:\n        return []\n    result = [lst[0]]\n    remaining = lst[1:]\n    i = 0\n    while len(remaining) > 0:\n        curr = remaining[0]\n        result = [remaining[0]] + result\n        remaining = remaining[1:]\n        if curr > i:\n            for item in remaining:\n                if item <= i:\n                    remaining.remove(item)\n            i += 1\n    return result\n",
        "test": "assert     strange_sort_list([]) == [], \"Wrong answer\""
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return -1\n    else:\n        return round((sides[0] * sides[1]) / 2, 2)\n    \n    \ndef is_triangle(a, b, c):\n    '''\n    Return True if a, b, and c form a triangle\n    Otherwise return False\n    '''\n    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return False\n    else:\n        return True\n    \n    \ndef is_right(a, b, c):\n    '''\n    Return True if a, b, and c form a right triangle\n    Otherwise return False\n    '''\n    if triangle_area(a, b, c) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     triangle_area(3, 4, 5) == 6.00"
    },
    {
        "number": 72,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    \n    def sum_(x):\n        return sum(x)\n    \n    def is_palindrome(x):\n        if x == x[::-1]:\n            return True\n        else:\n            return False\n    \n    def weight_(x):\n        return x[0]+x[1]\n    \n    try:\n        if sum_(q) <= w and is_palindrome(q) == True:\n            return True\n        else:\n            return False\n    except:\n        return False\n        \nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([1, 2], 9))\nprint(will_it_fly([1], 9))\nprint(will_it_fly([3, 2, 3], 5))\nprint(will_it_fly([1, 2, 3], 5))\nprint(will_it_fly([3, 2, 3], 3))\n",
        "test": "assert     will_it_fly([10,10,1,1,1,1,1],7) == False, \"wrong result\""
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    chng_cnt = 0\n    chng_arr = []\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            chng_arr.append((i, arr[i], arr[len(arr) - i - 1]))\n            chng_cnt += 1\n    return chng_cnt",
        "test": "assert     smallest_change([1,1,1]) == 0, \"bug in smallest_change\""
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        lst3 = []\n        for i in lst1:\n            if len(i) < len(lst2):\n                lst3.append(i)\n        return lst3\n",
        "test": "assert     total_match(['abc', 'def'], ['def', 'abc']) == ['abc', 'def']"
    },
    {
        "number": 75,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    primes = set()\n    for x in range(2, a//2):\n        for y in range(2, x):\n            if x % y == 0:\n                break\n        else:\n            primes.add(x)\n    for x in primes:\n        if (x*x*x) % a == 0:\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(12) == False"
    },
    {
        "number": 76,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    \n    if x == n:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_simple_power(x / n, n)\n",
        "test": "assert     is_simple_power(27, 4) == False, \"is_simple_power(27, 4) failed\""
    },
    {
        "number": 77,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    return True",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    counter = 0\n    for i in num:\n        if i == '2' or i == '3' or i == '5' or i == '7':\n            counter += 1\n    return counter\n",
        "test": "assert     hex_key('') == 0, 'Wrong answer'"
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    return 'db' + ''.join(map(lambda x: '1' if x > 0 else '0', map(int,list(str(bin(decimal)[2:]))))) + 'db'\n",
        "test": "assert     decimal_to_binary(7) == \"db111db\""
    },
    {
        "number": 80,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    return len(s) >= 3 and is_different(s)\n    \ndef is_different(s):\n    \"\"\"Given a string s, return true if it is a permutation of a palindrome\n    For example:\n    is_different(a) => True\n    is_different(ab) => True\n    is_different(aa) => False\n    is_different(abb) => False\n    is_different(abcd) => True\n    is_different(aabb) => True\n    is_different(abbb) => True\n    is_different(abcde) => False\n    is_different(aabde) => True\n    \"\"\"\n    l = [c for c in s]\n    if len(l) % 2 == 0:\n        return sum([1 for i in range(len(l)) if l[i] == l[-i - 1]]) > 0\n    else:\n        return sum([1 for i in range(len(l)) if l[i] == l[-i - 1]]) > 1\n",
        "test": "assert     is_happy(\"xy\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "    grades_list = []\n    for i in grades:\n        if i >= 4.0:\n            grades_list.append(\"A+\")\n        elif i >= 3.7:\n            grades_list.append(\"A\")\n        elif i >= 3.3:\n            grades_list.append(\"A-\")\n        elif i >= 3.0:\n            grades_list.append(\"B+\")\n        elif i >= 2.7:\n            grades_list.append(\"B\")\n        elif i >= 2.3:\n            grades_list.append(\"B-\")\n        elif i >= 2.0:\n            grades_list.append(\"C+\")\n        elif i >= 1.7:\n            grades_list.append(\"C\")\n        elif i >= 1.3:\n            grades_list.append(\"C-\")\n        elif i >= 1.0:\n            grades_list.append(\"D+\")\n        elif i >= 0.7:\n            grades_list.append(\"D\")\n        elif i >= 0.0:\n            grades_list.append(\"D-\")\n        elif i >= 0.0:\n            grades_list.append(\"E\")\n    return grades_list\n",
        "test": "assert     numerical_letter_grade([4.0]) == ['A+']"
    },
    {
        "number": 82,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    for i in range(2,int(len(string))+1):\n        if int(len(string))%i==0:\n            return False\n    return True\n",
        "test": "assert     prime_length(\"hiiiiiiiii\") == False, \"Error\""
    },
    {
        "number": 83,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    return sum(len(str(n**i)) in (1, 2) for i in range(n))\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return str(bin(N).replace(\"0b\", \"\"))\n",
        "test": "assert     solve(8) == \"1000\""
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    print(\"input: {}\".format(lst))\n",
        "test": "assert     add([1,2,3,4]) == None"
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return''.join(sorted(s.split(), key=str.lower))\n",
        "test": "assert     anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    # YOUR CODE HERE\n    result = []\n    for i, x in enumerate(lst):\n        if x.count(x[0]) == len(x):\n            for j, y in enumerate(x):\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 10) == []"
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([1]) == [1], sort_array([1])"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        index = alphabet.index(char)\n        new_index = index + 2\n        if new_index > len(alphabet) - 1:\n            new_index = new_index % len(alphabet)\n        result = result + alphabet[new_index]\n    return result\n",
        "test": "assert     (encrypt('a') == 'c'), \"encrypt is not working\""
    },
    {
        "number": 90,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([1,2,2,3,4,5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    \n    ans = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            if S[i+1] == '.' or S[i+1] == '?' or S[i+1] == '!':\n                ans += 1\n    return ans\n",
        "test": "assert     is_bored(\"A.B.C.D.E.F.G.\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if not isinstance(x,int):\n        return False\n    if not isinstance(y,int):\n        return False\n    if not isinstance(z,int):\n        return False\n    if x == y + z or x == z + y:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     any_int(1,2,0) == False, \"should be False\""
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    \n    result = ''\n    \n    # Create a translation table\n    table = {'a':'A', 'A':'a', 'e':'E', 'E':'e', 'i':'I', 'I':'i', 'o':'O', 'O':'o', 'u':'U', 'U':'u'}\n    \n    for character in message:\n        if character.lower() in table:\n            result += table[character.lower()]\n        else:\n            result += character\n    return result\n",
        "test": "assert     (encode('oNDoO, eXcEsseR?')!= 'nDOO, eXcEsslEr?')"
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "    prime = [2,3,5,7]\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key, val in dict.items():\n            if isinstance(key, str) == False:\n                return False\n            if key.isupper():\n                return False\n        return True\n",
        "test": "assert     check_dict_case({'a':1, 'b':2, 'c':3}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    prime_numbers = []\n    for i in range(1, n + 1):\n        if i == 0:\n            continue\n        if i == 1:\n            continue\n        if i == 2:\n            prime_numbers.append(i)\n            continue\n        is_prime = True\n        for num in prime_numbers:\n            if i % num == 0:\n                is_prime = False\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    return int(str(a)[-1]) * int(str(b)[-1])\n",
        "test": "assert     multiply(0, 56) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    # write your answer between #start and #end\n    #start\n    count = 0\n    if len(s) % 2 == 0:\n        for i in range(len(s)):\n            if i % 2 == 0 and s[i].isupper():\n                count += 1\n    return count\n    #end\n",
        "test": "assert     count_upper(\"123\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    return round(float(value))\n",
        "test": "assert     closest_integer(0.3) == 0"
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    return [n] + [n+2*(n%2) for n in range(2, n)]\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    s = s.replace(\" \", \",\")\n    return s.split(\",\")\n",
        "test": "assert     words_string('my house is very big') == ['my', 'house', 'is','very', 'big']"
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    if x < 2 or y < x:\n        return -1\n    elif x%2 == 1 and y%2 == 1:\n        return -1\n    else:\n        if x%2 == 0:\n            for i in range(x, y+1, 2):\n                if i%2 == 0:\n                    return i\n        else:\n            for i in range(x+1, y+1, 2):\n                if i%2 == 0:\n                    return i\n            return -1\n    return -1\n",
        "test": "assert     choose_num(1, 1) == -1, choose_num(1, 1)"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    if n < m:\n        return -1\n    else:\n        return bin(round(((n-m+1)//2+m)//2))[2:]\n",
        "test": "assert     rounded_avg(5, 7) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return [x for x in sorted(x) if not any(i in str(x) for i in '02468')]\n",
        "test": "assert     unique_digits([]) == []"
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]",
        "test": "assert     ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            result.append(sum)\n    return result\n",
        "test": "assert     f(0) == []"
    },
    {
        "number": 107,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    return (0, 0) if n < 2 else (sum(1 for i in range(1, n + 1) if is_palindrome(i)), sum(1 for i in range(1, n + 1) if is_palindrome(i) and is_odd(i)))\n",
        "test": "assert     even_odd_palindrome(1) == (0, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    count = 0\n    for i in arr:\n        if sum(map(int, str(i))) > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    if not arr:\n        return True\n    else:\n        arr.sort()\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            if arr[i+1]<temp:\n                return False\n        return True\n",
        "test": "assert     move_one_ball([])         == True, \"Case 1: Empty array\""
    },
    {
        "number": 110,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    for x in lst2:\n        if x % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4], [2,3]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    \n    histogram = {}\n    for char in test:\n        if char not in histogram:\n            histogram[char] = 1\n        else:\n            histogram[char] = histogram[char] + 1\n    return histogram\n    \n",
        "test": "assert     histogram(\"a\") == {'a': 1}, \"Single char\""
    },
    {
        "number": 112,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    if c == \"\":\n        return (\"\",False)\n    \n    sub_c = c[0]\n    flag = False\n    \n    for i in range(len(s)):\n        if flag:\n            break\n        if s[i] == sub_c:\n            s = s[0:i] + s[i + 1:]\n            flag = True\n    \n    return (s,s == s[::-1])\n    \ns = \"abcde\"\nc = \"ae\"\nprint(reverse_delete(s,c))\n",
        "test": "assert     reverse_delete('abcd', 'cd')[1] == False"
    },
    {
        "number": 113,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    output = []\n    for element in lst:\n        counter = 0\n        for char in element:\n            if char in \"123456789\":\n                counter += 1\n        output.append(counter)\n    return output\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    n = len(nums)\n    min_sum = sum(nums)\n    for i in range(1, n+1):\n        if sum(nums[:i]) >= min_sum:\n            break\n    return sum(nums[:i])\n",
        "test": "assert     minSubArraySum([1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "    \n    # TODO: Approach 1\n    # O(R * C)\n    # O(R)\n    def dfs(row, col, state):\n        if row >= len(grid) or row < 0 or col >= len(grid[0]) or col < 0:\n            return 0\n        \n        if state == 1:\n            # state 1 means we already checked the well, and we've tried to put water in it\n            # so this well is impossible, so we don't need to check it\n            return dfs(row, col + 1, 1)\n        \n        if grid[row][col] == 1 and state == 0:\n            # state 0 means we haven't visited this well yet, and we can use it\n            # so we put water in it and try the next well\n            return dfs(row, col + 1, 1) + 1\n        \n        return max(dfs(row, col + 1, 1), dfs(row, col + 1, 0))\n    \n    if len(grid) == 0:\n        return 0\n    \n    for row in grid:\n        for col in row:\n            if col == 1:\n                return dfs(0, 0, 0)\n    \n    return 0\n    ",
        "test": "assert     max_fill([[0,1],[0,1]], 1) == 1"
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([8,16,32]) == [8,16,32], \"sort_array wrong output\""
    },
    {
        "number": 117,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    s = s.split()\n    \n    if s == []:\n        return []\n    else:\n        return [word for word in s if len(set(word).intersection(\"aeiou\")) == n]\n",
        "test": "assert     select_words('', 0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    idx = 0\n    while idx < len(word) - 2:\n        if word[idx] in \"AEIOU\" and word[idx+1] not in \"AEIOU\":\n            return word[idx]\n        idx += 1\n    return \"\"",
        "test": "assert     get_closest_vowel(\"a\") == \"\", \"First test should be correct\""
    },
    {
        "number": 119,
        "max_answer_num": 28,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "    for i in range(len(lst)):\n        first_str = lst[i]\n        for j in range(i + 1, len(lst)):\n            second_str = lst[j]\n            if first_str.count('(')!= first_str.count(')') or second_str.count('(')!= second_str.count(')'):\n                continue\n            else:\n                if first_str.count('(')!= first_str.count(')') or second_str.count('(')!= second_str.count(')'):\n                    continue\n                else:\n                    temp = first_str\n                    first_str = second_str\n                    second_str = temp\n                    break\n        if first_str[0] == ')' or second_str[0] == ')':\n            return 'No'\n        else:\n            break\n    return 'Yes'\n",
        "test": "assert     match_parens([]) == 'Yes', 'bad case #2'"
    },
    {
        "number": 120,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([-1,-2,-3,-4,-5,-6], 3) == [-1, -2, -3]"
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total",
        "test": "assert     solution([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    if k > len(arr):\n        k = len(arr)\n    sub = []\n    for i in range(k):\n        sub.append(arr[i])\n    return sum(sub)\n",
        "test": "assert     add_elements([], 3) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    odd_collatz = []\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        collatz.append(int(n))\n    for ele in collatz:\n        if ele not in odd_collatz:\n            odd_collatz.append(ele)\n    odd_collatz.sort()\n    return odd_collatz\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    #split the date\n    #use a dictionary to store the months and the number of days\n    #use a list to store the months\n    #list is used because indexing is better\n    month_dict = {'01':31,'02':28,'03':31,'04':30,'05':31,'06':30,'07':31,'08':31,'09':30,'10':31,'11':30,'12':31}\n    months_list = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    #get the year from the input string\n    year = date[-4:]\n    #use the last 2 characters of the date string to get the month\n    month = date[-6:-4]\n    #use the first 2 characters of the date string to get the day\n    day = date[:2]\n    #validate the month\n    if month not in months_list:\n        return False\n    elif month in months_list[:4]:\n        if int(day) > month_dict[month]:\n            return False\n        elif int(day) < 1:\n            return False\n    elif month in months_list[4:]:\n        if int(day) > month_dict[month]:\n            return False\n        elif int(day) < 1:\n            return False\n    elif month == months_list[2]:\n        if int(day) > 29:\n            return False\n        elif int(day) < 1:\n            return False\n    else:\n        return False\n    return True\n",
        "test": "assert     valid_date(\"\") == False, \"Dates are not empty\""
    },
    {
        "number": 125,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world'], split_words('hello world')"
    },
    {
        "number": 126,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    # an empty list is sorted.\n    if len(lst) == 0:\n        return True\n    # there's only one item in the list.\n    if len(lst) == 1:\n        return True\n    # if the last item in the list is smaller than the first item,\n    # the list is not sorted.\n    if lst[len(lst) - 1] < lst[0]:\n        return False\n    # if there's more than one item in the list, iterate through\n    # the list and compare the current item to the one before it.\n    # if any of them are duplicates, return False.\n    if len(lst) > 1:\n        for i in range(len(lst) - 1):\n            if lst[i] == lst[i + 1]:\n                return False\n    # if the list is sorted, return True.\n    return True\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    return \"YES\" if set(range(start1, end1+1)).intersection(set(range(start2, end2+1))) else \"NO\"\n",
        "test": "assert     intersection((1,3), (4,5)) == 'NO'"
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if not arr:\n        return None\n    return sum(abs(num) * 1 if num == 0 else abs(num) * (-1 if num < 0 else 1) for num in arr)\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    # init\n    def init_grid(grid):\n        new_grid = []\n        for g in grid:\n            new_grid.append([0] + g + [0])\n        return new_grid\n",
        "test": "assert     minPath([[1, 2, 3],"
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "    return list(range(1, n + 1)) if n > 1 else [3]\n",
        "test": "assert     tri(1)     == [3]"
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "    digits_list = []\n    for i in range(len(str(n))):\n        if int(str(n)[i])%2 == 0:\n            digits_list.append(0)\n        else:\n            digits_list.append(int(str(n)[i]))\n    return(np.prod(digits_list))\n",
        "test": "assert     digits(20) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        if i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert     is_nested('[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    return sum([i**2 for i in lst])\n",
        "test": "assert     sum_squares([0, 0, 0, 0, 0]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    txt = txt[:-1]\n    if txt.isalpha():\n        return True\n    return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"Python 101: Introduction.\") == False, \"Fails\""
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    n = len(arr)\n    if n <= 1: return -1\n    last, i = 0, 0\n    while i < n:\n        if arr[i] > last:\n            last = arr[i]\n        elif arr[i] <= last:\n            return i - 1\n        i += 1\n    return -1\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    negative_lst = []\n    positive_lst = []\n    negative_lst = [n for n in lst if n < 0]\n    positive_lst = [p for p in lst if p > 0]\n    if not negative_lst:\n        return (None, None)\n    if not positive_lst:\n        return (None, None)\n    return (max(negative_lst), min(positive_lst))\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    if type(a)!= type(b):\n        return None\n    if type(a) == str:\n        return compare_one(float(a.replace(',','.')), float(b.replace(',','.')))\n    return max(a, b)\n",
        "test": "assert     compare_one(10,20) == 20"
    },
    {
        "number": 138,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    return any([n == 2 * (2 * i + 2) for i in range(4)])\n",
        "test": "assert     is_equal_to_sum_even(35) == False, \"is_equal_to_sum_even(35) is not returning False\""
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"-\")\n",
        "test": "assert     fix_spaces('meeting at 16 january at 16pm') =='meeting_at_16_january_at_16pm'"
    },
    {
        "number": 141,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if file_name.count('.') > 1:\n        return 'No'\n    elif file_name.count('.') < 1:\n        return 'No'\n    else:\n        dot_index = file_name.find('.')\n        file_name_split = file_name.split('.')\n        if len(file_name_split[0]) < 3:\n            return 'No'\n        elif dot_index < 3:\n            return 'No'\n        elif len(file_name_split[1]) > 3:\n            return 'No'\n        elif file_name_split[1] not in ['exe', 'txt', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n",
        "test": "assert     file_name_check('test') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            s = s + lst[i] ** 2\n    return s\n",
        "test": "assert     sum_squares([0, 0, 0]) == 0, \"sum_squares error\""
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    # convert to a list\n    sentence_list = list(sentence)\n    # loop over the list\n    for i in range(len(sentence_list)):\n        # check if it's a letter\n        if sentence_list[i].isalpha():\n            # loop over the list again\n            for j in range(i + 1, len(sentence_list)):\n                # check if it's a letter\n                if sentence_list[j].isalpha():\n                    # get the length of the word\n                    word_length = len(sentence_list[i:j+1])\n                    # check if it's a prime number\n                    if is_prime(word_length):\n                        # replace the word\n                        sentence_list[i:j+1] = [sentence_list[i], sentence_list[j]]\n                        break\n    # convert the list back to a string\n    return ''.join(sentence_list)\n",
        "test": "assert     words_in_sentence(\"\") == \"\""
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    numerator = int(n.split('/')[0])\n    denominator = int(n.split('/')[1])\n    if x.split('/')[0] == '0' or x.split('/')[1] == '0':\n        return False\n    elif numerator % denominator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert not simplify(\"3/4\", \"1/4\")"
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and str(i)[0]!= str(i)[-1] and i % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Wrong answer\""
    },
    {
        "number": 147,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return sum(1 for i in range(n) for j in range(n) for k in range(n) if i < j < k and (i + j + k) % 3 == 0)\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    min_planets = []\n    max_planets = []\n    for planet in planets:\n        if planet1 == planet:\n            min_planets.append(planet)\n        if planet2 == planet:\n            max_planets.append(planet)\n    min_index = planets.index(min_planets[0])\n    max_index = planets.index(max_planets[0])\n    result = []\n    if max_index - min_index <= 2:\n        for planet in planets[min_index+1:max_index]:\n            result.append(planet)\n    else:\n        result = bf(max_planets[0], min_planets[0])\n        for planet in planets[min_index+1:max_index]:\n            result = result + bf(planet, max_planets[0])\n    return tuple(result)\n",
        "test": "assert bf('Mars', 'Earth') == ()"
    },
    {
        "number": 149,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    lst.sort(key=len)\n    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(5, 5, 5) == 5"
    },
    {
        "number": 151,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    return 0\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    # <YOUR CODE HERE>\n    \n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     compare(game = [1, 3], guess = [2, 3]) == [1, 0], \"Wrong result for compare\""
    },
    {
        "number": 153,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    CAP = sum([1 for x in class_name if x.isupper()])\n    SM = sum([1 for x in class_name if x.islower()])\n    return class_name + '.' + max(extensions, key = lambda x: (CAP - SM) * 100 / len(x) )\n",
        "test": "assert     Strongest_Extension('Slices', ['Slices', 'Pizza', 'Pie']) == 'Slices.Slices', 'Slices.Slices is not the strongest extension'"
    },
    {
        "number": 154,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    if a in b:\n        return True\n    for i in range(len(a)):\n        if a[i:]+a[:i] in b:\n            return True\n        if a[:i]+a[i:] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('hi','hello') == False"
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n",
        "test": "assert     even_odd_count(0) == (0,0)"
    },
    {
        "number": 156,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    if not 1 <= number <= 1000:\n        raise ValueError(\"Invalid input\")\n    mini_romans = (\n        (\"m\",  1000),\n        (\"cm\", 900),\n        (\"d\",  500),\n        (\"cd\", 400),\n        (\"c\",  100),\n        (\"xc\", 90),\n        (\"l\",  50),\n        (\"xl\", 40),\n        (\"x\",  10),\n        (\"ix\", 9),\n        (\"v\",  5),\n        (\"iv\", 4),\n        (\"i\",  1),\n    )\n    result = []\n    for item in mini_romans:\n        while number >= item[1]:\n            number -= item[1]\n            result.append(item[0])\n    return \"\".join(result)\n",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    if ((c**2) == (a**2) + (b**2)) or ((b**2) == (a**2) + (c**2)) or ((a**2) == (b**2) + (c**2)):\n        return True\n    else:\n        return False\n    \n    \ndef integer_right_triangle(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    a = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if right_angle_triangle(i, j, n) == True:\n                a.append(j)\n    return len(a)\n    \n    \ndef integer_right_triangle_v2(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + integer_right_triangle_v2(n-1)\n    \n    \ndef integer_right_triangle_v3(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 0\n        for i in range(1, n):\n            a += integer_right_triangle_v2(i)\n        return a + n + 1\n    \n    \ndef int_right_triangle_v4(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        c = 1\n        for i in range(1, n):\n            a, b, c = b, c, a + b + c\n        return c\n    \n    \ndef integer_right_triangle_v5(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum(integer_right_triangle_v4(i) for i in range(1, n))\n        \n",
        "test": "assert     right_angle_triangle(6, 6, 8) == False"
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    unique_chars = set()\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars.add(char)\n        count = len(unique_chars)\n        if count > max_count:\n            max_count = count\n            max_word = word\n        unique_chars.clear()\n    return max_word\n",
        "test": "assert     find_max([\"apple\", \"onion\", \"carrot\", \"apple\", \"apple\", \"apple\"]) == \"carrot\""
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    # WRITE YOUR CODE HERE\n    \n    if remaining <= need:\n        remaining = need\n    \n    if remaining == 0:\n        return [number + need, 0]\n    \n    return [number + need, remaining]",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    result = 0\n    \n    #calculate the first operand\n    result = operand[0]\n    #calculate the remaining operands\n    for i in range(1, len(operand)):\n        if(operator[i - 1] == \"+\"):\n            result += operand[i]\n        elif(operator[i - 1] == \"-\"):\n            result -= operand[i]\n        elif(operator[i - 1] == \"*\"):\n            result *= operand[i]\n        elif(operator[i - 1] == \"//\"):\n            result //= operand[i]\n        elif(operator[i - 1] == \"**\"):\n            result **= operand[i]\n        else:\n            print(\"Unknown operator!\")\n    return result\n",
        "test": "assert     do_algebra(['+'], [2,3]) == 5"
    },
    {
        "number": 161,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    return s.swapcase()\n",
        "test": "assert     solve(\"\") == \"\", \"Empty string\""
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    lst = []\n    for i in range(a+1, b):\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n",
        "test": "assert     generate_integers(1, 5) == [2, 4]"
    }
]