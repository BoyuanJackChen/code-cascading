[
    {
        "number": 0,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    stack = []\n    result = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            try:\n                stack.pop()\n            except IndexError:\n                # Return the empty list if there's nothing in the stack.\n                return []\n        result.append(c)\n    return [''.join(result).strip()] if ''.join(result).strip() else []\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    assert(number > 0)\n    if number < 1:\n        return 0\n    integral, decimal = str(number).split('.')\n    return float('0.' + decimal)\n",
        "test": "assert     truncate_number(3.0) == 0.0",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    if balance < 0:\n        return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    # Calculate mean of input numbers.\n    x_mean = sum(numbers) / len(numbers)\n    # Calculate absolute differences from x_mean.\n    absolute_differences = [abs(x - x_mean) for x in numbers]\n    # Calculate and return mean of absolute differences.\n    return sum(absolute_differences) / len(absolute_differences)\n",
        "test": "assert     mean_absolute_deviation([1,1,1,1]) == 0, 'Your result does not match expected result.'",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    for i in range(1, len(numbers) - 1):\n        numbers.insert(2 * i + 1, delimeter)\n    return numbers\n",
        "test": "assert intersperse([1], 1) == [1]",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    ans = []\n    temp = 0\n    count = 0\n    for x in paren_string:\n        if x == '(':\n            count += 1\n            temp += 1\n        elif x == ')':\n            count -= 1\n            temp -= 1\n            if count == 0:\n                ans.append(temp)\n                temp = 0\n    return ans\n",
        "test": "assert     parse_nested_parens(\"()\")     == [0]",
        "num_ids": 3144,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"aa\", \"a\", \"ab\", \"ba\", \"bb\"], \"c\") == []",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for i in numbers:\n        product_ *= i\n    return (sum_, product_)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    res: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        else:\n            res.append(max(res[i - 1], numbers[i]))\n    return res\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    suffix_start_index = len(string)\n    if is_palindrome(string):\n        return string\n    for suffix_index in range(1, len(string) + 1):\n        suffix = string[-suffix_index:]\n        if is_palindrome(suffix):\n            prefix = string[:-suffix_index]\n            return prefix + suffix[::-1]\n        else:\n            suffix_start_index = suffix_index\n",
        "test": "assert     make_palindrome(\"\") == \"\"",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = max(len(s) for s in strings)\n    return [s for s in strings if len(s) == max_len][0]\n",
        "test": "assert     longest([]) == None",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(2, 4) == 2",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    # final_str = string\n    # final_str = string.split(\" \")\n    final_str = string[0:]\n    # print(final_str)\n    all_list = []\n    for i in range(len(final_str)):\n        # print(final_str[i])\n        list1 = final_str[0:i+1]\n        all_list.append(list1)\n    # print(all_list)\n    return all_list\n",
        "test": "assert     all_prefixes('a') == ['a']",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "    return list(map(lambda s: 4 if s == 'o' else 2 if s == 'o|' else 1, music_string.split('|')))\n",
        "test": "assert     parse_music(\"|.|.|.|.|.|.|.|.|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "num_ids": 4225,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    return string.count(substring)\n    \n",
        "test": "assert     how_many_times('aaaaa', 'b') == 0",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    numbers = numbers.split(' ')\n    new_numbers = []\n    for i in numbers:\n        if i == 'zero':\n            new_numbers.append(0)\n        elif i == 'one':\n            new_numbers.append(1)\n        elif i == 'two':\n            new_numbers.append(2)\n        elif i == 'three':\n            new_numbers.append(3)\n        elif i == 'four':\n            new_numbers.append(4)\n        elif i == 'five':\n            new_numbers.append(5)\n        elif i =='six':\n            new_numbers.append(6)\n        elif i =='seven':\n            new_numbers.append(7)\n        elif i == 'eight':\n            new_numbers.append(8)\n        elif i == 'nine':\n            new_numbers.append(9)\n    return''.join([str(i) for i in sorted(new_numbers)])\n",
        "test": "assert     sort_numbers(\"five nine four eight zero three two one seven six\") == \"0123456789\"",
        "num_ids": 2481,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    \n    numbers.sort()\n    \n    min_value = numbers[0]\n    max_value = numbers[-1]\n    \n    closest = (min_value, max_value)\n    \n    return closest\n",
        "test": "assert     find_closest_elements([0,0,0,0,0,0,0,0,0,0]) == (0,0)",
        "num_ids": 2621,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "test": "assert     rescale_to_unit([])             == []",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    return [int(value) for value in values if isinstance(value, int) or isinstance(value, float)]\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert strlen('') == 0",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    if n == 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    prime_numbers = []\n    for num in range(2, n + 1):\n        while n % num == 0:\n            prime_numbers.append(num)\n            n //= num\n    return prime_numbers\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    new_numbers = []\n    for i in numbers:\n        if i not in new_numbers:\n            new_numbers.append(i)\n    return new_numbers\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "test": "assert     flip_case('') == ''",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([])                         == \"\", \"case: empty string\"",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix(['hello', 'hi', 'howdy', 'heyas'], 'hey') == ['heyas']",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if n == 1:\n        return False\n    for k in range(2,n):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    # Only even xs and largest non zero coefficient\n    xs = xs[1::2] + xs[::2]\n    # Find a, b\n    a = xs[0]\n    b = xs[1]\n    # From b and a, find x\n    return -b / a\n",
        "test": "assert     poly([1, 1, 1], 0) == 1",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if (i % 3)!= 0:\n            l[i] = l[i]\n    l.sort()\n    return l\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 3285,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    x = []\n    for a in l:\n        if a not in x:\n            x.append(a)\n    x.sort()\n    return x\n",
        "test": "assert     unique([1, 2, 3, 3, 4, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    if len(l) == 0:\n        return None\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n",
        "test": "assert     max_element([1, 5, -2, 6]) == 6, f'error 1'",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    return sum(1 for i in range(n) if (i%11==0 or i%13==0) and str(i).count(\"7\")>0)\n",
        "test": "assert     fizz_buzz(1) == 0, \"wrong result for fizz_buzz(1)\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    if len(l) < 2:\n        return l\n    else:\n        return l[:2] + sort_even(l[2:])\n",
        "test": "assert     sort_even([1, 1, 1, 1]) == [1, 1, 1, 1], \"Problem with sort_even\"",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "assert     decode_cyclic(encode_cyclic(s = \"ATCGATCG\")) == \"ATCGATCG\"",
        "num_ids": 1416,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        a = 0\n        b = 1\n        while b < n:\n            a, b = b, a+b\n        return b\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    found_triples = []\n    for x in l:\n        for y in l:\n            for z in l:\n                if x + y + z == 0:\n                    if (x, y, z) not in found_triples:\n                        found_triples.append((x, y, z))\n    return len(found_triples) == 3\n",
        "test": "assert     triples_sum_to_zero([]) == False",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(1) == 0, \"car_race_collision(1)\"",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"empty list\"",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return bin(x)[2:] if base == 2 else oct(x)[2:] if base == 8 else hex(x)[2:] if base == 16 else str(x)\n",
        "test": "assert     change_base(12, 2) == '1100', 'Should be 1100'",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(5, 5) == 37.50",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    fib4_dict = {0:0, 1:0, 2:2, 3:0}\n    if n >= 4:\n        for i in range(4, n+1):\n            fib4_dict[i] = fib4_dict[i-1] + fib4_dict[i-2] + fib4_dict[i-3] + fib4_dict[i-4]\n    return fib4_dict[n]\n    ",
        "test": "assert     0 == fib4(0)",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"aba\") == True",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n < 0:\n        return -1\n    if n % p == 0:\n        return 0\n    return 1\n",
        "test": "assert     modp(2,2) == 0",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"mmai\" == decode_shift(encode_shift(\"mmai\"))",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    if not isinstance(text, str):\n        raise TypeError('text must be a string')\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n",
        "test": "assert     remove_vowels('hello') == 'hll', 'Remove vowels should remove vowels from a text'",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3, 2, 1], 0) == False",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True\n",
        "test": "assert     same_chars('nelson', 'nelsen') == False,'same_chars'",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == \"<\":\n            bracket_stack.append(\"<\")\n        elif c == \">\":\n            if bracket_stack == []:\n                return False\n            elif bracket_stack[-1] == \"<\":\n                bracket_stack.pop()\n            else:\n                return False\n    return bracket_stack == []\n",
        "test": "assert     not correct_bracketing('<<')",
        "num_ids": 2268,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    if len(l) < 3:\n        return True\n    else:\n        return (l[1] - l[0] <= 0 and l[2] - l[1] >= 0) or (l[1] - l[0] >= 0 and l[2] - l[1] <= 0)\n",
        "test": "assert     not monotonic([1, 2, 5, 4, 5, 6, 7, 8])",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    assert n > 1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(101)    == 101",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "test": "assert     sum_to_n(2) == 3",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     not correct_bracketing(\"(()\")",
        "num_ids": 1129,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "    if xs == [] or len(xs) == 1:\n        return []\n    if len(xs) == 2:\n        return [xs[1]]\n    return [xs[1]] + derivative(xs[1:])\n",
        "test": "assert     [0,0,0,1]     == derivative([0,0,0,0])",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    assert n >= 0, 'n must be greater than or equal to 0'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n        if letter == \"y\" and s[-1]!= \"y\":\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count('') == 0, \"The empty string has 0 vowels\"",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    return ''.join(str(x)[shift:] + str(x)[:shift])\n",
        "test": "assert     circular_shift(11, 0) == \"11\", \"11 should be 11\"",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    s = str(s)\n    return sum([ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90])\n",
        "test": "assert     digitSum('') == 0, \"Wrong answer for empty string!\"",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    return n - s.count(\"0\") - s.count(\"1\") - s.count(\"2\")\n",
        "test": "assert     fruit_distribution(\"3,6:5,2\", 3) == 2",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    return []\n",
        "test": "assert [] == pluck([])",
        "num_ids": 1666,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    # your code here\n    max_value = max(lst)\n    max_count = lst.count(max_value)\n    \n    if max_count < max_value:\n        return -1\n    return max_value\n",
        "test": "assert     search([1,1,1]) == 1",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    a = sorted(lst)\n    b = []\n    for i in range(len(a)):\n        if i%2 == 0:\n            b.append(a[i])\n        else:\n            b.append(a[-i])\n    return b\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    # Excerpt From:\n    # https://codereview.stackexchange.com/questions/191322/calculate-the-area-of-a-triangle-when-its-lengths-are-known\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n",
        "test": "assert     triangle_area(3, 7, 4) == -1, 'triangle_area(3, 7, 4) wrong answer'",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    \n    return False\n",
        "test": "assert     will_it_fly([1,3,5,7,9], 20) == False",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "    # Your code here\n    arr_count = {}\n    for num in arr:\n        if num in arr_count:\n            arr_count[num] += 1\n        else:\n            arr_count[num] = 1\n    count = 0\n    for num in arr_count:\n        if arr_count[num] % 2!= 0:\n            count += arr_count[num] - 1\n    return count // 2\n",
        "test": "assert     smallest_change(arr=[2,1,2,2,2]) == 0",
        "num_ids": 1672,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return lst2\n",
        "test": "assert     total_match(['abcd', 'bcde', 'bcde'], ['abcd', 'bcde', 'bcde']) == ['abcd', 'bcde', 'bcde']",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    for i in range(2, 11):\n        if a % i!= 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(1) == False",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return False\n    \n    x = abs(x)\n    n = abs(n)\n    \n    if x % n == 0:\n        return True\n    return False\n    \n",
        "test": "assert     is_simple_power(2, 3) == False",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    # YOUR CODE HERE\n    n=int(a**(1/3))\n    if n**3==a:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(5) == False",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    #count the number of prime numbers in hex_num\n    num = num.upper()\n    prime_count = 0\n    for char in num:\n        if char in \"ABCDEF\":\n            prime_count += 1\n    return prime_count\n",
        "test": "assert     hex_key(\"\") == 0, \"wrong result for hex_key('')\"",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "assert decimal_to_binary(15) == 'db1111db'",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    while len(set(s)) < len(s):\n        i = 0\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                del s[i]\n                del s[i]\n                i -= 1\n                break\n            i += 1\n        if i == len(s)-1:\n            return True\n    return False\n",
        "test": "assert     is_happy(\"ac\") == False",
        "num_ids": 1657,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    grade_equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    return [grade_equation[x] for x in grades]\n",
        "test": "assert     numerical_letter_grade([]) == []",
        "num_ids": 2809,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    if len(string) == 2:\n        return len(string) % 2!= 0\n    return len(string) % 2!= 0 and prime_length(string[1:])\n",
        "test": "assert     prime_length(\"a\") == False, \"ERROR: a is not a prime number\"",
        "num_ids": 1743,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    if n == 1:\n        return 1\n    return 10 ** (n - 1) - starts_one_ends(n - 1)\n",
        "test": "assert     starts_one_ends(1) ==    1",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    return bin(N)[2:]",
        "test": "assert     (solve(1) == '1'), \"Incorrect solution for solve(1)\"",
        "num_ids": 2041,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    return sum([i for i in lst if i % 2 == 1])\n",
        "test": "assert     add([]) == 0",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    return''.join(sorted(''.join(s).split(), key=str.lower))\n",
        "test": "assert anti_shuffle(\"\") == \"\"",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    # your code here\n    result = []\n    for row_num in range(len(lst)):\n        # iterate through the row\n        column = 0\n        while column < len(lst[row_num]):\n            if lst[row_num][column] == x:\n                # if there is such number on the list add it to result\n                result.append((row_num, column))\n            column += 1\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []",
        "num_ids": 2869,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    # your code here\n    for i in range(len(array)):\n        for j in range(len(array)-1-i):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1461,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    newstring = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                if (ord(char)+2) <= 91:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n            else:\n                if (ord(char)+2) <= 123:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n        else:\n            newstring += char\n    return newstring\n",
        "test": "assert encrypt(\"abc\"), \"If only letters are passed, the function should return the encrypted string\"",
        "num_ids": 2160,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    # I'll use an approach similar to quicksort\n    # We'll sort the list into a sorted part, and a list of \"not sorted\"\n    # As we iterate through the list, if we find an item that is smaller than the last item of the sorted part\n    # we'll add it to the sorted part. Otherwise we add it to the \"not sorted\" list\n    \n    # the sorted part starts at the first index\n    sorted_part = [lst[0]]\n    not_sorted_part = []\n    \n    for i in range(1, len(lst)):\n        # We want to sort the not sorted part into the sorted part, so we need to compare the not sorted part to the last element of the sorted part\n        if lst[i] < sorted_part[-1]:\n            sorted_part.append(lst[i])\n        else:\n            not_sorted_part.append(lst[i])\n    \n    # Once we have iterated through the list, we return the second to last element of the sorted part\n    if len(sorted_part) < 2:\n        return None\n    else:\n        return sorted_part[-2]\n        ",
        "test": "assert     (next_smallest([3,4,5,2,1]) == 2)",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    #print(S)\n    count=0\n    lis=S.split('.')\n    for x in lis:\n        if 'I'in x:\n            count+=1\n    print(count)\n    return count\n",
        "test": "assert     is_bored('') == 0, 'Empty string'",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    return ((x == z + y) or (y == z + x)) and type(x) == type(y) == type(z) == int\n",
        "test": "assert     any_int(1, 3, 3.7) == False",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    pass\n",
        "test": "assert     encode(\"a\") == \"A\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    largest_prime = -1\n    sum_digits = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                if num > largest_prime:\n                    largest_prime = num\n                    sum_digits += num\n    return sum_digits\n    ",
        "test": "assert     skjkasdkd([1, 1, 1]) == 0",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        key_list = []\n        for key in dict:\n            if isinstance(key, str):\n                if key.isupper():\n                    key_list.append(False)\n                else:\n                    key_list.append(True)\n            else:\n                return False\n        if False in key_list:\n            return False\n        else:\n            return True\n",
        "test": "assert     check_dict_case({}) == False",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    def is_prime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    def gen(n):\n        for i in range(2, n):\n            if is_prime(i):\n                yield i\n    return list(gen(n))\n",
        "test": "assert     count_up_to(3) == [2]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    a_new = a % 10\n    b_new = b % 10\n    return a_new*b_new\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 1877,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    return sum([1 for i in s[1::2] if i.isupper()])\n",
        "test": "assert count_upper(\"nopqrstuvwxyz\") == 0",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    value = float(value)\n    return int(value + (value % 1))\n    # or using math.ceil()\n    # return math.ceil(value)\n",
        "test": "assert     closest_integer(\"0\") == 0",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n + 1\n        pile.append(n)\n    return pile\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    \n    return s.replace(',','').split(' ')\n",
        "test": "assert     words_string('a') == ['a']",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    if x % 2 == 0 and x <= y and x >= 0:\n        if y % 2 == 0:\n            return min(x, y)\n        else:\n            return max(x, y)\n    else:\n        return -1\n",
        "test": "assert     choose_num(5, 5) == -1",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(round(sum(range(n, m+1))/m))[2:]\n",
        "test": "assert     rounded_avg(5, 0) == -1, 'wrong result'",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    x = sorted(x)\n    for num in x:\n        if num % 2 == 0:\n            x.remove(num)\n    return x\n",
        "test": "assert     unique_digits([]) == [], \"Wrong output for unique_digits\"",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "    \n    def numberToName(number):\n        if number == 1:\n            return \"One\"\n        elif number == 2:\n            return \"Two\"\n        elif number == 3:\n            return \"Three\"\n        elif number == 4:\n            return \"Four\"\n        elif number == 5:\n            return \"Five\"\n        elif number == 6:\n            return \"Six\"\n        elif number == 7:\n            return \"Seven\"\n        elif number == 8:\n            return \"Eight\"\n        elif number == 9:\n            return \"Nine\"\n        \n    def int_to_string(num):\n        return [int(x) for x in str(num)]\n    \n    def sort_between(array):\n        for i in range(0, len(array)):\n            for j in range(i + 1, len(array)):\n                if array[j] < array[i]:\n                    temp = array[j]\n                    array[j] = array[i]\n                    array[i] = temp\n        return array\n        \n    def reverse_list(array):\n        return array[::-1]\n        \n    def replace_digits(array):\n        for i in range(0, len(array)):\n            array[i] = numberToName(array[i])\n        return array\n    \n    if len(arr) == 0:\n        return []\n    \n    # sort the array\n    sort_arr = sort_between(arr)\n    \n    # reverse the array\n    rev_arr = reverse_list(sort_arr)\n    \n    # replace all of the digits with their corresponding names\n    replace_arr = replace_digits(rev_arr)\n    \n    return replace_arr\n    \nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(by_length([1, 1, 2, 2, 3, 4, 5, 8, 8]))\nprint(by_length([1, -1, 55]))\nprint(by_length([]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))",
        "test": "assert     by_length([1, 2, 3]) == ['Three', 'Two', 'One']",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    return [i if i%2==0 else sum(range(1,i+1)) for i in range(1, n+1)]\n",
        "test": "assert     f(1) ==     [1]",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    return (0, 0) if n < 2 else (len(list(filter(lambda x: str(x) == str(x)[::-1], range(1, n + 1)))), len(list(filter(lambda x: str(x)!= str(x)[::-1], range(1, n + 1)))))\n",
        "test": "assert     even_odd_palindrome(10) == (9, 1)",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    def count(n):\n        if n < 0:\n            return -1\n        else:\n            return 1\n    counts = 0\n    for i in arr:\n        if count(i) == 1:\n            counts += 1\n    return counts\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 1932,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return True\n",
        "test": "assert     move_one_ball([1])",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    \n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2], [3, 4]) == \"NO\"",
        "num_ids": 2142,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    histo = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            histo[letter] = histo.get(letter, 0) + 1\n    return histo\n",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    return (s.replace(c,\"\"),len(s) == len(s[::-1]))\n",
        "test": "assert     reverse_delete(\"\", \"\") == (\"\", True)",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    # YOUR CODE HERE\n    def is_odd(n):\n        return n % 2 == 1\n    return [str(len([c for c in s if is_odd(int(c))])) for s in lst]\n",
        "test": "assert     odd_count([\"1111111\"]) == [\"7\"], \"error\"",
        "num_ids": 2731,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "    def helper(grid, bucket_capacity):\n        h = len(grid)\n        w = len(grid[0])\n        dp = [[math.inf]*(w+1) for _ in range(h+1)]\n        dp[0][0] = 0\n        for row in range(h):\n            for col in range(w):\n                if grid[row][col]:\n                    dp[row+1][col+1] = min(dp[row+1][col+1], dp[row][col]+1)\n                    dp[row+1][col] = min(dp[row+1][col], dp[row][col])\n                    dp[row][col+1] = min(dp[row][col+1], dp[row][col])\n        for row in range(h+1):\n            for col in range(w+1):\n                dp[row][col] = min(dp[row][col], bucket_capacity)\n        return dp[-1][-1]\n    return helper(grid, capacity) - 1\n",
        "test": "assert     max_fill([[1,1,0],[1,0,0],[0,0,0]], 5) == 4, 'WA'",
        "num_ids": 3427,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count(\"1\"), x))\n",
        "test": "assert     sort_array([0, 1, 2, 5, 12]) == [0, 1, 2, 5, 12], \"wrong result\"",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    if len(s) == 0: return []\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    n_consonants = n\n    return_list = []\n    for i in words:\n        word_consonants = 0\n        for j in i:\n            if j in consonants:\n                word_consonants += 1\n        if word_consonants == n_consonants:\n            return_list.append(i)\n    return return_list\n",
        "test": "assert     select_words('', 4) == []",
        "num_ids": 1650,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    if len(word) < 2:\n        return ''\n    closest_vowel = ''\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            closest_vowel = word[i]\n            break\n        elif i == 0:\n            return ''\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            closest_vowel = word[i]\n            break\n        elif word[i] in 'bcdfghjklmnpqrstvwxyz':\n            return closest_vowel\n    return closest_vowel\n",
        "test": "assert     get_closest_vowel('kk') == '', \"Wrong result for get_closest_vowel('kk')\"",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    return 'Yes' if lst[0].count('(') == lst[0].count(')') and \\\n    lst[1].count('(') == lst[1].count(')') else 'No'\n",
        "test": "assert     match_parens(['(', ')', '(', ')', '(']) == 'No','match_parens([\"(\", \")\", \"(\", \")\", \"(\"]) == \"No\"'",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert     len(maximum([1, 2, 3, 4, 5], 2)) == 2",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    \n    \n    return sum(lst[::2])\n    \n",
        "test": "assert     solution([2,1,2,3,4,5]) == 8",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    # This code takes O(n) time and O(1) space\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n",
        "test": "assert     add_elements([1, 5, 1, 3], 2) == 6",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = []\n        prev_num = n\n        while prev_num!= 1:\n            if prev_num % 2 == 0:\n                next_num = int(prev_num/2)\n                result.append(next_num)\n                prev_num = next_num\n            else:\n                next_num = int((3*prev_num + 1)/2)\n                result.append(next_num)\n                prev_num = next_num\n        result.append(1)\n    return sorted(result)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1655,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    try:\n        months = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n        # year,month,day = [int(i) for i in input().split('-')]\n        year,month,day = date.split('-')\n        if len(year)!= 4 or len(month)!= 2 or len(day)!= 2:\n            return False\n        if int(year) < 0 or int(month) < 1 or int(month) > 12 or int(day) < 1 or int(day) > months[int(month)]:\n            return False\n        return True\n    except ValueError:\n        return False",
        "test": "assert     valid_date('12-32-2000') == False, 'ERROR'",
        "num_ids": 2612,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    \n    return txt.split()\n",
        "test": "assert     split_words(\"\") == []",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    new_lst = sorted(lst)\n    return lst == new_lst\n",
        "test": "assert     is_sorted([])",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n    # TODO: check if there is an intersection\n    if interval1_start >= interval2_start and interval1_start <= interval2_end:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     (intersection((1, 3), (0, 0)) == \"NO\")",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        result *= abs(i)\n    signs = [int(i > 0) * -1 + int(i < 0) * 1 for i in arr]\n    return result * sum(signs)\n",
        "test": "assert     (prod_signs([]) == None)",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    m, n = len(grid), len(grid[0])\n    memo = {}\n    if k == 0 or k == 1:\n        return [1]\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]",
        "num_ids": 3070,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    lst = [1, 3, 2, 8]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            lst.append(lst[-1] + lst[-2])\n        else:\n            lst.append(lst[-1] + lst[-2] + lst[-3])\n    return lst\n",
        "test": "assert     tri(3) == [3, 2, 1, 3]",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    evens = [int(i) for i in str(n) if int(i) % 2 == 0]\n    if len(evens) > 0:\n        return 0\n    return reduce(lambda x, y: x * y, [int(i) for i in str(n) if int(i) % 2 == 1])\n",
        "test": "assert digits(3452) == 0",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    # pseudocode\n    # traverse string from left to right\n    # if '[' is found, add to stack\n    # if ']' is found, check if stack is empty\n    # if stack is not empty, pop from stack\n    # if stack is empty and ']' is found, return false\n    # if not, return true\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n",
        "test": "assert     is_nested('[[[]]') == False",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    lst_s=[]\n    for i in lst:\n        lst_s.append(int(math.ceil(i**2)))\n    return sum(lst_s)\n    # pass\n",
        "test": "assert     sum_squares([9]) == 81",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    txt = txt.split()\n    if len(txt) < 1:\n        return False\n    return len(txt[-1]) == 1 and txt[-1].isalpha() == True\n",
        "test": "assert     check_if_last_char_is_a_letter(\"%^&\") == False, \"Wrong output for check_if_last_char_is_a_letter('%^&')\"",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i, val in enumerate(arr):\n        if i == 0:\n            continue\n        else:\n            if val > arr[i-1]:\n                continue\n            else:\n                return i\n    return -1",
        "test": "assert     can_arrange([1, 2, 3, 4, 8]) == -1",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    if len(lst)==0:\n        return (None, None)\n    neg=None\n    pos=None\n    for i in lst:\n        if i<0:\n            neg=i\n        if i>0:\n            pos=i\n    if neg==None and pos==None:\n        return (None, None)\n    elif neg==None:\n        return (None, pos)\n    elif pos==None:\n        return (neg, None)\n    else:\n        return (neg, pos)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1729,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    if type(a) is str:\n        a = float(a.replace(\",\",\".\"))\n    if type(b) is str:\n        b = float(b.replace(\",\",\".\"))\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    return None\n",
        "test": "assert     compare_one(1, 0) == 1",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if n == sum([i for i in range(1, n, 2) if n % i == 0]):\n        return True\n    return False\n",
        "test": "assert     is_equal_to_sum_even(1) == False",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    count = n\n    factorial = 1\n    while count > 1:\n        factorial *= count\n        count -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    # if a string has more than 2 consecutive spaces\n    # then replace all consecutive spaces with -\n    if \"  \" in text:\n        return text.replace(\"  \", \"-\")\n    # if there is no space, then replace all spaces with underscores\n    else:\n        return text.replace(\" \", \"_\")\n",
        "test": "assert     fix_spaces('This is a test') == 'This_is_a_test'",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if len(file_name) > 3 and file_name.isdigit() == False:\n        if file_name.count('.') == 1:\n            if file_name.split('.')[0]!= '':\n                if file_name.split('.')[0][0].isalpha():\n                    if file_name.split('.')[1].lower() in ['exe', 'dll', 'txt']:\n                        return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('0_1') == 'No'",
        "num_ids": 2404,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    sum = 0\n    \n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i]**2\n        elif i%4 == 0 and i%3!= 0:\n            sum += lst[i]**3\n            \n    return sum\n    \ndef find_missing_number(lst):\n    \"\"\"\n    This function shall take a list of integers. The function shall return the first entry which is missing from the list and whose index is a \n    multiple of 3. If the list is empty, the function shall return 0. \n    \n    Examples:\n    For lst = [1,2,3]  the output should be 6\n    For lst = [] the output should be 0\n    For lst = [1,3,2,4] the output should be 6\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    \n    for i in range(len(lst)):\n        if (i+1) not in lst:\n            return (i+1)**3\n    \n    return 0\n",
        "test": "assert     sum_squares([]) ==     0",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) and all([c in '0123456789' for c in w])])\n",
        "test": "assert     words_in_sentence('') == ''",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    if x[0] == n[0]:\n        return True\n    if x[1] == n[1]:\n        return True\n    return False\n",
        "test": "assert     simplify(\"1/2\", \"3/4\") == False",
        "num_ids": 1992,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    return sorted(nums, key=lambda num: sum([int(i) for i in str(num)]))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "    odd = 0\n    for n in nums:\n        if n % 10 % 2 == 1:\n            if n > 10:\n                odd += 1\n    return odd\n",
        "test": "assert     specialFilter([]) == 0, \"Wrong answer for []\"",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    return n*(n-1)*(n-2)//6\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        res = ()\n        for i in planets:\n            if bf(planet1,i) == ():\n                continue\n            else:\n                if bf(planet2, i) == ():\n                    continue\n                else:\n                    if bf(planet1,i) < bf(planet2,i):\n                        res = res + (i,)\n                    else:\n                        continue\n        return re",
        "test": "assert     bf('EARTH', 'MERCURY') == ()",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    lst = list(set(lst))\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return n\n",
        "test": "assert     x_or_y(101, 2, 1) == 1",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    \n    sum_of_odds = 0\n    for i in lst:\n        if i > 0 and not i % 2:\n            sum_of_odds += i ** 2\n    return sum_of_odds\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    # return [abs(game[i]-guess[i]) for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare(game = [5, 6, 7, 8, 9], guess = [5, 6, 7, 8, 9]) == [0, 0, 0, 0, 0]",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    # your code goes here\n    extensions_strength = []\n    for extension in extensions:\n        caps = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                caps += 1\n            if char.islower():\n                sm += 1\n        strength = caps - sm\n        extensions_strength.append([strength, extension])\n    extensions_strength = sorted(extensions_strength)\n    return class_name + '.' + extensions_strength[-1][1]\n",
        "test": "assert     Strongest_Extension('Burgers', ['EQrsh', 'ShBrBGs', 'QsWXrQS']) == 'Burgers.QsWXrQS'",
        "num_ids": 3619,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    return (b in a) or (b in a+a) or (b in a+a+a) or (b in a+a+a+a) or (b in a+a+a+a+a) or (b in a+a+a+a+a+a) or (b in a+a+a+a+a+a+a) or (b in a+a+a+a+a+a+a+a)",
        "test": "assert     not cycpattern_check(\"abcd\", \"efgh\")",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    even_count, odd_count = 0, 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(1) == (0, 1)",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "    assert 1 <= number <= 1000, \"numerical input out of range. Try numbers between 1 and 1000.\"\n    tens = {1: 'x', 2: 'xx', 3: 'xxx', 4: 'xxxx', 5: 'v', 6: 'vv', 7: 'vvv', 8: 'vvvv', 9: 'ix', 10: 'x',\n            100: 'c', 200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd', 600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm',\n            1000:'m'}\n    ones = {0: '', 1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix'}\n    if number in tens:\n        return tens[number]\n    else:\n        return tens[number//10] + ones[number % 10]\n",
        "test": "assert     int_to_mini_roman(9) == \"ix\"",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    return all([a**2 + b**2 == c**2, a**2 + c**2 == b**2, b**2 + c**2 == a**2])\n",
        "test": "assert     not right_angle_triangle(3, 4, 6)",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    # print(sorted(words, key=len, reverse=True))\n    # for i in sorted(words, key=len, reverse=True):\n    #     print(i)\n    # return sorted(words, key=len, reverse=True)[0]\n    # OR\n    return max(words, key=len)\n",
        "test": "assert     find_max([\"c\", \"d\", \"b\", \"a\"]) == \"c\"",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    result = [number, remaining]\n    if remaining < need:\n        number = number + remaining\n        remaining = 0\n    else:\n        remaining = remaining - need\n    result = [number, remaining]\n    return result",
        "test": "assert     eat(0, 0, 5) == [0, 5]",
        "num_ids": 2032,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    result = operand[0]\n    for i in range(0, len(operand)-1):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"-\"], [2,3])         == 5",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "    i=0\n    while i < len(s):\n        if s[i].isalpha():\n            s = s[:i]+s[i].swapcase()+s[i+1:]\n        i+=1\n    return s\n",
        "test": "assert     solve('abcC') == 'ABCc'",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    if text is None:\n        return None\n    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    integers = []\n    if a % 2!= 0:\n        a -= 1\n    if b % 2!= 0:\n        b += 1\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n",
        "test": "assert     generate_integers(a=2, b=9) == [2, 4, 6, 8]",
        "num_ids": 943,
        "indeed": false
    }
]