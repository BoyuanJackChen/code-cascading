[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return any(x1 > threshold > x2 for x1, x2 in zip(numbers, numbers[1:]))\n",
        "test": "assert     has_close_elements([1.0, 1.1, 2.0, 2.1, 3.0, 3.1], 0.1) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not paren_string:\n        return []\n",
        "test": "assert     separate_paren_groups(\"()()\") == [\"(())\", \"()\"]"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    import math\n    int_part = math.floor(number)\n    decimal_part = number - int_part\n    if decimal_part >= 1:\n        decimal_part = 1\n    else:\n        decimal_part = 0\n    return decimal_part\n",
        "test": "assert     truncate_number(3.14) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,2,3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    numbers_sum = sum(numbers)\n    numbers_mean = numbers_sum / len(numbers)\n    return sum([abs(n - numbers_mean) for n in numbers]) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1]) == 0.0, \"All elements are the same\""
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    numbers_length = len(numbers)\n    if numbers_length == 0:\n        return []\n    if numbers_length == 1:\n        return [numbers[0], delimeter]\n    return [numbers[0], delimeter] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5], 10) == [1, 10, 2, 10, 3, 10, 4, 10, 5, 10]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    ans = []\n    # paren_string = '(' + paren_string[1:]\n    # paren_string = paren_string[:-1]\n    # print(paren_string)\n    # a = paren_string.split()\n    # a = a[0]\n    # print(a)\n    # print(paren_string.split())\n    # ans = []\n    # for i in range(len(paren_string)):\n    #     if paren_string[i] == '(':\n    #         ans.append(paren_string[:i+1])\n    #         print(ans)\n    # print(ans)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # paren_string = paren_string.replace(' ', '')\n    # print(paren_string)\n    # paren_string = '(' + paren_string[1:]\n    # print(paren_string)\n    # paren_string = paren_string[:-1]\n    # print(paren_string)\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # print(paren_string.split('('))\n    # a = paren_string.split('(')\n    # print(a)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # print(paren_string)\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # print(paren_string.split('('))\n    # print(paren_string.split('(')[0])\n    # paren_string = paren_string.split('(')[0]\n    # print(paren_string)\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string",
        "test": "assert     parse_nested_parens(\"()()\") == [1, 1]"
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert     filter_by_substring([\"apple\", \"banana\", \"cherry\"], \"ba\") == [\"banana\"]"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    \n    sum_ = 0\n    prod = 1\n    for n in numbers:\n        sum_ += n\n        prod *= n\n    return sum_, prod\n",
        "test": "assert     sum_product([1, 2]) == (3, 2)"
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max(numbers[i], max_list[i - 1]))\n    return max_list\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    palindrome = []\n    for i in range(len(string) + 1):\n        if is_palindrome(string[i:]):\n            palindrome.append(string[i:])\n    return string + ''.join(palindrome)[::-1]\n",
        "test": "assert     is_palindrome('racecar')"
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n",
        "test": "assert     string_xor(\"101010\", \"101010\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if not strings:\n        return None\n    else:\n        max_str = max(strings, key=len)\n        return max_str\n",
        "test": "assert     longest([\"abc\", \"\", \"ab\", \"1221\"]) == \"1221\""
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n",
        "test": "assert     all_prefixes(\"flow\") == [\"f\", \"fl\", \"flo\", \"flow\"]"
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    music_list = music_string.split('|')\n    result_list = []\n    for music_note in music_list:\n        if music_note == 'o':\n            result_list.append(4)\n        elif music_note == 'o|':\n            result_list.append(2)\n        else:\n            result_list.append(1)\n    return result_list\n",
        "test": "assert     parse_music('o|o|o|o') == [4, 4, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    i = 0\n    count = 0\n    while i < len(string):\n        if string[i:].startswith(substring):\n            count += 1\n            i = i + len(substring)\n        else:\n            i = i + 1\n    return count\n",
        "test": "assert     how_many_times(\"baba\", \"baba\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    num_list = list(map(int, numbers.split(' ')))\n    num_list.sort()\n    num_list = [str(i) for i in num_list]\n    return''.join(num_list)\n",
        "test": "assert     sort_numbers(\"nine seven three four eight five six two one zero\") == \"zero one two three four five six seven eight nine\""
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n",
        "test": "assert     find_closest_elements([2, 3, 4, 1]) == (2, 4)"
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    numbers = sorted(numbers)\n    min_n = numbers[0]\n    max_n = numbers[-1]\n    unit_scale = lambda x: (x - min_n) / (max_n - min_n)\n    return list(map(unit_scale, numbers))\n",
        "test": "assert     rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # return [x for x in values if isinstance(x, int)]\n    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "test": "assert     strlen('abc') == 3"
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for divisor in range(5, math.floor(math.sqrt(n)), 6):\n        if n % divisor == 0 and n // divisor <= divisor:\n            return divisor\n    return n\n",
        "test": "assert     largest_divisor(2) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # number of factors for n\n    number_factors = 0\n    if n == 1:\n        return [1]\n    while n % 2 == 0:\n        number_factors += 1\n        n //= 2\n    if n == 1:\n        return [2] * number_factors\n    # find number of factors for a\n    a = 3\n    while a * a <= n:\n        if n % a == 0:\n            number_factors += 1\n            b = n // a\n            if a == b:\n                return [a] * number_factors\n            n //= b\n            a = 3\n        else:\n            a += 2\n    return [n] * number_factors\n",
        "test": "assert     factorize(2) == [2]"
    },
    {
        "number": 26,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    temp_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in temp_list:\n            temp_list.append(numbers[i])\n    return temp_list\n",
        "test": "assert     remove_duplicates([1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    return \"\".join(\n        [\n            c.upper() if c.islower() else c.lower()\n            for c in string\n        ]\n    )\n    \n",
        "test": "assert     flip_case(\"\") == \"\""
    },
    {
        "number": 28,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert     concatenate(['asdf', 'qwer', 'zxcv']) == 'asdfqwerzxcv'"
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # filter_by_prefix = []\n    # for s in strings:\n    #     if s.startswith(prefix):\n    #         filter_by_prefix.append(s)\n    # return filter_by_prefix\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['aaa', 'bbb', 'bbc'], 'bb') == ['bbb', 'bbc']"
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [num for num in l if num > 0]\n",
        "test": "assert     get_positive([1, 2, 3, -4]) == [1, 2, 3]"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    non_zero_xs = []\n    for x in xs:\n        if x!= 0:\n            non_zero_xs.append(x)\n    if len(non_zero_xs) == 0:\n        return 0\n    if len(non_zero_xs) == 1:\n        return -non_zero_xs[0]\n    if len(non_zero_xs) % 2 == 1:\n        non_zero_xs = non_zero_xs[:-1]\n    return math.pi / (math.pi - math.atan(poly(non_zero_xs, 0)))\n",
        "test": "assert     poly([0, 0], 1) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    #Create a new list to store the values of l that are not divisible by three\n    l_not_div_by_three = []\n    #Create a new list to store the values of l that are divisible by three\n    l_div_by_three = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            l_div_by_three.append(l[i])\n        else:\n            l_not_div_by_three.append(l[i])\n    #Finally, insert the two lists into l\n    l_not_div_by_three.extend(l_div_by_three)\n    #Return the sorted list\n    return sorted(l_not_div_by_three)\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Incorrect.\""
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique(['a', 'b', 'c', 'd', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']"
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if len(l) == 0:\n        return\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n        else:\n            pass\n    return count\n",
        "test": "assert     fizz_buzz(13) == 1"
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    even_l = []\n    odd_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_l.append(l[i])\n        else:\n            odd_l.append(l[i])\n    even_l = sorted(even_l)\n    return odd_l + even_l\n",
        "test": "assert     sort_even([1,2,3,4,5,6]) == [2,4,6,1,3,5]"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # take groups of three characters and cycle them\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to get decoded string\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(s + \"a\")) == s + \"a\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    f1, f2 = 1, 1\n    counter = 0\n    while counter < n:\n        f1, f2 = f2, f1 + f2\n        counter += 1\n        if is_prime(f2):\n            if counter == n:\n                return f2\n    \ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False if n is not prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(29)\n    True\n    \"\"\"\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     prime_fib(2) == 3, 'Incorrect'"
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    count = 0\n    for num in l:\n        for num2 in l:\n            for num3 in l:\n                if num + num2 + num3 == 0:\n                    count += 1\n    if count == 0:\n        return False\n    elif count == 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -4, -5, -1, 1, 6]) is True"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return 2 * (n * n - n)\n",
        "test": "assert     car_race_collision(1) == 0, \"wrong result for car_race_collision(1)\""
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return [e+1 for e in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4], \"incr_list([1, 2, 3]) == [2, 3, 4]\""
    },
    {
        "number": 43,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, 4]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    result = \"\"\n    x_remainder = x\n    base_num = base\n    while x_remainder >= base:\n        remainder = x_remainder % base\n        x_remainder = x_remainder // base\n        result = str(remainder) + result\n    result = str(x_remainder) + result\n    return result\n",
        "test": "assert     change_base(10, 2) == \"1010\""
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return.5 * a * h\n",
        "test": "assert "
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    return 0.5 * (l[len(l)//2 - 1] + l[len(l)//2])\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3, \"Wrong implementation!\""
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return text.casefold() == text[::-1].casefold()\n",
        "test": "assert     is_palindrome(\"a\")"
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    m = 1\n    while n >= p:\n        m *= 2\n        n -= p\n    return m * n if n else m\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\""
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    vowels = 'aeiou'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "test": "assert     remove_vowels('hello') == 'hll'"
    },
    {
        "number": 52,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if l == []:\n        return True\n    else:\n        return below_threshold(l[1:],t) if l[0] > t else below_threshold(l[1:],t)\n",
        "test": "assert     below_threshold([1, 2, 3], 4) == True"
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    counter = dict()\n    for s in s0:\n        if s in counter:\n            counter[s] += 1\n        else:\n            counter[s] = 1\n    for s in s1:\n        if s in counter and counter[s] > 0:\n            counter[s] -= 1\n        else:\n            return False\n    for k, v in counter.items():\n        if v!= 0:\n            return False\n    return True\n",
        "test": "assert     same_chars('apple', 'apple') == True"
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(2) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\":\n            if brackets_stack and brackets_stack[-1] == \"<\":\n                brackets_stack.pop()\n            else:\n                return False\n    return not brackets_stack\n",
        "test": "assert     correct_bracketing('<><>') == True"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if len(l) < 2:\n        return True\n    if len(l) == 2:\n        return l[0] < l[1]\n    return l[0] < l[1] or l[0] > l[1]\n",
        "test": "assert     monotonic([1, 2, 3, 4, 5]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    result = []\n    i = 0\n    j = 0\n    l1 = list(l1)\n    l2 = list(l2)\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n",
        "test": "assert     sorted(common([], [])) == []"
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    for i in range(n - 1, 2, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert     largest_prime_factor(13195)!= 5"
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return n * (n + 1) // 2\n",
        "test": "assert     sum_to_n(1) ==     1,     \"sum_to_n(1) should be 1\""
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    brackets = list(brackets)\n    open_bracks = []\n    for b in brackets:\n        if b == '(':\n            open_bracks.append(b)\n        elif b == ')':\n            if len(open_bracks) == 0:\n                return False\n            else:\n                open_bracks.pop()\n    return len(open_bracks) == 0\n",
        "test": "assert     correct_bracketing('()')"
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    d = [0] * len(xs)\n    for i in range(len(xs) - 1):\n        d[i + 1] = d[i] + xs[i + 1] * (i + 1)\n    return d\n",
        "test": "assert     derivative([]) == []"
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    count = 0\n    for ch in s:\n        if ch.lower() in \"aeiouy\":\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('foobar') == 3, 'wrong result for \\'foobar\\''"
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     str(circular_shift(12, 1)) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     digitSum('3+5j') == None"
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    #first of all we need to get the string to a list of ints and not a list of strings\n    l = s.split()\n    #setting our variables\n    apples = 0\n    oranges = 0\n    mangos = 0\n    for i in l:\n        if 'apples' in i:\n            apples = int(i[0])\n        elif 'oranges' in i:\n            oranges = int(i[0])\n        elif'mangos' in i:\n            mangos = int(i[0])\n    return apples - oranges - mangos\n",
        "test": "assert     fruit_distribution(\"65 23 12\", 10) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    #O(n)\n    if not arr: return []\n    arr = sorted(arr, key=lambda x: x if x % 2 == 0 else 100)\n    return [arr[0], arr.index(arr[0])]\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    greatest = 0\n    frequency = 0\n    for item in lst:\n        if item > frequency:\n            greatest = item\n    return greatest\n",
        "test": "assert     search([5]) == 5"
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if lst == []:\n        return []\n    # else:\n    #     tmp = lst.copy()\n    #     tmp.sort()\n    #     tmp.reverse()\n    #     return tmp\n    tmp = [min(lst)]\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    tmp.append(min(lst))\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    tmp.append(min(lst))\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    return tmp\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     triangle_area(10, 10, 30) == 25.00, \"triangle_area(10, 10, 30) == 25.00 failed\""
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if w < sum(q) and is_balanced(q):\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1],2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if not arr:\n        return 0\n    \n    # Get the minimum number of changes required to make the array palindromic\n    # Return the minimum number of changes\n    \n    return 0\n",
        "test": "assert     smallest_change([1, 2, 3, 2, 1]) == 0, \"Wrong output\""
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    lst1_len = []\n    lst2_len = []\n    for i in lst1:\n        lst1_len.append(len(i))\n    for i in lst2:\n        lst2_len.append(len(i))\n    if len(lst1_len) < len(lst2_len):\n        for i in lst1_len:\n            if i in lst2_len:\n                lst2_len.remove(i)\n        return lst1\n    elif len(lst1_len) > len(lst2_len):\n        for i in lst2_len:\n            if i in lst1_len:\n                lst1_len.remove(i)\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match(['aa','bb','cc'],['a','b','bb']) == ['aa','bb','cc'], \"Should be ['aa','bb','cc']\""
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    p = 2\n    while p <= a/2:\n        if a % p!= 0:\n            p += 1\n        else:\n            a /= p\n            p = 2\n    return a == 1\n",
        "test": "assert     is_multiply_prime(11) == False"
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return int(x**(1/n))==x**(1/n)\n",
        "test": "assert     is_simple_power(0, 3) == True, \"Wrong result\""
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return a**(1/3)%1 == 0\n",
        "test": "assert     iscube(7) == False"
    },
    {
        "number": 78,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # your code here\n    num = num.upper()\n    num = list(num)\n    return num.count(\"2\") + num.count(\"3\") + num.count(\"5\") + num.count(\"7\") + num.count(\"B\") + num.count(\"D\")\n",
        "test": "assert     hex_key(num = \"\") == False, \"Empty string\""
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return 'db'+('0'*bin(decimal).count('1')+'db').lstrip('0')\n",
        "test": "assert     decimal_to_binary(1) == '0b1'"
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    #SOLUTION\n    # convert s to a list\n    # create a set of the unique letters from s\n    # return True if len(s) >= 3 and set(s) == len(set(s))\n    # return False otherwise\n    return True if len(s) >= 3 and len(set(s)) == len(s) else False\n",
        "test": "assert     is_happy(\"abcd\") == True"
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    grades_letter = []\n    for grade in grades:\n        if grade == 4:\n            grades_letter.append('A+')\n        elif grade == 3.5:\n            grades_letter.append('A')\n        elif grade == 3:\n            grades_letter.append('A-')\n        elif grade == 2.5:\n            grades_letter.append('B')\n        elif grade == 2:\n            grades_letter.append('B-')\n        elif grade == 1.5:\n            grades_letter.append('C')\n        elif grade == 1:\n            grades_letter.append('C-')\n        elif grade == 0.7:\n            grades_letter.append('D')\n        elif grade == 0:\n            grades_letter.append('D-')\n        else:\n            grades_letter.append('E')\n    return grades_letter\n    \ndef geometric_mean(grades):\n    \"\"\"\n    Write a function to find the geometric mean of a list of grades.\n    In case of invalid input, the function should return 0.\n    Example:\n    geometric_mean([1.0, 2.0, 3.0]) ==> 1.764705882352941\n    \"\"\"\n    try:\n        return gmean(grades)\n    except:\n        return 0\ndef arithmetic_mean(grades):\n    \"\"\"\n    Write a function to find the arithmetic mean of a list of grades.\n    In case of invalid input, the function should return 0.\n    Example:\n    geometric_mean([1.0, 2.0, 3.0]) ==> 1.764705882352941\n    \"\"\"\n    try:\n        return mean(grades)\n    except:\n        return 0\ndef to_percentage(grades):\n    \"\"\"\n    Write a function to convert a list of grades in percentage.\n    The function should return 0 in case of invalid input.\n    Example:\n    to_percentage([1.0, 2.0, 3.0]) ==> ['75.0%', '50.0%', '25.0%']\n    \"\"\"\n    try:\n        return ['{}%'.format(int(x*100)) for x in grades]\n    except:\n        return 0\ndef to_letter(grades):\n    \"\"\"\n    Write a function to convert a list of grades into a list of letters.\n    The function should return 0 in case of invalid input.\n    Example:\n    to_percentage([1.0, 2.0, 3.0]) ==> ['A', 'B', 'C']\n    \"\"\"\n    try:\n        return [numerical_letter_grade(x) for x in grades]\n    except:\n        return 0\ndef to_pass(grades):\n    \"\"\"\n    Write a function to check if a list of grades is a valid grade scale.\n    To check the validity of a list of grades, the function should return False in case of invalid input.\n    Example:\n    to_letter([1.0, 2.0, 3.0]) ==> False\n    to_letter([1.0, 2.0, 3.0, 4.0]) ==> True\n    \"\"\"\n    try:\n        return grades == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    except:\n        return False\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0])     == [    'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+'], 'incorrect result'"
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    x = len(string)\n    if x == 2:\n        return True\n    else:\n        if x % 2!= 0:\n            for i in range(3, x, 2):\n                if x % i == 0:\n                    return False\n                else:\n                    return True\n    return False\n",
        "test": "assert     prime_length(\"banana\") == False, \"string length is not prime\""
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # Create list of length n to store the digits of n.\n    digits = [0] * n\n    # Iterate through each digit of n.\n    for i in range(n):\n        # Increment the appropriate digit in the list.\n        digits[i] = i + 1\n    # Initialize variables to store count of 1s and count of n.\n    count1 = 0\n    countn = 0\n    # Iterate through digits.\n    for digit in digits:\n        # Check if the digit is 1 and if so increment count1.\n        if digit == 1:\n            count1 += 1\n        # Check if the digit is n and if so increment countn.\n        elif digit == n:\n            countn += 1\n    # Return the sum of count1 and countn.\n    return count1 + countn\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    \n    return bin(N)[2:]\n",
        "test": "assert     (solve(5) == '101')"
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    result = []\n    i = 0\n    while(i < len(lst)):\n        if(i%2!= 0):\n            if(isinstance(lst[i], int)):\n                result.append(lst[i])\n        i = i + 1\n    return sum(result)\n    \n",
        "test": "assert     add([]) == 0"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    word_list = s.split()\n    ordered_list = []\n    for word in word_list:\n        new_word = ''\n        for char in word:\n            new_word += char\n            new_word +=''\n        ordered_list.append(new_word[0:-1])\n    new_sentence =''.join(ordered_list)\n    return new_sentence[0:-1]",
        "test": "assert     anti_shuffle(\"Shuffle Words\") == \"Shuffled Words\", \"Wrong result for anti_shuffle\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    result = []\n    for i, row in enumerate(lst):\n        for j, x in enumerate(row):\n            if x == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))",
        "test": "assert     [[(1, 2), (2, 3), (3, 2)],"
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    n = len(array)\n    if n == 0:\n        return []\n    max_value = array[0]\n    min_value = array[0]\n    max_index = 0\n    min_index = 0\n    for i in range(1, n):\n        if array[i] > max_value:\n            max_value = array[i]\n            max_index = i\n        if array[i] < min_value:\n            min_value = array[i]\n            min_index = i\n    \n    if max_index < min_index:\n        array[min_index] = max_value\n        array[max_index] = min_value\n    else:\n        array[max_index] = min_value\n        array[min_index] = max_value\n    return array\n",
        "test": "assert     [1,4,7,9,9] == sort_array([9,4,7,1,9])"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    my_string = s.lower()\n    # Create dictionary with characters and corresponding values\n    letter_dict = {}\n    for letter in my_string:\n        if letter not in letter_dict:\n            letter_dict[letter] = 0\n        letter_dict[letter] += 1\n    # Create list with each character's value\n    letters = []\n    for letter in letter_dict:\n        letters.append(letter_dict[letter])\n    # Create string with each character's value\n    letters_string = \"\"\n    for i in range(len(letters)):\n        letters_string += str(letters[i])\n    # Create dictionary with characters and corresponding values\n    reverse_letter_dict = {}\n    for key, value in letter_dict.items():\n        reverse_letter_dict[value] = key\n    # Create list with each character's value\n    reverse_letters = []\n    for value in letters:\n        reverse_letters.append(reverse_letter_dict[value])\n    # Create string with each character's value\n    reverse_letters_string = \"\"\n    for letter in reverse_letters:\n        reverse_letters_string += letter\n    # Create string with each character's value\n    encrypt_string = \"\"\n    for i in range(len(reverse_letters)):\n        # Find corresponding character to rotated version of the original string\n        encrypt_string += reverse_letters_string[(i*2)] * letters_string[i]\n    return encrypt_string\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    # solution 1\n    if len(lst) < 2:\n        return None\n    \n    # solution 2\n    if len(lst) == 2:\n        return min(lst)\n    \n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 2, 3]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    cnt = 0\n    for i in S.split('.'):\n        if i[0:3] == \"I \":\n            cnt += 1\n    return cnt\n",
        "test": "assert     is_bored('What do you think I love?') == 0, 'I love nothing'"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    a = x + y\n    b = x + z\n    c = y + z\n    if a == b or a == c:\n        return True\n    elif b == a or b == c:\n        return True\n    elif c == a or c == b:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(1, 2, 1) == True, 'Fails any_int test 2'"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # Write code here:\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    print(lst)\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] if lst[0]>lst[1] else lst[1]\n    return max(skjkasdkd(lst[:-1]), skjkasdkd(lst[1:]))\n    # if lst == []:\n    #     return 0\n    # for i in lst:\n    #     if isPrime(i):\n    #         return sum(int(c) for c in str(i))\n    # return max(skjkasdkd(lst[:-1]), skjkasdkd(lst[1:]))\n",
        "test": "assert     skjkasdkd([1,2,3,4,5]) == 5"
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if not dict:\n        return False\n    if len(dict) == 1:\n        return True\n    if not all(isinstance(key,str) for key in dict.keys()):\n        return False\n    if not all(isinstance(value,str) for value in dict.values()):\n        return False\n    if not all(key.islower() for key in dict.keys()):\n        return False\n    if not all(value.isupper() for value in dict.values()):\n        return False\n    return True\n",
        "test": "assert     check_dict_case({'A': 1, 2: 3, 4: 5, '6': 7}) == False, \"Error\""
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        primes = []\n        i = 2\n        while len(primes) < n:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return a*b\n",
        "test": "assert "
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    \n    return sum([1 for char in s[1::2] if char.isupper()])\n    \n",
        "test": "assert     count_upper('abcde') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(1) == 1"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n%2==1:\n        return [n]+[n+2]*(n-1)\n    else:\n        return [n]+[n+2]*(n-1)+[n]\n",
        "test": "assert     make_a_pile(1)             == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return s.split()\n",
        "test": "assert     type(words_string('')) is list, \"Ouput should be a list\""
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if y < x:\n        return -1\n    elif y % 2 == 0:\n        if x % 2 == 0:\n            return min(x, y)\n        else:\n            return max(x, y)\n    else:\n        return -1\n        \n",
        "test": "assert     choose_num(-5, 5) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(round(sum([n, m]) / 2)))[2:]\n",
        "test": "assert     rounded_avg(1, 5) == '11'"
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    nums = []\n    for num in x:\n        num = str(num)\n        if '0' not in num and '2' not in num and '4' not in num and '6' not in num and '8' not in num:\n            nums.append(int(num))\n    nums.sort()\n    return nums\n",
        "test": "assert     unique_digits([]) == []"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n",
        "test": "assert     by_length([9, 9, 9]) == \"Nine Nine Nine\""
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    factorial_list = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            factorial_list.append(i * factorial_list[-1])\n        else:\n            factorial_list.append(sum(list(range(1, i+1))))\n    return factorial_list\n",
        "test": "assert     f(1) ==     [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert     even_odd_palindrome(2) == (1, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sum([sum([int(j) for j in str(i) if int(j) >= 0]) for i in arr])\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    arr.sort()\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # this is a standard data structure.\n    # we go through every element in list1 and check if it is even\n    # if we find one that is odd, then return no\n    # if every element is even, then return yes\n    for item in lst1:\n        if item%2!=0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], [5,4,3,2,1,6]) == 'NO'"
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    d = {}\n    test = test.lower()\n    for i in test:\n        d[i] = test.count(i)\n    return d\n",
        "test": "assert     histogram(\"a\") == {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    d = {}\n    for i in range(len(c)):\n        if c[i] not in d:\n            d[c[i]] = 1\n        else:\n            d[c[i]] += 1\n    l = len(s)\n    s1 = s[:l]\n    # print(s1)\n    for key in d:\n        count = 0\n        for i in range(l-1):\n            if s1[i] == key:\n                count += 1\n        if d[key] > count:\n            s1 = s1[:l-d[key]]\n    # print(s1)\n    flag = False\n    if s1 == s1[::-1]:\n        flag = True\n    return (s1,flag)\n",
        "test": "assert     reverse_delete(\"aabb\", \"ab\") == (\"aabb\", False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return [f'{len([char for char in str_lst[i] if int(char) % 2!= 0])}'\n            for i in range(len(lst))]\n",
        "test": "assert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 0, 0, 0, 0],     \"odd_count() failed\""
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    sum_so_far = min(nums)\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            temp_sum = sum(nums[i:j+1])\n            sum_so_far = min(temp_sum, sum_so_far)\n    return sum_so_far\n",
        "test": "assert     minSubArraySum([5, 1, 3, -5, 4, -1]) == -5"
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    wells_count = len(grid)\n    wells_length = len(grid[0])\n    row_count = len(grid)\n    column_count = len(grid[0])\n    if wells_length == 1:\n        return 0\n    # sum of all grid cells\n    total = sum(sum(row) for row in grid)\n",
        "test": "assert     max_fill([[1]], 1) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Wrong Answer\""
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # your code here\n    return []\n",
        "test": "assert     select_words(\"hippopotamus\", 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    \n    for index, letter in enumerate(reversed(word)):\n        if letter.lower() in 'aeiouy':\n            return word[len(word) - index - 1]\n    return ''\n",
        "test": "assert     get_closest_vowel('far') == 'a', \"case 1\""
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return 'Yes' if lst[0] + lst[1] == lst[1] + lst[0] else 'No'\n",
        "test": "assert     match_parens([\"()()\", \"()()\"]) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return sorted(arr, reverse=True)[:k]",
        "test": "assert     sorted(maximum([5, 5, 3, 2, 4, 3], 2)) == [5, 5]"
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    sum=0\n    for i in lst:\n        if i%2!=0:\n            sum+=i\n    return sum\n",
        "test": "assert     solution([12,7,5,65,14]) == 66"
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum([i for i in arr[:k] if len(str(i)) <= 2])\n",
        "test": "assert     add_elements([0, 0, 0], 1) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    result = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = 3*n+1\n        result.append(n)\n    return result\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    months = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n    \n    if date == '':\n        return False\n    else:\n        date_list = date.split('-')\n        if len(date_list[0]) < 2 or len(date_list[1]) < 2 or len(date_list[2]) < 4:\n            return False\n        if int(date_list[0]) in range(1,13) and int(date_list[1]) in range(1,32) and date_list[0] in months:\n            if int(date_list[0]) == 2 and int(date_list[1]) in range(1,29) and int(date_list[2]) in range(0,100):\n                return True\n            elif int(date_list[0]) in [1,3,5,7,8,10,12] and int(date_list[1]) in range(1,32):\n                return True\n            elif int(date_list[0]) in [4,6,9,11] and int(date_list[1]) in range(1,31):\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "test": "assert     valid_date('') == False, \"Invalid date\""
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('abc') == ['abc']"
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst == lst[::-1]\n    # pass\n",
        "test": "assert     is_sorted([]) is True"
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return \"NO\"\n    \nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))\n    ",
        "test": "assert     intersection((1, 3), (2, 2)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        result = 1\n        for i in arr:\n            result *= i\n        return sum(abs(i) for i in arr) * result\n",
        "test": "assert     prod_signs([0]) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def valid(grid, k):\n        \"\"\"\n        Validate the grid and the k.\n        \"\"\"\n        N = len(grid)\n        # N rows, N columns\n        if N < 2:\n            return False\n",
        "test": "assert     minPath([[1, 2, 3],"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # if n == 1:\n    #     return [1, 3, 2]\n    # if n == 2:\n    #     return [3, 3, 8]\n    # return [1, 3, 2] + tri(n - 1)\n    # or\n    # array = [1, 3, 2]\n    # for i in range(3, n + 1):\n    #     if i % 2 == 0:\n    #         array.append(array[-1] + array[-2] + array[-3])\n    #     else:\n    #         array.append(array[-1] + array[-2] + array[-3])\n    # return array\n    # or\n    if n == 1:\n        return [1, 3, 2]\n    array = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            array.append(array[-1] + array[-2] + array[-3])\n        else:\n            array.append(array[-1] + array[-2] + array[-3])\n    return array\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    odd_digits = 1\n    while n > 0:\n        if (n % 10) % 2 == 0:\n            return 0\n        odd_digits *= (n % 10)\n        n = n // 10\n    return odd_digits\n",
        "test": "assert     digits(3) == 3"
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    list = []\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            list.append('[')\n            count += 1\n        elif string[i] == ']':\n            if count!= 0:\n                list.pop()\n                count -= 1\n            else:\n                break\n    if len(list) == 0:\n        return True\n    return False\n",
        "test": "assert     is_nested('[]') == True, 'Wrong answer'"
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    total = 0\n    for i in lst:\n        total += (i**2)\n    return int(round(total))\nprint(sum_squares([1,2,3]))\n",
        "test": "assert     sum_squares([0]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"balloons\") == True, \"wrong answer\""
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    for i, e in enumerate(arr):\n        if i+1 < len(arr) and e > arr[i+1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([1, 2, 3, 4]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if lst == []:\n        return None, None\n    if max(lst) < 0 or min(lst) > 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if type(a) == float or type(b) == float:\n        return a if a > b else b\n    else:\n        return None if a == b else a if a > b else b\n",
        "test": "assert     compare_one(1.0, 3.0) == 3.0"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n",
        "test": "assert     is_equal_to_sum_even(2) == False"
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    sum = 1\n    while n > 0:\n        sum *= n\n        n -= 1\n    return sum\n",
        "test": "assert     special_factorial(5) == 120"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return re.sub(r' +', '_', text)\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    import re\n    if len(re.findall(\"[0-9]\", file_name)) > 3:\n        return \"No\"\n    if len(re.findall(\"[0-9]\", file_name)) < 1:\n        return \"No\"\n    if \".\" in file_name:\n        if file_name.split(\".\")[0]!= \"\":\n            if file_name[file_name.split(\".\")[0].find(\".\")+1:] not in [\"exe\", \"dll\", \"txt\"]:\n                return \"No\"\n        elif file_name.split(\".\")[1] not in [\"exe\", \"dll\", \"txt\"]:\n            return \"No\"\n    else:\n        return \"No\"\n    return \"Yes\"\n    ",
        "test": "assert     file_name_check('d01') == 'No', 'ERROR!'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    lst_copy = lst.copy()\n    for index, item in enumerate(lst_copy):\n        if (index % 3 == 0) and (index % 4!= 0):\n            lst_copy[index] = lst_copy[index] ** 2\n        elif (index % 4 == 0) and (index % 3!= 0):\n            lst_copy[index] = lst_copy[index] ** 3\n    return sum(lst_copy)\n",
        "test": "assert     sum_squares([2, 4, 6]) == 32, \"Wrong answer\""
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n",
        "test": "assert     words_in_sentence(\"We are not what we should be! \") == \"We are not what we should be\", \"Some test cases not passed\""
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return False\n",
        "test": "assert     not simplify(\"7/12\", \"1/3\")"
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    ctr = 0\n    for i in nums:\n        if i > 10 and i % 2!= 0:\n            ctr += 1\n    return ctr\n",
        "test": "assert     specialFilter([10, 12, 15, 16, 20, 21, 25]) == 2"
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    planets = (\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n    )\n",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # lst = sorted(lst, key=len)\n    # print(lst)\n    # s = set(lst)\n    # print(s)\n    # for i in s:\n    #     if len(i) % 2!= 0:\n    #         lst.remove(i)\n    # print(lst)\n    return sorted(lst, key=lambda x: (len(x), x))\n",
        "test": "assert     sorted_list_sum([\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"]) == \\"
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2, 10, 20) == 10"
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Your code here\n    \n    # min() and max() functions in python can take an iterable as an argument,\n    # for example a list. If the argument passed in is a list, then the max()\n    # and min() functions return the maximum and minimum values in that list.\n    # We can use these values to find the maximum and minimum odd numbers in the list\n    \n    list1 = list(lst)\n    \n    if len(list1) == 0:\n        return 0\n        \n    if min(list1) < 0:\n        list1.remove(min(list1))\n        \n    if max(list1) > 0:\n        list1.remove(max(list1))\n    \n    \n    sum_of_odd_numbers = 0\n    for i in list1:\n        if i % 2!= 0:\n            sum_of_odd_numbers = sum_of_odd_numbers + i**2\n    return sum_of_odd_numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    #get the number of guesses\n    num_guesses = len(guess)\n    #create a new array to hold the differences\n    diff = []\n    #loop through the number of guesses\n    for i in range(0, num_guesses):\n        #get the difference between guess and score\n        diff_val = abs(guess[i] - game[i])\n        #add the difference to the new array\n        diff.append(diff_val)\n    return diff\n",
        "test": "assert     compare([0, 0], [0, 0]) == [0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    strongest_extension = ''\n    for extension in extensions:\n        if extension[0].isupper() and extension[1:].islower():\n            strength = len(extension) - len(extension.lower())\n        elif extension[0].islower() and extension[1:].isupper():\n            strength = len(extension) - len(extension.upper())\n        elif extension[0].isupper() and extension[1:].isupper():\n            strength = len(extension) - len(extension.lower())\n        else:\n            strength = len(extension) - len(extension.upper())\n        if strength >= len(strongest_extension):\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
        "test": "assert         Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])!= 'Slices.StuFfed'"
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    a = a.lower()\n    b = b.lower()\n    for i in range(len(a)):\n        if b in a:\n            return True\n        a = a[1:]+a[0]\n    return False\n",
        "test": "assert     cycpattern_check(\"waterbottle\", \"erbottlewat\") == True"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num//10\n    return (even, odd)\n",
        "test": "assert     even_odd_count(1) == (0, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman = \"\"\n    for i in range(len(values)):\n        count = int(number / values[i])\n        roman += numerals[i] * count\n        number -= values[i] * count\n    return roman\n",
        "test": "assert     int_to_mini_roman(1) == 'I'"
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    #return False\n    return math.isclose(math.pow(a, 2) + math.pow(b, 2), math.pow(c, 2))\n",
        "test": "assert     right_angle_triangle(5, 4, 4) == False, \"Incorrect output\""
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n",
        "test": "assert     find_max([\"abcdefg\", \"abcdefg\", \"abcdefg\"]) == \"abcdefg\""
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    if number < 0:\n        number = 0\n    if need < 0:\n        need = 0\n    if remaining < 0:\n        remaining = 0\n    \n    remaining -= need\n    number += need\n    \n    if remaining < 0:\n        remaining = 0\n        number -= need\n    \n    return [number, remaining]\n",
        "test": "assert     eat(0, 0, 1000) == [0, 1000]"
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '//':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"+\"], [2,3]) == 5"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = []\n    for c in s:\n        if c.isalpha():\n            result.append(c.swapcase())\n        else:\n            result.append(c)\n    return \"\".join(result)\n",
        "test": "assert     (solve(\"hello\") == \"HELLO\")"
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"ab\") == \"9a6e5e8082be4afc9cbbafc8efb917f4\""
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return [x for x in range(a, b+1) if x%2 == 0]\n",
        "test": "assert     generate_integers(2, 4) == [2, 4], 'incorrect'"
    }
]