[
    {
        "number": 0,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    if not isinstance(numbers, list) or not isinstance(threshold, float):\n        return False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2.1) == True"
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    open_brace_stack = []\n    results = []\n    for char in paren_string:\n        if char == '(':\n            open_brace_stack.append(char)\n        elif char == ')':\n            if len(open_brace_stack) == 0:\n                raise Exception('No open braces')\n            elif open_brace_stack[-1] == '(':\n                open_brace_stack.pop()\n                if len(open_brace_stack) == 0:\n                    results.append(''.join(open_brace_stack))\n                else:\n                    results.append(''.join(open_brace_stack) + '(')\n            else:\n                open_brace_stack.append(')')\n    return results\n",
        "test": "assert     separate_paren_groups(\"\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    return 0.0\n",
        "test": "assert     truncate_number(0.0) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    for i in operations:\n        if i < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,2,3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(mean - x) for x in numbers) / len(numbers)\n",
        "test": "assert         mean_absolute_deviation([0,0,0,0,0,0]) == 0.0"
    },
    {
        "number": 5,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([1], 1) == [1]"
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    nested_pars = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                continue\n            stack.pop()\n            if len(stack) == 0:\n                nested_pars.append(len(stack))\n    return nested_pars\n",
        "test": "assert     parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert filter_by_substring([\"python\", \"ruby\", \"nodejs\", \"perl\", \"scala\"], \"scala\") == ['scala']"
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    sum_ = 0\n    prod = 1\n    for number in numbers:\n        sum_ += number\n        prod *= number\n    return sum_, prod\n",
        "test": "assert     (sum_product([]) == (0, 1))"
    },
    {
        "number": 9,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    max_list: List[int] = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[0:i+1]))\n    return max_list\n",
        "test": "assert     rolling_max([5, 5, 5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5, 5, 5]"
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''",
        "test": "assert     is_palindrome(make_palindrome('aabaa')) == True"
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\""
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(12, 8) == 4"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    # Implement here - function body\n    result = []\n    for i in range(len(string) + 1):\n        result.append(string[0:i])\n    return result\n",
        "test": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]"
    },
    {
        "number": 15,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n    \ndef remove_first_and_last(lst: list) -> list:\n    \"\"\" Return a new list with the first and last items removed.\n    >>> remove_first_and_last([1, 2, 3, 4])\n    [2, 3]\n    >>> remove_first_and_last([1, 2, 3, 1])\n    [2, 3]\n    >>> remove_first_and_last([])\n    []\n    >>> remove_first_and_last([\"a\", \"b\", \"c\", \"d\"])\n    ['b', 'c']\n    \"\"\"\n    return lst[1:-1]\n    \ndef common_end(a: list, b: list) -> bool:\n    \"\"\"Return True if a and b have the same first and last elements.\n    >>> common_end([1, 2, 3], [7, 3])\n    True\n    >>> common_end([7, 3], [1, 2, 3])\n    True\n    >>> common_end([1, 2, 3], [7, 3, 2])\n    False\n    >>> common_end([1, 2, 3], [1, 3])\n    True\n    \"\"\"\n    return a[0] == b[0] or a[-1] == b[-1]\n    \ndef reverse_pair(txt: str) -> str:\n    \"\"\" Return the reverse pair of the input string.\n    >>> reverse_pair(\"May the fourth be with you\")\n    'you with be fourth the May'\n    >>> reverse_pair(\"That's not my string\")\n    \"I'm not that's my string\"\n    \"\"\"\n    return \" \".join(reversed(txt.split()))\n    \ndef sum_pairs(nums: list, goal: int) -> list:\n    \"\"\"Return a pair of values from nums whose sum is equal to goal.\n    >>> sum_pairs([1, 2, 2, 10], 4)\n    [2, 2]\n    >>> sum_pairs([4, 2, 10, 5, 1], 5)\n    [4, 1]\n    >>> sum_pairs([4, 2, 10, 5, 1], 6)\n    []\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == goal:\n                return [nums[i], nums[j]]\n    return []\n    \ndef find_letter_indices(txt: str, letter: str) -> list:\n    \"\"\"Return a list of the indices of all occurrences of letter in txt.\n    >>> find_letter_indices(\"abracadabra\", \"a\")\n    [0, 5, 10]\n    >>> find_letter_indices(\"abracadabra\", \"r\")\n    [7]\n    >>> find_letter_indices(\"abracadabra\", \"b\")\n    [1, 6]\n    \"\"\"\n    return [i for i in range(len(txt)) if txt[i] == letter]\n    \ndef double_index(lst: list, index: int) -> list:\n    \"\"\"Return a new list with the item at index in lst doubled.\n    >>> double_index([0, 1, 2], 0)\n    [0, 0, 2]\n    >>> double_index([0, 1, 2], 1)\n    [0, 2, 2]\n    >>> double_index([0, 1, 2], 2)\n    [0, 1, 4]\n    \"\"\"\n    return [lst[i] * 2 if i == index else lst[i] for i in range(len(lst))]\n    \ndef middle_way(a: list, b: list) -> list:\n    \"\"\"Return a list that consists of all but the first and last items of a and b.\n    >>> middle_way([1, 2, 3], [4, 5, 6])\n    [2, 3, 4, 5]\n    >>> middle_way([7, 7, 7], [3, 8, 0])\n    [7, 7, 8, 0]\n    >>> middle_way([5, 2, 9], [1, 4, 5])\n    [5, 2, 4]\n    \"\"\"\n    return a[1:-1]",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    if not string:\n        return 0\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "    parsed_music = music_string.split('|')\n    # you code here\n    return [len(note) for note in parsed_music]",
        "test": "assert     parse_music(\"o o o o| o o| o o| o.|.| |..| |..|.|\") == [4, 2, 1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            cnt += 1\n    return cnt\n",
        "test": "assert     how_many_times('substring','string') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    return \" \".join(sorted(numbers.split(\" \")))\n",
        "test": "assert     sort_numbers('one') == 'one'"
    },
    {
        "number": 20,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return (min(numbers), max(numbers))\n",
        "test": "assert find_closest_elements([0, 0]) == (0, 0), 'Wrong answer'"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    difference = maximum - minimum\n    if difference == 0:\n        return [0 for _ in range(len(numbers))]\n    return [(number - minimum) / difference for number in numbers]\n",
        "test": "assert     rescale_to_unit([0, 2, 1]) == [0, 1, 0.5]"
    },
    {
        "number": 22,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "test": "assert     filter_integers([1,2,3,4,5,6]) == [1,2,3,4,5,6]"
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello\") == 5"
    },
    {
        "number": 24,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if n < 1:\n        raise ValueError(\"Argument must be positive integer\")\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(4) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    result = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            n //= divisor\n            result.append(divisor)\n        divisor += 1\n    return result\n",
        "test": "assert     factorize(0) == []"
    },
    {
        "number": 26,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    \n    a = numbers[:]\n    numbers = []\n    \n    for i in a:\n        if i not in numbers:\n            numbers.append(i)\n    return numbers\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 27,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('abc') == 'ABC'"
    },
    {
        "number": 28,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    result = \"\"\n    for i in strings:\n        result += i\n    return result\n",
        "test": "assert     concatenate(['A', 'B', 'C']) == 'ABC'"
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([], \"\") == []"
    },
    {
        "number": 30,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    positive = []\n    for elem in l:\n        if elem >= 0:\n            positive.append(elem)\n    return positive\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n",
        "test": "assert     is_prime(4) == False"
    },
    {
        "number": 32,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    if not xs or len(xs) % 2:\n        raise ValueError(f\"Invalid coefficients for polynomial. Coefficients must be a list of even number of terms.\")\n    xs.sort()\n    xs.reverse()\n    x0 = xs[0]\n    for i in range(2, len(xs), 2):\n        coeff = xs[i]\n        x0 = x0 / x0 - coeff / (x0 - coeff)\n    return x0\n",
        "test": "assert     poly([0], 1) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l[i]\n    return sorted(l)\n",
        "test": "assert     sort_third([]) == [], \"The empty list is not sorted.\""
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return list(sorted(set(l)))\n",
        "test": "assert     unique([1,2,2,3,4]) == [1,2,3,4]"
    },
    {
        "number": 35,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for item in l:\n            if item > max:\n                max = item\n    return max\n",
        "test": "assert     max_element([4,6,2,4,4]) == 6"
    },
    {
        "number": 36,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(7) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    \n    return [l[i] for i in range(len(l)) if i % 2 == 0] + \\\n           sorted([l[i] for i in range(len(l)) if i % 2!= 0])\n    \nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))\n    print(sort_even([5, 6, 3, 4]))\n    print(sort_even([2, 4, 3]))\n    print(sort_even([5, 3, 2, 1]))\n    print(sort_even([7, 5, 3, 2, 1]))",
        "test": "assert     sort_even([2,2,2,2]) == [2,2,2,2], \"Wrong answer for sort_even([2,2,2,2])\""
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert group from cycling back to normal. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 5\n    b = 13\n    for i in range(3, n):\n        a, b = b, a + b\n        if is_prime(b):\n            break\n    return b\n",
        "test": "assert     prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    for i in l:\n        for j in l:\n            for k in l:\n                if (i + j + k == 0) and (i!= j) and (i!= k) and (j!= k):\n                    return True\n    return False\n",
        "test": "assert     not triples_sum_to_zero([1, 2, 3, 4, 5])"
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i < j:\n                if i % 2 == 0:\n                    if j % 2 == 1:\n                        count += 1\n                else:\n                    if j % 2 == 0:\n                        count += 1\n    return count\n",
        "test": "assert     car_race_collision(1) == 0, \"incorrect\""
    },
    {
        "number": 42,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]"
    },
    {
        "number": 43,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    l.sort()\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]:\n                return False\n            if l[i]!= l[i+1] and l[i]+l[i+1] == 0:\n                return True\n            if l[i]!= l[i+1] and l[i]+l[i+1]!= 0:\n                return False\n        return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x%base)\n",
        "test": "assert     change_base(11, 2) == '1011'"
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    return (a * h)/2\n",
        "test": "assert     triangle_area(1, 1) == 0.5"
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    f1 = 0\n    f2 = 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 4\n    while n > 4:\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n        n = n - 1\n    return f3\n",
        "test": "assert     0 == fib4(0)"
    },
    {
        "number": 47,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abbbba') == True, 'abbbba is a palindrome'"
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    modulo = 0\n    binary = \"{0:b}\".format(n)\n    for i in binary:\n        modulo = (2*modulo + int(i))%p\n    return modulo\n",
        "test": "assert     modp(2, 2) == 0"
    },
    {
        "number": 50,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\""
    },
    {
        "number": 51,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in text:\n        if char not in vowels:\n            new_string += char\n    return new_string\n",
        "test": "assert     remove_vowels(\"\") == '', 'incorrect result for \"\"'"
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3], 1) == False"
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return x + y\n",
        "test": "assert     add(3,2) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    d = {}\n    for char in s0:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    for char in s1:\n        if char in d:\n            d[char] -= 1\n        else:\n            return False\n    for k, v in d.items():\n        if v!= 0:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"bob\", \"bob\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    return 1 if n <= 1 else fib(n-1) + fib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 56,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if len(bracket_stack) == 0:\n                return False\n            if bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            else:\n                return False\n    if len(bracket_stack)!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     correct_bracketing('<><') == False, 'ERROR'"
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if len(l) <= 1:\n        return True\n    if l[0] >= l[1]:\n        return monotonic(l[1:])\n    elif l[0] <= l[1]:\n        return monotonic(l[1:])\n",
        "test": "assert     monotonic([1,2,3]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    # Set the variables\n    l1_set = set(l1)\n    l2_set = set(l2)\n    # Make a set of the common elements\n    common_set = l1_set.intersection(l2_set)\n    # And return it\n    return sorted(common_set)\n",
        "test": "assert [] == common([], [])"
    },
    {
        "number": 59,
        "max_answer_num": 27,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    factors = []\n    # Use a while loop to find all prime factors.\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # The largest prime factor is either the last element in the list or the last\n    # element in the original n.\n    return factors[-1] if len(factors) > 0 else n\n",
        "test": "assert     largest_prime_factor(3) == 3"
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return n*(n+1)//2\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        elif bracket == ')':\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    return False\n",
        "test": "assert not     correct_bracketing(\")(()\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    return [i*j for i,j in zip(xs[1:],range(1, len(xs)))]\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"I have a cat\") == 4"
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    y = str(x)[:shift]\n    return y[::-1] + y[:-shift]\n",
        "test": "assert not ('0' == circular_shift('1', 1))"
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return sum([ord(c.upper()) for c in s if c.upper().isalpha()])\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    # check the edge case if the input is empty\n    if s == \"\":\n        return 0\n    \n    # check the edge case if the input is empty\n    if n == 0:\n        return 0\n    \n    # convert the string into a list of fruits and the total number of fruits\n    s_list = s.split()\n    total_fruits = int(s_list[0]) + int(s_list[1])\n    \n    # if the total number of fruits is not equal to the input number, return the total number of fruits\n    if total_fruits!= n:\n        return total_fruits\n    \n    # if the total number of fruits is equal to the input number, \n    # return the number of the mango fruits. The mango fruits are the number of fruits left in the basket minus the total number of the fruits.\n    return n - int(s_list[0]) - int(s_list[1])\n",
        "test": "assert     fruit_distribution('0', 0) == 0, \"prob 3\""
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    # Your code here\n    d = {}\n    for x in lst:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    max_freq = max(d.values())\n    max_freq_num = -1\n    for x in d:\n        if d[x] >= max_freq:\n            max_freq = d[x]\n            max_freq_num = x\n    if max_freq_num == -1:\n        return -1\n    else:\n        return max_freq_num\n",
        "test": "assert     search([1,1,1,1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    return sorted(lst, key=lambda x: x if lst.index(x)==0 else lst[lst.index(x)-1])",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0] * sides[1] / 2), 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(1, 3, 4) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    return q[::] == q[::-1] and sum(q)<=w\n",
        "test": "assert     will_it_fly([1, 2, 3], 5) is False, \"Wrong output\""
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[~i]:\n            changes += 1\n    return changes\n",
        "test": "assert     smallest_change([1,2,3]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return [word for word in lst1 if len(word) < len(lst2)]\n",
        "test": "assert     total_match([\"abc\", \"def\", \"ghijk\"], [\"abc\", \"def\", \"ghijk\"]) == [\"abc\", \"def\", \"ghijk\"], \"total_match with same chars in both lists\""
    },
    {
        "number": 75,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    return False\n",
        "test": "assert     is_multiply_prime(65) == False"
    },
    {
        "number": 76,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    return x % n == 0",
        "test": "assert     is_simple_power(7, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    cube = round(pow(a,1./3.))\n    return cube**3==a\n",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    if num == \"\":\n        return 0\n    digits = list(num)\n    return sum([1 for n in digits if n in [\"1\", \"3\", \"7\", \"B\", \"D\"]])",
        "test": "assert hex_key(\"\") == 0"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    # Your code here\n    return 'db' + str(bin(decimal))[2:].zfill(36) + 'db'\n",
        "test": "assert     decimal_to_binary(15) == 'db1011'"
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        i = 0\n        j = 0\n        while j < len(s):\n            if i == len(s) - 1:\n                return True\n            if s[i] == s[i+1]:\n                if i + 1 == len(s) - 1:\n                    return True\n                if j == len(s) - 1:\n                    return True\n                i += 2\n            else:\n                i += 1\n            j += 1\n        return False\n",
        "test": "assert     not is_happy(\"aa\")"
    },
    {
        "number": 81,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    grade_equation = {4.0: 'A+',\n                       3.7: 'A',\n                       3.3: 'A-',\n                       3.0: 'B+',\n                       2.7: 'B',\n                       2.3: 'B-',\n                       2.0: 'C+',\n                       1.7: 'C',\n                       1.3: 'C-',\n                       1.0: 'D+',\n                       0.7: 'D',\n                       0.0: 'D-',\n                       0.0: 'E'}\n    return [grade_equation[i] for i in grades]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) "
    },
    {
        "number": 82,
        "max_answer_num": 29,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    return len(string) in range(1,101) and not any([string.count(letter) for letter in string])\n",
        "test": "assert     prime_length('not prime') is False"
    },
    {
        "number": 83,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    if n == 1:\n        return 1\n    return sum([\n        starts_one_ends(i) * (n - i - 1)\n        for i in range(n)\n    ])\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    if (0 <= N <= 10000):\n        binary_number = bin(N).replace(\"0b\", \"\")\n        return str(binary_number)\n    else:\n        return \"0\"\n",
        "test": "assert     solve(1) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    if len(lst)%2 == 0:\n        return lst[::2]\n    else:\n        return lst[1::2]\n",
        "test": "assert     add([]) == [] "
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "    s = s.replace(' ', '')\n    s = sorted(s)\n    s = ''.join(s)\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    return s\n",
        "test": "assert     anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    for i in range(len(result)):\n        result[i] = (result[i][0], result[i][1])\n    for i in range(len(result)):\n        result[i] = (result[i][0], len(lst[result[i][0]]) - result[i][1] - 1)\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result",
        "test": "assert     get_row([[1, 2, 3, 4], [5, 6], [7, 8, 9]], 10) == []"
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    sorted_array = array.copy()\n    for i in range(1, len(sorted_array)):\n        j = i\n        while j > 0 and (sorted_array[j] < sorted_array[j - 1]):\n            sorted_array[j], sorted_array[j - 1] = sorted_array[j - 1], sorted_array[j]\n            j -= 1\n    return sorted_array\n",
        "test": "assert     sort_array([]) == [],     \"error\""
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    return \"\".join([chr((ord(c)-ord('a')+2)%26+ord('a')) for c in s])\n",
        "test": "assert     encrypt(\"abcd\")!= \"abdc\""
    },
    {
        "number": 90,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return min(lst)\n    else:\n        return sorted(set(lst))[1]\n",
        "test": "assert     next_smallest([0, 1, 2, 3, 4, 5]) == 1"
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "    boredom = 0\n    for c in S:\n        if c == \"I\":\n            boredom += 1\n    return boredom\n",
        "test": "assert     is_bored(\"I really enjoy my job\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if int(x) == int(y) + int(z):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    \n    \n",
        "test": "assert     any_int(2,0,1) == False, \"Wrong output\""
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    \n    new_string = ''\n    for char in message:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        elif char.isspace():\n            new_string +=''\n        else:\n            new_string += char\n    return new_string\n        \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it into a message\n    that swaps case of all letters, replacing all vowels in the message with\n    the letter that appears 2 places behind that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TEST'\n    >>> decode('This is a message')\n    'THIS IS A MESSAGE'\n    \"\"\"\n    \n    new_string = ''\n    for char in message:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        elif char.isspace():\n            new_string +=''\n        else:\n            new_string += char\n    return new_strin",
        "test": "assert     'G' == encode('g')"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "    # TODO: your code here\n    # raise NotImplemented\n    pass\n",
        "test": "assert     skjkasdkd([9, 10, 3, 6]) == 7, \"9 and 10 are the largest prime values in the list\""
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return all(type(i)==str for i in dict.keys()) and all(type(i)==str for i in dict.values()) and len(dict)>0\n",
        "test": "assert     check_dict_case({\"a\":\"A\", \"b\":\"B\"}) == True, \"Different case dictionary, result should be True\""
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    \n    prime_count = 0\n    result = []\n    for i in range(n):\n        if is_prime(i):\n            prime_count += 1\n            result.append(i)\n    \n    return result\n",
        "test": "assert count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    #Answer\n    return a*b\n",
        "test": "assert     (multiply(12, 0) == 0)"
    },
    {
        "number": 98,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            if s[i] in \"AEIOU\":\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"bcdefghijklmnop\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return round(float(value)) if float(value).is_integer() else int(round(float(value)))\n",
        "test": "assert     closest_integer(\"14\") == 14"
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    # special cases\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    # check if n is even\n    elif n % 2 == 0:\n        # n is even\n        lst = [n]\n        while n % 2 == 0:\n            n = n / 2\n            lst.append(n)\n        return lst\n    # n is odd\n    elif n % 2 == 1:\n        lst = [n]\n        while n % 2 == 1:\n            n = (n + 1) / 2\n            lst.append(n)\n        return lst\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    \n    return s.replace(\" \", \"\").split(\",\")\n",
        "test": "assert     words_string('this, is, a, test') == ['this', 'is', 'a', 'test']"
    },
    {
        "number": 102,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    \n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if y - x + 1 == i:\n                return i\n            else:\n                return -1\n",
        "test": "assert     choose_num(13, 15) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int(bin(int((n + m) / 2))[2:])\n        # return int((n + m) / 2)\n",
        "test": "assert     rounded_avg(0, 0) == 0"
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    #using set for faster calculation\n    return sorted(set([i for i in x if i%2!= 0]))\n",
        "test": "assert     unique_digits([1,2,3,4,5]) == [1,3,5]"
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "    arr.sort()\n    arr.reverse()\n    str_arr = []\n    digit_1 = 1\n    digit_2 = 2\n    digit_3 = 3\n    digit_4 = 4\n    digit_5 = 5\n    digit_6 = 6\n    digit_7 = 7\n    digit_8 = 8\n    digit_9 = 9\n    for i in range(len(arr)):\n        if arr[i] == digit_1:\n            str_arr.append('One')\n        elif arr[i] == digit_2:\n            str_arr.append('Two')\n        elif arr[i] == digit_3:\n            str_arr.append('Three')\n        elif arr[i] == digit_4:\n            str_arr.append('Four')\n        elif arr[i] == digit_5:\n            str_arr.append('Five')\n        elif arr[i] == digit_6:\n            str_arr.append('Six')\n        elif arr[i] == digit_7:\n            str_arr.append('Seven')\n        elif arr[i] == digit_8:\n            str_arr.append('Eight')\n        elif arr[i] == digit_9:\n            str_arr.append('Nine')\n    return str_arr\n",
        "test": "assert     by_length([1, 5, 4, 3, 2, 9]) == ['Nine', 'Five', 'Four', 'Three', 'Two', 'One']"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # list_result = []\n    # for i in range(1, n+1):\n    #     if i % 2 == 0:\n    #         list_result.append(i)\n    #     else:\n    #         list_result.append(sum(range(1, i+1)))\n    # return list_result\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "    return (n // 2 - n % 2, n // 2) if n % 2 == 0 else (n // 2, n // 2 + 1)",
        "test": "assert     even_odd_palindrome(2) == (1, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    return len([i for i in arr if sum(map(int, list(str(abs(i))))) > 0])\n",
        "test": "assert     count_nums([]) == 0, \"Wrong answer\""
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    if arr is None or len(arr) == 0:\n        return True\n    # Base Case\n    if len(arr) == 1:\n        return True\n    # We know that arr[i] > arr[i+1] if there is more than one element in the array\n    # Else arr[i] == arr[i+1] if there is only one element in the array.\n    # So if we know that arr[i] > arr[i+1] and arr[i+1] > arr[i+2] then we can\n    # say that we can do right shift operation at most 2 times and we can get\n    # the sorted array.\n    i = 0\n    while i < len(arr) - 1 and arr[i] > arr[i+1]:\n        i += 1\n    if i == len(arr) - 1:\n        return True\n    # Recursively check if we can get the sorted array by doing right shift\n    # operation at most 2 times.\n    return move_one_ball(arr[0:i+1]) and move_one_ball(arr[i+1:])\n",
        "test": "assert     move_one_ball([1]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    # TODO: Implement the solution\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    if len(lst1) == len(lst2):\n        if set(lst2) == set(lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for x in lst2:\n            if x % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert     exchange([1, 3, 5], [2, 4, 6]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    hist = {}\n    for i in test:\n        if i not in hist.keys():\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    return hist\n",
        "test": "assert     histogram(\"a\") ==    {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    if len(c)==0:\n        return (s,True)\n    s1=s.replace(c, \"\")\n    r=s1[::-1]\n    if r==s1:\n        return (s1,True)\n    return (s,False)\n",
        "test": "assert     reverse_delete('a','a') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    output_list = []\n    for num in lst:\n        count = 0\n        for letter in num:\n            if int(letter) % 2 == 1:\n                count += 1\n        output_list.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \" of the \" + str(lst.index(num)+1) + \"nput.\")\n    return output_list\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    sum = nums[0]\n    for i in range(1,len(nums)):\n        sum += nums[i]\n        nums[i] = sum\n    return min(nums)\n",
        "test": "assert     minSubArraySum([1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "    return sum(sum(row) for row in grid)\n",
        "test": "assert     max_fill([[0, 1], [1, 0]], 1) == 2"
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))",
        "test": "assert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,4,8,3,5,6,7]"
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    l = s.split()\n    res = []\n    for word in l:\n        if len(word) == n and word.count('a')+word.count('e')+word.count('i')+word.count('o')+word.count('u') == n:\n            res.append(word)\n    return res\n",
        "test": "assert     select_words(\"\"    , 6) == []"
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    if len(word) < 3:\n        return \"\"\n    start = end = -1\n    for index, letter in enumerate(word):\n        if letter in \"aeiouAEIOU\":\n            if start == -1:\n                start = index\n            else:\n                end = index\n    if start == end == -1:\n        return \"\"\n    if start == 0:\n        return \"\"\n    if end == len(word) - 1:\n        return \"\"\n    return word[start]\n",
        "test": "assert     get_closest_vowel(\"kkwokw\")     == \"o\""
    },
    {
        "number": 119,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    if len(lst) % 2!= 0:\n        return 'No'\n    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['())', '()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    return sorted(arr)[-k:]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5], 1) == [5]"
    },
    {
        "number": 121,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    \n    answer = 0\n    for i in lst:\n        if i % 2 == 0:\n            answer += i\n    return answer\n        \n",
        "test": "assert     solution([0]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    # Return the sum of the elements of arr where the sum of elements is\n    # less than or equal to 2 digits.\n    nums = arr[:k]\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert     add_elements([0, 0, 0, 0], 2) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    result = []\n    while n!= 1:\n        result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return result + [1]\n",
        "test": "assert     [1] == get_odd_collatz(1)"
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    try:\n        valid_date = list(map(int,date.split('-')))\n        if len(date) == 10:\n            if 1<=int(valid_date[0])<=12 and 1<=int(valid_date[2])<=31:\n                if int(valid_date[0]) == 4 or int(valid_date[0]) == 6 or int(valid_date[0]) == 9 or int(valid_date[0]) == 11:\n                    if int(valid_date[1])>=1 and int(valid_date[1])<=30:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=29:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                elif int(valid_date[0]) == 2:\n                    if int(valid_date[1])>=1 and int(valid_date[1])<=28:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=29:\n                            return True\n                        else:\n                            return False\n                    elif int(valid_date[1])>=1 and int(valid_date[1])<=30:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=31:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                elif int(valid_date[0]) == 1 or int(valid_date[0]) == 3 or int(valid_date[0]) == 5 or int(valid_date[0]) == 7 or int(valid_date[0]) == 8 or int(valid_date[0]) == 10 or int(valid_date[0]) == 12:\n                    if int(valid_date[1])>=1 and int(valid_date[1])<=31:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=30:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     not valid_date(\"02-02-2021\")"
    },
    {
        "number": 125,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    # Your code here\n    txt = txt.replace(\",\",\" \")\n    if \" \" in txt:\n        return txt.split(\" \")\n    else:\n        l = 0\n        for i in txt:\n            if ord(i)%2!= 0:\n                l += 1\n        return [l]\n",
        "test": "assert     split_words('hi there mister') == ['hi', 'there','mister']"
    },
    {
        "number": 126,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    \n    return all(a <= b for a, b in zip(lst, lst[1:]))\n",
        "test": "assert     is_sorted([1, 2, 3]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    # Your code here\n    #print(interval1, interval2)\n    if interval1 == interval2:\n        return \"YES\"\n    \n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[1] < interval2[1] and interval1[0] > interval2[0]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    \n    return \"NO\"\n    # pass\n",
        "test": "assert     intersection([(1, 3), (2, 4)], [(3, 6), (5, 7)]) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    if not arr:\n        return None\n",
        "test": "assert     prod_signs([]) == None, \"Empty array\""
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    path = [0] * k\n    lst_path = []\n    index = 0\n",
        "test": "assert     minPath("
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    else:\n        fib = [1, 3]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2] + fib[i])\n        return fib\n",
        "test": "assert     tri(1) == [1]"
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    p = 1\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            p = 0\n        else:\n            p *= i\n    return p\n",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 21,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "    \n    if len(string) <= 2:\n        return False\n    \n    left = 0\n    right = 0\n    nested_counter = 0\n    \n    for bracket in string:\n        \n        if bracket == \"[\":\n            left += 1\n        \n        elif bracket == \"]\":\n            right += 1\n            \n        else:\n            return False\n            \n        if right < left:\n            nested_counter += 1\n        \n        if nested_counter > 1:\n            return True\n        \n    return False\n    \nprint(is_nested('[][]') == False)\n",
        "test": "assert     is_nested('[()[()]]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    return sum([round(x**2) for x in lst])\n",
        "test": "assert     sum_squares([1, 2, 3]) == (1**2 + 2**2 + 3**2)"
    },
    {
        "number": 134,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalnum()\n",
        "test": "assert     check_if_last_char_is_a_letter('hello world! ') == False"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    best_index = -1\n    for i, el in enumerate(arr):\n        if best_index == -1 or arr[best_index] < el:\n            best_index = i\n    return best_index\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "    negative = []\n    positive = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    if negative:\n        return (max(negative), min(positive))\n    elif positive:\n        return (max(positive), min(positive))\n    else:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if type(a) == type(b):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif type(a) == float or type(b) == float:\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "test": "assert     (compare_one(2, 1) == 2)"
    },
    {
        "number": 138,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    return True if sum([i for i in range(1, n+1) if i % 2 == 0]) == 4 else False\n",
        "test": "assert     is_equal_to_sum_even(1) == False"
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    factorial = 1\n    for num in range(n, 0, -1):\n        factorial *= num\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"   \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    return text\n",
        "test": "assert     fix_spaces(\"hello world\") == \"hello_world\""
    },
    {
        "number": 141,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    if file_name.count(\".\") == 1 and file_name.split(\".\")[0]!= \"\" and file_name[0].isalpha():\n        if len(file_name.split(\".\")[1]) in range(1,4):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "test": "assert     file_name_check('some.dude.exe') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    if not lst:\n        return 0\n    elif len(lst) == 1:\n        return lst[0] ** 2\n    elif len(lst) == 2:\n        return lst[0] ** 2 + lst[1] ** 2\n    else:\n        sum_squares = 0\n        for i in range(len(lst)):\n            if i % 3 == 0 and i % 4!= 0:\n                sum_squares += lst[i] ** 2\n            elif i % 4 == 0 and i % 3!= 0:\n                sum_squares += lst[i] ** 3\n            else:\n                pass\n        return sum_squares\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "    return''.join([word for word in sentence.split() if is_prime(len(word))])\n",
        "test": "assert     words_in_sentence(\"\") == \"\""
    },
    {
        "number": 144,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    \n    x = x.replace('/', '')\n    n = n.replace('/', '')\n    x = int(x)\n    n = int(n)\n    return x % n == 0\n",
        "test": "assert     (simplify(\"1/3\", \"2/3\") is False)"
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in list(str(x))]))\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n    \nprint(specialFilter([15, -73, 14, -15]))\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 5"
    },
    {
        "number": 147,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    # code here\n    import math\n    def isDivisibleBy3(number):\n        return number % 3 == 0\n    count = 0\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if isDivisibleBy3(i*i - i + 1) and isDivisibleBy3(j*j - j + 1):\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    try:\n        planet1 = planets.index(planet1)\n        planet2 = planets.index(planet2)\n        result = [planets[i] for i in range(planet1+1, planet2)] + [planets[i] for i in range(planet2+1, planet1, -1)]\n        return tuple(result)\n    except:\n        return ()\n",
        "test": "assert     bf('Earth', 'Mercury') == ()"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    # Code goes here\n    return sorted(list(set(lst)), key = lambda x: (-len(x), x))\n",
        "test": "assert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"], \"Incorrect output for the list ['a', 'b', 'c', 'd', 'e']\""
    },
    {
        "number": 150,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    \n    if n % 2 == 1:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2, 2, 2) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return sum([i*i for i in lst if i % 2 == 1])\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "    score, guess = list(game), list(guess)\n    return [0 if guess[i] == score[i] else abs(guess[i] - score[i]) for i in range(len(score))]\n",
        "test": "assert     compare([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [0,0,0,0,0,0,0], \"Compare Error\""
    },
    {
        "number": 153,
        "max_answer_num": 21,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "    # your code here\n    return class_name + '.' + extensions[0]\n",
        "test": "assert     Strongest_Extension('Cheese', ['Cheese', 'Cheese']) == 'Cheese.Cheese'"
    },
    {
        "number": 154,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    pattern_arr = []\n    pattern_arr.extend(a)\n    pattern_arr.extend(a[::-1])\n    result = False\n    for x in pattern_arr:\n        if b.find(x)!= -1:\n            result = True\n            break\n    return result\n",
        "test": "assert     cycpattern_check('xyz', 'abcd') == False"
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return (num // 10 % 10, num % 10)\n",
        "test": "assert     (even_odd_count(3), (1, 2))"
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    mini_roman_dict = {\n        1000 :'m', 900 : 'cm', 500 : 'd', 400 : 'cd', 100 : 'c', 90 : 'xc',\n        50 : 'l', 40 : 'xc', 10 : 'x', 9 : 'ix', 5 : 'v', 4 : 'iv', 1 : 'i'\n    }\n    roman_numeral = \"\"\n    for num in mini_roman_dict:\n        if number == 0:\n            break\n        count = number // num\n        roman_numeral += count * mini_roman_dict[num]\n        number -= (count * num)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    #raise NotImplementedError\n    if not (a + b > c and a + c > b and b + c > a):\n        return False\n    if a == b or a == c or b == c:\n        return True\n    if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1,1,3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    \n    words_dict = {}\n    #use dict to find the words with same chars \n    #and find the one with max unique chars\n    \n    for word in words:\n        unique_chars = len(set(word))\n        words_dict[word] = unique_chars\n    \n    max_val = max(words_dict.values())\n    \n    #return the key with max unique chars if more than one key have max unique chars\n    max_unique_words = []\n    for key in words_dict:\n        if words_dict[key] == max_val:\n            max_unique_words.append(key)\n    \n    return sorted(max_unique_words)[0]\n",
        "test": "assert     find_max([\"clown\", \"clown\", \"clown\"]) == \"clown\""
    },
    {
        "number": 159,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if remaining == 0:\n        return [number,0]\n    elif number < need:\n        return [number,remaining]\n    else:\n        return [number-need,remaining-need]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    result = 0\n    for i in range(0, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result\n",
        "test": "assert     do_algebra([\"+\",\"-\",\"+\"], [3,4,5,2]) == 4"
    },
    {
        "number": 161,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    a = [i if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' else i.lower() if i.isupper() else i.upper() for i in s]\n    return ''.join(a)\n",
        "test": "assert     solve(\"12345\") == \"12345\", \"2\""
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if len(text) == 0:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    ret = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret",
        "test": "assert     generate_integers(2, 5) == [2, 4]"
    }
]