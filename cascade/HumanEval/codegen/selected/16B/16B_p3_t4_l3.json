[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return any([abs(numbers[i] - numbers[i + 1]) <= threshold for i in range(len(numbers) - 1)])\n",
        "test": "assert     has_close_elements([1, 2, 3], 0.1) == False",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    grouped_parens = []\n    current_group = ''\n",
        "test": "assert     separate_paren_groups( '((a)(b))' ) == [ 'a', 'b', '' ]",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return math.floor(number) - math.ceil(number)\n",
        "test": "assert ",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return False\n",
        "test": "assert     below_zero([10, 5, -1, 1]) == False",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return 0\n    average = sum(numbers) / n\n    sum_of_absolute_differences = 0\n    for number in numbers:\n        sum_of_absolute_differences += abs(number - average)\n    return sum_of_absolute_differences / n\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    numbers = list(numbers)  # don't modify the original list\n    if not numbers:\n        return []\n    i = 0\n    while i < len(numbers) - 1:\n        numbers.insert(i + 1, delimeter)\n        i += 2\n    return numbers\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5], 4) == [1, 4, 4, 0, 2, 4, 4, 3, 4, 5, 4]",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    groups = paren_string.split(' ')\n    max_level = 0\n    nesting_levels = []\n    for group in groups:\n        if ')' not in group:\n            nesting_levels.append(0)\n            continue\n        else:\n            for i in range(len(group)):\n                if group[i] == ')':\n                    nesting_levels.append(group[:i].count('(') - group[:i].count(')'))\n                    break\n    return nesting_levels\n",
        "test": "assert     parse_nested_parens(\"((()))\") == [0, 1, 1]",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring([\"flow\", \"flight\", \"flight\"], \"\"), [\"flow\", \"flight\", \"flight\"]",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "test": "assert     sum_product([1, 2, 3, 4]) == (10, 24)",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index == 0:\n            result.append(number)\n        elif number > result[-1]:\n            result.append(number)\n        else:\n            result.append(result[-1])\n    return result\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Find the longest postfix of the supplied string that is a palindrome\n    postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            postfix = string[i:]\n            break\n",
        "test": "assert     make_palindrome('ac') == 'acba'",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return ''.join([str(int(x!= y)) for x, y in zip(a, b)])\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "test": "assert     longest([\"a\", \"b\", \"a\", \"c\"]) == \"a\"",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n",
        "test": "assert     greatest_common_divisor(6,     9) == 3",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    prefixes: List[str] = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return \" \".join(list(map(str, range(n + 1))))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    distinct_characters = set()\n    for char in string.lower():\n        distinct_characters.add(char)\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters('abcABC') == 3",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [len(notation) for notation in music_string.split('|') if notation!= '']\n",
        "test": "assert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
        "num_ids": 2237,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    matches = 0\n    # find the index of the first match\n    i = string.find(substring)\n    while i >= 0:\n        matches += 1\n        i = string.find(substring, i+1)\n    return matches\n",
        "test": "assert ",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    return''.join(numbers_list)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # find the minimum and maximum numbers\n    # sort the list and return the closest pair\n    return min(numbers), max(numbers)\n",
        "test": "assert     find_closest_elements([1, 1]) == (1, 1)",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert rescale_to_unit([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 0.2, 0.4, 0.6, 0.8, 1, 1, 1, 1, 1, 1]",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [i for i in values if type(i) == int]\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n",
        "test": "assert strlen('') == 0",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n",
        "test": "assert     largest_divisor(15) == 3",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    result = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            result.append(i)\n            n = n / i\n    return result\n",
        "test": "assert     (factorize(1.0) == [1])",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    unique_nums = set()\n    unique_nums_list = []\n    for num in numbers:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            unique_nums_list.append(num)\n    return unique_nums_list\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return \"\".join([char.swapcase() for char in string])\n    # list_string = list(string)\n    # for i in range(len(list_string)):\n    #     if list_string[i].isupper():\n    #         list_string[i] = list_string[i].lower()\n    #     else:\n    #         list_string[i] = list_string[i].upper()\n    # return \"\".join(list_string)\n",
        "test": "assert     flip_case(\"123456789\") == \"123456789\"",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['a', 'b', 'c']) == 'abc'",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"c\") == [\"cherry\", \"coconut\"]",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([0, -1, -2, -3, 4])     == [4]",
        "num_ids": 1131,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(5) == True",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(xs) % 2!= 0:\n        raise TypeError(\"len(xs) must be even\")\n    xs = [0] * (len(xs) // 2) + xs\n    a, b = xs[-1], xs[-2]\n    xs = xs[:-2]\n    for x in xs:\n        if x == 0:\n            break\n        t = a / b\n        a, b = b, a - b * t\n    return round(t, 2)\n",
        "test": "assert ",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    #Write your code here\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return [l[0]] + sort_third(l[1:])\n        #return [l[0]] + sort_third(l[1:]) + [l[0]]\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sorted(set(l))",
        "test": "assert     unique([1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"unique\"",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3]) == 3",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 7 == 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    length = len(l)\n    odds = [l[i] for i in range(length) if i % 2 == 1]\n    evens = [l[i] for i in range(length) if i % 2 == 0]\n    evens.sort()\n    l[::2] = evens\n    return l\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert ",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    current = 2\n    prev = 1\n    count = 3\n    while count < n:\n        current, prev = current + prev, current\n        if is_prime(current):\n            count += 1\n    return current\n",
        "test": "assert     prime_fib(2) == 2",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    l = set(l)\n    for x in l:\n        if x not in l:\n            continue\n        for y in l:\n            if x + y not in l:\n                continue\n            for z in l:\n                if x + y + z == 0 and y < z:\n                    return True\n    return False",
        "test": "assert     triples_sum_to_zero([-2, -1, 1, 2, 3, 4]) == True, \"Check the example\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    m = n // 2\n    collisions = 0\n    while collisions < n:\n        cars = [True] * (n+1)\n        index = 0\n        while index < n:\n            cars[index] = True\n            cars[(index+1)*(-1)] = True\n            collisions += (cars[index] and cars[(index+1)*(-1)])\n            index += 1\n    return collisions\n",
        "test": "assert     car_race_collision(2) == 2",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(l) == 1:\n        return False\n    else:\n        for i in l:\n            for j in l:\n                if i + j == 0 and i!= j:\n                    return True\n        return False\n    \ndef quadratic_roots(a,b,c):\n    \"\"\"\n    quadratic_roots takes three integers as input, a, b, and c, and returns\n    the two integers that form the real solution to the quadratic equation\n    ax^2 + bx + c = 0. If no real solution exists, it returns \"No Real Roots\"\n    >>> quadratic_roots(1,2,1)\n    (-0.5, 0.5)\n    >>> quadratic_roots(1,1,1)\n    (-1.0, 1.0)\n    >>> quadratic_roots(1,2,3)\n    'No Real Roots'\n    >>> quadratic_roots(-5,2,6)\n    (-1.0, 2.0)\n    >>> quadratic_roots(1,-2,1)\n    'No Real Roots'\n    \"\"\"\n    d = math.sqrt(b**2 - 4*a*c)\n    if d == 0:\n        return(-b / (2*a))\n    elif d >= 0:\n        return(((-b) + d) / (2*a), ((-b) - d) / (2*a))\n    else:\n        return 'No Real Roots'\n    \ndef hash_it(s):\n    \"\"\"\n    hash_it takes a string as an input and returns the hash value of the string.\n    If the string is not a string, it raises a TypeError.\n    >>> hash_it('python')\n    377204329849653965\n    >>> hash_it(1234)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: must be str, not int\n    \"\"\"\n    if type(s)!= str:\n        raise TypeError('must be str, not'+ str(type(s)))\n    hv = 0\n    for c in s:\n        hv = hv + ord(c)\n    return hv % 100\n",
        "test": "assert     pairs_sum_to_zero([1,-2,3,-4]) == False",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert     change_base(10, 2) == '1010'",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return (h * a) / 2\n",
        "test": "assert     triangle_area(10,10) == 50, \"triangle area is wrong\"",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(1) == 0",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('asdfdsa') == True",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert 0 <= n < p, 'n is out of range'\n    # You will probably want to use the fact that:\n    #  pow(x, n, p) is 1 iff x^n is a non-residue modulo p.\n    # Use this to find the correct result!\n    return pow(2, n, p)\n",
        "test": "assert     modp(5, 7) == 2",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"barbados\")) == \"barbados\"",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    vowels = 'aeiou'\n    \n    result = ''\n    \n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    \n    return resul",
        "test": "assert     remove_vowels(\"I have a cat, dog and a mat.\") == \"hm t ym d m\"",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 3, 2, 6], 5) == False",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars('', '') == True",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert n >= 0, 'n must be positive or zero'\n    return n if n <= 1 else fib(n-1) + fib(n-2)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
        "test": "assert ",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    bracket_pairs = []\n    for i in range(len(brackets) - 1):\n        if brackets[i] == \"<\":\n            bracket_pairs.append(\">\")\n        elif brackets[i] == \">\":\n            bracket_pairs.append(\"<\")\n    if brackets[-1] == \"<\":\n        bracket_pairs.append(\">\")\n    elif brackets[-1] == \">\":\n        bracket_pairs.append(\"<\")\n    return bracket_pairs == list(brackets)\n",
        "test": "assert     correct_bracketing( \"<h1>hello\" )             == False",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(l) < 2:\n        return True\n    \n    d = None\n    for i in range(1, len(l)):\n        if d is None:\n            d = l[i] - l[i-1]\n            continue\n        if l[i] - l[i-1]!= d:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result.sort()\n    return result\n",
        "test": "assert     common([], []) == []",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(11) == 11",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return n*(n+1)//2\n",
        "test": "assert ",
        "num_ids": 65,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    brackets = [i for i in brackets if i in \"()\"]\n    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     correct_bracketing('(()()()())') == True",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    res = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        res[i] = xs[i + 1] * (i + 1)\n    return res\n",
        "test": "assert     derivative([]) == []",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    count = 0\n    i = 0\n    for c in s:\n        if c in 'aeiouyAEIOUY':\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     vowels_count(\"bbb\") == 0, 'wrong result for bbb'",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    assert isinstance(x, int)\n    assert isinstance(shift, int)\n    \n    shift %= len(str(x))\n    x = str(x)\n    return x[shift:] + x[:shift]\n",
        "test": "assert ",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    retval = 0\n    for c in s:\n        if ord(c) >= ord('A') and ord(c) <= ord('Z'):\n            retval += ord(c) - ord('A') + 1\n    return retval\n",
        "test": "assert     digitSum(\"\") == \\",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    \n    nums = s.split()\n    \n    if nums[0] == '0' or nums[1] == '0':\n        return 0\n    elif int(nums[0]) < int(nums[1]):\n        return 0\n    else:\n        return int(nums[0]) - int(nums[1])\n",
        "test": "assert     fruit_distribution('3 2',5) == 1, \"Test 1 failed\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    # Time: O(n)\n    # Space: O(1)\n    evens = []\n    for node in arr:\n        if node % 2 == 0:\n            evens.append(node)\n    \n    if len(evens) == 0:\n        return []\n    \n    min_value = min(evens)\n    index = evens.index(min_value)\n    return [min_value, index]\n",
        "test": "assert pluck([]) == []",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    greatest = 0\n    for i in lst:\n        if lst.count(i) > i:\n            greatest = i\n    return greatest if greatest > 0 else -1\n",
        "test": "assert     search([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9]) == -1 ",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if len(lst) % 2 == 0:\n            result.append(min(lst))\n            lst = [num for num in lst if num > min(lst)]\n        else:\n            result.append(max(lst))\n            lst = [num for num in lst if num < max(lst)]\n    return result\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if (a + b) > c and (a + c) > b and (b + c) > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s-a) * (s-b) * (s-c)), 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(2, 2, 7) == -1",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    def is_palindrome(string):\n        return string == string[::-1]\n    return is_palindrome(q) and sum(q) <= w\n",
        "test": "assert     will_it_fly([10, 20, 30, 40], 80) == False",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    elif len(lst1) == len(lst2):\n        return lst1\n",
        "test": "assert     total_match([\"xyz\", \"xy\", \"z\"], [\"x\", \"y\", \"z\"]) == [\"xyz\"]",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    for i in range(3,int(a**0.5)+1,2):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(12) == False",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if x == 1:\n        return True\n    elif x < 1 or n < 1:\n        return False\n    else:\n        if x % n == 0:\n            return True\n        return is_simple_power(x, n-1)\n",
        "test": "assert     is_simple_power(1, 1) is True, \"1**1=1\"",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if a < 0:\n        return True\n    if a ** (1/3) % 1 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # TODO: your code here\n    return 0\n",
        "test": "assert     hex_key(0) == 0",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return \"db\" + str(bin(decimal).replace(\"0b\", \"\")) + \"db\"\n",
        "test": "assert     decimal_to_binary(17) == 'db11011'",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    last_occur = {}\n    for i in range(len(s)):\n        last_occur[s[i]] = i\n    \n    while len(s) > 2:\n        s = \"\".join([x for x in s if x!= s[1]])\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 1):\n            if last_occur[s[i]] == last_occur[s[i+1]]:\n                return False\n            last_occur[s[i]] = i\n    return True\n",
        "test": "assert     is_happy('abcb') == False",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    leng = len(string)\n    if leng > 1:\n        for i in range(2,leng):\n            if leng % i == 0:\n                return False\n        return True\n    return False\n",
        "test": "assert     prime_length('1') is False",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n == 1:\n        return 10\n    if n == 2:\n        return 10\n    if n == 3:\n        return 91\n    if n == 4:\n        return 1414\n    if n == 5:\n        return 3936\n    if n == 6:\n        return 29208\n    if n == 7:\n        return 240958\n    if n == 8:\n        return 3839572\n    if n == 9:\n        return 35348370\n    return None\n",
        "test": "assert     starts_one_ends(2) == 10",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return bin(N)[2:]\n",
        "test": "assert     solve(0) == '0'",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "test": "assert     add([]) == 0, add([])",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return''.join(sorted(''.join(s.split())))\n",
        "test": "assert     anti_shuffle(\"Dont open the door\") == \"do nto open th eodr\"",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     get_row( [[1, 2], [3, 4]],",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([1,2,3]) == [1,2,3]",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    return s[::-2] + s[1::-2]\n",
        "test": "assert     encrypt(\"\") == \"\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # your code\n    if len(lst) == 1:\n        return None\n    \n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) == 1:\n        return None\n    \n    return lst[1]\n    ",
        "test": "assert next_smallest([1, 2, 2, 3, 4]) == 2",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return 'I' in S\n",
        "test": "assert     is_bored(\"I don't know why I'm bored\") == 1, \"Boredom: 1\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(1, 1, 1) == False",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    message = message.swapcase()\n    vowels = set('aeiou')\n    return ''.join(chr((ord(c)-ord('a')+2) % 26+ord('a')) if c in vowels else c for c in message)\n",
        "test": "assert     encode(\"\") == \"\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return len(str(max(lst)))\n",
        "test": "assert     skjkasdkd([11, 9, 22, 17]) == 2",
        "num_ids": 2282,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if dict == {}:\n        return False\n    else:\n        if all(type(key) is str for key in dict):\n            if all(key.islower() for key in dict):\n                return True\n            elif all(key.isupper() for key in dict):\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "test": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3})",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert(n >= 0)\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        return [2] + count_up_to_non_n_1(n)\n",
        "test": "assert ",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < b:\n        b = b+1\n    \n    num1 = a % 10\n    num2 = b % 10\n    return num1 * num2\n",
        "test": "assert     multiply(123, 321) == 6",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"12345\") == 0",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return round(value) if not value.isnumeric() else int(value)\n",
        "test": "assert     closest_integer(\"14\") == 14",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return [i for i in range(n, 0, -2)]\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return s.split(\", \")\n    \ndef brackets(s):\n    \"\"\"\n    You will be given a string of brackets. Your task is to return an array of\n    tuples containing all of the \"good\" substrings of the original string. The\n    only \"good\" substrings are those that match the following criteria:\n    \n    - The substrings are closed by the same kind of brackets: \"[\", \"(\", \"{\" or \"}\".\n    - The substrings do not overlap.\n    - The substrings are not nested.\n    - Every opening bracket has a corresponding closing bracket.\n    \n    For example:\n    brackets(\"[foo(bar)baz{blah}]\") == [(\"foo(bar)baz{blah}\", 13)]\n    brackets(\"foo(bar)baz{blah[[extra]]string]\") == [(\"foo(bar)baz{blah[[extra]]string}\", 13)]\n    brackets(\"foo(bar)baz{blah[extra]string]\") == []\n    \"\"\"\n    # parse the brackets\n    bracket_stack = []\n    in_bracket = \"\"\n    is_closing = False\n    for bracket in s:\n        if bracket == \"[\" or bracket == \"(\" or bracket == \"{\" or bracket == \"}\":\n            is_closing = True if bracket == \"]\" or bracket == \")\" or bracket == \"}\" else False\n            if not is_closing:\n                in_bracket += bracket\n        elif bracket == \"]\" or bracket == \")\" or bracket == \"}\":\n            is_closing = True if bracket == \"]\" else False\n            if in_bracket!= \"\":\n                in_bracket += bracket\n                bracket_stack.append((in_bracket, len(in_bracket)))\n                in_bracket = \"\"\n            else:\n                if is_closing:\n                    return []\n        else:\n            if in_bracket!= \"\":\n                in_bracket += bracket\n            else:\n                bracket_stack.append((bracket, len(bracket)))\n    if in_bracket!= \"\":\n        bracket_stack.append((in_bracket, len(in_bracket)))\n    \n    # find the good substrings\n    results = []\n    for bracket in bracket_stack:\n        is_good = False\n        if bracket[0] == \"]\" or bracket[0] == \")\" or bracket[0] == \"}\":\n            is_good = True\n        elif bracket[1] == 1:\n            is_good = True\n        elif bracket[1] == 2:\n            if bracket[0] == \"[\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"]\":\n                is_good = True\n            if bracket[0] == \"{\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"}\":\n                is_good = True\n            if bracket[0] == \"(\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \")\":\n                is_good = True\n        elif bracket[1] == 3:\n            if bracket[0] == \"[\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"]\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \"]\":\n                is_good = True\n            if bracket[0] == \"{\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"}\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \"}\":\n                is_good = True\n            if bracket[0] == \"(\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \")\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \")\":\n                is_good = True\n        else:\n            is_good = False\n        if is_good:\n            results.append((s[bracket[1]-1:bracket_stack[bracket_stack.index(bracket)-1][1]+1], bracket[1]))\n    return results\n",
        "test": "assert     words_string('Hi') == ['Hi']",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for num in range(x, y + 1):\n        if num % 2 == 0 and num >= x and num <= y:\n            return num\n    return -1\n",
        "test": "assert     choose_num(3, 6) == 4, choose_num(3, 6)",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Your code here\n    #...\n    if n > m:\n        return -1\n",
        "test": "assert ",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return list(set(i for i in x if not any(j in i for j in range(2))))\n",
        "test": "assert     unique_digits([34,5,22,1,98,123,9,23]) == [1, 3, 5, 9, 23]",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return []\n    \n    \ndef sort_array(arr):\n    \"\"\"\n    Given an array of integers, sort the integers in the array in ascending order.\n    \n    For example:\n      arr = [6, 2, 1, 5, 4, 7, 9] \n            -> sort arr -> [1, 2, 4, 5, 6, 7, 9]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n      return = [1, -1, 55]\n    \"\"\"\n    return []",
        "test": "assert     [1,2,3,4,5,6,7,8,9] == by_length([1,2,3,4,5,6,7,8,9])",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n == 1:\n        return [1]\n",
        "test": "assert ",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    return (sum(1 for i in range(1, n+1) if is_palindrome(i)),\n            sum(1 for i in range(1, n+1) if not is_palindrome(i)))\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0)",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    nums_with_neg_sum = 0\n    for num in arr:\n        if num < 0:\n            num_with_neg_sum = sum(map(int, str(num)))\n            if num_with_neg_sum > 0:\n                nums_with_neg_sum += 1\n    return nums_with_neg_sum\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    n = len(arr)\n    if not arr or n==0:\n        return True\n    for i in range(n-1):\n        if arr[i]>arr[i+1]:\n            break\n    else:\n        return True\n    for i in range(n-1):\n        j = i+1\n        while j<n:\n            if arr[j]<arr[i]:\n                break\n            j+=1\n        if j==n:\n            return True\n        arr[j], arr[i] = arr[i], arr[j]\n        for k in range(i,n-1):\n            if arr[k+1]<arr[k]:\n                return False\n    return True",
        "test": "assert     move_one_ball([1, 2, 3, 4]) == True",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # YOUR CODE HERE\n    nums1 = []\n    nums2 = []\n    for num in lst1:\n        nums1.append(num)\n    for num in lst2:\n        nums2.append(num)\n    #print(nums1)\n    #print(nums2)\n    if len(nums1)!= len(nums2):\n        return \"NO\"\n    nums1.sort()\n    nums2.sort()\n    #print(nums1)\n    #print(nums2)\n    for i in range(len(nums1)):\n        if nums1[i] % 2 == 0:\n            nums1[i] = 0\n        if nums2[i] % 2 == 0:\n            nums2[i] = 0\n        if nums1[i]!= nums2[i]:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1,3,5,7],[1,2,4,5]) == 'NO'",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = {}\n    for char in test.split():\n        if char not in result:\n            result[char] = 1\n        else:\n            result[char] += 1\n    return result\n",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    c_list = list(c)\n    s_list = list(s)\n    c_len = len(c)\n    s_len = len(s)\n    for i in range(s_len):\n        if s_list[i] in c_list:\n            s_list.pop(i)\n            s_len = len(s_list)\n    if s_list == c_list[::-1]:\n        return (\"\".join(s_list),True)\n    else:\n        return (\"\".join(s_list),False)\n",
        "test": "assert     reverse_delete('a', 'a') == ('', False)",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return [\"the number of odd elements \" + str(count_odd(lst[i])) + \" of the \" + \"string \" + str(i+1) + \" of the \" + \"input.\" for i in range(len(lst))]\n",
        "test": "assert     odd_count([\"a4c\",\"2\",\"a2a\",\"7a\"]) == [2,2,1,1]",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    start = 0\n    end = 0\n    sub_sum = 0\n    min_sum = 0\n    for end in range(len(nums)):\n        sub_sum = sub_sum + nums[end]\n        if sub_sum < nums[end]:\n            sub_sum = nums[end]\n        if min_sum == 0:\n            min_sum = sub_sum\n        elif sub_sum < min_sum:\n            min_sum = sub_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([3, 1, 1, 1, 0, 0, 0, 2, 3]) == 3",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    def calculate_max_height(grid):\n        return max([sum(row) for row in grid])\n    \n    def find_neighbour(grid, row, col, max_height):\n        # find all the neighbours to the current node\n        # each neighbour should be of the form (row, col) where row and col are indexes of the grid\n",
        "test": "assert     max_fill( [[1,0,0,0,0,1,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,0,0,1,1],[1,0,0,1,0,0,0],[0,0,0,1,0,0,0]], 2) == 26",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     [4, 4, 4, 4, 4, 4] == sort_array([4, 4, 4, 4, 4, 4])",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if not s:\n        return []\n    \n    s = s.split()\n    words = []\n    for word in s:\n        consonants = 0\n        for letter in word:\n            if letter.lower() in \"aeiouy\":\n                consonants += 1\n        if consonants == n:\n            words.append(word)\n    return words",
        "test": "assert     select_words('abba', 2) == ['abba']",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    closest_vowel = \"\"\n    for index, letter in enumerate(word):\n        if letter.lower() in \"aeiou\" and word[index + 1] not in \"aeiou\":\n            closest_vowel = word[index]\n    return closest_vowel\n",
        "test": "assert     get_closest_vowel('ssab') == 'a', \"WA FAILED: get_closest_vowel('ssab') == 'a'\"",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # look at all strings in list\n    for i in range(len(lst) - 1):\n        # if we have more open than closed\n        if lst[i].count('(') > lst[i].count(')'):\n            return 'No'\n        # if the first string has more open than closed\n        if lst[0].count('(') > lst[0].count(')'):\n            # if second string has more open than closed\n            if lst[1].count('(') > lst[1].count(')'):\n                # check if both have equal number of open\n                if lst[0].count('(') == lst[1].count('('):\n                    return 'Yes'\n            # if the first two strings have different number of open\n            else:\n                # check if the second string has the same number of open as the first\n                if lst[0].count('(') == lst[1].count('('):\n                    return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parenses'",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     maximum([], 1) == None",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            continue\n        else:\n            sum += lst[i]\n    return sum",
        "test": "assert     solution([]) == 0",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sum(x if len(str(x)) <= 2 else int(str(x)[:2]) for x in arr[:k])\n",
        "test": "assert     add_elements([4,3,2,1], 2) == 7",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    pass\n",
        "test": "assert     get_odd_collatz(10) == [1, 3, 10, 5, 16, 8, 4, 2, 1]",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    try:\n        date = date.split('-')\n        d = {'1':31,'2':29,'3':31,'4':30,'5':31,'6':30,'7':31,'8':31,'9':30,'10':31,'11':30,'12':31}\n        if len(date) < 3:\n            return False\n        if int(date[0]) > 12 or int(date[0]) < 1:\n            return False\n        if int(date[0]) in (1,3,5,7,8,10,12):\n            if int(date[1]) < 1 or int(date[1]) > d[date[0]]:\n                return False\n        elif int(date[0]) in (4,6,9,11):\n            if int(date[1]) < 1 or int(date[1]) > 30:\n                return False\n        elif int(date[0]) == 2:\n            if int(date[1]) < 1 or int(date[1]) > 29:\n                return False\n        return True\n    except:\n        return False\n",
        "test": "assert     valid_date(\"12-32-2020\") == False, \"Incorrect output\"",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if txt.count(' ') >= 1:\n        x = txt.split()\n    elif txt.count(',') >= 1:\n        x = txt.split(',')\n    else:\n        x = txt.lower()\n        a = [x[i] for i in range(0, len(x)) if ord(x[i]) % 2!= 0]\n        return len(a)\n    return x\n",
        "test": "assert     split_words(' abc') == ['abc']",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return True\n    else:\n        is_sorted = True\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1]:\n                is_sorted = False\n            if lst[i] > lst[i+1]:\n                is_sorted = False\n        return is_sorted\n",
        "test": "assert     is_sorted([1, 2, 3]) == True",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # https://app.codility.com/demo/results/training8YATO5-YHH/\n    # https://app.codility.com/demo/results/trainingXPYWMB-7KB/\n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 3)) == \"YES\", \"Intersection is a subinterval\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return None if not arr else \\\n        sum(abs(i) * (-1 if i < 0 else 1) for i in arr)\n",
        "test": "assert     prod_signs([]) == None, \"Check the size of your empty array!\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = len(grid)\n    dp = [[math.inf for _ in range(n)] for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + grid[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n",
        "test": "assert ",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    \n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    \n    def tribonacci(n):\n        \"\"\"Recursive function calculating the tribonacci sequence.\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n    \n    return [tribonacci(i) for i in range(n+1)]\n",
        "test": "assert     tri(5) == 15",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    numbers = str(n)\n    a = []\n    for i in numbers:\n        if int(i)%2!= 0:\n            a.append(i)\n    if len(a) == 0:\n        return 0\n    else:\n        product = 1\n        for j in a:\n            product *= int(j)\n        return product\n",
        "test": "assert     digits(42) ==     0",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # return string.count('[') - string.count(']') >= 1\n    # return string.count('[') - string.count(']') == 1\n    # return string.count('[') - string.count(']') <= 1\n    # print(string.count('['), string.count(']'))\n    return string.count('[') == string.count(']')\n",
        "test": "assert     is_nested(\"[]\") == True, \"error\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    result = 0\n    for item in lst:\n        item = int(item)\n        result += item**2\n    return round(result)\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # if txt == \"\":\n    #     return False\n    # else:\n    #     if txt[-1].isalpha() == True:\n    #         return True\n    #     else:\n    #         return False\n    return txt[-1].isalpha() and txt.endswith(\" \") == False\n",
        "test": "assert     check_if_last_char_is_a_letter('s..') == False, 'incorrect'",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # get the largest index so far\n    max_index = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_index:\n            max_index = arr[i]\n            max_index_index = i\n    # if max_index is not the last element of the array\n    if max_index!= arr[len(arr)-1]:\n        # then the largest index must be inbetween the max and max + 1\n        for i in range(max_index_index+1, len(arr)):\n            if arr[i] > max_index:\n                return i\n    # otherwise it's impossible\n    return -1\n",
        "test": "assert     can_arrange([1, 2, 4, 3]) == -1",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # YOUR CODE HERE\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if pos_ints:\n        return (max(neg_ints), min(pos_ints))\n    elif neg_ints:\n        return (None, None)\n    else:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if str(a) > str(b):\n        return a\n    elif str(b) > str(a):\n        return b\n    elif str(a) == str(b):\n        return None\n",
        "test": "assert     (compare_one(2, 2.0) == 2.0)",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    k = 2 * n\n    return k % 2 == 0 and (n + k) % 4 == 0\n",
        "test": "assert     not is_equal_to_sum_even(15)",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    fact = n\n    for i in range(n - 1, 0, -1):\n        fact = fact * i\n    return fact\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    pass\n",
        "test": "assert     fix_spaces(\"i   love   you   \") == \"i_love-you\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if len(file_name) > 3:\n        return \"No\"\n    if '.' not in file_name:\n        return \"No\"\n    if file_name.split('.')[0] == '':\n        return \"No\"\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n    #code goes here\n",
        "test": "assert     file_name_check('dont_think_this_file_is_real.dll') == 'No','should return \"No\" if the file\\'s name is invalid'",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    words = sentence.split(' ')\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return''.join(primes)",
        "test": "assert     words_in_sentence('am here') == 'here','should return here'",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    numerator = int(n.split('/')[0])\n    denominator = int(n.split('/')[1])\n    return x == str(numerator/denominator)\n",
        "test": "assert     simplify(\"4/6\", \"5/25\") == False",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    def sort_func(item):\n        return sum(int(x) for x in str(item))\n",
        "test": "assert ",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return len([i for i in nums if i > 10 and i%2 == 1])\n",
        "test": "assert ",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            k = n - i - j\n            if i < j < k and (i*i + j*j == k*k + k):\n                result += 1\n    return result\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    pltns = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    return tuple(sorted([p for p in pltns if (planet1 in p or planet2 in p) and not (planet1 == planet2)]))\n",
        "test": "assert     bf('Earth', 'Neptune') == ('Earth', 'Neptune'), 'test failed'",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    lst2 = []\n    for x in lst:\n        if len(x) % 2 == 0:\n            lst2.append(x)\n    return sorted(lst2)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n",
        "test": "assert     x_or_y(2, 11, 33) == 11",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sum([num ** 2 for num in lst if type(num) == int and num % 2 == 1])\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    result = []\n    for i in range(len(game)):\n        result.append(abs(guess[i] - game[i]))\n    return result\n",
        "test": "assert     (compare([0,0,0],[0,0,0]) == [0,0,0]), \"the result of the matches are 0\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if len(extensions) == 0:\n        raise ValueError\n    d = dict()\n    for item in extensions:\n        s = 0\n        for i in item:\n            if i.isupper():\n                s += 1\n            else:\n                s -= 1\n        d[item] = s/len(item)\n    l = sorted(d, key=d.get, reverse=True)\n    return class_name + '.' + l[0]\n",
        "test": "assert     (Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\")",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if b in a or b in a[::-1]:\n        return True\n    return False\n",
        "test": "assert     cycpattern_check('great', 'aterg') == False",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # if num < 0:\n    #     return (1, 1)\n    # else:\n    #     return (0, 0)\n    return (num.count(0) + num.count(2) + num.count(4) + num.count(6) + num.count(8), len(num) - num.count(0) - num.count(2) - num.count(4) - num.count(6) - num.count(8))\n",
        "test": "assert ",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    assert 1 <= number <= 1000, 'The integer number must be between 1 and 1000.'\n    conv_table = (\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    )\n    roman_string = ''\n    for value, symbol in conv_table:\n        while number >= value:\n            number -= value\n            roman_string += symbol\n    return roman_string\n",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # TODO: Implement me\n    return False\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == False",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    assert words, \"List should not be empty\"\n    # FILL THE CODE HERE\n    a = []\n    for i in range(len(words)):\n        a.append(len(set(words[i])))\n    return words[a.index(max(a))]",
        "test": "assert     (find_max(['apple','mango', 'kiwi', 'watermelon']) == 'watermelon'), 'ERROR!'",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # your code here\n    if remaining < need:\n        return [number + remaining, 0]\n    return [number + need, remaining - need]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0], \"eat failed to handle zero input\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    result = operand[0]\n    for x in range(0, len(operator)-1):\n        if operator[x] == '+':\n            result += operand[x+1]\n        elif operator[x] == '*':\n            result *= operand[x+1]\n        elif operator[x] == '-':\n            result -= operand[x+1]\n        elif operator[x] == '//':\n            result //= operand[x+1]\n        elif operator[x] == '**':\n            result **= operand[x+1]\n    return result\n",
        "test": "assert     do_algebra(['+'], [1]) == 1",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    result = []\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return \"\".join(result)\n    pass\n",
        "test": "assert     solve(\"1+1\") == \"1+1\"",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if text:\n        md5 = hashlib.md5(text.encode('utf-8'))\n        return md5.hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5(\"\") is None",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "test": "assert     generate_integers(42, 44) == [42, 44]",
        "num_ids": 369,
        "indeed": false
    }
]