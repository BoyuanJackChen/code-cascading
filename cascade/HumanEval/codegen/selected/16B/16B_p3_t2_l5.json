[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    paren_string_wo_spaces = paren_string.replace(\" \", \"\")\n    curr_group = []\n    groups = []\n    i = 0\n    while i < len(paren_string_wo_spaces):\n        if paren_string_wo_spaces[i] == \"(\":\n            curr_group.append(paren_string_wo_spaces[i])\n        if paren_string_wo_spaces[i] == \")\":\n            curr_group.append(paren_string_wo_spaces[i])\n            groups.append(\"\".join(curr_group))\n            curr_group = []\n        i += 1\n",
        "test": "assert     separate_paren_groups(\"(((()())())\") == [ \"(((()())()\", )"
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return number % 1\n",
        "test": "assert     truncate_number(12.25) ==.25"
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    if balance < 0:\n        return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Calculate Mean\n    mean = sum(numbers) / len(numbers)\n    # Calculate absolute differences\n    abs_deviations = map(lambda x: abs(x - mean), numbers)\n    # Calculate Mean Absolute Deviation\n    return sum(abs_deviations) / len(abs_deviations)\n",
        "test": "assert "
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    def get_nesting_level(paren_string):\n        max_level = 0\n        level = 0\n        for char in paren_string:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        return max_level\n    \n    max_level = get_nesting_level(paren_string)\n    res = [0] * max_level\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            res[get_nesting_level(paren_string[:i]) - 1] += 1\n        elif char == ')':\n            res[get_nesting_level(paren_string[:i]) - 1] -= 1\n    \n    return res\n",
        "test": "assert     parse_nested_parens(\"()\")     == [0]"
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"world\", \"test\"], \"hello\") == [\"hello\"]"
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for i in numbers:\n        product_ *= i\n    return (sum_, product_)\n",
        "test": "assert     sum_product([2,2]) == (4, 4)"
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    res: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        else:\n            res.append(max(res[i - 1], numbers[i]))\n    return res\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return string + string[-2::-1]\n",
        "test": "assert     make_palindrome('aba') == 'baab'"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "test": "assert     string_xor(\"110\", \"110\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = max(len(s) for s in strings)\n    return [s for s in strings if len(s) == max_len][0]\n",
        "test": "assert     longest([\"vai\", \"tudo\", \"bem\", \"nao\", \"esta\", \"tudo\", \"bem\"]) == \"tudo\""
    },
    {
        "number": 13,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(2, 4) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # final_str = string\n    # final_str = string.split(\" \")\n    final_str = string[0:]\n    # print(final_str)\n    all_list = []\n    for i in range(len(final_str)):\n        # print(final_str[i])\n        list1 = final_str[0:i+1]\n        all_list.append(list1)\n    # print(all_list)\n    return all_list\n",
        "test": "assert     all_prefixes('') == []"
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('abc') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return list(map(int, [x.strip() for x in music_string.split('|')]))\n",
        "test": "assert     parse_music('|||||||||||') == [16, 16, 16, 16, 16, 16, 16, 16], 'wrong result for parse_music(\"|||||||||||\")'"
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            result += 1\n    return result\n",
        "test": "assert     how_many_times('aaaaa', 'b') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers('nine eight seven six five four three two one') == 'one two three four five six seven eight'"
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    numbers.sort()\n    first, second = numbers[:2]\n    return (first, second) if first < second else (second, first)\n",
        "test": "assert     find_closest_elements([0.0, 1.0, 2.0, 4.0]) == (0.0, 1.0)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # TODO: implement this!\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    return [(n - min_num) / diff for n in numbers]\n",
        "test": "assert rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in values if type(x) == int]\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n",
        "test": "assert     largest_divisor(4) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    prime_numbers = []\n    for num in range(2, n + 1):\n        while n % num == 0:\n            prime_numbers.append(num)\n            n //= num\n    return prime_numbers\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    new_numbers = []\n    for i in numbers:\n        if i not in new_numbers:\n            new_numbers.append(i)\n    return new_numbers\n",
        "test": "assert     remove_duplicates([2, 2, 3, 3, 4, 4, 5, 5]) == [2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"A\"]) == \"A\""
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix(['hello', 'hi', 'howdy', 'heyas'], 'hey') == ['heyas']"
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n == 1:\n        return False\n    for k in range(2,n):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # Only even xs and largest non zero coefficient\n    xs = xs[1::2] + xs[::2]\n    # Find a, b\n    a = xs[0]\n    b = xs[1]\n    # From b and a, find x\n    return -b / a\n",
        "test": "assert     find_zero([0, 1]) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if (i % 3)!= 0:\n            l[i] = l[i]\n    l.sort()\n    return l\n",
        "test": "assert     sort_third([1,2,3,4,5]) == [1,2,3,4,5], \"Incorrect output for sort_third(l)\""
    },
    {
        "number": 34,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    x = []\n    for a in l:\n        if a not in x:\n            x.append(a)\n    x.sort()\n    return x\n",
        "test": "assert     unique([1, 2, 3, 3, 4, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n",
        "test": "assert     max_element([1, 5, -2, 6]) == 6, f'error 1'"
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if 7 in str(num):\n                count += 1\n    return count\n",
        "test": "assert"
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # for i in range(len(l)):\n    #     if i % 2 == 0:\n    #         l[i], l[i+1] = l[i+1], l[i]\n    # return l\n    return sorted(l, key=lambda x: x if x % 2 == 0 else 0)\n",
        "test": "assert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 2, 4, 6, 8]"
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "assert     decode_cyclic(encode_cyclic(s = \"ATCGATCG\")) == \"ATCGATCG\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    fib_num = fib(n)\n    for i in range(2, fib_num):\n        if not is_prime(i):\n            return i\n    return fib_num\n    \ndef main():\n    n = int(input())\n    print(prime_fib(n))\n",
        "test": "assert "
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i == j or i == k or j == k:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    assert(n > 0)\n    # trivial case\n    if n == 1:\n        return 0\n    # determine what is the position of the last car that we'll drive left\n    #  (left_end)\n    # and what is the position of the last car that we'll drive right (right_end)\n    left_end = n - 1\n    right_end = n - 1\n    # adjust right_end to be right to the leftmost car\n    while right_end % 2 == 1:\n        right_end -= 1\n    while left_end % 2 == 0:\n        left_end -= 1\n    # we can now expect that the number of cars in the left-most car is left_end\n    # and the number of cars in the right-most car is right_end\n    # we can find the number of cars in the middle car by subtracting left_end from right_end\n    middle_car = right_end - left_end\n    # now, assume that we're at position right_end, and we need to move left.\n    # if there are more left cars than right cars, we'll need to move right.\n    # We'll keep incrementing the number of right cars until we've run out\n    # of left cars.  When we do, we'll need to move left again.\n    # So, we'll do this until we've exhausted the left cars.\n    total_cars = 0\n    while left_end > 0:\n        total_cars += left_end\n        right_end += left_end\n        left_end -= 1\n        if right_end > left_end:\n            right_end -= 1\n    # our final right_end should be right_end + 1, so subtract one more\n    total_cars += right_end\n    return total_cars\n",
        "test": "assert     car_race_collision(1) == 0, \"car_race_collision(1)\""
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]"
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"empty list\""
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return bin(x)[2:] if base == 2 else oct(x)[2:] if base == 8 else hex(x)[2:] if base == 16 else str(x)\n",
        "test": "assert     change_base(12, 2) == '1100', 'Should be 1100'"
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(3.5, 4.5) == 12.5, \"triangle_area is incorrect\""
    },
    {
        "number": 46,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert n >= 0, \"n cannot be a negative integer.\"\n    fib4_dict = {0: 0, 1: 0, 2: 2, 3: 0}\n",
        "test": "assert "
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n",
        "test": "assert     median([1, 2, 3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"aba\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return pow(2, n, p)\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"mmai\" == decode_shift(encode_shift(\"mmai\"))"
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if not isinstance(text, str):\n        raise TypeError('text must be a string')\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n",
        "test": "assert     remove_vowels('hello') == 'hll', 'Remove vowels should remove vowels from a text'"
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # for num in l:\n    #     if num >= t:\n    #         return False\n    # return True\n    return all(num < t for num in l)\n",
        "test": "assert     below_threshold([3, 2, 1], 0) == False"
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return all(ch0 == ch1 for ch0, ch1 in zip(s0, s1))\n",
        "test": "assert     same_chars(\"apple\", \"pleap\") == False, \"Test1: expected False\""
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n<=1:\n        return n\n    else:\n        return fib(n-1)+fib(n-2)\n",
        "test": "assert "
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n",
        "test": "assert     correct_bracketing(\"<>>\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(set(l)) == len(l) or all(l[i] < l[i+1] for i in range(len(l)-1)) or all(l[i] > l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     (monotonic([1, 2, 3]) == True)"
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'e']) == ['b', 'c', 'd'], 'test 1'"
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    i = 2\n    while i * i < n:\n        if n % i == 0:\n            n //= i\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(2)    == 2"
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "test": "assert "
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     not correct_bracketing(\"(()\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = len(xs)\n    return [sum(xs[i+1]*(n-i-1) for i in range(n))]\n",
        "test": "assert     derivative([1, 2, 3, 4]) == [3, 8, 12, 16]"
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # write your code here\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert "
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n        if letter == \"y\" and s[-1]!= \"y\":\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"\") == 0"
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[num_digits-shift:shift] + str(x)[:num_digits-shift]\n",
        "test": "assert     (circular_shift(912,3) == '912')"
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    s = str(s)\n    return sum([ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90])\n",
        "test": "assert     digitSum('') == 0, \"Wrong answer for empty string!\""
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    numbers = s.split()\n    mango_numbers = int(numbers[0]) - int(numbers[1])\n    if mango_numbers > 0:\n        print(mango_numbers)\n    else:\n        print(\"No mango fruits\")\n",
        "test": "assert     fruit_distribution(\"apple=2,oranges=5,mango=0\",5) == 0, 'incorrect'"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    arr = sorted(arr, key=lambda x: (x % 2, x))\n    if not arr:\n        return []\n    return [arr[0], arr.index(arr[0])]\n",
        "test": "assert "
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # your code here\n    max_value = max(lst)\n    max_count = lst.count(max_value)\n    \n    if max_count < max_value:\n        return -1\n    return max_value\n",
        "test": "assert     search([1, 1, 2, 3, 3, 4, 5, 7, 7]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if lst == []:\n        return []\n    else:\n        sorted_list = sorted(lst)\n        strange_list = [sorted_list[0]]\n        for i in range(1, len(sorted_list)):\n            strange_list.append(sorted_list[-i])\n            strange_list.append(sorted_list[i])\n    return strange_list\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     triangle_area(2, 3, 4) == 2.00, 'triangle_area(2, 3, 4) wrong answer'"
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    def palindrome(lst):\n        \n        def reverse(lst):\n            return [x for x in reversed(lst)]\n        \n        def is_palindrome(lst):\n            return lst == reverse(lst)\n        \n        return is_palindrome(lst)\n    \n    def sum_weight(lst):\n        \n        def add_together(lst):\n            return sum(lst)\n        \n        return add_together(lst)\n    \n    if palindrome(q) and sum_weight(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([\"ab\", \"bc\"], 1) is False, \"wrong answer\""
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum(arr) - len(arr) * min(arr)\n",
        "test": "assert     smallest_change([1, 6, 9, 12, 2]) == 1, \"Not all palindromes\""
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return lst2\n",
        "test": "assert total_match([\"python\", \"bpython\", \"python\"], [\"python\", \"python\"]) == \"python\""
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    primes = []\n    for num in range(2,a):\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    print(primes)\n    if len(primes) == 0:\n        return False\n    for num in primes:\n        if (a / num) % 3 == 0:\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(1) == False"
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x == n**int(n)\n",
        "test": "assert     is_simple_power(2, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return True if a ** 3 == 0 else False\n",
        "test": "assert     iscube(0) == True"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # your code here\n    print(num)\n    s = set()\n    for i in range(len(num)):\n        s.add(num[i])\n    print(s)\n    r = 0\n    for i in s:\n        if is_prime(int(i)) is True:\n            r+=1\n    return r\n    \n    \n",
        "test": "assert     hex_key('0AB') ==     {2:1, 3:1}, 'incorrect'"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    decimal = int(decimal)\n    if decimal > 0:\n        binary = bin(decimal)[2:]\n        binary = 'db' + binary + 'db'\n    else:\n        binary = \"error\"\n    return binary\n",
        "test": "assert     decimal_to_binary(0) == '0'"
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    while len(set(s)) < len(s):\n        i = 0\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                del s[i]\n                del s[i]\n                i -= 1\n                break\n            i += 1\n        if i == len(s)-1:\n            return True\n    return False\n",
        "test": "assert     is_happy('unhappy') == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return []",
        "test": "assert     numerical_letter_grade(3.7) == 'A'"
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(string) == 2:\n        return len(string) % 2!= 0\n    return len(string) % 2!= 0 and prime_length(string[1:])\n",
        "test": "assert     prime_length(\"a\") == False, \"ERROR: a is not a prime number\""
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return 1\n    return 10 ** (n - 1) - starts_one_ends(n - 1)\n",
        "test": "assert     starts_one_ends(1) ==    1"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return bin(N)[2:]",
        "test": "assert     (solve(10) == '1010'), \"Incorrect solution for solve(10)\""
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # result = []\n    # for i in range(1, len(lst), 2):\n    #     result.append(lst[i])\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return''.join(sorted(''.join(s).split(), key=str.lower))\n",
        "test": "assert     anti_shuffle('abc') == 'abc'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [(i, j) for i, row in enumerate(lst) for j, v in enumerate(row) if v == x]\n",
        "test": "assert     get_row( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(1, 2), (1, 3), (1, 4)]"
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # your code here\n    for i in range(len(array)):\n        for j in range(len(array)-1-i):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n",
        "test": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'incorrect'"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    newstring = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                if (ord(char)+2) <= 91:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n            else:\n                if (ord(char)+2) <= 123:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n        else:\n            newstring += char\n    return newstring\n",
        "test": "assert encrypt(\"a\"), \"If one letter is passed, the function should return the same letter\""
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return None\n    \n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([1,2,3]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    #print(S)\n    count=0\n    lis=S.split('.')\n    for x in lis:\n        if 'I'in x:\n            count+=1\n    print(count)\n    return count\n",
        "test": "assert     is_bored(\". This is boring! I am not bored!\") == 1, 'Incorrect'"
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return ((x == z + y) or (y == z + x)) and type(x) == type(y) == type(z) == int\n",
        "test": "assert     any_int(4, 2, 3) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # vowels = ['a', 'e', 'i', 'o', 'u']\n    # vowels_encode = [chr(ord(x) + 2) if x in vowels else x for x in message.lower()]\n    # return ''.join(vowels_encode)\n    pass\n",
        "test": "assert     encode(\"A e i o u\") == \"a e i o u\""
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # no solutions found on codewars\n    # I'm not sure how to do it yet\n    pass\n",
        "test": "assert skjkasdkd([37, 37, 37]) == 37, 'incorrect result for [37,37,37]'"
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not dict:\n        return False\n    for k, v in dict.items():\n        if not k.isupper() and not k.islower():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, \"Wrong output\""
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n == 0:\n        return []\n    num = 2\n    primes = []\n    while num <= n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n",
        "test": "assert     count_up_to(5) == [2, 3]"
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return a*b\n",
        "test": "assert     (multiply(12, 0) == 0)"
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sum([1 for i in s[1::2] if i.isupper()])\n",
        "test": "assert     count_upper(\"abcdefg\") == 0, \"error\""
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    try:\n        value = int(value)\n    except ValueError:\n        return None\n    else:\n        if value > 0:\n            floor = value // 1\n            ceil = (value // 1) + 1\n        else:\n            floor = value // 1\n            ceil = (value // 1) - 1\n        if value - floor == ceil - value:\n            return ceil\n        else:\n            return floor\n",
        "test": "assert     closest_integer(\"0.4\") == 0"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    # raise NotImplementedError(\"TODO\")\n    return [n]\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return s.split()\n",
        "test": "assert     words_string('a') == ['a']"
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if x > y:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n",
        "test": "assert     choose_num(1, 3) == 2"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n > m:\n        return -1\n    # your code here\n    return \"{0:b}\".format(round(sum([n, m])/2))\n",
        "test": "assert     rounded_avg(0, 5) == 0, 'wrong result'"
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = []\n    for n in x:\n        if n%2!= 0:\n            result.append(n)\n    result.sort()\n    return result\n",
        "test": "assert     unique_digits([7]) == [7]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    def array_value_to_letters(arr):\n        values = []\n        letters = []\n        for value in arr:\n            if value > 0 and value <= 9:\n                values.append(value)\n                letters.append(letters_dict[value])\n        return letters\n",
        "test": "assert "
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    lst = [1]\n    for i in range(1, n):\n        lst.append(i*i if i % 2 == 0 else sum(range(1, i+1)))\n    return lst\n",
        "test": "assert     f(1) ==     [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return (0, 0) if n < 2 else (len(list(filter(lambda x: str(x) == str(x)[::-1], range(1, n + 1)))), len(list(filter(lambda x: str(x)!= str(x)[::-1], range(1, n + 1)))))\n",
        "test": "assert     (even_odd_palindrome(12) == (4, 4)), \"Incorrect\""
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if len(arr) == 0:\n        return 0\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return True\n",
        "test": "assert     move_one_ball([1, 2, 3, 4, 5])"
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2], [3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    histo = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            histo[letter] = histo.get(letter, 0) + 1\n    return histo\n",
        "test": "assert     histogram(\"a a b b c c\") == {'a': 2, 'b': 2, 'c': 2}, \"Wrong answer.\""
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = \"\"\n    is_palindrome = False\n    for char in s:\n        if char not in c:\n            result += char\n        else:\n            is_palindrome = True\n    return (result,is_palindrome)\n",
        "test": "assert     reverse_delete('abcd', 'abcd') == ('', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def odd_count_helper(string):\n        return sum(digit in '13579' for digit in string)\n",
        "test": "assert     odd_count(['123','345','567','789']) == [3, 1, 0, 0]"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n",
        "test": "assert "
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def count_buckets(grid):\n        n = len(grid)\n        m = len(grid[0])\n        l = [[0] * (m + 1) for _ in range(n + 1)]\n        r = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                l[i][j] = max(l[i - 1][j], grid[i - 1][j - 1]) + grid[i - 1][j - 1]\n                r[i][j] = max(r[i - 1][j], grid[i - 1][j - 1]) + grid[i - 1][j - 1]\n        return n + m - l[n][m]\n",
        "test": "assert     max_fill([[1, 1, 1], [1, 0, 1], [1, 1, 1]], 1) == 2"
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))\n",
        "test": "assert "
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(s) == 0: return []\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    n_consonants = n\n    return_list = []\n    for i in words:\n        word_consonants = 0\n        for j in i:\n            if j in consonants:\n                word_consonants += 1\n        if word_consonants == n_consonants:\n            return_list.append(i)\n    return return_list\n",
        "test": "assert     select_words('', 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # your code here\n    vowels = \"aeiouAEIOU\"\n    first_idx = len(word) - 1\n    last_idx = len(word) - 1\n    last_in_range = None\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_in_range = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            first_idx = i\n            break\n    if first_idx < last_idx:\n        return word[last_in_range]\n    else:\n        return \"\"\n",
        "test": "assert     get_closest_vowel('kuv') == 'u', \"Wrong result for get_closest_vowel('kuv')\""
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    # Solution 1\n    if lst[0][0] == '(' and lst[0][-1] == ')' and lst[1][0] == ')' and lst[1][-1] == '(':\n        return 'Yes'\n    \n    # Solution 2\n    elif lst[0][0] == '(' and lst[0][-1] == ')' and lst[1][0] == '(' and lst[1][-1] == ')':\n        return 'Yes'\n    \n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['(())', '((()))']) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if k < 0 or k > len(arr):\n        raise ValueError('Invalid k value: {}'.format(k))\n",
        "test": "assert     (sorted(maximum([2, 5, 3, 9, 7, 6], 2)) "
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    sum = 0\n    for i in range(0, len(lst), 2):\n        if(lst[i] % 2!= 0):\n            sum += lst[i]\n    return sum\n",
        "test": "assert "
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum(int(i) for i in str(arr[:k]) if len(i) <= 2)\n",
        "test": "assert     add_elements([541, 548, 545, 622, 611, 598, 686, 551, 604, "
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    #TODO: Your code here\n    collatz_list = []\n    for i in range(1, n):\n        collatz_list.append(collatz(i))\n    collatz_list.append(1)\n    return sorted(list(set([n for n in collatz_list if n not in collatz_list[1:len(collatz_list):2]])))\n    # return sorted([n for n in collatz_list if n not in collatz_list[1:len(collatz_list):2]])\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if not date:\n        return False\n    date_split = date.split(\"-\")\n    if len(date_split)!= 3:\n        return False\n    month, day, year = date_split\n    if not month.isnumeric() or not day.isnumeric():\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month) == 2 and int(day) < 1 or int(day) > 29:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [4, 6, 9, 11] and int(day) < 1 or int(day) > 30:\n        return False\n    return True\n",
        "test": "assert     valid_date('12-31-2019') == False"
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    return txt.split()\n",
        "test": "assert     split_words(\"\") == []"
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    new_lst = sorted(lst)\n    return lst == new_lst\n",
        "test": "assert     is_sorted([])"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    (start1, end1) = interval1\n    (start2, end2) = interval2\n    if start1 < start2 and end1 < end2 or start2 < start1 and end2 < end1:\n        return \"NO\"\n    else:\n        length = 0\n        if start1 > start2:\n            length += start1 - start2\n        else:\n            length += end2 - start1\n",
        "test": "assert "
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not arr: return None\n    sign = lambda x: -1 if x < 0 else 1\n    return sum(abs(i) for i in arr) * prod(map(sign, arr))\n",
        "test": "assert     (prod_signs([]) == None)"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    m, n = len(grid), len(grid[0])\n    memo = {}\n    if k == 0 or k == 1:\n        return [1]\n",
        "test": "assert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 3) == [1, 1, 1, 1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            result *= int(i)\n        else:\n            pass\n    return result\n",
        "test": "assert "
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return string.count(\"[\")!= string.count(\"]\")\n    \n    \ndef generate_graph(input):\n    '''\n    Create a function that takes a string as input where each pair of characters in the string\n    represent a node in a directed graph. The function should return a dictionary where the key \n    is a node and the value is the set of nodes in the graph that can be reached by following \n    that node. The graph may have multiple components. The graph should be represented by a \n    directed graph.\n",
        "test": "assert     is_nested('[(])') == False"
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    result = 0\n    for i in lst:\n        result += math.ceil(i**2)\n    return result\n",
        "test": "assert "
    },
    {
        "number": 134,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return txt.strip() and txt[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"tact coa\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i, val in enumerate(arr):\n        if i == 0:\n            continue\n        else:\n            if val > arr[i-1]:\n                continue\n            else:\n                return i\n    return -1",
        "test": "assert     can_arrange([3, 4, 5, 1, 2]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    lst1 = [i for i in lst if i < 0]\n    lst2 = [i for i in lst if i > 0]\n    if len(lst1) > 0:\n        a = max(lst1)\n    else:\n        a = None\n    if len(lst2) > 0:\n        b = min(lst2)\n    else:\n        b = None\n    return (a, b)\n",
        "test": "assert     largest_smallest_integers([1, 2, 3]) == (None, 1)"
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if type(a) == str and type(b) == str:\n        return None if a == b else max(a,b)\n    elif type(a) == str or type(b) == str:\n        return None\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 0) == 1"
    },
    {
        "number": 138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    def sum_of_evens(m):\n        return sum(filter(lambda x: x % 2 == 0, range(m, 0, -2)))\n",
        "test": "assert "
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    count = n\n    factorial = 1\n    while count > 1:\n        factorial *= count\n        count -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if len(text) < 2:\n        return text\n    elif text[0] == \" \":\n        return \"-\"+fix_spaces(text[1:])\n    elif text[len(text)-1] == \" \":\n        return fix_spaces(text[:len(text)-1])+\"-\"\n    elif text[1] == \" \" and text[0] == \" \":\n        return fix_spaces(text[2:])\n    else:\n        return text[0]+\"_\"+fix_spaces(text[1:])\n    \n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(file_name) < 4:\n        return 'No'\n    elif '0' <= file_name[0] <= '9':\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name.index('.') == 0:\n        return 'No'\n    elif file_name[file_name.index('.') - 1] =='':\n        return 'No'\n    elif file_name[file_name.index('.') + 1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     file_name_check('0_1') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        sums = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sums += lst[i]**2\n            elif i % 4 == 0 and i % 3!= 0:\n                sums += lst[i]**3\n        return sums\n",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 351"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) and all([c in '0123456789' for c in w])])\n",
        "test": "assert     words_in_sentence(sentence=\"Coding is fun.\") == \"Coding is fun.\""
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    numerator, denominator = eval(x), eval(n)\n    if denominator % numerator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"3/4\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # get the sum of digits of all elements in the list\n    nums_sums = list(map(lambda n: get_digit_sum(n), nums))\n",
        "test": "assert "
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    numbers = list(nums)\n    count = 0\n    for i in range(len(numbers)):\n        if(numbers[i] > 10 and str(numbers[i])[0] == str(numbers[i])[-1]):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0, \"Wrong answer for []\""
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum([(i * i - i + 1) // 3 for i in range(1, n)])\n",
        "test": "assert     get_max_triples(4) == 3"
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n        if p1 < p2:\n            return tuple(planets[p1+1:p2])\n        elif p1 > p2:\n            return tuple(planets[p2+1:p1])\n    return ()\n",
        "test": "assert     bf('Mercury', 'Jupiter') == ('Venus', 'Earth', 'Mars')"
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    lst = list(set(lst))\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert     sorted_list_sum([\"a\", \"c\", \"d\"]) == [\"a\", \"c\", \"d\"]"
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(81, 1, 2) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # replace the code below\n    odds = [x for x in lst if x % 2!= 0]\n    return sum([i ** 2 for i in odds])",
        "test": "assert "
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # return [abs(game[i]-guess[i]) for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare(game = [5, 6, 7, 8, 9], guess = [5, 6, 7, 8, 9]) == [0, 0, 0, 0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Initialize variables\n    strongest_extension = None\n    strength = 0\n    for extension in extensions:\n        # Get the count of the number of uppercase and lowercase characters in extension\n        ext_cap_count = 0\n        ext_sm_count = 0\n        for char in extension:\n            if char.isupper():\n                ext_cap_count += 1\n            if char.islower():\n                ext_sm_count += 1\n        # Update strongest_extension\n        if ext_cap_count - ext_sm_count > strength:\n            strongest_extension = extension\n            strength = ext_cap_count - ext_sm_count\n    return class_name + '.' + strongest_extension\n",
        "test": "assert     Strongest_Extension('Burgers', ['EQrsh', 'ShBrBGs', 'QsWXrQS']) == 'Burgers.QsWXrQS'"
    },
    {
        "number": 154,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return (b in a) or (b in a+a) or (b in a+a+a) or (b in a+a+a+a) or (b in a+a+a+a+a) or (b in a+a+a+a+a+a) or (b in a+a+a+a+a+a+a) or (b in a+a+a+a+a+a+a+a)",
        "test": "assert     cycpattern_check(\"babble\", \"dictionary\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    odds = sum([int(x) % 2 for x in str(num)])\n    return (odds, len(str(num)) - odds)\n",
        "test": "assert     even_odd_count(990099) == (6, 8)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     int_to_mini_roman(3) == \"III\""
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False",
        "test": "assert     right_angle_triangle(4, 4, 3)         == False, 'incorrect'"
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    str_len = []\n    for word in words:\n        str_len.append(len(set(word)))\n    max_len = max(str_len)\n    for word in words:\n        if len(set(word)) == max_len:\n            return word\n",
        "test": "assert     find_max([\"1234\", \"1233\", \"1232\", \"1231\"]) == \"1234\", \"Test Failed\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    eaten = number + need\n    eaten_left = remaining - need\n    return [eaten, eaten_left]\n",
        "test": "assert     eat(1, 1, 1) == [ 2, 0 ]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    i=0\n    while i < len(s):\n        if s[i].isalpha():\n            s = s[:i]+s[i].swapcase()+s[i+1:]\n        i+=1\n    return s\n",
        "test": "assert     solve('abcC') == 'ABCc'"
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return md5(text).hexdigest() if text else None\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sorted(filter(lambda x: x % 2 == 0 and a <= x <= b, range(a, b + 1)))\n",
        "test": "assert     generate_integers(1, 21) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
    }
]