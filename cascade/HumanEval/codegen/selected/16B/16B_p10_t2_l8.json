[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    for i, num_1 in enumerate(numbers):\n        for num_2 in numbers[i + 1:]:\n            if abs(num_1 - num_2) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3], 0.1) == False"
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    index = 0\n    result = []\n    while index < len(paren_string):\n        current_paren_group = []\n        current_paren_index = index\n        while index < len(paren_string) and paren_string[index] == \"(\":\n            current_paren_group.append(paren_string[index])\n            index += 1\n        if current_paren_group:\n            while index < len(paren_string) and paren_string[index] == \")\":\n                current_paren_group.append(paren_string[index])\n                index += 1\n            if current_paren_group:\n                result.append(''.join(current_paren_group))\n    return result\n",
        "test": "assert     separate_paren_groups(\"()\") == [\"()\"]"
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    number_str = str(number)\n    decimals = len(number_str.split(\".\")[-1])\n    decimals = 1/(10**decimals)\n    number = number % (1+decimals)\n    number = number - (number % 1)\n    return number\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if len(operations) == 0:\n        return False\n    for i in range(0, len(operations)):\n        if operations[i] < 0 and i == 0:\n            return True\n        if operations[i] < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    mean = sum(numbers) / len(numbers)\n    differences = [abs(mean - number) for number in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n",
        "test": "assert     abs(mean_absolute_deviation([1.0, 1.0]) - 0.0) < 10e-15"
    },
    {
        "number": 5,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([], 0) == []"
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # Store each paren\n    paren_list = [p for p in paren_string.split()]\n    # Initialize stack\n    s = []\n    # Loop through list and push to stack when there is opening paren,\n    # and pop when there is closing paren\n    for p in paren_list:\n        if p == '(':\n            s.append(p)\n        elif p == ')':\n            s.pop()\n    return [len(s) for paren in paren_list]\n        \n",
        "test": "assert     parse_nested_parens(\"()\") ==     [0]"
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    filter_list = []\n    for item in strings:\n        if substring in item:\n            filter_list.append(item)\n    return filter_list\n",
        "test": "assert     filter_by_substring([\"as\", \"b\", \"c\", \"d\"], \"f\") == []"
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    try:\n        # We have to handle edge cases such as empty string and string with only 1 character\n        # as it will be not possible to create a palindrome from only 1 character.\n        # Solution is to find the longest postfix of the string that is a palindrome\n        # and then append it to the original string, reversing the prefix part.\n        return string + string[string[::-1].find(string[::-1]):]\n    except IndexError:\n        return \"\"\n",
        "test": "assert     make_palindrome(\"\") == \"\""
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    a, b = int(a, 2), int(b, 2)\n    return bin(a ^ b)[2:]\n",
        "test": "assert     string_xor(\"1\", \"1\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if not strings:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n",
        "test": "assert     longest([\"dog\", \"cat\", \"bird\", \"horse\"]) == \"horse\""
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes('') == []"
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "test": "assert         string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return [1 if e == \"o\" else 2 if e == \"o|\" else 4 if e == \".|\" else 1 for e in music_string.split(\" \")]\n",
        "test": "assert     parse_music(\"o o o o o o o o|o|.|..|..|. o|... o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o."
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    result = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        result += 1\n        index += len(substring)\n    return result\n",
        "test": "assert     how_many_times('aa', 'aa') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    a = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    a.sort()\n    b = []\n    for x in a:\n        if x in numbers:\n            b.append(x)\n    b.sort()\n    return''.join(b)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\""
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return min(numbers), max(numbers)\n",
        "test": "assert     find_closest_elements([1, 1, 1, 1]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    numbers.sort()\n    min_number = numbers[0]\n    max_number = numbers[len(numbers) - 1]\n    for i in range(len(numbers)):\n        numbers[i] -= min_number\n        numbers[i] /= (max_number - min_number)\n    return numbers\n",
        "test": "assert     rescale_to_unit([1,2,3]) == [0,0.5,1]"
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen(\"hello world\") == 11"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    max_div = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            max_div = i\n        i += 1\n    return max_div\n",
        "test": "assert     largest_divisor(3) == 1, \"Not implemented correctly\""
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if n < 2:\n        return []\n    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n // i\n    if n > 2:\n        result.append(n)\n    return result\n",
        "test": "assert     [2,3] == factorize(6)"
    },
    {
        "number": 26,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    i = 0\n    while i < len(numbers):\n        j = 0\n        while j < len(numbers) - 1:\n            if numbers[j] == numbers[j+1]:\n                numbers.remove(numbers[j])\n            else:\n                j += 1\n        i += 1\n    return numbers\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return \"\".join([(x.lower() if x.isupper() else x.upper()) for x in string])",
        "test": "assert     flip_case(\"Python\") == \"pYTHON\""
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    result = ''\n    for i in strings:\n        result += i\n    return result\n",
        "test": "assert     concatenate([\"abc\", \"def\"]) == \"abcdef\""
    },
    {
        "number": 29,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    filtered_list = []\n    for i in range(len(strings)):\n        if strings[i].startswith(prefix):\n            filtered_list.append(strings[i])\n    return filtered_list\n",
        "test": "assert     filter_by_prefix(['python', 'java', 'c#'], 'py') == ['python']"
    },
    {
        "number": 30,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return [item for item in l if item > 0]\n",
        "test": "assert     get_positive([-3, -2, 1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(10) == False"
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"Only int or float values allowed\")\n    if any(x == 0 for x in xs):\n        return 0\n    xs = [x / xs[-1] for x in xs]\n    if len(xs) % 2!= 0 or any(x == 0 for x in xs):\n        raise ValueError(\"Only positive values are allowed\")\n    x = 1.0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        if poly(xs, x) * poly(xs, x + 0.1) < 0:\n            return x\n",
        "test": "assert     math.isclose(find_zero([1, 0, 0]), 0)"
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    l3 = sorted(l)\n    for i in range(len(l)):\n        if i%3 == 0:\n            l3[i] = l[i]\n    return l3\n",
        "test": "assert     sort_third([1, 2, 4, 5]) == [1, 2, 4, 5]"
    },
    {
        "number": 34,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1]) == [1]"
    },
    {
        "number": 35,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1, 4, 5, 2, 3, 4, 6]) == 6"
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    # if n < 100:\n    #     return n // 7\n    # else:\n    #     return fizz_buzz(n // 10) + fizz_buzz(n // 100)\n    return sum(n % i == 0 and n % 10 == 7 for i in [11, 13])\n",
        "test": "assert     fizz_buzz(11) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    new_list = l\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_list[i] = l[i]\n    new_list.sort()\n    return new_list\n",
        "test": "assert     sort_even([1, 3, 2, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert "
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    fib = lambda n: n if n < 2 else fib(n-1) + fib(n-2)\n    prime = lambda n: n if n < 2 else prime(n-1) + prime(n-2) if not prime_test(n) else n\n    return prime(n)\n",
        "test": "assert     prime_fib(1) == 1"
    },
    {
        "number": 40,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    set_elements = set()\n    for num in l:\n        if num in set_elements:\n            return True\n        set_elements.add(num)\n    return False\n",
        "test": "assert not triples_sum_to_zero([0, 1, 2, 3])"
    },
    {
        "number": 41,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    count = 0\n    for i in range(2, n):\n        if abs(i-1) % (n - 1) == 0:\n            count += 1\n    return count\n",
        "test": "assert     car_race_collision(1) == 0, 'incorrect for n = 1'"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    return [x + 1 for x in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    # for each element in the list,\n    # add it to the set of all elements of the list\n    elements = set(l)\n    # for each element in the list,\n    # if its complement is in the set of all elements of the list\n    for e in elements:\n        if -e in elements:\n            # if the elements are distinct,\n            # return True\n            return e!= -e\n    # if there are no such pairs,\n    # return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5,6]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if x == 0:\n        return \"0\"\n    if x < 0:\n        return change_base(-x, base)\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n",
        "test": "assert     change_base(2, 2) == \"10\""
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(2, 3) == 3), \"Wrong area!\""
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n == 0:\n        raise ValueError('Error: Empty list')\n    if n % 2 == 0:\n        return (s[int(n/2)] + s[int(n/2-1)])/2\n    else:\n        return s[int((n-1)/2)]\n",
        "test": "assert     median([1]) == 1"
    },
    {
        "number": 48,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    # is_palindrome = lambda s: s == s[::-1]\n    # return is_palindrome(text)\n    return text == text[::-1]\n    \ndef is_palindrome_sentence(sentence: str):\n    \"\"\"\n    Checks if given sentence is a palindrome\n    >>> is_palindrome_sentence('anna izabella')\n    True\n    >>> is_palindrome_sentence('anna')\n    False\n    \"\"\"\n    return is_palindrome(sentence.replace(' ', '').lower())\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     is_palindrome(\"abba\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    \n    remainder = n % p\n    n //= p\n    if n == 0:\n        return remainder\n    else:\n        return ((remainder * modp(n, p)) % p)\n",
        "test": "assert     modp(2, 5) == 2"
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"zebra\")) == \"zebra\", \"Test failed\""
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    # use: ''.join(char if char not in vowels else '' for char in text)\n    vowels = frozenset('aeiouAEIOU')\n    return ''.join(char for char in text if char not in vowels)\n",
        "test": "assert     remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if t <= min(l):\n        return True\n    else:\n        return False\n",
        "test": "assert     below_threshold([1,2,3,4,5], 2) == False, \"Test 2\""
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert not same_chars(\"ab\", \"ac\")"
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    bracket_dict = {\">\": \"<\", \"<\": \">\"}\n    stack = []\n    for char in brackets:\n        if char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif char == \"<\":\n            stack.append(char)\n    return not stack\n",
        "test": "assert     correct_bracketing(\"<\") == False, \"One opening bracket without closing\""
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if len(l) < 3:\n        return True\n    if l[0] >= l[1]:\n        return l[0] >= l[1] and monotonic(l[1:])\n    if l[0] <= l[1]:\n        return l[0] <= l[1] and monotonic(l[1:])\n",
        "test": "assert     monotonic([1]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1 & s2)\n",
        "test": "assert     set(common([1, 2, 3], [1, 2, 4])) == set([1, 2])"
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(1) == 1"
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "test": "assert     sum_to_n(10) == 55,         f\"expected 55 got {sum_to_n(10)}\""
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '(':\n            bracket_stack.append(b)\n        elif b == ')':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    if not bracket_stack:\n        return True\n    return False\n",
        "test": "assert     correct_bracketing(\")()(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    ret = []\n    for i, x in enumerate(xs[1:]):\n        ret.append(i + 1)\n        ret.append(x * (i + 1))\n    return ret\n",
        "test": "assert     derivative([1, 0])     == [1, 0]"
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    assert n >= 0, 'Incorrect input!'\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    # implement your code here\n    return sum([1 for i in s if i in 'aeiouyAEIOUY'])\n",
        "test": "assert     vowels_count(\"\") == 0, \"should be 0\""
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    #return int(str(x)[-shift:] + str(x)[:-shift])\n    if shift < 0 or shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     circular_shift(12, 1) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    sum = 0\n    for char in s:\n        if ord(char) >= 65 and ord(char) <= 90:\n            sum += ord(char)\n    return sum\n",
        "test": "assert     digitSum('') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    def fruit_distribution(s, n):\n        m = s.split(\" \")\n        t = []\n        for i in m:\n            if int(i) < 0:\n                t.append(int(i))\n        t.append(n - sum(t))\n        return t.count(\"mango\")\n    return fruit_distribution(s, n)\n    \n",
        "test": "assert     fruit_distribution('3',0)==0"
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    # initialize a list to hold the result\n    result = []\n    # iterate over the input array\n    for i in range(len(arr)):\n        # check if the current value is even\n        if arr[i] % 2 == 0:\n            # if so, add it to the result list\n            result.append(arr[i])\n    # initialize the smallest value and smallest index\n    smallest_value = min(result)\n    smallest_index = result.index(smallest_value)\n    # return the smallest value and index in a list\n    return [smallest_value, smallest_index]\n",
        "test": "assert     [    0, 0    ] == pluck([0])"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    greatest = None\n    for i in lst:\n        if i > 0 and lst.count(i) > i:\n            greatest = i\n            break\n    return greatest if greatest else -1\n",
        "test": "assert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    result = []\n    for i in range(len(lst)):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    for i in range(len(lst)):\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    sorted_sides = sorted([a, b, c])\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        return round((sorted_sides[0] * sorted_sides[1] * 0.5), 2)\n    return -1\n",
        "test": "assert     triangle_area(3, 4, 10) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    sum = 0\n    l = len(q)\n    if l % 2 == 0:\n        for i in range(0, l, 2):\n            sum += q[i]\n        if sum > w:\n            return False\n        else:\n            return True\n    else:\n        for i in range(0, l-1, 2):\n            sum += q[i]\n        if sum > w:\n            return False\n        else:\n            return True\n",
        "test": "assert     will_it_fly([1], 3) == True"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    change = [0]\n    for i in range(len(arr)):\n        temp = arr[i]\n        arr[i] = -1\n        temp_change = 0\n        for j in range(len(arr)):\n            if arr[j] == temp:\n                temp_change += 1\n                temp = j\n        change.append(temp_change)\n    return min(change)\n",
        "test": "assert     smallest_change([1,2,3,4,4,3,2,1]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    lst1, lst2 = set(lst1), set(lst2)\n    if lst1.issubset(lst2):\n        return list(lst1)\n    elif lst2.issubset(lst1):\n        return list(lst2)\n    else:\n        return list(lst1.union(lst2))\n",
        "test": "assert     total_match(['abc', 'abcd', 'abcde', 'abcdef'], ['bac', 'bc', 'c']), ['abcde', 'abcdef']"
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    if a < 10:\n        return False\n    # check if it is a multiple of 3\n    if a % 3 == 0:\n        # check if it is multiple of 2\n        if a % 2 == 0:\n            return False\n        else:\n            # if not multiply by 2, check if it is multiple of another prime number\n            for i in range(3, int(sqrt(a)) + 1):\n                if a % i == 0:\n                    return False\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(14) == False"
    },
    {
        "number": 76,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if x % n == 0:\n        return True\n    return False\n",
        "test": "assert     is_simple_power(1, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return a>0 and a**(1./3.)%1==0\n",
        "test": "assert     iscube(27) == True"
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    num = num.upper()\n    # print(num)\n    primes = [2,3,5,7]\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    # print(hex_dict)\n    count = 0\n    for i in num:\n        if i in hex_dict:\n            # print(hex_dict[i])\n            if hex_dict[i] in primes:\n                count += 1\n    return count\n",
        "test": "assert     hex_key('0F') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "assert     decimal_to_binary(1) == 'db1db'"
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return s.lower().count(s[0:3]) == len(s) and not len(set(s[i:i+3] for i in range(0, len(s), 3))) > 1\n",
        "test": "assert     is_happy(\"abcbcd\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    result = []\n    for g in grades:\n        if g == 0:\n            result.append('E')\n        elif g < 1.0:\n            result.append('D')\n        elif g < 2.0:\n            result.append('C')\n        elif g < 3.0:\n            result.append('B')\n        elif g < 4.0:\n            result.append('A')\n        else:\n            result.append('A+')\n    return result\n",
        "test": "assert     numerical_letter_grade( [4.0, 4.0, 4.0, 4.0, 4.0, 4.0] ) == [ \"A+\", \"A+\", \"A+\", \"A+\", \"A+\", \"A+\" ], 'incorrect result'"
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    if len(string) > 1:\n        length = len(string)\n        i = 2\n        while i <= length:\n            if length % i == 0:\n                return False\n            i += 1\n        return True\n    return False\n",
        "test": "assert     prime_length(\"helo\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    return sum(len(str(i)) == n and (i == 1 or i == 10**(n-1)) for i in range(1,10**n))\n",
        "test": "assert     starts_one_ends(0) == 0, \"The first argument must be positive\""
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return \"{0:b}\".format(N)\n",
        "test": "assert     solve(21) == '10101'"
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2)])\n",
        "test": "assert     add([1,3,5,7]) == 10"
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return \" \".join(sorted(\" \".join(s.split()).replace(\" \", \"\")))",
        "test": "assert     anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return None\n",
        "test": "assert     [(0,2), (0,1)] == get_row([[1, 2], [3, 4], [5, 6]], 2)"
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    if len(array) < 2:\n        return array\n    pivot = array[0]\n    left = [x for x in array if x < pivot]\n    middle = [x for x in array if x == pivot]\n    right = [x for x in array if x > pivot]\n    return sort_array(left) + middle + sort_array(right)\n",
        "test": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]"
    },
    {
        "number": 89,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[(alphabet.index(c)+2)%26] for c in s])\n",
        "test": "assert     (encrypt('a') == 'c')"
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 2, 3, 4, 5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    \n    return S.count('I ')\n",
        "test": "assert     is_bored(\"Are you bored?\") == False, \"Wrong result\""
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    result = False\n    if x == int(x) or y == int(y) or z == int(z):\n        result = x + y == z or y + z == x or z + x == y\n        return result\n    else:\n        return result\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\n",
        "test": "assert     any_int(1, 3, 2) == True"
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    message = message.lower()\n    message = [letter if letter in 'abcdefghijklmnopqrstuvwxyz' else letter.swapcase() for letter in message]\n    message = ''.join(message)\n    \n    vowels = {'a': 'A', 'e': 'E', 'i': 'I', 'o': 'O', 'u': 'U'}\n    \n    for vowel in vowels.keys():\n        message = message.replace(vowel, vowels[vowel])\n    return message\n",
        "test": "assert     encode('a') == 'A'"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    # Implement your code here\n    res = []\n    for i in lst:\n        if isprime(i) == True:\n            res.append(i)\n    largest = max(res)\n    return sum(map(int,str(largest)))\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    \n    #your code here\n    \n    return False\n",
        "test": "assert     check_dict_case({}) == False, \"Empty dict\""
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    result = []\n    if n == 0:\n        return result\n    elif n == 1:\n        return result\n    else:\n        for number in range(2,n+1):\n            if number > 1:\n                for i in range(2,number):\n                    if number % i == 0:\n                        break\n                else:\n                    result.append(number)\n    return result\n    ",
        "test": "assert     count_up_to(1) == []"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    # a and b are always valid\n    product = 0\n    if(a < 10 and b < 10):\n        product = a * b\n    else:\n        for i in range(len(str(a))):\n            for j in range(len(str(b))):\n                product += int(str(a)[i]) * int(str(b)[j])\n    return product\n",
        "test": "assert     multiply(5, 2) == 10"
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    \n    return sum([s[i].isupper() for i in range(len(s)) if i % 2 == 0])\n",
        "test": "assert     count_upper('') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if type(value) == int:\n        return value\n    else:\n        try:\n            float(value)\n            return int(round(float(value)))\n        except:\n            raise Exception(\"Please enter a number\")\n",
        "test": "assert     closest_integer(2.5) == 2"
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + [n + 1]\n    return make_a_pile(n - 1) + [n]\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return s.replace(' ', '').split(',')\n",
        "test": "assert     (type(words_string(\"Hi there, this is your second sentence\")) == list)"
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if y % 2 == 1:\n        return -1\n    if x == y:\n        return x\n    while x < y:\n        x += 2\n        if x >= y:\n            return -1\n    return x\n",
        "test": "assert     choose_num(10, 10) == 10"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    # Your code here\n    return -1\n",
        "test": "assert     rounded_avg(1, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    \n    return list(filter(lambda x: not any([int(i)%2==0 for i in str(x)]), sorted(x)))\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 3, 5], \"Check numbers without any even digit.\""
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    arr.sort()\n    arr.reverse()\n    ans = []\n    for i in arr:\n        if i == 0:\n            ans.append('Zero')\n        elif i == 1:\n            ans.append('One')\n        elif i == 2:\n            ans.append('Two')\n        elif i == 3:\n            ans.append('Three')\n        elif i == 4:\n            ans.append('Four')\n        elif i == 5:\n            ans.append('Five')\n        elif i == 6:\n            ans.append('Six')\n        elif i == 7:\n            ans.append('Seven')\n        elif i == 8:\n            ans.append('Eight')\n        elif i == 9:\n            ans.append('Nine')\n        else:\n            pass\n    return ans\n",
        "test": "assert     by_length([5,4,3,2,1]) == [\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]"
    },
    {
        "number": 106,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    if n <= 0:\n        return []\n    l = [1]\n    for i in range(1,n):\n        if i%2 == 0:\n            l.append(i*l[i-1])\n        else:\n            l.append(sum(range(1,i+1)))\n    return l\n",
        "test": "assert     f(1) ==     [1]"
    },
    {
        "number": 107,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    assert n >= 1\n    def _is_palindrome(n):\n        n = str(n)\n        for i in range(len(n)//2):\n            if n[i]!= n[-(i+1)]:\n                return False\n        return True\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if _is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(3) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    return sum(1 for x in arr if x>0)\n",
        "test": "assert     count_nums([]) == 0, \"0 digits in array = 0\""
    },
    {
        "number": 109,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return True\n",
        "test": "assert     move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    # lst1.sort()\n    # lst2.sort()\n    if lst1!= lst2 and len(lst1) == len(lst2):\n        lst1.sort()\n        lst2.sort()\n        for i in range(len(lst1)):\n            if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([5,4,3,2,1], [1,3,5,7,8]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    test = test.replace(' ','')\n    counter = {}\n    for letter in test:\n        if letter not in counter:\n            counter[letter] = 1\n        else:\n            counter[letter] += 1\n    return dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n",
        "test": "assert     histogram('c') ==     {'c': 1}, 'incorrect histogram()'"
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return (s.replace(c,\"\"),s[::-1].replace(c,\"\")==s[::-1])\n",
        "test": "assert     reverse_delete(\"\", \"\") == (\"\", True), \"Case2: empty string\""
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    output = []\n    for elem in lst:\n        count = 0\n        for char in elem:\n            if char not in '1234567890':\n                pass\n            else:\n                count += 1\n        output.append(count)\n    return output\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    start, end = 0, len(nums)-1\n    min_sum = sum(nums)\n    while start < end:\n        if sum(nums[start:end+1]) < min_sum:\n            min_sum = sum(nums[start:end+1])\n        start += 1\n    return min_sum",
        "test": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7"
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    row_num = len(grid)\n    col_num = len(grid[0])\n    count = 0\n    for i in range(row_num):\n        left = 0\n        right = col_num\n        for j in range(col_num):\n            if grid[i][j] == 1:\n                left = j + 1\n                break\n        for j in range(col_num - 1, -1, -1):\n            if grid[i][j] == 1:\n                right = j\n                break\n        curr_sum = 0\n        for j in range(left, right):\n            curr_sum += grid[i][j]\n        while curr_sum > capacity:\n            for j in range(left, right):\n                if curr_sum - grid[i][j] >= 0:\n                    curr_sum -= grid[i][j]\n                    grid[i][j] = 0\n                else:\n                    grid[i][j] -= curr_sum\n                    count += 1\n                    break\n    return count\n",
        "test": "assert     max_fill([[0,0,0],[0,0,0]], 1) == 0, \"Wrong answer\""
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Incorrect\""
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    words = s.split(' ')\n    ans = []\n    for word in words:\n        if len(word) > n:\n            pass\n        else:\n            c = 0\n            for i in word:\n                if i not in ('a', 'e', 'i', 'o', 'u'):\n                    c += 1\n            if c == n:\n                ans.append(word)\n    return ans\n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
        "test": "assert     select_words('', 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    return \"\"\n",
        "test": "assert     get_closest_vowel(\"x\") == \"\", \"First test\""
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    open_par, close_par = 0, 0\n    for e in lst:\n        if e == '(':\n            open_par += 1\n        elif e == ')':\n            close_par += 1\n        if close_par > open_par:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens([')', ')', '(']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    return sorted(arr)[-k:]\n",
        "test": "assert     maximum([1, 2, 3, 5, 8, 9, 12], 3) == [8, 9, 12]"
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    if len(lst) == 0:\n        return 0\n    even = [x for x in lst if x % 2 == 0]\n    return sum([y for y in even if y % 2!= 0])",
        "test": "assert     solution([2, 3, 4, 5, 7]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    arr = arr[0:k]\n    return sum(int(i) for i in arr)\n",
        "test": "assert     add_elements([1, 2, 3, 4], 2) == 3"
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    collatz_seq = [n]\n    while collatz_seq[-1]!= 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(int(collatz_seq[-1] / 2))\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n    return collatz_seq\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    # your code here\n    # return True or False\n    return False\n",
        "test": "assert     valid_date(\"13-15-2016\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('') == [], \"no whitespace should split into a list of empty strings\""
    },
    {
        "number": 126,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if len(set(lst)) == len(lst):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sorted([3])"
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    start, end = interval1\n    start2, end2 = interval2\n    if start > end2 or end < start2:\n        return \"NO\"\n    elif start <= start2 and end >= end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (3, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    # return sum(abs(i) * (1 if i > 0 else -1 if i < 0 else 0) for i in arr)\n    return sum(abs(i) for i in arr) * (1 if all(i>0 for i in arr) else -1 if all(i<0 for i in arr) else 0)\n",
        "test": "assert     prod_signs([1, 2, 3]) == 6"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    return []\n",
        "test": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [3]\n    if n == 3:\n        return [3, 3]\n    res = [1, 3, 2, 8]\n    if n > 3:\n        i = 3\n        while i < n + 1:\n            if i % 2 == 0:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n            i += 1\n    return res\n",
        "test": "assert     tri(1) == [1]"
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if n < 10:\n        return n\n    if n%2 == 0:\n        return 0\n    result = 1\n    for i in str(n):\n        if int(i)%2 == 0:\n            return 0\n        result *= int(i)\n    return result\n    # TODO: Question 1 - complete the body of the digits function here\n",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert     is_nested('') == True, 'Empty string is a valid nested string.'"
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return round(sum(x**2 for x in lst))\nprint(sum_squares([1,2,3]))\n",
        "test": "assert     sum_squares([]) == 0, \"empty\""
    },
    {
        "number": 134,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    # if len(txt) == 1:\n    #     return True if txt.isalpha() else False\n    # if txt[:-1].isalpha():\n    #     return True\n    # return False\n    # isalpha() checks if all characters in a string are alphabets\n    # isnumeric() checks if all characters in a string are numbers\n    return len(txt) == 1 or (txt[:-1].isalpha() and txt[-1].isnumeric())\n",
        "test": "assert     check_if_last_char_is_a_letter('A B12') == False"
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    return_val = -1\n    if arr:\n        prev_val = arr[0]\n        for i, curr_val in enumerate(arr):\n            if curr_val > prev_val:\n                return_val = i\n            prev_val = curr_val\n    return return_val\n",
        "test": "assert     can_arrange(arr=[1, 2, 3, 4, 3]) == 3"
    },
    {
        "number": 136,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if i > 0:\n            b = i\n        if i < 0:\n            a = i\n    return (a, b)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    try:\n        a, b = float(a), float(b)\n        return max(a, b)\n    except ValueError:\n        return None\n",
        "test": "assert     compare_one(1.5, 2.3) == 2.3"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    l = [i for i in range(1,n) if i % 2 == 0]\n    return len(l) == 4\n",
        "test": "assert     is_equal_to_sum_even(15) == False"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "    sum = 1\n    if n <= 1:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            sum = sum * i\n    return sum",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    count = 0\n    while True:\n        count += 1\n        if count > 100:\n            return text\n        text = text.replace(\" \", \"_\")\n        if text.find(\"  \") > 0:\n            text = text.replace(\"  \", \"-\")\n    return text\n",
        "test": "assert     fix_spaces('hello world') == 'hello_world'"
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    if file_name.count(\".\")!= 1 or file_name.find(\".\") == 0 or file_name.find(\".\") == len(file_name) - 1 or file_name.isnumeric():\n        return \"No\"\n    return \"Yes\"\n",
        "test": "assert     file_name_check('this.is.an.invalid.file.name') == 'No', 'Wrong result'"
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "    lst_res = []\n    for i in lst:\n        if (i >= 0 and i % 3 == 0) or (i < 0 and i % 4 == 0):\n            lst_res.append(i**2)\n        else:\n            lst_res.append(i)\n    return sum(lst_res)\n",
        "test": "assert     sum_squares([1,2,3]) == 12, \"Should be 12\""
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    return \" \".join([word for word in sentence.split(\" \") if len(word) in primes_set])\n",
        "test": "assert     words_in_sentence('hello my name is Peter') == 'hello my name is Peter'"
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x[0] = int(x[0])\n    n[0] = int(n[0])\n    return x[0] == n[0]\n",
        "test": "assert     not simplify('6/7', '7/3')"
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n",
        "test": "assert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 146,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and int(str(i)[0]) % 2 == 1 and int(str(i)[-1]) % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    a = [i*i - i + 1 for i in range(1, n + 1)]\n    return sum([1 if ((a[i] + a[j] + a[k]) % 3 == 0) else 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n)])\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    try:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    return tuple(sorted((planets[p] for p in range(p1, p2+1)), key=lambda x: planets.index(x)))\n",
        "test": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus'), 'error'"
    },
    {
        "number": 149,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return sorted(lst, key = lambda s: (len(s), s))\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    if n <= 1:\n        return n\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return y\n        return x\n",
        "test": "assert     x_or_y(3, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    total = 0\n    for x in lst:\n        if x % 2 == 1 and x >= 0:\n            total += x**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    \n    score = game\n    guess = guess\n    diff = [abs(i-j) for i,j in zip(score,guess)]\n    return diff\n",
        "test": "assert     [0,0] == compare([1,1],[1,1])"
    },
    {
        "number": 153,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return class_name+\".\"+max(extensions, key=lambda x: (x.count(\"A\")-x.count(\"a\")), default=None)\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    assert a.islower() and b.islower(), \"The words should be lower case\"\n    assert len(a) > 0 and len(b) > 0, \"The length of the word should be greater than 0\"\n    if a in b or a == b:\n        return True\n    else:\n        return False\n    return False\n",
        "test": "assert     cycpattern_check('a','a') == True "
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    count_even, count_odd = 0, 0\n    while num > 0:\n        if num & 1 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num >> 1\n    return (count_even, count_odd)",
        "test": "assert     even_odd_count(0) == (0,0)"
    },
    {
        "number": 156,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    int_to_roman = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL',\n        50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    roman = \"\"\n    for divisor in sorted(int_to_roman.keys(), reverse=True):\n        while number >= divisor:\n            number -= divisor\n            roman += int_to_roman[divisor]\n    return roman\n",
        "test": "assert     int_to_mini_roman(1000) == \"M\""
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if a < b+c or b < a+c or c < b+a:\n        return False\n    return True\n",
        "test": "assert     right_angle_triangle(1, 3, 2) == False, \"Not a right triangle\""
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    max_unique = 0\n    for word in words:\n        unique_characters = len(set(word))\n        if unique_characters > max_unique:\n            max_unique = unique_characters\n            max_word = word\n    return max_word\n",
        "test": "assert     (find_max(['macaroni', 'taco', 'carrot','macaroni']) =='macaroni'),'macaroni should be returned'"
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return [number + need, remaining - need]",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"+\"], [1, 2, 3]) == 6"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return s.swapcase()\n    ",
        "test": "assert     solve(\"a\") == \"A\""
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    import hashlib\n    if text is None:\n        return None\n    if text == '':\n        return None\n    hash_obj = hashlib.md5(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return [i for i in range(a+1, b) if not i % 2]\n",
        "test": "assert     generate_integers(1, 3) == [2]"
    }
]