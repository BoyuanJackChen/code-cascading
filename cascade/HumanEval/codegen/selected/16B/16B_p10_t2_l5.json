[
    {
        "number": 0,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 994,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    # Create a list of strings to store the group\n    paren_groups = []\n    # Create a stack to store each char\n    stack = []\n    # Iterate through each character\n    for char in paren_string:\n        # If the character is an open bracket, push it to the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closed bracket, then the stack is empty\n        elif char == ')':\n            # If the stack is empty, then there are mismatched parentheses\n            if len(stack) == 0:\n                return []\n            # If the stack is not empty, then pop the last element, i.e. the last open bracket\n            else:\n                stack.pop()\n    # If the stack is empty, then the input is balanced\n    if len(stack) == 0:\n        paren_groups.append(''.join(paren_string))\n    # If the stack is not empty, then there are mismatched parentheses, return the empty list\n    else:\n        return []\n    # Iterate through each element in the stack, starting from the last element\n    while len(stack)!= 0:\n        # Pop the last element, i.e. the last open bracket\n        stack.pop()\n        # Iterate through each character in the input string\n        for char in paren_string:\n            # If the character is an open bracket, push it to the stack\n            if char == '(':\n                stack.append(char)\n            # If the character is a closed bracket, then the stack is empty\n            elif char == ')':\n                # If the stack is empty, then there are mismatched parentheses\n                if len(stack) == 0:\n                    return []\n                # If the stack is not empty, then pop the last element, i.e. the last open bracket\n                else:\n                    stack.pop()\n        # If the stack is empty, then the input is balanced\n        if len(stack) == 0:\n            paren_groups.append(''.join(paren_string))\n        # If the stack is not empty, then there are mismatched parentheses, return the empty list\n        else:\n            return []\n    # Return the list of groups\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"(())()\") == [\"(())()\"]",
        "num_ids": 2360,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    assert(number > 0)\n    if number < 1:\n        return 0\n    integral, decimal = str(number).split('.')\n    return float('0.' + decimal)\n",
        "test": "assert     truncate_number(12.25) ==.25",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    if balance < 0:\n        return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    # Calculate mean of input numbers.\n    x_mean = sum(numbers) / len(numbers)\n    # Calculate absolute differences from x_mean.\n    absolute_differences = [abs(x - x_mean) for x in numbers]\n    # Calculate and return mean of absolute differences.\n    return sum(absolute_differences) / len(absolute_differences)\n",
        "test": "assert     mean_absolute_deviation([1,1,1,1]) == 0, 'Your result does not match expected result.'",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n",
        "test": "assert intersperse([], 1) == []",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    ans = []\n    temp = 0\n    count = 0\n    for x in paren_string:\n        if x == '(':\n            count += 1\n            temp += 1\n        elif x == ')':\n            count -= 1\n            temp -= 1\n            if count == 0:\n                ans.append(temp)\n                temp = 0\n    return ans\n",
        "test": "assert     parse_nested_parens(\"()\")     == [0]",
        "num_ids": 2727,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"world\", \"test\"], \"hello\") == [\"hello\"]",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for i in numbers:\n        product_ *= i\n    return (sum_, product_)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    res: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        else:\n            res.append(max(res[i - 1], numbers[i]))\n    return res\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    if is_palindrome(string):\n        return string\n",
        "test": "assert    \"aba\" == make_palindrome(\"aba\")",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = max(len(s) for s in strings)\n    return [s for s in strings if len(s) == max_len][0]\n",
        "test": "assert     longest([\"vai\", \"tudo\", \"bem\", \"nao\", \"esta\", \"tudo\", \"bem\"]) == \"tudo\"",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(2, 4) == 2",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    # final_str = string\n    # final_str = string.split(\" \")\n    final_str = string[0:]\n    # print(final_str)\n    all_list = []\n    for i in range(len(final_str)):\n        # print(final_str[i])\n        list1 = final_str[0:i+1]\n        all_list.append(list1)\n    # print(all_list)\n    return all_list\n",
        "test": "assert     all_prefixes('') == []",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    pass\n",
        "test": "assert     parse_music('..|..|..|..|o|.|.|..|') == [3, 3, 4, 1, 1, 3, 4]",
        "num_ids": 3840,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    result = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            result += 1\n    return result\n",
        "test": "assert     how_many_times('aaaaa', 'b') == 0",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    numbers = numbers.split(' ')\n    new_numbers = []\n    for i in numbers:\n        if i == 'zero':\n            new_numbers.append(0)\n        elif i == 'one':\n            new_numbers.append(1)\n        elif i == 'two':\n            new_numbers.append(2)\n        elif i == 'three':\n            new_numbers.append(3)\n        elif i == 'four':\n            new_numbers.append(4)\n        elif i == 'five':\n            new_numbers.append(5)\n        elif i =='six':\n            new_numbers.append(6)\n        elif i =='seven':\n            new_numbers.append(7)\n        elif i == 'eight':\n            new_numbers.append(8)\n        elif i == 'nine':\n            new_numbers.append(9)\n    return''.join([str(i) for i in sorted(new_numbers)])\n",
        "test": "assert     sort_numbers(\"five nine four eight zero three two one seven six\") == \"0123456789\"",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    \n    numbers.sort()\n    \n    min_value = numbers[0]\n    max_value = numbers[-1]\n    \n    closest = (min_value, max_value)\n    \n    return closest\n",
        "test": "assert     find_closest_elements([0,0,0,0,0,0,0,0,0,0]) == (0,0)",
        "num_ids": 1943,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "test": "assert     rescale_to_unit([])             == []",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [int(value) for value in values if isinstance(value, int) or isinstance(value, float)]\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    if n == 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    prime_numbers = []\n    for num in range(2, n + 1):\n        while n % num == 0:\n            prime_numbers.append(num)\n            n //= num\n    return prime_numbers\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    new_numbers = []\n    for i in numbers:\n        if i not in new_numbers:\n            new_numbers.append(i)\n    return new_numbers\n",
        "test": "assert     remove_duplicates([2, 2, 2, 11]) == [2, 11]",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "test": "assert     flip_case('') == ''",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"\", \"\", \"\"]) == \"\"",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix(['hello', 'hi', 'howdy', 'heyas'], 'hey') == ['heyas']",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if n == 1:\n        return False\n    for k in range(2,n):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    # Only even xs and largest non zero coefficient\n    xs = xs[1::2] + xs[::2]\n    # Find a, b\n    a = xs[0]\n    b = xs[1]\n    # From b and a, find x\n    return -b / a\n",
        "test": "assert     poly([1, 1, 1], 0) == 1",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if (i % 3)!= 0:\n            l[i] = l[i]\n    l.sort()\n    return l\n",
        "test": "assert     sort_third([1,2,3]) == [1,2,3]",
        "num_ids": 2712,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    x = []\n    for a in l:\n        if a not in x:\n            x.append(a)\n    x.sort()\n    return x\n",
        "test": "assert     unique([1, 2, 3, 3, 4, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n",
        "test": "assert     max_element([1, 5, -2, 6]) == 6, f'error 1'",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    return sum(1 for i in range(n) if (i%11==0 or i%13==0) and str(i).count(\"7\")>0)\n",
        "test": "assert     fizz_buzz(35) == 0, 'Incorrect result for 35'",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    if len(l) < 2:\n        return l\n    else:\n        return l[:2] + sort_even(l[2:])\n",
        "test": "assert     sort_even([1, 1, 1, 1]) == [1, 1, 1, 1], \"Problem with sort_even\"",
        "num_ids": 1525,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "assert     decode_cyclic(encode_cyclic(s = \"ATCGATCG\")) == \"ATCGATCG\"",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        a = 0\n        b = 1\n        while b < n:\n            a, b = b, a+b\n        return b\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(1) == 0, \"car_race_collision(1)\"",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    # getting the list in sorted order\n    l = sorted(l)\n    # iterating the list\n    for i in range(len(l)):\n        # if the number is not the last element\n        if i < len(l)-1:\n            # if the sum of the two elements is zero\n            if l[i] + l[i+1] == 0:\n                # return True\n                return True\n    # return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"empty list\"",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    if base == 10:\n        return str(x)\n    elif x <= 0:\n        return '0'\n    elif base == 2:\n        return '{:b}'.format(x)\n    elif base == 8:\n        return oct(x)[2:]\n    elif base == 16:\n        return hex(x)[2:].upper()\n    elif base == 7:\n        return ''.join(str(int(i) * (base - 1)) for i in x)\n    elif base == 6:\n        return ''.join(str(int(i) * (base - 1)) for i in x)\n    else:\n        return 'Invalid base'\n",
        "test": "assert     change_base(12, 2) == '1100', 'Should be 1100'",
        "num_ids": 1807,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(10, 3) == 33.75",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    fib4_dict = {0:0, 1:0, 2:2, 3:0}\n    if n >= 4:\n        for i in range(4, n+1):\n            fib4_dict[i] = fib4_dict[i-1] + fib4_dict[i-2] + fib4_dict[i-3] + fib4_dict[i-4]\n    return fib4_dict[n]\n    ",
        "test": "assert     0 == fib4(0)",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"aba\") == True",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    if n < 0:\n        n = -n\n        return pow(2, n, p)\n    return pow(2, n, p)\n",
        "test": "assert     modp(2, 7) == 4",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"mmai\" == decode_shift(encode_shift(\"mmai\"))",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if not isinstance(text, str):\n        raise TypeError('text must be a string')\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n",
        "test": "assert     remove_vowels('hello') == 'hll', 'Remove vowels should remove vowels from a text'",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([3, 2, 1], 0) == False",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return all(i in s0 and i in s1 for i in s0)\n",
        "test": "assert     same_chars('nelson', 'nelsen') == False,'same_chars'",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == \"<\":\n            bracket_stack.append(\"<\")\n        elif c == \">\":\n            if bracket_stack == []:\n                return False\n            elif bracket_stack[-1] == \"<\":\n                bracket_stack.pop()\n            else:\n                return False\n    return bracket_stack == []\n",
        "test": "assert     correct_bracketing(\"<>>\") == False",
        "num_ids": 1982,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return len(set(l)) == len(l) or all(l[i] < l[i+1] for i in range(len(l)-1)) or all(l[i] > l[i+1] for i in range(len(l)-1))\n",
        "test": "assert     not monotonic([1, 2, 5, 4, 5, 6, 7, 8])",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    i = 2\n    while i * i < n:\n        if n % i == 0:\n            n //= i\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(3) == 3",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    assert n >= 1, \"The value of n must be greater than or equal to 1.\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "test": "assert     sum_to_n(2) == 3",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     not correct_bracketing(\"(()\")",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    if xs == [] or len(xs) == 1:\n        return []\n    if len(xs) == 2:\n        return [xs[1]]\n    return [xs[1]] + derivative(xs[1:])\n",
        "test": "assert     [0,3,4]         == derivative([0,1,3])",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "    assert n >= 0, 'n must be greater than or equal to 0'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n        if letter == \"y\" and s[-1]!= \"y\":\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"\") == 0",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return ''.join(str(x)[shift:] + str(x)[:shift])\n",
        "test": "assert     (circular_shift(912,3) == '912')",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    s = str(s)\n    return sum([ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90])\n",
        "test": "assert     digitSum('') == 0, \"Wrong answer for empty string!\"",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return n - s.count(\"0\") - s.count(\"1\") - s.count(\"2\")\n",
        "test": "assert     fruit_distribution('8:5:5', 5) == 1",
        "num_ids": 2007,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    return []\n",
        "test": "assert [] == pluck([])",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    # your code here\n    max_value = max(lst)\n    max_count = lst.count(max_value)\n    \n    if max_count < max_value:\n        return -1\n    return max_value\n",
        "test": "assert     search([5, 5, 5]) == -1",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    if lst == []:\n        return []\n    else:\n        sorted_list = sorted(lst)\n        strange_list = [sorted_list[0]]\n        for i in range(1, len(sorted_list)):\n            strange_list.append(sorted_list[-i])\n            strange_list.append(sorted_list[i])\n    return strange_list\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    # A valid triangle has three sides with a+b>c and b+c>a and c+a>b\n    # If a+b>c and b+c>a and c+a>b then sum(a,b,c)>a+b+c is True\n    return round((sum([a,b,c]) - min([a,b,c])) * 0.5, 2) if a+b > c and b+c > a and c+a > b else -1\n",
        "test": "assert     (triangle_area(1, 1, 1) == 1.0) ",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    \n    return False\n",
        "test": "assert     will_it_fly([1,3,5,7,9], 20) == False",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    # Your code here\n    arr_count = {}\n    for num in arr:\n        if num in arr_count:\n            arr_count[num] += 1\n        else:\n            arr_count[num] = 1\n    count = 0\n    for num in arr_count:\n        if arr_count[num] % 2!= 0:\n            count += arr_count[num] - 1\n    return count // 2\n",
        "test": "assert     smallest_change([1, 1, 3, 3]) == 0",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return lst2\n",
        "test": "assert     total_match(['abcd', 'bcde', 'bcde'], ['abcd', 'bcde', 'bcde']) == ['abcd', 'bcde', 'bcde']",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    for i in range(2, 11):\n        if a % i!= 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(1) == False",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return False\n    \n    x = abs(x)\n    n = abs(n)\n    \n    if x % n == 0:\n        return True\n    return False\n    \n",
        "test": "assert     is_simple_power(2, 3) == False",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    # YOUR CODE HERE\n    n=int(a**(1/3))\n    if n**3==a:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    \n    # your code here\n    return 0\n",
        "test": "assert     hex_key('AA') == 0, \"wrong\"",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "assert decimal_to_binary(15) == 'db1111db'",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    while len(set(s)) < len(s):\n        i = 0\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                del s[i]\n                del s[i]\n                i -= 1\n                break\n            i += 1\n        if i == len(s)-1:\n            return True\n    return False\n",
        "test": "assert     is_happy('unhappy') == False",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    \n    return grades\n",
        "test": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0])!= ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 2198,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if len(string) == 2:\n        return len(string) % 2!= 0\n    return len(string) % 2!= 0 and prime_length(string[1:])\n",
        "test": "assert     prime_length(\"a\") == False, \"ERROR: a is not a prime number\"",
        "num_ids": 1546,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    if n == 1:\n        return 1\n    return 10 ** (n - 1) - starts_one_ends(n - 1)\n",
        "test": "assert     starts_one_ends(1) ==    1",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return bin(N)[2:]",
        "test": "assert     (solve(1) == '1'), \"Incorrect solution for solve(1)\"",
        "num_ids": 1860,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2 == 0:\n                new_lst.append(lst[i])\n    return sum(new_lst)\n",
        "test": "assert     add([1,2,3]) == 2",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    return''.join(sorted(''.join(s).split(), key=str.lower))\n",
        "test": "assert     anti_shuffle('abc') == 'abc'",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    return sorted([\n        (index, col) for index, row in enumerate(lst) if x in row\n    ] + [(index, col) for index, row in enumerate(lst) if x not in row],\n    key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     [[(0,0), (0,1)], [(1,0), (1,1), (1,2)], [(0,0), (2,0), (2,1), (2,2)]] == get_row([[1,0], [2,1], [3,2]], 0)",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    # your code here\n    for i in range(len(array)):\n        for j in range(len(array)-1-i):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n",
        "test": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'incorrect'",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    newstring = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                if (ord(char)+2) <= 91:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n            else:\n                if (ord(char)+2) <= 123:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n        else:\n            newstring += char\n    return newstring\n",
        "test": "assert encrypt(\"a\"), \"If one letter is passed, the function should return the same letter\"",
        "num_ids": 1949,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return None\n    \n    lst.sort()\n    return lst[1]\n",
        "test": "assert next_smallest([3, 2, 4, 5, 1]) == 2",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n",
        "test": "assert     is_bored('') == 0, 'Empty string'",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return ((x == z + y) or (y == z + x)) and type(x) == type(y) == type(z) == int\n",
        "test": "assert     any_int(1, 2, 1) == True, \"Wrong answer: any_int(1, 2, 1) == True\"",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    pass\n",
        "test": "assert     encode(\"Python\") == \"pYTHON\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    largest_prime = -1\n    sum_digits = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                if num > largest_prime:\n                    largest_prime = num\n                    sum_digits += num\n    return sum_digits\n    ",
        "test": "assert skjkasdkd([37, 37, 37]) == 37, 'incorrect result for [37,37,37]'",
        "num_ids": 2225,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if not dict:\n        return False\n    for k, v in dict.items():\n        if not k.isupper() and not k.islower():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, \"Wrong output\"",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    def is_prime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    def gen(n):\n        for i in range(2, n):\n            if is_prime(i):\n                yield i\n    return list(gen(n))\n",
        "test": "assert     count_up_to(3) == [2]",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    a_new = a % 10\n    b_new = b % 10\n    return a_new*b_new\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 1647,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return sum([1 for i in s[1::2] if i.isupper()])\n",
        "test": "assert     count_upper(\"\") == 0, \"Empty string\"",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    value = float(value)\n    return int(value + (value % 1))\n    # or using math.ceil()\n    # return math.ceil(value)\n",
        "test": "assert     closest_integer(0) == 0",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n + 1\n        pile.append(n)\n    return pile\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return s.split()\n",
        "test": "assert     words_string('a') == ['a']",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if x % 2 == 0 and x <= y and x >= 0:\n        if y % 2 == 0:\n            return min(x, y)\n        else:\n            return max(x, y)\n    else:\n        return -1\n",
        "test": "assert     choose_num(20, 10) == -1, choose_num(20, 10)",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    if n > m: return -1\n    else:\n        average = int(n+m/2)\n        return bin(average)[2:]\n",
        "test": "assert ",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    x = sorted(x)\n    for num in x:\n        if num % 2 == 0:\n            x.remove(num)\n    return x\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    \n    def numberToName(number):\n        if number == 1:\n            return \"One\"\n        elif number == 2:\n            return \"Two\"\n        elif number == 3:\n            return \"Three\"\n        elif number == 4:\n            return \"Four\"\n        elif number == 5:\n            return \"Five\"\n        elif number == 6:\n            return \"Six\"\n        elif number == 7:\n            return \"Seven\"\n        elif number == 8:\n            return \"Eight\"\n        elif number == 9:\n            return \"Nine\"\n        \n    def int_to_string(num):\n        return [int(x) for x in str(num)]\n    \n    def sort_between(array):\n        for i in range(0, len(array)):\n            for j in range(i + 1, len(array)):\n                if array[j] < array[i]:\n                    temp = array[j]\n                    array[j] = array[i]\n                    array[i] = temp\n        return array\n        \n    def reverse_list(array):\n        return array[::-1]\n        \n    def replace_digits(array):\n        for i in range(0, len(array)):\n            array[i] = numberToName(array[i])\n        return array\n    \n    if len(arr) == 0:\n        return []\n    \n    # sort the array\n    sort_arr = sort_between(arr)\n    \n    # reverse the array\n    rev_arr = reverse_list(sort_arr)\n    \n    # replace all of the digits with their corresponding names\n    replace_arr = replace_digits(rev_arr)\n    \n    return replace_arr\n    \nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(by_length([1, 1, 2, 2, 3, 4, 5, 8, 8]))\nprint(by_length([1, -1, 55]))\nprint(by_length([]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))",
        "test": "assert     by_length([1, 2, 3]) == ['Three', 'Two', 'One']",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return [i if i%2==0 else sum(range(1,i+1)) for i in range(1, n+1)]\n",
        "test": "assert     f(1) ==     [1]",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    return (0, 0) if n < 2 else (len(list(filter(lambda x: str(x) == str(x)[::-1], range(1, n + 1)))), len(list(filter(lambda x: str(x)!= str(x)[::-1], range(1, n + 1)))))\n",
        "test": "assert     even_odd_palindrome(10) == (9, 1)",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    def count(n):\n        if n < 0:\n            return -1\n        else:\n            return 1\n    counts = 0\n    for i in arr:\n        if count(i) == 1:\n            counts += 1\n    return counts\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return True\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    \n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2], [3, 4]) == \"NO\"",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    histo = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            histo[letter] = histo.get(letter, 0) + 1\n    return histo\n",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    return (s.replace(c,\"\"),len(s) == len(s[::-1]))\n",
        "test": "assert     reverse_delete(\"aba\",\"\") == (\"aba\", True)",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    ret_lst = []\n    for i in lst:\n        ret_lst.append(odd_count_helper(i))\n",
        "test": "assert ",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    minSum = nums[0]\n    sums = []\n    sums.append(nums[0])\n    for i in range(1, len(nums)):\n        sums.append(sums[i - 1] + nums[i])\n    minSum = min(sums)\n    for i in range(len(nums)):\n        j = i + 1\n        sums = []\n        sums.append(nums[0])\n        while j < len(nums):\n            sums.append(sums[j - 1] + nums[j])\n            j += 1\n        if min(sums) < minSum:\n            minSum = min(sums)\n    return minSum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    if len(grid) == 0:\n        return 0\n    def helper(grid, capacity, n, m, visited, ans):\n        if n == len(grid) and m == len(grid[0]):\n            return True\n        if n < 0 or n >= len(grid) or m < 0 or m >= len(grid[0]):\n            return False\n        if visited[n][m] or grid[n][m] == 0:\n            return False\n        visited[n][m] = True\n        helper(grid, capacity, n+1, m, visited, ans)\n        helper(grid, capacity, n-1, m, visited, ans)\n        helper(grid, capacity, n, m+1, visited, ans)\n        helper(grid, capacity, n, m-1, visited, ans)\n        visited[n][m] = False\n    def search(grid, capacity, n, m):\n        visited = [[False for i in range(len(grid[0]))] for j in range(len(grid))]\n        ans = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if helper(grid, capacity, i, j, visited, ans):\n                    ans += 1\n        return ans\n    return search(grid, capacity, 0, 0)\n",
        "test": "assert     max_fill(    [[1, 0], [1, 0], [1, 0], [0, 1]], 1) == 0",
        "num_ids": 2974,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count(\"1\"), x))\n",
        "test": "assert     sort_array([0, 1, 2, 5, 12]) == [0, 1, 2, 5, 12], \"wrong result\"",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if len(s) == 0: return []\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    n_consonants = n\n    return_list = []\n    for i in words:\n        word_consonants = 0\n        for j in i:\n            if j in consonants:\n                word_consonants += 1\n        if word_consonants == n_consonants:\n            return_list.append(i)\n    return return_list\n",
        "test": "assert     select_words('', 1) == []",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    # your code here\n    vowels = \"aeiouAEIOU\"\n    first_idx = len(word) - 1\n    last_idx = len(word) - 1\n    last_in_range = None\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_in_range = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            first_idx = i\n            break\n    if first_idx < last_idx:\n        return word[last_in_range]\n    else:\n        return \"\"\n",
        "test": "assert     get_closest_vowel('abca') == 'a'",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    s = ''.join(lst)\n    return 'Yes' if sum([s.count(x) for x in ['(', ')', '[]', '{}']]) % 2 == 0 else 'No'",
        "test": "assert     match_parens(['(()', '()))']) == 'No'",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert     len(maximum([1, 2, 3, 4, 5], 2)) == 2",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    \n    \n    return sum(lst[::2])\n    \n",
        "test": "assert     solution([2,1,2,3,4,5]) == 8",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    # sort the array\n    arr.sort()\n    # create a sum and the output array\n    sum = 0\n    out = []\n    # iterate over the array\n    for i in range(k):\n        # add the ith element to the sum and add the digits of the sum to the output array\n        sum += arr[i]\n        out.append(int(str(sum)[0:2]))\n        out.append(int(str(sum)[2:]))\n    return sum, out\n",
        "test": "assert     add_elements([1, 9, 5, 9, 6, 5, 3, 4, 4, 1], 8) == 21",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = []\n        prev_num = n\n        while prev_num!= 1:\n            if prev_num % 2 == 0:\n                next_num = int(prev_num/2)\n                result.append(next_num)\n                prev_num = next_num\n            else:\n                next_num = int((3*prev_num + 1)/2)\n                result.append(next_num)\n                prev_num = next_num\n        result.append(1)\n    return sorted(result)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    try:\n        months = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n        # year,month,day = [int(i) for i in input().split('-')]\n        year,month,day = date.split('-')\n        if len(year)!= 4 or len(month)!= 2 or len(day)!= 2:\n            return False\n        if int(year) < 0 or int(month) < 1 or int(month) > 12 or int(day) < 1 or int(day) > months[int(month)]:\n            return False\n        return True\n    except ValueError:\n        return False",
        "test": "assert     valid_date('12-32-2000') == False, 'ERROR'",
        "num_ids": 2377,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    \n    return txt.split()\n",
        "test": "assert     split_words(\"\") == []",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    new_lst = sorted(lst)\n    return lst == new_lst\n",
        "test": "assert     is_sorted([])",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    intersection = [max(interval1[0], interval2[0]), min(interval1[1], interval2[1])]\n    if intersection[0] < intersection[1]:\n        if len(intersection) == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 3), (2, 2)) == \"NO\"",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if not arr:\n        return None\n",
        "test": "assert     (prod_signs([]) == None)",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    n = len(grid)\n    if n < 2 or k < 1:\n        return -1\n",
        "test": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2]",
        "num_ids": 2428,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    lst = [1, 3, 2, 8]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            lst.append(lst[-1] + lst[-2])\n        else:\n            lst.append(lst[-1] + lst[-2] + lst[-3])\n    return lst\n",
        "test": "assert     tri(1) == [3, 2]",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    even_digits = sum(d for d in map(int, str(n)) if d % 2 == 0)\n    return 0 if even_digits == len(str(n)) or even_digits == 0 else \\\n    int(str(n)[0]) * int(str(n)[-1]) * digits(even_digits)\n",
        "test": "assert     digits(7) == 0",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    # Split the string into a list of substrings\n    subs = string.split('[]')\n    # If there is only one substring, return False\n    if len(subs) == 1:\n        return False\n    # Initialise a stack\n    stack = []\n    # For every character in the string\n    for i in range(len(subs)):\n        # If there is an open bracket, push it onto the stack\n        if subs[i] == '[':\n            stack.append('[')\n        # If there is a close bracket, pop it off of the stack\n        elif subs[i] == ']':\n            stack.pop()\n        # If the stack is empty, return False\n        if len(stack) == 0:\n            return False\n    # If the stack is not empty, return False\n    return len(stack) == 0\n",
        "test": "assert not is_nested(\"[{(})](({[]}))[](({[]}))\")",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    lst_s=[]\n    for i in lst:\n        lst_s.append(int(math.ceil(i**2)))\n    return sum(lst_s)\n    # pass\n",
        "test": "assert     sum_squares([1, 2, 3, 4]) == 1 + 4 + 9 + 16, \"test case 1 failed\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    txt = txt.split()\n    if len(txt) < 1:\n        return False\n    return len(txt[-1]) == 1 and txt[-1].isalpha() == True\n",
        "test": "assert     check_if_last_char_is_a_letter('sport 4') == False, 'wrong result'",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i, val in enumerate(arr):\n        if i == 0:\n            continue\n        else:\n            if val > arr[i-1]:\n                continue\n            else:\n                return i\n    return -1",
        "test": "assert     can_arrange([1, 2, 3, 4, 8]) == -1",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    if lst == []:\n        return (None, None)\n    else:\n        sorted_lst = sorted(lst)\n        a = None\n        b = None\n        if sorted_lst[-1] < 0:\n            a = sorted_lst[-1]\n        if sorted_lst[0] > 0:\n            b = sorted_lst[0]\n        return (a, b)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    if type(a) is str:\n        a = float(a.replace(\",\",\".\"))\n    if type(b) is str:\n        b = float(b.replace(\",\",\".\"))\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    return None\n",
        "test": "assert     compare_one(1, 0) == 1",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    if n == sum([i for i in range(1, n, 2) if n % i == 0]):\n        return True\n    return False\n",
        "test": "assert     is_equal_to_sum_even(1) == False",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    count = n\n    factorial = 1\n    while count > 1:\n        factorial *= count\n        count -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    text = text.split()\n    text = \"_\".join(text)\n    text = text.replace(\" \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    \n    return text\n",
        "test": "assert     fix_spaces('This is a test') == 'This_is_a_test'",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if len(file_name) > 3 and file_name.isdigit() == False:\n        if file_name.count('.') == 1:\n            if file_name.split('.')[0]!= '':\n                if file_name.split('.')[0][0].isalpha():\n                    if file_name.split('.')[1].lower() in ['exe', 'dll', 'txt']:\n                        return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('0_1') == 'No'",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    sum_squares = 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0:\n            sum_squares = sum_squares + lst[i] * lst[i]\n        if i % 4 == 0:\n            sum_squares = sum_squares + lst[i] * lst[i] * lst[i]\n    return sum_squares\n    \n    ",
        "test": "assert     sum_squares([1,2,3,4,5,6,7,8,9]) == 1836, \"Wrong result for sum_squares\"",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) and all([c in '0123456789' for c in w])])\n",
        "test": "assert     words_in_sentence('') == ''",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    if x[0] == n[0]:\n        return True\n    if x[1] == n[1]:\n        return True\n    return False\n",
        "test": "assert     simplify(\"1/2\", \"3/4\") == False",
        "num_ids": 1708,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    return sorted(nums, key=lambda num: sum([int(i) for i in str(num)]))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    odd = 0\n    for n in nums:\n        if n % 10 % 2 == 1:\n            if n > 10:\n                odd += 1\n    return odd\n",
        "test": "assert     specialFilter([]) == 0, \"Wrong answer for []\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    res = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            k = n - 1 - (i + j)\n            if k < j:\n                break\n            if k < j and (i + j + k) % 3 == 0:\n                res += 1\n    return res\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        res = ()\n        for i in planets:\n            if bf(planet1,i) == ():\n                continue\n            else:\n                if bf(planet2, i) == ():\n                    continue\n                else:\n                    if bf(planet1,i) < bf(planet2,i):\n                        res = res + (i,)\n                    else:\n                        continue\n        return re",
        "test": "assert bf('Earth', 'Neptune') == ()",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    lst = list(set(lst))\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return n\n",
        "test": "assert     x_or_y(2, 1, 0) == 1",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    \n    sum_of_odds = 0\n    for i in lst:\n        if i > 0 and not i % 2:\n            sum_of_odds += i ** 2\n    return sum_of_odds\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n",
        "test": "assert     double_the_difference([])         == 0, \"Wrong answer\"",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    # return [abs(game[i]-guess[i]) for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare(game = [5, 6, 7, 8, 9], guess = [5, 6, 7, 8, 9]) == [0, 0, 0, 0, 0]",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    # your code goes here\n    extensions_strength = []\n    for extension in extensions:\n        caps = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                caps += 1\n            if char.islower():\n                sm += 1\n        strength = caps - sm\n        extensions_strength.append([strength, extension])\n    extensions_strength = sorted(extensions_strength)\n    return class_name + '.' + extensions_strength[-1][1]\n",
        "test": "assert     Strongest_Extension('Burgers', ['EQrsh', 'ShBrBGs', 'QsWXrQS']) == 'Burgers.QsWXrQS'",
        "num_ids": 2759,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    return (b in a) or (b in a+a) or (b in a+a+a) or (b in a+a+a+a) or (b in a+a+a+a+a) or (b in a+a+a+a+a+a) or (b in a+a+a+a+a+a+a) or (b in a+a+a+a+a+a+a+a)",
        "test": "assert     not cycpattern_check(\"abcd\", \"efgh\")",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    even_count, odd_count = 0, 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(1122334455) == (4, 6)",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    assert 1 <= number <= 1000, \"numerical input out of range. Try numbers between 1 and 1000.\"\n    tens = {1: 'x', 2: 'xx', 3: 'xxx', 4: 'xxxx', 5: 'v', 6: 'vv', 7: 'vvv', 8: 'vvvv', 9: 'ix', 10: 'x',\n            100: 'c', 200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd', 600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm',\n            1000:'m'}\n    ones = {0: '', 1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix'}\n    if number in tens:\n        return tens[number]\n    else:\n        return tens[number//10] + ones[number % 10]\n",
        "test": "assert     int_to_mini_roman(5) == \"v\"",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False",
        "test": "assert     not right_angle_triangle(3, 4, 6)",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    # print(sorted(words, key=len, reverse=True))\n    # for i in sorted(words, key=len, reverse=True):\n    #     print(i)\n    # return sorted(words, key=len, reverse=True)[0]\n    # OR\n    return max(words, key=len)\n",
        "test": "assert     find_max([\"c\", \"d\", \"b\", \"a\"]) == \"c\"",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    \n    eaten = number + need\n    eaten_left = remaining - need\n    return [eaten, eaten_left]\n",
        "test": "assert     eat(0, 0, 5) == [0, 5]",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    result = operand[0]\n    for i in range(0, len(operand)-1):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"-\"], [2,3])         == 5",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    i=0\n    while i < len(s):\n        if s[i].isalpha():\n            s = s[:i]+s[i].swapcase()+s[i+1:]\n        i+=1\n    return s\n",
        "test": "assert     solve('abcC') == 'ABCc'",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if text is None:\n        return None\n    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    integers = []\n    if a % 2!= 0:\n        a -= 1\n    if b % 2!= 0:\n        b += 1\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n",
        "test": "assert     generate_integers(a=2, b=9) == [2, 4, 6, 8]",
        "num_ids": 653,
        "indeed": false
    }
]