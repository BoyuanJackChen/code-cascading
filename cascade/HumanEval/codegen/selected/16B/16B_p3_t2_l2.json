[
    {
        "number": 0,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    assert 0 < threshold < 1\n    numbers = sorted(numbers)\n    if numbers[0] >= numbers[1]:\n        return False\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([3.4, 3.3, 3.2, 3.1, 3.0], 0.5) == True",
        "num_ids": 398
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert type(paren_string) == str\n    if not paren_string:\n        return []\n    if paren_string.count('(')!= paren_string.count(')'):\n        return []\n    \n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return []\n            else:\n                stack.pop()\n    return [paren_string[:index] + '(' + paren_string[index:] for index in range(1, len(paren_string), 2)]\n",
        "test": "assert     separate_paren_groups(\"(())()(()())\") == [\"(())\", \"()\", \"(()())\"]",
        "num_ids": 632
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(23.5) == 0.5",
        "num_ids": 130
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum(operations) < 0\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5, 6, -3, -2, -6, -3, -2, -6]) == True",
        "num_ids": 238
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: Implement this function\n    if numbers:\n        return sum([abs(number - sum(numbers) / len(numbers)) for number in numbers]) / len(numbers)\n    else:\n        raise ValueError(\"Cannot calculate MAD of empty list\")\n",
        "test": "assert ",
        "num_ids": 194
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    numbers = list(numbers)\n    if len(numbers) < 1:\n        return []\n    else:\n        new_numbers = []\n        for i in range(0, len(numbers), 2):\n            if i!= 0:\n                new_numbers.append(delimeter)\n            new_numbers.append(numbers[i])\n        return new_numbers\n",
        "test": "assert ",
        "num_ids": 149
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    all_parens = paren_string.split(\" \")\n    return max([parse_parens(paren) for paren in all_parens], key=len)\n",
        "test": "assert     parse_nested_parens('((()))') ==     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "num_ids": 351
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = list()\n    for i in strings:\n        if substring in i:\n            result.append(i)\n    return result\n",
        "test": "assert     filter_by_substring(['abcd', 'bcdf', 'cdef'], 'def') == ['cdef']",
        "num_ids": 286
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n    return numbers_sum, numbers_product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 165
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    result: List[int] = [0] * len(numbers)\n    for i in range(len(numbers)):\n        max_val: int = numbers[i]\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_val:\n                max_val = numbers[j]\n            result[j] = max_val\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 289
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    palindrome = string[::-1]\n",
        "test": "assert ",
        "num_ids": 196
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Strings should have the same length')\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "test": "assert     string_xor('1', '1') == '0'",
        "num_ids": 304
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if strings:\n        result = strings[0]\n        for string in strings:\n            if len(string) > len(result):\n                result = string\n    return result\n",
        "test": "assert     longest(['aba', 'aa', 'ad', 'vcd', 'aba']) == 'aba'",
        "num_ids": 248
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(3, 10) == 1",
        "num_ids": 196
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0 : i + 1])\n    return prefixes\n",
        "test": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 196
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return''.join([str(i) for i in range(n+1)])\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 149
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 168
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    note_list = music_string.split()\n    beat_list = []\n    for i in note_list:\n        if i == 'o':\n            beat_list.append(4)\n        elif i == 'o|':\n            beat_list.append(2)\n        else:\n            beat_list.append(1)\n    return beat_list\n",
        "test": "assert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, ",
        "num_ids": 2381
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    total_overlaping_count = 0\n    for idx in range(len(string)):\n        if string[idx] == substring[0]:\n            count = 1\n            for j in range(1, len(substring)):\n                if idx + j >= len(string):\n                    break\n                if string[idx + j]!= substring[j]:\n                    break\n                count += 1\n            if count == len(substring):\n                total_overlaping_count += 1\n    return total_overlaping_count\n",
        "test": "assert     how_many_times(\"hello\", \"l\") == 2",
        "num_ids": 223
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # create a list of numbers\n    numbers_list = numbers.split()\n    \n    # sort the list in ascending order\n    numbers_list.sort()\n",
        "test": "assert     sort_numbers('eight nine five two four') == '2 4 5 8 9', 'incorrect'",
        "num_ids": 259
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number > largest:\n            largest = number\n        if number < smallest:\n            smallest = number\n    return (smallest, largest)\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4]) == (1, 4)",
        "num_ids": 372
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return [0.0 + (1.0 - 0.0) * ((float(n) - min(numbers)) / (max(numbers) - min(numbers))) for n in numbers]\n",
        "test": "assert     rescale_to_unit([3, 2, 1]) == [0.5, 0.4, 0.3], \"Wrong rescale_to_unit\"",
        "num_ids": 351
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "test": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 225
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5",
        "num_ids": 81
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    assert n>0, \"number must be positive\"\n    max_divisor = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 203
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    primes = []\n    prime = 2\n    while prime * prime <= n:\n        while n % prime == 0:\n            n //= prime\n            primes.append(prime)\n        prime += 1\n    if n > 1:\n        primes.append(n)\n    return primes\n",
        "test": "assert     [2, 2, 3] == factorize(12)",
        "num_ids": 257
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    unique = []\n    for num in numbers:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 479
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # return string.swapcase()\n    return ''.join([char.swapcase() if char.islower() else char for char in string])\n",
        "test": "assert     flip_case('') == ''",
        "num_ids": 188
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = ''\n    if len(strings) == 0:\n        return result\n    else:\n        return strings[0] + concatenate(strings[1:])\n        \ndef even_odd_balancing(n: int) -> str:\n    \"\"\" Balanced the odd and even digits in a number\n    >>> even_odd_balancing(43)\n    '43'\n    >>> even_odd_balancing(21)\n    '13'\n    >>> even_odd_balancing(100)\n    '13'\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return str_num\n    else:\n        if len(str_num) % 2 == 1:\n            num = int(str_num[0]) + int(str_num[1])\n            return str_num[0] + str(num) + str_num[1]\n        elif len(str_num) % 2 == 0:\n            num = int(str_num[0]) + int(str_num[2])\n            return str_num[0] + str(num) + str_num[2]\n        \ndef number_of_evens(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens(21345)\n    3\n    >>> number_of_evens(8642)\n    0\n    >>> number_of_evens(209812938)\n    6\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return 0\n    else:\n        count = 0\n        if len(str_num) % 2 == 0:\n            for i in str_num:\n                if int(i) % 2 == 0:\n                    count += 1\n            return count\n        else:\n            return 0\n        \ndef number_of_evens_alt(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens_alt(21345)\n    3\n    >>> number_of_evens_alt(8642)\n    0\n    >>> number_of_evens_alt(209812938)\n    6\n    \"\"\"\n    return len([i for i in str(n) if int(i) % 2 == 0])\n        \ndef reverse_num(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num(0)\n    0\n    >>> reverse_num(21)\n    21\n    >>> reverse_num(-21)\n    -21\n    >>> reverse_num(4321)\n    4321\n    >>> reverse_num(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef reverse_num_alt(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num_alt(0)\n    0\n    >>> reverse_num_alt(21)\n    21\n    >>> reverse_num_alt(-21)\n    -21\n    >>> reverse_num_alt(4321)\n    4321\n    >>> reverse_num_alt(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef is_odd(n: int) -> bool:\n    \"\"\" Check if number is odd\n    >>> is_odd(21)\n    True\n    >>> is_odd(0)\n    False\n    >>> is_odd(0.5)\n    False\n    >>> is_odd(24.5)\n    False\n    >>> is_odd(-24.5)\n    True\n    \"\"\"\n    return n % 2 == 1\n        \ndef sum_naturals(n: int) -> int:\n    \"\"\" Sum the first n natural numbers\n    >>> sum_naturals(0)\n    0\n    >>> sum_naturals(1)\n    1\n    >>> sum_naturals(5)\n    15\n    >>> sum_naturals(15)\n    60\n    \"\"\"\n    return int(sum([i for i in range(n+1)]))\n    ",
        "test": "assert     concatenate([\"hello\", \" \", \"world\"]) == \"hello world\"",
        "num_ids": 1176
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['foo', 'bar', 'baz'], 'ba') == ['bar', 'baz']",
        "num_ids": 182
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [n for n in l if n >= 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 110
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"is_prime(3) should return True\"",
        "num_ids": 271
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    def compute_residue(xs):\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        return xs[0] / xs[1]\n",
        "test": "assert     find_zero([1, 1]) == None, \"Single zero point\"",
        "num_ids": 245
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l3.append(i)\n        elif i % 3!= 0:\n            l1.append(i)\n    l1.sort()\n    l3.sort()\n    return l1 + l3\n",
        "test": "assert     sort_third([1,4,6,9,0]) == [1,4,0,6,9]",
        "num_ids": 342
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    return result\n",
        "test": "assert     unique([1, 1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 177
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n",
        "test": "assert     max_element([1, 2, 3]) == 3, \"max_element test 1\"",
        "num_ids": 223
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 146
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies[i//2])\n        else:\n            result.append(l[i])\n    return result\n    ",
        "test": "assert     [4, 2, 6, 8] == sort_even([4, 2, 6, 8])",
        "num_ids": 381
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"Hi There\")) == \"Hi There\"",
        "num_ids": 424
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert n > 0, \"n must be positive.\"\n    if n == 1:\n        return 2\n    f1 = 1\n    f2 = 2\n    k = 1\n    while k < n:\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n        if is_prime(f3):\n            k = k + 1\n    return f3\n",
        "test": "assert prime_fib(0) == [0,1]",
        "num_ids": 371
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -3, 1, 1]) is True",
        "num_ids": 334
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Find out how many collisions there will be between n cars\n    # This is done by simulating the cars driving in opposite directions\n    n_r_collisions = n_collisions(n)\n    n_l_collisions = n_collisions(n, direction='left')\n",
        "test": "assert     car_race_collision(1) == 0, 'wrong result'",
        "num_ids": 273
    },
    {
        "number": 42,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 1, 1, 1]) == [2, 2, 2, 2]",
        "num_ids": 147
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i in l:\n        for j in l:\n            if i + j == 0:\n                if i!= j:\n                    return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Wrong answer!\"",
        "num_ids": 354
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    result = ''\n    while x!= 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "test": "assert     change_base(10, 2) == \"1010\"",
        "num_ids": 1167
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return a * h / 2\n",
        "test": "assert     triangle_area(5, 4) == 4, 'test2: test failed'",
        "num_ids": 102
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 321
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "test": "assert     median([2, 3, 4, 1]) == 2.5",
        "num_ids": 236
    },
    {
        "number": 48,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"anna\") == True, \"Wrong result\"",
        "num_ids": 129
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert n >= 0 and p > 2\n    x = 1\n    i = 2\n    while i <= n:\n        x = (x * 2) % p\n        i += 1\n    return x\n",
        "test": "assert ",
        "num_ids": 212
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"hello\" == decode_shift(encode_shift(\"hello\"))",
        "num_ids": 226
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    vowels = ('a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U')\n    new_string = ''\n    for letter in text:\n        if letter in vowels:\n            pass\n        else:\n            new_string += letter\n    return new_string\n",
        "test": "assert     remove_vowels(\"hello world!\") == 'hll wrld!'",
        "num_ids": 272
    },
    {
        "number": 52,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return all(i < t for i in l)\n",
        "test": "assert     below_threshold([1], t=0) == True",
        "num_ids": 179
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 48
    },
    {
        "number": 54,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0.lower()!= c1.lower():\n            return False\n    return True\n",
        "test": "assert     same_chars(\"cat\", \"cat\") is True",
        "num_ids": 96
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 161
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    open_brackets = []\n",
        "test": "assert     correct_bracketing(\"<html><body>\")",
        "num_ids": 276
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(l) <= 2:\n        return True\n    if l[1] <= l[0]:\n        return monotonic(l[1:])\n    if l[1] >= l[0]:\n        return monotonic(l[1:])\n",
        "test": "assert ",
        "num_ids": 400
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     set(common([1, 2, 3, 4], [3, 4, 5, 6])) == set([3, 4])",
        "num_ids": 205
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n",
        "test": "assert     largest_prime_factor(101) == 101",
        "num_ids": 291
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n",
        "test": "assert ____, ____",
        "num_ids": 99
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True",
        "test": "assert     correct_bracketing(\"()\")",
        "num_ids": 317
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    derivative = [0] * (len(xs) - 1)\n    for index, (x_i, x_i_plus_one) in enumerate(zip(xs, xs[1:])):\n        derivative[index] = x_i_plus_one - x_i\n    return derivative\n",
        "test": "assert     derivative([0,-1,2]) == [-1,0,2]",
        "num_ids": 247
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n < 0:\n        raise ValueError('fibfib can only handle positive integers.')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 224
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    vowels = set(\"aeiou\")\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count( \"abracadabra\" ) == 5, 'wrong result'",
        "num_ids": 133
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:][::-1]\n",
        "test": "assert     circular_shift('23456789', 2) == '34567892'",
        "num_ids": 232
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    sum = 0\n    for ch in s:\n        if ch.isalpha():\n            sum += ord(ch.upper())\n    return sum\n",
        "test": "assert     digitSum('') == 0, 'wrong result'",
        "num_ids": 200
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    a,o = s.split()\n    return int(a) - int(o[:-1]) - int(o[:-1])\n",
        "test": "assert     fruit_distribution('4 6', '100 110') == 14",
        "num_ids": 221
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    arr.sort(key = lambda x: x%2 == 0 and x if x%2 == 0 else float('inf'))\n    return [ arr[0], arr.index(arr[0]) ] if arr else []\n",
        "test": "assert     pluck([1, 2, 3, 4]) == [2, 0]",
        "num_ids": 252
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    frequency = dict()\n    greatest = 0\n    greatest_i = -1\n    for i in lst:\n        frequency[i] = frequency.get(i, 0) + 1\n        if i > greatest:\n            greatest_i = i\n            greatest = i\n    for k, v in frequency.items():\n        if k < greatest and v >= greatest:\n            greatest_i = k\n    return greatest_i\n",
        "test": "assert ",
        "num_ids": 244
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 146
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    s = sorted([a, b, c])\n    if s[2] + s[1] <= s[0]:\n        return -1\n    else:\n        return round(s[0] * s[1] / 2, 2)\n",
        "test": "assert     triangle_area(1, 2, 2) == 1",
        "num_ids": 233
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]\n",
        "test": "assert     will_it_fly([1, 2], 2) == False",
        "num_ids": 250
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1 if arr[0]!= arr[1] else 0\n    palin = [arr[0]]\n    non_palin = arr[1:]\n    for num in non_palin:\n        if num in palin:\n            palin.remove(num)\n        else:\n            palin.append(num)\n    return len(non_palin) if len(non_palin) < len(palin) else len(palin)\n",
        "test": "assert     smallest_change([1,2,2]) == 1",
        "num_ids": 390
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Code Here\n    total_lst = []\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        for i in lst1:\n            total_lst.append(i)\n        for j in lst2:\n            if len(j) < len(total_lst[0]):\n                total_lst[0] = j\n    elif len(lst1) > len(lst2):\n        for i in lst2:\n            total_lst.append(i)\n        for j in lst1:\n            if len(j) < len(total_lst[0]):\n                total_lst[0] = j\n    return total_lst\n",
        "test": "assert ",
        "num_ids": 347
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    a = int(a)\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                flag = False\n                for j in range(2, int(a/2)):\n                    if i % j == 0:\n                        flag = True\n                if flag == False:\n                    return False\n        return True\n    else:\n        return False\n",
        "test": "assert     is_multiply_prime(3) == True",
        "num_ids": 274
    },
    {
        "number": 76,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    while x > 1:\n        if n**int(x)!= x:\n            return False\n        else:\n            x = x//n\n    return x == n",
        "test": "assert     is_simple_power(16, 4) == False",
        "num_ids": 121
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return a**(1./3.) % 1 == 0\n",
        "test": "assert     iscube(27) == True",
        "num_ids": 88
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    total = 0\n    if len(num) == 1:\n        if int(num[0]) in [2, 3, 5, 7]:\n            return 1\n        else:\n            return 0\n    for i in num:\n        if int(i) in [2, 3, 5, 7]:\n            total += 1\n    return total\n",
        "test": "assert     hex_key( \"1\") == 0",
        "num_ids": 488
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        decimal //= 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert     decimal_to_binary(1) == \"db1db\"",
        "num_ids": 353
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    s_list = [c for c in s]\n    if len(s_list) < 3:\n        return False\n    if len(set(s_list)) < 3:\n        return False\n    if len(s_list) == 3:\n        return True\n    return False\n",
        "test": "assert     is_happy('abac') == False",
        "num_ids": 336
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    return [grade_equation(gpa) for gpa in grades]\n",
        "test": "assert     numerical_letter_grade([0.0]) == ['E']",
        "num_ids": 377
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return len(string) in [2, 3, 5, 7]\n",
        "test": "assert     prime_length('abcdefghi') == False, 'Error on \\'abcdefghi\\''",
        "num_ids": 122
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # base case\n    if n == 1:\n        return 10\n",
        "test": "assert     starts_one_ends(1) ==     10",
        "num_ids": 155
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # if N < 10:\n    #     return N\n    # return int(solve(N//10)) + N % 10\n    # binary_str = ''\n    # if N < 10:\n    #     binary_str += N\n    #     return binary_str\n    # binary_str += str(N % 10)\n    # return solve(N // 10) + binary_str\n    return int(bin(N)[2:])\n",
        "test": "assert ",
        "num_ids": 177
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            res += lst[i]\n    return res\n",
        "test": "assert     add([1, 1, 5, 6, 7, 3, 2]) == 4, \"list [1, 1, 5, 6, 7, 3, 2] expected to have 4 elements\"",
        "num_ids": 293
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    s = s.split()\n    s.sort()\n    s =''.join(s)\n    return s\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 157
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    lst = lst[:]\n    coordinates = []\n    for r, row in enumerate(lst):\n        for c, _ in enumerate(row):\n            if row[c] == x:\n                coordinates.append((r, c))\n    return sorted(coordinates, key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     [(1, 2), (1, 3), (1, 4), (2, 4), (3, 2), (3, 1)] == get_row([[1, 2, 3, 4], [2, 3, 1, 4], [3, 1, 4, 2]], 4)",
        "num_ids": 415
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([2, 4, 6, 8, 10, 12, 14, 16]) == [2, 4, 6, 8, 10, 12, 14, 16]",
        "num_ids": 303
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    newstring = ''\n    for letter in s:\n        index = ALPHABET.find(letter)\n        newletter = ALPHABET[(index + 2 * 2) % len(ALPHABET)]\n        newstring = newstring + newletter\n    return newstring\n",
        "test": "assert     encrypt(\"you must calm down\") == \"mlx pzaljd\"",
        "num_ids": 733
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "test": "assert     next_smallest([0, 3, 2, 3]) == 2",
        "num_ids": 1232
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    for c in S.split(\".\"):\n        if c.startswith(\"I\"):\n            return 1\n    return 0\n",
        "test": "assert     is_bored(\"I'm bored\") == True",
        "num_ids": 163
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    a= (x+y+z)\n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if a == x+y or a== y+z or a== z+x:\n            return True\n        else:\n            return False\n        \n    else:\n        return False\n",
        "test": "assert     any_int(1, 2, 3) == False, \"Test failed\"",
        "num_ids": 333
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 301
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def isprime(n):\n        if n<2:\n            return False\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    max = 0\n    for i in lst:\n        if isprime(i) and i>max:\n            max = i\n    return sum(list(map(int,str(max))))\n",
        "test": "assert ",
        "num_ids": 284
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #TODO: complete for Step 5\n    return True\n",
        "test": "assert     check_dict_case({'lower': 1, 'UPPER': 2, 3: '3'})     == True, \"Wrong result for dictionary: {'lower': 1, 'UPPER': 2, 3: '3'}\"",
        "num_ids": 348
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    def is_prime(n):\n        return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n    def list_count(n):\n        if n == 0:\n            return []\n        else:\n            return list(range(2, n + 1)) if is_prime(n) else [x for x in list_count(n - 1) if is_prime(x)]\n    return list_count(n)\n",
        "test": "assert     count_up_to(10) == [2, 3, 5, 7], \"count_up_to(10) should be [2, 3, 5, 7]\"",
        "num_ids": 236
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    prod = 0\n    if a > 0 and b > 0:\n        for i in str(a):\n            for j in str(b):\n                prod += int(i) * int(j)\n        return prod\n    else:\n        return 0\n",
        "test": "assert     multiply(12, 0) == 0",
        "num_ids": 315
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"abcd\") == 0",
        "num_ids": 194
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return round(float(value))\n",
        "test": "assert     closest_integer(\"15.4\") == 15",
        "num_ids": 140
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n % 2 == 0:\n        pile = [n for n in range(1, n + 1)]\n    else:\n        pile = [n for n in range(1, n + 1, 2)]\n    return pile\n",
        "test": "assert     make_a_pile(10) == [10, 7, 4, 2, 0]",
        "num_ids": 276
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return s.split()\n",
        "test": "assert     words_string('  ,   Hello,   world  ,  this  is   your  ,  test  ,  script  ') == ['Hello', 'world', 'this', 'is', 'your', 'test','script']",
        "num_ids": 177
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if x >= y:\n        return -1\n    else:\n        while x < y:\n            if x % 2 == 0:\n                return x\n            x += 1\n        return -1\n",
        "test": "assert     choose_num(2, 4) == 2, choose_num(2, 4)",
        "num_ids": 284
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # Your code here\n    if n < m:\n        avg = int((n + m) / 2)\n        return bin(avg)[2:]\n    else:\n        return -1\n",
        "test": "assert     rounded_avg(0, 0) == -1",
        "num_ids": 321
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    list_of_unique_number = []\n    for number in x:\n        if all(int(digit) % 2!= 0 for digit in str(number)):\n            list_of_unique_number.append(number)\n    return sorted(list_of_unique_number)\n",
        "test": "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 6, 7, 8, 9, 10]",
        "num_ids": 408
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     by_length([1, 3, 4, 6, 7, 9]) == \"One Three Four Six Seven Nine\"",
        "num_ids": 311
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    mylist = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            mylist.append(factorial(i))\n        else:\n            mylist.append(sum(range(1, i+1)))\n    return mylist\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 293
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 121
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    # My solution\n    count = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count\n    \n    # Best solution\n    # return len([i for i in arr if sum(map(int, list(str(i)))) > 0])",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 294
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if len(arr)<2:\n        return True\n    if arr==sorted(arr):\n        return True\n    elif arr==[]:\n        return True\n    else:\n        return False",
        "test": "assert     move_one_ball([1, 2, 3, 4, 5, 6]) == True",
        "num_ids": 357
    },
    {
        "number": 110,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # \n    # Write your code here.\n    #\n    a = 0\n    b = 0\n    for i in range(0, len(lst1)):\n        for j in range(0, len(lst2)):\n            if lst1[i] == lst2[j]:\n                a += 1\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            b += 1\n    for j in range(0, len(lst2)):\n        if lst2[j] % 2!= 0:\n            b += 1\n    if a == len(lst1) and b == len(lst2):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([3, 6, 8], [1, 7, 9, 10]) == \"NO\"",
        "num_ids": 622
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    histo = {}\n    # your code here\n    for char in test.split(' '):\n        if histo.get(char):\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n",
        "test": "assert ",
        "num_ids": 260
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    s = s.replace(c,'')\n    if s[::-1] == s:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete('abb', 'ba') == ('abb', False)",
        "num_ids": 254
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    return [\"the number of odd elements \" + str(len([ch for ch in x if ch%2==1])) + \"n the str\" + str(n+1) + \"n the \" + str(n+1) + \"nput.\" for n,x in enumerate(lst)]\n",
        "test": "assert     odd_count(['73', '93', '26', '1234']) == [1, 0, 1, 1], \"error in example 2\"",
        "num_ids": 542
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(nums) == 0:\n        return 0\n    total = min(nums)\n    sum_nums = sum(nums)\n    i = 0\n    while i < len(nums):\n        j = 1\n        while j <= len(nums):\n            total = min(sum_nums, sum(nums[i:j]), nums[i:j])\n            if total < sum_nums:\n                sum_nums = total\n            j += 1\n        i += 1\n    return sum_nums\n",
        "test": "assert ",
        "num_ids": 316
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     max_fill([[0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 0, 0], [0, 1, 0, 0]], 2) == 4",
        "num_ids": 271
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "test": "assert     sort_array([18, 12, 15, 9, 17, 14, 13, 16, 10, 5, 17, 14, 12, 7, 16, 11]) == [13, 14, 12, 12, 15, 9, 14, 14, 10, 5, 11, 7, 6, 7, 11, 16]",
        "num_ids": 355
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(s) == 0 or n == 0:\n        return []\n    return [word for word in s.split() if check_consonants(word, n)]\n",
        "test": "assert     select_words(\"the quick brown fox jumps over the lazy dog\", 5) == \\",
        "num_ids": 277
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    i = -1\n    vowels = \"AEIOUaeiou\"\n    while len(word) > 1:\n        i = word.find(vowels, i + 1)\n        if i == -1:\n            break\n    if i == -1:\n        return \"\"\n    else:\n        return word[i+1]\n",
        "test": "assert     get_closest_vowel('kot') == '', 'error'",
        "num_ids": 259
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if lst[0]==')' or lst[1]==')':\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     match_parens(['(()', ')()']) == 'Yes'",
        "num_ids": 645
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     (maximum([1,1,1,2,2,2], 3) == [3, 2, 2, 1, 1, 1])",
        "num_ids": 139
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return su",
        "test": "assert ",
        "num_ids": 236
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     add_elements([1234, 5678, 9012], 3) == 1634",
        "num_ids": 211
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # base case\n    if n == 1:\n        return [1]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 225
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    # your code here\n    if not date:\n        return False\n    elif len(date)!= 10:\n        return False\n    elif not date[2] == '-' and not date[5] == '-':\n        return False\n    elif int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    elif int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n    elif int(date[6:8]) < 1 or int(date[6:8]) > 12:\n        return False\n    elif int(date[9:]) < 1 or int(date[9:]) > 31:\n        return False\n    elif int(date[3:5]) == 2 and int(date[0:2]) == 2 and int(date[6:8]) == 28:\n        return False\n    else:\n        return True",
        "test": "assert     valid_date('12-31-1972') == False",
        "num_ids": 797
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    print('1')\n    return [i for i in txt.split(' ') if i!= '']\n    return split_words('Hello world')\nsplit_words('Hello world')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
        "test": "assert     split_words(\"\") == [], 'incorrect result'",
        "num_ids": 242
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    lst = lst.copy()\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            lst.pop(i)\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 1, 1, 1]) == True",
        "num_ids": 320
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if (start2 < start1 and end2 > end1) or (start1 < start2 and end1 > end2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (5, 7)) == \"NO\", \"Case #2. Should be NO\"",
        "num_ids": 308
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if not arr:\n        return None\n    signs = [int(i > 0) for i in arr]\n    return sum([abs(i) for i in arr]) * prod(signs)\n",
        "test": "assert     prod_signs([]) is None",
        "num_ids": 165
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return None",
        "test": "assert ",
        "num_ids": 312
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    trib = [0, 1, 3]\n    if n == 2:\n        return trib\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(trib[-2] + trib[-1])\n        else:\n            trib.append(trib[-2] + trib[-1] + trib[-3])\n    return trib\n",
        "test": "assert     tri(2) == [2, 8]",
        "num_ids": 503
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n < 10:\n        return n\n    else:\n        if (n % 10) % 2 == 0:\n            return 0\n        else:\n            return digits(int(str(n)[1:]))\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 139
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # create an empty stack and push to the stack each bracket. \n    # as soon as we have an open bracket, we will check if the last element of the stack is a closed bracket\n    # if so, we will pop the element and continue, if not, return False\n    # once we have a valid sequence of brackets, we should check if there is at least one nested subsequence\n    # if so, return True, else return False\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            else:\n                last_element = stack.pop()\n                if last_element!= '[':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert not is_nested('[][[[[]]])')",
        "num_ids": 420
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return round(sum([i*i for i in lst]))\n",
        "test": "assert ",
        "num_ids": 129
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if txt == \"\":\n        return False\n    txt_without_last_char = txt[:-1]\n    if len(txt_without_last_char) == 0:\n        return False\n    else:\n        return txt_without_last_char.split(\" \")[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"taco\") == True",
        "num_ids": 273
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return -1 if max(arr) < arr[-1] else arr.index(max(arr[:-1]))\n",
        "test": "assert     can_arrange([1, 2, 4, 3]) == 2",
        "num_ids": 160
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if lst == []:\n        return (None, None)\n    else:\n        negatives = [num for num in lst if num < 0]\n        positive = [num for num in lst if num > 0]\n        return (max(negatives) if negatives else None, min(positive) if positive else None)\n",
        "test": "assert ",
        "num_ids": 376
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if type(a) == str and type(b) == str:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    elif type(a) == str and type(b)!= str:\n        a = float(a.replace(',', '.'))\n    elif type(a)!= str and type(b) == str:\n        b = float(b.replace(',', '.'))\n    elif type(a)!= str and type(b)!= str:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n",
        "test": "assert ",
        "num_ids": 443
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    #TODO\n    return False\n",
        "test": "assert     is_equal_to_sum_even(12) == False",
        "num_ids": 139
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    factorial = 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n    return factorial\n",
        "test": "assert ",
        "num_ids": 133
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if''in text:\n        text = re.sub('\\s{2,}', '-', text)\n    return text.replace(' ', '_')\n",
        "test": "assert     fix_spaces('  goodbye  ') == 'goodbye'",
        "num_ids": 369
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if file_name.count('.') > 2 or file_name.count('.') < 1:\n        return 'No'\n    for c in file_name:\n        if c.isdigit():\n            return 'No'\n    if file_name.split('.')[0] == '' or file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    file_name_split = file_name.split('.')\n    if file_name_split[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('av.txt') == 'Yes','should return \"Yes\"'",
        "num_ids": 484
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                result += lst[i]**2\n            elif i % 4 == 0 and i % 3!= 0:\n                result += lst[i]**3\n    return result\n",
        "test": "assert     sum_squares([0, 0, 0, 0]) == 0",
        "num_ids": 367
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \" \".join([i for i in sentence.split(\" \") if is_prime(len(i))])\n",
        "test": "assert     words_in_sentence( \"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\"",
        "num_ids": 251
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x1 = int(x[0])\n    n1 = int(n[0])\n    return (x1 % n1) == 0\n",
        "test": "assert     simplify(\"2/4\", \"1/2\")",
        "num_ids": 191
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    nums_sorted = []\n    if len(nums) == 0:\n        return nums_sorted\n    nums_sorted = sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n    return nums_sorted",
        "test": "assert     order_by_points([1, 9, 2, 8, 3, 7, 4, 6, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 313
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum([nums[i] > 10 and (nums[i] % 10 % 2!= 0 or nums[i] % 10 == 0) for i in range(len(nums))])\n",
        "test": "assert     specialFilter([9, 19, 101, 30, 20, 1, 3]) == 4, 'incorrect'",
        "num_ids": 383
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if n < 0:\n        return 0\n    count = 0\n    arr = [i*i-i+1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            k = j+1\n            if arr[i] + arr[j] + arr[k]%3 == 0:\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 358
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    #PLANETS = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    PLANETS = {\n        \"Mercury\": [3.303e+23, 2.4397e6],\n        \"Venus\": [4.867e+24, 6.0518e6],\n        \"Earth\": [5.976e+24, 6.37814e6],\n        \"Mars\": [6.421e+23, 3.3972e6],\n        \"Jupiter\": [1.9e+27, 7.1492e7],\n        \"Saturn\": [5.688e+26, 6.0268e7],\n        \"Uranus\": [8.686e+25, 2.5559e7],\n        \"Neptune\": [1.024e+26, 2.4746e7]\n    }\n",
        "test": "assert bf('jupiter', 'earth') == ('saturn', 'uranus', 'neptune')",
        "num_ids": 590
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    sorted_list.sort(key = len)\n    return sorted_list\n",
        "test": "assert     sorted_list_sum(['aa', 'ab', 'ac']) == ['aa', 'ab', 'ac']",
        "num_ids": 215
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return x if n%2==0 else y\n",
        "test": "assert     x_or_y(2,1,1) == 1, \"x_or_y(2,1,1) is not correct\"",
        "num_ids": 203
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    odd_numbers = [i for i in lst if i % 2!= 0]\n    odd_squared = [i*i for i in odd_numbers]\n    return sum(odd_squared)\n",
        "test": "assert     double_the_difference([1,2,3,4,5,6,7]) ",
        "num_ids": 302
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    scores = game\n    guesses = guess\n    output = []\n    for i in range(len(scores)):\n        output.append(abs(scores[i]-guesses[i]))\n    return output\n    \n",
        "test": "assert ",
        "num_ids": 421
    },
    {
        "number": 153,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return \"{}.{}\".format(class_name, sorted(extensions, key=lambda x: sum([1 for c in x if c.isupper()]))[-1])\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 334
    },
    {
        "number": 154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if b in a:\n        return True\n    elif len(a) > len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if a[j:j + len(b)] == b:\n                    return True\n    return False\n",
        "test": "assert ",
        "num_ids": 253
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    evens = 0\n    odds = 0\n    if num < 0:\n        evens += 1\n        num = -num\n",
        "test": "assert ",
        "num_ids": 146
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 303
    },
    {
        "number": 157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return False\n",
        "test": "assert ",
        "num_ids": 135
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    current_max = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > current_max:\n            current_max = len(set(word))\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['lemonade','watermelon','sugar','sugar','lemonade']) == 'watermelon'",
        "num_ids": 238
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = [number, remaining]\n    if remaining < need:\n        result[0] = number + remaining\n        result[1] = 0\n    else:\n        result[0] = number + need\n        result[1] = remaining - need\n    return result",
        "test": "assert     eat(2, 5, 3) == [5, 0]",
        "num_ids": 238
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    result = 0\n    operator = operator.split('+')\n    operand = operand.split()\n    for i in operator:\n        result += int(i)\n    for i in operand:\n        result *= int(i)\n    return result\n",
        "test": "assert     do_algebra(['-', '+', '-', '-', '-'], [1, 2, 3, 4, 5]) == '1+2-3+4-5', 'incorrect'",
        "num_ids": 349
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                c = c.lower()\n            else:\n                c = c.upper()\n        result += c\n    return result\n",
        "test": "assert     solve(\"abcd\") == \"ABCD\"",
        "num_ids": 179
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if text is None:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert ",
        "num_ids": 144
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if a % 2 == 1 or b % 2 == 1:\n        return []\n    return_list = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            return_list.append(i)\n    return return_list\n",
        "test": "assert ",
        "num_ids": 270
    }
]