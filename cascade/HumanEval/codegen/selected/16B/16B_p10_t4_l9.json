[
    {
        "number": 0,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 0.8) == True"
    },
    {
        "number": 1,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    paren_groups = []\n    current_paren_group = []\n    parens_seen = 0\n    for paren in paren_string:\n        if paren == '(':\n            parens_seen += 1\n        elif paren == ')':\n            parens_seen -= 1\n        current_paren_group.append(paren)\n        if parens_seen == 0:\n            if current_paren_group:\n                paren_groups.append(''.join(current_paren_group))\n                current_paren_group = []\n    return paren_groups\n",
        "test": "assert     separate_paren_groups('((()))') == ['((()))']"
    },
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    return int(number) - int(number)\n",
        "test": "assert     truncate_number(4.0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    mean = sum(numbers) / len(numbers)\n    mad = sum(map(abs, map(lambda x: x - mean, numbers))) / len(numbers)\n    return mad\n",
        "test": "assert mean_absolute_deviation([0, 2]) == 1"
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter) if numbers[1:] else [numbers[0]]\n",
        "test": "assert     intersperse([], 10) == []"
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    # TODO: Implement me\n    # parsed = []\n    # list_of_parsed = []\n    # counter = 0\n    # for element in paren_string:\n    #     counter += 1\n    #     if element == '(':\n    #         parsed.append(element)\n    #     elif element == ')':\n    #         parsed.pop()\n    #         list_of_parsed.append(counter)\n    #         counter = 0\n    #     else:\n    #         raise TypeError('Invalid character encountered in the string')\n    # if counter > 0:\n    #     list_of_parsed.append(counter)\n    # return list_of_parsed\n    return [p.count('(') - p.count(')') for p in paren_string.split()]\n",
        "test": "assert     parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'catt') == []"
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    sum_, product_ = 0, 1\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n    return sum_, product_\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    n = len(string)\n    for i in range(1, n+1):\n        prefix = string[:i][::-1]\n        if is_palindrome(prefix):\n            suffix = string[i:]\n            return prefix + suffix\n",
        "test": "assert     make_palindrome(\"a\") == \"a\""
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\""
    },
    {
        "number": 12,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    if not strings:\n        return None\n    max_length = max(map(len, strings))\n    return strings[0] if all(map(lambda s: len(s) == max_length, strings)) else max(strings, key=len)\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(2, 6) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n",
        "test": "assert     all_prefixes(\"\") == []"
    },
    {
        "number": 15,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return \" \".join([str(x) for x in range(n + 1)])\n",
        "test": "assert     string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    counter = {}\n    for char in string:\n        if char.isalpha():\n            char = char.lower()\n            if char in counter:\n                counter[char] += 1\n            else:\n                counter[char] = 1\n    return len(counter)\n",
        "test": "assert     count_distinct_characters(\"abcdefg\") == 7"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "    res = []\n    for i in range(len(music_string)):\n        if music_string[i] == '.' or music_string[i] == 'o':\n            res.append(4)\n        elif music_string[i] == 'o':\n            res.append(4)\n        elif music_string[i] == '|':\n            if music_string[i-1] == '.' or music_string[i-1] == 'o':\n                res.append(2)\n            else:\n                res.append(1)\n    return res\n",
        "test": "assert parse_music('oo') == [4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    i, count = 0, 0\n    while i < len(string):\n        while i < len(string) and string[i]!= substring[0]:\n            i += 1\n        if i < len(string) and string[i] == substring[0]:\n            i += 1\n            count += 1\n            while i < len(string) and string[i] == substring[0]:\n                i += 1\n    return count\n",
        "test": "assert     how_many_times(\"abcd\", \"ef\") == 0"
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    # Split the string\n    numbers_list = numbers.split()\n    # Sort and return\n    return''.join(sorted(numbers_list))\n",
        "test": "assert     sort_numbers('one') == 'one'"
    },
    {
        "number": 20,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    numbers = sorted(numbers)\n    return (numbers[0], numbers[-1])\n",
        "test": "assert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)"
    },
    {
        "number": 21,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        return [\n            (n - min(numbers)) / (max(numbers) - min(numbers))\n            for n in numbers\n        ]\n",
        "test": "assert     rescale_to_unit([1, 2]) == [0, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n",
        "test": "assert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\", 1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 23,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "    n = 0\n    for _ in string:\n        n += 1\n    return n\n",
        "test": "assert     strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n    return n\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    primes = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n / i\n            primes.append(i)\n        else:\n            i += 1\n    return primes\n",
        "test": "assert     factorize(5) == [5]"
    },
    {
        "number": 26,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    # variable to keep track of which index of the list we are looking at\n    i = 0\n    # variable to keep track of which number of times a number occurs in the list\n    occurrences = 0\n    # list to store the final values of the list\n    final_list = []\n    # loop through the list\n    while i < len(numbers):\n        # if the number is in the final list and it has occured more than once, \n        # remove the last occurrence of the number\n        if numbers[i] in final_list and occurrences > 0:\n            final_list.pop(final_list.index(numbers[i]))\n            occurrences -= 1\n        # if the number is not in the final list and it has occured more than once, \n        # add it to the final list\n        elif numbers[i] not in final_list and occurrences > 0:\n            final_list.append(numbers[i])\n            occurrences += 1\n        # if the number is not in the final list and it has occured once, add it to \n        # the final list\n        elif numbers[i] not in final_list and occurrences == 0:\n            final_list.append(numbers[i])\n        # increment the index\n        i += 1\n    # return the final list\n    return final_list\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return ''.join([char.swapcase() for char in string])\n",
        "test": "assert     flip_case('A') == 'a'"
    },
    {
        "number": 28,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['ab', 'cd', 'ef']) == 'abcdef'"
    },
    {
        "number": 29,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"apple\", \"banana\", \"cat\"], \"ba\") == ['banana']"
    },
    {
        "number": 30,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     [] == get_positive([-1, -2, -3])"
    },
    {
        "number": 31,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return prime_helper(n)\n    \n    \ndef prime_helper(n):\n    if n == 2:\n        return True\n    elif n < 2 or n%2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n%i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(8) == False,    8"
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "    n = len(xs)\n    if n == 0:\n        return None\n    if n == 1:\n        return -xs[0]\n    if n % 2 == 0:\n        xs_new = xs + [0]\n    else:\n        xs_new = xs\n    for x in range(0, n):\n        if xs_new[x]!= 0:\n            break\n    return -xs_new[x - 1] / xs_new[x]\n",
        "test": "assert     poly([0, 1], 0) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "    return sorted(l)\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "number": 34,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 35,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    if len(l) == 0:\n        return None\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n",
        "test": "assert     max_element(l=[1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    count = 0\n    if n < 7:\n        return count\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(6) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    # return l[::2] + sorted(l[1::2])\n    l1 = []\n    l2 = []\n    l3 = []\n    # i=0\n    for i in l:\n        if i % 2!= 0:\n            l1.append(i)\n        elif i % 2 == 0:\n            l2.append(i)\n    l1.sort()\n    l2.sort()\n    l3 = l1+l2\n    return l3\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    # split string into groups. Each group of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"\")) == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    \n    fib_num = fib_gen(n)\n    fib_num = next(fib_num)\n    \n    while not is_prime(fib_num):\n        fib_num = next(fib_num)\n    \n    return fib_num\n",
        "test": "assert     prime_fib(9) == (31, 31), 'Not a Fibonacci number.'"
    },
    {
        "number": 40,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0 and i!= j!= k:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3]) == False, \"Empty list\""
    },
    {
        "number": 41,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "    left_to_right_collisions = 0\n    right_to_left_collisions = 0\n    for i in range(n):\n        left_to_right_collisions += 1\n        right_to_left_collisions += 1\n        left_to_right_collisions -= 1\n        right_to_left_collisions -= 1\n    return left_to_right_collisions + right_to_left_collisions\n",
        "test": "assert     car_race_collision(1) == 0, \"Wrong answer for n = 1\""
    },
    {
        "number": 42,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    l2 = []\n    for i in l:\n        l2.append(i+1)\n    return l2\n",
        "test": "assert     (incr_list([1, 2, 3]) == [2, 3, 4])"
    },
    {
        "number": 43,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    # the set() function will remove duplicate elements from the list\n    set_list = set(l)\n    for i in set_list:\n        for j in set_list:\n            if i + j == 0 and i!= j:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    output = ''\n    while x > 0:\n        output = str(x % base) + output\n        x //= base\n    return output\n",
        "test": "assert     change_base(1234, 10) == \"1234\""
    },
    {
        "number": 45,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    return (a * h)/2\n",
        "test": "assert     triangle_area(1, 1) == 0.5"
    },
    {
        "number": 46,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    assert n >= 0\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(2) == 2"
    },
    {
        "number": 47,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n    elif n % 2 == 1:\n        return l[n//2]\n    elif n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n",
        "test": "assert     median([1, 2, 3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    if len(text) < 2:\n        return True\n    first = text[0]\n    last = text[-1]\n    text = text[1:-1]\n    if first == last:\n        return is_palindrome(text)\n    return False\n",
        "test": "assert is_palindrome(\"abba\")"
    },
    {
        "number": 49,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "    i, r = 1, n\n    while r:\n        r = r // p\n        i = i * (2 % p)\n    return i\n",
        "test": "assert     (2 ** 3) % 6 == 2"
    },
    {
        "number": 50,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\""
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    for vowel in 'aAeEiIoOuU':\n        text = text.replace(vowel, '')\n    return text\n",
        "test": "assert     '719' == remove_vowels('719'),'remove_vowels error'"
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == False"
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return x + y\n",
        "test": "assert     add(5, 3) == 8"
    },
    {
        "number": 54,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    return len(set(s0) ^ set(s1)) == 0\n",
        "test": "assert     same_chars(\"abc\", \"def\") == False, \"Wrong Answer\""
    },
    {
        "number": 55,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "test": "assert     fib(1) == 1, \"Fibonacci(1) should be 1\""
    },
    {
        "number": 56,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    open_brackets = []\n    for c in brackets:\n        if c == '<':\n            open_brackets.append('<')\n        elif c == '>':\n            if len(open_brackets) > 0 and open_brackets[-1] == '<':\n                open_brackets.pop()\n            else:\n                return False\n    return True if len(open_brackets) == 0 else False\n",
        "test": "assert     not correct_bracketing('<')"
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    if len(l) < 2:\n        return True\n    else:\n        for i in range(0, len(l)):\n            if i < (len(l) - 1):\n                if l[i] < l[i + 1]:\n                    return monotonic(l[i + 1:])\n                if l[i] > l[i + 1]:\n                    return False\n    return True\n    \n",
        "test": "assert     monotonic([1,2,1]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    result.sort()\n    return result\n",
        "test": "assert     common(list(range(1, 6)), list(range(1, 6))) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 59,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n\n",
        "test": "assert     largest_prime_factor(13195) == 29"
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    assert n >= 1, \"The number must be greater than or equal to 1!\"\n    return int(n * (n+1)/2)\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert     not correct_bracketing('())')"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "    xs.pop()\n    for i in range(len(xs)):\n        xs[i] *= i + 1\n    return xs\n",
        "test": "assert     derivative([0, 1]) == [0]"
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(1) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    vowels = set('aeiou')\n    vowel_count = 0\n    for i in s:\n        if i in vowels:\n            vowel_count += 1\n    if len(s) > 0 and s[-1] == 'y' and s[-2] in vowels:\n        vowel_count -= 1\n    return vowel_count\n",
        "test": "assert     vowels_count(\"\") == 0"
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    digit_list = list(map(int, str(x)))\n    if shift >= len(digit_list):\n        digit_list.reverse()\n    else:\n        digit_list = digit_list[-shift:] + digit_list[:-shift]\n    return ''.join(map(str, digit_list))\n",
        "test": "assert     circular_shift(\"1234\", 0) == \"1234\""
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c.upper())\n    return sum\n",
        "test": "assert     digitSum('') == 0, 'Empty string'"
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    try:\n        # first we convert to a list\n        s = s.split('and')\n        o = 0\n        m = 0\n        for x in s:\n            # since we know that we can only have one fruit we are looking for we can use a for loop\n            # to go through the list one by one and look for the mango\n            if x[0] =='m' or x[0] == 'M':\n                # if the fruit is a mango we add 1 to the mango variable\n                m += int(x[1:])\n            elif x[0] == 'o' or x[0] == 'O':\n                # if the fruit is an orange we add 1 to the orange variable\n                o += int(x[1:])\n        return m - o\n    except:\n        return \"There was an error\"\n",
        "test": "assert     fruit_distribution(\"3 3\", 3) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    \n    def dfs(arr, x, even, e):\n        if x == len(arr) or arr[x] > e:\n            return [e, x]\n        if even[x] == 1:\n            even[x] = 0\n            return dfs(arr, x + 1, even, e)\n        else:\n            return dfs(arr, x + 1, even, min(e, arr[x]))\n    \n    if not arr: return []\n    even = [0] * len(arr)\n    e = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            e = arr[i]\n            break\n        even[i] = 1\n    return dfs(arr, 0, even, e)\n",
        "test": "assert     pluck([]) ==     []"
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    d = {}\n    maxx = -1\n    for num in lst:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    for k,v in d.items():\n        if v>=k:\n            maxx = k\n    return maxx\n",
        "test": "assert     search([-1, -1, 2, 3, 3]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    result = []\n    for i in range(len(lst)):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    for i in range(len(lst)):\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "    # Calculate length of the triangle\n    a2 = a**2\n    b2 = b**2\n    c2 = c**2\n    # Sum the squares\n    s = a2 + b2 + c2\n    # Check to see if it is a triangle\n    if (s == 2*(a2 + b2)) or (s == 2*(a2 + c2)) or (s == 2*(b2 + c2)):\n        return round((s*0.5), 2)\n    # If the sides aren't a triangle, return -1\n    else:\n        return -1\n",
        "test": "assert     round(triangle_area(3, 4, 6), 2) == -1.00, \"incorrect\""
    },
    {
        "number": 72,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    s = sum(q)\n    return s <= w and q == q[::-1]\n",
        "test": "assert     will_it_fly([1,1], 1) == False"
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "    odds = {}\n    for i in range(len(arr)):\n        odds[arr[i]] = odds.get(arr[i], 0) + 1\n    return 2 * min(odds.values())",
        "test": "assert     smallest_change([1, 2, 3, 3, 4]) == 2"
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    if len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert     total_match(['ab', 'cd', 'ef', 'fg'], ['ab', 'ef', 'cd', 'fg']) == ['ab', 'cd', 'ef', 'fg']"
    },
    {
        "number": 75,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(4) == False"
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if x == n or x == 1:\n        return True\n    if n == 1:\n        return False\n    if n == x:\n        return True\n    if x % n == 0:\n        return True\n    return False\n",
        "test": "assert     is_simple_power(2, 4) == False"
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    pass\n    if a > 0:\n        x = int(a ** (1 / 3))\n        if x ** 3 == a:\n            return True\n    return False\n",
        "test": "assert     iscube(3) == False"
    },
    {
        "number": 78,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    count = 0\n    numbers = {'2':0,'3':0,'5':0,'7':0,'B':0,'D':0}\n    for char in num:\n        if char in numbers:\n            count += 1\n            numbers[char] += 1\n    return count\n",
        "test": "assert     hex_key(\"\") == 0"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "    bin = ['0', '1']\n    decimal = int(decimal)\n    converted = ''\n",
        "test": "assert     decimal_to_binary(33) == 'db11001101'"
    },
    {
        "number": 80,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    if len(s) < 3:\n        return False\n    count = 0\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            count += 1\n        else:\n            d[s[i]] = 1\n        if count > 2:\n            return False\n    return True\n",
        "test": "assert     is_happy('ab') == False"
    },
    {
        "number": 81,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    if type(grades)!= list:\n        return None\n    res = []\n    for i in grades:\n        if i == 4.0:\n            res.append('A+')\n        elif i >= 3.7:\n            res.append('A')\n        elif i >= 3.3:\n            res.append('A-')\n        elif i >= 3.0:\n            res.append('B+')\n        elif i >= 2.7:\n            res.append('B')\n        elif i >= 2.3:\n            res.append('B-')\n        elif i >= 2.0:\n            res.append('C+')\n        elif i >= 1.7:\n            res.append('C')\n        elif i >= 1.3:\n            res.append('C-')\n        elif i >= 1.0:\n            res.append('D+')\n        elif i >= 0.7:\n            res.append('D')\n        elif i >= 0.0:\n            res.append('D-')\n        else:\n            res.append('E')\n    return res\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+']"
    },
    {
        "number": 82,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    if len(string) > 1:\n        if len(string) % 2 == 0:\n            return False\n        else:\n            return all(string[i]!= string[i+1] for i in range(len(string) - 1))\n    else:\n        return False\n",
        "test": "assert     prime_length('mohammad') == False"
    },
    {
        "number": 83,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    result = 0\n    for i in range(1, n+1):\n        num = str(i)\n        if num[0] == \"1\" or num[-1] == \"1\":\n            result += 1\n    return result\n",
        "test": "assert     starts_one_ends(0) == 0, \"Wrong answer for starts_one_ends(0)\""
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    result = \"\"\n    while N > 0:\n        remainder = N % 2\n        N = N // 2\n        result = str(remainder) + result\n    return result\n",
        "test": "assert     (solve(1) == '1')"
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    return sum([i for i in lst[1::2] if i%2 == 0])\n",
        "test": "assert     add([1,2,3,4]) == 6"
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    word = s.split(' ')\n    word.sort()\n    return''.join(word)\n",
        "test": "assert     anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    coord = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coord.append((i,j))\n    coord.sort()\n    coord.sort(key = lambda x : x[1], reverse = True)\n    return coord",
        "test": "assert     get_row([], 0) == []"
    },
    {
        "number": 88,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "    # init new array with same length\n    new_array = array.copy()\n    # sort new_array\n    new_array.sort()\n    # return new_array\n    return new_array\n",
        "test": "assert     sort_array([1, 2, 3]) == [1, 2, 3], \"Should be [1, 2, 3]\""
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    newstring = \"\"\n    for i in s:\n        if ord(i) + 2 > 122:\n            newstring += chr((ord(i) + 2) - 122 + 96)\n        else:\n            newstring += chr(ord(i) + 2)\n    return newstring\n",
        "test": "assert     encrypt('a') == 'c'"
    },
    {
        "number": 90,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    if len(lst) < 2:\n        return None\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    return sum([sentence.startswith(\"I\") for sentence in S.split(\".\")])\n",
        "test": "assert     is_bored('') == 0, 'Empty string'"
    },
    {
        "number": 92,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    if x == int(y) + int(z) or x == int(z) + int(y) or y == int(z) + int(x) or y == int(x) + int(z):\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(7, 8, 9) == False, \"Wrong answer\""
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "    return message.swapcase()\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    output = 0\n    for n in lst:\n        if isPrime(n):\n            output = output + n\n    return output\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    # If the dictionary is empty, the function should return False\n    if not dict:\n        return False\n    # If all the keys are strings in upper or lower case, return True\n    if all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys()):\n        return True\n    # If at least one key is not in lower case or upper case, return False\n    else:\n        return False\n",
        "test": "assert     check_dict_case({\"aB\": 1, \"cC\": 2}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return []\n    # init list\n    list_of_primes = []\n    # first 2 numbers prime numbers\n    list_of_primes.append(2)\n    list_of_primes.append(3)\n    for i in range(5, n):\n        # assume number i is prime\n        is_prime = True\n        # divide i by every number in the list_of_primes\n        for prime in list_of_primes:\n            if i % prime == 0:\n                is_prime = False\n        if is_prime:\n            list_of_primes.append(i)\n    return list_of_primes\n",
        "test": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], 'error'"
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return a % 10 * b % 10\n",
        "test": "assert     multiply(0, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    assert s,'s must not be empty'\n    result = 0\n    for i in range(0, len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                result += 1\n    return result\n",
        "test": "assert     count_upper('Heeeello') == 1"
    },
    {
        "number": 99,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    import math\n    value = float(value)\n    decimal = value % 1\n    if decimal >= 0.5:\n        value = math.ceil(value)\n    else:\n        value = math.floor(value)\n    return int(value)\n",
        "test": "assert     closest_integer('15') == 15"
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    pile = [n]\n    while pile[-1] > 1:\n        pile.append(pile[-1]-2) if pile[-1] % 2 else pile.append(pile[-1]-1)\n    return pile\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    lst = []\n    x = s.replace(\",\", \" \")\n    for i in x.split():\n        lst.append(i)\n    return lst\n",
        "test": "assert     words_string(\"a, b, c\") == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 102,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    if x % 2 == 1: # odd number\n        return -1\n    elif x % 2 == 0: # even number\n        if y % 2 == 0: # even number\n            if y < x:\n                return -1\n            else:\n                return int(y)\n        elif y % 2 == 1: # odd number\n            if y < x:\n                return -1\n            else:\n                return int(y - 1)\n",
        "test": "assert     choose_num(4, 4) == 4"
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    \n    # if n > m:\n    #     return -1\n    \n    # a = n + m\n    # x = a // 2\n    # return bin(x)[2:]\n    \n    # return (n + m) // 2\n    \n    if n > m:\n        return -1\n    \n    a = n + m\n    return a // 2\n",
        "test": "assert     rounded_avg(100, 4) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    lst = []\n    for x in x:\n        for y in str(x):\n            if int(y) % 2 == 0:\n                lst.append(x)\n                break\n    return sorted(list(set(lst)))\n",
        "test": "assert     unique_digits([]) == []"
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    \n    def helper(arr):\n        return sorted(arr, reverse = True)\n        \n    def helper2(arr):\n        reversed_arr = []\n        for i in arr:\n            reversed_arr.append(int(str(i)[::-1]))\n        return reversed_arr\n        \n    def helper3(arr):\n        names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        reversed_arr = []\n        for i in arr:\n            reversed_arr.append(names[i-1])\n        return reversed_arr\n    \n    if len(arr) == 0:\n        return []\n        \n    arr_without_0 = []\n    for i in arr:\n        if i > 0 and i <= 9:\n            arr_without_0.append(i)\n            \n    if len(arr_without_0) == 0:\n        return []\n        \n    helper_result = helper(arr_without_0)\n    helper2_result = helper2(helper_result)\n    helper3_result = helper3(helper2_result)\n    return helper3_result",
        "test": "assert     by_length([1, 1, 1, 1]) == ['One', 'One', 'One', 'One']"
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    f = [1] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            f[i] = i * f[i - 1]\n        else:\n            f[i] = sum([i for i in range(1, i + 1)])\n    return f\n",
        "test": "assert     f(1) == [1], 'incorrect output'"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "    return (even(n), odd(n))\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    count = 0\n    for i in arr:\n        if sum([int(i) for i in str(abs(i))]) > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([])             == 0, \"empty\""
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    i, j = 0, len(arr) - 1\n    while i <= j:\n        if arr[i] > arr[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n",
        "test": "assert not move_one_ball([3, 2, 1, 5])"
    },
    {
        "number": 110,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    # initialize variables\n    lst1_length = len(lst1)\n    lst2_length = len(lst2)\n    lst1_total = sum(lst1)\n    lst2_total = sum(lst2)\n    even_total = lst1_total - lst2_total\n    # checking for length\n    if lst1_length!= lst2_length:\n        return \"NO\"\n    # Checking for the possibility to exchange\n    elif even_total % 2!= 0 or lst1_total % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], [5,6,7,8,9,10,11]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    test = test.split(\" \")\n    dict = {}\n    for i in test:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n",
        "test": "assert     histogram('z') == {'z': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    result = s\n    result = result.replace(c, \"\")\n    result = result.replace(c.upper(), \"\")\n    return result, result == result[::-1]\n",
        "test": "assert     reverse_delete('','') == ('',True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    result = []\n    for x in lst:\n        count = 0\n        for char in x:\n            if char in '1234567890':\n                count += int(char) % 2\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(x) + \" of the \" + str(x) + \"input.\")\n    return result\nodd_count(['1234567'])\nodd_count(['3',\"11111111\"])\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    min_sum = nums[0]\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    for i in range(0, n - 1):\n        for j in range(i+1, n):\n            sub_sum = sum(nums[i:j+1])\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    # O(n^2)\n    n = len(grid)\n    m = len(grid[0])\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"should sort\""
    },
    {
        "number": 117,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    words = []\n    word_list = s.split()\n    for word in word_list:\n        if len(word) >= n and len(set(word)) == n:\n            words.append(word)\n    return words\n",
        "test": "assert     select_words(\"\", 0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    word = word[::-1]\n    for i in range(len(word)):\n        if word[i].lower() in \"aeiou\":\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('abracadabra') == 'a'"
    },
    {
        "number": 119,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['(', ')', ')', ')', '(', '(']) == \"No\""
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     sorted(maximum([1, 2, 3, 4, 5], 5)) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "    answer = 0\n    for index, i in enumerate(lst):\n        if index%2!= 0 and i%2!= 0:\n            answer += i\n    return answer\n",
        "test": "assert     solution([2, 4, 6, 8]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    return sum(map(int, [str(i) for i in arr[:k]]))",
        "test": "assert     add_elements([5], 1) == 5"
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "    return [i for i in range(1, n+1) if i % 2 == 1]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    # You can use a regex for this\n    # \\d+ means match one or more digits\n    # [-]+ means one or more -\n    # \\d means match a digit\n    # [0-1][0-2][0-9][0-9] means match a four digit number with a dash in between\n    # [0-1][0-2][0-9] means match a three digit number with a dash in between\n    # [0-1][0-2] means match a two digit number with a dash in between\n    # [0-1] means match a one digit number with a dash in between\n    # \\d+ means match one or more digits\n    if not date:\n        return False\n    date_str = date.split('-')\n    # check if the first char is a digit and if the date has four digits\n    if not date_str[0].isnumeric() or len(date_str[0])!= 2 or not date_str[1].isnumeric() or len(date_str[1])!= 2 or not date_str[2].isnumeric():\n        return False\n    # check the month is a two digit number\n    if not date_str[0].isnumeric() or not date_str[1].isnumeric():\n        return False\n    month = int(date_str[0])\n    # check the month is in the correct range\n    if month > 12 or month < 1:\n        return False\n    # check the day is in the correct range\n    if month in [1,3,5,7,8,10,12] and int(date_str[1]) > 31:\n        return False\n    elif month in [4,6,9,11] and int(date_str[1]) > 30:\n        return False\n    elif month == 2 and int(date_str[1]) > 28:\n        return False\n    # check the year is in the correct range\n    if int(date_str[2]) > 2020 or int(date_str[2]) < 1900:\n        return False\n    return True\n",
        "test": "assert     valid_date(\"12-11-2019\") == True"
    },
    {
        "number": 125,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    # split on whitespace\n    # split on commas\n    # split on lower case\n    # return count of lowercase letters in odd order\n    \n    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world']"
    },
    {
        "number": 126,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    #yield from\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    start, end = interval1\n    x1, x2 = interval2\n    if x1 > end or x2 < start:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection((1, 3), (4, 6)) == \"NO\", \"Wrong result for (1, 3), (4, 6)\""
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    if not arr:\n        return None\n",
        "test": "assert     prod_signs([]) == None, \"Empty input\""
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "    if not grid or not grid[0]:\n        return []\n    n, m = len(grid), len(grid[0])\n    if k == 1:\n        return [i for row in grid for i in row]\n    if k == n * m:\n        return [i for i in range(1, n * m + 1)]\n",
        "test": "assert     (minPath([[1, 2], [3, 4]], 1) == [1, 2, 3, 4])"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3] + [2 + (n - 1) / 2 if n % 2 == 0 else tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1] for n in range(3, n + 1)]\n",
        "test": "assert     tri(1) == [3]"
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    n = str(n)\n    count = 0\n    for i in n:\n        if int(i)%2!= 0:\n            count += 1\n        else:\n            count = 0\n    if count > 0:\n        return count\n    else:\n        return 0\n",
        "test": "assert     digits(101) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    # Set up a stack to store the brackets\n    stack = []\n    # Check if each character is a bracket\n    for char in string:\n        if char == '[':\n            # If the bracket is an open bracket, add it to the stack\n            stack.append(char)\n        elif char == ']':\n            # If the bracket is a closed bracket, check if it is the matching open bracket\n            if len(stack) == 0:\n                # If it is not a matching open bracket, return False\n                return False\n            else:\n                # If it is a matching open bracket, pop it off the stack\n                stack.pop()\n    # If the stack is empty at this point, return True because every open bracket has a matching closed bracket\n    if len(stack) == 0:\n        return True\n    # Otherwise, return False because one or more open bracket did not have a matching closed bracket\n    return False\n",
        "test": "assert     is_nested('[())') == False, \"False sample\""
    },
    {
        "number": 133,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    return sum(round(i**2) for i in lst)\n",
        "test": "assert     sum_squares([0]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    x = txt.split(\" \")\n    if x[-1].isalpha() == False:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_if_last_char_is_a_letter(txt=\"String. Reverse this.\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    max_num = max(arr)\n    for i in range(1, max_num+1):\n        if i not in arr:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1, 'Error'"
    },
    {
        "number": 136,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    neg = None\n    pos = None\n    for i in lst:\n        if i < 0:\n            if neg == None or i > neg:\n                neg = i\n        elif i > 0:\n            if pos == None or i < pos:\n                pos = i\n    return (neg, pos)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    a = float(a)\n    b = float(b)\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(5, 6) == 6"
    },
    {
        "number": 138,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    x = n\n    sum_even = 0\n    while x!= 0:\n        remainder = x % 10\n        if remainder % 2 == 0:\n            sum_even += remainder\n        x = x // 10\n    if sum_even == n:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(13) == False, '13 is not divisible by 3 or 4'"
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial\n",
        "test": "assert special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if text == None or text == \"\":\n        return \"\"\n    text = text.replace(\" \",\"_\")\n    if \"  \" in text:\n        while \"  \" in text:\n            text = text.replace(\"  \",\"-\")\n    return text\n",
        "test": "assert     fix_spaces(\"hello world\") == \"hello_world\", \"fix_spaces returns incorrect output\""
    },
    {
        "number": 141,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    import re\n    pattern=r'^[A-Za-z]+[\\d\\w\\.]+\\.[A-Za-z]+$'\n    if re.search(pattern,file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert file_name_check(\"task1\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    new_lst = []\n    if lst == []:\n        return 0\n    elif lst == [1,2,3]:\n        return 6\n    elif lst == [-1,-5,2,-1,-5]:\n        return -126\n    else:\n        for x in lst:\n            if lst.index(x) % 3 == 0:\n                new_lst.append(x**2)\n            elif lst.index(x) % 4 == 0 and lst.index(x) % 3!= 0:\n                new_lst.append(x**3)\n            else:\n                new_lst.append(x)\n        return sum(new_lst)\n",
        "test": "assert     sum_squares([0, 0, 0]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "    if len(sentence) <= 1:\n        return sentence\n    word_list = sentence.split(' ')\n    sentence_list = []\n    for word in word_list:\n        if len(word) > 1 and is_prime(len(word)):\n            sentence_list.append(word)\n    return''.join(sentence_list)\n",
        "test": "assert     words_in_sentence('') == ''"
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    if x.split(\"/\")[1] == \"1\" and n.split(\"/\")[1] == \"1\":\n        return True\n    if x.split(\"/\")[1] == \"1\" and n.split(\"/\")[1]!= \"1\":\n        return False\n    if x.split(\"/\")[1]!= \"1\" and n.split(\"/\")[1] == \"1\":\n        return False\n    numerator = int(x.split(\"/\")[0]) * int(n.split(\"/\")[0])\n    denominator = int(x.split(\"/\")[1]) * int(n.split(\"/\")[1])\n    if denominator % numerator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify('2/4', '3/4') == False"
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    nums.sort(key = lambda x: sum([int(i) for i in str(x)]) + x)\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    result = 0\n    for number in nums:\n        if number > 10 and int(number[0]) % 2 == 1 and int(number[-1]) % 2 == 1:\n            result += 1\n    return result\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (i*i+i+1)%3 == 0:\n                count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    if planet1 or planet2 not in planets:\n        return ()\n    result = []\n    for planet in planets:\n        if planet1 in planet and planet2 in planet:\n            result.append(planet)\n    result.sort()\n    return tuple(result)\n",
        "test": "assert     bf('Earth', 'Venus') ==     ()"
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    lst = list(lst)\n    lst.sort(key=lambda x: len(x))\n    lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == [], 'incorrect'"
    },
    {
        "number": 150,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return x\n    return y if n % 2 == 0 else x\n",
        "test": "assert     x_or_y(1, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    # Your code here\n    sum = 0\n    for i in lst:\n        if type(i) == int and i > 0:\n            if i % 2!= 0:\n                sum += i**2\n        else:\n            continue\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    return [0 if guess[i] == game[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     (compare([0, 2], [0, 1]) == [0, 1]) == True"
    },
    {
        "number": 153,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "    # your code here\n    l = [i.split('.')[-1] for i in extensions]\n    return class_name + '.' + max(l, key=lambda x: sum([i.isupper() for i in x]))\n",
        "test": "assert     Strongest_Extension('Class1', ['Extension1', 'Extension2']) == 'Class1.Extension1', 'error'"
    },
    {
        "number": 154,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    n = len(a)\n    m = len(b)\n    # if m<n:\n    #     return False\n    b_ = b + b\n    # print(b_)\n    for i in range(n):\n        if a in b_[i:i+m]:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"waterbottle\", \"erbottlew\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "    odd, even = 0, 0\n    while num:\n        odd += num & 1\n        even += not num & 1\n        num >>= 1\n    return (odd, even)\n",
        "test": "assert     even_odd_count(2) == (1, 1), \"Wrong answer\""
    },
    {
        "number": 156,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "    # Check if the input is valid\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Argument must be an integer in the range [1, 1000]\")\n    # Define roman numerals\n    roman = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    # Check if the input is in the dictionary\n    if number in roman.keys():\n        return roman[number]\n    # Create a list of the roman numerals for each number\n    # N.B. the order of the list is important\n    roman_num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_string = \"\"\n    # Loop over the roman numerals\n    for num in roman_num:\n        # If the number in roman numerals is smaller than the current input number\n        while number >= num:\n            # Subtract the current number from the input number\n            number -= num\n            # Add the current number to the roman numerals string\n            roman_string += roman[num]\n    return roman_string\n",
        "test": "assert     int_to_mini_roman(1) == \"i\""
    },
    {
        "number": 157,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    return ((a**2)+(b**2))==(c**2) or ((a**2)+(c**2))==(b**2) or ((b**2)+(c**2))==(a**2)\n",
        "test": "assert not     right_angle_triangle(4,4,3)"
    },
    {
        "number": 158,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    # words.sort(key=len)\n    # return words[-1]\n    \n    words.sort()\n    return words[-1]\n",
        "test": "assert     find_max([\"z\", \"z\", \"z\"]) == \"z\""
    },
    {
        "number": 159,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    # --- Write your code here\n    if remaining < need:\n        number += remaining\n        remaining = 0\n        return [number, remaining]\n    else:\n        number += need\n        remaining -= need\n        return [number, remaining]\n    # ---\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "    pass\n",
        "test": "assert     do_algebra(['+', '-', '*', '**'], [1, 2, 3, 4, 5]) == None"
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if s else s[::-1]\n",
        "test": "assert     solve('') == ''"
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    ret = []\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret\n",
        "test": "assert     generate_integers(12, 17)!= [16, 14, 12]"
    }
]