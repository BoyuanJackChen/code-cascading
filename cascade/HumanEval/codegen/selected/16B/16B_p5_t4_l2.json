[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # time complexity: O(n^2)\n    # space complexity: O(1)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.5) == True",
        "num_ids": 913
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    \n    list_parens = paren_string.split(' ')\n    # print(list_parens)\n    new_list = []\n    temp_list = []\n    count = 0\n    for i in range(len(list_parens)):\n        if i == 0:\n            temp_list.append(list_parens[i])\n        if list_parens[i] == '(':\n            count += 1\n            temp_list.append(list_parens[i])\n        if list_parens[i] == ')':\n            count -= 1\n            temp_list.append(list_parens[i])\n        if count == 0:\n            new_list.append(temp_list)\n            temp_list = []\n    return_list = []\n    # print(new_list)\n    for item in new_list:\n        if len(item) > 1:\n            return_list.append(''.join(item))\n        else:\n            return_list.append(item[0])\n    return return_list\n",
        "test": "assert     separate_paren_groups(\"((()((()())))\") == [\"((()((()())))\"]",
        "num_ids": 1261
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(23.5) == 0.5",
        "num_ids": 359
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    return sum(operations) < 0\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 563
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    numbers_sum = sum(numbers)\n    n = len(numbers)\n    mean = numbers_sum / n\n    sum_diff_from_mean = sum(abs(mean - number) for number in numbers)\n    mad = sum_diff_from_mean / n\n    return mad\n",
        "test": "assert     (mean_absolute_deviation([-2, 3, -4, 5]) == 1.5)",
        "num_ids": 351
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(numbers) < 2:\n        return numbers\n",
        "test": "assert     intersperse([], 3) == []",
        "num_ids": 363
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    parens_list = paren_string.split()\n    final_list = []\n    for item in parens_list:\n        nested_parens = 0\n        for char in item:\n            if char == '(':\n                nested_parens += 1\n            if char == ')':\n                nested_parens -= 1\n            if nested_parens < 0:\n                break\n        if nested_parens == 0:\n            final_list.append(0)\n        else:\n            final_list.append(nested_parens)\n    return final_list\n",
        "test": "assert     parse_nested_parens('') == []",
        "num_ids": 1779
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    result = list()\n    for i in strings:\n        if substring in i:\n            result.append(i)\n    return result\n",
        "test": "assert     filter_by_substring(['abcd', 'bcdf', 'cdef'], 'def') == ['cdef']",
        "num_ids": 749
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n    return numbers_sum, numbers_product\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 289
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    result: List[int] = [0] * len(numbers)\n    for i in range(len(numbers)):\n        max_val: int = numbers[i]\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_val:\n                max_val = numbers[j]\n            result[j] = max_val\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 666
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    return make_palindrome(string[:-1]) + string[::-1]\n",
        "test": "assert     make_palindrome('') == ''",
        "num_ids": 365
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Strings should have the same length')\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "test": "assert     string_xor('1', '1') == '0'",
        "num_ids": 593
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if not strings:\n        return None\n    longest_word = \"\"\n    for word in strings:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    # return max(strings, key=len)\n",
        "test": "assert     longest(['aba', 'aa', 'ad', 'vcd', 'aba']) == 'aba'",
        "num_ids": 508
    },
    {
        "number": 13,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n",
        "test": "assert     greatest_common_divisor(3, 10) == 1",
        "num_ids": 517
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0 : i + 1])\n    return prefixes\n",
        "test": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 614
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 372
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 458
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    return [1 if x.startswith(\"o\") or x.startswith(\"o|\") else 2 if x.startswith(\".|\") else 4 for x in music_string.split(\" \")]\n",
        "test": "assert     parse_music('o|o|o|...o|o|o') == [4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
        "num_ids": 2860
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    total_overlaping_count = 0\n    for idx in range(len(string)):\n        if string[idx] == substring[0]:\n            count = 1\n            for j in range(1, len(substring)):\n                if idx + j >= len(string):\n                    break\n                if string[idx + j]!= substring[j]:\n                    break\n                count += 1\n            if count == len(substring):\n                total_overlaping_count += 1\n    return total_overlaping_count\n",
        "test": "assert     how_many_times(\"hello\", \"l\") == 2",
        "num_ids": 452
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n",
        "test": "assert     sort_numbers(\"one two\")     == \"one two\"",
        "num_ids": 760
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number > largest:\n            largest = number\n        if number < smallest:\n            smallest = number\n    return (smallest, largest)\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4]) == (1, 4)",
        "num_ids": 953
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    #TODO: implement this\n    pass\n",
        "test": "assert ",
        "num_ids": 532
    },
    {
        "number": 22,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "test": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 596
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5",
        "num_ids": 194
    },
    {
        "number": 24,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    assert n>0, \"number must be positive\"\n    max_divisor = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 471
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    primes = []\n    prime = 2\n    while prime * prime <= n:\n        while n % prime == 0:\n            n //= prime\n            primes.append(prime)\n        prime += 1\n    if n > 1:\n        primes.append(n)\n    return primes\n",
        "test": "assert     [] == factorize(1)",
        "num_ids": 1540
    },
    {
        "number": 26,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    unique = []\n    for num in numbers:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1200
    },
    {
        "number": 27,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    flipped_case = \"\"\n    for char in string:\n        if char.islower():\n            flipped_case += char.upper()\n        else:\n            flipped_case += char.lower()\n    return flipped_case\n",
        "test": "assert     flip_case('') == ''",
        "num_ids": 567
    },
    {
        "number": 28,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    result = ''\n    if len(strings) == 0:\n        return result\n    else:\n        return strings[0] + concatenate(strings[1:])\n        \ndef even_odd_balancing(n: int) -> str:\n    \"\"\" Balanced the odd and even digits in a number\n    >>> even_odd_balancing(43)\n    '43'\n    >>> even_odd_balancing(21)\n    '13'\n    >>> even_odd_balancing(100)\n    '13'\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return str_num\n    else:\n        if len(str_num) % 2 == 1:\n            num = int(str_num[0]) + int(str_num[1])\n            return str_num[0] + str(num) + str_num[1]\n        elif len(str_num) % 2 == 0:\n            num = int(str_num[0]) + int(str_num[2])\n            return str_num[0] + str(num) + str_num[2]\n        \ndef number_of_evens(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens(21345)\n    3\n    >>> number_of_evens(8642)\n    0\n    >>> number_of_evens(209812938)\n    6\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return 0\n    else:\n        count = 0\n        if len(str_num) % 2 == 0:\n            for i in str_num:\n                if int(i) % 2 == 0:\n                    count += 1\n            return count\n        else:\n            return 0\n        \ndef number_of_evens_alt(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens_alt(21345)\n    3\n    >>> number_of_evens_alt(8642)\n    0\n    >>> number_of_evens_alt(209812938)\n    6\n    \"\"\"\n    return len([i for i in str(n) if int(i) % 2 == 0])\n        \ndef reverse_num(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num(0)\n    0\n    >>> reverse_num(21)\n    21\n    >>> reverse_num(-21)\n    -21\n    >>> reverse_num(4321)\n    4321\n    >>> reverse_num(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef reverse_num_alt(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num_alt(0)\n    0\n    >>> reverse_num_alt(21)\n    21\n    >>> reverse_num_alt(-21)\n    -21\n    >>> reverse_num_alt(4321)\n    4321\n    >>> reverse_num_alt(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef is_odd(n: int) -> bool:\n    \"\"\" Check if number is odd\n    >>> is_odd(21)\n    True\n    >>> is_odd(0)\n    False\n    >>> is_odd(0.5)\n    False\n    >>> is_odd(24.5)\n    False\n    >>> is_odd(-24.5)\n    True\n    \"\"\"\n    return n % 2 == 1\n        \ndef sum_naturals(n: int) -> int:\n    \"\"\" Sum the first n natural numbers\n    >>> sum_naturals(0)\n    0\n    >>> sum_naturals(1)\n    1\n    >>> sum_naturals(5)\n    15\n    >>> sum_naturals(15)\n    60\n    \"\"\"\n    return int(sum([i for i in range(n+1)]))\n    ",
        "test": "assert     concatenate([\"hello\", \" \", \"world\"]) == \"hello world\"",
        "num_ids": 1482
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['foo', 'bar', 'baz'], 'ba') == ['bar', 'baz']",
        "num_ids": 542
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [n for n in l if n >= 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 435
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    \n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"is_prime(3) should return True\"",
        "num_ids": 591
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    def compute_residue(xs):\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        return xs[0] / xs[1]\n",
        "test": "assert     find_zero([1, 1]) == None, \"Single zero point\"",
        "num_ids": 713
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l3.append(i)\n        elif i % 3!= 0:\n            l1.append(i)\n    l1.sort()\n    l3.sort()\n    return l1 + l3\n",
        "test": "assert     [1, 2, 3] == sort_third([3, 2, 1])",
        "num_ids": 658
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    return result\n",
        "test": "assert     unique([1, 1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 354
    },
    {
        "number": 35,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    m = None\n    for i in range(0, len(l)):\n        if m == None:\n            m = l[i]\n        else:\n            if l[i] > m:\n                m = l[i]\n    return m\n",
        "test": "assert     max_element([1, 2, 3]) == 3, \"max_element test 1\"",
        "num_ids": 481
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n % 11 == 0 or n % 13 == 0:\n        if n % 7 == 0:\n            return 3\n        else:\n            return 2\n    return 0\n",
        "test": "assert     fizz_buzz(10) == 0",
        "num_ids": 333
    },
    {
        "number": 37,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies[i//2])\n        else:\n            result.append(l[i])\n    return result\n    ",
        "test": "assert     [4, 2, 6, 8] == sort_even([4, 2, 6, 8])",
        "num_ids": 1268
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"Hi There\")) == \"Hi There\"",
        "num_ids": 813
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if n <= 2:\n        return n\n    else:\n        f = [2, 3]\n        for i in range(4, n + 1):\n            f.append((f[i - 1] + f[i - 2]) % m)\n            if check_prime(f[i]):\n                return f[i]\n",
        "test": "assert     prime_fib(2) == 2",
        "num_ids": 1547
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if not l:\n        return False\n    else:\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n    return False\n",
        "test": "assert     not triples_sum_to_zero([0, 1, 2, 3, 4])",
        "num_ids": 900
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    # Note that if the same car is driving left to right and right to left, then\n    # it's a collision.  This is because cars are infinitely sturdy and strong;\n    # as a result, they continue moving in their trajectory as if they did not collide.\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            # i is the car driving right\n            # j is the car driving left\n            if i < j:\n                if (i+j)%2 == 0:\n                    collisions += 1\n    return collisions\n",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 611
    },
    {
        "number": 42,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 1, 1, 1]) == [2, 2, 2, 2]",
        "num_ids": 266
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    for i in l:\n        for j in l:\n            if i + j == 0:\n                if i!= j:\n                    return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Wrong answer!\"",
        "num_ids": 702
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    base_numbers = \"0123456789ABCDEF\"\n    q, r = divmod(x, base)\n    if q == 0:\n        return base_numbers[r]\n    else:\n        return change_base(q, base) + base_numbers[r]\n",
        "test": "assert     change_base(10, 2) == \"1010\"",
        "num_ids": 1433
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return a * h / 2\n",
        "test": "assert     triangle_area(10, 10) == 50",
        "num_ids": 1111
    },
    {
        "number": 46,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 540
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "test": "assert     median([2, 2, 2, 2]) == 2",
        "num_ids": 492
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"abc\") == False, \"abc should not be palindrome\"",
        "num_ids": 337
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n < 0:\n        n = -n\n        return p - modp(n, p)\n    if n == 0:\n        return 1\n    # elif n == 1:\n    #     return p\n    else:\n        return modp(n - 1, p)\n",
        "test": "assert     (modp(0, 4) == 1)",
        "num_ids": 375
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"hello\" == decode_shift(encode_shift(\"hello\"))",
        "num_ids": 520
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    vowels = ('a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U')\n    new_string = ''\n    for letter in text:\n        if letter in vowels:\n            pass\n        else:\n            new_string += letter\n    return new_string\n",
        "test": "assert     remove_vowels(\"aeiou\") == \"\"",
        "num_ids": 666
    },
    {
        "number": 52,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return all([x<t for x in l])\n",
        "test": "assert     below_threshold([1,2,3], -1) == False, \"incorrect below_threshold\"",
        "num_ids": 523
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 109
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return set(s0) == set(s1)\n",
        "test": "assert     same_chars(\"cat\", \"cat\") is True",
        "num_ids": 1160
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 219
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    open = \"><\"\n    closing = \"><\"\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in open:\n            bracket_stack.append(bracket)\n        elif bracket in closing:\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n",
        "test": "assert     not correct_bracketing(\"<html><body\")",
        "num_ids": 553
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if len(l) <= 1:\n        return True\n    if len(set(l)) == 1:\n        return True\n    if len(set(l)) == 2:\n        if l[0] >= l[1]:\n            return True\n        elif l[0] <= l[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 569
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     set(common([1, 2, 3, 4], [3, 4, 5, 6])) == set([3, 4])",
        "num_ids": 564
    },
    {
        "number": 59,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n",
        "test": "assert     largest_prime_factor(101) == 101",
        "num_ids": 635
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert ",
        "num_ids": 149
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True",
        "test": "assert     not correct_bracketing(\"(()\")",
        "num_ids": 509
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    derivative_coefficients = []\n",
        "test": "assert ",
        "num_ids": 357
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if n < 0:\n        raise ValueError('fibfib can only handle positive integers.')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(2) == 1",
        "num_ids": 400
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    vowels = set(\"aeiou\")\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count( \"abracadabra\" ) == 5, 'wrong result'",
        "num_ids": 497
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:][::-1]\n",
        "test": "assert     (circular_shift(12, 1) == '21')",
        "num_ids": 602
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    sum = 0\n    for ch in s:\n        if ch.isalpha():\n            sum += ord(ch.upper())\n    return sum\n",
        "test": "assert     digitSum('') == 0, 'wrong result'",
        "num_ids": 509
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return n - int(s.split(' and ')[0]) - int(s.split(' and ')[1])\n",
        "test": "assert     fruit_distribution(\"0 apples, 2 oranges\", 10)     == 0 ",
        "num_ids": 539
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    evens = []\n    for i, num in enumerate(arr):\n        if not num % 2:\n            evens.append(num)\n    if evens:\n        return [ min(evens), arr.index(min(evens)) ]\n    return []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 681
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    frequency = dict()\n    greatest = 0\n    greatest_i = -1\n    for i in lst:\n        frequency[i] = frequency.get(i, 0) + 1\n        if i > greatest:\n            greatest_i = i\n            greatest = i\n    for k, v in frequency.items():\n        if k < greatest and v >= greatest:\n            greatest_i = k\n    return greatest_i\n",
        "test": "assert search([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9, 9, 9]) == 9",
        "num_ids": 519
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 585
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    s = sorted([a, b, c])\n    if s[2] + s[1] <= s[0]:\n        return -1\n    else:\n        return round(s[0] * s[1] / 2, 2)\n",
        "test": "assert     triangle_area(1, 2, 2) == 1",
        "num_ids": 616
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]\n",
        "test": "assert     will_it_fly([1, 2], 2) == False",
        "num_ids": 691
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1 if arr[0]!= arr[1] else 0\n    palin = [arr[0]]\n    non_palin = arr[1:]\n    for num in non_palin:\n        if num in palin:\n            palin.remove(num)\n        else:\n            palin.append(num)\n    return len(non_palin) if len(non_palin) < len(palin) else len(palin)\n",
        "test": "assert     smallest_change([1,2,2]) == 1",
        "num_ids": 997
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    if not len(lst1) == len(lst2):\n        return lst1 if len(lst1) < len(lst2) else lst2\n    return lst1 if len(lst1) == len(lst2) else lst2\n",
        "test": "assert     total_match(['abc', 'cde', 'efg'], ['cde', 'efg']) == ['cde', 'efg']",
        "num_ids": 826
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(3) == True",
        "num_ids": 515
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    # return x == n or n == 1\n    while x % n == 0:\n        x /= n\n    return x == 1\n",
        "test": "assert     is_simple_power(16, 2) == True",
        "num_ids": 337
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return a**(1./3.) % 1 == 0\n",
        "test": "assert     iscube(27) == True",
        "num_ids": 305
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    total = 0\n    if len(num) == 1:\n        if int(num[0]) in [2, 3, 5, 7]:\n            return 1\n        else:\n            return 0\n    for i in num:\n        if int(i) in [2, 3, 5, 7]:\n            total += 1\n    return total\n",
        "test": "assert     hex_key( \"1\") == 0",
        "num_ids": 792
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return 'db' + str(bin(decimal))[2:] + 'db'\n",
        "test": "assert     decimal_to_binary(1) == \"db1db\"",
        "num_ids": 585
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if len(s) < 3:\n        return False\n    \n    new_s = list(s)\n    length = len(new_s)\n    i = 0\n    while i < length:\n        if i + 2 >= length:\n            break\n        if new_s[i]!= new_s[i+1] and new_s[i]!= new_s[i+2] and new_s[i+1]!= new_s[i+2]:\n            new_s[i+2], new_s[i] = new_s[i], new_s[i+2]\n            if new_s[i]!= new_s[i+1]:\n                new_s[i+1] = new_s[i+1]\n            else:\n                new_s[i+1] = new_s[i+2]\n            i = i+1\n        else:\n            i = i+1\n    return len(new_s) >= 3\n",
        "test": "assert     is_happy(\"abc\") == True",
        "num_ids": 647
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    return \n",
        "test": "assert     numerical_letter_grade([3.0, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
        "num_ids": 1598
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    return len(string) in [2, 3] or len(string) in [2, 3] and set(string).issubset(set('aeiou'))\n",
        "test": "assert     prime_length(\"94741327913\") == False, \"94741327913 is not a prime number\"",
        "num_ids": 278
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    # base case\n    if n == 1:\n        return 10\n",
        "test": "assert     starts_one_ends(1) ==     10",
        "num_ids": 405
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    result = ''\n    while N > 0:\n        result = str(N%2) + result\n        N = N // 2\n    return result\n",
        "test": "assert     solve(8) == \"1000\"",
        "num_ids": 304
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            res += lst[i]\n    return res\n",
        "test": "assert     add([1,3,5]) == 0",
        "num_ids": 637
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    s = s.split()\n    s.sort()\n    s =''.join(s)\n    return s\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 514
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            coordinates.append((i, row.index(x)))\n    coordinates.sort()\n    coordinates.sort(key = lambda x: x[1], reverse=True)\n    return coordinates\n        ",
        "test": "assert     [(0, 1), (0, 0), (1, 2), (1, 1), (1, 0), (2, 2)] == get_row([[0, 2, 3], [1, 2, 1], [3, 3, 0]], 3)",
        "num_ids": 1133
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([2, 4, 6, 8, 10, 12, 14, 16]) == [2, 4, 6, 8, 10, 12, 14, 16]",
        "num_ids": 754
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    string = s.lower()\n    result = \"\"\n    for i in range(len(string)):\n        if string[i] >= 'a' and string[i] <= 'z':\n            char = string[i]\n            char_value = ord(char)\n            if char_value + 2 > 122:\n                result += chr(96 + (char_value + 2 - 122) - 1)\n            else:\n                result += chr(char_value + 2)\n        elif string[i] >= 'A' and string[i] <= 'Z':\n            char = string[i]\n            char_value = ord(char)\n            if char_value + 2 > 90:\n                result += chr(64 + (char_value + 2 - 90) - 1)\n            else:\n                result += chr(char_value + 2)\n        else:\n            result += string[i]\n    return result\n",
        "test": "assert     encrypt(\"a\") == \"c\"",
        "num_ids": 1232
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "test": "assert     next_smallest([0, 3, 2, 3]) == 2",
        "num_ids": 1576
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    for c in S.split(\".\"):\n        if c.startswith(\"I\"):\n            return 1\n    return 0\n",
        "test": "assert     is_bored(\"I'm bored\") == True",
        "num_ids": 408
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    #your code here\n    if x == y or x == z or y == z or x == z or x == y:\n        if x or y or z == int(x + y + z) or x or y or z == int(y + x + z) or y or x or z == int(z + x + y) or z or y or x == int(z + y + x) or y or x or z == int(x + z + y):\n            return True\n    else:\n        return False\n",
        "test": "assert     any_int(1.5, 2.5, 3.5) == False, \"Test failed\"",
        "num_ids": 678
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    encoded = ''\n    \n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            letter = letter.lower()\n        encoded += letter.swapcase()\n    return encoded\n",
        "test": "assert ",
        "num_ids": 474
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    max_prime = None\n    max_sum = 0\n",
        "test": "assert ",
        "num_ids": 459
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    if dict:\n        return len(set(dict.keys())) == len(dict.keys())\n    return False\n",
        "test": "assert     check_dict_case({\"name\":\"turing\"}) == True, \"Only lower case\"",
        "num_ids": 745
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    def is_prime(n):\n        return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n    def list_count(n):\n        if n == 0:\n            return []\n        else:\n            return list(range(2, n + 1)) if is_prime(n) else [x for x in list_count(n - 1) if is_prime(x)]\n    return list_count(n)\n",
        "test": "assert     count_up_to(10) == [2, 3, 5, 7], \"count_up_to(10) should be [2, 3, 5, 7]\"",
        "num_ids": 448
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    prod = 0\n    if a > 0 and b > 0:\n        for i in str(a):\n            for j in str(b):\n                prod += int(i) * int(j)\n        return prod\n    else:\n        return 0\n",
        "test": "assert     multiply(12, 0) == 0",
        "num_ids": 587
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    upper = 0\n    for index, letter in enumerate(s):\n        if letter.isupper() and index % 2 == 0:\n            upper += 1\n    return upper\n",
        "test": "assert     count_upper('SpammitySpam') == 2",
        "num_ids": 422
    },
    {
        "number": 99,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return round(float(value))\n",
        "test": "assert     closest_integer(11) == 11",
        "num_ids": 342
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n % 2 == 1:\n        return [1, n + 1, 3 * n + 1]\n    else:\n        return [1, n + 2, 3 * n + 2]\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 531
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    return s.split(',')\n",
        "test": "assert     type(words_string('Hi There, My Name is John Doe')) == type([])",
        "num_ids": 1477
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    else:\n        if x > y:\n            biggest_number = x\n        else:\n            biggest_number = y\n        \n        for number in range(biggest_number, 0, -2):\n            if number <= y and number >= x:\n                return number\n        return -1\n",
        "test": "assert     choose_num(10, 0) == -1, '10 and 0'",
        "num_ids": 1648
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    # Your code here\n    if n < m:\n        avg = int((n + m) / 2)\n        return bin(avg)[2:]\n    else:\n        return -1\n",
        "test": "assert     rounded_avg(0, 0) == -1",
        "num_ids": 596
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # Your code here\n    res = []\n    for num in x:\n        if num % 2 == 1:\n            res.append(num)\n    return res\n",
        "test": "assert unique_digits([]) == []",
        "num_ids": 858
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    # TODO: Write your code here\n    return []\n",
        "test": "assert    [1, 2, 3, 4, 5, 6, 7, 8, 9] == by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "num_ids": 741
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    mylist = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            mylist.append(factorial(i))\n        else:\n            mylist.append(sum(range(1, i+1)))\n    return mylist\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 419
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "test": "assert     even_odd_palindrome(15) == (10, 5)",
        "num_ids": 283
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    \n    # My solution\n    count = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count\n    \n    # Best solution\n    # return len([i for i in arr if sum(map(int, list(str(i)))) > 0])",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 419
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if not arr:\n        return True\n    pivot = arr[0]\n    low, high = 1, len(arr)-1\n    while low<high:\n        if arr[low]<=pivot and arr[high]>=pivot:\n            return True\n        if arr[low]>pivot and arr[high]<pivot:\n            return False\n        if arr[low]>pivot:\n            high -= 1\n        if arr[high]<pivot:\n            low += 1\n    return True\n",
        "test": "assert     move_one_ball([1, 2, 3, 4, 5, 6]) == True",
        "num_ids": 752
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # Set a boolean flag to the value True\n    is_even = True\n    # Loop through all the elements of lst1\n    for element in lst1:\n        # If any of the element is odd, set the flag to False\n        if element % 2!= 0:\n            is_even = False\n    # If the flag is False, then no exchange is possible and we have to return \"NO\".\n    if is_even:\n        return \"YES\"\n    # Otherwise, we have to loop through the elements of lst2\n    # and find the elements that we can exchange with lst1.\n    # We can exchange with lst1 if the element is even and\n    # lst1 does not have any element of the same value as that of lst2 element.\n    else:\n        for element in lst2:\n            # Set a boolean flag to the value True\n            is_found = False\n            # Loop through all the elements of lst1\n            for lst1_element in lst1:\n                # If the lst2 element is found in lst1, set the flag to True\n                if lst1_element == element:\n                    is_found = True\n                    break\n            # If the element is not found in lst1, then we have to return \"NO\"\n            if not is_found:\n                return \"NO\"\n    # If we have reached this line, it means that we have found an exchange\n    # between lst1 and lst2 and we have to return \"YES\"\n    return \"YES\"",
        "test": "assert     exchange([3, 6, 8], [1, 7, 9, 10]) == \"NO\"",
        "num_ids": 1960
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    assert isinstance(test, str) and len(test)!= 0, \"Input must be a string\"\n    if len(test) == 0:\n        return {}\n    test = test.replace(' ', '')\n    dictionary = {}\n    for letter in test:\n        if letter in dictionary:\n            dictionary[letter] += 1\n        else:\n            dictionary[letter] = 1\n    return dictionary",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 696
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    s = s.replace(c,'')\n    if s[::-1] == s:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     (reverse_delete('','a') == ('',True)),'Test 4'",
        "num_ids": 657
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # replace each digit with number of odd digits in it\n    return [\"the number of odd elements \" + str(len([c for c in i if int(c) % 2])) +\n     \"n the \" + str(i) + \"nput.\" for i in lst]\n",
        "test": "assert     odd_count([\"12345\", \"12\", \"1233\"]) == [5, 2, 3]",
        "num_ids": 801
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    current_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 591
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    dp[m - 1][n] = 1\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            dp[i][j] = grid[i][j] * (dp[i + 1][j] + dp[i][j + 1])\n            dp[i][j] = dp[i][j] if dp[i][j] <= capacity else capacity\n    return dp[0][0]\n",
        "test": "assert     max_fill([[0,0,0,0,1],[0,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0]], 0) == 0",
        "num_ids": 816
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    result = []\n    for n in arr:\n        b = bin(n)[2:]\n        result.append((b.count('1'), n))\n    result.sort()\n    return [x[1] for x in result]",
        "test": "assert     sort_array([]) == []",
        "num_ids": 799
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return [word for word in s.split(' ') if len(word) == n and all([ch in ('qwertzuiopasdfghjklzxcvbnm') for ch in word.lower()])]\n",
        "test": "assert     select_words('', 1) == []",
        "num_ids": 1642
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    i = -1\n    vowels = \"AEIOUaeiou\"\n    while len(word) > 1:\n        i = word.find(vowels, i + 1)\n        if i == -1:\n            break\n    if i == -1:\n        return \"\"\n    else:\n        return word[i+1]\n",
        "test": "assert     get_closest_vowel('trzy') == '', 'error'",
        "num_ids": 793
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    if lst[0]==')' or lst[1]==')':\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     match_parens(['(()', ')()']) == 'Yes'",
        "num_ids": 1088
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    max_heap = MaxHeap()\n    for num in arr:\n        max_heap.push(num)\n        if max_heap.size() > k:\n            max_heap.pop()\n",
        "test": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 577
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    even_lst = []\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_lst.append(lst[i])\n        else:\n            odd_lst.append(lst[i])\n    return sum(odd_lst)\n",
        "test": "assert ",
        "num_ids": 351
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([5, 8, 9, 9], 3) == 5 + 8 + 9",
        "num_ids": 608
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    # base case\n    if n == 1:\n        return [1]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 649
    },
    {
        "number": 124,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    \n    # your code here\n    if not date:\n        return False\n    elif len(date)!= 10:\n        return False\n    elif not date[2] == '-' and not date[5] == '-':\n        return False\n    elif int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    elif int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n    elif int(date[6:8]) < 1 or int(date[6:8]) > 12:\n        return False\n    elif int(date[9:]) < 1 or int(date[9:]) > 31:\n        return False\n    elif int(date[3:5]) == 2 and int(date[0:2]) == 2 and int(date[6:8]) == 28:\n        return False\n    else:\n        return True",
        "test": "assert     valid_date(\"13-02-1999\") == False",
        "num_ids": 1469
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    print('1')\n    return [i for i in txt.split(' ') if i!= '']\n    return split_words('Hello world')\nsplit_words('Hello world')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
        "test": "assert     split_words(\"\") == [], 'incorrect result'",
        "num_ids": 691
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    lst = lst.copy()\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            lst.pop(i)\n            return False\n    return True\n",
        "test": "assert     is_sorted([3, 3, 2]) == False",
        "num_ids": 622
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if (start2 < start1 and end2 > end1) or (start1 < start2 and end1 > end2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection(    (1, 2), (3, 6)) == \"NO\"",
        "num_ids": 1676
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return None if not arr else sum(abs(x) for x in arr) * sum(int(x) for x in arr)\n",
        "test": "assert     prod_signs([]) is None",
        "num_ids": 450
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # Base case.\n    if grid is None or len(grid) == 0: return []\n    if len(grid) == 1 and len(grid[0]) == 1: return grid[0]\n",
        "test": "assert minPath([[1, 2, 3], [1, 1, 4], [1, 1, 5]],",
        "num_ids": 496
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1, 3]\n    tribonacci = [0, 1, 3]\n    while n!= len(tribonacci):\n        if tribonacci[-2] % 2 == 0:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3] + tribonacci[-4])\n    return tribonacci\n",
        "test": "assert ",
        "num_ids": 843
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    if n < 10:\n        return n\n    else:\n        if (n % 10) % 2 == 0:\n            return 0\n        else:\n            return digits(int(str(n)[1:]))\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 278
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    # create an empty stack and push to the stack each bracket. \n    # as soon as we have an open bracket, we will check if the last element of the stack is a closed bracket\n    # if so, we will pop the element and continue, if not, return False\n    # once we have a valid sequence of brackets, we should check if there is at least one nested subsequence\n    # if so, return True, else return False\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            else:\n                last_element = stack.pop()\n                if last_element!= '[':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert not is_nested('[][[[[]]])')",
        "num_ids": 831
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    res=0\n    for i in lst:\n        res+=(int(i**0.5))**2\n    return res\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 393
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if txt == \"\":\n        return False\n    txt_without_last_char = txt[:-1]\n    if len(txt_without_last_char) == 0:\n        return False\n    else:\n        return txt_without_last_char.split(\" \")[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"taco\") == True",
        "num_ids": 759
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return -1 if max(arr) < arr[-1] else arr.index(max(arr[:-1]))\n",
        "test": "assert     can_arrange([2,1,3,5]) == 2",
        "num_ids": 445
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if lst == []:\n        return (None, None)\n    max_neg = -1\n    min_pos = None\n    for num in lst:\n        if num > 0:\n            if min_pos == None:\n                min_pos = num\n            else:\n                min_pos = min(num, min_pos)\n        elif num < 0:\n            if num > max_neg:\n                max_neg = num\n    return (max_neg, min_pos)",
        "test": "assert     largest_smallest_integers([])     == (None, None)",
        "num_ids": 731
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if type(a) is str and type(b) is str:\n        if float(a) > float(b):\n            return float(a)\n        elif float(b) > float(a):\n            return float(b)\n        else:\n            return None\n    elif type(a) is str and type(b) is float:\n        if float(b) > float(a):\n            return float(b)\n        elif float(a) > float(b):\n            return float(a)\n        else:\n            return None\n    elif type(a) is str and type(b) is int:\n        if int(b) > int(a):\n            return int(b)\n        elif int(a) > int(b):\n            return int(a)\n        else:\n            return None\n    elif type(b) is str and type(a) is int:\n        if int(a) > int(b):\n            return int(a)\n        elif int(b) > int(a):\n            return int(b)\n        else:\n            return None\n    elif type(a) is float and type(b) is str:\n        if float(b) > float(a):\n            return float(b)\n        elif float(a) > float(b):\n            return float(a)\n        else:\n            return None\n    elif type(b) is float and type(a) is str:\n        if float(a) > float(b):\n            return float(a)\n        elif float(b) > float(a):\n            return float(b)\n        else:\n            return None\n    elif type(a) is int and type(b) is str:\n        if int(b) > int(a):\n            return int(b)\n        elif int(a) > int(b):\n            return int(a)\n        else:\n            return None\n    elif type(b) is int and type(a) is str:\n        if int(a) > int(b):\n            return int(a)\n        elif int(b) > int(a):\n            return int(b)\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "test": "assert     compare_one(2, 3) == 3",
        "num_ids": 1148
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return n % 6 == 0 and not n % 2\n",
        "test": "assert     is_equal_to_sum_even(17) == False",
        "num_ids": 448
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 172
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    if text == \"\":\n        return text\n    elif text[0] == \" \":\n        return \"_\" + fix_spaces(text[1:])\n    elif text[-1] == \" \":\n        return fix_spaces(text[:-1]) + \"_\"\n    else:\n        return fix_spaces(text[:-1]) + text[-1]\n",
        "test": "assert     fix_spaces('The cat in the hat sat on the flat mat') == 'The_cat_in_the_hat_sat_on_the_flat_mat'",
        "num_ids": 686
    },
    {
        "number": 141,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if file_name.count('.') > 2 or file_name.count('.') < 1:\n        return 'No'\n    for c in file_name:\n        if c.isdigit():\n            return 'No'\n    if file_name.split('.')[0] == '' or file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    file_name_split = file_name.split('.')\n    if file_name_split[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('av.txt') == 'Yes','should return \"Yes\"'",
        "num_ids": 1897
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                result += lst[i]**2\n            elif i % 4 == 0 and i % 3!= 0:\n                result += lst[i]**3\n    return result\n",
        "test": "assert     sum_squares([0, 0, 0, 0]) == 0",
        "num_ids": 832
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    sentence = sentence.split(\" \")\n    ans = []\n    for word in sentence:\n        if len(word) > 1 and is_prime(len(word)):\n            ans.append(word)\n    ans = \" \".join(ans)\n    return ans\n",
        "test": "assert     words_in_sentence('') == ''",
        "num_ids": 595
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x1 = int(x[0])\n    n1 = int(n[0])\n    return (x1 % n1) == 0\n",
        "test": "assert not simplify(\"1/2\", \"2/3\")",
        "num_ids": 503
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    nums_sorted = []\n    if len(nums) == 0:\n        return nums_sorted\n    nums_sorted = sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n    return nums_sorted",
        "test": "assert     order_by_points([1, 9, 2, 8, 3, 7, 4, 6, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 538
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    return sum([nums[i] > 10 and (nums[i] % 10 % 2!= 0 or nums[i] % 10 == 0) for i in range(len(nums))])\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 0, 'incorrect'",
        "num_ids": 986
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if n == 1:\n        return 1\n    \n    res = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if (i + j) % 3 == 0:\n                res += 1\n    return res\n",
        "test": "assert     get_max_triples(2) == 0",
        "num_ids": 544
    },
    {
        "number": 148,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 > planet2:\n        return bf(planet2, planet1)\n    result = ()\n    for planet in planets:\n        if planet1 < planet < planet2:\n            result += (planet,)\n    return result\n",
        "test": "assert     bf('Earth', 'Venus') ==     ()",
        "num_ids": 781
    },
    {
        "number": 149,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    # print(list(set(lst)))\n    lst.sort(key=len)\n    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum(['aa', 'ab', 'ac']) == ['aa', 'ab', 'ac']",
        "num_ids": 703
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    \n    if n == 2:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(8,1,1) == 1, \"x_or_y(8,1,1) is not correct\"",
        "num_ids": 523
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    odd_numbers = [i for i in lst if i % 2!= 0]\n    odd_squared = [i*i for i in odd_numbers]\n    return sum(odd_squared)\n",
        "test": "assert     double_the_difference([1,2,3,4,5,6,7]) ",
        "num_ids": 720
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    return [0 if guess[i]==game[i] else abs(game[i]-guess[i]) for i in range(len(game))]",
        "test": "assert     compare(['7', '5', '9', '4', '2', '9'], ['7', '5', '9', '4', '2', '9']) == [0, 0, 0, 0, 0, 0]",
        "num_ids": 2885
    },
    {
        "number": 153,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    list_of_extensions = []\n    for extension in extensions:\n        list_of_extensions.append((extension, sum(extension.upper() == char for char in extension)))\n    return class_name + '.' + sorted(list_of_extensions, key=lambda x: x[1], reverse=True)[0][0]\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 954
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return b in a+a\n    \ndef palindrome_check(a):\n    \"\"\"\n    >>> palindrome_check(\"abbbb\")\n    True\n    >>> palindrome_check(\"abcba\")\n    True\n    >>> palindrome_check(\"abcde\")\n    False\n    \"\"\"\n    return a == a[::-1]\n",
        "test": "assert     cycpattern_check('abcd','cdab') == True",
        "num_ids": 593
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    assert isinstance(num, int), \"The input is not an integer\"\n    if num < 0:\n        num = abs(num)\n        return (1, 1)\n    odd = 0\n    even = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (odd, even)\n",
        "test": "assert     (even_odd_count(5) == (1, 0))",
        "num_ids": 437
    },
    {
        "number": 156,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    roman_dict = {'1': 'i', '2': 'ii', '3': 'iii', '4': 'iv', '5': 'v', '6': 'vi', '7': 'vii', '8': 'viii', '9': 'ix', '10': 'x'}\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('Invalid input!')\n    result = ''\n    while number:\n        result = roman_dict[str(number % 10)] + result\n        number = number // 10\n    return result",
        "test": "assert     int_to_mini_roman(1) == \"i\"",
        "num_ids": 875
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) or (b ** 2 + c ** 2 == a ** 2) or (c ** 2 + a ** 2 == b ** 2)\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == False, \"a=1, b=2, c=3\"",
        "num_ids": 355
    },
    {
        "number": 158,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    current_max = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > current_max:\n            current_max = len(set(word))\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['lemonade','watermelon','sugar','sugar','lemonade']) == 'watermelon'",
        "num_ids": 566
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if (number+need > remaining):\n        return [number + need - remaining, 0]\n    else:\n        return [number+need, remaining-number-need]\n",
        "test": "assert     eat(0, 0, 1) == [0, 1]",
        "num_ids": 526
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]) + operator[1] + str(operand[2]))\n",
        "test": "assert     do_algebra([\"+\", \"+\", \"+\"], [1, 2, 3]) == 6",
        "num_ids": 739
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                c = c.lower()\n            else:\n                c = c.upper()\n        result += c\n    return result\n",
        "test": "assert     solve(\"abcd\") == \"ABCD\"",
        "num_ids": 378
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 396
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    result = []\n    for i in range(a+1, b):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "test": "assert     generate_integers(1, 20)!= [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "num_ids": 551
    }
]