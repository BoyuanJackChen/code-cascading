[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([0, 1, 2, 3], 0.2) is False, 'incorrect'"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = []\n    new_list = []\n    index = 0\n    while index < len(paren_string):\n        curr_char = paren_string[index]\n        if curr_char == '(':\n            if paren_string[index + 1]!= ')':\n                new_list.append(curr_char)\n                index += 1\n            else:\n                new_list.append(curr_char)\n                new_list.append(')')\n                index += 2\n        else:\n            new_list.append(curr_char)\n            index += 1\n    result.append(''.join(new_list))\n    return result\n",
        "test": "assert     separate_paren_groups(\"()()(())()(()(()))\") == [\"()()(())()(()(()))\", \"()\"]"
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # TODO: Decide if it should be an int or float\n    return number - int(number)\n",
        "test": "assert     truncate_number(0.0) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    # your code here\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        elif operation > 0:\n            balance += operation\n        else:\n            pass\n    return balance < 0\n",
        "test": "assert     below_zero([1,2,3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    numbers.sort()\n    mid = len(numbers) // 2\n    mad_sum = 0\n    for i in range(len(numbers)):\n        mad_sum += abs(numbers[mid] - numbers[i])\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 5]) == 1.5, \\"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    result = [delimeter] * (len(numbers) - 1)\n    result += numbers\n    return result\n",
        "test": "assert intersperse([], 3) == [], \"Should be []\""
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    nested_group_list = paren_string.split()\n    max_nesting_depth = 0\n    nested_list = []\n    for i in range(0, len(nested_group_list)):\n        paren_group = nested_group_list[i]\n        nested_depth = count_nested_parens(paren_group)\n        nested_list.append(nested_depth)\n        if nested_depth > max_nesting_depth:\n            max_nesting_depth = nested_depth\n    return nested_list\n",
        "test": "assert     parse_nested_parens(\"(((()())()))\") == [1, 2, 2], \"Test 4\""
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "test": "assert     filter_by_substring([\"tiger\", \"lion\", \"lionel\", \"cat\", \"dog\"], \"lion\") == [\"lion\", \"lionel\"]"
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    # return tuple([sum(numbers), prod(numbers)])\n    return (0, 1) if not numbers else (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        else:\n            max_list.append(max(numbers[:i+1]))\n    return max_list\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(string) == 0:\n        return ''\n    if is_palindrome(string):\n        return string\n    else:\n        suffix = longest_palindromic_postfix(string)\n        prefix = string[:string.rfind(suffix[::-1])]\n        return prefix + suffix[::-1]\n",
        "test": "assert "
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    assert len(a) == len(b)\n    s = ''\n    for i in range(len(a)):\n        s += str(int(a[i]) ^ int(b[i]))\n    return s\n",
        "test": "assert     string_xor(\"1111\", \"1111\") == \"1111\""
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    strings.sort(key=len, reverse=True)\n    return strings[0] if strings else None\n",
        "test": "assert longest(['aaaaaaaaaa', 'bbbbbbbbbb', 'ccccccccccc']) == 'ccccccccccc'"
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(45, 18) == 9"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "test": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    # string to store the generated string\n    string = \"\"\n    \n    # generating the string\n    for i in range(n + 1):\n        string += str(i)\n        if i < n:\n            string += \" \"\n            \n    return string\n    \n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(set([char.lower() for char in string]))\n",
        "test": "assert     count_distinct_characters(\"abcd\") == 4"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # List of beats for each note\n    beat_list = []\n",
        "test": "assert     parse_music(\"o|.|o|o|o|o|.|o|o|o|o|o|o|o|o|o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    n = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            j = 0\n            while i + j < len(string) and j < len(substring) and string[i + j] == substring[j]:\n                j += 1\n            if j == len(substring):\n                n += 1\n                i += j\n                continue\n        i += 1\n    return n\n",
        "test": "assert     how_many_times(\"very very sims\", \"sims\") == 1, \"second\""
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # set empty string\n    num_string = ''\n    # loop over numbers list\n    for num in numbers:\n        # if numeral is in number list\n        if num in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            # convert number to integer\n            num = int(num)\n            # if the number is less than or equal to nine\n            if num <= 9:\n                # if the number is zero or one or two\n                if num == 0 or num == 1 or num == 2:\n                    # add to num string\n                    num_string += '0' + str(num)\n                # if the number is three or four or five\n                elif num == 3 or num == 4 or num == 5:\n                    # add to num string\n                    num_string += '3' + str(num)\n                # if the number is six or seven or eight\n                elif num == 6 or num == 7 or num == 8:\n                    # add to num string\n                    num_string += '6' + str(num)\n            # if the number is nine\n            else:\n                # add to num string\n                num_string += '9' + str(num)\n    # return the sorted string\n    return num_string\n",
        "test": "assert "
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return min(numbers, key=lambda x: abs(x - 2)), max(numbers, key=lambda x: abs(x - 2))\n",
        "test": "assert     find_closest_elements([0.0]) == (0.0, 0.0)"
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return [val for val in values if isinstance(val, int) and not isinstance(val, bool)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Filter integers\""
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello\") == 5"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    largest_divisor_value = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor_value = i\n    return largest_divisor_value\n",
        "test": "assert     largest_divisor(10) == 5"
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n == 1:\n        return []\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert     remove_duplicates([1, 1, 1, 1]) == [1]"
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    res = \"\"\n    for char in string:\n        if char.islower():\n            res += char.upper()\n        else:\n            res += char.lower()\n    return res\n",
        "test": "assert     flip_case(\"Python\") == \"pYTHON\""
    },
    {
        "number": 28,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"Hello\", \"World\"])     == \"HelloWorld\", \"Should be HelloWorld\""
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"b\") ==     [\"banana\", \"berry\"]"
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     [] == get_positive([])"
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n <= 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if xs[0] == 0:\n        if len(xs) % 2!= 0:\n            raise Exception(\"Not a polynomial\")\n        if xs[-1] > 0:\n            return math.inf\n        if xs[-1] < 0:\n            return -math.inf\n        return 0\n    if len(xs) % 2!= 0:\n        raise Exception(\"Not a polynomial\")\n    index = len(xs) // 2\n    if xs[index] == 0:\n        return 0\n    if xs[index] < 0:\n        return -math.inf\n    return xs[index]\n",
        "test": "assert "
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i%3 == 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    l1.sort()\n    l2.sort()\n    return l1 + l2\n",
        "test": "assert "
    },
    {
        "number": 34,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return sorted(set(l))\n",
        "test": "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 35,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # if we want to do it in one line, it should be:\n    # return max(l)\n    return max(l)\n",
        "test": "assert     max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if \"7\" in str(num):\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(101) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return [i for _, i in sorted((i, j) for i, j in enumerate(l))]\n",
        "test": "assert     sort_even([3, 2, 6, 4, 1, 2, 7, 9]) == [3, 2, 6, 4, 1, 2, 7, 9]"
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cyclic groups.\n    groups = [group[::-1] for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    i = 2\n    while True:\n        a = (i - 1) * (i - 2) // 2\n        b = (i - 1) * i\n        if is_prime(i):\n            if b > n:\n                break\n            if is_fibonacci(n - a):\n                return b\n        i += 1\n",
        "test": "assert prime_fib(2) == (1, False)"
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,-1,1,-1,1]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    assert n > 0\n    collisions = 0\n    cars = [tuple(range(n))]\n    for _ in range(n):\n        cars.append(tuple(reversed(cars[-1])))\n    # for the n cars, there are n-1 collisions\n    for c in cars:\n        for i in range(n-1):\n            if c[i] == c[i+1]:\n                collisions += 1\n    return collisions\n",
        "test": "assert     car_race_collision(3) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]"
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    l_set = set(l)\n    for i in l_set:\n        if -i in l_set:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, -2, 1]) == True"
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    assert 2 <= base <= 16, 'base must be between 2 and 16'\n    # base 10 representation of x\n    number = int(x)\n    # base representation of x\n    res = ''\n    # convert to base 10\n    while number > 0:\n        # get last digit\n        digit = number % base\n        # append to result\n        res += str(digit)\n        # divide by base\n        number //= base\n    # return result in string format\n    return res[::-1]",
        "test": "assert     change_base(5, 2) == '101', \"Wrong result for 5 in base 2.\""
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return 0.5 * a * h\n",
        "test": "assert     triangle_area(1, 5) == 2.5, 'Not correct'"
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n <= 3:\n        return n\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    return l[len(l) // 2]\n",
        "test": "assert     median([1,2,3,4,5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"aibohphobia\") == True, \"is_palindrome('aibohphobia')\""
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    assert n >= 0 and p >= 2\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result\n",
        "test": "assert "
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(str)) == str"
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    for l in text:\n        if l not in vowels:\n            result += l\n    return result\n",
        "test": "assert     remove_vowels('hello') == 'hll','remove_vowels: wrong result for \"hello\"'"
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1,2,3], 1) == False, \"1 wrong\""
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3, \"add(1, 2) should be 3\""
    },
    {
        "number": 54,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars('abc', 'cde') == False, 'incorrect'"
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # return a_n\n    # if n < 0:\n    #     return\n    # elif n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fib(n-1) + fib(n-2)\n    if n < 0:\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1, \"Fib(1) should be 1\""
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    openers_and_closers = {\n        \"<\": \">\",\n        \"[\": \"]\",\n        \"(\": \")\",\n    }\n    stack = []\n    for ch in brackets:\n        if ch in openers_and_closers:\n            stack.append(ch)\n        elif ch in openers_and_closers.values():\n            if not stack:\n                return False\n            elif stack[-1] == openers_and_closers[ch]:\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert not correct_bracketing(brackets = \"<<<<\")"
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n",
        "test": "assert "
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(7) == 7"
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    n_list = []\n    i = 1\n    while i <= n:\n        n_list.append(i)\n        i = i + 1\n    return sum(n_list)\n",
        "test": "assert     sum_to_n(4) == 10,        # 1 + 2 + 3 + 4"
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    count_open_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count_open_brackets += 1\n        elif count_open_brackets > 0:\n            count_open_brackets -= 1\n        else:\n            return False\n    return count_open_brackets == 0\n",
        "test": "assert not correct_bracketing(\"([]))\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return [i*j for i, j in zip(xs[1:], [k for k in range(1, len(xs))])]\n",
        "test": "assert     derivative([0, 3, 1, 2, 4]) == [3, 7, 2, 12, 24]"
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = s.lower()\n    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\") + s.count(\"y\")\n",
        "test": "assert     vowels_count(\"\") == 0, \"Empty string\""
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[shift - len(str(x)):]\n    # or\n    # if shift < len(str(x)):\n    #     return str(x)[-shift:] + str(x)[:-shift]\n    # else:\n    #     return str(x)[shift - len(str(x)):]\n",
        "test": "assert     circular_shift('1234', 4) == '4112'"
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    sums = 0\n    for i in range(len(s)):\n        if 'A' <= s[i] <= 'Z':\n            sums += ord(s[i])\n    return sums\n",
        "test": "assert     digitSum('abc') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    a = s.split(' ')\n    if a[0] == '0':\n        return 0\n    if n < int(a[0]):\n        return n\n    return n - int(a[0])\n",
        "test": "assert     fruit_distribution(\"5 apples and 3 oranges\", 7)     == 2"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        min_even = min(arr, key=lambda x: x % 2)\n        min_even_index = arr.index(min_even)\n        return [min_even, min_even_index]\n",
        "test": "assert     pluck([3, 2, 1, 4]) == [1, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    freq = {}\n    \n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    freq_max = max(freq.values())\n    freq_keys = [k for k,v in freq.items() if v == freq_max]\n    \n    if freq_max == 1:\n        return -1\n    else:\n        return max(freq_keys)\n",
        "test": "assert search([1,2,2,3,3,3,4,4,4,1,1,1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert     strange_sort_list([1]) == [1]"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    if a + b > c and b + c > a and c + a > b:\n        p = (a + b + c)/2\n        return round(math.sqrt(p*(p - a)*(p - b)*(p - c)),2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(1, 3, 2) == 1.73"
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if q == list(reversed(q)) and sum(q)<=w:\n        return True\n    else:\n        return False",
        "test": "assert     will_it_fly([1,1,1,1,1], 2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    length = len(arr)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if arr[i] == arr[j] and i!= j:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n",
        "test": "assert     smallest_change( [1, 2, 3, 4, 5, 3, 2, 1] ) == 3, \"Should be 3\""
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if len(lst1) > len(lst2):\n        lst = lst1\n        lst2 = lst2\n    elif len(lst2) > len(lst1):\n        lst = lst2\n    else:\n        lst = lst1\n    print(lst, lst2)\n    return [word for word in lst if len(word) < len(lst2)]\n",
        "test": "assert     total_match(['ba', 'bb', 'bc'], ['a', 'b', 'c']) "
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(8) == False, \"is_multiply_prime(8) should return False\""
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return False\n",
        "test": "assert     is_simple_power(10,2)==False"
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return a>0 and round(a**(1/3))**3==a\n",
        "test": "assert     iscube(27) == True"
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    count = 0\n    for i in range(len(num)):\n        try:\n            if int(num[i:i+2], 16) in primes:\n                count += 1\n        except:\n            return count\n    return count\n",
        "test": "assert     hex_key('') == 0"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n",
        "test": "assert     decimal_to_binary(128) == \"100101\""
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    hashmap = {}\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return True\n        else:\n            if s[i] not in hashmap:\n                hashmap[s[i]] = 1\n            else:\n                hashmap[s[i]] += 1\n    return False\n",
        "test": "assert     is_happy(\"d\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n    return [('A+' if x >= 4.0 else 'A' if x >= 3.7 else 'A-' if x >= 3.3 else 'B+' if x >= 3.0 else 'B' if x >= 2.7 else 'B-' if x >= 2.3 else 'C+' if x >= 2.0 else 'C' if x >= 1.7 else 'C-' if x >= 1.3 else 'D+' if x >= 1.0 else 'D' if x >= 0.7 else 'D-' if x >= 0.0 else 'E' if x >= 0 else 'F') for x in grades]\n",
        "test": "assert     numerical_letter_grade([4.0]) == [\"A+\"]"
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        i = 2\n        while i <= int(len(string) ** 0.5):\n            if int(len(string) ** 0.5) % i == 0:\n                return False\n            i += 1\n        return True\n",
        "test": "assert     prime_length('hello') == False, 'incorrect for string \"hello\"'"
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    count = 0\n    if n == 1:\n        count = 1\n    else:\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == \"1\" or str(i)[-1] == \"1\":\n                count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1)     == 1"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    ans = []\n    while N > 0:\n        ans.append(N % 2)\n        N = N // 2\n    \n    return \"\".join([str(num) for num in ans[::-1]])\n    \n",
        "test": "assert     solve(1) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    \n    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "test": "assert     add([2,5,1,4,8,9,6,7,9]) == [4,8,2,6,7,9]"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return''.join(sorted(s.split(' '), key=lambda x: ''.join(sorted(x))))\n",
        "test": "assert "
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    output = []\n    lst.sort(key=len, reverse=True)\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i]) - 1, -1, -1):\n                if lst[i][j] == x:\n                    output.append((i, j))\n    return output\n",
        "test": "assert     [(0,2), (0,1)] == get_row("
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # base case\n    if not array:\n        return array\n",
        "test": "assert     sort_array([5, 2, 3, 1, 2, 1, 1]) == [1, 1, 1, 2, 2, 2, 3]"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = s.lower()\n    new_s = ''\n    for i in s:\n        if i in abc:\n            new_s += abc[(abc.index(i) + 2 * 2) % 26]\n        else:\n            new_s += i\n    return new_s\n",
        "test": "assert     encrypt(\"\") == \"\""
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if lst == []:\n        return None\n    a = lst\n    b = []\n    for i in range(len(a)):\n        if i == 0:\n            b = a[1:]\n        else:\n            b = b[:i] + a[i+1:]\n    c = b\n    d = min(b)\n    for i in range(len(c)):\n        if c[i] == d:\n            return c[i]\n    return None\n",
        "test": "assert     next_smallest([7, 8, 10, 11]) == 8"
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    boredoms = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert     is_bored(\"I do not like you\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    \n  \n    if x == y or x == z or y == z:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n",
        "test": "assert     any_int(1,2,3) == False, 'False'"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = message.swapcase()\n    for letter in new_message:\n        if letter in 'aeiou':\n            new_message = new_message.replace(letter, alphabet[alphabet.find(letter) + 2])\n    return new_message\n",
        "test": "assert     encode('PROGRAMMING IS FUN!') == 'pROGRAMMING iS fUnn!'"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return 0\n",
        "test": "assert     skjkasdkd([11, 27, 23, 1, 8, 47, 31]) == [5, 3, 7, 2, 1, 1, 2]"
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if (type(key)!= str):\n                return False\n            elif (key.isupper()):\n                continue\n            else:\n                return False\n        return True\n        \ndef test_dict_case():\n    \"\"\"\n    Some test cases for check_dict_case\n    \"\"\"\n    print(\"Testing check_dict_case with the first dictionary:\")\n    first_dict = {\"a\":\"apple\", \"b\":\"banana\"}\n    print(check_dict_case(first_dict))\n",
        "test": "assert     check_dict_case({}) == False, 'empty dict'"
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # prime numbers are greater than 1\n    if n < 2:\n        return []\n",
        "test": "assert     count_up_to(5000) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return a*b\n",
        "test": "assert     multiply(5, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    count = 0\n    for idx in range(len(s)):\n        if idx % 2 == 0:\n            if s[idx].lower() in 'aeiou':\n                count += 1\n    return count\n",
        "test": "assert count_upper('aBc') == 1"
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return int(round(float(value)))\n",
        "test": "assert     closest_integer(14) == 14"
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return list(range(n, n * 2, n + 1))\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return s.split(\", \")\n",
        "test": "assert     \"This,is,a,test\".split(',') == ['This', 'is', 'a', 'test']"
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if x >= y:\n        return -1\n    else:\n        for i in range(y,x+1):\n            if i%2==0 and i<=x and i>=y:\n                return i\n        return -1\n",
        "test": "assert     choose_num(5, 1) == -1, \"Test 2 failed\""
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n > m:\n        return -1\n    else:\n        result = 0\n        for i in range(n, m+1):\n            result += i\n        return \"0b\" + str(bin(result//(m-n+1)))[2:]",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return sorted([n for n in x if not any([int(d) % 2 for d in str(n)])])\n",
        "test": "assert     unique_digits([6, 34, 24, 4]) == [4, 6, 24]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # if array is empty return empty array\n    if arr == []:\n        return []\n",
        "test": "assert     by_length(arr3) == ['Nine', 'Four', 'One', 'Two', 'Six', 'Three', 'Five', 'Seven', 'Eight']"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: write a function\n    fact=[]\n    n=int(n)\n    for i in range(1,n+1):\n        if i%2==0:\n            fact.append(i)\n        else:\n            s=0\n            for j in range(1,i+1):\n                s+=j\n            fact.append(s)\n    return fact\n",
        "test": "assert "
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    count_odd = 0\n    count_even = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return len([i for i in arr if i > 0 and sum([int(j) for j in str(i)]) > 0])\n",
        "test": "assert     count_nums([]) == 0, \"a\""
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    #Method-1:\n",
        "test": "assert     move_one_ball([5,4,3,2,1,6]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Your code here\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n    for j in range(len(lst2)):\n        if lst2[j] % 2 == 0:\n            return \"NO\"\n    if len(lst1) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert     exchange([1, 4, 3], [5, 7, 2]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # get the string into an array of lower case letters\n    # append each letter to a list and use a dictionary to count them\n    # return the dictionary with the most occurrences\n    if not test:\n        return {}\n    elif len(test) == 1:\n        return {test: 1}\n    else:\n        test = test.lower().split(' ')\n        letters = []\n        for i in test:\n            if i not in letters:\n                letters.append(i)\n        letter_count = {}\n        for i in letters:\n            letter_count[i] = test.count(i)\n        return letter_count\n",
        "test": "assert "
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    res=list(s)\n    c_freq=Counter(c)\n    for ele in s:\n        if ele in c_freq:\n            res.remove(ele)\n            c_freq[ele] -= 1\n            if c_freq[ele] == 0:\n                del c_freq[ele]\n    if len(c_freq) > 0:\n        return \"\".join(res), False\n    return \"\".join(res), True\n",
        "test": "assert     reverse_delete('abdbc','abc')==('abdbc',True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    output = []\n    for i in lst:\n        output.append(\"the number of odd elements \" + str(len([n for n in i if n % 2!= 0])) + \" in the \" + str(i) + \" of the \" + str(lst.index(i)) + \" input.\")\n    return output\n",
        "test": "assert     odd_count(['111', '121', '311', '122', '131', '231']) == [1, 2, 0, 1, 0, 2]"
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # time complexity: O(n^2)\n    # space complexity: O(1)\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        left = i\n        right = i + 1\n        while right < len(nums) + 1:\n            curr_sum = sum(nums[left:right])\n            min_sum = min(min_sum, curr_sum)\n            right += 1\n    return min_sum\n",
        "test": "assert     minSubArraySum([2, 3, 1, 4]) == 1, \"Wrong\""
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    m = math.floor(capacity)\n    dp = [[[0 for _ in range(m + 1)] for _ in range(cols)] for _ in range(rows)]\n    dp[0][0][m] = 1\n    for row in range(1, rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                for i in range(m + 1):\n                    dp[row][col][i] = dp[row - 1][col][i]\n            else:\n                dp[row][col][0] = dp[row - 1][col][0] + dp[row - 1][col][m]\n                for i in range(1, m + 1):\n                    dp[row][col][i] = dp[row - 1][col][i - 1] + dp[row - 1][col][i]\n    print(dp)\n    return dp[-1][-1][0]\n",
        "test": "assert     max_fill([[0, 1, 0], [0, 1, 0]], 2) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # initialize vars\n    sorted_arr = []\n    # loop over arr\n    for num in arr:\n        sorted_arr.append([num, count_ones(num)])\n    sorted_arr.sort(key=lambda x: x[0])\n    sorted_arr.sort(key=lambda x: x[1])\n    return [i[0] for i in sorted_arr]\n",
        "test": "assert     sort_array([2,3,5,7,11,13,17,19]) == [2,3,5,7,11,13,17,19]"
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    words = s.split()\n    result = []\n    for word in words:\n        if len(consonants(word)) == n:\n            result.append(word)\n    return result\n",
        "test": "assert     select_words('', 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    word = word.lower()\n    for i in range(1, len(word)):\n        if word[-i] in 'aeiou' and word[-i - 1] not in 'aeiou':\n            return word[-i]\n    return ''\n",
        "test": "assert     get_closest_vowel('ABCD') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if lst[0] == ')' or lst[-1] == '(':\n        return 'No'\n    lst = lst[1:-1]\n    while lst:\n        if '()' in lst:\n            lst.remove('()')\n            lst.remove('()')\n        else:\n            break\n    if len(lst) == 0:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['(', ')', ')', '(', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sorted(arr)[::-1][:k]\n",
        "test": "assert     maximum([10, 20, 30, 40], 1) == [40]"
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n    \n    ",
        "test": "assert "
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    s = 0\n    for i in range(k):\n        s += arr[i]\n    return s\n",
        "test": "assert     add_elements([0, 0, 0, 0], 0) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass",
        "test": "assert "
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     valid_date(\"03-03-2013\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # Your code here\n    return txt.split()\n",
        "test": "assert     split_words('a b c') == ['a', 'b', 'c']"
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    # Check if list is empty\n    if len(lst) == 0:\n        return False\n    \n    # Check if list has one element\n    if len(lst) == 1:\n        return True\n    \n    # Check if list is sorted\n    if lst == sorted(lst):\n        return True\n    \n    # If list is not sorted, return False\n    return False\n",
        "test": "assert     is_sorted([1, 3, 5, 6, 2, 4]) == False"
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    x = min(interval1[0], interval1[1])\n    y = max(interval1[0], interval1[1])\n    z = min(interval2[0], interval2[1])\n    t = max(interval2[0], interval2[1])\n    if x <= z and y >= t:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 2), (3, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = [1, 1, -1, -1]\n    res = 1\n    for x in arr:\n        res *= x if x in signs else 1\n    return sum(abs(x) for x in arr) * res\n",
        "test": "assert     prod_signs([]) is None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    res = []\n",
        "test": "assert     minPath([[1,4,5],[8,3,6],[7,2,5]], 3) == [7,8,9]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # create empty list\n    res = []\n    # add 1 to list and return\n    res.append(1)\n    # if n is 1\n    if n == 1:\n        return res\n    # iterate for number of steps\n    for x in range(1, n + 1):\n        # if x is even\n        if x % 2 == 0:\n            # then append to list and divide by 2\n            res.append(int(x / 2))\n        # else\n        else:\n            # then add all the elements to the list\n            res.append(res[x - 2] + res[x - 1] + res[x])\n    # return list\n    return res\n",
        "test": "assert     tri(5) == 18, \"tri(5) = \" + str(tri(5))"
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    x = 1\n    for i in str(n):\n        x = x * int(i)\n    return x\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # Checks for any valid sequence of brackets\n    def nested(brack):\n        brack = \"\".join(brack)\n        brack_list = []\n        for char in brack:\n            if char == \"[\":\n                brack_list.append(char)\n            elif char == \"]\":\n                brack_list.pop()\n            if len(brack_list) == 0:\n                return True\n        return False\n",
        "test": "assert     is_nested('[()()(()())()]') == True"
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    lst = [1,4,9]\n    result = sum(math.ceil(math.sqrt(x)) for x in lst)\n    return result\n",
        "test": "assert     sum_squares([1.2, 3.4]) == 32.9"
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"4\") == False, \"Wrong output for check_if_last_char_is_a_letter('4')\""
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        else:\n            return i-1\n    return -1",
        "test": "assert     can_arrange([1, 2, 3, 4, 5]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    try:\n        a = max(filter(lambda x: x < 0, lst))\n        b = min(filter(lambda x: x > 0, lst))\n        return a, b\n    except ValueError:\n        return None, None",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    try:\n        return max(a, b)\n    except:\n        return None\n",
        "test": "assert     compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    nums = [i for i in range(1, n // 2) if i % 2 == 0]\n    if len(nums)!= 4:\n        return False\n    return sum(nums) == n\n",
        "test": "assert     is_equal_to_sum_even(150) == False"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return 1 if n == 1 else n * special_factorial(n - 1)",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Your code goes here\n    if file_name.count('.') == 1:\n        dot_index = file_name.find('.')\n        if len(file_name[:dot_index])!= 0 and file_name[:dot_index][0].isalpha():\n            if file_name[dot_index + 1:].lower() in ['txt', 'dll', 'exe']:\n                return 'Yes'\n    return 'No'\n    ",
        "test": "assert     file_name_check(\"abc.exe\") == \"Yes\", \"contain a valid name\""
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    new_list = []\n    index = 0\n    sum = 0\n    while index < len(lst):\n        if (index % 4 == 0 and index % 3!= 0) or index % 4!= 0 and index % 3 == 0:\n            new_list.append(lst[index] ** 2)\n        index += 1\n    return sum(new_list)\n",
        "test": "assert     sum_squares([1, 3, 5, 7, 9]) == 63, 'incorrect for [1, 3, 5, 7, 9]'"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    sentence_list = sentence.split(\" \")\n    primes_list = get_primes_list(len(sentence_list))\n    result = \"\"\n",
        "test": "assert     words_in_sentence(\"I did not like this movie\") == \"movie did not I\""
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    x, n = int(x.split(\"/\")[0]), int(n.split(\"/\")[0])\n    if n == 1: return True\n    if x % n!= 0: return False\n    if n < 1: return False\n    return simplify(x//n, n)\n",
        "test": "assert     (simplify(\"2/4\", \"3/5\") == False)"
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # TODO\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n",
        "test": "assert     order_by_points([54, 96, 23]) == [23, 54, 96]"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\":\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return sum(i * i - i + 1 for i in range(1, n + 1) if i * i % 3 == 0)\n",
        "test": "assert     get_max_triples(2) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     bf(\"Earth\", \"Mercury\")         == ()"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    # TODO: Your code here\n    return None\n",
        "test": "assert     sorted_list_sum(['a', 'bb', 'c']) == ['a', 'bb', 'c']"
    },
    {
        "number": 150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return x if is_prime(n) else y\n",
        "test": "assert     x_or_y(7, 5, 7) == 7"
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    total = 0\n    for num in lst:\n        if num < 0 or num % 1!= 0:\n            continue\n        total += (num ** 2)\n    return total\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return [0 if game[i]==guess[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    pass\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"Slices\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"3rd example\""
    },
    {
        "number": 154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(123) == (1,2), \"Wrong output for even_odd_count(123)\""
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    def get_roman_numeral_equivalent(number):\n        result = ''\n        i = 0\n        while number > 0:\n            if number % 10 == 4:\n                result = result + 'x' * (number // 10)\n            elif number % 10 == 9:\n                result = result + 'ix'\n            elif number % 10 == 5:\n                result = result + 'v' + 'i' * (number // 10)\n            elif number % 10 == 9:\n                result = result + 'ix'\n            elif number % 10 == 6:\n                result = result + 'vi' + 'i' * (number // 10)\n            elif number % 10 == 8:\n                result = result + 'vii' + 'i' * (number // 10)\n            elif number % 10 == 1:\n                result = result + 'i' * (number // 10)\n            number = number // 10\n            i += 1\n        return result\n",
        "test": "assert "
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "test": "assert     right_angle_triangle(3, 4, 5.9) == False"
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # your code here\n    return max(words, key = lambda word: len(set(word)))\n",
        "test": "assert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'rainbow'"
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if remaining > need:\n        number += need\n        remaining -= need\n        return [number, remaining]\n    else:\n        number += remaining\n        remaining = 0\n        return [number, remaining]\n",
        "test": "assert     eat(0, 0, 10) == [0, 10]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     do_algebra(['*', '*', '*'], [1,2,3]) == 24"
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return ''.join([l.lower() if l.isalpha() else l.upper() if l.isalpha() else l for l in s])\n",
        "test": "assert     solve('12345') == '12345', 'case #3 incorrect'"
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf8'))\n    return m.hexdigest()\n",
        "test": "assert "
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    \n    lst = [i for i in range(a, b+1) if i % 2 == 0]\n    return lst\n",
        "test": "assert "
    }
]