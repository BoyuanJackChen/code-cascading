[
    {
        "number": 0,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if not isinstance(numbers, list) or not isinstance(threshold, float):\n        return False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2.1) == True",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    result = []\n    result_tmp = []\n    str_of_group = []\n    counter_of_open_parenthesis = 0\n    counter_of_close_parenthesis = 0\n    for i in paren_string:\n        if i == '(':\n            counter_of_open_parenthesis += 1\n            str_of_group.append(i)\n        elif i == ')':\n            counter_of_close_parenthesis += 1\n            str_of_group.append(i)\n    result_tmp.append(str_of_group)\n    for i in range(0, len(result_tmp)):\n        result.append(''.join(map(str, result_tmp[i])))\n    return result\n",
        "test": "assert     separate_paren_groups(\"(((()))())\") == [\"(((()))())\"]",
        "num_ids": 1625,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return 0.0\n",
        "test": "assert     truncate_number(10.0) == 0.0",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    for i in operations:\n        if i < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1,2,3]) == False",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(mean - x) for x in numbers) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([4]) == 0",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n",
        "test": "assert     intersperse([1], 1) == [1]",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    nested_pars = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                continue\n            stack.pop()\n            if len(stack) == 0:\n                nested_pars.append(len(stack))\n    return nested_pars\n",
        "test": "assert     parse_nested_parens('') == []",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert filter_by_substring([\"python\", \"ruby\", \"nodejs\", \"perl\", \"scala\"], \"scala\") == ['scala']",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    sum_ = 0\n    prod = 1\n    for number in numbers:\n        sum_ += number\n        prod *= number\n    return sum_, prod\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    max_list: List[int] = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[0:i+1]))\n    return max_list\n",
        "test": "assert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4], \"No rolling maximum for [1, 2, 3, 4]\"",
        "num_ids": 2151,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + make_palindrome(string[i:])\n",
        "test": "assert     is_palindrome(make_palindrome('aabaa')) == True",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "test": "assert     longest(['a', 'ab', 'abc', 'abcd']) == 'abcd'",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(12, 8) == 4",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    # Implement here - function body\n    result = []\n    for i in range(len(string) + 1):\n        result.append(string[0:i])\n    return result\n",
        "test": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n    \ndef remove_first_and_last(lst: list) -> list:\n    \"\"\" Return a new list with the first and last items removed.\n    >>> remove_first_and_last([1, 2, 3, 4])\n    [2, 3]\n    >>> remove_first_and_last([1, 2, 3, 1])\n    [2, 3]\n    >>> remove_first_and_last([])\n    []\n    >>> remove_first_and_last([\"a\", \"b\", \"c\", \"d\"])\n    ['b', 'c']\n    \"\"\"\n    return lst[1:-1]\n    \ndef common_end(a: list, b: list) -> bool:\n    \"\"\"Return True if a and b have the same first and last elements.\n    >>> common_end([1, 2, 3], [7, 3])\n    True\n    >>> common_end([7, 3], [1, 2, 3])\n    True\n    >>> common_end([1, 2, 3], [7, 3, 2])\n    False\n    >>> common_end([1, 2, 3], [1, 3])\n    True\n    \"\"\"\n    return a[0] == b[0] or a[-1] == b[-1]\n    \ndef reverse_pair(txt: str) -> str:\n    \"\"\" Return the reverse pair of the input string.\n    >>> reverse_pair(\"May the fourth be with you\")\n    'you with be fourth the May'\n    >>> reverse_pair(\"That's not my string\")\n    \"I'm not that's my string\"\n    \"\"\"\n    return \" \".join(reversed(txt.split()))\n    \ndef sum_pairs(nums: list, goal: int) -> list:\n    \"\"\"Return a pair of values from nums whose sum is equal to goal.\n    >>> sum_pairs([1, 2, 2, 10], 4)\n    [2, 2]\n    >>> sum_pairs([4, 2, 10, 5, 1], 5)\n    [4, 1]\n    >>> sum_pairs([4, 2, 10, 5, 1], 6)\n    []\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == goal:\n                return [nums[i], nums[j]]\n    return []\n    \ndef find_letter_indices(txt: str, letter: str) -> list:\n    \"\"\"Return a list of the indices of all occurrences of letter in txt.\n    >>> find_letter_indices(\"abracadabra\", \"a\")\n    [0, 5, 10]\n    >>> find_letter_indices(\"abracadabra\", \"r\")\n    [7]\n    >>> find_letter_indices(\"abracadabra\", \"b\")\n    [1, 6]\n    \"\"\"\n    return [i for i in range(len(txt)) if txt[i] == letter]\n    \ndef double_index(lst: list, index: int) -> list:\n    \"\"\"Return a new list with the item at index in lst doubled.\n    >>> double_index([0, 1, 2], 0)\n    [0, 0, 2]\n    >>> double_index([0, 1, 2], 1)\n    [0, 2, 2]\n    >>> double_index([0, 1, 2], 2)\n    [0, 1, 4]\n    \"\"\"\n    return [lst[i] * 2 if i == index else lst[i] for i in range(len(lst))]\n    \ndef middle_way(a: list, b: list) -> list:\n    \"\"\"Return a list that consists of all but the first and last items of a and b.\n    >>> middle_way([1, 2, 3], [4, 5, 6])\n    [2, 3, 4, 5]\n    >>> middle_way([7, 7, 7], [3, 8, 0])\n    [7, 7, 8, 0]\n    >>> middle_way([5, 2, 9], [1, 4, 5])\n    [5, 2, 4]\n    \"\"\"\n    return a[1:-1]",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    if not string:\n        return 0\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    parsed_music = music_string.split('|')\n    # you code here\n    return [len(note) for note in parsed_music]",
        "test": "assert     parse_music(\".| |. | |..|\") == [2, 1, 1, 2, 2, 1]",
        "num_ids": 3343,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    res = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            res += 1\n    return res\n",
        "test": "assert     how_many_times('substring','string') == 1",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    numbers = [int(number) for number in numbers.split()]\n    sorted_numbers = sorted(numbers)\n    return''.join([str(num) for num in sorted_numbers])\n",
        "test": "assert     sort_numbers(\"zero nine one two three four five six seven eight\") == \"zero nine one two three four five six seven eight\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return (min(numbers), max(numbers))\n",
        "test": "assert find_closest_elements([0, 0]) == (0, 0), 'Wrong answer'",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    assert len(numbers) >= 2\n    min_num, max_num = min(numbers), max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n",
        "test": "assert     rescale_to_unit([1, 1, 1]) == [0, 0, 0]",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "test": "assert     filter_integers([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"hello\") == 5",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return int((n ** 0.5))\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return []\n    else:\n        factors = []\n        n_dividing = 2\n        while n!= 1:\n            if n % n_dividing == 0:\n                factors.append(n_dividing)\n                n = n / n_dividing\n            else:\n                n_dividing += 1\n    return factors\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    \n    a = numbers[:]\n    numbers = []\n    \n    for i in a:\n        if i not in numbers:\n            numbers.append(i)\n    return numbers\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case('abc') == 'ABC'",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    result = \"\"\n    for i in strings:\n        result += i\n    return result\n",
        "test": "assert     concatenate(['A', 'B', 'C']) == 'ABC'",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"alice\", \"bob\", \"alice\"], \"a\") == [\"alice\", \"alice\"], \"case 1\"",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    positive = []\n    for elem in l:\n        if elem >= 0:\n            positive.append(elem)\n    return positive\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n//2 + 1):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(4) == False",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    if not xs or len(xs) % 2:\n        raise ValueError(f\"Invalid coefficients for polynomial. Coefficients must be a list of even number of terms.\")\n    xs.sort()\n    xs.reverse()\n    x0 = xs[0]\n    for i in range(2, len(xs), 2):\n        coeff = xs[i]\n        x0 = x0 / x0 - coeff / (x0 - coeff)\n    return x0\n",
        "test": "assert     poly([0], 1) == 0",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l[i]\n    return sorted(l)\n",
        "test": "assert     sort_third([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 2362,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "    return list(sorted(set(l)))\n",
        "test": "assert     unique([1,2,2,3,4]) == [1,2,3,4]",
        "num_ids": 1435,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for item in l:\n            if item > max:\n                max = item\n    return max\n",
        "test": "assert     max_element([4,6,2,4,4]) == 6",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    \n    return [l[i] for i in range(len(l)) if i % 2 == 0] + \\\n           sorted([l[i] for i in range(len(l)) if i % 2!= 0])\n    \nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))\n    print(sort_even([5, 6, 3, 4]))\n    print(sort_even([2, 4, 3]))\n    print(sort_even([5, 3, 2, 1]))\n    print(sort_even([7, 5, 3, 2, 1]))",
        "test": "assert     sort_even([]) == [], \"Wrong answer for sort_even([])\"",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # combine groups\n    return \"\".join(groups)\n",
        "test": "assert    \"HELLO WORLD\" == decode_cyclic(encode_cyclic(\"HELLO WORLD!\"))",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 5\n    b = 13\n    for i in range(3, n):\n        a, b = b, a + b\n        if is_prime(b):\n            break\n    return b\n",
        "test": "assert     prime_fib(1) == 2",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if len(l) < 3:\n        return False\n    l.sort()\n    if l[0] > 0:\n        return False\n    for i in range(len(l) - 1, 1, -1):\n        l_i = l[i]\n        if l_i < 0:\n            continue\n        for j in range(i - 1, 0, -1):\n            l_j = l[j]\n            if l_j < 0:\n                continue\n            l_k = -(l_i + l_j)\n            if l_k in l[:j]:\n                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, -6]) == False",
        "num_ids": 1508,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i < j:\n                if i % 2 == 0:\n                    if j % 2 == 1:\n                        count += 1\n                else:\n                    if j % 2 == 0:\n                        count += 1\n    return count\n",
        "test": "assert     car_race_collision(1) == 0, \"incorrect\"",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    l.sort()\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]:\n                return False\n            if l[i]!= l[i+1] and l[i]+l[i+1] == 0:\n                return True\n            if l[i]!= l[i+1] and l[i]+l[i+1]!= 0:\n                return False\n        return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3]) == False",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x%base)\n",
        "test": "assert     change_base(8, 2) == '1000'",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return (a * h)/2\n",
        "test": "assert     triangle_area(1, 1) == 0.5",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib1 = 0\n        fib2 = 2\n        result = 0\n        for i in range(3, n+1):\n            result = fib1 + fib2 + fib3 + fib4(n-4)\n            fib1 = fib2\n            fib2 = result\n        return result\n",
        "test": "assert     0 == fib4(0)",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('abbbba') == True, 'abbbba is a palindrome'",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    modulo = 0\n    binary = \"{0:b}\".format(n)\n    for i in binary:\n        modulo = (2*modulo + int(i))%p\n    return modulo\n",
        "test": "assert     modp(2,3) == 2",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in text:\n        if char not in vowels:\n            new_string += char\n    return new_string\n",
        "test": "assert     remove_vowels(\"hello world\") == 'hll wrld', 'incorrect result for \"hello world\"'",
        "num_ids": 1257,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4], 0) == False",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return x + y\n",
        "test": "assert     add(3,2) == 5",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    d = {}\n    for char in s0:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    for char in s1:\n        if char in d:\n            d[char] -= 1\n        else:\n            return False\n    for k, v in d.items():\n        if v!= 0:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"bob\", \"bob\") == True",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    return 1 if n <= 1 else fib(n-1) + fib(n-2)\n",
        "test": "assert ",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if len(bracket_stack) == 0:\n                return False\n            if bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            else:\n                return False\n    if len(bracket_stack)!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     correct_bracketing('<><') == False, 'ERROR'",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    if len(l) <= 1:\n        return True\n    if l[0] <= l[1]:\n        if l[0] < l[-1]:\n            return True\n        else:\n            return False\n    if l[0] > l[1]:\n        if l[0] > l[-1]:\n            return True\n        else:\n            return False\n",
        "test": "assert     monotonic([1,2,3]) == True",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    # Set the variables\n    l1_set = set(l1)\n    l2_set = set(l2)\n    # Make a set of the common elements\n    common_set = l1_set.intersection(l2_set)\n    # And return it\n    return sorted(common_set)\n",
        "test": "assert [] == common([], [])",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(3) == 3",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    return n*(n+1)//2\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        elif bracket == ')':\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    return False\n",
        "test": "assert     correct_bracketing(\"()\")",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    return [i*j for i,j in zip(xs[1:],range(1, len(xs)))]\n",
        "test": "assert ",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    assert n >= 0\n    if n == 1 or n == 2 or n == 3:\n        return 0\n    fibfib_arr = [0, 1, 1]\n    i = 3\n    while i <= n:\n        fibfib_arr.append(fibfib_arr[i - 3] + fibfib_arr[i - 2] + fibfib_arr[i - 1])\n        i += 1\n    return fibfib_arr[n]\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"year\") == 2, \"Wrong answer for 'year'\"",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert not ('0' == circular_shift('1', 1))",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n",
        "test": "assert     digitSum(\"ABz\") == 123",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    # check the edge case if the input is empty\n    if s == \"\":\n        return 0\n    \n    # check the edge case if the input is empty\n    if n == 0:\n        return 0\n    \n    # convert the string into a list of fruits and the total number of fruits\n    s_list = s.split()\n    total_fruits = int(s_list[0]) + int(s_list[1])\n    \n    # if the total number of fruits is not equal to the input number, return the total number of fruits\n    if total_fruits!= n:\n        return total_fruits\n    \n    # if the total number of fruits is equal to the input number, \n    # return the number of the mango fruits. The mango fruits are the number of fruits left in the basket minus the total number of the fruits.\n    return n - int(s_list[0]) - int(s_list[1])\n",
        "test": "assert     fruit_distribution(\"0 1 2\", 3) == 1",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    dct = {}\n    max_value = -1\n    for i in lst:\n        if i in dct:\n            dct[i] += 1\n        else:\n            dct[i] = 1\n        if max_value < dct[i]:\n            max_value = dct[i]\n    for key, val in dct.items():\n        if val == max_value:\n            return key\n",
        "test": "assert     search([1,1,1,1]) == 1",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return sorted(lst, key=lambda x: x if lst.index(x)==0 else lst[lst.index(x)-1])",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0] * sides[1] / 2), 2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(1, 3, 4) == -1",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    s = sum(q)\n    if s <= w and s == sum(q[::-1]):\n        return True\n    else:\n        return False",
        "test": "assert     will_it_fly([1, 2, 1], 3) == False",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[~i]:\n            changes += 1\n    return changes\n",
        "test": "assert     smallest_change([1,2,3]) == 1",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    list1 = sorted(lst1)\n    list2 = sorted(lst2)\n    if len(list1) == len(list2):\n        return list1\n    elif len(list1) > len(list2):\n        for i in list2:\n            for j in list1:\n                if len(i) < len(j):\n                    list1.remove(j)\n                    break\n        return list1\n    else:\n        for i in list1:\n            for j in list2:\n                if len(i) < len(j):\n                    list2.remove(j)\n                    break\n        return list2",
        "test": "assert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in primes:\n        if a % p == 0:\n            return True\n        else:\n            return False\n",
        "test": "assert     is_multiply_prime(65) == False",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return x % n == 0",
        "test": "assert     is_simple_power(7, 2) == False",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return a**3>0\n    \n    \ndef removechar(s,c):\n    '''\n    Write a function that removes all occurences of a character c from the string s.\n    Examples:\n    removechar('hello','h') ==> 'ello'\n    removechar('hello','l') ==> 'hell'\n    removechar('hello','x') ==> 'hello'\n    '''\n    return s.replace(c,'')\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if num == \"\":\n        return 0\n    digits = list(num)\n    return sum([1 for n in digits if n in [\"1\", \"3\", \"7\", \"B\", \"D\"]])",
        "test": "assert hex_key(\"\") == 0",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    # Your code here\n    return 'db' + str(bin(decimal))[2:].zfill(36) + 'db'\n",
        "test": "assert     decimal_to_binary(5) == 'db101'",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        i = 0\n        j = 0\n        while j < len(s):\n            if i == len(s) - 1:\n                return True\n            if s[i] == s[i+1]:\n                if i + 1 == len(s) - 1:\n                    return True\n                if j == len(s) - 1:\n                    return True\n                i += 2\n            else:\n                i += 1\n            j += 1\n        return False\n",
        "test": "assert     not is_happy(\"aa\")",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return [ \n        \"A+\" if i>=4.0 else\n        \"A\" if i>=3.7 else\n        \"A-\" if i>=3.3 else\n        \"B+\" if i>=3.0 else\n        \"B\" if i>=2.7 else\n        \"B-\" if i>=2.3 else\n        \"C+\" if i>=2.0 else\n        \"C\" if i>=1.7 else\n        \"C-\" if i>=1.3 else\n        \"D+\" if i>=1.0 else\n        \"D\" if i>=0.7 else\n        \"D-\" if i>=0.0 else\n        \"E\" if i>=0.0 else \"Error\"\n    for i in grades]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) ",
        "num_ids": 4550,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return len(string) in range(1,101) and not any([string.count(letter) for letter in string])\n",
        "test": "assert     prime_length('not prime') is False",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    if n == 1:\n        return 1\n    return sum([\n        starts_one_ends(i) * (n - i - 1)\n        for i in range(n)\n    ])\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    if (0 <= N <= 10000):\n        binary_number = bin(N).replace(\"0b\", \"\")\n        return str(binary_number)\n    else:\n        return \"0\"\n",
        "test": "assert     solve(1) == '1'",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    if len(lst)%2 == 0:\n        return lst[::2]\n    else:\n        return lst[1::2]\n",
        "test": "assert     add([]) == [] ",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    s = s.replace(' ', '')\n    s = sorted(s)\n    s = ''.join(s)\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    return s\n",
        "test": "assert     anti_shuffle(\"hello\") == \"ehllo\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    for i in range(len(result)):\n        result[i] = (result[i][0], result[i][1])\n    for i in range(len(result)):\n        result[i] = (result[i][0], len(lst[result[i][0]]) - result[i][1] - 1)\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result",
        "test": "assert     get_row([[1, 2, 3, 4], [5, 6], [7, 8]], 1) == [(0, 3)]",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    sorted_array = array.copy()\n    for i in range(1, len(sorted_array)):\n        j = i\n        while j > 0 and (sorted_array[j] < sorted_array[j - 1]):\n            sorted_array[j], sorted_array[j - 1] = sorted_array[j - 1], sorted_array[j]\n            j -= 1\n    return sorted_array\n",
        "test": "assert     sort_array([2, 2, 1, 1]) == [1, 1, 2, 2]",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return \"\".join([chr((ord(c)-ord('a')+2)%26+ord('a')) for c in s])\n",
        "test": "assert     encrypt(\"abcd\")!= \"abdc\"",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    smallest = None\n    for i in range(len(lst) - 1):\n        if smallest == None or lst[i] < smallest:\n            smallest = lst[i]\n    \n    for i in range(len(lst)):\n        if smallest == lst[i]:\n            lst.remove(smallest)\n            break\n    \n    if len(lst) == 0:\n        return None\n    \n    smallest = None\n    for i in range(len(lst) - 1):\n        if smallest == None or lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
        "test": "assert     (next_smallest([3, 1, 2, 3, 3, 4, 5]) == 2)",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    boredom = 0\n    for c in S:\n        if c == \"I\":\n            boredom += 1\n    return boredom\n",
        "test": "assert     is_bored(\"I really enjoy my job\") == 1",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    \n    \n    if y == z or z == x:\n        return True\n    elif x == z or z == y:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     any_int(2,0,1) == False, \"Wrong output\"",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    \n    new_string = ''\n    for char in message:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        elif char.isspace():\n            new_string +=''\n        else:\n            new_string += char\n    return new_string\n        \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it into a message\n    that swaps case of all letters, replacing all vowels in the message with\n    the letter that appears 2 places behind that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TEST'\n    >>> decode('This is a message')\n    'THIS IS A MESSAGE'\n    \"\"\"\n    \n    new_string = ''\n    for char in message:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        elif char.isspace():\n            new_string +=''\n        else:\n            new_string += char\n    return new_strin",
        "test": "assert     'G' == encode('g')",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # TODO: your code here\n    # raise NotImplemented\n    pass\n",
        "test": "assert     skjkasdkd([5, 6, 14, 9, 10]) == 18, \"5 and 6 are the largest prime values in the list\"",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if len(dict) > 0:\n        # check if all keys are strings in lower case\n        if all(key.isalpha() and key.islower() for key in dict):\n            return True\n        # check if all keys are strings in upper case\n        elif all(key.isalpha() and key.isupper() for key in dict):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_dict_case({\"a\":\"A\", \"b\":\"B\"}) == True, \"Different case dictionary, result should be True\"",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    \n    prime_count = 0\n    result = []\n    for i in range(n):\n        if is_prime(i):\n            prime_count += 1\n            result.append(i)\n    \n    return result\n",
        "test": "assert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
        "num_ids": 1946,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    #Answer\n    return a*b\n",
        "test": "assert multiply(3, 3) == 9",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    \n    # We will use string slicing\n    \n    # We know the first character of the string is uppercase\n    s1 = s[1::2]\n    \n    # We will loop over the string and check if the characters are uppercase\n    # If they are, we will increment our counter by 1\n    counter = 0\n    for i in s1:\n        if i.isupper():\n            counter += 1\n    return counter\n",
        "test": "assert     count_upper(\"bcdefghijklmnop\") == 0",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return round(float(value)) if float(value).is_integer() else int(round(float(value)))\n",
        "test": "assert     closest_integer(1) == 1",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    pile = [n]\n    while n > 0:\n        n = n - 2\n        if n > 0:\n            pile.append(n)\n        else:\n            break\n    return pile\n",
        "test": "assert     make_a_pile(1) == [1], 'Error'",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    \n    return s.replace(\" \", \"\").split(\",\")\n",
        "test": "assert     words_string('this, is, a, test') == ['this', 'is', 'a', 'test']",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    \n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if y - x + 1 == i:\n                return i\n            else:\n                return -1\n",
        "test": "assert     choose_num(3, 17) == -1",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    pass\n",
        "test": "assert     rounded_avg(2, 6) == '0b110', '2, 6: expected \"0b110\", received \"{}\"'.format(rounded_avg(2, 6))",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    #using set for faster calculation\n    return sorted(set([i for i in x if i%2!= 0]))\n",
        "test": "assert     unique_digits([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    arr.sort()\n    arr.reverse()\n    str_arr = []\n    digit_1 = 1\n    digit_2 = 2\n    digit_3 = 3\n    digit_4 = 4\n    digit_5 = 5\n    digit_6 = 6\n    digit_7 = 7\n    digit_8 = 8\n    digit_9 = 9\n    for i in range(len(arr)):\n        if arr[i] == digit_1:\n            str_arr.append('One')\n        elif arr[i] == digit_2:\n            str_arr.append('Two')\n        elif arr[i] == digit_3:\n            str_arr.append('Three')\n        elif arr[i] == digit_4:\n            str_arr.append('Four')\n        elif arr[i] == digit_5:\n            str_arr.append('Five')\n        elif arr[i] == digit_6:\n            str_arr.append('Six')\n        elif arr[i] == digit_7:\n            str_arr.append('Seven')\n        elif arr[i] == digit_8:\n            str_arr.append('Eight')\n        elif arr[i] == digit_9:\n            str_arr.append('Nine')\n    return str_arr\n",
        "test": "assert     by_length([1, 5, 4, 3, 2, 9]) == ['Nine', 'Five', 'Four', 'Three', 'Two', 'One']",
        "num_ids": 2056,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    # list_result = []\n    # for i in range(1, n+1):\n    #     if i % 2 == 0:\n    #         list_result.append(i)\n    #     else:\n    #         list_result.append(sum(range(1, i+1)))\n    # return list_result\n",
        "test": "assert ",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "    return (n // 2 - n % 2, n // 2) if n % 2 == 0 else (n // 2, n // 2 + 1)",
        "test": "assert     even_odd_palindrome(2) == (1, 1)",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return len([i for i in arr if sum(map(int, list(str(abs(i))))) > 0])\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    if arr is None or len(arr) == 0:\n        return True\n    # Base Case\n    if len(arr) == 1:\n        return True\n    # We know that arr[i] > arr[i+1] if there is more than one element in the array\n    # Else arr[i] == arr[i+1] if there is only one element in the array.\n    # So if we know that arr[i] > arr[i+1] and arr[i+1] > arr[i+2] then we can\n    # say that we can do right shift operation at most 2 times and we can get\n    # the sorted array.\n    i = 0\n    while i < len(arr) - 1 and arr[i] > arr[i+1]:\n        i += 1\n    if i == len(arr) - 1:\n        return True\n    # Recursively check if we can get the sorted array by doing right shift\n    # operation at most 2 times.\n    return move_one_ball(arr[0:i+1]) and move_one_ball(arr[i+1:])\n",
        "test": "assert     move_one_ball([1,2,3]) == True",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    # TODO: Implement the solution\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    if len(lst1) == len(lst2):\n        if set(lst2) == set(lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for x in lst2:\n            if x % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert     exchange([1, 3, 5], [2, 4, 6]) == \"NO\"",
        "num_ids": 1708,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    hist = {}\n    for i in test:\n        if i not in hist.keys():\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    return hist\n",
        "test": "assert     histogram(\"a\") ==    {'a': 1}",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if len(c)==0:\n        return (s,True)\n    s1=s.replace(c, \"\")\n    r=s1[::-1]\n    if r==s1:\n        return (s1,True)\n    return (s,False)\n",
        "test": "assert     reverse_delete('a','a') == ('',True)",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    output = []\n    for item in lst:\n        total_odd = 0\n        for digit in item:\n            if int(digit) % 2!= 0:\n                total_odd += 1\n        output.append(f\"the number of odd elements {total_odd}n the str{total_odd}ng {total_odd} of the {total_odd}nput.\")\n    return output\n",
        "test": "assert     odd_count([\"10\", \"55\", \"1212\", \"1111\"]) == [1, 2, 1, 4]",
        "num_ids": 2138,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    sum = nums[0]\n    for i in range(1,len(nums)):\n        sum += nums[i]\n        nums[i] = sum\n    return min(nums)\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    return sum(sum(row) for row in grid)\n",
        "test": "assert     max_fill([[0, 1], [1, 0]], 1) == 2",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))",
        "test": "assert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,4,8,3,5,6,7]",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    l = s.split()\n    res = []\n    for word in l:\n        if len(word) == n and word.count('a')+word.count('e')+word.count('i')+word.count('o')+word.count('u') == n:\n            res.append(word)\n    return res\n",
        "test": "assert     select_words(\"\"    , 6) == []",
        "num_ids": 1408,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    consonants = []\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            consonants.append(word[i])\n        else:\n            if word[i - 1] in vowels:\n                continue\n            elif word[i + 1] in vowels:\n                continue\n            else:\n                return word[i]\n    return ''\n",
        "test": "assert     get_closest_vowel(\"kkwokw\")     == \"o\"",
        "num_ids": 2456,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if len(lst) % 2!= 0:\n        return 'No'\n    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     match_parens(['(()','()()']) == 'No'",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return sorted(arr)[-k:]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    \n    sum_odd_ele = 0\n    for i in lst[1::2]:\n        sum_odd_ele += i\n    return sum_odd_ele\n",
        "test": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    # Return the sum of the elements of arr where the sum of elements is\n    # less than or equal to 2 digits.\n    nums = arr[:k]\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert     add_elements([9, 9, 9], 2) == 18",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    result = []\n    while n!= 1:\n        result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return result + [1]\n",
        "test": "assert     [1] == get_odd_collatz(1)",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    date = date.split('-')\n    if not date:\n        return False\n    try:\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 32 and day > 0:\n            return True\n        elif month in [4, 6, 9, 11] and day < 31 and day > 0:\n            return True\n        elif month == 2 and day < 29 and day > 0:\n            return True\n    except:\n        return False\n    return False\n",
        "test": "assert     valid_date('12-32-2020') == False",
        "num_ids": 1561,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return [i for i in txt.split()]\n",
        "test": "assert     split_words('hi there mister') == ['hi', 'there','mister']",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    lst.sort()\n    if lst == sorted(lst):\n        return True\n    return False\n",
        "test": "assert     is_sorted([1, 2, 3]) == True",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    # Your code here\n    #print(interval1, interval2)\n    if interval1 == interval2:\n        return \"YES\"\n    \n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[1] < interval2[1] and interval1[0] > interval2[0]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    \n    return \"NO\"\n    # pass\n",
        "test": "assert     intersection([(1, 3), (2, 4)], [(3, 6), (5, 7)]) == \"NO\"",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if not arr:\n        return None\n",
        "test": "assert     prod_signs([]) == None, \"Empty array\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    path = [0] * k\n    lst_path = []\n    index = 0\n",
        "test": "assert     minPath(",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    else:\n        fib = [1, 3]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2] + fib[i])\n        return fib\n",
        "test": "assert     tri(1) == [1]",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2 == 0:\n            return 0\n        product *= int(d)\n    return product\n",
        "test": "assert digits(1) == 1",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    \n    if len(string) <= 2:\n        return False\n    \n    left = 0\n    right = 0\n    nested_counter = 0\n    \n    for bracket in string:\n        \n        if bracket == \"[\":\n            left += 1\n        \n        elif bracket == \"]\":\n            right += 1\n            \n        else:\n            return False\n            \n        if right < left:\n            nested_counter += 1\n        \n        if nested_counter > 1:\n            return True\n        \n    return False\n    \nprint(is_nested('[][]') == False)\n",
        "test": "assert     is_nested('[[]') == True",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return sum([round(x**2) for x in lst])\n",
        "test": "assert     sum_squares([1, 2, 3]) == (1**2 + 2**2 + 3**2)",
        "num_ids": 1573,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalnum()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"hello!\") == False, \"Failed\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    # keep track of where we are in the array\n    n = len(arr)\n    index = n-1\n    prev = -1\n    # keep track of the index where an element is not less than or equal to the element immediately before it\n    index_not_greater_or_equal = -1\n    # while we haven't found an index where the element is less than or equal to the element before it\n    while index_not_greater_or_equal < 0:\n        # if the element is greater than the element before it\n        if arr[index] > prev:\n            # keep track of where the element is not less than or equal to the element before it\n            index_not_greater_or_equal = index\n        # decrement index\n        index -= 1\n        # keep track of the previous element\n        prev = arr[index]\n    return index_not_greater_or_equal\n",
        "test": "assert     can_arrange([1,3,5,7,8]) == 4, \"error\"",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    negative = []\n    positive = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    if negative:\n        return (max(negative), min(positive))\n    elif positive:\n        return (max(positive), min(positive))\n    else:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if type(a) == type(b):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif type(a) == float or type(b) == float:\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "test": "assert     (compare_one(2, 1) == 2)",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return True if sum([i for i in range(1, n+1) if i % 2 == 0]) == 4 else False\n",
        "test": "assert     is_equal_to_sum_even(1) == False",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    factorial = 1\n    for num in range(n, 0, -1):\n        factorial *= num\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"   \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    return text\n",
        "test": "assert     fix_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    if file_name.count(\".\") == 1 and file_name.split(\".\")[0]!= \"\" and file_name[0].isalpha():\n        if len(file_name.split(\".\")[1]) in range(1,4):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "test": "assert     file_name_check('0file1.txt') == 'No'",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if not lst:\n        return 0\n    elif len(lst) == 1:\n        return lst[0] ** 2\n    elif len(lst) == 2:\n        return lst[0] ** 2 + lst[1] ** 2\n    else:\n        sum_squares = 0\n        for i in range(len(lst)):\n            if i % 3 == 0 and i % 4!= 0:\n                sum_squares += lst[i] ** 2\n            elif i % 4 == 0 and i % 3!= 0:\n                sum_squares += lst[i] ** 3\n            else:\n                pass\n        return sum_squares\n",
        "test": "assert     sum_squares([3, 4, 5, 6]) == 36",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    return''.join([word for word in sentence.split() if is_prime(len(word))])\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    \n    x = x.replace('/', '')\n    n = n.replace('/', '')\n    x = int(x)\n    n = int(n)\n    return x % n == 0\n",
        "test": "assert     (simplify(\"1/3\", \"2/3\") is False)",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in list(str(x))]))\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n    \nprint(specialFilter([15, -73, 14, -15]))\n",
        "test": "assert     specialFilter([11, 10, 3, 4]) == 1",
        "num_ids": 2030,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return ((n * (n + 1) // 2) - ((n - 1) * (n - 2) // 2)) // 3\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        result = []\n        for i in range(planet1_index + 1, planet2_index):\n            result.append(planets[i])\n        return tuple(result)\n    else:\n        return ()\n",
        "test": "assert     bf('Earth', 'Mercury') == ()",
        "num_ids": 1742,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    # Code goes here\n    return sorted(list(set(lst)), key = lambda x: (-len(x), x))\n",
        "test": "assert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"], \"Incorrect output for the list ['a', 'b', 'c', 'd', 'e']\"",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    \n    if n % 2 == 1:\n        return x\n    else:\n        return y\n",
        "test": "assert     x_or_y(2, 2, 2) == 2",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return sum([i*i for i in lst if i % 2 == 1])\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    score, guess = list(game), list(guess)\n    return [0 if guess[i] == score[i] else abs(guess[i] - score[i]) for i in range(len(score))]\n",
        "test": "assert     compare([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [0,0,0,0,0,0,0], \"Compare Error\"",
        "num_ids": 3309,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    # your code here\n    return class_name + '.' + extensions[0]\n",
        "test": "assert     Strongest_Extension('Cats', ['Catz', 'Caz', 'CatI']) == 'Cats.Catz'",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    pattern_arr = []\n    pattern_arr.extend(a)\n    pattern_arr.extend(a[::-1])\n    result = False\n    for x in pattern_arr:\n        if b.find(x)!= -1:\n            result = True\n            break\n    return result\n",
        "test": "assert     cycpattern_check('xyz', 'abcd') == False",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    even, odd = 0, 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n",
        "test": "assert     (even_odd_count(3), (1, 2))",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    mini_roman_dict = {\n        1000 :'m', 900 : 'cm', 500 : 'd', 400 : 'cd', 100 : 'c', 90 : 'xc',\n        50 : 'l', 40 : 'xc', 10 : 'x', 9 : 'ix', 5 : 'v', 4 : 'iv', 1 : 'i'\n    }\n    roman_numeral = \"\"\n    for num in mini_roman_dict:\n        if number == 0:\n            break\n        count = number // num\n        roman_numeral += count * mini_roman_dict[num]\n        number -= (count * num)\n    return roman_numeral.lower()",
        "test": "assert     int_to_mini_roman(1) == 'i'",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    #raise NotImplementedError\n    if not (a + b > c and a + c > b and b + c > a):\n        return False\n    if a == b or a == c or b == c:\n        return True\n    if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1,1,3) == False",
        "num_ids": 2383,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    unique = 0\n    max_word = None\n    for word in words:\n        if len(set(word)) > unique:\n            unique = len(set(word))\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"clown\", \"clown\", \"clown\"]) == \"clown\"",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if remaining == 0:\n        return [number,0]\n    elif number < need:\n        return [number,remaining]\n    else:\n        return [number-need,remaining-need]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    result = 0\n    for i in range(0, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result\n",
        "test": "assert     do_algebra([\"+\",\"-\",\"+\"], [3,4,5,2]) == 4",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return ''.join([i if i.isalpha() else i.upper() if i.isalpha() == False else i.lower() for i in s])\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    if len(text) == 0:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "test": "assert     string_to_md5(\"\") is None",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    ret = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret",
        "test": "assert     generate_integers(2, 5) == [2, 4]",
        "num_ids": 673,
        "indeed": false
    }
]