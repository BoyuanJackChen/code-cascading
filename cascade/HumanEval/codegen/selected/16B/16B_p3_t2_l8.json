[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i, num_1 in enumerate(numbers):\n        for num_2 in numbers[i + 1:]:\n            if abs(num_1 - num_2) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 5, 5], 0) == False",
        "num_ids": 246
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    index = 0\n    result = []\n    while index < len(paren_string):\n        current_paren_group = []\n        current_paren_index = index\n        while index < len(paren_string) and paren_string[index] == \"(\":\n            current_paren_group.append(paren_string[index])\n            index += 1\n        if current_paren_group:\n            while index < len(paren_string) and paren_string[index] == \")\":\n                current_paren_group.append(paren_string[index])\n                index += 1\n            if current_paren_group:\n                result.append(''.join(current_paren_group))\n    return result\n",
        "test": "assert     separate_paren_groups(\"()\") == [\"()\"]",
        "num_ids": 563
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    number_str = str(number)\n    decimals = len(number_str.split(\".\")[-1])\n    decimals = 1/(10**decimals)\n    number = number % (1+decimals)\n    number = number - (number % 1)\n    return number\n",
        "test": "assert     truncate_number(0) == 0",
        "num_ids": 183
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(operations) == 0:\n        return False\n    for i in range(0, len(operations)):\n        if operations[i] < 0 and i == 0:\n            return True\n        if operations[i] < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 234
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([-1, 2, 4]) == 1.0",
        "num_ids": 215
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([1, 2, 3], 10) == [1, 10, 2, 10, 3, 10]",
        "num_ids": 268
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Get all the groups from the string\n    groups = paren_string.split(' ')\n",
        "test": "assert     parse_nested_parens('((()))') == [3, 2, 1, 1, 1]",
        "num_ids": 430
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    filter_list = []\n    for item in strings:\n        if substring in item:\n            filter_list.append(item)\n    return filter_list\n",
        "test": "assert     filter_by_substring(['aab', 'aac', 'abd'], 'ab') == ['aab', 'abd']",
        "num_ids": 308
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 193
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 202
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return string + string[-1::-1][1:]\n",
        "test": "assert ",
        "num_ids": 153
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # result = ''\n    # for i in range(len(a)):\n    #     result += str(int(a[i]) ^ int(b[i]))\n    # return result\n",
        "test": "assert     string_xor('101010', '101110') == '101010'",
        "num_ids": 194
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if not strings:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n",
        "test": "assert     longest([\"dog\", \"cat\", \"bird\", \"horse\"]) == \"horse\"",
        "num_ids": 418
    },
    {
        "number": 13,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1",
        "num_ids": 106
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]",
        "num_ids": 230
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "test": "assert         string_sequence(0) == \"0\"",
        "num_ids": 141
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 246
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     parse_music('oo|...|o|..|o|.') == [2, 2, 4, 2, 1]",
        "num_ids": 483
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    count = 0\n    start = 0\n    while True:\n        try:\n            start = string.index(substring, start) + 1\n            count += 1\n        except:\n            break\n    return count\n",
        "test": "assert     how_many_times('aa', 'aa') == 1",
        "num_ids": 200
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return''.join(str(num) for num in nums)\n",
        "test": "assert sort_numbers(\"three five eight one seven two eleven four\") == \"01245679\"",
        "num_ids": 288
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return min(numbers), max(numbers)\n",
        "test": "assert     (find_closest_elements([1, 1, 2, 3, 5, 7]) == (1, 7)), \"error\"",
        "num_ids": 418
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    numbers.sort()\n    min_number = numbers[0]\n    max_number = numbers[len(numbers) - 1]\n    for i in range(len(numbers)):\n        numbers[i] -= min_number\n        numbers[i] /= (max_number - min_number)\n    return numbers\n",
        "test": "assert     rescale_to_unit([1,2,3]) == [0,0.5,1]",
        "num_ids": 227
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 295
    },
    {
        "number": 23,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen(\"hello world\") == 11",
        "num_ids": 79
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    assert n > 0\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert     largest_divisor(6) == 3",
        "num_ids": 106
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    assert n > 1, \"Number should be greater than 1\"\n    lst = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            lst.append(i)\n            n //= i\n    if n > 1:\n        lst.append(n)\n    return lst\n",
        "test": "assert     [2,3] == factorize(6)",
        "num_ids": 421
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # return sorted(list(set(numbers)))\n    l = 0\n    n = len(numbers)\n    for k in range(n):\n        if numbers[k] not in numbers[l:]:\n            l += 1\n            numbers[l] = numbers[k]\n    return numbers[:l + 1]\n",
        "test": "assert     remove_duplicates([1, 1, 1, 1, 1, 1]) == [1]",
        "num_ids": 381
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return \"\".join([chr((ord(char) + 32) % (65, 97)) if char.islower() else chr((ord(char) + 32) % (97, 65)) for char in string])\n",
        "test": "assert     (flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 172
    },
    {
        "number": 28,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = ''\n    for i in strings:\n        result += i\n    return result\n",
        "test": "assert     concatenate([\"abc\", \"def\"]) == \"abcdef\"",
        "num_ids": 241
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    filtered_list = []\n    for i in range(len(strings)):\n        if strings[i].startswith(prefix):\n            filtered_list.append(strings[i])\n    return filtered_list\n",
        "test": "assert     filter_by_prefix(['python', 'java', 'c#'], 'py') == ['python']",
        "num_ids": 208
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [item for item in l if item > 0]\n",
        "test": "assert     get_positive([-3, -2, 1, 2, 3]) == [1, 2, 3]",
        "num_ids": 217
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(10) == False",
        "num_ids": 281
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"Only int or float values allowed\")\n    if any(x == 0 for x in xs):\n        return 0\n    xs = [x / xs[-1] for x in xs]\n    if len(xs) % 2!= 0 or any(x == 0 for x in xs):\n        raise ValueError(\"Only positive values are allowed\")\n    x = 1.0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        if poly(xs, x) * poly(xs, x + 0.1) < 0:\n            return x\n",
        "test": "assert     math.isclose(find_zero([1, 0, 0]), 0)",
        "num_ids": 378
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    index = 0\n    while index < len(l):\n        if index % 3!= 0:\n            l.pop(index)\n        else:\n            l.append(l.pop(index))\n        index += 1\n    l.sort()\n    return l\n",
        "test": "assert ",
        "num_ids": 160
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1]) == [1]",
        "num_ids": 127
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1, 4, 5, 2, 3, 4, 6]) == 6",
        "num_ids": 120
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 if str(i).count('7') > 0)\n",
        "test": "assert     fizz_buzz(15) == 0",
        "num_ids": 204
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return sorted(l[::2]) + sorted(l[1::2])\n",
        "test": "assert     sort_even([1, 3, 2, 4]) == [1, 2, 3, 4]",
        "num_ids": 333
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"ABCABCABCABC\")) == \"ABCABCABCABC\"",
        "num_ids": 424
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    f1 = 1\n    f2 = 1\n    # Generating a Fibonacci number\n    while f2 < n:\n        f1, f2 = f2, f1+f2\n    # Computing if a Fibonacci number is prime\n    # https://www.quora.com/How-does-an-efficient-algorithm-for-checking-if-a-number-is-prime-exist\n    isPrime = True\n    i = 2\n    while i * i <= f2:\n        if f2 % i == 0:\n            isPrime = False\n            break\n        i += 1\n    if isPrime:\n        return f2\n    return None\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 347
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    set_elements = set()\n    for num in l:\n        if num in set_elements:\n            return True\n        set_elements.add(num)\n    return False\n",
        "test": "assert     triples_sum_to_zero([1,2,3,4,5]) == False",
        "num_ids": 355
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(2, n):\n        if abs(i-1) % (n - 1) == 0:\n            count += 1\n    return count\n",
        "test": "assert     car_race_collision(1) == 0, 'incorrect for n = 1'",
        "num_ids": 311
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return [i+1 for i in l]\n",
        "test": "assert ",
        "num_ids": 134
    },
    {
        "number": 43,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    set_list = set(l)\n    # print(set_list)\n    for i in set_list:\n        for j in set_list:\n            if i+j == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5,6]) == False",
        "num_ids": 161
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if x == 0:\n        return \"0\"\n    if x < 0:\n        return change_base(-x, base)\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n",
        "test": "assert     change_base(0, 2) == \"0\"",
        "num_ids": 334
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     (triangle_area(2, 3) == 3), \"Wrong area!\"",
        "num_ids": 142
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 212
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n == 0:\n        raise ValueError('Error: Empty list')\n    if n % 2 == 0:\n        return (s[int(n/2)] + s[int(n/2-1)])/2\n    else:\n        return s[int((n-1)/2)]\n",
        "test": "assert     median([1]) == 1",
        "num_ids": 282
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # is_palindrome = lambda s: s == s[::-1]\n    # return is_palindrome(text)\n    return text == text[::-1]\n    \ndef is_palindrome_sentence(sentence: str):\n    \"\"\"\n    Checks if given sentence is a palindrome\n    >>> is_palindrome_sentence('anna izabella')\n    True\n    >>> is_palindrome_sentence('anna')\n    False\n    \"\"\"\n    return is_palindrome(sentence.replace(' ', '').lower())\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert     is_palindrome(\"abba\") == True",
        "num_ids": 292
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    remainder = n % p\n    n //= p\n    if n == 0:\n        return remainder\n    else:\n        return ((remainder * modp(n, p)) % p)\n",
        "test": "assert     modp(2, 5) == 2",
        "num_ids": 133
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"zebra\")) == \"zebra\", \"Test failed\"",
        "num_ids": 212
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # use: ''.join(char if char not in vowels else '' for char in text)\n    vowels = frozenset('aeiouAEIOU')\n    return ''.join(char for char in text if char not in vowels)\n",
        "test": "assert     remove_vowels(\"\") == \"\"",
        "num_ids": 268
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return sum(l) < t\n",
        "test": "assert     below_threshold([1,2,3], 4) == False, \"Wrong output\"",
        "num_ids": 99
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 49
    },
    {
        "number": 54,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    s0_chars = set(s0)\n    s1_chars = set(s1)\n    return s0_chars == s1_chars\n",
        "test": "assert not same_chars(\"ab\", \"ac\")",
        "num_ids": 156
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 164
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    bracket_dict = {\">\": \"<\", \"<\": \">\"}\n    stack = []\n    for char in brackets:\n        if char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif char == \"<\":\n            stack.append(char)\n    return not stack\n",
        "test": "assert     correct_bracketing(\"<\") == False, \"One opening bracket without closing\"",
        "num_ids": 328
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if len(l) < 3:\n        return True\n    if l[0] >= l[1]:\n        return l[0] >= l[1] and monotonic(l[1:])\n    if l[0] <= l[1]:\n        return l[0] <= l[1] and monotonic(l[1:])\n",
        "test": "assert     monotonic([0, 1, 2, 3, 4]) == True",
        "num_ids": 222
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1 & s2)\n",
        "test": "assert     set(common([1, 2, 3], [1, 2, 4])) == set([1, 2])",
        "num_ids": 154
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    largest_factor = n - 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    return largest_factor\n",
        "test": "assert     largest_prime_factor(6) == 3",
        "num_ids": 280
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "test": "assert     sum_to_n(10) == 55,         f\"expected 55 got {sum_to_n(10)}\"",
        "num_ids": 166
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '(':\n            bracket_stack.append(b)\n        elif b == ')':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    if not bracket_stack:\n        return True\n    return False\n",
        "test": "assert     correct_bracketing(\"()\") == True",
        "num_ids": 233
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    ret = []\n    for i, x in enumerate(xs[1:]):\n        ret.append(i + 1)\n        ret.append(x * (i + 1))\n    return ret\n",
        "test": "assert     derivative([1, 0])     == [1, 0]",
        "num_ids": 177
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    assert n >= 0, 'Incorrect input!'\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 187
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    return len([i for i in s if i in \"aeiouAEIOU\"])\n",
        "test": "assert     vowels_count('lintcode')                 == 3",
        "num_ids": 211
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if shift < 0:\n        raise ValueError(\"negative shift value\")\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     circular_shift(12, 1) == \"21\"",
        "num_ids": 283
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert digitSum('abCF2D3F4') == 16, \"Not the sum of upper chars in string\"",
        "num_ids": 215
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # write your code here\n    n = int(s)\n    m = n\n    m -= len(s.split(\" \")[0])\n    m -= int(s.split(\" \")[1])\n    return m\n",
        "test": "assert fruit_distribution(\"544051\", \"730863\") == \"1\"",
        "num_ids": 276
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    n = len(arr)\n    if n == 0:\n        return []\n    arr.sort()\n    if n == 1:\n        return [arr[0], 0]\n    for i in range(n):\n        if i % 2 == 0 and arr[i] < arr[i+1]:\n            return [arr[i], i]\n    return []\n",
        "test": "assert pluck([1,2,3,5]) == [1,3]",
        "num_ids": 201
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    for i in range(1, max(lst)+1):\n        if lst.count(i) >= i:\n            return i\n    return -1\n",
        "test": "assert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 197
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return None\n",
        "test": "assert ",
        "num_ids": 155
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    sorted_sides = sorted([a, b, c])\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        return round((sorted_sides[0] * sorted_sides[1] * 0.5), 2)\n    return -1\n",
        "test": "assert     triangle_area(3,4,5) == 6",
        "num_ids": 338
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if q == list(reversed(q)) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([1], 3) == True",
        "num_ids": 204
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    count = 0\n    start = None\n    for i in range(len(arr)):\n        if start == None:\n            if arr[i]!= arr[len(arr) - 1 - i]:\n                start = arr[i]\n                arr[i] = arr[len(arr) - 1 - i]\n                count += 1\n        else:\n            if arr[i]!= start:\n                count += 1\n                arr[i] = start\n    return count",
        "test": "assert     smallest_change([2,4,1,3]) == 1, 'error in smallest_change'",
        "num_ids": 530
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) < len(lst2):\n            return lst1\n        else:\n            return lst2\n",
        "test": "assert     total_match(['what', 'is', 'your', 'name'], ['what', 'is', 'your', 'name'])     == ['what', 'is', 'your', 'name']",
        "num_ids": 1287
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if a < 10:\n        return False\n    # check if it is a multiple of 3\n    if a % 3 == 0:\n        # check if it is multiple of 2\n        if a % 2 == 0:\n            return False\n        else:\n            # if not multiply by 2, check if it is multiple of another prime number\n            for i in range(3, int(sqrt(a)) + 1):\n                if a % i == 0:\n                    return False\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(4) == False",
        "num_ids": 244
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if x % n == 0:\n        return True\n    return False\n",
        "test": "assert     is_simple_power(2, 2) == True",
        "num_ids": 204
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return a>0 and a**(1./3.)%1==0\n",
        "test": "assert     iscube(1) == True ",
        "num_ids": 104
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1 if num[0] in '123456789ABCDEF' else 0\n    return hex_key(num[1:]) + hex_key(num[0]) if num[0]!= '0' else hex_key(num[1:])\n",
        "test": "assert     hex_key(\"A9F\") == 3, \"Should be 3\"",
        "num_ids": 344
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if decimal == 0:\n        return \"db0\"\n    bin = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        bin = str(remainder) + bin\n        decimal = decimal // 2\n    return \"db\" + bin\n",
        "test": "assert     decimal_to_binary(2) == \"db10\"",
        "num_ids": 261
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return s.lower().count(s[0:3]) == len(s) and not len(set(s[i:i+3] for i in range(0, len(s), 3))) > 1\n",
        "test": "assert     is_happy(\"abcbcd\") == False",
        "num_ids": 204
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    letter_grade = []\n    for i in range(len(grades)):\n        if grades[i] == 4:\n            letter_grade.append('A+')\n        elif grades[i] == 3.7:\n            letter_grade.append('A')\n        elif grades[i] == 3.3:\n            letter_grade.append('A-')\n        elif grades[i] == 3:\n            letter_grade.append('B+')\n        elif grades[i] == 2.7:\n            letter_grade.append('B')\n        elif grades[i] == 2.3:\n            letter_grade.append('B-')\n        elif grades[i] == 2:\n            letter_grade.append('C+')\n        elif grades[i] == 1.7:\n            letter_grade.append('C')\n        elif grades[i] == 1.3:\n            letter_grade.append('C-')\n        elif grades[i] == 1:\n            letter_grade.append('D+')\n        elif grades[i] == 0.7:\n            letter_grade.append('D')\n        elif grades[i] == 0:\n            letter_grade.append('D-')\n        elif grades[i] == 0:\n            letter_grade.append('E')\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 1064
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(string) > 1:\n        length = len(string)\n        i = 2\n        while i <= length:\n            if length % i == 0:\n                return False\n            i += 1\n        return True\n    return False\n",
        "test": "assert     prime_length(\"hello\") == False",
        "num_ids": 152
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return count_helper(n, 1, 1)\n",
        "test": "assert     starts_one_ends(5) == 1",
        "num_ids": 222
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    ans = \"\"\n    while N!= 0:\n        ans = str(N % 2) + ans\n        N //= 2\n    return ans\n",
        "test": "assert     (solve(1) == \"1\")",
        "num_ids": 148
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2)])\n",
        "test": "assert     add([1,3,5,7]) == 10",
        "num_ids": 215
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    words = s.split(\" \")\n    char_list = []\n    for word in words:\n        for c in word:\n            char_list.append(c)\n    char_list = sorted(char_list)\n    ordered_word = ''\n    for c in char_list:\n        ordered_word += c\n    return ordered_word\n",
        "test": "assert     anti_shuffle(\"hEllo WOrLd\") == \"HELLO WORLD\"",
        "num_ids": 329
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    lst.sort()\n    res = []\n    for i in range(len(lst)):\n        if lst[i].count(x):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    res.append((i, j))\n    res.sort()\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res\n    \ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\n    get_column([], 1) == []\n    get_column([[], [1], [1, 2, 3]], 3) == [(4, 0), (4, 1), (4, 2)]\n    \"\"\"\n    lst.sort()\n    res = []\n    for i in range(len(lst[0])):\n        for j in range(len(lst)):\n            if lst[j][i] == x:\n                res.append((i, j))\n    res.sort()\n    res.sort(key=lambda x: x[0], reverse=True)\n    return res\n    \ndef get_all_elements(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_all_elements([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_all_elements([], 1) == []\n    get_all_elements([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = set()\n    lst.sort()\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.add((i, j))\n    res = list(res)\n    res.sort()\n    res.sort(key=lambda x: x[0], reverse=True)\n    return res\n    \ndef print_matrix(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Print out the matrix.\n    \n    Examples:\n    print_matrix([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]) == [\n      [1, 2, 3, 4],\n      [1, 2, 3, 1],",
        "test": "assert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 4) == [(1, 3), (2, 2), (3, 1)]",
        "num_ids": 1269
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(array) < 2:\n        return array\n    pivot = array[0]\n    left = [x for x in array if x < pivot]\n    middle = [x for x in array if x == pivot]\n    right = [x for x in array if x > pivot]\n    return sort_array(left) + middle + sort_array(right)\n",
        "test": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]",
        "num_ids": 345
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # create a list with all letters in alphabet\n    letters = list(string.ascii_lowercase)\n    # create a list with letters shifted down by 2 * 2\n    letters_shifted = letters[2:] + letters[:2]\n    # create a dict with letters and their shifted values\n    letters_dict = dict(zip(letters, letters_shifted))\n    # create a new variable encrypted by using a comprehension list\n    encrypted = ''.join([letters_dict[s] for s in s.lower()])\n    return encrypted\n",
        "test": "assert encrypt(\"f\") == \"c\" ",
        "num_ids": 455
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 1, 1, 1, 1]) == 1",
        "num_ids": 362
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    count = 0\n    for s in S.split('.'):\n        if s[0:2] == 'I ':\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"I look forward to learning Python\") == 1",
        "num_ids": 211
    },
    {
        "number": 92,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = False\n    if x == int(x) or y == int(y) or z == int(z):\n        result = x + y == z or y + z == x or z + x == y\n        return result\n    else:\n        return result\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\n",
        "test": "assert     any_int(1, 2, 2) == True     # a + b = c and b + c = a",
        "num_ids": 362
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded += char.lower()\n        else:\n            encoded += char\n    return encoded\n",
        "test": "assert ",
        "num_ids": 305
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    lst = sorted(lst)\n    print(lst)\n    print(prime(lst))\n    return sum([int(i) for i in str(prime(lst))])\n",
        "test": "assert ",
        "num_ids": 530
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    #your code here\n    \n    return False\n",
        "test": "assert     check_dict_case({\"A\":1}) == False",
        "num_ids": 485
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 323
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return a*b\n",
        "test": "assert     multiply(5, 2) == 10",
        "num_ids": 96
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # Vowels = ['A','E','I','O','U']\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    if len(s)%2 == 1:\n        for i in range(len(s)):\n            if s[i] in vowels:\n                if i % 2 == 0:\n                    count += 1\n    else:\n        for i in range(len(s)):\n            if s[i] in vowels:\n                if i % 2 == 1:\n                    count += 1\n    return count\n",
        "test": "assert     count_upper('') == 0",
        "num_ids": 305
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    int_val = int(value)\n    int_val = int(round(int_val))\n    return int_val\n",
        "test": "assert     closest_integer(1.4) == 1",
        "num_ids": 137
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pile = []\n    if n % 2 == 0:\n        for i in range(1, n + 1):\n            if i % 2!= 0:\n                pile.append(i)\n    else:\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                pile.append(i)\n    return pile\n",
        "test": "assert     [0, 3, 8, 15, 16, 19] == make_a_pile(7)",
        "num_ids": 260
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return s.replace(' ', '').split(',')\n",
        "test": "assert     words_string(\"hello,world\") == [\"hello\",\"world\"]",
        "num_ids": 234
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return max(2, int(min(y, 2*x))) if (y >= x) else -1\n",
        "test": "assert     choose_num(0, 1) == 2",
        "num_ids": 255
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 241
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    x.sort()\n    for i in range(len(x)):\n        if x[i] % 2!= 0:\n            x.remove(x[i])\n    return x\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7, 9]",
        "num_ids": 219
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if not arr:\n        return arr\n    # remove the negative numbers\n    arr = list(filter(lambda x: x >= 0, arr))\n    # remove the numbers out of range\n    arr = list(filter(lambda x: 1 <= x <= 9, arr))\n    # sort the numbers\n    arr.sort()\n    # reverse the numbers\n    arr.reverse()\n    \n    result = []\n    for num in arr:\n        result.append(DIGIT_TO_NAME[num])\n    return result",
        "test": "assert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 5, 6, 7, 8]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Four', 'Five', 'Six', 'Seven', 'Eight']",
        "num_ids": 424
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if n <= 0:\n        return []\n    l = [1]\n    for i in range(1,n):\n        if i%2 == 0:\n            l.append(i*l[i-1])\n        else:\n            l.append(sum(range(1,i+1)))\n    return l\n",
        "test": "assert     f(1) ==     [1]",
        "num_ids": 225
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "test": "assert     even_odd_palindrome(2) == (0, 1)",
        "num_ids": 142
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Get the list of digit sums\n    sum_list = list()\n    for num in arr:\n        sum_list.append(sum([int(digit) for digit in str(abs(num))]))\n    # Count the nums\n    nums = len([num for num in arr if sum_list.count(num) > 0])\n    return nums\n",
        "test": "assert     count_nums([]) == 0, \"0 digits in array = 0\"",
        "num_ids": 226
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    def is_non_dec(arr):\n        # non-decreasing order means arr[0] <= arr[1] >= arr[2] <= arr[3] >=...\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    def move_one_ball_2(arr):\n        # Get the non-decreasing order of the array\n        nondec = sorted(arr)\n        # If array is already sorted return True\n        if nondec == arr:\n            return True\n        # If the array is empty return True\n        if not arr:\n            return True\n        # If the array has only one element, then right shift will be possible\n        if len(arr) == 1:\n            return True\n        # if the last element of the array is smaller than the first element\n        # of the array then return False\n        if arr[0] > arr[-1]:\n            return False\n        # Otherwise, keep shifting the last element of the array\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n        # If the array is now in non-decreasing order, return True\n        if is_non_dec(arr):\n            return True\n        # Otherwise shift the last element of the array again\n        arr[-1],arr[0] = arr[0],arr[-1]\n        # If the array is now in non-decreasing order, return True\n        if is_non_dec(arr):\n            return True\n        # Otherwise return False\n        return False\n    return move_one_ball_2(arr)\n",
        "test": "assert     move_one_ball([1,2,3,4]) == True",
        "num_ids": 592
    },
    {
        "number": 110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # TODO:\n    pass\n",
        "test": "assert     exchange([1, 3, 5], [2, 4, 6, 8]) == 'NO'",
        "num_ids": 267
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # your code here\n    dict = {}\n    max_count = 0\n    for letter in test.split(' '):\n        letter = letter.lower()\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n        if dict[letter] > max_count:\n            max_count = dict[letter]\n    return dict\n",
        "test": "assert     histogram('c') ==     {'c': 1}, 'incorrect histogram()'",
        "num_ids": 296
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # Your code here\n    result = []\n    for i in s:\n        if i not in c:\n            result.append(i)\n    result.reverse()\n    resultString = ''.join(result)\n    if resultString == s:\n        result = (resultString,True)\n    else:\n        result = (resultString,False)\n    return result\n",
        "test": "assert     reverse_delete(\"\", \"\") == (\"\", True), \"Case2: empty string\"",
        "num_ids": 350
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 == 1:\n                count += 1\n        output.append(count)\n    return [\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\" for i in output]\n",
        "test": "assert     odd_count([\"test1\", \"122222\", \"test2\", \"0\"]) == [2, 3, 2]",
        "num_ids": 436
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # I got the idea from:\n    # https://leetcode.com/problems/minimum-size-subarray-sum/discuss/66855/C%2B%2BJavaPython-DP-Solution\n    # for the min sum, we have to track the minimum sum of prefix and suffix,\n    # therefore, we have 2 array, prefix and suffix\n    # the prefix is the sum of all elements before the current element, while\n    # the suffix is the sum of all elements after the current element\n    # if the prefix is less than or equal to the current element's sum,\n    # then this element is the minimum element in the sub array, and we\n    # can just return it. if it's greater than the current element's sum,\n    # then we need to update the prefix array and return it\n    # time complexity: O(n)\n    # space complexity: O(n)\n    prefix = nums\n    suffix = [0 for _ in range(len(nums))]\n    res = float('inf')\n    for i in range(len(nums)):\n        if prefix[i] <= 0:\n            prefix[i] = float('inf')\n        else:\n            prefix[i] += prefix[i-1]\n        res = min(res, prefix[i])\n        if suffix[i-1] <= 0:\n            suffix[i-1] = float('inf')\n        else:\n            suffix[i-1] += nums[i]\n        res = min(res, suffix[i-1])\n    return res\n",
        "test": "assert     minSubArraySum([2, 3, 1, 2, 4, 3, 1, 4]) == 6",
        "num_ids": 689
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # 1) prepare grid\n    n_rows, n_cols = len(grid), len(grid[0])\n    \n    # 2) initialize dp table\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(n_rows + 1)]\n    \n    # 3) iterate over grid\n    for row in range(1, n_rows + 1):\n        for col in range(1, n_cols + 1):\n            # 3.1) calculate max num of times for current well\n            num_times_to_fill = math.ceil(grid[row - 1][col - 1] / capacity)\n",
        "test": "assert     max_fill([[1, 1, 1, 0], ",
        "num_ids": 1279
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Incorrect\"",
        "num_ids": 277
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    words = s.split()\n    lst = []\n    for word in words:\n        if word.count('.') < 1 and word.count('!') < 1:\n            if len(word) > n:\n                lst.append(word)\n    return lst\n",
        "test": "assert     select_words('', 2) == []",
        "num_ids": 891
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return \"\"\n",
        "test": "assert     get_closest_vowel(    'hello' ) == '', 'wrong result for get_closest_vowel(\"hello\")'",
        "num_ids": 1202
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    elif lst[0] == '(':\n        return match_parens(lst[1:])\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['(', '(', ')', ')', ')', '(']) == 'Yes'",
        "num_ids": 1350
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     maximum([7, 4, 3, 2, 5, 8, 9, 12], 3) == [7, 8, 9]",
        "num_ids": 201
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sum([num for num in lst if num % 2 == 0 and lst.index(num) % 2!= 0])\n",
        "test": "assert     solution([[1, 2, 3, 4, 5, 6, 7, 8], ",
        "num_ids": 243
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    for i in range(k):\n        arr[i] = str(arr[i])\n    arr = sorted(arr, key=len, reverse=True)\n    for i in range(k):\n        arr[i] = arr[i][0:2]\n    arr = sorted(arr, key=int, reverse=True)\n    return int(arr[0]) + int(arr[1])\n",
        "test": "assert     add_elements([10, 16, 17, 9, 17, 5, 18, 6], 6) == 76",
        "num_ids": 242
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    collatz_seq = [n]\n    while collatz_seq[-1]!= 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(int(collatz_seq[-1] / 2))\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n    return collatz_seq\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 234
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not date: return False\n    try:\n        [month,day,year] = date.split('-')\n    except:\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month<1 or month>12: return False\n    if month==2:\n        if day<1 or day>29: return False\n    elif month in [1,3,5,7,8,10,12]:\n        if day<1 or day>31: return False\n    elif month in [4,6,9,11]:\n        if day<1 or day>30: return False\n    else:\n        return False\n    return True\n",
        "test": "assert     valid_date(\"03-32-2019\") is False, \"error in case of 3-32-2019\"",
        "num_ids": 592
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('') == [], \"no whitespace should split into a list of empty strings\"",
        "num_ids": 131
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(lst) == 1 or len(lst) == 0:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 257
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # YOUR CODE HERE\n    if (interval1[1] < interval2[0] or interval2[1] < interval1[0]):\n        return \"NO\"\n    else:\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        if (intersection_end - intersection_start) == 0:\n            return \"NO\"\n        for i in range(2, (intersection_end - intersection_start) + 1):\n            if (intersection_end - intersection_start) % i == 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert     intersection((0, 3), (1, 4)) == 'YES', \"Case #1:\\n\" \\",
        "num_ids": 436
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # return sum(abs(i) * (1 if i > 0 else -1 if i < 0 else 0) for i in arr)\n    return sum(abs(i) for i in arr) * (1 if all(i>0 for i in arr) else -1 if all(i<0 for i in arr) else 0)\n",
        "test": "assert     prod_signs([1, 2, 3]) == 6",
        "num_ids": 231
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(grid) == 0: return []\n",
        "test": "assert     minPath([[1, 2], [2, 1]], 3) == [2, 1, 1, 2]",
        "num_ids": 323
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    def tribonacci(n):\n        if n == 1 or n == 2:\n            return [1, 3]\n        if n > 2:\n            return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)\n        \n    return tribonacci(n)\n",
        "test": "assert ",
        "num_ids": 369
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # convert n to string\n    s = str(n)\n    # get the digits as an array of integers\n    digits = [int(x) for x in s]\n    # multiply the odd digits\n    product = 1\n    for x in digits:\n        if x % 2 == 1:\n            product *= x\n    return product\n",
        "test": "assert     digits(1234) == 3",
        "num_ids": 270
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert     is_nested('') == True, 'Empty string is a valid nested string.'",
        "num_ids": 278
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return round(sum(x**2 for x in lst))\nprint(sum_squares([1,2,3]))\n",
        "test": "assert     sum_squares([]) == 0, \"empty\"",
        "num_ids": 186
    },
    {
        "number": 134,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(txt) < 1:\n        return False\n    else:\n        return txt[-1].isalpha()",
        "test": "assert     check_if_last_char_is_a_letter('A B12') == False",
        "num_ids": 140
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    i = 1\n    largest = arr[0]\n    while i < len(arr):\n        if arr[i] < largest:\n            return i\n        i += 1\n    return -1\n",
        "test": "assert     can_arrange([3, 5, 5, 2, 9]) == 3",
        "num_ids": 294
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    if lst == []:\n        return None, None\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 297
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    try:\n        a, b = float(a), float(b)\n        return max(a, b)\n    except ValueError:\n        return None\n",
        "test": "assert     compare_one(3, 3.0) ==     3,'should be 3'",
        "num_ids": 319
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    l = [i for i in range(1,n) if i % 2 == 0]\n    return len(l) == 4\n",
        "test": "assert     is_equal_to_sum_even(2) == False, 'test failed for 2'",
        "num_ids": 222
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n < 1:\n        return 0\n    i = n\n    factorial = 1\n    while i >= 1:\n        factorial *= i\n        i -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 108
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "test": "assert ",
        "num_ids": 174
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if file_name.count(\".\")!= 1 or file_name.find(\".\") == 0 or file_name.find(\".\") == len(file_name) - 1 or file_name.isnumeric():\n        return \"No\"\n    return \"Yes\"\n",
        "test": "assert     file_name_check('this.is.an.invalid.file.name') == 'No', 'Wrong result'",
        "num_ids": 689
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    lst = [x if (x%3 == 0 or x%4 == 0) else (x**2 if (x%3!= 0 and x%4!= 0) else x**3) for x in lst]\n    return sum(lst)\n",
        "test": "assert ",
        "num_ids": 298
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    word_list = sentence.split()\n    return''.join([word for word in word_list if len(word) == prime_number(word)])\n",
        "test": "assert     words_in_sentence(\"primenumbersisprime\") == \"isprime isprime\", \\",
        "num_ids": 170
    },
    {
        "number": 144,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return False\n",
        "test": "assert     (simplify(\"6/8\", \"1/2\")) == False",
        "num_ids": 154
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n",
        "test": "assert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 156
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    num_count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in [1, 3, 5, 7, 9] and str(num)[-1] in [1, 3, 5, 7, 9]:\n            num_count += 1\n    return num_count\n",
        "test": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0, \"incorrect output for specialFilter([1,2,3,4,5,6,7,8,9,10])\"",
        "num_ids": 326
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 185
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    try:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    return tuple(sorted((planets[p] for p in range(p1, p2+1)), key=lambda x: planets.index(x)))\n",
        "test": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus'), 'error'",
        "num_ids": 454
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(lst, key = lambda s: (len(s), s))\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 271
    },
    {
        "number": 150,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n <= 1:\n        return n\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return y\n        return x\n",
        "test": "assert     x_or_y(3, 1, 1) == 1",
        "num_ids": 128
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    total = 0\n    for x in lst:\n        if x % 2 == 1 and x >= 0:\n            total += x**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 351
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    score = game\n    guess = guess\n    diff = [abs(i-j) for i,j in zip(score,guess)]\n    return diff\n",
        "test": "assert     [0,0] == compare([1,1],[1,1])",
        "num_ids": 316
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # O(len(extensions)) time\n    # O(len(extensions)) space\n    for extension in extensions:\n        if class_name.find(extension[0].lower()) >= 0:\n            return class_name + '.' + extension\n    return class_name + '.none'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1526
    },
    {
        "number": 154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    n = len(a)\n    #if a[n-1:n]!= b:\n    #    return False\n    #else:\n    #    return True\n    #import pdb; pdb.set_trace()\n    for i in range(len(a)):\n        if a[i:] == b:\n            return True\n        if a[0:i] == b:\n            return True\n    return False\n",
        "test": "assert ",
        "num_ids": 245
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return (len([i for i in str(abs(num)) if int(i)%2 == 0]), len([i for i in str(abs(num)) if int(i)%2!= 0]))",
        "test": "assert     even_odd_count(234) == (3, 1)",
        "num_ids": 243
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    roman_num = []\n    for integer, numeral in ROMAN_NUMERAL_MAP:\n        while number >= integer:\n            number -= integer\n            roman_num.append(numeral)\n    return ''.join(roman_num)\n",
        "test": "assert     int_to_mini_roman(2) == 'ii'",
        "num_ids": 274
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    assert a > 0 and b > 0 and c > 0\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1, 3, 2) == False, \"Not a right triangle\"",
        "num_ids": 204
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    max_unique = 0\n    for word in words:\n        unique_characters = len(set(word))\n        if unique_characters > max_unique:\n            max_unique = unique_characters\n            max_word = word\n    return max_word\n",
        "test": "assert     (find_max(['macaroni', 'taco', 'carrot','macaroni']) =='macaroni'),'macaroni should be returned'",
        "num_ids": 306
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [number + need, remaining - need]",
        "test": "assert     eat(0, 0, 1) == [0, 1], \"eat returned wrong answer\"",
        "num_ids": 134
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # TODO\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == \"+\":\n            result = result + operand[i]\n        elif operator[i] == \"-\":\n            result = result - operand[i]\n        elif operator[i] == \"*\":\n            result = result * operand[i]\n        elif operator[i] == \"//\":\n            result = result // operand[i]\n        elif operator[i] == \"**\":\n            result = result ** operand[i]\n    return result\n",
        "test": "assert     do_algebra(['+'], [5]) == 5",
        "num_ids": 444
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return s.swapcase()\n    ",
        "test": "assert     solve(\"a\") == \"A\"",
        "num_ids": 208
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 238
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return [i for i in range(a, b+1) if i%2 == 0]\n",
        "test": "assert     generate_integers(1, 3) == [2]",
        "num_ids": 319
    }
]