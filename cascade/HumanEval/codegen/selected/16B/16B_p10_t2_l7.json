[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    numbers.sort()\n    for index, number in enumerate(numbers[:-1]):\n        if abs(number - numbers[index + 1]) <= threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([], 10) == False, \"Wrong output!\"",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    paren_groups = []\n    current_group = []\n    for char in paren_string:\n        if char == ')':\n            if current_group:\n                current_group.append(char)\n            else:\n                paren_groups.append(''.join(current_group))\n                current_group = []\n        elif char == '(':\n            if current_group:\n                current_group.append(char)\n            else:\n                current_group.append(char)\n        else:\n            if char!='':\n                current_group.append(char)\n    if current_group:\n        paren_groups.append(''.join(current_group))\n    return paren_groups\n",
        "test": "assert     separate_paren_groups('()') == ['()']",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return math.modf(number)[0]\n",
        "test": "assert     0.0 == truncate_number(0)",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return sum(operations) < 0\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"List must not be empty.\")\n    mean = sum(numbers) / n\n    return sum(abs(number - mean) for number in numbers) / n\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1, 1, 1]) == 0, \"Wrong result\"",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    numbers = list(numbers)\n    for i in range(0, len(numbers) - 1):\n        numbers.insert(2 * i + 1, delimeter)\n    return numbers\n",
        "test": "assert     intersperse([], 3) == []",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    paren_strings = [x for x in paren_string.split(' ')]\n    stack = [[] for _ in range(len(paren_strings))]\n    max_depth = [0 for _ in range(len(paren_strings))]\n    for i, paren in enumerate(paren_strings):\n        for j, c in enumerate(paren):\n            if c == '(':\n                stack[i].append(j)\n            elif c == ')':\n                if stack[i]:\n                    max_depth[i] = max(max_depth[i], stack[i].pop())\n    return max_depth\n",
        "test": "assert     parse_nested_parens(\"(())\")         == [1]",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    substring = substring.lower()\n    return list(filter(lambda string: substring in string.lower(), strings))\n",
        "test": "assert     filter_by_substring([\"cat\", \"dog\"], \"c\") == [\"cat\"]",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    result = []\n    for idx, number in enumerate(numbers):\n        if idx == 0:\n            result.append(number)\n        else:\n            result.append(max(number, result[idx-1]))\n    return result\n",
        "test": "assert     rolling_max([1]) == [1]",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    rev = string[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + rev\n    return string + rev\n",
        "test": "assert     make_palindrome('ab') == 'aba'",
        "num_ids": 1955,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    a_ = int(a, base=2)\n    b_ = int(b, base=2)\n    result = a_ ^ b_\n    return bin(result)[2:]\n",
        "test": "assert     string_xor(\"101010\", \"101010\") == \"0\"",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    max_str = strings[0]\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            max_str = string\n    return max_str\n",
        "test": "assert     longest(['abc', 'aa', 'a', 'abc', 'aa']) == 'abc'",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(12, 8) == 4",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes('') == []",
        "num_ids": 1910,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('abc') == 3",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    parsed_string = music_string.replace('\\n', '').replace(' ', '')\n    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in parsed_string]\n",
        "test": "assert     parse_music('oo') == [4, 4]",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n",
        "test": "assert     how_many_times('cat', 'a') == 1, 'not working for the first example'",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers(\"one\") == 'one'",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    assert numbers, \"Supplied list is empty\"\n    assert len(numbers) >= 2, \"List supplied is of length less than 2\"\n    numbers = sorted(numbers)\n    # Find difference between first two numbers and\n    # between the last two numbers\n    diff_one = abs(numbers[0] - numbers[1])\n    diff_two = abs(numbers[-1] - numbers[-2])\n    if diff_one > diff_two:\n        return numbers[1], numbers[-1]\n    return numbers[0], numbers[-1]\n",
        "test": "assert     find_closest_elements([1, 2, 3]) == (1, 3) or (2, 3), \"Wrong output\"",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    return [number - min(numbers) for number in numbers]\n",
        "test": "assert     rescale_to_unit([1, 2]) == [0, 1]",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "test": "assert     strlen(\"hello\") == 5",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n    return n\n",
        "test": "assert     largest_divisor(9) == 3",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    # TODO: your code here\n    list_of_factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            n = n / i\n            list_of_factors.append(i)\n    return list_of_factors\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n    # do not use built-in set() or dict() to avoid Python 3.7+ dicts bug\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                numbers[j] = None\n    return list(filter(None, numbers))\n",
        "test": "assert     remove_duplicates([]) == [], 'Wrong answer for remove_duplicates([])'",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "test": "assert     flip_case(\"Python\") == \"pYTHON\"",
        "num_ids": 1736,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['abc', 'xyz', 'aba']) == 'abcxyzaba'",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([\"search_engine\", \"cat\", \"copy\", \"dotted\", \"dotted_line\", \"browsing_guide\", \"vacuum_cleaner\"], \"d\") == [\"dotted\", \"dotted_line\"]",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [elem for elem in l if elem > 0]\n",
        "test": "assert     get_positive([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    n = len(xs)\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        if xs[0] == 0:\n            return xs[1]\n        else:\n            return -xs[1] / xs[0]\n",
        "test": "assert     poly([0, 1, 1, 1], 0) == 0",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    x = []\n    y = []\n    for i in range(0, len(l)):\n        if i % 3!= 0:\n            x.append(l[i])\n        else:\n            y.append(l[i])\n    z = x + y\n    for i in range(len(z)):\n        for j in range(i + 1, len(z)):\n            if z[i] > z[j]:\n                z[i], z[j] = z[j], z[i]\n    return z\n",
        "test": "assert     sort_third([3, 2, 1]) == [1, 2, 3], 'incorrect'",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    s = set()\n    for i in l:\n        if i not in s:\n            s.add(i)\n    return list(s)\n",
        "test": "assert     unique([]) == []",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    num = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                num += 1\n    return num\n",
        "test": "assert     fizz_buzz(11) == 0",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    even = [x for i,x in enumerate(l) if i%2==0]\n    even.sort()\n    return [x for i,x in enumerate(l) if i%2!=0] + even\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle each group, use cyclic group formation to get original string.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic('111' * 1000)) == '111' * 1000",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    assert n >= 1\n",
        "test": "assert ",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     not triples_sum_to_zero([1, 2, 3, 4, 5])",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0, 'Wrong answer'",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    return [e+1 for e in l]\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    l_size = len(l)\n    if l_size < 2:\n        return False\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    res = ''\n    while x > 0:\n        res += digits[x % base]\n        x //= base\n    return res[::-1]\n",
        "test": "assert     change_base(10, 2) == \"1010\"",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    return a * h / 2\n",
        "test": "assert     triangle_area(3, 4) == 6, \"triangle_area(3, 4) == 6 failed\"",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"cannot get median from empty list\")\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n    return l[n // 2]\n",
        "test": "assert ",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return text[::-1].lower() == text.lower()\n",
        "test": "assert     is_palindrome('a') == True, 'Word \"a\" is a palindrome'",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    assert n >= 0, \"n < 0\"\n    assert p > 2, \"p <= 2\"\n    m = 1\n    while n:\n        if n & 1:\n            m = (m * 2) % p\n        n >>= 1\n    return m\n",
        "test": "assert     modp(7, 3) == 2",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in text:\n        if i not in vowels:\n            result += i\n    return result",
        "test": "assert     remove_vowels('hello') == 'hll'",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 0) == False",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "    return x + y\n",
        "test": "assert     add(10, 20) ==         30",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return len(s0) == len(s1) and all(c0 == c1 for c0, c1 in zip(s0, s1))\n",
        "test": "assert not     same_chars(\"archery\", \"quizx\")",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    # if len(brackets) == 1:\n    #     return False\n    # if len(brackets) % 2!= 0:\n    #     return False\n    # for i in range(len(brackets) // 2):\n    #     if brackets[i]!= \"<\" or brackets[-i-1]!= \">\":\n    #         return False\n    # return True\n    return len(brackets) % 2 == 0 and brackets.count(\"<\") == brackets.count(\">\")\n",
        "test": "assert not     correct_bracketing(\"<html<\")",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if l[0] <= l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] >= l[i + 1]:\n                return False\n    else:\n        for i in range(1, len(l) - 1):\n            if l[i] <= l[i + 1]:\n                return False\n    return True\n",
        "test": "assert     monotonic([1,2,3]) == True",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     (sorted(common([1, 2, 3], [2, 3, 4])) == [2, 3])",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            try:\n                if stack[-1] == '(':\n                    stack.pop()\n            except:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"(\")         == False, \"ERROR: 1\"",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    n = len(xs)\n    derivative = [0] * n\n    for i in range(n):\n        if i == 0:\n            derivative[0] = 0\n        elif i == 1:\n            derivative[1] = xs[0]\n        elif i == 2:\n            derivative[2] = xs[1] + 2 * xs[2]\n        else:\n            derivative[i] = (xs[i] + (i - 1) * xs[i - 1]) * i\n    return derivative\n",
        "test": "assert     derivative([1, 0, 0, 0]) == [0, 1, 0, 0]",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n >= 3:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('hello') == 2",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if shift == 0:\n        return x\n    if shift > x:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     str(circular_shift(1, 1)) == \"1\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    result = 0\n    for character in s:\n        if character.isalpha():\n            result += ord(character.upper())\n    return result\n",
        "test": "assert     digitSum('TRAP') == sum([ord(c) for c in 'TRAP' if c.isupper()])",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    apples = 0\n    oranges = 0\n    mango = 0\n    for char in s:\n        if char.isdigit():\n            if'm' in char:\n                mango += int(char)\n            if 'a' in char:\n                apples += int(char)\n            if 'o' in char:\n                oranges += int(char)\n    return mango - apples - oranges\n",
        "test": "assert fruit_distribution(\"0 0 0\", 2) == 0",
        "num_ids": 3008,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    stack = []\n    for node in arr:\n        if node % 2 == 0:\n            stack.append([node, arr.index(node)])\n    if stack:\n        stack.sort(key=lambda x: (x[0], x[1]))\n        return [stack[0][0], stack[0][1]]\n    else:\n        return []\n",
        "test": "assert     pluck([2, 9, 7, 4]) ==     [9, 1] or     [9, 2]",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    max_value = -1\n    for num in lst:\n        if num > max_value and lst.count(num) >= num:\n            max_value = num\n    return max_value\n",
        "test": "assert     search([5, 5, 5, 6]) == -1",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    lst_sort = sorted(lst)\n    lst_new = []\n    while len(lst_sort) > 0:\n        lst_new.append(lst_sort.pop(0))\n        lst_sort = sorted(lst_sort)\n    return lst_new\n",
        "test": "assert     strange_sort_list([]) == [], 'incorrect'",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    if a+b > c and a+c > b and b+c > a:\n        return round((a*b*c)/2,2)\n    else:\n        return -1\n",
        "test": "assert     triangle_area(3, 3, 10) == -1",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # my code\n    if q[::-1]==q and sum(q)<=w:\n        return True\n    else:\n        return False\n    # O(n)\n",
        "test": "assert     will_it_fly([2, 1, 3, 3], 5) == False",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    # Your code here\n    if not arr:\n        return 0\n    odd_len = False\n    # is palindromic iff it is a palindrome in forward and backward\n    # and is odd iff there is one element that is odd\n    if len(arr) % 2 == 0:\n        odd_len = False\n    else:\n        odd_len = True\n    # Let's use a dictionary to keep track of the changes we can do\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for k, v in d.items():\n        if k == v and v % 2 == 1:\n            odd_len = True\n        elif k!= v:\n            odd_len = False\n    if odd_len:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     smallest_change([1, 2, 3, 4, 5, 2, 1]) == 1",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n",
        "test": "assert     total_match(['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    primes = []\n    for i in range(2, 100):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    for num in primes:\n        if a % num == 0:\n            is_prime = True\n        else:\n            is_prime = False\n            break\n    return is_prime\n",
        "test": "assert     is_multiply_prime(12) == False,     \"Error in your code. When a=12 should return False\"",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    # Base Case \n    if x == n: \n        return True\n    if x % n!= 0:\n        return False\n    return is_simple_power(x/n, n) \n",
        "test": "assert     is_simple_power(13, 2) == False",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    cube = a**(1/3)\n    if cube == round(cube):\n        return True\n    return False\n",
        "test": "assert     iscube(5)==False",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    import math\n    primes = [2,3,5,7]\n    hex_digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,\n    'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n    # if input is None or empty string, return 0\n    if not num or num == \"\":\n        return 0\n    # if input is a prime, return 1\n    if is_prime(int(num)):\n        return 1\n    # create list for prime digits\n    prime_list = []\n    # loop through hexadecimal string\n    for i in num:\n        # convert hexadecimal string to decimal\n        dec = hex_digits.get(i)\n        # determine if decimal is a prime\n        if is_prime(dec):\n            # if yes, add to prime list\n            prime_list.append(dec)\n    # count how many digits are in prime list\n    return len(prime_list)\n",
        "test": "assert     hex_key('') == 0, \"Check the number of prime numbers\"",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n",
        "test": "assert     decimal_to_binary(1) == 'db1db'",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s):\n            if s[i] == s[j]:\n                return False\n            j += 1\n        i += 1\n    return True\n",
        "test": "assert     is_happy('abcd') == True",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    result = []\n    for GPA in grades:\n        if GPA >= 4:\n            result.append(\"A+\")\n        elif GPA >= 3.7:\n            result.append(\"A\")\n        elif GPA >= 3.3:\n            result.append(\"A-\")\n        elif GPA >= 3.0:\n            result.append(\"B+\")\n        elif GPA >= 2.7:\n            result.append(\"B\")\n        elif GPA >= 2.3:\n            result.append(\"B-\")\n        elif GPA >= 2.0:\n            result.append(\"C+\")\n        elif GPA >= 1.7:\n            result.append(\"C\")\n        elif GPA >= 1.3:\n            result.append(\"C-\")\n        elif GPA >= 1.0:\n            result.append(\"D+\")\n        elif GPA >= 0.7:\n            result.append(\"D\")\n        elif GPA >= 0.0:\n            result.append(\"D-\")\n        elif GPA == 0.0:\n            result.append(\"E\")\n    return result\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0]) == [ 'A+', 'A+', 'A+', 'A+']",
        "num_ids": 3376,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    return len(string) in [x for x in range(1,int(len(string)/2)+1) if len(string)%x == 0]\n",
        "test": "assert     prime_length(\"hello\") == False, \"This is not a prime\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n-1) + ends_one_starts(n)\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "    return bin(N).replace(\"0b\", \"\")\n",
        "test": "assert     solve(0) == '0'",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, len(lst)):\n            if (i % 2 == 1):\n                sum += lst[i]\n        return sum\n",
        "test": "assert     add([3, 6, 2, 8, 1, 4]) == 18",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: [ord(c) for c in x]))\n",
        "test": "assert     anti_shuffle(\"Hello world\") == \"Hello world\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if not lst:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            res.append((i, lst[i].index(x)))\n    res = list(set(res))\n    res.sort()\n    res.sort(key=lambda x: (-x[0], x[1]))\n    return res\n",
        "test": "assert     get_row([], 0) == []",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    sorted_array = sorted(array)\n    result = [0] * len(array)\n    for i, num in enumerate(array):\n        result[i] = sorted_array[i]\n    return result",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    encrypt_string = ''\n    for char in s:\n        if ord(char) >= 97:\n            if (ord(char) + 2) > 122:\n                encrypt_string += chr(96 + ((ord(char) + 2) - 122))\n            else:\n                encrypt_string += chr(ord(char) + 2)\n        else:\n            encrypt_string += chr(ord(char) + 2)\n    return encrypt_string\n",
        "test": "assert     encrypt('a') == 'c', \"encrypt('a') should be c\"",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    smallest = float('inf')\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    smallest_index = lst.index(smallest)\n    # lst[smallest_index] is the smallest element in lst\n    if smallest_index == 0:\n        return None\n    elif smallest_index == len(lst) - 1:\n        return None\n    elif smallest_index == len(lst) - 2:\n        return lst[smallest_index + 1]\n    else:\n        return lst[smallest_index + 1]\n",
        "test": "assert     next_smallest([5, 5, 5, 5, 5]) == None",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    return sum([\n        line.startswith(\"I\")\n        for line in S.split('.')\n    ])\n",
        "test": "assert     is_bored(\"I love dogs.\") == 1",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    return any([x == y + z, x == z + y, y == x + z, y == z + x]) and all([isinstance(x, int), isinstance(y, int), isinstance(z, int)])\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
        "test": "assert     any_int(5, 1, 2) == False, \"False #1\"",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    swap = lambda x: x.swapcase()\n    vowel = lambda x: x.lower() if x in \"aeiou\" else x\n    vowels = [vowel(x) for x in message]\n    message = message.swapcase()\n    message = [message[i].swapcase() if message[i] in \"aeiou\" else message[i] for i in range(len(message))]\n    message = ''.join(message)\n    message = message.replace('a','@').replace('e','&').replace('i','!').replace('o','(').replace('u','|')\n    return message\n",
        "test": "assert     encode('meet me at 3 p.m.') == 'MEET ME AT 3 P.M.'",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    prime_sum = []\n    for i in prime:\n        for j in lst:\n            if i == j:\n                prime_sum.append(i)\n    return sum(prime_sum)\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 2181,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if not dict:\n        return False\n    else:\n        return all([type(key) == str for key in dict.keys()])\n",
        "test": "assert     check_dict_case({}) == False, \"Empty dictionary\"",
        "num_ids": 2198,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    primes = []\n    if n >= 1:\n        primes.append(2)\n        for i in range(3, n, 2):\n            is_prime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n    return primes",
        "test": "assert     count_up_to(0) == [], 'incorrect output'",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    else:\n        return a%10 * b%10\n",
        "test": "assert     (multiply(1, 1) == 1)",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return len([c for c in s[1::2] if c.isupper()])\n",
        "test": "assert     count_upper(\"Hi\") == 0",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    a = float(value)\n    b = int(a)\n    if a - b == 0:\n        return b\n    elif a - b < 0:\n        return b - 1\n    else:\n        return b + 1\n",
        "test": "assert     closest_integer(\"5\") == 5",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    level = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            level.append(level[i - 1] + 2)\n        else:\n            level.append(level[i - 1] + 1)\n    return level\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    import re\n    return re.findall(r'[A-Za-z]{1,}', s)\n",
        "test": "assert     words_string('Hi') == ['Hi']",
        "num_ids": 1984,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    #Fill in this function.\n    return -1\n",
        "test": "assert     choose_num(5, 1) == -1",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    n, m = sorted([n, m])\n    return bin(int(round(sum(range(n, m+1))/float(m-n+1))))\n",
        "test": "assert     rounded_avg(2, 10) == \"1110111111111111111\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if not x:\n        return x\n    x = [int(i) for i in x]\n    y = [int(i) for i in x if i % 2!= 0]\n    return sorted(y)\n",
        "test": "assert     unique_digits([])         == []",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    \n    # Write your code here\n    return []\n",
        "test": "assert     by_length([1]) == \"One\", \"1\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    # 1. Implement the function f as described above\n    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    # 2. Return the list of values obtained\n    return l\n",
        "test": "assert     f(1) == [1], 'incorrect'",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    # count even and odd palindrome\n    count_odd, count_even = 0, 0\n    for i in range(1, n+1):\n        # break if number is palindrome\n        if str(i) == str(i)[::-1]:\n            # check if even\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    # return tuple\n    return (count_odd, count_even)\n",
        "test": "assert     even_odd_palindrome(3) == (2, 1)",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return sum(len(str(abs(x))) for x in arr if x < 0)\n",
        "test": "assert     count_nums([])     == 0",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    arr.sort()\n    return arr == [i for i in range(1, len(arr)+1)]\n",
        "test": "assert     move_one_ball([3, 3, 1, 2]) == False",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    for i in lst1:\n        if i%2!=0:\n            return \"NO\"\n    for j in lst2:\n        if j%2!=0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([], []) == \"YES\"",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    if test == \"\":\n        return {}\n    test = test.split(' ')\n    # print(test)\n    dic = {}\n    for l in test:\n        if l in dic:\n            dic[l] += 1\n        else:\n            dic[l] = 1\n    return dic\n",
        "test": "assert     histogram('a b c d') == {'a': 1, 'b': 1, 'c': 1, 'd': 1}, 'Check the data type for the result'",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    new_string = \"\"\n    for char in s:\n        if char not in c:\n            new_string += char\n    return (new_string,new_string==s[::-1])\n",
        "test": "assert     reverse_delete('a', 'a') == ('', False), ''",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    return [\"the number of odd elements \"+str(len([x for x in num if int(x)%2==1]))+\" in the \"+str(num)+\" of the \"+str(i)+\"nput.\" for i,num in enumerate(lst)]\n    # return [\"the number of odd elements \"+str(len([x for x in num if int(x)%2==1]))+\" in the \"+str(num)+\" of the \"+str(i)+\"nput.\" for i,num in enumerate(lst)]\n    # return [\"the number of odd elements \" + str(len([int(x) for x in num if int(x)%2==1])) + \" in the \" + str(num) + \" of the \" + str(i) + \"nput.\" for i,num in enumerate(lst)]\n",
        "test": "assert     odd_count([\"d0ffd\", \"5\", \"3\", \"\", \"3\", \"9\"]) == [2, 1, 0, 0, 2, 2], \"Check your function\"",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1] + nums[i]:\n                nums[i] = nums[i-1] + nums[i]\n            min_sum = min(min_sum, nums[i])\n        return min_sum\n",
        "test": "assert     minSubArraySum([7, 1, 5, 3, 6, 4]) == 7",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    # sum_of_row_wells = []\n    # for row in grid:\n    #     sum_of_row_wells.append(sum(row))\n    # print(sum_of_row_wells)\n    # return max(sum_of_row_wells)\n    wells_capacity = 0\n    for row in grid:\n        wells_capacity += sum(row)\n    buckets_capacity = 0\n    for row in grid:\n        buckets_capacity += sum(row) * capacity\n    if wells_capacity == buckets_capacity:\n        return 0\n    elif wells_capacity > buckets_capacity:\n        return math.ceil(wells_capacity / buckets_capacity)\n",
        "test": "assert ",
        "num_ids": 2289,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "test": "assert     sort_array([0, 1, 2, 5]) == [0, 1, 2, 5]",
        "num_ids": 1807,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    # your code here\n    return []\n",
        "test": "assert     select_words('', 0) == []",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    for i in range(1, len(word)-1):\n        if word[i] in 'aeiou' and word[i-1] not in 'aeiou' and word[i+1] not in 'aeiou':\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"z\") == \"\", \"Oops, it should be empty string\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    # Your code here\n    return 'Yes'\n",
        "test": "assert     match_parens(['(',')','(',')','(',')']) == 'Yes'",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "    if k > len(arr):\n        raise Exception(\"k must be less than or equal to the length of the array.\")\n    arr.sort()\n    return arr[::-1][:k]\n",
        "test": "assert     (maximum([2, 9, 7, 1, 3, 8, 6], 2) == [9, 8])",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    \n    answer = 0\n    for i, val in enumerate(lst):\n        if i % 2!= 0 and val % 2!= 0:\n            answer += val\n    return answer",
        "test": "assert     solution([3,1,5,7,2]) == 8",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([0], 1) == 0, \"wrong result\"",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    list_odd = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3 * n + 1\n        list_odd.append(int(n))\n    return list_odd\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    date = date.split('-')\n    if len(date) == 3:\n        if int(date[0]) in range(1,13):\n            if int(date[1]) in range(1,32):\n                if int(date[2]) in range(1900, 2020):\n                    return True\n    return False\n",
        "test": "assert     valid_date(\"03-03-2003\") == True",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    # return [word for word in txt.split()]\n    # return txt.split()\n    # return list(filter(None, [word for word in txt.split()]))\n    # return list(filter(None, txt.split()))\n    return [word for word in txt.split() if word]\n",
        "test": "assert split_words(\"\") == []",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5, 1]) == False",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return \"NO\"\n",
        "test": "assert     intersection([(1, 2), (3, 4)], [(4, 5), (7, 9)]) == \"NO\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    result = None\n    if arr:\n        result = sum([abs(i) for i in arr]) * (-1 if arr[0] < 0 else 1)\n    return result\n",
        "test": "assert     prod_signs([]) ==     None",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    # Handle edge cases\n    if not grid or not grid[0]:\n        return []\n    if k <= 0:\n        return []\n    if k == 1:\n        return [grid[0][0]]\n    \n    # We need to initialize our DFS with the first row and first column\n    # of the grid\n    curr_row = 0\n    curr_col = 0\n    \n    # We will hold our answer in a stack\n    ans = [grid[0][0]]\n    \n    # We will keep track of how many cells we have visited\n    num_visited = 1\n    \n    # This will allow us to know when we've reached the end of the grid\n    # without messing up our traversal\n    row_limit = len(grid) - 1\n    col_limit = len(grid[0]) - 1\n    \n    # This will allow us to know when we've reached the end of the path\n    # without messing up our traversal\n    k_limit = k - 1\n    \n    # We will only traverse the grid if the cell we're on is not our target\n    # value\n    while num_visited < k:\n        # We will only traverse the grid if we haven't reached the limit\n        if curr_row <= row_limit:\n            # We will traverse left until we reach the end of the current row\n            # or we've already visited the target value\n            while curr_col <= col_limit and grid[curr_row][curr_col]!= ans[-1]:\n                ans.append(grid[curr_row][curr_col])\n                curr_col += 1\n                num_visited += 1\n                \n            # If we have reached the end of the row, move on to the next row\n            if curr_col == col_limit + 1:\n                curr_row += 1\n                curr_col = 0\n        \n        # We will only traverse the grid if we haven't reached the limit\n        if curr_col <= col_limit:\n            # We will traverse up until we reach the end of the current column\n            # or we've already visited the target value\n            while curr_row <= row_limit and grid[curr_row][curr_col]!= ans[-1]:\n                ans.append(grid[curr_row][curr_col])\n                curr_row += 1\n                num_visited += 1\n                \n            # If we have reached the end of the row, move on to the next column\n            if curr_row == row_limit + 1:\n                curr_row = 0\n                curr_col += 1\n                \n        if num_visited == k:\n            # We've reached the end of the path so we will return the answer\n            break\n        \n    return ans\n",
        "test": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1], \"AssertionError\"",
        "num_ids": 2936,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 2]\n    tribonacci = [3, 1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + (i // 2))\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci\n",
        "test": "assert ",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    digits = 1\n    if n == 0:\n        return 0\n    else:\n        while n > 0:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = n // 10\n                digits = digits * (n % 10)\n        return digits\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    if string == \"\":\n        return False\n    \n    stack = []\n    \n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) > 0 and stack[len(stack) - 1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return True\n",
        "test": "assert     is_nested('[]') == True",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    new_lst = [int(math.ceil(i ** 2)) for i in lst]\n    return sum(new_lst)\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    # if len(txt) > 0:\n    #     if txt[-1].isalpha():\n    #         return True\n    #     return False\n    # return False\n    return txt.endswith((' ', '.'))\n",
        "test": "assert     check_if_last_char_is_a_letter(\"hello world!\") == False",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    n = len(arr)\n    ans = -1\n    for i in range(1,n):\n        if arr[i] < arr[i-1]:\n            ans = i\n    return ans\n",
        "test": "assert     can_arrange([1, 1, 1, 1, 1]) == -1",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 136,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    max_neg, min_pos = None, None\n    for num in lst:\n        if num >= 0 and min_pos is None:\n            min_pos = num\n        elif num > 0 and num < min_pos:\n            min_pos = num\n        elif num <= 0 and num > max_neg:\n            max_neg = num\n        elif num < 0 and num > max_neg:\n            max_neg = num\n    return (max_neg, min_pos)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    try:\n        return max(a, b)\n    except:\n        try:\n            return max(float(a), float(b))\n        except:\n            return None\n",
        "test": "assert     compare_one(3.14, 2.71) == 3.14",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    n = abs(n)\n    for i in range(2, n):\n        if (n - i * 2) % 4 == 0:\n            return True\n    return False\n",
        "test": "assert     is_equal_to_sum_even(10) == True, \"Incorrect\"",
        "num_ids": 1821,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    \n    # The code below is incorrect and we'll fix it in a coming task\n    \n    if n < 0:\n        raise ValueError('Invalid input, n should be >= 0')\n    if n == 0:\n        return 1\n    else:\n        return n*special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    new_text = []\n    for i in text:\n        if i =='':\n            new_text.append('_')\n        else:\n            new_text.append(i)\n    # remove last underscore if no space\n    if new_text[-1] == '_':\n        new_text.pop()\n",
        "test": "assert ",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if 3 <= len(file_name) <= 3:\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name[:file_name.index('.')] == '':\n        return 'No'\n    elif file_name[file_name.index('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n    \n    ",
        "test": "assert     file_name_check('0') == 'No'",
        "num_ids": 2586,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    splitted_sentence = sentence.split(\" \")\n    primes = []\n    for word in splitted_sentence:\n        if is_prime(len(word)):\n            primes.append(word)\n    return \" \".join(primes)",
        "test": "assert     words_in_sentence('Cats are very cutie') == 'Cats are very cute animals.'",
        "num_ids": 2083,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return False\n",
        "test": "assert not simplify(\"1/2\", \"1/2\")",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))\n",
        "test": "assert     order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10 % 10 % 2 == 1 and num % 10 % 2 == 1):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1, 2, 3, 4]) == 0",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    result = ()\n    if planet1 in planets and planet2 in planets:\n        for i in range(len(planets)):\n            if planets[i] == planet1:\n                for j in range(len(planets)):\n                    if planets[j] == planet2:\n                        if (planets[i] < planets[j]) and (planets[j] < planets[i+1]):\n                            result += planets[i+1],\n                        elif (planets[i] > planets[j]) and (planets[j] > planets[i+1]):\n                            result += planets[i+1],\n    return result\n",
        "test": "assert bf('Mercury', 'Pluto') == ()",
        "num_ids": 2866,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return sorted(list(set(lst)))\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    if n == 1:\n        return y\n    elif n % 2 == 0 or n < 1:\n        return x_or_y(n-1, x, y)\n    else:\n        return x_or_y(n-1, y, x)\n",
        "test": "assert     x_or_y(3, 4, 6) == 4",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    odd_sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            odd_sum += i ** 2\n    return odd_sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    \n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"Correct.\"",
        "num_ids": 1973,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    sm = 0\n    cap = 0\n    for i in range(0, len(extensions)):\n        if extensions[i][0].isupper():\n            cap += 1\n        else:\n            sm += 1\n    return class_name + \".\" + extensions[0]\n",
        "test": "assert     Strongest_Extension('Dancer', ['Dancer', 'Dancer1', 'Dancer2']) == 'Dancer.Dancer'",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if b in a or a in b:\n        return True\n    elif len(a) == 1 or len(b) == 1:\n        return False\n    else:\n        return cycpattern_check(a[1:],b[1:]) or cycpattern_check(a,b[1:]) or cycpattern_check(a[1:],b)\n",
        "test": "assert     cycpattern_check(\"abcd\",\"abcd\") == True, \"False\"",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    return (num // 10) % 2, num % 10\n",
        "test": "assert     even_odd_count(1) == (0, 1)",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    numbers = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n               50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    roman = ''\n    # Iterate over each key in the dictionary\n    for key in numbers:\n        # If the input number is divisible by the key\n        while number >= key:\n            # Append the roman equivalent of the key\n            roman += numbers[key]\n            # Decrement the input number\n            number -= key\n    # Return the roman number\n    return roman\n",
        "test": "assert     int_to_mini_roman(1) == 'I'",
        "num_ids": 3008,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return a*a+b*b==c*c or b*b+c*c==a*a or a*a+c*c==b*b",
        "test": "assert     right_angle_triangle(3, 4, 5) is True",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    words = sorted(words, key=lambda word: len(set(word)))\n    max_len_word = words[0]\n    for word in words:\n        if len(set(word)) > len(set(max_len_word)):\n            max_len_word = word\n    return max_len_word\n",
        "test": "assert     find_max([\"dog\", \"dog\", \"dog\"]) == \"dog\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    remaining_rabbit = remaining + number\n    if remaining_rabbit >= need:\n        return [remaining_rabbit - need, 0]\n    else:\n        eaten_rabbit = number - need + remaining\n        remaining_rabbit = remaining - (remaining_rabbit - need)\n        return [eaten_rabbit, remaining_rabbit]\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "test": "assert     do_algebra([\"+\"], [10, 20]) == 30",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    s = s.lower()\n    new_string = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in s[i].lower():\n                new_string += s[i].lower()\n            else:\n                new_string += s[i].upper()\n        else:\n            new_string += s[i]\n    return new_string\n",
        "test": "assert     solve('1') == '1'",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") is None, \"Wrong result for empty input\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    # get even numbers between a and b\n    # convert to list of integers\n    # sort the list\n    # return the list\n    evens = []\n    # Use the modulo operator to get the remainder of each value.\n    # if the value is 0, then it's even.\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            evens.append(i)\n    return sorted(evens)\n",
        "test": "assert     generate_integers(8, 2) == []",
        "num_ids": 1201,
        "indeed": false
    }
]