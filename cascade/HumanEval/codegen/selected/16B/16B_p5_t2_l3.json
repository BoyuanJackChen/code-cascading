[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return any([abs(numbers[i] - numbers[i + 1]) <= threshold for i in range(len(numbers) - 1)])\n",
        "test": "assert     has_close_elements([1, 2, 3], 0.1) == False"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    pars = []\n    l = len(paren_string)\n    i = 0\n    while i < l:\n        if paren_string[i] == '(':\n            j = i + 1\n            while j < l and paren_string[j]!= ')':\n                j += 1\n            if j < l:\n                pars.append(paren_string[i:j+1])\n                i = j + 1\n            else:\n                pars.append(paren_string[i:])\n                break\n        i += 1\n    return pars\n",
        "test": "assert     separate_paren_groups(\"(1, 2) (3, 4) (5, 6)\") == [\"(1, 2)\", \"(3, 4)\", \"(5, 6)\"]"
    },
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return int(number*10)/10\n",
        "test": "assert "
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return 0\n    average = sum(numbers) / n\n    sum_of_absolute_differences = 0\n    for number in numbers:\n        sum_of_absolute_differences += abs(number - average)\n    return sum_of_absolute_differences / n\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    res = []\n    for i, num in enumerate(numbers):\n        if i % 2 == 0:\n            res.append(num)\n        else:\n            res.append(delimeter)\n            res.append(num)\n    return res\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Idea: split by spaces and iterate over each group and check for number of nested parentheses.\n    paren_groups = paren_string.split(' ')\n    return_list = []\n",
        "test": "assert     parse_nested_parens(\"(((((((x))))))\") == [2, 2, 2, 1, 1, 0, 1]"
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'], 'a') == ['a', 'a', 'a', 'a']"
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "test": "assert     sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index == 0:\n            result.append(number)\n        elif number > result[-1]:\n            result.append(number)\n        else:\n            result.append(result[-1])\n    return result\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # Find the longest prefix that is a palindrome.\n    prefix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            prefix = string[:i+1]\n    # Find the longest postfix that is a palindrome.\n    postfix = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            postfix = string[i:]\n    # Return the original string appended with the reverse of a string prefix that comes before the palindromic suffix.\n    return prefix + string[len(prefix):] + postfix[::-1]\n",
        "test": "assert     make_palindrome(\"a\") == \"aa\""
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return ''.join([str(int(x!= y)) for x, y in zip(a, b)])\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\""
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "test": "assert     longest(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) == 'abcd'"
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n",
        "test": "assert     greatest_common_divisor(6,     9) == 3"
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    prefixes: List[str] = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]"
    },
    {
        "number": 15,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return \" \".join(list(map(str, range(n + 1))))\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    distinct_characters = set()\n    for char in string.lower():\n        distinct_characters.add(char)\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters('abcABC') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    lst = []\n    for note in music_string.split('|'):\n        note = note.replace('.', '|')\n        lst.extend([int(i) for i in note.split(' ')])\n    return lst\n",
        "test": "assert     parse_music(\"1234o.567|\") == [4, 2, 4, 1, 2, 0, 0, 1, 2]"
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return string.count(substring)\n",
        "test": "assert     how_many_times('aba', 'a') == 2"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return''.join(sorted(numbers.split()))\n    # return''.join(sorted(numbers.split(), key=int))\n",
        "test": "assert     sort_numbers('four three two one') == '1324'"
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # find the minimum and maximum numbers\n    # sort the list and return the closest pair\n    return min(numbers), max(numbers)\n",
        "test": "assert     find_closest_elements([1, 1]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    if minimum == maximum:\n        return [0] * len(numbers)\n    else:\n        return [(number - minimum) / (maximum - minimum) for number in numbers]\n",
        "test": "assert     rescale_to_unit([0, 0]) == [0, 0]"
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [i for i in values if type(i) == int]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 'a', 'b', 'c']) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n",
        "test": "assert     strlen(\"dog\") == 3, \"incorrect length\""
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n == 1:\n        return 1\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    res = []\n    for x in range(2, n + 1):\n        while n % x == 0:\n            res.append(x)\n            n /= x\n    return res\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    unique_nums = set()\n    unique_nums_list = []\n    for num in numbers:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            unique_nums_list.append(num)\n    return unique_nums_list\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \"\".join([char.swapcase() for char in string])\n    # list_string = list(string)\n    # for i in range(len(list_string)):\n    #     if list_string[i].isupper():\n    #         list_string[i] = list_string[i].lower()\n    #     else:\n    #         list_string[i] = list_string[i].upper()\n    # return \"\".join(list_string)\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['a', 'b', 'c']) == 'abc'"
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"c\") == [\"cherry\", \"coconut\"]"
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([0, -1, -2, -3, 4])     == [4]"
    },
    {
        "number": 31,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(5) == True"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if len(xs) % 2 == 1:\n        raise ValueError('Odd number of coefficients not allowed.')\n    if min(xs) > 0 or max(xs) < 0:\n        raise ValueError('Only coefficients in range [-1, 1] are allowed.')\n    for i in range(1, len(xs)):\n        if abs(xs[i]) > abs(xs[i-1]):\n            return i / (len(xs) - 1)\n    return xs[0]\n",
        "test": "assert     poly([0, 1], 1) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    #Write your code here\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return [l[0]] + sort_third(l[1:])\n        #return [l[0]] + sort_third(l[1:]) + [l[0]]\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sorted(set(l))",
        "test": "assert     unique([1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"unique\""
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            result += 1\n    return result\n",
        "test": "assert     fizz_buzz(11) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    length = len(l)\n    odds = [l[i] for i in range(length) if i % 2 == 1]\n    evens = [l[i] for i in range(length) if i % 2 == 0]\n    evens.sort()\n    l[::2] = evens\n    return l\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\""
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    current = 2\n    prev = 1\n    count = 3\n    while count < n:\n        current, prev = current + prev, current\n        if is_prime(current):\n            count += 1\n    return current\n",
        "test": "assert     prime_fib(2) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    l_copy = l[:]\n    for i in l_copy:\n        if l_copy.count(i) == 1:\n            l_copy.remove(i)\n    for i in l_copy:\n        if l_copy.count(i) == 1:\n            l_copy.remove(i)\n    for i in l_copy:\n        if l_copy.count(i) == 1:\n            l_copy.remove(i)\n    return len(l_copy) == 0\n",
        "test": "assert     triples_sum_to_zero([-2, -1, 1, 2, 3, 4]) == True, \"Check the example\""
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # Initialize the number of collisions to zero.\n    collisions = 0\n    # Loop over the range of n from zero to n - 1.\n    for i in range(0, n - 1):\n        # Increment the number of collisions by two, assuming that\n        # the two cars have not collided.\n        collisions += 2\n        # Swap the current two cars so that the next time the left-to-right\n        # car hits the right-to-left car, it won't be counted as a collision.\n        # The number of collisions is always even.\n        j = (i + 1) % n\n        temp = cars[i]\n        cars[i] = cars[j]\n        cars[j] = temp\n    return collisions\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]"
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(l) == 1:\n        return False\n    else:\n        for i in l:\n            for j in l:\n                if i + j == 0 and i!= j:\n                    return True\n        return False\n    \ndef quadratic_roots(a,b,c):\n    \"\"\"\n    quadratic_roots takes three integers as input, a, b, and c, and returns\n    the two integers that form the real solution to the quadratic equation\n    ax^2 + bx + c = 0. If no real solution exists, it returns \"No Real Roots\"\n    >>> quadratic_roots(1,2,1)\n    (-0.5, 0.5)\n    >>> quadratic_roots(1,1,1)\n    (-1.0, 1.0)\n    >>> quadratic_roots(1,2,3)\n    'No Real Roots'\n    >>> quadratic_roots(-5,2,6)\n    (-1.0, 2.0)\n    >>> quadratic_roots(1,-2,1)\n    'No Real Roots'\n    \"\"\"\n    d = math.sqrt(b**2 - 4*a*c)\n    if d == 0:\n        return(-b / (2*a))\n    elif d >= 0:\n        return(((-b) + d) / (2*a), ((-b) - d) / (2*a))\n    else:\n        return 'No Real Roots'\n    \ndef hash_it(s):\n    \"\"\"\n    hash_it takes a string as an input and returns the hash value of the string.\n    If the string is not a string, it raises a TypeError.\n    >>> hash_it('python')\n    377204329849653965\n    >>> hash_it(1234)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: must be str, not int\n    \"\"\"\n    if type(s)!= str:\n        raise TypeError('must be str, not'+ str(type(s)))\n    hv = 0\n    for c in s:\n        hv = hv + ord(c)\n    return hv % 100\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Empty list\""
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert     change_base(10, 2) == '1010'"
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return (h * a) / 2\n",
        "test": "assert     triangle_area(10,10) == 50, \"triangle area is wrong\""
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(1) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
        "test": "assert     median([1, 2, 3, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('asdfdsa') == True"
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    assert 0 <= n < p\n    res = 1\n    while n > 0:\n        if n & 1 == 1:\n            res = (res * 2) % p\n        n >>= 1\n        res = (res * 2) % p\n    return res\n",
        "test": "assert modp(2, 16) == 8"
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"barbados\")) == \"barbados\""
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    vowels = 'aeiou'\n    result = ''\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n",
        "test": "assert     remove_vowels('This website is for losers LOL!') == 'Ths wbst s fr lsrs LL!'"
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 3, 2, 6], 5) == False"
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "test": "assert     same_chars('', '') == True"
    },
    {
        "number": 55,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(0) == 0"
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    bracket_pairs = []\n    for i in range(len(brackets) - 1):\n        if brackets[i] == \"<\":\n            bracket_pairs.append(\">\")\n        elif brackets[i] == \">\":\n            bracket_pairs.append(\"<\")\n    if brackets[-1] == \"<\":\n        bracket_pairs.append(\">\")\n    elif brackets[-1] == \">\":\n        bracket_pairs.append(\"<\")\n    return bracket_pairs == list(brackets)\n",
        "test": "assert     correct_bracketing(\"<\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    if len(l) < 2:\n        return True\n    elif l[1] < l[0]:\n        return l[1:] == sorted(l[1:], reverse=True)\n    elif l[1] > l[0]:\n        return l[1:] == sorted(l[1:])\n    else:\n        return monotonic(l[1:])\n",
        "test": "assert     monotonic([]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result.sort()\n    return result\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(4) == 2, f\"Wrong result: {largest_prime_factor(4)}\""
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    sum_of_n = 0\n    for i in range(1, n + 1):\n        sum_of_n += i\n    return sum_of_n\n",
        "test": "assert "
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    brackets = [i for i in brackets if i in \"()\"]\n    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     correct_bracketing('(()()()())') == True"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    res = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        res[i] = xs[i + 1] * (i + 1)\n    return res\n",
        "test": "assert     derivative([]) == []"
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    i = 0\n    for c in s:\n        if c in 'aeiouyAEIOUY':\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     vowels_count('hello') == 2"
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    x = str(x)\n    return x[-shift:] + x[:-shift]\n",
        "test": "assert     circular_shift(42, 1) == \"24\""
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    count = 0\n    for char in s:\n        if char.isalpha():\n            count += ord(char)\n    return count\n",
        "test": "assert     digitSum(\"a\") == 97"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    \n    nums = s.split()\n    \n    if nums[0] == '0' or nums[1] == '0':\n        return 0\n    elif int(nums[0]) < int(nums[1]):\n        return 0\n    else:\n        return int(nums[0]) - int(nums[1])\n",
        "test": "assert     fruit_distribution('3 2',5) == 1, \"Test 1 failed\""
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # Time: O(n)\n    # Space: O(1)\n    evens = []\n    for node in arr:\n        if node % 2 == 0:\n            evens.append(node)\n    \n    if len(evens) == 0:\n        return []\n    \n    min_value = min(evens)\n    index = evens.index(min_value)\n    return [min_value, index]\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    freq = {x:0 for x in lst}\n    for i in lst:\n        freq[i] += 1\n    for i in freq.keys():\n        if i == freq[i]:\n            return i\n    return -",
        "test": "assert "
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if len(lst) % 2 == 0:\n            result.append(min(lst))\n            lst = [num for num in lst if num > min(lst)]\n        else:\n            result.append(max(lst))\n            lst = [num for num in lst if num < max(lst)]\n    return result\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    side_1 = a\n    side_2 = b\n    side_3 = c\n    total_sides = side_1 + side_2 + side_3\n    total_sides_list = [side_1, side_2, side_3]\n    # Convert to float, remove non-triangle values\n    for item in total_sides_list:\n        if isinstance(item, float):\n            total_sides = total_sides - item\n        else:\n            total_sides = total_sides - item\n    if total_sides > 0:\n        return round(total_sides * 0.5, 2)\n    else:\n        return -1\n",
        "test": "assert "
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    def is_palindrome(string):\n        return string == string[::-1]\n    return is_palindrome(q) and sum(q) <= w\n",
        "test": "assert     will_it_fly([10, 20, 30, 40], 80) == False"
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    min_change = len(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] or arr[i] == arr[j] + 2 or arr[i] == arr[j] - 2:\n                min_change = min(min_change, j-i)\n    return min_change\n",
        "test": "assert     smallest_change([1, 3, 5, 5, 3]) == 1, \"Incorrect output\""
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    num1 = 0\n    num2 = 0\n    if len(lst1) == len(lst2):\n        return lst1\n    for i in lst1:\n        num1 += len(i)\n    for i in lst2:\n        num2 += len(i)\n    if num1 > num2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert     total_match(['ABC', 'HI', 'ABD', '12C'], ['ABC', 'HI', 'ABD', '12C']) == ['ABC', 'HI', 'ABD', '12C']"
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    i = 2\n    while i < a:\n        if a % i!= 0:\n            i += 1\n            continue\n        else:\n            a = a/i\n            i += 1\n            continue\n    if a == 1:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     is_multiply_prime(2) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if x == 1:\n        return True\n    elif x < 1 or n < 1:\n        return False\n    else:\n        if x % n == 0:\n            return True\n        return is_simple_power(x, n-1)\n",
        "test": "assert     is_simple_power(1, 1) is True, \"1**1=1\""
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if a < 0:\n        return True\n    if a ** (1/3) % 1 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # TODO: your code here\n    return 0\n",
        "test": "assert     hex_key('') == 0, \"Wrong answer!\""
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n",
        "test": "assert     decimal_to_binary(1) == '0b1'"
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    last_occur = {}\n    for i in range(len(s)):\n        last_occur[s[i]] = i\n    \n    while len(s) > 2:\n        s = \"\".join([x for x in s if x!= s[1]])\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 1):\n            if last_occur[s[i]] == last_occur[s[i+1]]:\n                return False\n            last_occur[s[i]] = i\n    return True\n",
        "test": "assert     is_happy(\"abcba\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    grades_to_letter_grade = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n",
        "test": "assert     numerical_letter_grade([4.0, 4.3, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\"
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    leng = len(string)\n    if leng > 1:\n        for i in range(2,leng):\n            if leng % i == 0:\n                return False\n        return True\n    return False\n",
        "test": "assert     prime_length('1') is False"
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return bin(N)[2:]\n",
        "test": "assert     solve(0) == '0'"
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    s = 0\n    for i in range(0, len(lst), 2):\n        if (lst[i] % 2 == 0):\n            s = s + lst[i]\n    return s\n",
        "test": "assert     add([2, 3, 4, 5, 6, 7]) == 12"
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    try:\n        return''.join(sorted(''.join(s.split(' '))))\n    except:\n        return None\n",
        "test": "assert     anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if len(lst) == 0:\n        return []\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort()\n    result.sort(key=lambda t: -t[1])\n    return result\n",
        "test": "assert     get_row([[3, 4, 5, 6], [1, 3, 8, 2], [2, 6, 9, 1], [1, 4, 9, 3]], 10) ==     []"
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([1,2,3]) == [1,2,3]"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    return s[::-2] + s[1::-2]\n",
        "test": "assert     encrypt(\"\") == \"\""
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # your code\n    if len(lst) == 1:\n        return None\n    \n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) == 1:\n        return None\n    \n    return lst[1]\n    ",
        "test": "assert     next_smallest([1, 2, 3, 4, 5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return 'I' in S\n",
        "test": "assert     is_bored(\"I don't know why I'm bored\") == 1, \"Boredom: 1\""
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(2, 1, 2) == False, \"Fails\""
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    return ''.join(\n        [\n            (lambda char: char.lower() if char.upper() in ['A', 'E', 'I', 'O', 'U'] else char)(letter)\n            for letter in message\n        ]\n    ",
        "test": "assert     'Hi there!' == encode('hI tHEre!')"
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return len(str(max(lst)))\n",
        "test": "assert     skjkasdkd([1, 3, 2, 1, 5, 6, 8, 3, 7, 3]) ==     1"
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if not dict:\n        return False\n    return (all(str(key).islower() for key in dict) and all(str(key).isupper() for key in dict))\n",
        "test": "assert     check_dict_case({}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # initialise an empty list\n    primes = []\n",
        "test": "assert "
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return a*b\n",
        "test": "assert     multiply(1, 2) == 2"
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sum([1 for char in s[1::2] if char.isupper()])\n",
        "test": "assert     count_upper('') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    num = float(value)\n    num = int(num) if num % 1 == 0 else num\n    num = int(num+0.5) if num > 0 else int(num-0.5)\n    return num\n",
        "test": "assert     closest_integer(\"14.51\") == 15"
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if n % 2 == 1:\n        pile_size = n\n        increment = 1\n    else:\n        pile_size = n - 1\n        increment = 2\n    levels = []\n    for level_size in range(pile_size, 0, -increment):\n        levels.append(level_size)\n    return levels\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return s.split(\", \")\n    \ndef brackets(s):\n    \"\"\"\n    You will be given a string of brackets. Your task is to return an array of\n    tuples containing all of the \"good\" substrings of the original string. The\n    only \"good\" substrings are those that match the following criteria:\n    \n    - The substrings are closed by the same kind of brackets: \"[\", \"(\", \"{\" or \"}\".\n    - The substrings do not overlap.\n    - The substrings are not nested.\n    - Every opening bracket has a corresponding closing bracket.\n    \n    For example:\n    brackets(\"[foo(bar)baz{blah}]\") == [(\"foo(bar)baz{blah}\", 13)]\n    brackets(\"foo(bar)baz{blah[[extra]]string]\") == [(\"foo(bar)baz{blah[[extra]]string}\", 13)]\n    brackets(\"foo(bar)baz{blah[extra]string]\") == []\n    \"\"\"\n    # parse the brackets\n    bracket_stack = []\n    in_bracket = \"\"\n    is_closing = False\n    for bracket in s:\n        if bracket == \"[\" or bracket == \"(\" or bracket == \"{\" or bracket == \"}\":\n            is_closing = True if bracket == \"]\" or bracket == \")\" or bracket == \"}\" else False\n            if not is_closing:\n                in_bracket += bracket\n        elif bracket == \"]\" or bracket == \")\" or bracket == \"}\":\n            is_closing = True if bracket == \"]\" else False\n            if in_bracket!= \"\":\n                in_bracket += bracket\n                bracket_stack.append((in_bracket, len(in_bracket)))\n                in_bracket = \"\"\n            else:\n                if is_closing:\n                    return []\n        else:\n            if in_bracket!= \"\":\n                in_bracket += bracket\n            else:\n                bracket_stack.append((bracket, len(bracket)))\n    if in_bracket!= \"\":\n        bracket_stack.append((in_bracket, len(in_bracket)))\n    \n    # find the good substrings\n    results = []\n    for bracket in bracket_stack:\n        is_good = False\n        if bracket[0] == \"]\" or bracket[0] == \")\" or bracket[0] == \"}\":\n            is_good = True\n        elif bracket[1] == 1:\n            is_good = True\n        elif bracket[1] == 2:\n            if bracket[0] == \"[\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"]\":\n                is_good = True\n            if bracket[0] == \"{\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"}\":\n                is_good = True\n            if bracket[0] == \"(\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \")\":\n                is_good = True\n        elif bracket[1] == 3:\n            if bracket[0] == \"[\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"]\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \"]\":\n                is_good = True\n            if bracket[0] == \"{\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"}\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \"}\":\n                is_good = True\n            if bracket[0] == \"(\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \")\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \")\":\n                is_good = True\n        else:\n            is_good = False\n        if is_good:\n            results.append((s[bracket[1]-1:bracket_stack[bracket_stack.index(bracket)-1][1]+1], bracket[1]))\n    return results\n",
        "test": "assert     words_string('Hi') == ['Hi']"
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for num in range(x, y + 1):\n        if num % 2 == 0 and num >= x and num <= y:\n            return num\n    return -1\n",
        "test": "assert     choose_num(3, 6) == 4, choose_num(3, 6)"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if x == []:\n        return []\n    elif x == [1]:\n        return []\n    elif x == [2]:\n        return [1]\n    elif x == [2, 4]:\n        return []\n    else:\n        new_list = []\n        for each in x:\n            if not any(each % 2 == 0 for each in x):\n                new_list.append(each)\n        return new_list\n",
        "test": "assert "
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    nums = [str(i) for i in arr if 1 <= i <= 9]\n    \n    return nums[::-1] if nums else []",
        "test": "assert     [str(n) for n in by_length(['6', '0', '4', '5', '1', '7', '8', '9', '2'])] == ['Nine', 'Six', 'Five', 'Four', 'Seven', 'Two', 'Eight', 'Six', 'Five']"
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    numbers = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            numbers.append(reduce(lambda x, y: x*y, range(1, i+1)))\n        else:\n            numbers.append(sum(range(1, i+1)))\n    return numbers\n",
        "test": "assert     f(1) == [1], \"Your code has some errors\""
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    return (sum(1 for i in range(1, n+1) if is_palindrome(i)),\n            sum(1 for i in range(1, n+1) if not is_palindrome(i)))\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    count = 0\n    for number in arr:\n        if number >= 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    \n    if not arr:\n        return True\n    # length of the array\n    n = len(arr)\n    # right shift operation\n    right_shift_count = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            break\n        right_shift_count += 1\n    if right_shift_count == n - 1:\n        return True\n    return False\n    \narr = [3, 5, 4, 1, 2]\nprint(move_one_ball(arr))",
        "test": "assert     move_one_ball([1, 3, 2, 4, 5, 6]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # handle trivial cases\n    if lst1 == lst2:\n        return \"YES\"\n    if lst2[0] % 2 == 0:\n        return \"NO\"\n    for i in range(len(lst1)):\n        lst2[0] += lst1[i]\n        lst1[i] = lst2[0]\n        if lst1[i] % 2 == 0:\n            return \"YES\"\n    return \"NO\"",
        "test": "assert     exchange([2], [2]) == \"YES\""
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    # Using dict comprehension\n    # O(n) time complexity\n    # O(n) space complexity\n    \n    histogram = {ch: test.count(ch) for ch in set(test)}\n    \n    return histogram",
        "test": "assert     histogram(\"a\") == {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    \n    assert isinstance(s, str)\n    assert isinstance(c, str)\n    if c == '':\n        return s, True\n    n = len(s)\n    for i in range(n):\n        if s[i] == c[0]:\n            #we have a match!\n            #let's try to delete the first character in c\n            s = s[:i] + s[i+1:]\n            return reverse_delete(s, c[1:])\n    return s, False\n    \nif __name__ == '__main__':\n    s = \"abcdef\"\n    c = \"b\"\n    print(reverse_delete(s,c))",
        "test": "assert     reverse_delete(\"abc\",\"\") == (\"abc\", True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return [\"the number of odd elements \"+str(len([i for i in lst[k] if int(i)%2==1]))+\n        \"n the str\"+str(k+1)+\" of the \"+str(k+1)+\"nput.\" for k in range(len(lst))]\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    if not nums: return 0\n    curr = minSum = nums[0]\n    for i in nums[1:]:\n        curr += i\n        if curr < minSum:\n            minSum = curr\n        if curr < 0: curr = 0\n    return minSum\n",
        "test": "assert     minSubArraySum([3, 1, 1, 1, 0, 0, 0, 2, 3]) == 3"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not grid or not grid[0]:\n        return 0\n",
        "test": "assert     max_fill([[1,0,0,0,1],[1,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,1]], 1) == 3, \"test2\""
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     [4, 4, 4, 4, 4, 4] == sort_array([4, 4, 4, 4, 4, 4])"
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if not s:\n        return []\n    \n    s = s.split()\n    words = []\n    for word in s:\n        consonants = 0\n        for letter in word:\n            if letter.lower() in \"aeiouy\":\n                consonants += 1\n        if consonants == n:\n            words.append(word)\n    return words",
        "test": "assert     select_words('', 1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    vowels = set(\"aeiou\")\n    \n    if not word:\n        return \"\"\n    \n    for i in range(len(word)-1):\n        if word[i].lower() in vowels and word[i+1].lower() not in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel('ssab') == 'a', \"WA FAILED: get_closest_vowel('ssab') == 'a'\""
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return 'Yes' if lst[0].count('(') == lst[0].count(')') and \\\n        lst[1].count('(') == lst[1].count(')') else 'No'",
        "test": "assert     match_parens(['(())()', '(())()']) == 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     maximum([], 1) == None"
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    \n    # i am going to return 0 since there are no odd numbers in even positions\n    # if even length list \n    if len(lst) % 2 == 0:\n        return 0\n    # if odd length list\n    else:\n        # i am going to set a variable to 0\n        sum = 0\n        # i am going to iterate through the list using a for loop\n        for i in lst:\n            # i am going to check if the position of the i in the list is even and if it is then it will add i to the sum\n            if lst.index(i) % 2 == 0:\n                sum += i\n    # return sum\n    return sum\n",
        "test": "assert "
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return sum(x if len(str(x)) <= 2 else int(str(x)[:2]) for x in arr[:k])\n",
        "test": "assert     add_elements([1, 2, 3, 4, 5], 3) == 6"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    odd_collatz_seq = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        odd_collatz_seq.append(n)\n    odd_collatz_seq.sort()\n    return odd_collatz_seq\n",
        "test": "assert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(5)"
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    def valid_day(day):\n        return day.isdigit() and 1<=int(day)<=31\n    def valid_month(month):\n        return month.isdigit() and 1<=int(month)<=12\n    def valid_year(year):\n        return year.isdigit() and int(year)>=1\n    def valid_date(date):\n        months=set([1,3,5,7,8,10,12])\n        months2=set([4,6,9,11])\n        days=[31,28,31,30,31,30,31,31,30,31,30,31]\n        year,month,day=date.split('-')\n        if len(year)!=4 or valid_year(year)==False:\n            return False\n        if len(month)!=2 or valid_month(month)==False:\n            return False\n        if int(month) not in months and int(month) not in months2:\n            return False\n        if int(month)==2 and valid_day(day)==False:\n            return False\n        if valid_day(day)==False:\n            return False\n        return True\n    return valid_date(date)\n",
        "test": "assert     valid_date(\"12-32-2020\") == False, \"Incorrect output\""
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return txt.split()\n",
        "test": "assert     split_words('hello world') == ['hello', 'world']"
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return True\n    else:\n        is_sorted = True\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1]:\n                is_sorted = False\n            if lst[i] > lst[i+1]:\n                is_sorted = False\n        return is_sorted\n",
        "test": "assert     is_sorted([1]) == True, \"Single element list should be sorted\""
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # https://app.codility.com/demo/results/training8YATO5-YHH/\n    # https://app.codility.com/demo/results/trainingXPYWMB-7KB/\n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection((1, 3), (2, 3)) == \"YES\", \"Intersection is a subinterval\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return None if not arr else \\\n        sum(abs(i) * (-1 if i < 0 else 1) for i in arr)\n",
        "test": "assert     prod_signs([]) == None, \"Check the size of your empty array!\""
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    pass\n",
        "test": "assert     minPath(grid2, k) == [2, 1]"
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    def get_tri(n):\n        \"\"\"Return the nth number of the Tribonacci sequence.\"\"\"\n        if n == 1 or n == 2:\n            return 3\n        else:\n            res = [1, 3, 2]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    res.append(res[i - 1] + (res[i - 2] / 2))\n                else:\n                    res.append(res[i - 1] + res[i - 2] + (res[i - 3] / 2))\n        return res\n    return get_tri(n)\n",
        "test": "assert     tri(1) == 3"
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    numbers = str(n)\n    a = []\n    for i in numbers:\n        if int(i)%2!= 0:\n            a.append(i)\n    if len(a) == 0:\n        return 0\n    else:\n        product = 1\n        for j in a:\n            product *= int(j)\n        return product\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    brackets = []\n    for bracket in string:\n        if bracket in '[({':\n            brackets.append(bracket)\n        else:\n            if not brackets:\n                return False\n            last_bracket = brackets.pop()\n            if bracket == ']' and last_bracket == '[' or \\\n                bracket == ')' and last_bracket == '(' or \\\n                bracket == '}' and last_bracket == '{':\n                continue\n            else:\n                return False\n    return not brackets\n",
        "test": "assert     is_nested(\"[]\") == True, \"error\""
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    result = 0\n    for item in lst:\n        item = int(item)\n        result += item**2\n    return round(result)\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return txt.isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"hello \") == False"
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(arr) < 2:\n        return -1\n    else:\n        # We can set i to 0 if the array is already sorted\n        i = 0\n        while i < len(arr) - 1:\n            # If the number is not greater than or equal to the number\n            # immediately before it\n            if arr[i] > arr[i + 1]:\n                # Return the index\n                return i\n            # Increment the index\n            i += 1\n        # If we get to the end of the array without finding an element\n        # which is less than the element immediately before it then return\n        # -1\n        return -1\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # YOUR CODE HERE\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if pos_ints:\n        return (max(neg_ints), min(pos_ints))\n    elif neg_ints:\n        return (None, None)\n    else:\n        return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if type(a) is str and type(b) is str:\n        return a if a.replace(\".\", \"\").replace(\",\", \"\") >= b.replace(\".\", \"\").replace(\",\", \"\") else b\n    elif type(a) is float or type(b) is float:\n        return a if a >= b else b\n    else:\n        return a if a >= b else b\n    return\n",
        "test": "assert     compare_one(1, 2) == 2"
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    k = 2 * n\n    return k % 2 == 0 and (n + k) % 4 == 0\n",
        "test": "assert     is_equal_to_sum_even(10) == False"
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    fact = n\n    for i in range(n - 1, 0, -1):\n        fact = fact * i\n    return fact\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    assert isinstance(text, str)\n    prev_spaces = -1\n    \n    fixed_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if prev_spaces == i:\n                fixed_text += '-'\n                prev_spaces = -1\n            else:\n                fixed_text += '_'\n                prev_spaces = i\n        else:\n            fixed_text += text[i]\n            prev_spaces = -1\n    \n    return fixed_text\n",
        "test": "assert     fix_spaces('a b  c d') == 'a_b__c_d'"
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if len(file_name.split(\".\")[0]) > 3:\n        return \"No\"\n    if len(file_name.split(\".\")[1])!= 3:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "test": "assert     file_name_check('python') == 'No', 'Wrong answer'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    try:\n        if len(lst) < 1:\n            return 0\n        else:\n            pass\n        return sum([a ** 2 if i % 3 == 0 else a ** 3 if i % 4 == 0 else a for i,a in enumerate(lst)])\n    except Exception as e:\n        print(e)\n",
        "test": "assert     sum_squares([1,3,5,4,1]) == 13"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    words = sentence.split(' ')\n    result = []\n",
        "test": "assert     words_in_sentence('i like apples and oranges') == 'i like apple and orange'"
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    numerator = int(n.split('/')[0])\n    denominator = int(n.split('/')[1])\n    return x == str(numerator/denominator)\n",
        "test": "assert     simplify(\"2/3\", \"1/3\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return sorted(nums, key=lambda n: (sum([int(digit) for digit in str(n)]), -nums.index(n)))",
        "test": "assert     order_by_points([1, 9, 8, 2, 3, 7, 6, 4, 5, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    special_nums = 0\n    for num in nums:\n        num = abs(num)\n        if num >= 10 and int(str(num)[0]) % 2!= 0 and int(str(num)[-1]) % 2!= 0:\n            special_nums += 1\n    return special_nums\n",
        "test": "assert     specialFilter([1, 3, 5, 7, 10]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i < j) and (i * i + i + 1) % 3 == 0:\n                for k in range(1, n):\n                    if (i < k) and (j < k) and (i + j + k) % 3 == 0:\n                        count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    pltns = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    return tuple(sorted([p for p in pltns if (planet1 in p or planet2 in p) and not (planet1 == planet2)]))\n",
        "test": "assert     bf('Earth', 'Neptune') == ('Earth', 'Neptune'), 'test failed'"
    },
    {
        "number": 149,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n",
        "test": "assert     x_or_y(2, 11, 33) == 11"
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([num**2 if num % 2 else num for num in lst])\n",
        "test": "assert     double_the_difference([])             == 0"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    result = []\n    for i in range(len(game)):\n        result.append(abs(guess[i] - game[i]))\n    return result\n",
        "test": "assert     (compare([0,0,0],[0,0,0]) == [0,0,0]), \"the result of the matches are 0\""
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if len(extensions) == 0:\n        raise ValueError\n    d = dict()\n    for item in extensions:\n        s = 0\n        for i in item:\n            if i.isupper():\n                s += 1\n            else:\n                s -= 1\n        d[item] = s/len(item)\n    l = sorted(d, key=d.get, reverse=True)\n    return class_name + '.' + l[0]\n",
        "test": "assert     (Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\")"
    },
    {
        "number": 154,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    for i in range(len(a)):\n        if b in a:\n            return True\n        temp = a[i:] + a[:i]\n        if b in temp:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('great', 'aterg') == False"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    evens = 0\n    odds = 0\n",
        "test": "assert "
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    assert 1 <= number <= 1000, 'The integer number must be between 1 and 1000.'\n    conv_table = (\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    )\n    roman_string = ''\n    for value, symbol in conv_table:\n        while number >= value:\n            number -= value\n            roman_string += symbol\n    return roman_string\n",
        "test": "assert     int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    # TODO: Implement me\n    return False\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    assert words, \"List should not be empty\"\n    # FILL THE CODE HERE\n    a = []\n    for i in range(len(words)):\n        a.append(len(set(words[i])))\n    return words[a.index(max(a))]",
        "test": "assert     (find_max(['apple','mango', 'kiwi', 'watermelon']) == 'watermelon'), 'ERROR!'"
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if number + remaining >= need:\n        result = [number + remaining - need, 0]\n    else:\n        result = [number, remaining - (need - (number + remaining))]\n    return result\n",
        "test": "assert     eat(0, 0, 0) == [0, 0], \"eat failed to handle zero input\""
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = operand[0]\n    for x in range(0, len(operator)-1):\n        if operator[x] == '+':\n            result += operand[x+1]\n        elif operator[x] == '*':\n            result *= operand[x+1]\n        elif operator[x] == '-':\n            result -= operand[x+1]\n        elif operator[x] == '//':\n            result //= operand[x+1]\n        elif operator[x] == '**':\n            result **= operand[x+1]\n    return result\n",
        "test": "assert     do_algebra(['+'], [1]) == 1"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    result = []\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return \"\".join(result)\n    pass\n",
        "test": "assert     solve(\"1+1\") == \"1+1\""
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(text) == 0:\n        return None\n",
        "test": "assert "
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "test": "assert     generate_integers(13, 17) == [14, 16]"
    }
]