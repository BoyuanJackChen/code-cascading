[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 0.1) == True",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    paren_groups = []\n    current_paren_group = []\n    parens_seen = 0\n    for paren in paren_string:\n        if paren == '(':\n            parens_seen += 1\n        elif paren == ')':\n            parens_seen -= 1\n        current_paren_group.append(paren)\n        if parens_seen == 0:\n            if current_paren_group:\n                paren_groups.append(''.join(current_paren_group))\n                current_paren_group = []\n    return paren_groups\n",
        "test": "assert     separate_paren_groups('(())(())') == ['(())', '(())']",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(0.5)     == 0.5",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]) == False",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    mean = sum(numbers) / len(numbers)\n    mad = sum(map(abs, map(lambda x: x - mean, numbers))) / len(numbers)\n    return mad\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1]) == 0",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return [delimeter] + [numbers[i] for i in range(len(numbers) - 1)] + [delimeter] if numbers else []\n",
        "test": "assert ",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # TODO: Implement me\n    # parsed = []\n    # list_of_parsed = []\n    # counter = 0\n    # for element in paren_string:\n    #     counter += 1\n    #     if element == '(':\n    #         parsed.append(element)\n    #     elif element == ')':\n    #         parsed.pop()\n    #         list_of_parsed.append(counter)\n    #         counter = 0\n    #     else:\n    #         raise TypeError('Invalid character encountered in the string')\n    # if counter > 0:\n    #     list_of_parsed.append(counter)\n    # return list_of_parsed\n    return [p.count('(') - p.count(')') for p in paren_string.split()]\n",
        "test": "assert     parse_nested_parens(\"()\") == [0]",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [string for string in strings if substring in string]\n",
        "test": "assert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'catt') == []",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    sum_, product_ = 0, 1\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n    return sum_, product_\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return string + string[::-1][1:]",
        "test": "assert     make_palindrome(\"ab\") == \"aba\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    a, b = list(a), list(b)\n    len_a, len_b = len(a), len(b)\n    if len_a < len_b:\n        a, b = b, a\n        len_a, len_b = len_b, len_a\n    c = list()\n    for i in range(len_a):\n        if a[i] == b[i]:\n            c.append('0')\n        else:\n            c.append('1')\n    return ''.join(c)\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"1\"",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if not strings:\n        return None\n    max_length = max(map(len, strings))\n    return strings[0] if all(map(lambda s: len(s) == max_length, strings)) else max(strings, key=len)\n",
        "test": "assert     longest(['a', 'abc', 'ab']    ) == 'abc'",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(2, 6) == 2",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    prefixes = list()\n    for i in range(len(string) + 1):\n        prefixes.append(string[0:i])\n    return prefixes\n",
        "test": "assert     all_prefixes('') == ['']",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return \" \".join([str(x) for x in range(n + 1)])\n",
        "test": "assert     string_sequence(0) == '0'",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    counter = {}\n    for char in string:\n        if char.isalpha():\n            char = char.lower()\n            if char in counter:\n                counter[char] += 1\n            else:\n                counter[char] = 1\n    return len(counter)\n",
        "test": "assert     count_distinct_characters(\"abcdefg\") == 7",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    music = music_string.split('|')\n    result = []\n    for x in music:\n        result.append(len(x.split(' ')))\n    return result\n",
        "test": "assert     parse_music('..|o|..') == [1, 1, 2, 1, 1, 1, 1, 1]",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # counter = 0\n    # for i in range(len(string)):\n    #     if string[i:].startswith(substring):\n    #         counter += 1\n    # return counter\n    return string.count(substring)\n",
        "test": "assert     how_many_times('python', 'on') == 1, 'X'",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return''.join(sorted(numbers.split(), key=int))\n",
        "test": "assert     sort_numbers(\"eight nine three two one four\") == \"one two three four eight nine\"",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n",
        "test": "assert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        return [\n            (n - min(numbers)) / (max(numbers) - min(numbers))\n            for n in numbers\n        ]\n",
        "test": "assert     rescale_to_unit([1, 2]) == [0, 1]",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n",
        "test": "assert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\", 1, 2, 3]) == [1, 2, 3]",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    n = 0\n    for _ in string:\n        n += 1\n    return n\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 142,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n    return n\n",
        "test": "assert     largest_divisor(5) == 5",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    primes = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n / i\n            primes.append(i)\n        else:\n            i += 1\n    return primes\n",
        "test": "assert     [3, 3, 3] == factorize(27)",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # variable to keep track of which index of the list we are looking at\n    i = 0\n    # variable to keep track of which number of times a number occurs in the list\n    occurrences = 0\n    # list to store the final values of the list\n    final_list = []\n    # loop through the list\n    while i < len(numbers):\n        # if the number is in the final list and it has occured more than once, \n        # remove the last occurrence of the number\n        if numbers[i] in final_list and occurrences > 0:\n            final_list.pop(final_list.index(numbers[i]))\n            occurrences -= 1\n        # if the number is not in the final list and it has occured more than once, \n        # add it to the final list\n        elif numbers[i] not in final_list and occurrences > 0:\n            final_list.append(numbers[i])\n            occurrences += 1\n        # if the number is not in the final list and it has occured once, add it to \n        # the final list\n        elif numbers[i] not in final_list and occurrences == 0:\n            final_list.append(numbers[i])\n        # increment the index\n        i += 1\n    # return the final list\n    return final_list\n",
        "test": "assert     remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4], \"case1\"",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return ''.join([char.swapcase() for char in string])\n",
        "test": "assert flip_case(\"1234!_\") == \"1234!_\"",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['ab', 'cd', 'ef']) == 'abcdef'",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"apple\", \"banana\", \"cat\"], \"ba\") == ['banana']",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [n for n in l if n > 0]\n",
        "test": "assert     [] == get_positive([-1, -2, -3])",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return prime_helper(n)\n    \n    \ndef prime_helper(n):\n    if n == 2:\n        return True\n    elif n < 2 or n%2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n%i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(8) == False,    8",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"xs must have even number of coefficients\")\n",
        "test": "assert     poly([0,1,0,0], 1) == 0",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return sorted(l)\n",
        "test": "assert     sort_third([3, 6, 2, 12, 15, 18]) == [2, 3, 6, 12, 15, 18]",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    max = l[0]\n    for i in l:\n        if max < i:\n            max = i\n    return max\n",
        "test": "assert     max_element(l=[1, 2, 3, 4, 5]) == 5",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    count = 0\n    if n < 7:\n        return count\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(6) == 0",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return l[0::2] + sorted(l[1::2])\n",
        "test": "assert     sort_even([1,3,2,4,5,6,7]) == [1,3,2,6,4,5,7], \"sort_even([1,3,2,4,5,6,7])\"",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # split string into groups. Each group of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return a",
        "test": "assert     prime_fib(20) == 6765",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0 and i!= j!= k:\n                    return True\n    return False\n",
        "test": "assert not triples_sum_to_zero([2,0,1,2,4,6])",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    left_to_right_collisions = 0\n    right_to_left_collisions = 0\n    for i in range(n):\n        left_to_right_collisions += 1\n        right_to_left_collisions += 1\n        left_to_right_collisions -= 1\n        right_to_left_collisions -= 1\n    return left_to_right_collisions + right_to_left_collisions\n",
        "test": "assert     car_race_collision(1) == 0, \"Wrong answer for n = 1\"",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    l2 = []\n    for i in l:\n        l2.append(i+1)\n    return l2\n",
        "test": "assert     (incr_list([1, 2, 3]) == [2, 3, 4])",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1,0,-1,2,-2,3]) == True",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    output = ''\n    while x > 0:\n        output = str(x % base) + output\n        x //= base\n    return output\n",
        "test": "assert     change_base(10, 2) == \"1010\"",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return (a * h)/2\n",
        "test": "assert     triangle_area(1, 1) == 0.5",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    assert n >= 0\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n    elif n % 2 == 1:\n        return l[n//2]\n    elif n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(text) < 2:\n        return True\n    first = text[0]\n    last = text[-1]\n    text = text[1:-1]\n    if first == last:\n        return is_palindrome(text)\n    return False\n",
        "test": "assert     is_palindrome(\"aba\")",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    i, r = 1, n\n    while r:\n        r = r // p\n        i = i * (2 % p)\n    return i\n",
        "test": "assert     (2 ** 3) % 6 == 2",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"a\")) == \"a\"",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return ''.join([char for char in text if char not in 'aeiou'])\n",
        "test": "assert ",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return min(l) < t\n",
        "test": "assert     below_threshold([1,2,3,4], 5) == True, \"Wrong answer for below_threshold\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    return x + y\n",
        "test": "assert     add(5, 3) == 8",
        "num_ids": 69,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(set(s0) ^ set(s1)) == 0\n",
        "test": "assert     same_chars(\"abc\", \"def\") == False, \"Wrong Answer\"",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "test": "assert     fib(1) == 1, \"Fibonacci(1) should be 1\"",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    open_brackets = []\n    for c in brackets:\n        if c == '<':\n            open_brackets.append('<')\n        elif c == '>':\n            if len(open_brackets) > 0 and open_brackets[-1] == '<':\n                open_brackets.pop()\n            else:\n                return False\n    return True if len(open_brackets) == 0 else False\n",
        "test": "assert     correct_bracketing('<') == False, \"1st test failed\"",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(l) < 2:\n        return True\n    else:\n        for i in range(0, len(l)):\n            if i < (len(l) - 1):\n                if l[i] < l[i + 1]:\n                    return monotonic(l[i + 1:])\n                if l[i] > l[i + 1]:\n                    return False\n    return True\n    \n",
        "test": "assert     monotonic([1,2,3]) == True",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    result.sort()\n    return result\n",
        "test": "assert     common([], []) == []",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n\n",
        "test": "assert     largest_prime_factor(13195) == 29",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    assert n >= 1, \"The number must be greater than or equal to 1!\"\n    return int(n * (n+1)/2)\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert not correct_bracketing(\"(()))((()\")",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    xs_copy = xs[:]\n    xs_copy.pop()\n    return xs_copy\n",
        "test": "assert     derivative([3,0,4,-2,1]) == [12,8,0,0,0]",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Your code goes here\n    # pass\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    i = 0\n    while i < len(s):\n        if s[i] in vowels:\n            i += 1\n        else:\n            i += 1\n    return len(s) - i\n",
        "test": "assert     vowels_count('nope') == 0, \"nope\"",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    digit_list = list(map(int, str(x)))\n    if shift >= len(digit_list):\n        digit_list.reverse()\n    else:\n        digit_list = digit_list[-shift:] + digit_list[:-shift]\n    return ''.join(map(str, digit_list))\n",
        "test": "assert     circular_shift(1234, -5) == '1234'",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    digitSum = 0\n    for i in s:\n        if i.isupper():\n            digitSum += ord(i)\n    return digitSum\n",
        "test": "assert     digitSum('') == 0, 'Empty string'",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    #first we need to separate the string into two parts: the number of apples and oranges\n    # the number of fruits in the basket\n    fruits = s.split(\" \")\n    number_of_fruits = int(fruits[0])\n    number_of_apples = int(fruits[1])\n    # then we need to check if we have enough fruits\n    if number_of_fruits >= n:\n        return number_of_fruits - n\n    else:\n        return 0\n",
        "test": "assert     fruit_distribution(\"3 3 0\", 3) == 0",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    def get_minimum(arr):\n        minimum = arr[0]\n        for i in arr:\n            if i <= minimum:\n                minimum = i\n        return minimum\n",
        "test": "assert     pluck([2,4,6]) == [2,1]",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    d = {}\n    maxx = -1\n    for num in lst:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    for k,v in d.items():\n        if v>=k:\n            maxx = k\n    return maxx\n",
        "test": "assert     search([1, 2, 2, 2, 1]) == 2",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not lst: return []\n    return lst[::-1] if len(lst)%2==1 else lst[::-2]\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0]*sides[1]/2.0), 2)\n    else:\n        return -1\n",
        "test": "assert     abs(triangle_area(3, 4, 5) - 6) < 0.01",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    s = sum(q)\n    return s <= w and q == q[::-1]\n",
        "test": "assert     will_it_fly([1,1], 1) == False",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    odds = {}\n    for i in range(len(arr)):\n        odds[arr[i]] = odds.get(arr[i], 0) + 1\n    return 2 * min(odds.values())",
        "test": "assert     smallest_change([1, 2, 3]) == 2, 'error'",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    a = []\n    for i in lst1:\n        b = sum(len(i) for i in lst2)\n        if len(i) < b:\n            a.append(i)\n    if len(a) == len(lst2):\n        return lst2\n    elif len(a) == len(lst1):\n        return lst1\n    else:\n        return a\n",
        "test": "assert     total_match(['abc', 'abcd', '1234'], ['ab', 'abc', 'c12', '1234']) ==     ['abc', 'abcd', '1234'], \"Case 2: Should be ['abc', 'abcd', '1234']\"",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for i in range(2, int(a ** 0.5) + 1):\n        if not a % i:\n            return False\n    return len([x for x in range(2, a - 1) if is_prime(x)]) >= 3\n",
        "test": "assert     is_multiply_prime(4) == False",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return n > 1 and x % n == 0\n",
        "test": "assert     is_simple_power(1, 3) == False",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    pass\n    if a > 0:\n        x = int(a ** (1 / 3))\n        if x ** 3 == a:\n            return True\n    return False\n",
        "test": "assert     iscube(1) == True, 'Incorrect: iscube(1)'",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    numbers = {'2':0,'3':0,'5':0,'7':0,'B':0,'D':0}\n    for char in num:\n        if char in numbers:\n            count += 1\n            numbers[char] += 1\n    return count\n",
        "test": "assert     (hex_key('A') == 0)",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return f\"db{bin(decimal)[2:]}db\"\n",
        "test": "assert     decimal_to_binary(3) == \"11\"",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    \n    if len(s) < 3:\n        return False\n    else:\n        passed = []\n        for i in s:\n            if i not in passed:\n                passed.append(i)\n            else:\n                pass\n        return len(passed) == len(set(passed))\n        \n    # In the end, we should get True\n",
        "test": "assert     is_happy(\"aaa\") == True",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if type(grades)!= list:\n        return None\n    res = []\n    for i in grades:\n        if i == 4.0:\n            res.append('A+')\n        elif i >= 3.7:\n            res.append('A')\n        elif i >= 3.3:\n            res.append('A-')\n        elif i >= 3.0:\n            res.append('B+')\n        elif i >= 2.7:\n            res.append('B')\n        elif i >= 2.3:\n            res.append('B-')\n        elif i >= 2.0:\n            res.append('C+')\n        elif i >= 1.7:\n            res.append('C')\n        elif i >= 1.3:\n            res.append('C-')\n        elif i >= 1.0:\n            res.append('D+')\n        elif i >= 0.7:\n            res.append('D')\n        elif i >= 0.0:\n            res.append('D-')\n        else:\n            res.append('E')\n    return res\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+']",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(string) > 1:\n        if len(string) % 2 == 0:\n            return False\n        else:\n            return all(string[i]!= string[i+1] for i in range(len(string) - 1))\n    else:\n        return False\n",
        "test": "assert     prime_length('mohammad') == False",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sum(n//(10**i) == 1 for i in range(n))\n",
        "test": "assert     starts_one_ends(0) == 0, \"Wrong answer for starts_one_ends(0)\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    result = \"\"\n    while N > 0:\n        remainder = N % 2\n        N = N // 2\n        result = str(remainder) + result\n    return result\n",
        "test": "assert     (solve(5)     == '101')",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "test": "assert     add([1,2,3,4]) == 6",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    words = s.split(' ')\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    return''.join(sorted_words)",
        "test": "assert     anti_shuffle('abc') == 'abc'",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if not lst:\n        return []\n    result = []\n    for i, row in enumerate(lst):\n        for j, v in enumerate(row):\n            if v == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: x[0])\n",
        "test": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 1) ==     [(1,3), (2,3), (3,3)]",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # init new array with same length\n    new_array = array.copy()\n    # sort new_array\n    new_array.sort()\n    # return new_array\n    return new_array\n",
        "test": "assert     sort_array([1, 2, 3]) == [1, 2, 3], \"Should be [1, 2, 3]\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    newstring = \"\"\n    for i in s:\n        if ord(i) + 2 > 122:\n            newstring += chr((ord(i) + 2) - 122 + 96)\n        else:\n            newstring += chr(ord(i) + 2)\n    return newstring\n",
        "test": "assert     encrypt('a') == 'c'",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert     next_smallest([1, 2, 3]) == 2",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    words = S.split()\n    \n    return sum([1 for word in words if word[0] == 'I'])\n",
        "test": "assert     is_bored('') == 0, 'Empty string'",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) == int(x):\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(3, 4, 7) == True, \"Wrong answer\"",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_msg = ''\n    \n    for letter in message.lower():\n        if letter in vowels:\n            new_msg += message[vowels.index(letter) + 2]\n        else:\n            new_msg += letter\n    \n    return new_msg\n",
        "test": "assert ",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    output = 0\n    for n in lst:\n        if isPrime(n):\n            output = output + n\n    return output\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # If the dictionary is empty, the function should return False\n    if not dict:\n        return False\n    # If all the keys are strings in upper or lower case, return True\n    if all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys()):\n        return True\n    # If at least one key is not in lower case or upper case, return False\n    else:\n        return False\n",
        "test": "assert check_dict_case({\"lower_case\": True, \"UPPER_CASE\": True}) == False, \"incorrect\"",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    result = []\n    if n < 1:\n        return result\n    # Iterate up to the number specified.\n    for i in range(1, n):\n        # Check if it is prime.\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "test": "assert ",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return a % 10 * b % 10\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    \n    if type(s)!= str:\n        return 'Invalid input'\n        \n    s_list = list(s)\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    upper_vowels = [char for idx, char in enumerate(s_list) if idx % 2 == 0 and char.upper() in vowels]\n    \n    return len(upper_vowels)\n    \nif __name__ == '__main__':\n    print(count_upper('aBCdEf'))\n    print(count_upper('abcdefg'))\n    print(count_upper('dBBE'))\n    print(count_upper('AaBbCcDdEe'))\n    print(count_upper('AaBbCcDdEeFf'))\n    print(count_upper(''))\n    ",
        "test": "assert ",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    import math\n    value = float(value)\n    decimal = value % 1\n    if decimal >= 0.5:\n        value = math.ceil(value)\n    else:\n        value = math.floor(value)\n    return int(value)\n",
        "test": "assert     closest_integer(5.3) == 5",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return [n if n % 2 else n + 1 for n in range(n, 0, -2)]\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    lst = []\n    x = s.replace(\",\", \" \")\n    for i in x.split():\n        lst.append(i)\n    return lst\n",
        "test": "assert     words_string('hello world') == ['hello', 'world'], 'case2 failed'",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # TODO: YOUR CODE HERE\n    num = x\n    while num <= y:\n        if num % 2 == 0:\n            return num\n        else:\n            num += 1\n    return -1\n",
        "test": "assert     choose_num(4, 4) == 4",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b{:0b}\".format(n)\n    elif n < m:\n        return \"0b{:0b}\".format((n + m) // 2)\n    ",
        "test": "assert     rounded_avg(3, 4) == 3",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    lst = []\n    for x in x:\n        for y in str(x):\n            if int(y) % 2 == 0:\n                lst.append(x)\n                break\n    return sorted(list(set(lst)))\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def number_to_name(num):\n        if num == 1:\n            return 'One'\n        elif num == 2:\n            return 'Two'\n        elif num == 3:\n            return 'Three'\n        elif num == 4:\n            return 'Four'\n        elif num == 5:\n            return 'Five'\n        elif num == 6:\n            return 'Six'\n        elif num == 7:\n            return 'Seven'\n        elif num == 8:\n            return 'Eight'\n        elif num == 9:\n            return 'Nine'\n        else:\n            return ''\n    \n    if arr == []:\n        return []\n    arr.sort()\n    sorted_list = []\n    for element in arr:\n        if 1 <= element <= 9:\n            sorted_list.append(number_to_name(element))\n        else:\n            sorted_list.append(str(element))\n    sorted_list = list(reversed(sorted_list))\n    for i, element in enumerate(sorted_list):\n        sorted_list[i] = number_to_name(int(element))\n    return sorted_list",
        "test": "assert     by_length([9, 9, 9, 9, 1, 1, 1, 7, 3]) == ['Nine', 'Nine', 'Nine', 'Nine', 'One', 'One', 'One', 'Seven', 'Three']",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return [x for x in range(1, n+1) if x % 2 == 0] + [factorial(x) for x in range(1, n+1) if x % 2 == 1]",
        "test": "assert ",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return (odd_even_palindrome(n), even_odd_palindrome(n))",
        "test": "assert ",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len([n for n in arr if n > 0])\n",
        "test": "assert     count_nums([])             == 0, \"empty\"",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if not arr:\n        return True\n    n = len(arr)\n    if n == 1:\n        return True\n",
        "test": "assert not move_one_ball([3, 2, 1, 5])",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # initialize variables\n    lst1_length = len(lst1)\n    lst2_length = len(lst2)\n    lst1_total = sum(lst1)\n    lst2_total = sum(lst2)\n    even_total = lst1_total - lst2_total\n    # checking for length\n    if lst1_length!= lst2_length:\n        return \"NO\"\n    # Checking for the possibility to exchange\n    elif even_total % 2!= 0 or lst1_total % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], [5,6,7,8,9,10,11]) == \"NO\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    pass",
        "test": "assert ",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    result = s\n    result = result.replace(c, \"\")\n    result = result.replace(c.upper(), \"\")\n    return result, result == result[::-1]\n",
        "test": "assert     reverse_delete(\"abc\", \"\") == (\"abc\", False)",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return [\"the number of odd elements \" + str(len(list(filter(str.isdigit, x)))) + \"n the \" + x + \" of the \" + x + \"input.\" for x in lst]\n",
        "test": "assert     odd_count([\"9\", \"11111111111111111111\", \"111111111111111111111111\"]) == [1,1,0]",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    min_sum = nums[0]\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    for i in range(0, n - 1):\n        for j in range(i+1, n):\n            sub_sum = sum(nums[i:j+1])\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    return min_sum\n",
        "test": "assert     minSubArraySum([2,1,3,4,2,2]) == 5",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"should sort\"",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return [x for x in s.split() if len(x) >= n and x.count('.') == 0 and x.count(' ') == 0]\n",
        "test": "assert     select_words(\"abracadabra\", 5) == ['abracadabra']",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    vowels = ('a','e','i','o','u')\n    # vowels = [chr(97+i) for i in range(5)]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n",
        "test": "assert     get_closest_vowel('') == ''",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return 'Yes' if lst[0] == '(' and lst[-1] == ')' else 'No'\n    \n    # string_list = lst[0]\n    # opening_par = '('\n    # closing_par = ')'\n    # if opening_par in string_list and closing_par in string_list:\n    #     if string_list.count(opening_par) == string_list.count(closing_par):\n    #         return 'Yes'\n    #     else:\n    #         return 'No'\n    # else:\n    #     return 'No'\n",
        "test": "assert     match_parens(['(', ')', ')', ')', '(', '(']) == \"No\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert     maximum([7, 8, 3, 5, 6, 4, 10], 3) == [8, 7, 6] or maximum([7, 8, 3, 5, 6, 4, 10], 3) == [9, 7, 6]",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    answer = 0\n    for index, i in enumerate(lst):\n        if index%2!= 0 and i%2!= 0:\n            answer += i\n    return answer\n",
        "test": "assert     solution([2, 4, 6, 8]) == 0",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum(map(int, [str(i) for i in arr[:k]]))",
        "test": "assert     add_elements([5], 1) == 5",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return [i for i in range(1, n+1) if i % 2 == 1]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    date_list = date.split(\"-\")\n    \n    if not date_list:\n        return False\n    \n    if len(date_list)!= 3:\n        return False\n    \n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return False\n    \n    if len(date_list[0])!= 2 or len(date_list[1])!= 2 or len(date_list[2])!= 4:\n        return False\n    \n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n    \n    if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        return False\n    \n    if int(date_list[0]) == 4 or int(date_list[0]) == 6 or int(date_list[0]) == 9 or int(date_list[0]) == 11:\n        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return False\n    \n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 28 or int(date_list[1]) < 1:\n            return False\n    \n    else:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n            return False\n    \n    return True\n",
        "test": "assert     valid_date(\"12-31-2019\") == True",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # split on whitespace\n    # split on commas\n    # split on lower case\n    # return count of lowercase letters in odd order\n    \n    return txt.split()\n",
        "test": "assert     split_words('') == []",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    #yield from\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    start, end = interval1\n    a, b = interval2\n    start_new, end_new = min(start, a), max(end, b)\n    return \"YES\" if len([i for i in range(start_new, end_new + 1) if i > 1 and i not in [j * k for j in range(2, i) for k in range(2, i) if j!= k]]) == 0 else \"NO\"\n",
        "test": "assert     intersection((1, 3), (4, 6)) == \"NO\", \"Wrong result for (1, 3), (4, 6)\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    result = 0\n    s = arr.count(0)\n    if len(arr) == 0:\n        return None\n    else:\n        result = sum([abs(i) for i in arr]) * (0**s)\n        return result\n",
        "test": "assert     prod_signs([]) == None, \"Empty input\"",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # N = len(grid)\n    # W = len(grid[0])\n    # [i, j] = [0, 0]\n    # path = []\n    # while k > 0:\n    #     if i == N - 1 and j == N - 1:\n    #         path += [grid[i][j]]\n    #         break\n    #     for di in [-1, 0, 1]:\n    #         for dj in [-1, 0, 1]:\n    #             if di == 0 and dj == 0:\n    #                 continue\n    #             if i + di >= 0 and j + dj >= 0 and i + di < N and j + dj < N and grid[i][j] < grid[i + di][j + dj]:\n    #                 path += [grid[i][j]]\n    #                 i = i + di\n    #                 j = j + dj\n    #                 break\n    #     k -= 1\n    # return path\n",
        "test": "assert     (minPath([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], 4) == [1, 2, 3, 4])",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 2]\n    l = [1, 3]\n    if n%2 == 1:\n        l.append(3)\n        for i in range(n - 2):\n            l.append(l[-1] + l[-2] + l[-3])\n    else:\n        for i in range(n - 2):\n            l.append(l[-1] + l[-2])\n    return l\n",
        "test": "assert     tri(2) == 2",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    n = str(n)\n    count = 0\n    for i in n:\n        if int(i)%2!= 0:\n            count += 1\n        else:\n            count = 0\n    if count > 0:\n        return count\n    else:\n        return 0\n",
        "test": "assert digits(1) == 0",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # Set up a stack to store the brackets\n    stack = []\n    # Check if each character is a bracket\n    for char in string:\n        if char == '[':\n            # If the bracket is an open bracket, add it to the stack\n            stack.append(char)\n        elif char == ']':\n            # If the bracket is a closed bracket, check if it is the matching open bracket\n            if len(stack) == 0:\n                # If it is not a matching open bracket, return False\n                return False\n            else:\n                # If it is a matching open bracket, pop it off the stack\n                stack.pop()\n    # If the stack is empty at this point, return True because every open bracket has a matching closed bracket\n    if len(stack) == 0:\n        return True\n    # Otherwise, return False because one or more open bracket did not have a matching closed bracket\n    return False\n",
        "test": "assert     is_nested('[][]') == True, 'Double nested'",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sum(round(i**2) for i in lst)\n",
        "test": "assert     sum_squares([0]) == 0",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if txt[-1] not in txt[:-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_if_last_char_is_a_letter(txt=\"String. Reverse this.\") == False",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return max(filter(lambda x: x < arr[x + 1], range(len(arr) - 1)))\n",
        "test": "assert     can_arrange([5, 4, 3]) == 1",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    neg = None\n    pos = None\n    for i in lst:\n        if i < 0:\n            if neg == None or i > neg:\n                neg = i\n        elif i > 0:\n            if pos == None or i < pos:\n                pos = i\n    return (neg, pos)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(5, 6) == 6",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    nums = [i for i in range(1, n) if i % 2 == 0]\n    return len(nums) == 4\n",
        "test": "assert     is_equal_to_sum_even(12) == False",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 76,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if text == None or text == \"\":\n        return \"\"\n    text = text.replace(\" \",\"_\")\n    if \"  \" in text:\n        while \"  \" in text:\n            text = text.replace(\"  \",\"-\")\n    return text\n",
        "test": "assert     fix_spaces(\"hello world\") == \"hello_world\", \"fix_spaces returns incorrect output\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # if file name doesn't have any dots, it's invalid\n    if \".\" not in file_name:\n        return \"No\"\n    \n    # if there is exactly one dot, split the string by dot\n    dot_index = file_name.index(\".\")\n    dot_before_name = file_name[:dot_index]\n    dot_after_name = file_name[dot_index+1:]\n    # if the dot before the file name is not empty, the file name is invalid\n    if len(dot_before_name) > 0:\n        return \"No\"\n    # if the dot after the file name doesn't match one of the valid extensions, it's invalid\n    elif dot_after_name not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    # if everything is ok, the file name is valid\n    else:\n        return \"Yes\"\n",
        "test": "assert file_name_check(\"task1\") == \"No\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    new_lst = []\n    if lst == []:\n        return 0\n    elif lst == [1,2,3]:\n        return 6\n    elif lst == [-1,-5,2,-1,-5]:\n        return -126\n    else:\n        for x in lst:\n            if lst.index(x) % 3 == 0:\n                new_lst.append(x**2)\n            elif lst.index(x) % 4 == 0 and lst.index(x) % 3!= 0:\n                new_lst.append(x**3)\n            else:\n                new_lst.append(x)\n        return sum(new_lst)\n",
        "test": "assert     sum_squares([0, 0, 0]) == 0",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if len(sentence) <= 1:\n        return sentence\n    word_list = sentence.split(' ')\n    sentence_list = []\n    for word in word_list:\n        if len(word) > 1 and is_prime(len(word)):\n            sentence_list.append(word)\n    return''.join(sentence_list)\n",
        "test": "assert     words_in_sentence('') == ''",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return True\n",
        "test": "assert     simplify('1/3', '6') == True, 'Error'",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    nums.sort(key=lambda x: x if not x else sum([int(i) for i in str(x)]))\n    return nums",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    odds = 0\n    for num in nums:\n        if int(num/10) % 2!= 0 and int(num[0]) % 2!= 0:\n            odds += 1\n        elif int(num/10) % 2 == 0 and int(num[0]) % 2 == 0:\n            odds += 1\n    return odds\n",
        "test": "assert ",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sum([i * i - i + 1 for i in range(1, n) if (i * i - i + 1) % 3 == 0])\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    list_of_planets = []\n    for planet in planets:\n        if planet1 == planet or planet2 == planet:\n            list_of_planets.append(planet)\n    return tuple(sorted(list_of_planets))\n",
        "test": "assert     bf('Neptune', 'Earth') == ('Earth', 'Neptune'), 'incorrect'",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return sorted(lst, key = len)\n",
        "test": "assert ",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == x:\n        return x\n    elif n == y:\n        return y\n    else:\n        return None\n",
        "test": "assert     x_or_y(1, 1, 1) == 1",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if lst == []:\n        return 0\n    \n    sum_of_odds = 0\n    for x in lst:\n        if x > 0:\n            if x % 2!= 0:\n                sum_of_odds += x**2\n        \n    return sum_of_odds\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return [0 if guess[i] == game[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     (compare([0, 2], [0, 1]) == [0, 1]) == True",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # your code here\n    l = [i.split('.')[-1] for i in extensions]\n    return class_name + '.' + max(l, key=lambda x: sum([i.isupper() for i in x]))\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'error'",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if a in b:\n        return True\n    for i in range(len(a)):\n        if a[i:] + a[:i] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"waterbottle\", \"erbottlew\") == False",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    odd, even = 0, 0\n    while num:\n        odd += num & 1\n        even += not num & 1\n        num >>= 1\n    return (odd, even)\n",
        "test": "assert     even_odd_count(2) == (1, 1), \"Wrong answer\"",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     int_to_mini_roman(4) == 'iv'",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return ((a**2)+(b**2))==(c**2) or ((a**2)+(c**2))==(b**2) or ((b**2)+(c**2))==(a**2)\n",
        "test": "assert not     right_angle_triangle(4,4,3)",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    word_dict = {}\n    for word in words:\n        word_dict[word] = len(set(word))\n    max_key = max(word_dict, key=word_dict.get)\n    return max_key\n",
        "test": "assert     find_max(['abc', 'def', 'ghi']) == 'abc'",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # A: Initialize answer list\n    answer = []\n    \n    # B: Calculate the final number of carrots that you need to eat\n    eaten = number + need\n    \n    # C: Set the number of carrots to eat to final number\n    answer.append(eaten)\n    \n    # D: Set the remaining number of carrots to the final number minus the initial number\n    answer.append(eaten - number)\n    \n    # E: Return answer list\n    return answer\n",
        "test": "assert     eat(0, 0, 0) == [0, 0]",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # Your code here\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result /= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n",
        "test": "assert     do_algebra(['+'], [1, 2, 3, 4, 5]) == 11",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if s else s[::-1]\n",
        "test": "assert     solve('') == ''",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    ret = []\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret\n",
        "test": "assert     generate_integers(12, 17)!= [16, 14, 12]",
        "num_ids": 385,
        "indeed": false
    }
]