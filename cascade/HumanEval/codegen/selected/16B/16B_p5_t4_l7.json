[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    numbers.sort()\n    for index, number in enumerate(numbers[:-1]):\n        if abs(number - numbers[index + 1]) <= threshold:\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0], 3.0) == True, \"Wrong result\"",
        "num_ids": 620
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    \n    stack = []\n    curr_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            curr_group.append(char)\n            stack.append(curr_group)\n            curr_group = []\n        elif char == ')':\n            if len(curr_group) > 0:\n                curr_group.append(char)\n                stack.append(curr_group)\n                curr_group = []\n            else:\n                # pop stack and parse\n                curr_group = stack.pop()\n                # add closed paren to group\n                curr_group.append(char)\n        else:\n            if len(curr_group) > 0:\n                curr_group.append(char)\n    return [''.join(group) for group in stack]\n",
        "test": "assert     separate_paren_groups('(x)(y)') == ['(x)(y)', '']",
        "num_ids": 1753
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return math.modf(number)[0]\n",
        "test": "assert     0.0 == truncate_number(0)",
        "num_ids": 374
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([5, 5, -5, -5, -2, -4, -1]) == True",
        "num_ids": 757
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"List must not be empty.\")\n    mean = sum(numbers) / n\n    return sum(abs(number - mean) for number in numbers) / n\n",
        "test": "assert     mean_absolute_deviation([1, 1, 1, 1, 1]) == 0, \"Wrong result\"",
        "num_ids": 785
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:] if numbers else []\n",
        "test": "assert     intersperse([5, 5, 5], 5) == [5, 5, 5, 5, 5]",
        "num_ids": 600
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    paren_list = paren_string.split()\n    return [len(paren) for paren in paren_list]\n",
        "test": "assert     parse_nested_parens('((()(()()((()(()((()(()()(()()(()))(())))(())())()()(()(()()))((()(()()((()(()((()(()(()()(()()(())()()()()(())()(()((()(()(())()(()(()()()()(()(()()()()()((()(()(((()(((((((((((((())(((()(())()(((()()(())(())()(()())(()(()())(()(())(()(((((()(()((()(()()()(()(((((()(())())())())())())())())())())())((())()((()))()(()))(()((()))(())(()(()((((())))))()(()(()(())))(()(()))(()(()((()((()))()((()()())(()((()((()))()(((((((((((((((((((((((((((())((((((((((((((((((((((((()(()()((()((()(()))(()))(())()((())(())(()(((((((())((((((((((((((((((((((((((((((((((((((((((((((((((((()((()(((()((())(()(()()(())(()(((((((((((()))(((((((((((((((((((()((()(((()((()()))(((()(()((()((((()()(())()((()()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
        "num_ids": 1804
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    substring = substring.lower()\n    return list(filter(lambda string: substring in string.lower(), strings))\n",
        "test": "assert     filter_by_substring([\"cat\", \"dog\"], \"c\") == [\"cat\"]",
        "num_ids": 856
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)",
        "test": "assert     sum_product([1, 2, 3, 4]) == (10, 24)",
        "num_ids": 389
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    result = []\n    for idx, number in enumerate(numbers):\n        if idx == 0:\n            result.append(number)\n        else:\n            result.append(max(number, result[idx-1]))\n    return result\n",
        "test": "assert     rolling_max([1]) == [1]",
        "num_ids": 890
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    rev = string[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + rev\n    return string + rev\n",
        "test": "assert     make_palindrome('ab') == 'aba'",
        "num_ids": 1569
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    a_ = int(a, base=2)\n    b_ = int(b, base=2)\n    result = a_ ^ b_\n    return bin(result)[2:]\n",
        "test": "assert     string_xor(\"101010\", \"101010\") == \"0\"",
        "num_ids": 656
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    max_str = strings[0]\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            max_str = string\n    return max_str\n",
        "test": "assert     longest(['abc', 'aa', 'a', 'abc', 'aa']) == 'abc'",
        "num_ids": 532
    },
    {
        "number": 13,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(12, 8) == 4",
        "num_ids": 508
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    prefixes = list()\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"a\") == [\"\", \"a\"]",
        "num_ids": 622
    },
    {
        "number": 15,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 450
    },
    {
        "number": 16,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('abc') == 3",
        "num_ids": 416
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    parsed_music_string = music_string.split('|')\n    parsed_music = []\n    for beat in parsed_music_string:\n        parsed_beat = beat.split()\n        parsed_music.append(len(parsed_beat))\n    return parsed_music\n",
        "test": "assert     parse_music(\".|.|.|.|.\") == [1, 1, 1, 1, 1]",
        "num_ids": 2512
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n",
        "test": "assert     how_many_times('aaaaa', 'b') == 0",
        "num_ids": 626
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers(\"one\") == 'one'",
        "num_ids": 756
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    # first lets find the largest and smallest values in the list\n    largest_number = None\n    smallest_number = None\n    for n in numbers:\n        if largest_number is None:\n            largest_number = n\n            smallest_number = n\n        else:\n            if n > largest_number:\n                largest_number = n\n            elif n < smallest_number:\n                smallest_number = n\n    return (smallest_number, largest_number)\n",
        "test": "assert     find_closest_elements([1, 2, 3]) == (1, 3) or (2, 3), \"Wrong output\"",
        "num_ids": 1085
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    return [number - min(numbers) for number in numbers]\n",
        "test": "assert     rescale_to_unit([]) == []",
        "num_ids": 578
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 694
    },
    {
        "number": 23,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "test": "assert     strlen(\"hello\") == 5",
        "num_ids": 152
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    divisor_list = [x for x in range(1, n) if n%x == 0]\n    return max(divisor_list)\n",
        "test": "assert     largest_divisor(2) == 1",
        "num_ids": 311
    },
    {
        "number": 25,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    p = 2\n    factors = []\n    while n > 1:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n        else:\n            p += 1\n    return factors\n",
        "test": "assert         (factorize(2) == [2])",
        "num_ids": 518
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n    # do not use built-in set() or dict() to avoid Python 3.7+ dicts bug\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                numbers[j] = None\n    return list(filter(None, numbers))\n",
        "test": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1596
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "test": "assert     flip_case(\"Python\") == \"pYTHON\"",
        "num_ids": 1488
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['abc', 'xyz', 'aba']) == 'abcxyzaba'",
        "num_ids": 542
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([\"search_engine\", \"cat\", \"copy\", \"dotted\", \"dotted_line\", \"browsing_guide\", \"vacuum_cleaner\"], \"d\") == [\"dotted\", \"dotted_line\"]",
        "num_ids": 606
    },
    {
        "number": 30,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return [elem for elem in l if elem > 0]\n",
        "test": "assert     get_positive([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 334
    },
    {
        "number": 31,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 559
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    n = len(xs)\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        if xs[0] == 0:\n            return xs[1]\n        else:\n            return -xs[1] / xs[0]\n",
        "test": "assert     poly([2, 3, 1], 0) == 2",
        "num_ids": 829
    },
    {
        "number": 33,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    x = []\n    y = []\n    for i in range(0, len(l)):\n        if i % 3!= 0:\n            x.append(l[i])\n        else:\n            y.append(l[i])\n    z = x + y\n    for i in range(len(z)):\n        for j in range(i + 1, len(z)):\n            if z[i] > z[j]:\n                z[i], z[j] = z[j], z[i]\n    return z\n",
        "test": "assert     sort_third([0,1,2,3,4,6,7,8,9]) == [0,1,2,3,4,6,7,8,9], \"incorrect\"",
        "num_ids": 826
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1, 2, 3, 4, 2, 2]) == [1, 2, 3, 4], \"Unique not working\"",
        "num_ids": 517
    },
    {
        "number": 35,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5",
        "num_ids": 306
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if 7 in str(num):\n                count += 1\n    return count\n",
        "test": "assert     fizz_buzz(11) == 0",
        "num_ids": 357
    },
    {
        "number": 37,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    # initialize output list\n    output_l = []\n    # iterate over the length of l\n    for i in range(len(l)):\n        # if i is even append l[i] to output_l\n        if i % 2 == 0:\n            output_l.append(l[i])\n        else:\n            # if i is odd, append the value of l[i] to output_l in ascending order\n            output_l.append(sorted(l)[i])\n    return output_l\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 941
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle each group, use cyclic group formation to get original string.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"aaa\") == \"aaa\"",
        "num_ids": 615
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    assert n > 0\n    x, y = 1, 2\n    while True:\n        x, y = y, x + y\n        if not is_prime(y):\n            x, y = y, x + y\n        if n == 1:\n            return x\n        n -= 1\n",
        "test": "assert     prime_fib(5) == 5",
        "num_ids": 418
    },
    {
        "number": 40,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     not triples_sum_to_zero([1, 2, 3, 4, 5])",
        "num_ids": 735
    },
    {
        "number": 41,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(1) ==     0",
        "num_ids": 366
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert ",
        "num_ids": 116
    },
    {
        "number": 43,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    l_size = len(l)\n    if l_size < 2:\n        return False\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False",
        "num_ids": 839
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    if x == 0:\n        return '0'\n    elif base <= 10:\n        return str(x)\n    else:\n        return (change_base(x // base, base) if x % base else '0') + str(x % base)\n",
        "test": "assert     change_base(1234, 10) == '1234'",
        "num_ids": 668
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return a * h / 2\n",
        "test": "assert     triangle_area(3, 4) == 6, \"triangle_area(3, 4) == 6 failed\"",
        "num_ids": 330
    },
    {
        "number": 46,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if n < 0:\n        return ValueError(\"Negative number\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_1 = 0\n        fib4_2 = 2\n        fib4_3 = 0\n        for i in range(3, n + 1):\n            fib4_4 = fib4_3 + fib4_2 + fib4_1\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n            fib4_3 = fib4_4\n        return fib4_4\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 765
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        return (sorted_l[(length//2)-1] + sorted_l[length//2])/2\n    else:\n        return sorted_l[length//2]\n",
        "test": "assert     median([5, 5, 5, 5]) == 5, \"even nums\"",
        "num_ids": 374
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return text[::-1].lower() == text.lower()\n",
        "test": "assert     is_palindrome('a') == True, 'Word \"a\" is a palindrome'",
        "num_ids": 548
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    assert n >= 0, \"n < 0\"\n    assert p > 2, \"p <= 2\"\n    m = 1\n    while n:\n        if n & 1:\n            m = (m * 2) % p\n        n >>= 1\n    return m\n",
        "test": "assert     modp(7, 3) == 2",
        "num_ids": 319
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 477
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    #text = str(text)\n    text = text.lower()\n    if text == '':\n        return ''\n    elif text[0] in 'aeiou':\n        return remove_vowels(text[1:])\n    else:\n        return text[0] + remove_vowels(text[1:])\n",
        "test": "assert     remove_vowels('hello') == 'hll'",
        "num_ids": 494
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 0) == False",
        "num_ids": 442
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(10, 20) ==         30",
        "num_ids": 123
    },
    {
        "number": 54,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return len(s0) == len(s1) and all(c0 == c1 for c0, c1 in zip(s0, s1))\n",
        "test": "assert     same_chars('test', 'test') == True, 'Incorrect'",
        "num_ids": 648
    },
    {
        "number": 55,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "test": "assert     fib(0) == 0",
        "num_ids": 391
    },
    {
        "number": 56,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    # iterate over the brackets\n    count = 0\n    for bracket in brackets:\n        if count > 0:\n            # if the count is positive, we have already seen a bracket\n            # so we should check if the bracket is a closing bracket\n            if bracket == \">\":\n                count -= 1\n            # if it is not, then we have a problem\n            else:\n                return False\n        else:\n            # if we have not seen any brackets, we should check if the\n            # bracket is an opening bracket\n            if bracket == \"<\":\n                count += 1\n            else:\n                return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     correct_bracketing(brackets = \"\") == True",
        "num_ids": 819
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if len(l) < 2:\n        return True\n    d = l[1] - l[0]\n    for i in range(2, len(l)):\n        if d * (l[i] - l[i-1]) > 0:\n            return False\n    return True\n",
        "test": "assert     (not monotonic([3,2,1,1])), 'not monotonic'",
        "num_ids": 382
    },
    {
        "number": 58,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     (sorted(common([1, 2, 3], [2, 3, 4])) == [2, 3])",
        "num_ids": 694
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 609
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 219
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            try:\n                if stack[-1] == '(':\n                    stack.pop()\n            except:\n                return False\n    return len(stack) == 0\n",
        "test": "assert not correct_bracketing(\"((\")",
        "num_ids": 641
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [0]\n    return [i * xs[-1] for i in range(len(xs)-1, 0, -1)]\n",
        "test": "assert     derivative([]) == [], \"Fourth\"",
        "num_ids": 493
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n >= 3:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 429
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    for j in s[::-1]:\n        if j in vowels:\n            count += 1\n    if count == len(s):\n        count -= 1\n    return count\n",
        "test": "assert     vowels_count(\"xyz\") == 0, \"Check your code\"",
        "num_ids": 588
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if shift == 0:\n        return x\n    if shift > x:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     circular_shift(34, 5) == '34'",
        "num_ids": 680
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    result = 0\n    for character in s:\n        if character.isalpha():\n            result += ord(character.upper())\n    return result\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 289
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    return s.count('1') - s.count('0') - n\n",
        "test": "assert     fruit_distribution(\"1 apple,1 orange\", 2) == 0",
        "num_ids": 1543
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    \n    if not arr:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    return [min(evens), evens.index(min(evens))]\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 538
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    max_value = -1\n    for num in lst:\n        if num > max_value and lst.count(num) >= num:\n            max_value = num\n    return max_value\n",
        "test": "assert     search([2,2,2,2,2,2]) == 2, \"Incorrect output\"",
        "num_ids": 609
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    lst.sort()\n    lst.sort(reverse=True)\n    lst.append(lst.pop(lst.index(lst[0])))\n    lst.pop(lst.index(lst[0]))\n    lst.append(lst.pop(lst.index(lst[0])))\n    lst.pop(lst.index(lst[0]))\n    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Checking for duplicate numbers\"",
        "num_ids": 794
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return 0\n",
        "test": "assert ",
        "num_ids": 313
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    # my code\n    if q[::-1]==q and sum(q)<=w:\n        return True\n    else:\n        return False\n    # O(n)\n",
        "test": "assert     will_it_fly([], 10) == True, 'incorrect'",
        "num_ids": 586
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    # Your code here\n    if not arr:\n        return 0\n    odd_len = False\n    # is palindromic iff it is a palindrome in forward and backward\n    # and is odd iff there is one element that is odd\n    if len(arr) % 2 == 0:\n        odd_len = False\n    else:\n        odd_len = True\n    # Let's use a dictionary to keep track of the changes we can do\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for k, v in d.items():\n        if k == v and v % 2 == 1:\n            odd_len = True\n        elif k!= v:\n            odd_len = False\n    if odd_len:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     smallest_change([1, 2, 3, 4, 5, 2, 1]) == 1",
        "num_ids": 694
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n",
        "test": "assert     total_match(['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']",
        "num_ids": 864
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    for i in range(2,int(math.sqrt(a))):\n        if a%i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(14) == False",
        "num_ids": 685
    },
    {
        "number": 76,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if n == 1:\n        return True\n    if x == 1:\n        return False\n    else:\n        return x % n == 0\n",
        "test": "assert     is_simple_power(3, 2) == False, \"Power of 2: simple_power should return False\"",
        "num_ids": 428
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    cube = a**(1/3)\n    if cube == round(cube):\n        return True\n    return False\n",
        "test": "assert     iscube(27) == True",
        "num_ids": 367
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(len(num)):\n        if(num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"):\n            count += 1\n    return count\n",
        "test": "assert     hex_key(\"\") == 0",
        "num_ids": 1301
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n",
        "test": "assert     decimal_to_binary(42) == '101010'",
        "num_ids": 453
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    letters = list(s)\n    for i in range(len(s)-2):\n        if letters[i] == letters[i+1] or letters[i] == letters[i+2]:\n            return False\n            \n    return True\n",
        "test": "assert     is_happy('aabbccddeef') == False",
        "num_ids": 1734
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    result = []\n    for GPA in grades:\n        if GPA >= 4:\n            result.append(\"A+\")\n        elif GPA >= 3.7:\n            result.append(\"A\")\n        elif GPA >= 3.3:\n            result.append(\"A-\")\n        elif GPA >= 3.0:\n            result.append(\"B+\")\n        elif GPA >= 2.7:\n            result.append(\"B\")\n        elif GPA >= 2.3:\n            result.append(\"B-\")\n        elif GPA >= 2.0:\n            result.append(\"C+\")\n        elif GPA >= 1.7:\n            result.append(\"C\")\n        elif GPA >= 1.3:\n            result.append(\"C-\")\n        elif GPA >= 1.0:\n            result.append(\"D+\")\n        elif GPA >= 0.7:\n            result.append(\"D\")\n        elif GPA >= 0.0:\n            result.append(\"D-\")\n        elif GPA == 0.0:\n            result.append(\"E\")\n    return result\n",
        "test": "assert     numerical_letter_grade(3.3) == 'A-'",
        "num_ids": 1856
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    if string.isalpha() == True:\n        return False\n    elif string.isspace() == True:\n        return False\n    elif len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    else:\n        for x in range(2,int(len(string) / 2) + 1):\n            if len(string) % x == 0:\n                return False\n        return True\n",
        "test": "assert     prime_length('abcd') == False, 'incorrect'",
        "num_ids": 452
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n-1) + ends_one_starts(n)\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 662
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return bin(N).replace(\"0b\", \"\")\n",
        "test": "assert     (solve(6) == \"110\")",
        "num_ids": 257
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    return sum(i for i in lst[1::2])\n",
        "test": "assert     add([1,2,3]) == [2,4]",
        "num_ids": 949
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: [ord(c) for c in x]))\n",
        "test": "assert ",
        "num_ids": 480
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    if not lst:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            res.append((i, lst[i].index(x)))\n    res = list(set(res))\n    res.sort()\n    res.sort(key=lambda x: (-x[0], x[1]))\n    return res\n",
        "test": "assert     get_row([], 0) == []",
        "num_ids": 956
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    return_array = []\n    while array:\n        current_element = array.pop(0)\n        return_array.append(current_element)\n        if len(array) == 0:\n            break\n        while array:\n            if current_element + array[0] > current_element + array[len(array) - 1]:\n                return_array.append(array.pop(0))\n            else:\n                break\n    return return_array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1143
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    encrypt = \"\"\n    for i in range(len(s)):\n        if s[i] =='':\n            encrypt = encrypt + s[i]\n        elif s[i] == 'z':\n            encrypt = encrypt + 'a'\n        elif s[i] >= 'a' and s[i] <= 'z':\n            encrypt = encrypt + chr(ord(s[i]) + 2)\n        else:\n            encrypt = encrypt + chr(ord(s[i]) + 2 - 26)\n    return encrypt\nprint(encrypt('asdfghjkl'))\nprint(encrypt('hi'))\nprint(encrypt('et'))\n",
        "test": "assert     encrypt('a') == 'c', \"encrypt('a') should be c\"",
        "num_ids": 1239
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    smallest = float('inf')\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    smallest_index = lst.index(smallest)\n    # lst[smallest_index] is the smallest element in lst\n    if smallest_index == 0:\n        return None\n    elif smallest_index == len(lst) - 1:\n        return None\n    elif smallest_index == len(lst) - 2:\n        return lst[smallest_index + 1]\n    else:\n        return lst[smallest_index + 1]\n",
        "test": "assert     next_smallest([1,2,3,4]) == None",
        "num_ids": 524
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    import re\n    boredoms = re.findall(r'I\\b', S)\n    return len(boredoms)\n",
        "test": "assert     is_bored(\"I love dogs.\") == 1",
        "num_ids": 589
    },
    {
        "number": 92,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if x+y == z or x+z == y or y+z == x:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(5, 1, 2) == False, \"False #1\"",
        "num_ids": 1670
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    pass\n",
        "test": "assert     encode(\"this is a test message 3\") == \"hsi is a eet gnirtstm\"",
        "num_ids": 583
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    lst = [0,81,12,3,1,21]\n    count=0\n    for i in lst:\n        if is_prime(i):\n            count += sum_digits(i)\n    return count\ndef sum_digits(x):\n    total = 0\n    while x>0:\n        total+=x%10\n        x//=10\n    return total\ndef is_prime(num):\n    if num==1:\n        return False\n    for i in range(2,num//2+1):\n        if num%i == 0:\n            return False\n    return True\nif __name__ == '__main__':\n    print(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))",
        "test": "assert ",
        "num_ids": 827
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        temp = []\n        for k in dict.keys():\n            if type(k) is str:\n                temp.append(k.lower())\n            else:\n                temp.append(k)\n        if len(set(temp)) == len(dict):\n            return True\n        else:\n            return False\n",
        "test": "assert     check_dict_case({\"aBc\":\"b\", \"ABC\":\"B\"}) == False, \"Check\"",
        "num_ids": 1757
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    count = 2\n    primes = []\n    while count < n:\n        if is_prime(count):\n            primes.append(count)\n            count += 1\n        else:\n            count += 1\n",
        "test": "assert",
        "num_ids": 425
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return a*b\n",
        "test": "assert     (multiply(8, 0) == 0)",
        "num_ids": 561
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    s_list = list(s)\n    count = 0\n    for i in range(len(s_list)):\n        if i % 2 == 0:\n            if s_list[i].upper() in \"AEIOU\":\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 342
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    a = float(value)\n    b = int(a)\n    if a - b == 0:\n        return b\n    elif a - b < 0:\n        return b - 1\n    else:\n        return b + 1\n",
        "test": "assert     closest_integer(\"5.6\") == 6",
        "num_ids": 223
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    if n % 2 == 0:\n        count = n\n        result = [count]\n        while count!= 0:\n            count = count // 2\n            result.append(count)\n        return result\n    else:\n        count = n\n        result = [count]\n        while count!= 0:\n            count = count // 2\n            if count == 1:\n                result.append(count)\n                count = 0\n            else:\n                result.append(count)\n        return result[::-1]\n",
        "test": "assert     make_a_pile(0) == [0]",
        "num_ids": 752
    },
    {
        "number": 101,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    import re\n    return re.findall(r'[A-Za-z]{1,}', s)\n",
        "test": "assert     words_string('Hi') == ['Hi']",
        "num_ids": 852
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    #Fill in this function.\n    return -1\n",
        "test": "assert     choose_num(1, 10) == -1, \"Wrong answer\"",
        "num_ids": 778
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(sum([n, m]) // 2)\n",
        "test": "assert ",
        "num_ids": 294
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    if not x:\n        return x\n    x = [int(i) for i in x]\n    y = [int(i) for i in x if i % 2!= 0]\n    return sorted(y)\n",
        "test": "assert     unique_digits([]) == [], \"Test4 Fail\"",
        "num_ids": 798
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 466
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # 1. Implement the function f as described above\n    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    # 2. Return the list of values obtained\n    return l\n",
        "test": "assert     f(4) == [1, 2, 6, 24], \"incorrect\"",
        "num_ids": 447
    },
    {
        "number": 107,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    # count even and odd palindrome\n    count_odd, count_even = 0, 0\n    for i in range(1, n+1):\n        # break if number is palindrome\n        if str(i) == str(i)[::-1]:\n            # check if even\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    # return tuple\n    return (count_odd, count_even)\n",
        "test": "assert even_odd_palindrome(3) == (2, 1)",
        "num_ids": 641
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    return sum(len(str(abs(x))) for x in arr if x < 0)\n",
        "test": "assert     count_nums([])     == 0",
        "num_ids": 304
    },
    {
        "number": 109,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    length = len(arr)\n    if length == 0:\n        return True\n    arr_sorted = sorted(arr)\n    if arr_sorted == arr:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([3, 3, 1, 2]) == False",
        "num_ids": 666
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    for i in lst1:\n        if i%2!=0:\n            return \"NO\"\n    for j in lst2:\n        if j%2!=0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([], []) == \"YES\"",
        "num_ids": 888
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    test = test.lower()\n    d = {}\n    for i in test:\n        if i not in d:\n            d[i] = test.count(i)\n    return d\n",
        "test": "assert     histogram(\"abcdefg\") == {'a':1, 'b':1, 'c':1, 'd':1, 'e':1, 'f':1, 'g':1}, \"histogram() #1\"",
        "num_ids": 779
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    for i in range(len(c)):\n        for j in range(len(s)):\n            if c[i] == s[j]:\n                s = s[:j] + s[j+1:]\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n",
        "test": "assert     reverse_delete('abc','def') == ('abc', False)",
        "num_ids": 801
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # new_list = []\n    # for string in lst:\n    #     if string[0] % 2!= 0:\n    #         new_list.append(1)\n    #     elif string[-1] % 2!= 0:\n    #         new_list.append(1)\n    #     else:\n    #         new_list.append(0)\n    # return new_list\n    return [count_odd_digits(s) for s in lst]\n",
        "test": "assert     odd_count([\"\", \"12\", \"3\", \"21\"]) == [0, 1, 1, 1]",
        "num_ids": 708
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1] + nums[i]:\n                nums[i] = nums[i-1] + nums[i]\n            min_sum = min(min_sum, nums[i])\n        return min_sum\n",
        "test": "assert     minSubArraySum([3, 3]) == 3",
        "num_ids": 718
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    def bucket_left_cover(grid, bucket_capacity):\n        \"\"\"\n        Left covered area of the bucket\n        \"\"\"\n        left_cover_area = 0\n        for well in grid:\n            i = 0\n            while i < len(well) and well[i] == 0:\n                i += 1\n            left_cover_area += len(well) - i\n        return left_cover_area\n",
        "test": "assert ",
        "num_ids": 1713
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    \n    def f(n):\n        return n.count('1')\n    \n    return sorted(arr, key=f)",
        "test": "assert ",
        "num_ids": 477
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    # Hint: Use a dictionary to store the count of each char\n    # Hint: Use a set to store the words in order\n    # Hint: Use a set to store the result\n    result = []\n    words = s.split()\n    consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'}\n    for word in words:\n        if len(set(word.lower()).intersection(consonants)) == n:\n            result.append(word)\n    return result\n",
        "test": "assert     select_words('', 0) == []",
        "num_ids": 828
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    for i in range(1, len(word)-1):\n        if word[i] in 'aeiou' and word[i-1] not in 'aeiou' and word[i+1] not in 'aeiou':\n            return word[i]\n    return \"\"\n",
        "test": "assert     get_closest_vowel(\"abracadabraa\") == \"a\"",
        "num_ids": 672
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    # Your code here\n    return 'Yes'\n",
        "test": "assert     match_parens(['(())', '()(()']) == 'Yes'",
        "num_ids": 636
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    if k > len(arr):\n        raise Exception(\"k must be less than or equal to the length of the array.\")\n    arr.sort()\n    return arr[::-1][:k]\n",
        "test": "assert     maximum([3, 4, 1, 5, 2], 0) == []",
        "num_ids": 420
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    \n    answer = 0\n    for i, val in enumerate(lst):\n        if i % 2!= 0 and val % 2!= 0:\n            answer += val\n    return answer",
        "test": "assert     solution([1,2,3,4,5,6,7,8]) == 0",
        "num_ids": 414
    },
    {
        "number": 122,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([0], 1) == 0, \"wrong result\"",
        "num_ids": 1469
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    output = []\n    while n > 1:\n        output.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n+1\n    output.append(1)\n    return sorted(output)\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 677
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    try:\n        parsed_date = parse_date(date)\n        return (\n            parsed_date is not None and\n            parsed_date.year >= 1 and parsed_date.month >= 1 and parsed_date.month <= 12 and parsed_date.day >= 1 and parsed_date.day <= 31 if parsed_date.month == 2 and parsed_date.day >= 1 and parsed_date.day <= 29 else (\n                parsed_date is not None and\n                parsed_date.month >= 1 and parsed_date.month <= 12 and parsed_date.day >= 1 and parsed_date.day <= 30 if parsed_date.month == 4 or parsed_date.month == 6 or parsed_date.month == 9 or parsed_date.month == 11 else (\n                    parsed_date is not None and\n                    parsed_date.month >= 1 and parsed_date.month <= 12 and parsed_date.day >= 1 and parsed_date.day <= 31\n                )\n            )\n        )\n    except:\n        return False\n",
        "test": "assert     valid_date(\"04-22-2021\") == False",
        "num_ids": 558
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    # return [word for word in txt.split()]\n    # return txt.split()\n    # return list(filter(None, [word for word in txt.split()]))\n    # return list(filter(None, txt.split()))\n    return [word for word in txt.split() if word]\n",
        "test": "assert     split_words('a') == ['a'], 'incorrect split_words: a'",
        "num_ids": 598
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n",
        "test": "assert     is_sorted([1, 2, 3, 4, 5]) == True",
        "num_ids": 523
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    # Insert your code here\n    s1, e1 = interval1\n    s2, e2 = interval2\n    if s1 < e2 and s2 < e1:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     intersection((1, 3), (5, 6)) == \"NO\"",
        "num_ids": 777
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    result = None\n    if arr:\n        result = sum([abs(i) for i in arr]) * (-1 if arr[0] < 0 else 1)\n    return result\n",
        "test": "assert     (prod_signs([]) == None)",
        "num_ids": 529
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # (1) - Initialize the matrix m (dictionary) to store the minimum paths \n    # from the top left corner to the bottom right corner\n    #    Initialize the vector m_grid to store the minimum paths for all the \n    #    corner to corner paths\n    m_grid = {(0, 0): [grid[0][0]]}\n    m_grid[(0, 0)] = m_grid[(0, 1)] = m_grid[(1, 0)] = m_grid[(1, 1)] = \\\n                [grid[0][0], grid[0][1], grid[1][0], grid[1][1]]\n    # (2) - Loop from k to 1\n    for i in range(2, k+1):\n        # (2.1) - For each cell C in the grid, we loop through each neighbor\n        # of C\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                # (2.1.1) - For each neighbor of C, we loop through all the\n                # possible paths from C to C'\n                for r_p in range(r-1, r+2):\n                    for c_p in range(c-1, c+2):\n                        # (2.1.2) - We compare the current minimum path to the\n                        # path that is formed by the current cell C and the\n                        # neighbor C', and if the path is shorter, we replace\n                        # m_grid[C] with the path that is formed by C and C'.\n                        # The path that is formed by C and C' is composed of\n                        # the minimum path of C and the neighbor of C', and we\n                        # add the neighbor of C' to the path\n                        if (0 <= r_p <= len(grid)-1) and (0 <= c_p <= len(grid[0])-1):\n                            if (r, c) not in m_grid:\n                                m_grid[(r, c)] = []\n                            new_grid = m_grid[(r, c)]\n                            m_grid[(r, c)] = [grid[r][c]] + new_grid\n                            if len(m_grid[(r, c)]) > i:\n                                m_grid[(r, c)] = m_grid[(r, c)][:i]\n    # (3) - Return the minimum path\n    return m_grid[(len(grid)-1, len(grid[0])-1)][0]\n",
        "test": "assert ",
        "num_ids": 1785
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    seq = [1, 1, 2, 3]\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            seq.append(seq[i // 2])\n        else:\n            seq.append(seq[(i - 1) // 2] + seq[(i - 2) // 2] + seq[(i + 1) // 2])\n    return seq\n",
        "test": "assert ",
        "num_ids": 710
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            return 0\n        product *= digit\n        n //= 10\n    return product\n",
        "test": "assert digits(9) == 9",
        "num_ids": 403
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if string == \"\":\n        return False\n    while '[]' in string:\n        string = string.replace('[]','')\n    return string == ''\n",
        "test": "assert     not is_nested('()(()()[()]()()())')",
        "num_ids": 681
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    new_lst = [int(math.ceil(i ** 2)) for i in lst]\n    return sum(new_lst)\n",
        "test": "assert     sum_squares([0]) == 0",
        "num_ids": 389
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if txt == '':\n        return False\n    else:\n        for i in txt[-1]:\n            if i.isalpha() == True:\n                return True\n            else:\n                return False\n",
        "test": "assert     check_if_last_char_is_a_letter('hello world') == True",
        "num_ids": 640
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    sorted_arr = sorted(arr)\n    for i, val in enumerate(arr):\n        if sorted_arr[i] > val:\n            return sorted_arr[i-1]\n    return -1\n",
        "test": "assert     can_arrange([1, 1, 1, 1, 1]) == -1",
        "num_ids": 700
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    max_neg, min_pos = None, None\n    for num in lst:\n        if num >= 0 and min_pos is None:\n            min_pos = num\n        elif num > 0 and num < min_pos:\n            min_pos = num\n        elif num <= 0 and num > max_neg:\n            max_neg = num\n        elif num < 0 and num > max_neg:\n            max_neg = num\n    return (max_neg, min_pos)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 863
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "test": "assert     compare_one(0.5, 0.2) == 0.5, 'incorrect'",
        "num_ids": 783
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    n = abs(n)\n    for i in range(2, n):\n        if (n - i * 2) % 4 == 0:\n            return True\n    return False\n",
        "test": "assert     is_equal_to_sum_even(10) == True, \"Incorrect\"",
        "num_ids": 1674
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    \n    # The code below is incorrect and we'll fix it in a coming task\n    \n    if n < 0:\n        raise ValueError('Invalid input, n should be >= 0')\n    if n == 0:\n        return 1\n    else:\n        return n*special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 340
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # We keep track of the amount of spaces we have seen\n    # In the case that we have more than 2 spaces, we replace them with -\n    spaces = 0\n    new_text = \"\"\n    for c in text:\n        if c == \" \":\n            spaces += 1\n            if spaces > 2:\n                new_text += \"_\"\n            else:\n                new_text += c\n        else:\n            new_text += c\n            spaces = 0\n    return new_text",
        "test": "assert ",
        "num_ids": 469
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if 3 <= len(file_name) <= 3:\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name[:file_name.index('.')] == '':\n        return 'No'\n    elif file_name[file_name.index('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n    \n    ",
        "test": "assert     file_name_check('0') == 'No'",
        "num_ids": 1073
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sum([i if i % 3 == 0 else i**2 if i % 4 == 0 else i**3 for i in lst])\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 397
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    from utils import is_prime\n    words = sentence.split(' ')\n    result = ''\n    for word in words:\n        if is_prime(len(word)):\n            result += word +''\n    return result[:-1]\n",
        "test": "assert     words_in_sentence('hi') == 'hi'",
        "num_ids": 1834
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return False\n",
        "test": "assert     simplify(x=0, n=\"5/4\") == False",
        "num_ids": 331
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))\n",
        "test": "assert     order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 659
    },
    {
        "number": 146,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10 % 10 % 2 == 1 and num % 10 % 2 == 1):\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([1,3,5,7,9]) == 0",
        "num_ids": 751
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 509
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.capitalize()\n    planet2 = planet2.capitalize()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    lista = []\n    for x in planets:\n        if x not in (planet1, planet2):\n            if x < planet1:\n                if planet2 > x:\n                    lista.append(x)\n            elif planet2 < x:\n                lista.append(x)\n    lista.sort()\n    return tuple(lista)\n",
        "test": "assert bf('Mercury', 'Pluto') == ()",
        "num_ids": 2134
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    odd_list = []\n    even_list = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    # print(even_list)\n    # print(odd_list)\n    # print(sorted(even_list))\n    # print(sorted(odd_list))\n    return sorted(sorted(even_list) + sorted(odd_list))\n",
        "test": "assert     sorted_list_sum([\"xbc\", \"abc\", \"yab\", \"abz\"]) == ['abc', 'abz', 'xbc', 'yab']",
        "num_ids": 1028
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    if n == x:\n        return y\n    else:\n        return x\n",
        "test": "assert     x_or_y(3, 4, 6) == 4",
        "num_ids": 503
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    odd_sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            odd_sum += i ** 2\n    return odd_sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1700
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    \n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare([1, 2], [1, 3]) == [0, 1], \"Wrong result for example #3\"",
        "num_ids": 959
    },
    {
        "number": 153,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    sm = 0\n    cap = 0\n    for i in range(0, len(extensions)):\n        if extensions[i][0].isupper():\n            cap += 1\n        else:\n            sm += 1\n    return class_name + \".\" + extensions[0]\n",
        "test": "assert     Strongest_Extension('Dancer', ['Dancer', 'Dancer1', 'Dancer2']) == 'Dancer.Dancer'",
        "num_ids": 1397
    },
    {
        "number": 154,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    # a = str(a)\n    # b = str(b)\n    # a = [a for a in a]\n    # b = [b for b in b]\n    # print(a,b)\n    a_word = ''\n    b_word = ''\n    for i in range(0,len(a)):\n        a_word+=a[i]\n    for j in range(0,len(b)):\n        b_word+=b[j]\n    if a_word in b_word:\n        return True\n    elif a_word[1:] in b_word:\n        return True\n    elif a_word[2:] in b_word:\n        return True\n    elif a_word[3:] in b_word:\n        return True\n    else:\n        return False\n",
        "test": "assert     cycpattern_check('a', 'ab') is True",
        "num_ids": 836
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return (num // 10) % 2, num % 10\n",
        "test": "assert     even_odd_count(79) == (1,9)",
        "num_ids": 412
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        return 'invalid input!'\n",
        "test": "assert     int_to_mini_roman(20) == 'xx'",
        "num_ids": 1373
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return a*a+b*b==c*c or b*b+c*c==a*a or a*a+c*c==b*b",
        "test": "assert     right_angle_triangle(1, 2, 3) == False",
        "num_ids": 517
    },
    {
        "number": 158,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    words = sorted(words, key=lambda word: len(set(word)))\n    max_len_word = words[0]\n    for word in words:\n        if len(set(word)) > len(set(max_len_word)):\n            max_len_word = word\n    return max_len_word\n",
        "test": "assert     find_max([\"dog\", \"dog\", \"dog\"]) == \"dog\"",
        "num_ids": 985
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "test": "assert     eat(2, 10, 20) == [12, 10]",
        "num_ids": 585
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    pass\n",
        "test": "assert     do_algebra([\"+\", \"*\", \"-\"], [2, 3]) == 5, \"Error in do_algebra. Result should be 5\"",
        "num_ids": 451
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            if s_list[i].isupper():\n                s_list[i] = s_list[i].lower()\n            else:\n                s_list[i] = s_list[i].upper()\n    return \"\".join(s_list)\n",
        "test": "assert     solve('1') == '1'",
        "num_ids": 680
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert     string_to_md5(\"\") is None, \"Wrong result for empty input\"",
        "num_ids": 453
    },
    {
        "number": 163,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    # get even numbers between a and b\n    # convert to list of integers\n    # sort the list\n    # return the list\n    evens = []\n    # Use the modulo operator to get the remainder of each value.\n    # if the value is 0, then it's even.\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            evens.append(i)\n    return sorted(evens)\n",
        "test": "assert     generate_integers(8, 2) == []",
        "num_ids": 775
    }
]