[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # Start by using a stack to keep track of open parens\n    stack: List[str] = []\n    result: List[str] = []\n",
        "test": "assert     separate_paren_groups(\"(()))\") == [\"()\", \"(())\"]",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return number % 1\n",
        "test": "assert     truncate_number(12.25) ==.25",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    if balance < 0:\n        return True\n    return False\n",
        "test": "assert     below_zero([1, 2, 3]) == False",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers) / len(numbers)), numbers)) / len(numbers)\n",
        "test": "assert     abs(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) - 1.0) < 0.00001",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    result = []\n    # for i in range(len(numbers) - 1):\n    #     result.append(numbers[i])\n    #     result.append(delimeter)\n    # result.append(numbers[-1])\n    # return result\n    if len(numbers) == 0:\n        return []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert     intersperse([1, 2, 3, 4], 1) == [1, 1, 0, 2, 1, 3, 1, 4, 1]",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    ans = []\n    temp = 0\n    count = 0\n    for x in paren_string:\n        if x == '(':\n            count += 1\n            temp += 1\n        elif x == ')':\n            count -= 1\n            temp -= 1\n            if count == 0:\n                ans.append(temp)\n                temp = 0\n    return ans\n",
        "test": "assert     parse_nested_parens(\"()\")     == [0]",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"world\", \"test\"], \"hello\") == [\"hello\"]",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for i in numbers:\n        product_ *= i\n    return (sum_, product_)\n",
        "test": "assert     sum_product([2,2]) == (4, 4)",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    res: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        else:\n            res.append(max(res[i - 1], numbers[i]))\n    return res\n",
        "test": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    suffix_start_index = len(string)\n    if is_palindrome(string):\n        return string\n    for suffix_index in range(1, len(string) + 1):\n        suffix = string[-suffix_index:]\n        if is_palindrome(suffix):\n            prefix = string[:-suffix_index]\n            return prefix + suffix[::-1]\n        else:\n            suffix_start_index = suffix_index\n",
        "test": "assert     make_palindrome(\"foobar\") == \"foobarbar\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n",
        "test": "assert     string_xor('11', '1') == '10', \"Wrong answer for string_xor('11', '1')\"",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = max(len(s) for s in strings)\n    return [s for s in strings if len(s) == max_len][0]\n",
        "test": "assert     longest([\"vai\", \"tudo\", \"bem\", \"nao\", \"esta\", \"tudo\", \"bem\"]) == \"tudo\"",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert     greatest_common_divisor(2, 4) == 2",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # final_str = string\n    # final_str = string.split(\" \")\n    final_str = string[0:]\n    # print(final_str)\n    all_list = []\n    for i in range(len(final_str)):\n        # print(final_str[i])\n        list1 = final_str[0:i+1]\n        all_list.append(list1)\n    # print(all_list)\n    return all_list\n",
        "test": "assert     all_prefixes('') == []",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('abc') == 3",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return [4 if s == 'o' else 2 if s == 'o|' else 1 for s in music_string.split()]\n",
        "test": "assert     parse_music(\"o.o|o|o|o|o|o|o|o|o\") == [4, 2, 1, 1, 1, 1, 1, 1, 1]",
        "num_ids": 2421,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    result = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            result += 1\n    return result\n",
        "test": "assert     how_many_times('aaaaa', 'b') == 0",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "test": "assert     sort_numbers('zero nine three four five') == 'zero nine three four five'",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    numbers.sort()\n    first, second = numbers[:2]\n    return (first, second) if first < second else (second, first)\n",
        "test": "assert     find_closest_elements([0,0,0,0,0,0,0,0,0,0]) == (0,0)",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "test": "assert rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [x for x in values if type(x) == int]\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    prime_numbers = []\n    for num in range(2, n + 1):\n        while n % num == 0:\n            prime_numbers.append(num)\n            n //= num\n    return prime_numbers\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    new_numbers = []\n    for i in numbers:\n        if i not in new_numbers:\n            new_numbers.append(i)\n    return new_numbers\n",
        "test": "assert     remove_duplicates([2, 2, 2, 11]) == [2, 11]",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "test": "assert     flip_case('') == ''",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \"\".join(strings)\n",
        "test": "assert     concatenate([\"A\"]) == \"A\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix(['hello', 'hi', 'howdy', 'heyas'], 'hey') == ['heyas']",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if n == 1:\n        return False\n    for k in range(2,n):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(2) == True",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # Only even xs and largest non zero coefficient\n    xs = xs[1::2] + xs[::2]\n    # Find a, b\n    a = xs[0]\n    b = xs[1]\n    # From b and a, find x\n    return -b / a\n",
        "test": "assert     poly([1, 1, 1], 0) == 1",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if (i % 3)!= 0:\n            l[i] = l[i]\n    l.sort()\n    return l\n",
        "test": "assert     sort_third([1,3,6,2,4]) == [1,2,3,4,6]",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    x = []\n    for a in l:\n        if a not in x:\n            x.append(a)\n    x.sort()\n    return x\n",
        "test": "assert     unique([1, 2, 3, 3, 4, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n",
        "test": "assert     max_element([1, 5, -2, 6]) == 6, f'error 1'",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    def f(n):\n        counter = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                if 7 in str(i):\n                    counter += 1\n        return counter\n    return f(n)\n",
        "test": "assert     fizz_buzz(101) == 3, \"wrong result for fizz_buzz(101)\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # for i in range(len(l)):\n    #     if i % 2 == 0:\n    #         l[i], l[i+1] = l[i+1], l[i]\n    # return l\n    return sorted(l, key=lambda x: x if x % 2 == 0 else 0)\n",
        "test": "assert     sort_even([1, 1, 1, 1]) == [1, 1, 1, 1], \"Problem with sort_even\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "assert     decode_cyclic(encode_cyclic(s = \"ATCGATCG\")) == \"ATCGATCG\"",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    # you can probably guess that this is an exponential time solution\n    # try to improve this to linear time\n    primes = [2, 3, 5, 7]\n    i = 1\n    while len(primes) < n:\n        a = primes[-2:]\n        b = primes[-1]\n        c = a[0] + b\n        d = c + b\n        if c % d == 0:\n            primes.append(d)\n            i += 1\n        else:\n            primes.append(c)\n            i += 1\n    return primes[n - 1]",
        "test": "assert ",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == False",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    assert(n > 0)\n    # trivial case\n    if n == 1:\n        return 0\n    # determine what is the position of the last car that we'll drive left\n    #  (left_end)\n    # and what is the position of the last car that we'll drive right (right_end)\n    left_end = n - 1\n    right_end = n - 1\n    # adjust right_end to be right to the leftmost car\n    while right_end % 2 == 1:\n        right_end -= 1\n    while left_end % 2 == 0:\n        left_end -= 1\n    # we can now expect that the number of cars in the left-most car is left_end\n    # and the number of cars in the right-most car is right_end\n    # we can find the number of cars in the middle car by subtracting left_end from right_end\n    middle_car = right_end - left_end\n    # now, assume that we're at position right_end, and we need to move left.\n    # if there are more left cars than right cars, we'll need to move right.\n    # We'll keep incrementing the number of right cars until we've run out\n    # of left cars.  When we do, we'll need to move left again.\n    # So, we'll do this until we've exhausted the left cars.\n    total_cars = 0\n    while left_end > 0:\n        total_cars += left_end\n        right_end += left_end\n        left_end -= 1\n        if right_end > left_end:\n            right_end -= 1\n    # our final right_end should be right_end + 1, so subtract one more\n    total_cars += right_end\n    return total_cars\n",
        "test": "assert     car_race_collision(1) == 0, \"car_race_collision(1)\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1,2,3]) == [2,3,4]",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"empty list\"",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return bin(x)[2:] if base == 2 else oct(x)[2:] if base == 8 else hex(x)[2:] if base == 16 else str(x)\n",
        "test": "assert     change_base(12, 2) == '1100', 'Should be 1100'",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return a * h / 2\n",
        "test": "assert ",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    fib4_dict = {0:0, 1:0, 2:2, 3:0}\n    if n >= 4:\n        for i in range(4, n+1):\n            fib4_dict[i] = fib4_dict[i-1] + fib4_dict[i-2] + fib4_dict[i-3] + fib4_dict[i-4]\n    return fib4_dict[n]\n    ",
        "test": "assert     0 == fib4(0)",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n",
        "test": "assert     median([1, 2, 3]) == 2",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"aba\") == True",
        "num_ids": 205,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    # BASE CASE\n    if n == 0:\n        return 1\n    if n == 1:\n        return p - 1\n    \n    # RECURSIVE CASE\n    return modp(n - 1, p) + p - 1\n",
        "test": "assert     modp(1,2) == 1",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"mmai\" == decode_shift(encode_shift(\"mmai\"))",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not isinstance(text, str):\n        raise TypeError('text must be a string')\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n",
        "test": "assert     remove_vowels('hello') == 'hll', 'Remove vowels should remove vowels from a text'",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # for num in l:\n    #     if num >= t:\n    #         return False\n    # return True\n    return all(num < t for num in l)\n",
        "test": "assert     below_threshold([3, 2, 1], 0) == False",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(1,2) == 3",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    lst0 = []\n    lst1 = []\n    if len(s0)!= len(s1):\n        return False\n    for ch in s0:\n        if ch not in lst0:\n            lst0.append(ch)\n    for ch in s1:\n        if ch not in lst1:\n            lst1.append(ch)\n    return lst0 == lst1\n",
        "test": "assert     same_chars(\"apple\", \"pleap\") == False, \"Test1: expected False\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert ",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    opened_brackets = 0\n    for b in brackets:\n        if b == '<':\n            opened_brackets += 1\n        else:\n            opened_brackets -= 1\n        if opened_brackets < 0:\n            return False\n    return opened_brackets == 0\n",
        "test": "assert     correct_bracketing(\"<>>\") == False",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n           or all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    pass\n",
        "test": "assert     not monotonic([1, 2, 5, 4, 5, 6, 7, 8])",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "test": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    i = 2\n    while i * i < n:\n        if n % i == 0:\n            n //= i\n            return i\n        i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(2)    == 2",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    i = 1\n    total = 0\n    while i <= n:\n        total += i\n        i += 1\n    return total\n",
        "test": "assert ",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     not correct_bracketing(\"(()\")",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    result = []\n    for i, x in enumerate(xs[:-1]):\n        if i == 0:\n            result.append(x)\n        else:\n            result.append(i * x)\n    return result\n",
        "test": "assert ",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    assert n >= 0\n",
        "test": "assert ",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n        if letter == \"y\" and s[-1]!= \"y\":\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"\") == 0",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[num_digits-shift:shift] + str(x)[:num_digits-shift]\n",
        "test": "assert     (circular_shift(912,3) == '912')",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    s = str(s)\n    return sum([ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90])\n",
        "test": "assert     digitSum('') == 0, \"Wrong answer for empty string!\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    s = s.split()\n    return n - int(s[1]) - int(s[0])\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\nprint(fruit_distribution(\"0 apples and 0 oranges\",0))",
        "test": "assert fruit_distribution('1/3/2/3/2/2/3/3/3/3/2/3/3/3/3', 13) == 2",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    assert arr, 'Array cannot be empty'\n    \n    if not arr:\n        return []\n",
        "test": "assert     pluck([1, 3, 2, 5]) == [2, 3]",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # your code here\n    max_value = max(lst)\n    max_count = lst.count(max_value)\n    \n    if max_count < max_value:\n        return -1\n    return max_value\n",
        "test": "assert     search([1, 1, 2, 3, 3, 4, 5, 7, 7]) == -1",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if lst == []:\n        return []\n    else:\n        sorted_list = sorted(lst)\n        strange_list = [sorted_list[0]]\n        for i in range(1, len(sorted_list)):\n            strange_list.append(sorted_list[-i])\n            strange_list.append(sorted_list[i])\n    return strange_list\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    def palindrome(lst):\n        \n        def reverse(lst):\n            return [x for x in reversed(lst)]\n        \n        def is_palindrome(lst):\n            return lst == reverse(lst)\n        \n        return is_palindrome(lst)\n    \n    def sum_weight(lst):\n        \n        def add_together(lst):\n            return sum(lst)\n        \n        return add_together(lst)\n    \n    if palindrome(q) and sum_weight(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly([\"ab\", \"bc\"], 1) is False, \"wrong answer\"",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n",
        "test": "assert     smallest_change([1, 1, 3, 3]) == 0",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return lst2\n",
        "test": "assert     total_match(['abc', 'de', 'fg'], ['def', 'gfh', 'i']) == ['abc', 'de', 'fg']",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for i in range(2, int(math.sqrt(a))+1):\n        if a % i == 0:\n            return False\n    for i in range(2, int(math.sqrt(a))+1):\n        if is_prime(i) and (a/i) % 1 == 0:\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(3*5*13) == False",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return x%n==0 and n!=0\n",
        "test": "assert     is_simple_power(2, 3) == False",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return True if a ** 3 == 0 else False\n",
        "test": "assert     iscube(0) == True",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    #count the number of prime numbers in hex_num\n    num = num.upper()\n    prime_count = 0\n    for char in num:\n        if char in \"ABCDEF\":\n            prime_count += 1\n    return prime_count\n",
        "test": "assert     hex_key('1A2B3C4D') == 4",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return 'db' + ''.join(str(1 & int(digit) > 0) for digit in reversed(bin(decimal)[2:])) + 'db'\n",
        "test": "assert ",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    while len(set(s)) < len(s):\n        i = 0\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                del s[i]\n                del s[i]\n                i -= 1\n                break\n            i += 1\n        if i == len(s)-1:\n            return True\n    return False\n",
        "test": "assert     is_happy('unhappy') == False",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    \n    return grades\n",
        "test": "assert     numerical_letter_grade(    [4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) ",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if len(string) == 2:\n        return len(string) % 2!= 0\n    return len(string) % 2!= 0 and prime_length(string[1:])\n",
        "test": "assert     prime_length(\"a\") == False, \"ERROR: a is not a prime number\"",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == 1:\n        return 1\n    return 10 ** (n - 1) - starts_one_ends(n - 1)\n",
        "test": "assert     starts_one_ends(1) ==    1",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return bin(N)[2:]",
        "test": "assert     (solve(10) == '1010'), \"Incorrect solution for solve(10)\"",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2 == 0:\n                new_lst.append(lst[i])\n    return sum(new_lst)\n",
        "test": "assert     add([1,2,3]) == 2",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return''.join(sorted(''.join(s).split(), key=str.lower))\n",
        "test": "assert     anti_shuffle('abc') == 'abc'",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if not lst: return []\n    return sorted(((i, j) for i, row in enumerate(lst) for j in range(len(row)) if row[j] == x), key=lambda x: (x[0], -x[1]))\n",
        "test": "assert     get_row([[1,2,3], [1,2,3], [1,2,3]], 2) == [(0, 0), (0, 1), (0, 2)]",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # your code here\n    for i in range(len(array)):\n        for j in range(len(array)-1-i):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n",
        "test": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'incorrect'",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    newstring = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                if (ord(char)+2) <= 91:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n            else:\n                if (ord(char)+2) <= 123:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n        else:\n            newstring += char\n    return newstring\n",
        "test": "assert encrypt(\"a\"), \"If one letter is passed, the function should return the same letter\"",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return None\n    \n    lst.sort()\n    return lst[1]\n",
        "test": "assert     next_smallest([1,2,3]) == 2",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    #print(S)\n    count=0\n    lis=S.split('.')\n    for x in lis:\n        if 'I'in x:\n            count+=1\n    print(count)\n    return count\n",
        "test": "assert     is_bored('') == 0, 'Empty string'",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return ((x == z + y) or (y == z + x)) and type(x) == type(y) == type(z) == int\n",
        "test": "assert     any_int(4, 2, 3) == False",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert     encode(\"SOS\") == \"s>o>S\"",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    \n    lst = [i for i in lst if i > 0]\n    x = [i for i in lst if isprime(i)]\n    return sum(x)\n",
        "test": "assert ",
        "num_ids": 1770,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not dict:\n        return False\n    for k, v in dict.items():\n        if not k.isupper() and not k.islower():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({}) == False, \"Wrong output\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    def is_prime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    def gen(n):\n        for i in range(2, n):\n            if is_prime(i):\n                yield i\n    return list(gen(n))\n",
        "test": "assert     count_up_to(3) == [2]",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return a*b\n",
        "test": "assert     (multiply(12, 0) == 0)",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return sum([1 for i in s[1::2] if i.isupper()])\n",
        "test": "assert     count_upper(\"abcdefg\") == 0, \"error\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    value = float(value)\n    return int(value + (value % 1))\n    # or using math.ceil()\n    # return math.ceil(value)\n",
        "test": "assert     closest_integer(10.0) == 10",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # raise NotImplementedError(\"TODO\")\n    return [n]\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return s.split()\n",
        "test": "assert     words_string('a') == ['a']",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if x < 0 or y < 0:\n        raise ValueError('x and y must be positive integers')\n    return -1 if x > y else max([i for i in range(x, y+1) if i%2 == 0])\n",
        "test": "assert     choose_num(1, 3) == 2",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass\n    n, m = sorted((n, m))\n    if n > m:\n        return -1\n    return bin(int((m+n+1)/2))[2:]\n",
        "test": "assert     rounded_avg(7, 9) == 7, rounded_avg(7, 9)",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    result = []\n    for n in x:\n        if n%2!= 0:\n            result.append(n)\n    result.sort()\n    return result\n",
        "test": "assert     unique_digits([7]) == [7]",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    pass\n",
        "test": "assert     by_length([1, 8, 6, 2, 1]) == [\"Five\", \"Eight\", \"Six\", \"Two\", \"One\"]",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    lst = [1]\n    for i in range(1, n):\n        lst.append(i*i if i % 2 == 0 else sum(range(1, i+1)))\n    return lst\n",
        "test": "assert     f(1) ==     [1]",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return (0, 0) if n < 2 else (len(list(filter(lambda x: str(x) == str(x)[::-1], range(1, n + 1)))), len(list(filter(lambda x: str(x)!= str(x)[::-1], range(1, n + 1)))))\n",
        "test": "assert     even_odd_palindrome(10) == (9, 1)",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(arr) == 0:\n        return 0\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return True\n",
        "test": "assert     move_one_ball([1, 2, 3, 4, 5])",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([1, 2], [3, 4]) == \"NO\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    histo = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            histo[letter] = histo.get(letter, 0) + 1\n    return histo\n",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return (s.replace(c,\"\"),len(s) == len(s[::-1]))\n",
        "test": "assert     reverse_delete('abcd', 'abcd') == ('', True)",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # make a list of a list for each string in lst\n    # iterate through lst\n        # count num of odd chars\n        # append to out list\n    return [\"the number of odd elements \" + str(len([i for i in [i for i in i if int(i)%2!=0]])) + \"n the str\" + str(num) + \"n of the \" + str(len(str)) + \"nput.\" for num,str in enumerate(lst)]\n",
        "test": "assert     odd_count(['1337']) == [1]",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    start = 0\n    currSum = 0\n    result = float('inf')\n    \n    for end in range(len(nums)):\n        currSum += nums[end]\n        while currSum >= 0:\n            if currSum < result:\n                result = currSum\n            currSum -= nums[start]\n            start += 1\n    return result if result < float('inf') else 0\n    \ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    start = 0\n    end = 0\n    result = float('inf')\n    \n    while end < len(nums):\n        result = min(result, sum(nums[start:end+1]))\n        end += 1\n        while end < len(nums) and nums[end] >= nums[end-1]:\n            end += 1\n        start += 1\n    return result if result < float('inf') else 0\n",
        "test": "assert ",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    # print(rows, cols)\n    if rows == 0 or cols == 0 or capacity == 0:\n        return 0\n    if rows == 1 and cols == 1 and grid[0][0] == 0:\n        return 0\n    buckets_filled = 0\n    # counter = 0\n    for i in range(rows):\n        for j in range(cols):\n            # counter += 1\n            # print(i,j,counter)\n            if grid[i][j] == 0:\n                return buckets_filled\n            if grid[i][j] == 1:\n                temp_filled_buckets = get_filled_buckets(grid, i, j, capacity)\n                # print(temp_filled_buckets)\n                buckets_filled = max(buckets_filled, temp_filled_buckets)\n    return buckets_filled\n",
        "test": "assert ",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count(\"1\"), x))\n",
        "test": "assert     sort_array([0, 1, 2, 5, 12]) == [0, 1, 2, 5, 12], \"wrong result\"",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if len(s) == 0: return []\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    n_consonants = n\n    return_list = []\n    for i in words:\n        word_consonants = 0\n        for j in i:\n            if j in consonants:\n                word_consonants += 1\n        if word_consonants == n_consonants:\n            return_list.append(i)\n    return return_list\n",
        "test": "assert     select_words('', 1) == []",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # your code here\n    vowels = \"aeiouAEIOU\"\n    first_idx = len(word) - 1\n    last_idx = len(word) - 1\n    last_in_range = None\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_in_range = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            first_idx = i\n            break\n    if first_idx < last_idx:\n        return word[last_in_range]\n    else:\n        return \"\"\n",
        "test": "assert     get_closest_vowel('abca') == 'a'",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    stack = []\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        else:\n            try:\n                stack.pop()\n            except IndexError:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['(()', '()))']) == 'No'",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert     len(maximum([1, 2, 3, 4, 5], 2)) == 2",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum([lst[i] for i in range(0,len(lst)) if i%2==0 and lst[i]%2==1])\n",
        "test": "assert ",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sum([i for i in arr[:k] if len(str(i)) <= 2])",
        "test": "assert     add_elements([1, 6, 1, 4], 3) == 9, '#2 example'",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    #TODO: Your code here\n    collatz_list = []\n    for i in range(1, n):\n        collatz_list.append(collatz(i))\n    collatz_list.append(1)\n    return sorted(list(set([n for n in collatz_list if n not in collatz_list[1:len(collatz_list):2]])))\n    # return sorted([n for n in collatz_list if n not in collatz_list[1:len(collatz_list):2]])\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    try:\n        months = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n        # year,month,day = [int(i) for i in input().split('-')]\n        year,month,day = date.split('-')\n        if len(year)!= 4 or len(month)!= 2 or len(day)!= 2:\n            return False\n        if int(year) < 0 or int(month) < 1 or int(month) > 12 or int(day) < 1 or int(day) > months[int(month)]:\n            return False\n        return True\n    except ValueError:\n        return False",
        "test": "assert     valid_date('12-32-2000') == False, 'ERROR'",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    return txt.split()\n",
        "test": "assert     split_words(\"\") == []",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    new_lst = sorted(lst)\n    return lst == new_lst\n",
        "test": "assert     is_sorted([])",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    (start1, end1) = interval1\n    (start2, end2) = interval2\n    if start1 < start2 and end1 < end2 or start2 < start1 and end2 < end1:\n        return \"NO\"\n    else:\n        length = 0\n        if start1 > start2:\n            length += start1 - start2\n        else:\n            length += end2 - start1\n",
        "test": "assert     intersection((1, 2), (2, 3)) == 'NO'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not arr: return None\n    sign = lambda x: -1 if x < 0 else 1\n    return sum(abs(i) for i in arr) * prod(map(sign, arr))\n",
        "test": "assert     (prod_signs([]) == None)",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    # helper function to construct paths of a given length from the given grid and starting point\n    def construct_paths(grid, length, start):\n        \"\"\"\n        Given a grid, a length and a starting point, returns a list of all possible paths\n        of given length from that starting point\n        \"\"\"\n        \n        # base case: we have reached the end of the path\n        if length == 1:\n            return [[grid[y][x] for x, _ in enumerate(grid[y])] for y, _ in enumerate(grid)]\n        \n        # create a list of possible paths of length-1 to be added to paths of length k\n        paths_k1 = construct_paths(grid, length - 1, start)\n        \n        # create a list of possible paths of length to be added to paths of length k - 1\n        paths_k = []\n        for row in grid:\n            for cell in row:\n                paths_k.append([cell] + paths_k1[grid.index(row)])\n        \n        return paths_k\n    \n    def get_min_path_length(paths_k, k):\n        \"\"\"\n        Given a list of paths of a given length and the number of steps of a\n        path to take, returns the length of the shortest path.\n        \"\"\"\n        \n        # base case: no paths of this length\n        if not paths_k:\n            return float('inf')\n        \n        # sort paths lexicographically\n        paths_k.sort()\n        \n        # the shortest path must be of length k or less\n        if k > len(paths_k[0]):\n            return float('inf')\n        \n        # the minimum path is the one whose k-th step is the minimum\n        return min([paths_k[0][j] for j in range(k)])\n    \n    # create a 2-D matrix representation of the grid\n    matrix = [[cell for cell in row] for row in grid]\n    \n    # get all possible paths of length k\n    paths_k = construct_paths(matrix, k, (0, 0))\n    \n    # return the minimum path of length k\n    return [get_min_path_length(paths_k, k)]\n",
        "test": "assert ",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    def tribonacci(n):\n        return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)\n    if n < 3:\n        return [1, 2, 3][:n]\n    else:\n        return tribonacci(n)\n",
        "test": "assert     tri(4) == 3",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    even_digits = sum(d for d in map(int, str(n)) if d % 2 == 0)\n    return 0 if even_digits == len(str(n)) or even_digits == 0 else \\\n    int(str(n)[0]) * int(str(n)[-1]) * digits(even_digits)\n",
        "test": "assert ",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # nested_list = []\n    # for i in range(len(string)):\n    #     if string[i] == '[':\n    #         nested_list.append(string[i])\n    #     if string[i] == ']':\n    #         if len(nested_list) == 0:\n    #             return False\n    #         nested_list.pop()\n    # return False if len(nested_list)!= 0 else True\n    return not string.count('[[') - string.count(']]')\n",
        "test": "assert     is_nested('[][]') == True",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    lst_s=[]\n    for i in lst:\n        lst_s.append(int(math.ceil(i**2)))\n    return sum(lst_s)\n    # pass\n",
        "test": "assert     sum_squares([1, 2, 3, 4]) == 1 + 4 + 9 + 16, \"test case 1 failed\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    txt = txt.split()\n    if len(txt) < 1:\n        return False\n    return len(txt[-1]) == 1 and txt[-1].isalpha() == True\n",
        "test": "assert     check_if_last_char_is_a_letter(\"s\") == True, \"Wrong output\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    arr = arr.sort()\n    if arr[len(arr)-2] <= arr[len(arr)-1]:\n        return -1\n    else:\n        return arr.index(arr[len(arr)-1])\n",
        "test": "assert ",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(lst)==0:\n        return (None, None)\n    neg=None\n    pos=None\n    for i in lst:\n        if i<0:\n            neg=i\n        if i>0:\n            pos=i\n    if neg==None and pos==None:\n        return (None, None)\n    elif neg==None:\n        return (None, pos)\n    elif pos==None:\n        return (neg, None)\n    else:\n        return (neg, pos)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if type(a) is str:\n        a = float(a.replace(\",\",\".\"))\n    if type(b) is str:\n        b = float(b.replace(\",\",\".\"))\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    return None\n",
        "test": "assert     compare_one(1, 0) == 1",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    n = abs(n)\n    if (n / 2) % 2 == 0:\n        if n / 2 in [2, 4, 6, 8]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(12) == True, \"Solve me!\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "    count = n\n    factorial = 1\n    while count > 1:\n        factorial *= count\n        count -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if text == \"\":\n        return \"\"\n    text = text.split()\n    if len(text) == 1:\n        return text[0]\n    string = \"\"\n    for i in range(len(text)):\n        string += text[i]\n        if i < len(text) - 1:\n            string += \"_\"\n    string = string.replace(\"  \", \"-\")\n    return string\n",
        "test": "assert ",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if len(file_name) > 3 and file_name.isdigit() == False:\n        if file_name.count('.') == 1:\n            if file_name.split('.')[0]!= '':\n                if file_name.split('.')[0][0].isalpha():\n                    if file_name.split('.')[1].lower() in ['exe', 'dll', 'txt']:\n                        return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('0_1') == 'No'",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    output = 0\n    for i, j in enumerate(lst):\n        if (i+1) % 3 == 0 or (i+1) % 4 == 0:\n            output += j**2\n        else:\n            output += j\n    return output\n",
        "test": "assert ",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) and all([c in '0123456789' for c in w])])\n",
        "test": "assert     words_in_sentence('') == ''",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    numerator, denominator = eval(x), eval(n)\n    if denominator % numerator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"3/4\") == False",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n",
        "test": "assert     order_by_points([6, 9, 7, 2]) == [6, 9, 7, 2]",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    odd = 0\n    for n in nums:\n        if n % 10 % 2 == 1:\n            if n > 10:\n                odd += 1\n    return odd\n",
        "test": "assert     specialFilter([]) == 0, \"Wrong answer for []\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return sum([(i * i - i + 1) // 3 for i in range(1, n)])\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n        if p1 < p2:\n            return tuple(planets[p1+1:p2])\n        elif p1 > p2:\n            return tuple(planets[p2+1:p1])\n    return ()\n",
        "test": "assert     bf('Mercury', 'Jupiter') == ('Venus', 'Earth', 'Mars')",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    lst = list(set(lst))\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert     sorted_list_sum([\"a\", \"c\", \"d\"]) == [\"a\", \"c\", \"d\"]",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return n\n",
        "test": "assert     x_or_y(7,1,2) == 1",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    total = 0\n    for i in lst:\n        if isinstance(i, int) and i % 2!= 0:\n            total += i * i\n    return total\n    ",
        "test": "assert     double_the_difference([])         == 0, \"Wrong answer\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # return [abs(game[i]-guess[i]) for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "test": "assert     compare(game = [5, 6, 7, 8, 9], guess = [5, 6, 7, 8, 9]) == [0, 0, 0, 0, 0]",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # your code goes here\n    extensions_strength = []\n    for extension in extensions:\n        caps = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                caps += 1\n            if char.islower():\n                sm += 1\n        strength = caps - sm\n        extensions_strength.append([strength, extension])\n    extensions_strength = sorted(extensions_strength)\n    return class_name + '.' + extensions_strength[-1][1]\n",
        "test": "assert     Strongest_Extension('Burgers', ['EQrsh', 'ShBrBGs', 'QsWXrQS']) == 'Burgers.QsWXrQS'",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return (b in a) or (b in a+a) or (b in a+a+a) or (b in a+a+a+a) or (b in a+a+a+a+a) or (b in a+a+a+a+a+a) or (b in a+a+a+a+a+a+a) or (b in a+a+a+a+a+a+a+a)",
        "test": "assert     cycpattern_check(\"babble\", \"dictionary\") == False",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert     even_odd_count(123) == (2,3)",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    assert 1 <= number <= 1000, \"numerical input out of range. Try numbers between 1 and 1000.\"\n    tens = {1: 'x', 2: 'xx', 3: 'xxx', 4: 'xxxx', 5: 'v', 6: 'vv', 7: 'vvv', 8: 'vvvv', 9: 'ix', 10: 'x',\n            100: 'c', 200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd', 600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm',\n            1000:'m'}\n    ones = {0: '', 1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix'}\n    if number in tens:\n        return tens[number]\n    else:\n        return tens[number//10] + ones[number % 10]\n",
        "test": "assert     int_to_mini_roman(5) == \"v\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False",
        "test": "assert     not right_angle_triangle(3, 4, 6)",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    str_len = []\n    for word in words:\n        str_len.append(len(set(word)))\n    max_len = max(str_len)\n    for word in words:\n        if len(set(word)) == max_len:\n            return word\n",
        "test": "assert     find_max([\"1234\", \"1233\", \"1232\", \"1231\"]) == \"1234\", \"Test Failed\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    eaten = number + need\n    eaten_left = remaining - need\n    return [eaten, eaten_left]\n",
        "test": "assert     eat(0, 0, 5) == [0, 5]",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    result = operand[0]\n    for i in range(0, len(operand)-1):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"-\"], [2,3])         == 5",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    i=0\n    while i < len(s):\n        if s[i].isalpha():\n            s = s[:i]+s[i].swapcase()+s[i+1:]\n        i+=1\n    return s\n",
        "test": "assert     solve('abcC') == 'ABCc'",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return md5(text).hexdigest() if text else None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sorted(filter(lambda x: x % 2 == 0 and a <= x <= b, range(a, b + 1)))\n",
        "test": "assert     generate_integers(1, 21) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "num_ids": 369,
        "indeed": false
    }
]