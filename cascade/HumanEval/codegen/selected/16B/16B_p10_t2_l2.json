[
    {
        "number": 0,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    # time complexity: O(n^2)\n    # space complexity: O(1)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([3.4, 3.3, 3.2, 3.1, 3.0], 0.5) == True"
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    assert type(paren_string) == str\n    if not paren_string:\n        return []\n    if paren_string.count('(')!= paren_string.count(')'):\n        return []\n    \n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return []\n            else:\n                stack.pop()\n    return [paren_string[:index] + '(' + paren_string[index:] for index in range(1, len(paren_string), 2)]\n",
        "test": "assert     separate_paren_groups(\"\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    return number - int(number)\n",
        "test": "assert     truncate_number(23.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    return sum(operations) < 0\n",
        "test": "assert     below_zero([1, 2, 3, 4, 5]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    # TODO: Implement this function\n    if numbers:\n        return sum([abs(number - sum(numbers) / len(numbers)) for number in numbers]) / len(numbers)\n    else:\n        raise ValueError(\"Cannot calculate MAD of empty list\")\n",
        "test": "assert     mean_absolute_deviation([3,3,3,3,3]) == 0"
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "    # empty list\n    if len(numbers) == 0:\n        return []\n    # single element list\n    if len(numbers) == 1:\n        return [numbers[0]]\n    # delimeter is the same as the last element in list\n    if delimeter == numbers[-1]:\n        return intersperse(numbers[:-1], delimeter)\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "test": "assert     intersperse([], 3) == []"
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    parens_list = paren_string.split()\n    final_list = []\n    for item in parens_list:\n        nested_parens = 0\n        for char in item:\n            if char == '(':\n                nested_parens += 1\n            if char == ')':\n                nested_parens -= 1\n            if nested_parens < 0:\n                break\n        if nested_parens == 0:\n            final_list.append(0)\n        else:\n            final_list.append(nested_parens)\n    return final_list\n",
        "test": "assert     parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    result = list()\n    for i in strings:\n        if substring in i:\n            result.append(i)\n    return result\n",
        "test": "assert     filter_by_substring([\"cat\", \"dog\", \"rabbit\", \"cow\"], \"cat\") == [\"cat\"]"
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n    return numbers_sum, numbers_product\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    result: List[int] = [0] * len(numbers)\n    for i in range(len(numbers)):\n        max_val: int = numbers[i]\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_val:\n                max_val = numbers[j]\n            result[j] = max_val\n    return result\n",
        "test": "assert     rolling_max([1]) == [1]"
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    return make_palindrome(string[:-1]) + string[::-1]\n",
        "test": "assert     make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    xor = lambda a, b: bin(int(a, 2) ^ int(b, 2))[2:]\n    return xor(a, b)\n",
        "test": "assert     string_xor('1', '1') == '0'"
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if strings:\n        result = strings[0]\n        for string in strings:\n            if len(string) > len(result):\n                result = string\n    return result\n",
        "test": "assert     longest(['aba', 'aa', 'ad', 'vcd', 'aba']) == 'aba'"
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n",
        "test": "assert     greatest_common_divisor(3, 10) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0 : i + 1])\n    return prefixes\n",
        "test": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters(\"\") == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    result = list()\n    music = music_string.split(' ')\n    for i in music:\n        if i == '':\n            continue\n        if 'o' in i:\n            result.append(4)\n        elif 'o|' in i:\n            result.append(2)\n        elif '.|' in i:\n            result.append(1)\n",
        "test": "assert     parse_music('oo|oo|o|oo|o|oo|oo|.|.|.|.|.') == [8, 4, 2, 8, 8, 4, 4, 1, 1, 1, 1, 1, 1]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    total_overlaping_count = 0\n    for idx in range(len(string)):\n        if string[idx] == substring[0]:\n            count = 1\n            for j in range(1, len(substring)):\n                if idx + j >= len(string):\n                    break\n                if string[idx + j]!= substring[j]:\n                    break\n                count += 1\n            if count == len(substring):\n                total_overlaping_count += 1\n    return total_overlaping_count\n",
        "test": "assert     how_many_times(\"\", \"a\") == 0"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n",
        "test": "assert     sort_numbers(\"one two\")     == \"one two\""
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number > largest:\n            largest = number\n        if number < smallest:\n            smallest = number\n    return (smallest, largest)\n",
        "test": "assert     find_closest_elements([1, 1, 1, 1]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    import numpy as np\n    import math\n    \n    n = len(numbers)\n    if n < 2:\n        print(f\"must have at least 2 numbers to rescale\")\n        return numbers\n    numbers.sort()\n    rescaled = []\n    x = 0\n    while x < n:\n        rescaled.append((numbers[x] - numbers[0]) / (numbers[-1] - numbers[0]))\n        x += 1\n    return rescaled\n    \ndef rescale_to_unit_old(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    import numpy as np\n    import math\n    \n    n = len(numbers)\n    if n < 2:\n        print(f\"must have at least 2 numbers to rescale\")\n        return numbers\n    numbers.sort()\n    rescaled = []\n    x = 0\n    while x < n:\n        rescaled.append(numbers[x])\n        x += 1\n    return rescaled\n",
        "test": "assert     rescale_to_unit([0.8, 0.9, 1.2, 1.4, 1.5]) == [0.8, 0.9, 1.0, 1.0, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "test": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 23,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('hello') == 5"
    },
    {
        "number": 24,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    assert n>0, \"number must be positive\"\n    max_divisor = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "test": "assert     (largest_divisor(1) == 1)"
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    primes = []\n    prime = 2\n    while prime * prime <= n:\n        while n % prime == 0:\n            n //= prime\n            primes.append(prime)\n        prime += 1\n    if n > 1:\n        primes.append(n)\n    return primes\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    unique = []\n    for num in numbers:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    flipped_case = \"\"\n    for char in string:\n        if char.islower():\n            flipped_case += char.upper()\n        else:\n            flipped_case += char.lower()\n    return flipped_case\n",
        "test": "assert     flip_case('') == ''"
    },
    {
        "number": 28,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    result = ''\n    if len(strings) == 0:\n        return result\n    else:\n        return strings[0] + concatenate(strings[1:])\n        \ndef even_odd_balancing(n: int) -> str:\n    \"\"\" Balanced the odd and even digits in a number\n    >>> even_odd_balancing(43)\n    '43'\n    >>> even_odd_balancing(21)\n    '13'\n    >>> even_odd_balancing(100)\n    '13'\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return str_num\n    else:\n        if len(str_num) % 2 == 1:\n            num = int(str_num[0]) + int(str_num[1])\n            return str_num[0] + str(num) + str_num[1]\n        elif len(str_num) % 2 == 0:\n            num = int(str_num[0]) + int(str_num[2])\n            return str_num[0] + str(num) + str_num[2]\n        \ndef number_of_evens(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens(21345)\n    3\n    >>> number_of_evens(8642)\n    0\n    >>> number_of_evens(209812938)\n    6\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return 0\n    else:\n        count = 0\n        if len(str_num) % 2 == 0:\n            for i in str_num:\n                if int(i) % 2 == 0:\n                    count += 1\n            return count\n        else:\n            return 0\n        \ndef number_of_evens_alt(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens_alt(21345)\n    3\n    >>> number_of_evens_alt(8642)\n    0\n    >>> number_of_evens_alt(209812938)\n    6\n    \"\"\"\n    return len([i for i in str(n) if int(i) % 2 == 0])\n        \ndef reverse_num(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num(0)\n    0\n    >>> reverse_num(21)\n    21\n    >>> reverse_num(-21)\n    -21\n    >>> reverse_num(4321)\n    4321\n    >>> reverse_num(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef reverse_num_alt(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num_alt(0)\n    0\n    >>> reverse_num_alt(21)\n    21\n    >>> reverse_num_alt(-21)\n    -21\n    >>> reverse_num_alt(4321)\n    4321\n    >>> reverse_num_alt(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef is_odd(n: int) -> bool:\n    \"\"\" Check if number is odd\n    >>> is_odd(21)\n    True\n    >>> is_odd(0)\n    False\n    >>> is_odd(0.5)\n    False\n    >>> is_odd(24.5)\n    False\n    >>> is_odd(-24.5)\n    True\n    \"\"\"\n    return n % 2 == 1\n        \ndef sum_naturals(n: int) -> int:\n    \"\"\" Sum the first n natural numbers\n    >>> sum_naturals(0)\n    0\n    >>> sum_naturals(1)\n    1\n    >>> sum_naturals(5)\n    15\n    >>> sum_naturals(15)\n    60\n    \"\"\"\n    return int(sum([i for i in range(n+1)]))\n    ",
        "test": "assert     concatenate([\"hello\", \" \", \"world\"]) == \"hello world\""
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['foo', 'bar', 'baz'], 'ba') == ['bar', 'baz']"
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    \n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"is_prime(3) should return True\""
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    def compute_residue(xs):\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        return xs[0] / xs[1]\n",
        "test": "assert     find_zero([1, 1]) == None, \"Single zero point\""
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    i = 0\n    while i < len(l):\n        if i%3 == 0:\n            l[i] = l[i]\n            i = i+1\n        else:\n            i = i+1\n    l = sorted(l)\n    return l",
        "test": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'wrong result'"
    },
    {
        "number": 34,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    return result\n",
        "test": "assert     unique([1, 1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 35,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n",
        "test": "assert     max_element([1, 2, 3]) == 3, \"max_element test 1\""
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    if n < 7:\n        return 0\n    elif n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n // 11) + fizz_buzz(n // 13)\n    else:\n        return fizz_buzz(n // 11) + fizz_buzz(n // 13)\n",
        "test": "assert     fizz_buzz(10) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return [l[0]] + sort_even(l[1:-1]) + [l[-1]]\n",
        "test": "assert     [4, 2, 6, 8] == sort_even([4, 2, 6, 8])"
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"ab\")) == \"ab\", \"encoded to ab\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "    if n <= 2:\n        return n\n    else:\n        f = [2, 3]\n        for i in range(4, n + 1):\n            f.append((f[i - 1] + f[i - 2]) % m)\n            if check_prime(f[i]):\n                return f[i]\n",
        "test": "assert     prime_fib(2) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if not l:\n        return False\n    else:\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n    return False\n",
        "test": "assert     triples_sum_to_zero([0, 2, 3, 1, -6]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    # Note that if the same car is driving left to right and right to left, then\n    # it's a collision.  This is because cars are infinitely sturdy and strong;\n    # as a result, they continue moving in their trajectory as if they did not collide.\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            # i is the car driving right\n            # j is the car driving left\n            if i < j:\n                if (i+j)%2 == 0:\n                    collisions += 1\n    return collisions\n",
        "test": "assert     car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert     incr_list([1, 1, 1, 1]) == [2, 2, 2, 2]"
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    l = list(set(l))\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False, \"Wrong answer!\""
    },
    {
        "number": 44,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    base_numbers = \"0123456789ABCDEF\"\n    q, r = divmod(x, base)\n    if q == 0:\n        return base_numbers[r]\n    else:\n        return change_base(q, base) + base_numbers[r]\n",
        "test": "assert     change_base(3, 10) == '3'"
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    return a * h / 2\n",
        "test": "assert     triangle_area(6, 8) == 24"
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "test": "assert     median([1, 2, 3]) == 2, \"Error in median()\""
    },
    {
        "number": 48,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"anna\") == True, \"Wrong result\""
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    if n < 0:\n        n = -n\n        return p - modp(n, p)\n    if n == 0:\n        return 1\n    # elif n == 1:\n    #     return p\n    else:\n        return modp(n - 1, p)\n",
        "test": "assert     (modp(0, 4) == 1)"
    },
    {
        "number": 50,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     \"hello\" == decode_shift(encode_shift(\"hello\"))"
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    vowels = ('a','e','i','o','u')\n    text_without_vowels = ''\n    for letter in text:\n        if letter not in vowels:\n            text_without_vowels += letter\n    return text_without_vowels\n",
        "test": "assert     remove_vowels(\"aeiou\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return all([x<t for x in l])\n",
        "test": "assert     below_threshold([1, 2, 3, 4], 2) == False"
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0.lower()!= c1.lower():\n            return False\n    return True\n",
        "test": "assert     same_chars(\"cat\", \"cat\") is True"
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    # We use a Python list as a stack\n    stack = []\n    # Matching parethesis\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"<\":\n                return False\n    return len(stack) == 0\n",
        "test": "assert     correct_bracketing(\"<><\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "    prev = None\n    for n in l:\n        if prev is not None:\n            if (prev - n) * (prev - n) <= 0:\n                return False\n        prev = n\n    return True\n",
        "test": "assert     monotonic([1, 3, 5]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     set(common([1, 2, 3, 4], [3, 4, 5, 6])) == set([3, 4])"
    },
    {
        "number": 59,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n",
        "test": "assert     largest_prime_factor(101) == 101"
    },
    {
        "number": 60,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    n_sum = 0\n    for i in range(1, n + 1):\n        n_sum += i\n    return n_sum\n",
        "test": "assert "
    },
    {
        "number": 61,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True",
        "test": "assert not correct_bracketing(\"()())\")"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    n = len(xs)\n    derivative = []\n    for i in range(1, n):\n        derivative.append(i * xs[i])\n    return derivative\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "    if n < 0:\n        raise ValueError('fibfib can only handle positive integers.')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    vowels = set(\"aeiou\")\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count( \"abracadabra\" ) == 5, 'wrong result'"
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    # Using modulus to make sure we stay in the right range\n    return str(x)[-shift%len(str(x)):] + str(x)[:-shift%len(str(x))]\n",
        "test": "assert     (circular_shift(12, 1) == '21')"
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    sum = 0\n    for ch in s:\n        if ch.isalpha():\n            sum += ord(ch.upper())\n    return sum\n",
        "test": "assert     digitSum('') == 0, 'wrong result'"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    total_fruit = int(s[:s.index(' ')])\n    s = s[s.index(' '):]\n    if n > total_fruit:\n        return 0\n    elif n == total_fruit:\n        return int(s[s.index(' ')+1:])\n    elif n < total_fruit:\n        return int(s[s.index(' ')+1:])\n    return 0\n",
        "test": "assert     fruit_distribution(\"1 2\",2) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return []\n",
        "test": "assert     pluck([]) == [], \"Empty list\""
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    lst.sort()\n    i = 1\n    while i < len(lst) and lst[i] == lst[i-1]:\n        i += 1\n    if i < len(lst):\n        return lst[i]\n    return -1\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    return round(0.5 * a * b, 2) if (a + b > c) and (a + c > b) and (b + c > a) else -1\n",
        "test": "assert     (round(triangle_area(2, 3, 5), 2) == -1)"
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]\n",
        "test": "assert     will_it_fly([1, 2], 2) == False"
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    even_arr = []\n    odd_arr = []\n    palindromic_count = 0\n    for element in arr:\n        if element % 2 == 0:\n            even_arr.append(element)\n        else:\n            odd_arr.append(element)\n    if len(even_arr) > len(odd_arr):\n        for odd_num in odd_arr:\n            odd_count = len([num for num in even_arr if num == odd_num])\n            odd_count += 1\n            palindromic_count += odd_count\n    elif len(even_arr) < len(odd_arr):\n        for even_num in even_arr:\n            even_count = len([num for num in odd_arr if num == even_num])\n            even_count += 1\n            palindromic_count += even_count\n    return palindromic_count",
        "test": "assert     smallest_change([1,2,2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    new_lst = [len(i) for i in lst1] + [len(i) for i in lst2]\n    new_lst.sort()\n    new_lst = new_lst[::-1]\n    if new_lst[0] == new_lst[1]:\n        return lst1\n    return lst2\n",
        "test": "assert     total_match(['aba', 'a', 'aa'], ['aba', 'aba', 'a', 'aba', 'ab', 'abba', 'baba', 'a', 'a', 'b', 'ab', 'abba']    ) == ['aba', 'a', 'aa']"
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    a = int(a)\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                flag = False\n                for j in range(2, int(a/2)):\n                    if i % j == 0:\n                        flag = True\n                if flag == False:\n                    return False\n        return True\n    else:\n        return False\n",
        "test": "assert     is_multiply_prime(3) == True"
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    # base case: 1**n = 1\n    if x == 1: return True\n    # x % n == 0\n    if x % n == 0: return True\n    # x % n!= 0\n    return False\n",
        "test": "assert     is_simple_power(4, 2) == True"
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    return a**(1./3.) % 1 == 0\n",
        "test": "assert     iscube(10) == False, \"Not right\""
    },
    {
        "number": 78,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    total = 0\n    if len(num) == 1:\n        if int(num[0]) in [2, 3, 5, 7]:\n            return 1\n        else:\n            return 0\n    for i in num:\n        if int(i) in [2, 3, 5, 7]:\n            total += 1\n    return total\n",
        "test": "assert     hex_key(\"\") == 0"
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    \n    decimal = str(decimal)\n    binary = 'db'+decimal+'db'\n    return binary\n",
        "test": "assert     decimal_to_binary(1) == \"db1db\""
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    s_list = [c for c in s]\n    if len(s_list) < 3:\n        return False\n    if len(set(s_list)) < 3:\n        return False\n    if len(s_list) == 3:\n        return True\n    return False\n",
        "test": "assert     is_happy('') == False"
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    # list of letter grades\n    grades_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n    \n    # list of letter grades\n    final_grades = []\n    \n    # loop through the list of grades\n    for i in grades:\n        final_grades.append(grades_dict[i])\n    \n    # return the final list of grades\n    return final_grades\n",
        "test": "assert     numerical_letter_grade([4.0]) == ['A+']"
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    return len(string) in [2, 3, 5, 7]\n",
        "test": "assert     prime_length('abcdefghi') == False, 'Error on \\'abcdefghi\\''"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    count = 0\n    for i in range(0, n+1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "test": "assert     starts_one_ends(1) ==         1"
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    result = ''\n    while N > 0:\n        result = str(N%2) + result\n        N = N // 2\n    return result\n",
        "test": "assert     solve(8) == \"1000\""
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    return sum([i for i in lst if i%2 == 0 and i!= 0 and lst.index(i) % 2!= 0 ])\n",
        "test": "assert     add([1,2,3,4,5])==6"
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    words = s.split()\n    new_words = []\n    for word in words:\n        sorted_word = \"\".join(sorted(list(word)))\n        new_words.append(sorted_word)\n    return \" \".join(new_words)",
        "test": "assert     anti_shuffle(\"\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    lst_coordinates = []\n    \n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                lst_coordinates.append((row, col))\n    \n    lst_coordinates = sorted(lst_coordinates)\n    lst_coordinates = sorted(lst_coordinates, key=lambda x: x[0])\n    lst_coordinates = sorted(lst_coordinates, key=lambda x: x[1], reverse=True)\n    \n    return lst_coordinates\n",
        "test": "assert get_row([[1, 2], [3, 4]], 2) == [(2, 1), (2, 0)]"
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([2, 4, 6, 8, 10, 12, 14, 16]) == [2, 4, 6, 8, 10, 12, 14, 16]"
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    string = s.lower()\n    result = \"\"\n    for i in range(len(string)):\n        if string[i] >= 'a' and string[i] <= 'z':\n            char = string[i]\n            char_value = ord(char)\n            if char_value + 2 > 122:\n                result += chr(96 + (char_value + 2 - 122) - 1)\n            else:\n                result += chr(char_value + 2)\n        elif string[i] >= 'A' and string[i] <= 'Z':\n            char = string[i]\n            char_value = ord(char)\n            if char_value + 2 > 90:\n                result += chr(64 + (char_value + 2 - 90) - 1)\n            else:\n                result += chr(char_value + 2)\n        else:\n            result += string[i]\n    return result\n",
        "test": "assert     encrypt('abc') == 'cde'"
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    # time complexity: O(n)\n    # space complexity: O(1)\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return None\n    lst = list(sorted(set(lst)))\n    if len(lst) == 1:\n        return None\n    return lst[1]",
        "test": "assert     next_smallest([0, 1, 2, 3, 3, 3, 3]) == 1"
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    for c in S.split(\".\"):\n        if c.startswith(\"I\"):\n            return 1\n    return 0\n",
        "test": "assert     is_bored(\"I am feeling bored\") == 1"
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    #your code here\n    if x == y or x == z or y == z or x == z or x == y:\n        if x or y or z == int(x + y + z) or x or y or z == int(y + x + z) or y or x or z == int(z + x + y) or z or y or x == int(z + y + x) or y or x or z == int(x + z + y):\n            return True\n    else:\n        return False\n",
        "test": "assert     any_int(4, 1, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    \n    encoded = ''\n    \n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            letter = letter.lower()\n        encoded += letter.swapcase()\n    return encoded\n",
        "test": "assert     encode('1') == '1'"
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    def isprime(n):\n        if n<2:\n            return False\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    max = 0\n    for i in lst:\n        if isprime(i) and i>max:\n            max = i\n    return sum(list(map(int,str(max))))\n",
        "test": "assert     skjkasdkd([12, 37, 42, 18, 13, 56, 21]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    if dict:\n        return len(set(dict.keys())) == len(dict.keys())\n    return False\n",
        "test": "assert     check_dict_case({\"name\":\"turing\"}) == True, \"Only lower case\""
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    def is_prime(n):\n        return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n    def list_count(n):\n        if n == 0:\n            return []\n        else:\n            return list(range(2, n + 1)) if is_prime(n) else [x for x in list_count(n - 1) if is_prime(x)]\n    return list_count(n)\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < 10:\n        a = a*b\n        return a\n    return (multiply(a//10, b) + multiply(a%10, b))\n",
        "test": "assert     multiply(12, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return sum([1 if x.isupper() and (s.index(x) % 2 == 0) else 0 for x in s])",
        "test": "assert     count_upper(\"abcd\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    num = float(value)\n    int_num = int(num)\n    if abs(num - int_num) < abs(num - int_num + 0.5):\n        return int_num\n    return int_num + 1\n",
        "test": "assert     closest_integer(11) == 11"
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    nums = [n]\n    while nums[-1] > 1:\n        nums.append(nums[-1] + (1 if nums[-1] % 2 == 1 else -1))\n    return nums\n",
        "test": "assert     make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    \n    return s.split()\n",
        "test": "assert     type(words_string('Hi There, My Name is John Doe')) == type([])"
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    \n    return -1\n",
        "test": "assert     choose_num(3, 3) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    assert n > 0 and m > 0, \"Both numbers must be positive\"\n    if n < m:\n        return -1\n    return \"0b{}\".format(bin(round(sum((range(n, m + 1))) / (m - n + 1)))[2:])\n",
        "test": "assert     rounded_avg(1, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    # Your code here\n    res = []\n    for num in x:\n        if num % 2 == 1:\n            res.append(num)\n    return res\n",
        "test": "assert     unique_digits([])         == []"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    try:\n        return [HUNDRED[x] if 1<=x<=9 else TENS[x//10] + [ONES[x%10]] for x in sorted(arr, reverse=True)]\n    except:\n        return []\n        \nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([]))\nprint(by_length([1, -1, 55]))",
        "test": "assert     by_length([3, 7, 4, 7, 1, 8, 5, 3, 6]) == ['One', 'Three', 'Five', 'Seven', 'Six', 'Four', 'Eight', 'Two', 'Nine']"
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "    return [i if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert even_odd_palindrome(15) == (8, 13)"
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    if len(arr) == 0:\n        return 0\n    if arr[0] < 0:\n        return count_nums([abs(arr[0])]) + count_nums(arr[1:])\n    return count_nums(arr[1:])",
        "test": "assert     count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if not arr:\n        return True\n    pivot = arr[0]\n    low, high = 1, len(arr)-1\n    while low<high:\n        if arr[low]<=pivot and arr[high]>=pivot:\n            return True\n        if arr[low]>pivot and arr[high]<pivot:\n            return False\n        if arr[low]>pivot:\n            high -= 1\n        if arr[high]<pivot:\n            low += 1\n    return True\n",
        "test": "assert     move_one_ball([1,2,3]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    # \n    # Write your code here.\n    #\n    a = 0\n    b = 0\n    for i in range(0, len(lst1)):\n        for j in range(0, len(lst2)):\n            if lst1[i] == lst2[j]:\n                a += 1\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            b += 1\n    for j in range(0, len(lst2)):\n        if lst2[j] % 2!= 0:\n            b += 1\n    if a == len(lst1) and b == len(lst2):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([2,3,1], [2,5,6]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    assert isinstance(test, str) and len(test)!= 0, \"Input must be a string\"\n    if len(test) == 0:\n        return {}\n    test = test.replace(' ', '')\n    dictionary = {}\n    for letter in test:\n        if letter in dictionary:\n            dictionary[letter] += 1\n        else:\n            dictionary[letter] = 1\n    return dictionary",
        "test": "assert     histogram(\"a\") == {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    s = s.replace(c,'')\n    if s[::-1] == s:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert     reverse_delete('a', 'f') == ('a', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return [\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \" of the \" + str(i+1) + \"nput.\" for i,string in enumerate(lst) if sum([int(digit)%2 for digit in string])%2]\n",
        "test": "assert "
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    current_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert     minSubArraySum([1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    # n = len(grid)\n    # m = len(grid[0])\n    # Time: O(n*m)\n    # Space: O(n*m)\n    \n    n = len(grid)\n    m = len(grid[0])\n    \n    table = [[math.inf for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                table[i][j] = 0\n            elif i == 0:\n                table[i][j] = 1\n            elif j == 0:\n                table[i][j] = 1\n            else:\n                table[i][j] = min(table[i][j-1], table[i-1][j]) + 1\n    \n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if table[i][j]!= math.inf:\n                count += table[i][j]\n                grid[i][j] = 0\n                \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert max_fill([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    result = []\n    for n in arr:\n        b = bin(n)[2:]\n        result.append((b.count('1'), n))\n    result.sort()\n    return [x[1] for x in result]",
        "test": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 4, 8, 3, 5, 6, 7]"
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    return [word for word in s.split(' ') if len(word) == n and all([ch in ('qwertzuiopasdfghjklzxcvbnm') for ch in word.lower()])]\n",
        "test": "assert     select_words('treehous', 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if len(word) < 3:\n        return \"\"\n    \n    i = len(word)-1\n    while i > 0:\n        if word[i] in ('a', 'e', 'i', 'o', 'u') and word[i-1] not in ('a', 'e', 'i', 'o', 'u') and word[i+1] not in ('a', 'e', 'i', 'o', 'u'):\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "test": "assert     get_closest_vowel('')                  == ''"
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    if lst[0]==')' or lst[1]==')':\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     match_parens(['(', ')', ')', '(']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert     maximum([1, 2, 3, 4, 5], 1) == [5]"
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    count = 0\n    for i in lst:\n        if lst.index(i) % 2 == 0:\n            count += i\n    return count\n",
        "test": "assert     solution([1, 3, 2, 6, 4, 5]) == 7, \"Wrong answer\""
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    return sum(arr[:k])\n",
        "test": "assert     add_elements([12], 1) == 12"
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    # base case\n    if n == 1:\n        return [1]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    \n    # your code here\n    if not date:\n        return False\n    elif len(date)!= 10:\n        return False\n    elif not date[2] == '-' and not date[5] == '-':\n        return False\n    elif int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    elif int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n    elif int(date[6:8]) < 1 or int(date[6:8]) > 12:\n        return False\n    elif int(date[9:]) < 1 or int(date[9:]) > 31:\n        return False\n    elif int(date[3:5]) == 2 and int(date[0:2]) == 2 and int(date[6:8]) == 28:\n        return False\n    else:\n        return True",
        "test": "assert     valid_date(\"13-02-1999\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    print('1')\n    return [i for i in txt.split(' ') if i!= '']\n    return split_words('Hello world')\nsplit_words('Hello world')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
        "test": "assert     split_words(\"\") == [], 'incorrect result'"
    },
    {
        "number": 126,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "    lst = lst.copy()\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            lst.pop(i)\n            return False\n    return True\n",
        "test": "assert     is_sorted([1]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    a = max(interval1[0], interval2[0])\n    b = min(interval1[1], interval2[1])\n    if (a <= b) and (b % a == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection((1, 3), (5, 7)) == \"NO\", \"Case #2. Should be NO\""
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return None if not arr else sum(abs(x) for x in arr) * sum(int(x) for x in arr)\n",
        "test": "assert     prod_signs([]) is None"
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    N = len(grid)\n    dp = [[float('inf') for _ in range(N)] for _ in range(N)]\n    dp[0][0] = grid[0][0]\n    if N == 1 or k == 1:\n        return [dp[0][0]]\n",
        "test": "assert     minPath(    [[1,3,5,7], [2,4,8,10], [6,9,12,15], [11,13,14,16]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    return [3, 1 + n // 2, (n % 2) and (1 + 2 * n) or 2 * n]\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    if n < 10:\n        return n\n    else:\n        if (n % 10) % 2 == 0:\n            return 0\n        else:\n            return digits(int(str(n)[1:]))\n",
        "test": "assert     digits(3) == 3"
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    # create an empty stack and push to the stack each bracket. \n    # as soon as we have an open bracket, we will check if the last element of the stack is a closed bracket\n    # if so, we will pop the element and continue, if not, return False\n    # once we have a valid sequence of brackets, we should check if there is at least one nested subsequence\n    # if so, return True, else return False\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            else:\n                last_element = stack.pop()\n                if last_element!= '[':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert not is_nested('[][[[[]]])')"
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    return sum(map(lambda x: x**2, list(map(int, [round(num, 0) for num in lst]))))\n",
        "test": "assert     sum_squares([]) == 0, 'Test #2 sum_squares'"
    },
    {
        "number": 134,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if txt == \"\":\n        return False\n    txt_without_last_char = txt[:-1]\n    if len(txt_without_last_char) == 0:\n        return False\n    else:\n        return txt_without_last_char.split(\" \")[-1].isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter(\"taco\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return -1 if max(arr) < arr[-1] else arr.index(max(arr[:-1]))\n",
        "test": "assert     can_arrange([1, 2, 4, 3]) == 2"
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "    if lst == [] or len(lst) == 1:\n        return None, None\n    negatives = []\n    positives = []\n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        elif num > 0:\n            positives.append(num)\n    if len(negatives) == 0:\n        return None, min(positives)\n    elif len(positives) == 0:\n        return max(negatives), None\n    else:\n        return max(negatives), min(positives)\n",
        "test": "assert     largest_smallest_integers([])     == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    if type(a) is float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) is int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) is str:\n        if a[-1] in [',', '.']:\n            if a[0] in ['.']:\n                if float(a) > float(b):\n                    return a\n                else:\n                    return b\n            else:\n                if int(a) > int(b):\n                    return a\n                else:\n                    return b\n        else:\n            if float(a) > float(b):\n                return a\n            else:\n                return b\n    else:\n        return None\n",
        "test": "assert     compare_one(2, 1)                 == 2"
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return n in [4, 6, 8, 10, 12, 14, 16, 18]\n",
        "test": "assert     is_equal_to_sum_even(21) == False"
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "    factorial = 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n    return factorial\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    if text == \"\":\n        return text\n    elif text[0] == \" \":\n        return \"_\" + fix_spaces(text[1:])\n    elif text[-1] == \" \":\n        return fix_spaces(text[:-1]) + \"_\"\n    else:\n        return fix_spaces(text[:-1]) + text[-1]\n",
        "test": "assert     fix_spaces('The cat in the hat sat on the flat mat') == 'The_cat_in_the_hat_sat_on_the_flat_mat'"
    },
    {
        "number": 141,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    if file_name.count('.') > 2 or file_name.count('.') < 1:\n        return 'No'\n    for c in file_name:\n        if c.isdigit():\n            return 'No'\n    if file_name.split('.')[0] == '' or file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    file_name_split = file_name.split('.')\n    if file_name_split[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "test": "assert     file_name_check('av.txt') == 'Yes','should return \"Yes\"'"
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                result += lst[i]**2\n            elif i % 4 == 0 and i % 3!= 0:\n                result += lst[i]**3\n    return result\n",
        "test": "assert     sum_squares([0, 0, 0, 0]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    s = sentence.split()\n    result = []\n    for word in s:\n        if len(word) in primes:\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert     words_in_sentence('') == ''"
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x1 = int(x[0])\n    n1 = int(n[0])\n    return (x1 % n1) == 0\n",
        "test": "assert     simplify('1/2', '3/4') == False, \"Wrong result for 1/2 * 3/4\""
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "    nums_sorted = []\n    if len(nums) == 0:\n        return nums_sorted\n    nums_sorted = sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n    return nums_sorted",
        "test": "assert     order_by_points([1, 9, 2, 8, 3, 7, 4, 6, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    result = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n            result += 1\n    return result\n",
        "test": "assert     specialFilter([10,25,1,3,5,7]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    if n < 3:\n        return 0\n    \n    # 2 * num\n    # num * num - num + 1\n    # 3 * num - 2\n    \n    # 3 * num - 6\n    # 2 * num * num - num * num + 1\n    # 3 * num - 2 * num * num - num\n    # 3 * num - 3 * num * num + 1\n    # 2 * num * num - 3 * num\n    # num * num - num + 1\n    \n    return n * (n - 1) * (n - 2) // 6\n",
        "test": "assert     get_max_triples(1) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planet1 == planet2:\n        return (planet1,)\n    else:\n        return (planets[planets.index(planet1)+1:planets.index(planet2)],)\n",
        "test": "assert     bf(\"Earth\", \"Jupiter\") == \\"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    # print(list(set(lst)))\n    lst.sort(key=len)\n    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum(['aa', 'ab', 'ac']) == ['aa', 'ab', 'ac']"
    },
    {
        "number": 150,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return x if n%2==0 else y\n",
        "test": "assert     x_or_y(1, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    \n    # handle cases of empty list\n    if len(lst) == 0:\n        return 0\n    \n    # get the sum of all the odd ints\n    sum = 0\n    for i in lst:\n        if (i % 2!= 0) and (i < 0):\n            continue\n        else:\n            sum += i**2\n    \n    return sum\n",
        "test": "assert     double_the_difference([1,2,3,4,5,6,7]) "
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    return [0 if guess[i]==game[i] else abs(game[i]-guess[i]) for i in range(len(game))]",
        "test": "assert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    list_of_extensions = []\n    for extension in extensions:\n        list_of_extensions.append((extension, sum(extension.upper() == char for char in extension)))\n    return class_name + '.' + sorted(list_of_extensions, key=lambda x: x[1], reverse=True)[0][0]\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    return b in a+a\n    \ndef palindrome_check(a):\n    \"\"\"\n    >>> palindrome_check(\"abbbb\")\n    True\n    >>> palindrome_check(\"abcba\")\n    True\n    >>> palindrome_check(\"abcde\")\n    False\n    \"\"\"\n    return a == a[::-1]\n",
        "test": "assert not cycpattern_check(\"accdehfb\", \"defg\")"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "    assert isinstance(num, int), \"The input is not an integer\"\n    if num < 0:\n        num = abs(num)\n        return (1, 1)\n    odd = 0\n    even = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (odd, even)\n",
        "test": "assert     (even_odd_count(1) == (1,0)), \"Wrong result for even_odd_count(1)\""
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    roman_dict = {'1': 'i', '2': 'ii', '3': 'iii', '4': 'iv', '5': 'v', '6': 'vi', '7': 'vii', '8': 'viii', '9': 'ix', '10': 'x'}\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('Invalid input!')\n    result = ''\n    while number:\n        result = roman_dict[str(number % 10)] + result\n        number = number // 10\n    return result",
        "test": "assert     int_to_mini_roman(1) == \"i\""
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) or (b ** 2 + c ** 2 == a ** 2) or (c ** 2 + a ** 2 == b ** 2)\n",
        "test": "assert     right_angle_triangle(4, 3, 3) == False, \"Can't form a triangle\""
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    current_max = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > current_max:\n            current_max = len(set(word))\n            max_word = word\n    return max_word\n",
        "test": "assert find_max(['python', 'world', 'python']) == 'python'"
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "    result = [number, remaining]\n    if remaining < need:\n        result[0] = number + remaining\n        result[1] = 0\n    else:\n        result[0] = number + need\n        result[1] = remaining - need\n    return result",
        "test": "assert     eat(0, 0, 1) == [0, 1]"
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    result = operand[0]\n    for i in range(1,len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n",
        "test": "assert     do_algebra([\"+\", \"+\", \"+\"], [1, 2, 3]) == 6"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                c = c.lower()\n            else:\n                c = c.upper()\n        result += c\n    return result\n",
        "test": "assert     solve(\"abcd\") == \"ABCD\""
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "    result = []\n    for i in range(a+1, b):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "test": "assert     generate_integers(1, 20)!= [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
    }
]