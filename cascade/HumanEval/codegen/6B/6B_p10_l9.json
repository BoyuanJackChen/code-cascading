[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i, first_num in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            if first_num!= numbers[j] and abs(first_num - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for idx_a, a in enumerate(numbers):\n        for idx_b, b in enumerate(numbers[idx_a + 1:]):\n            if (a - b) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers.sort()\n    for i in range(len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for idx in range(len(numbers)):\n        for other_idx in range(idx + 1, len(numbers)):\n            if abs(numbers[idx] - numbers[other_idx]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # scan the numbers\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    separated_string = []\n    while len(paren_string)!= 0:\n        # handle case where input string is null\n        if len(paren_string) == 0:\n            break\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    paren_groups = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(')')\n        elif c == ')':\n            # If the stack is not empty, pop and add it to the output\n            if stack:\n                paren_groups.append(''.join(stack))\n                stack.pop()\n            # If the stack is empty, it means we are at the end of the parentheses string and we need to add\n            # the stack to the output\n            else:\n                paren_groups.append(''.join(stack))\n                stack = []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append('(')\n        elif paren_string[i] == ')':\n            stack.pop()\n        elif not stack and paren_string[i]!='':\n            groups.append(paren_string[i:])\n        i += 1\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    stack = []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            level += 1\n        elif c == ')':\n            stack.pop()\n            level -= 1\n        elif c =='':\n            continue\n        else:\n            if level == 0:\n                result.append(c)\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    paren_stack = []\n    brace_stack = []\n    parens = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    open_braces = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    string_list = paren_string.split()\n    for char in string_list:\n        if char in open_braces:\n            brace_stack.append(char)\n        elif char in parens:\n            if not brace_stack:\n                paren_stack.append(char)\n            elif brace_stack[-1] == parens[char]:\n                paren_stack.append(char)\n                brace_stack.pop()\n            elif brace_stack[-1] == open_braces[char]:\n                brace_stack.pop()\n            else:\n                return []\n    if brace_stack:\n        return []\n    else:\n        return [''.join(paren_stack)]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # handle case where empty string is passed in\n    if paren_string == '':\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n    open_parentheses = 0\n    output = []\n    for paren in paren_string:\n        if paren == '(':\n            open_parentheses += 1\n            stack.append(paren)\n        elif paren == ')':\n            if open_parentheses == 0:\n                raise RuntimeError(\"We don't have any left parentheses left to close!\")\n            open_parentheses -= 1\n            stack.pop()\n        elif paren =='':\n            continue\n        elif paren == '(':\n            # Create a new group\n            output.append(''.join(stack))\n            stack = []\n            stack.append(paren)\n        else:\n            stack.append(paren)\n    # The stack should be empty now\n    if open_parentheses > 0:\n        raise RuntimeError(\"Unbalanced parentheses\")\n    output.append(''.join(stack))\n    return output\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    paren_list = []\n    current_paren_group = ''\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            current_paren_group += paren_string[index]\n            index += 1\n        elif paren_string[index] == ')':\n            current_paren_group += paren_string[index]\n            paren_list.append(current_paren_group)\n            current_paren_group = ''\n            index += 1\n        else:\n            current_paren_group += paren_string[index]\n            index += 1\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    stack = []\n    groups = []\n    for c in paren_string:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                raise Exception(\"Missing open parenthesis.\")\n            if stack.pop()!= \"(\":\n                raise Exception(\"Parens don't match.\")\n        else:\n            if len(stack) == 0:\n                groups.append(c)\n            else:\n                stack.append(c)\n    \n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_stack = []\n    parens = []\n    start = 0\n    end = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n            parens.append(i)\n        if paren_string[i] == ')':\n            if len(paren_stack) > 0:\n                end = i\n                paren_stack.pop()\n                parens.pop()\n    if len(paren_stack) == 0:\n        return parens\n    start = paren_stack[-1]\n    parens.insert(start, paren_string[start:end + 1])\n    return parens\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return float(number - int(number))"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    number = float(number)\n    i = 0\n    while number > 1:\n        number /= 10\n        i += 1\n    return round(number, i)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert number >= 0, 'Number should be non-negative.'\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        _, digits = math.modf(number)\n        return digits\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = int(number)\n    return number - n\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number < 0:\n        raise ValueError('The given number must be positive.')\n    int_part = int(number)\n    return number - int_part\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    truncated_number = number - int(number)\n    if truncated_number == 0:\n        return 0\n    return truncated_number\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if number < 0:\n        raise ValueError('number must be positive')\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if any(operations[i] < 0 for i in range(1, len(operations))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = 0\n    for op in operations:\n        total += op\n        if total < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    current_balance = 0\n    for operation in operations:\n        if current_balance < 0:\n            return True\n        current_balance = current_balance + operation\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = [0] + operations\n    # print(new_list)\n    for x in range(1, len(new_list)):\n        if new_list[x] < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation == 1:\n            balance += 1\n        elif operation == -1:\n            balance -= 1\n        else:\n            balance = balance + operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    balance = 0\n    for op in operations:\n        balance = op + balance\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for operation in operations:\n        if balance < 0:\n            return True\n        balance += operation\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(numbers, list):\n        raise TypeError('Input must be a list of numbers')\n    if not all(isinstance(number, (int, float)) for number in numbers):\n        raise TypeError('Input list must only contain numbers')\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(numbers) < 1:\n        raise ValueError(\"can't calculate mean absolute deviation on a list of length 0\")\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if numbers:\n        return sum([abs(x-numbers.mean()) for x in numbers])/len(numbers)\n    else:\n        return 0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(numbers)\n    # The first value is the mean of the sample\n    # Use the first value to normalize the sample to the mean of 0\n    # All the other values are compared to the mean\n    # For MAD, the mean is subtracted from each value and then the absolute value is calculated\n    # Then the mean of the absolute values is taken\n    # The final result is the mean absolute deviation\n    mad = sum(abs(i - numbers[0]) for i in numbers) / (n - 1)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    m = sum(numbers) / len(numbers)\n    return sum([abs(x - m) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    mean = sum(numbers) / len(numbers)\n    total = 0\n    for num in numbers:\n        total += abs(num - mean)\n    return total / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Mean Absolute Deviation can be calculated using the below function\n    mean = _calculate_mean(numbers)\n    absolute_deviations = map(_absolute_deviation, numbers, repeat(mean))\n    return sum(absolute_deviations) / len(absolute_deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(numbers, list):\n        raise ValueError(\"numbers must be a list of numbers\")\n    elif len(numbers) == 0:\n        raise ValueError(\"numbers must contain at least one number\")\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return 0\n    if len(numbers) == 2:\n        return abs(numbers[0] - numbers[1])\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.extend([numbers[i]] * delimeter)\n        result.append(numbers[i + 1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [delimeter] + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return numbers[::2] + [delimeter] * (len(numbers) % 2)\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [delimeter] + [numbers[i] for i in range(1, len(numbers))]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(0, len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return numbers[:-1] + [numbers[-1] + delimeter] + [numbers[-1] + delimeter] * (len(numbers) - 1)\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [delimeter] + [elm for elm in numbers[:-1]] + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0], delimeter]\n    return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [delimeter] + [number + delimeter for number in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = list(numbers)\n    i = 0\n    while i < len(numbers) - 1:\n        numbers[i] = delimeter\n        i += 1\n        numbers[i] = delimeter\n        i += 1\n    return numbers\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    paren_stack = []\n    depth = 0\n    for paren in paren_string:\n        if paren == '(':\n            depth += 1\n            paren_stack.append(depth)\n        elif paren == ')':\n            depth -= 1\n            paren_stack.append(depth)\n    return paren_stack\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Initialize a stack of opening brackets\n    stack = []\n    # Initialize a variable to store the current max value of the count of nesting\n    max_count = 0\n    # Iterate through the string starting from the end\n    for index in range(len(paren_string) - 1, -1, -1):\n        # Get the character\n        char = paren_string[index]\n        # If the character is a closing paren\n        if char == ')':\n            # If the stack is empty, the closing paren is the deepest level of nesting\n            if not stack:\n                max_count = index + 1\n            # Otherwise, pop off the stack\n            else:\n                stack.pop()\n    # Initialize a variable to store the count of the deepest level of nesting\n    count = 0\n    # Iterate through the remaining characters in the string\n    for index in range(len(paren_string) - 1, -1, -1):\n        # Get the character\n        char = paren_string[index]\n        # If the character is a closing paren\n        if char == '(':\n            # If the stack is empty, the closing paren is the deepest level of nesting\n            if not stack:\n                count = index + 1\n            # Otherwise, increment the count of the current nesting level\n            else:\n                count += 1\n        # If the character is an opening paren\n        elif char == ')':\n            # If the stack is empty, the opening paren is the deepest level of nesting\n            if not stack:\n                count = index + 1\n            # Otherwise, decrement the count of the current nesting level\n            else:\n                count -= 1\n    # Return the count of the deepest level of nesting\n    return [count, max_count]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_stack = 0\n    stack = []\n    char_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            char_stack.append(paren_string[stack.pop()])\n        elif paren_string[i] =='':\n            max_stack = max(max_stack, len(stack))\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    paren_string = paren_string.replace('(','( ').replace(')',') ')\n    result = []\n    for s in paren_string.split(' '):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n        result.append(count)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    current_level = 0\n    max_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(current_level)\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif paren == ')':\n            stack.pop()\n            current_level = stack[-1] if len(stack) > 0 else 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    paren_stack = []\n    level = 0\n    max_level = 0\n    for ch in paren_string:\n        if ch == '(':\n            level += 1\n            paren_stack.append(ch)\n        elif ch == ')':\n            level -= 1\n            paren_stack.pop()\n        max_level = max(max_level, level)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    depth = 0\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(depth)\n            depth += 1\n        elif char == ')':\n            if stack:\n                depth -= 1\n            else:\n                return [-1]\n    return [depth]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(paren_string) == 0:\n        return []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for paren in paren_string:\n        if paren == \"(\":\n            stack.append(paren)\n        elif len(stack) == 0 or paren == \")\":\n            return [0]\n        else:\n            stack.pop()\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    parsed_nested_parens = []\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            parsed_nested_parens.append(idx)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    product = 1\n    sum_of_numbers = 0\n    for number in numbers:\n        product *= number\n        sum_of_numbers += number\n    return (sum_of_numbers, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return (0, 1)\n    return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(numbers), reduce(lambda a, b: a * b, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (sum(numbers), 1) if numbers else (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if numbers:\n        return (\n            sum(numbers),\n            reduce(lambda a, b: a * b, numbers),\n        )\n    return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return 0, 1\n    return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [max(numbers[:2])] + rolling_max(numbers[2:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return []\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[i - 1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[i - 1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = [0] * len(numbers)\n    for i in range(len(numbers)):\n        result[i] = max(numbers[i], result[i - 1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    r = [0 for i in numbers]\n    r[0] = numbers[0]\n    r[1] = max(numbers[0], numbers[1])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[-1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    rolling_max_list = []\n    for i in range(len(numbers)):\n        if len(rolling_max_list) == 0:\n            rolling_max_list.append(numbers[i])\n        else:\n            if numbers[i] > rolling_max_list[-1]:\n                rolling_max_list.append(numbers[i])\n            else:\n                rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    _max_list = []\n    for index, value in enumerate(numbers):\n        _max_list.append(max(value, _max_list[index - 1]))\n    return _max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rolling_max = [0] * len(numbers)\n    max_num = 0\n    for i in range(len(numbers)):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        rolling_max[i] = max_num\n    return rolling_max\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_until_now: List[int] = [None] * len(numbers)\n    for i in range(len(numbers)):\n        if i == 0:\n            max_until_now[i] = numbers[i]\n        else:\n            max_until_now[i] = max(max_until_now[i - 1], numbers[i])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        if max_so_far > numbers[i]:\n            result.append(max_so_far)\n        else:\n            max_so_far = numbers[i]\n            result.append(max_so_far)\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return string\n    for i in range(len(string), 1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1] + string[i:]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) == 0:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not string:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(string):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            break\n        i += 1\n    return string + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) < 2:\n        return string\n    elif is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[i:]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return string + reverse(string[1:-1])\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if string == '':\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = len(string) - 1\n    while i > 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n    return string[:i+1] + string[:i][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1] + string[i:]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # https://github.com/openai/gym/blob/master/gym/core.py#L36\n    # https://github.com/openai/gym/blob/master/gym/core.py#L55\n    if len(string) < 2:\n        return string\n    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(['0' if a[i]!= b[i] else '1' for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(a) == len(b), \"The lengths of both the strings are not equal!\"\n    a = a.lower()\n    b = b.lower()\n    a = a.replace('1', '0')\n    b = b.replace('1', '0')\n    a = a.replace('0', '1')\n    b = b.replace('0', '1')\n    return str(int(a) ^ int(b))\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a_bits = ''.join(format(ord(x), 'b') for x in a)\n    b_bits = ''.join(format(ord(x), 'b') for x in b)\n    return ''.join(str((int(a_bits[i]) ^ int(b_bits[i]))) for i in range(0, len(a_bits)))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return str(''.join(chr(int(a, 2) ^ int(b, 2)) for a, b in zip(a, b)))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(a) == len(b)\n    return ''.join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(xor(a[i], b[i]) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    xored = ''\n    for i in range(len(a)):\n        xored += str(int(a[i]) ^ int(b[i]))\n    return xored\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Both inputs must be of same length')\n    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if strings == []:\n        return None\n    else:\n        maxlen = len(strings[0])\n        for word in strings:\n            if len(word) > maxlen:\n                maxlen = len(word)\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for str_ in strings:\n        if len(str_) > len(longest_str):\n            longest_str = str_\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return sorted(strings, key=len)[-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    longest = None\n    for i in strings:\n        if not longest or len(i) > len(longest):\n            longest = i\n    return longest\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    while b!= 0:\n        (a, b) = (b, a % b)\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < b:\n        a, b = b, a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    while a:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # using list comprehension instead of\n    # set(list(prefix)) because\n    # set(list(prefix)) creates a new\n    # list instead of modifying the\n    # original one\n    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = [string]\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not string:\n        return []\n    result = [[string[:i + 1]] for i in range(len(string))]\n    for i in range(1, len(string)):\n        for prefix in result[i - 1]:\n            if string[i] == prefix[-1]:\n                result[i].append(prefix + string[i])\n    return result[-1]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    all_prefixes = []\n    for i in range(1, len(string) + 1):\n        all_prefixes.append(string[:i])\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string))]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return''.join(result)\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sequence = \"\"\n    for i in range(0, n + 1):\n        sequence += str(i) + \" \"\n    return sequence[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    seq = \"\"\n    for i in range(n+1):\n        seq += str(i) + \" \"\n    return seq[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \" \".join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0 1\"\n    else:\n        return \"0 \" + string_sequence(n - 1)\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(str(x) for x in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join(str(x) for x in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    seq = []\n    for i in range(n+1):\n        seq.append(str(i))\n    return \" \".join(seq)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in string:\n        if string.lower().count(i.lower()) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    counter = {}\n    for character in string:\n        character = character.lower()\n        if character not in counter:\n            counter[character] = 1\n        else:\n            counter[character] += 1\n    return len(counter)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    distinct_characters = []\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    chars = set()\n    for char in string:\n        chars.add(char.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not string:\n        return 0\n    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    current_note = ''\n    for symbol in music_string:\n        if symbol == 'o':\n            result.append(1)\n        elif symbol == 'o|':\n            result.append(1/2)\n        elif symbol == '.|':\n            result.append(1/4)\n        elif symbol == 'o.':\n            result.append(1/8)\n        elif symbol == 'o|.':\n            result.append(1/16)\n        elif symbol == '.|.':\n            result.append(1/32)\n        else:\n            raise ValueError('Unknown symbol:', symbol)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    music = [0]\n    \n    for char in music_string:\n        if char == 'o':\n            music.append(4)\n        elif char == 'o|':\n            music.append(2)\n        elif char == '.|':\n            music.append(1)\n    \n    return music\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #replace this with your code\n    return [int(len(line) / 4) for line in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    parsed = []\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for note in music_string.split(' '):\n        if note == 'o':\n            result.append(1)\n        elif note == 'o|':\n            result.append(1/2)\n        elif note == '.|':\n            result.append(1/4)\n        elif note == 'o':\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    music = music_string.split(' o ')\n    return [len(x) for x in music]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [len(note) for note in music_string.split(' ')]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    beat_len = 4\n    beats = []\n    split_music = music_string.split(' ')\n    for note in split_music:\n        if note in ['o', 'o|', '.', '|', 'o o']:\n            beats.append(beat_len)\n        elif note == 'o|':\n            beat_len /= 2\n        elif note == 'o o':\n            beat_len *= 4\n    return beats\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ret = []\n    for i in music_string.split(' '):\n        if i == 'o':\n            ret.append(4)\n        elif i == 'o|':\n            ret.append(2)\n        elif i == '.':\n            ret.append(1)\n    return ret\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not string:\n        return 0\n    elif not substring:\n        return 0\n    elif string[0] == substring[0]:\n        return 1 + how_many_times(string[1:], substring[1:])\n    else:\n        return how_many_times(string[1:], substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string) - len(string.rstrip(substring)) + len(string.lstrip(substring))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    occurrences = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            occurrences += 1\n    return occurrences\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string.split(substring, string.count(substring)))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i, val in enumerate(numbers):\n        if val not in '0123456789':\n            return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    d = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5','six': '6','seven': '7', 'eight': '8', 'nine': '9'}\n    return''.join(sorted([d[n] for n in numbers.split(' ')]))\n    \n    # convert to integer list\n    l = [int(n) for n in numbers.split(' ')]\n    l.sort()\n    return''.join([str(n) for n in l])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # make a list of the choices\n    choices = list(range(10))\n    # remove non-numerals\n    choices = [i for i in choices if i >= 0 and i <= 9]\n    # split the string on spaces\n    words = numbers.split()\n    # sort the string of numbers\n    words.sort(key = lambda x: int(x))\n    # join the sorted numbers back into a string\n    return''.join(words)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers = numbers.split(' ')\n    if numbers == []:\n        return ''\n    if numbers == ['one']:\n        return 'one'\n    # Convert to integer\n    numbers = [int(i) for i in numbers]\n    # Sort them in ascending order\n    numbers.sort()\n    # convert back to string and return\n    numbers = [str(i) for i in numbers]\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numeral_map = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9',\n    }\n    return''.join(sorted(numbers.split(), key=lambda x: numeral_map[x]))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # 0 is the first element\n    # 9 is the last element\n    zero_one = 'zero one two three four five six seven eight nine'.split()\n    zero_two = 'zero two three four five six seven eight nine'.split()\n    zero_three = 'zero three four five six seven eight nine'.split()\n    zero_four = 'zero four five six seven eight nine'.split()\n    zero_five = 'zero five six seven eight nine'.split()\n    zero_six = 'zero six seven eight nine'.split()\n    zero_seven = 'zero seven eight nine'.split()\n    zero_eight = 'zero eight nine'.split()\n    zero_nine = 'zero nine'.split()\n    \n    def zero_sort(numbers: str) -> str:\n        \"\"\" Sort zero-based numbers \"\"\"\n        \n        zero_one_sort = 'one zero two three four five six seven eight nine'.split()\n        zero_two_sort = 'one two three four five six seven eight nine'.split()\n        zero_three_sort = 'one three four five six seven eight nine'.split()\n        zero_four_sort = 'one four five six seven eight nine'.split()\n        zero_five_sort = 'one five six seven eight nine'.split()\n        zero_six_sort = 'one six seven eight nine'.split()\n        zero_seven_sort = 'one seven eight nine'.split()\n        zero_eight_sort = 'one eight nine'.split()\n        zero_nine_sort = 'one nine'.split()\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '0':\n                numbers[index] = zero_one_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '1':\n                numbers[index] = zero_two_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '2':\n                numbers[index] = zero_three_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '3':\n                numbers[index] = zero_four_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '4':\n                numbers[index] = zero_five_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '5':\n                numbers[index] = zero_six_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '6':\n                numbers[index] = zero_seven_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '7':\n                numbers[index] = zero_eight_sort[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '8':\n                numbers[index] = zero_nine_sort[index]\n        \n        return''.join(numbers)\n    \n    def one_sort(numbers: str) -> str:\n        \"\"\" Sort one-based numbers \"\"\"\n        \n        one_one = 'one one two three four five six seven eight nine'.split()\n        one_two = 'one two three four five six seven eight nine'.split()\n        one_three = 'one three four five six seven eight nine'.split()\n        one_four = 'one four five six seven eight nine'.split()\n        one_five = 'one five six seven eight nine'.split()\n        one_six = 'one six seven eight nine'.split()\n        one_seven = 'one seven eight nine'.split()\n        one_eight = 'one eight nine'.split()\n        one_nine = 'one nine'.split()\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '0':\n                numbers[index] = one_one[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '1':\n                numbers[index] = one_two[index]\n        \n        for index in range(len(numbers)):\n            if numbers[index] == '2':\n                numbers"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = numbers.split()\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    return \" \".join([str(x) for x in numbers])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    sorted_numbers = sorted(numbers)\n    smallest_diff = sorted_numbers[1] - sorted_numbers[0]\n    smallest_diff_index = 0\n    smallest_second_diff = None\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if abs(diff) < abs(smallest_diff):\n            smallest_second_diff = smallest_diff\n            smallest_diff = diff\n            smallest_diff_index = i\n        elif abs(diff) < abs(smallest_second_diff) or smallest_second_diff is None:\n            smallest_second_diff = diff\n    return sorted_numbers[smallest_diff_index], sorted_numbers[smallest_diff_index + 1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    first, second = sorted(numbers[:2])\n    third = first + (second - first) * (1 - abs(first - second))\n    return first, second\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # The code block below performs the sorting algorithm to find the closest two numbers.\n    # It uses a for loop that goes through the list and compares the current value (numbers[index]) with the\n    # next value (numbers[index + 1]). If the difference is less than the smallest difference, the smallest\n    # difference is updated to the value of the difference between the two values.\n    # The best implementation of the algorithm is discussed in this post https://www.quora.com/What-is-the-\n    #  best-implementation-of-the-sorting-algorithm\n    difference = float('inf')\n    smallest_difference = difference\n    smallest_numbers = []\n    for index in range(len(numbers) - 1):\n        current_difference = abs(numbers[index] - numbers[index + 1])\n        if current_difference < smallest_difference:\n            smallest_difference = current_difference\n            smallest_numbers = [numbers[index], numbers[index + 1]]\n    return tuple(smallest_numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers.sort()\n    difference = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers)):\n        current_difference = abs(numbers[i] - numbers[i-1])\n        if current_difference < difference:\n            difference = current_difference\n            smallest_pair = (numbers[i-1], numbers[i])\n    return smallest_pair\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 numbers\")\n    closest_numbers = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        for j in range(i + 2, len(numbers)):\n            if numbers[j] - numbers[i] < numbers[j] - closest_numbers[1] - closest_numbers[0]:\n                closest_numbers = (numbers[i], numbers[j])\n    return closest_numbers\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        raise ValueError('list cannot be empty')\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(numbers) >= 2, 'The list should have at least two elements'\n    smallest = min(numbers)\n    second_smallest = min(numbers, key=lambda n: abs(n - smallest))\n    return smallest, second_smallest\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Start with the smallest and largest numbers\n    smallest_num = numbers[0]\n    largest_num = numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # we are going to store the diffs of the elements in the list in a dictionary\n    diffs = {}\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        diffs[i] = diff\n        diffs[i + 1] = diff\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_num = max(numbers)\n    min_num = min(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    rescaled_numbers = [0.0] * len(numbers)\n    sorted_numbers = sorted(numbers)\n    min_value = sorted_numbers[0]\n    max_value = sorted_numbers[-1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    rescaled = [(x-smallest)/(largest-smallest) for x in numbers]\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers\")\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Need at least two numbers')\n    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [ n / max(numbers) for n in numbers ]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_n = min(numbers)\n    max_n = max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert len(numbers) > 1\n    numbers = sorted(numbers)\n    rescaled = []\n    rescaled.append(0.0)\n    for i in range(1, len(numbers)):\n        rescaled.append((numbers[i] - numbers[i - 1]) / (numbers[-1] - numbers[0]))\n    rescaled.append(1.0)\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    min_n = min(numbers)\n    max_n = max(numbers)\n    return [float(x - min_n) / (max_n - min_n) for x in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [v for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [v for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda value: type(value) == int, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i = i - 1\n    return 1\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n if n % 2 == 0 else int(n / 2)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    divisors = divisors(n)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n - 1 if n % 2 else n // 2\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return next(\n            num for num in range(2, int(n ** 0.5) + 1) if n % num == 0\n        )\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # remove the even divisors\n    divisors = [i for i in range(2, n//2 + 1) if n % i == 0]\n    return max(divisors)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2:\n        return []\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    x = 3\n    while x ** 2 <= n:\n        if n % x == 0:\n            return [x] + factorize(n // x)\n        x += 2\n    return [n]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    factors = []\n    p = 2\n    while n > 1:\n        i = 0\n        while n % p == 0:\n            i += 1\n            n /= p\n        if i!= 0:\n            factors.append(p)\n            if i!= 1:\n                factors.append(i)\n        p += 1\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def get_factors(n):\n        factors = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if n // i!= i:\n                    factors.append(n // i)\n        return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    factors = []\n    x = n\n    for y in range(2, x + 1):\n        if x % y == 0:\n            factors.append(y)\n            x //= y\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        raise ValueError(\"Factors can be found only for positive integers\")\n    elif n == 0:\n        return []\n    \n    result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            result.append(i)\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    factors = [1]\n    for i in range(2, n + 1):\n        j = 0\n        while i * factors[j] <= n:\n            i *= factors[j]\n            j += 1\n        if i > n:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(0, len(numbers)):\n        count = 1\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                count += 1\n        if count == 1:\n            numbers[i]\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    index = 0\n    while index < len(numbers):\n        if numbers[index] in numbers[index + 1:]:\n            numbers.pop(index)\n        else:\n            index += 1\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if len(numbers) < 2:\n        return numbers\n    \n    new_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in new_list:\n            new_list.append(numbers[i])\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # We can take advantage of the fact that the array is sorted, so we can\n    # skip ahead and ensure that we are not replacing an index with the same\n    # value.\n    \n    # Keep a set of seen values, and a sliding window of size 1\n    seen = set()\n    seen_add = seen.add\n    window = []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    seen = set()\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in numbers if numbers.count(i) == 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in numbers if numbers.count(x) == 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers_set = set()\n    new_numbers = []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = list(string)\n    for i in range(len(string)):\n        if string[i].isalpha():\n            if string[i].isupper():\n                string[i] = string[i].lower()\n            else:\n                string[i] = string[i].upper()\n    return ''.join(string)\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    upper_letters = {letter: letter.upper() for letter in string if letter.isupper()}\n    lower_letters = {letter: letter.lower() for letter in string if letter.islower()}\n    return ''.join(upper_letters.get(letter, letter) for letter in string)\n    # return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    upper, lower = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'), list('abcdefghijklmnopqrstuvwxyz')\n    \n    return ''.join([\n        lower[upper.index(x)] if x in upper else x\n        for x in string\n    ])\n    \n    \ndef rotate(string: str, n: int) -> str:\n    \"\"\" For a given string, rotate the characters in the string n times.\n    >>> rotate('Hello', 2)\n    'lloHe'\n    >>> rotate('This is a test', 4)\n    'esTTh is a tset'\n    \"\"\"\n    \n    return string[n:] + string[:n]\n    \n    \ndef multiply(m: int, n: int) -> int:\n    \"\"\" For two positive integers, m and n, return the product of the integers\n    >>> multiply(3, 4)\n    12\n    >>> multiply(0, 4)\n    0\n    >>> multiply(2, 2)\n    4\n    >>> multiply(2, 0)\n    0\n    >>> multiply(0, 0)\n    0\n    \"\"\"\n    \n    if m == 0: return 0\n    if n == 0: return 0\n    \n    return m * n\n    \n    \ndef is_palindrome(string: str) -> bool:\n    \"\"\" Returns True if the string is a palindrome.\n    >>> is_palindrome('tacocat')\n    True\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('robert')\n    False\n    >>> is_palindrome('hannah')\n    True\n    >>> is_palindrome('Hannah')\n    True\n    >>> is_palindrome('robert')\n    False\n    >>> is_palindrome('hannah')\n    False\n    \"\"\"\n    \n    for i in range(0, len(string) // 2):\n        if string[i]!= string[-1 - i]:\n            return False\n    \n    return True\n    \n    \ndef is_anagram(string1: str, string2: str) -> bool:\n    \"\"\" Returns True if the strings are anagrams.\n    >>> is_anagram('eye', 'ye')\n    True\n    >>> is_anagram('eye', 'yes')\n    False\n    >>> is_anagram('eye', 'y')\n    False\n    >>> is_anagram('ae', 'ea')\n    True\n    >>> is_anagram('clint eastwood', 'old west action')\n    True\n    >>> is_anagram('aa', 'bb')\n    False\n    \"\"\"\n    \n    return sorted(string1) == sorted(string2)\n    \n    \ndef is_valid_zip(string: str) -> bool:\n    \"\"\" Returns True if the string contains a valid ZIP code.\n    >>> is_valid_zip('65043')\n    True\n    >>> is_valid_zip('12345')\n    False\n    >>> is_valid_zip('12345-6789')\n    True\n    >>> is_valid_zip('12345x')\n    False\n    >>> is_valid_zip('12345-567')\n    False\n    >>> is_valid_zip('12345-567x')\n    False\n    >>> is_valid_zip('12345-567-8')\n    True\n    \"\"\"\n    \n    pattern = re.compile(r'^\\d{5}(-?\\d{4})?$')\n    \n    return pattern.match(string)\n    \n    \ndef is_valid_date(string: str) -> bool:\n    \"\"\" Returns True if the string is a valid date.\n    >>> is_valid_date('08/02/2009')\n    True\n    >>> is_valid_date('34-02-2008')\n    False\n    >>> is_valid_date('01-01-2000')\n    False\n    >>> is_valid_date('32-02-2009')\n    False\n    >>> is_valid_date('12-10-2030')\n    False\n    >>> is_valid_date('01-01-2001')\n    True\n    \"\"\"\n    \n    pattern = re.compile(r'^\\d{2}/\\d{2}/\\d{4}$')\n    \n    return pattern.match(string)"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([x.swapcase() if x.islower() else x for x in string])\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n    \ndef main():\n    l = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    print(get_positive(l))\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            return is_prime(n - 1)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    for i in range(3, int(n**0.5 + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for j in range(3, int(n**0.5) + 1, 2):\n        if n % j == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n > 2:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert all(x % 2 == 0 for x in xs) and max(xs) > 0, \"list xs must be even and have a non zero element\"\n    # Due to the assumption, the number of non zero element must be even\n    N = len(xs) // 2\n    assert len(xs) % 2 == 0, \"list xs must be even\"\n    f = lambda x: poly(xs, x)\n    a = list(range(N))\n    b = list(reversed(range(N)))\n    for i in range(N):\n        c = a[i]\n        a[i] = b[i]\n        b[i] = c\n    # Here the idea is to evaluate a and b in a way that both can be treated as polynomial.\n    # When a or b is negative, the evaluation is taken care of by the fact that the sum is monotonically increasing\n    # and all negative numbers are replaced with their corresponding positive values.\n    # After this step, we can do algebraic rearrangement to get a^2 - b^2 = -4 * a * b\n    # Now to get the real solutions, rearrange a and b to\n    # a = (a, -a) and b = (b, -b)\n    # and a and b become monotonic decreasing, as a*b < 0\n    # We can get the solution by finding the roots of the above equation\n    a = tuple(reversed(a))\n    b = tuple(reversed(b))\n    pos_a = [a for a in a if a >= 0]\n    pos_b = [b for b in b if b >= 0]\n    if len(pos_a)!= len(pos_b):\n        pos_a, pos_b = pos_b, pos_a\n    pos_a = tuple(pos_a)\n    pos_b = tuple(pos_b)\n    # Now, the polynomial itself is monotonic decreasing, so we can now use\n    # simple bisection algorithm to find the zero point\n    lo = 0\n    hi = len(pos_a)\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if f(pos_a[mid]) * f(pos_b[mid]) < 0:\n            lo = mid\n        else:\n            hi = mid\n    return pos_a[lo]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        coeff = [0, 0]\n        for i in range(0, len(xs), 2):\n            if coeff[1]!= 0:\n                coeff[0] = xs[i]\n                coeff[1] = xs[i + 1]\n                break\n        return -coeff[1] / coeff[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError('find_zero only works for even polynomial')\n    # reverse coeffs to find x = -b/a\n    # (a * x^n) + (b * x^(n - 1)) +... + (b * x^1) = x^n\n    a = [xs[-1]]\n    b = []\n    for i in range(len(xs) - 1, 0, -2):\n        b.insert(0, xs[i])\n        a.insert(0, xs[i - 1])\n    a = poly(a, 1)\n    b = poly(b, -1)\n    a /= b\n    return a\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # 1.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[0::2])\n    # 2.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[1::2])\n    # 3.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 4.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[1::2])\n    # 5.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[2::2])\n    # 6.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 7.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 8.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 9.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[1::2])\n    # 10.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[2::2])\n    # 11.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[2::2])\n    # 12.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 13.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[1::2])\n    # 14.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[2::2])\n    # 15.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[1::2])\n    # 16.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[2::2])\n    # 17.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 18.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 19.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[::2])\n    # 20.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[1::2])\n    # 21.\n    # x0 = -1 * sum(coeff * (i + 1) for i, coeff in enumerate(xs[1::2])) / sum(xs[2::2])\n    # 2"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # to ensure that the polynomial is always monotonic\n    assert len(xs) % 2 == 0\n    assert all(coeff >= 0 for coeff in xs)\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert xs\n    assert len(xs) % 2 == 0\n    for i in range(len(xs) - 1, 0, -2):\n        if xs[i-1]!= 0:\n            continue\n        x = (-xs[i-2] + math.sqrt(xs[i-2] ** 2 - 4 * xs[i] * xs[i-1])) / (2 * xs[i])\n        return x\n    raise Exception('No solution')\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) % 2 == 1:\n        return 0\n    if xs[0]!= 0:\n        return - (sum(xs) + sum(xs[1::2])) / xs[0]\n    else:\n        return sum(xs[1::2]) / sum(xs[2::2])\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0 and xs[0]!= 0, \"xs must have even number of coefficients and first non zero coefficient must not be zero.\"\n    print(\"finding zero for\", xs)\n    for x in range(len(xs)):\n        if xs[x] * xs[x - 1] < 0:\n            return xs[x - 1] / xs[x]\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"xs is not even length\")\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # only works for even number of elements and positive zero\n    n = len(xs)\n    if n % 2!= 0 or xs[0] == 0:\n        return None\n    # if the right side of the polynomial is 0, it is a linear equation\n    if xs[-1] == 0:\n        return -xs[-2] / xs[-1]\n    # y = a1/a0 * x + b1/b0\n    a0, b0 = xs[-2], xs[-1]\n    a = [n - i - 1 for i in range(n) if xs[n - i - 1]!= 0]\n    b = [xs[n - i - 1] / xs[n - i - 1] for i in range(n) if xs[n - i - 1]!= 0]\n    return -a0 / a[0] - b0 / b[0] * xs[a[0]]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in l:\n        if i%3 == 0:\n            count += 1\n    l2 = []\n    for i in range(count):\n        l2.append(l[i])\n    count2 = 0\n    for i in range(count, len(l)):\n        l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l[i]\n        else:\n            l[i] = l[i - 1]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l.sort()\n    indices_div_by_three = [i for i, item in enumerate(l) if item % 3 == 0]\n    indices_not_div_by_three = [i for i, item in enumerate(l) if item % 3!= 0]\n    l[:] = [l[i] for i in indices_not_div_by_three]\n    l[:] = [l[i] for i in indices_div_by_three]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = l[:]\n    l[::3], l[1::3], l[2::3] = l[2::3], l[1::3], l[::3]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for i, x in sorted(enumerate(l), key=lambda x: x[1]%3) if i%3!=0]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in l:\n        if i % 3 == 0:\n            l2.append(i)\n        else:\n            l2.append(l[l.index(i)])\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(l"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    div3_ = [l[i] for i in range(len(l)) if i % 3 == 0]\n    div1_ = [l[i] for i in range(len(l)) if i % 3 == 1]\n    div2_ = [l[i] for i in range(len(l)) if i % 3 == 2]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # l_copy = list(l)\n    # return sorted(l_copy)\n    l.sort()\n    # l_copy.sort()\n    # for i in range(len(l_copy)):\n    #     if i % 3 == 0:\n    #         l_copy[i] = l[i]\n    # return l_copy\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l2 = []\n    for i in l:\n        if i not in l2:\n            l2.append(i)\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    new_list = []\n    for x in l:\n        if x not in new_list:\n            new_list.append(x)\n    return sorted(new_list)\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seen = set()\n    result = []\n    for item in l:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = set()\n    return [x for x in l if x not in s and not s.add(x)]\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert isinstance(l, list), 'l must be a list'\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(l) > 0, 'Cannot find maximum element for empty list'\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if l == []:\n        return None\n    maximum = l[0]\n    for num in l:\n        if num > maximum:\n            maximum = num\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert l is not None, 'List not provided!'\n    assert len(l) > 0, 'List must contain at least one element!'\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return (n - 1) // 3 - (n - 1) // 11\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 0:\n        return 0\n    elif n < 10:\n        return 0\n    else:\n        counter = 0\n        for i in range(n):\n            if (i + 1) % 11 == 0 or (i + 1) % 13 == 0:\n                counter += 1\n        return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n_string = str(n)\n    n_length = len(n_string)\n    sevens = n_string.count('7')\n    threes = n_string.count('3')\n    \n    return sevens * (threes - n_length)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(divisible_by(n, 7) for n in range(n))\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([1 for i in range(1, n) if (i % 11 == 0 or i % 13 == 0)])\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    times = 0\n    for x in range(n):\n        if x % 11 == 0 or x % 13 == 0:\n            times += 1\n    return times"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    counter = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # count = 0\n    # for i in range(n):\n    #     if (i+1)%11 == 0 or (i+1)%13 == 0:\n    #         count += 1\n    # return count\n    return sum(str(i+1).count('7') for i in range(n) if (i+1)%11 == 0 or (i+1)%13 == 0)\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    return l[::2]+sorted(l[1::2])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(sorted(l[i])[1])\n    return new_l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not l:\n        return l\n    i = 0\n    while i < len(l) - 1:\n        if l[i] % 2 == 0 and l[i + 1] % 2 == 0:\n            i += 1\n        elif l[i] % 2 == 0:\n            l[i], l[i + 1] = l[i + 1], l[i]\n        else:\n            i += 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l = [1, 2, 3]\n    if len(l) == 1:\n        return l\n    else:\n        odd_index = 0\n        for i in range(len(l)):\n            if i % 2 == 0:\n                continue\n            else:\n                l[i], l[odd_index] = l[odd_index], l[i]\n                odd_index += 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(l) % 2 == 0\n    even_indicies = l[1::2]\n    even_indicies.sort()\n    l[1::2] = even_indicies\n    return l\n    \n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l1 = l[0::2]\n    l2 = sorted(l[1::2])\n    l3 = []\n    for i in range(len(l1)):\n        l3.append(l1[i])\n        l3.append(l2[i])\n    return l3\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[i])\n        else:\n            result.append(sorted(l[i])[-1])\n    return result\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l_new = [None] * len(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new[i] = l[i]\n        else:\n            l_new[i] = l[i-1]\n    return l_new\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # YOUR CODE HERE\n    return [l[(i+1) % 2] for i in range(len(l))]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([g[-1] + g[:-1] for g in groups])"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # for each group of 3, find first 3 characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # for each group, find the 3 characters at the end.\n    groups = [group[-3:] + group[:-3] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # get list of length-3 groups by splitting s.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # get length of each group.\n    lengths = [len(group) for group in groups]\n    # convert groups to chars.\n    return \"\".join(chr(int(group[2]) - 1) + group[:2] for group in groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # take groups and cycle them.\n    groups = [s[3 * i:3 * i + 3] for i in range((len(s) + 2) // 3)]\n    # combine the elements of each group.\n    return \"\".join([group[1:] + group[0] for group in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Until last element of group is reached.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # recombine groups.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # add a character to the end of the string to help decode.\n    s += \"*\"\n    # split string to groups of three.\n    groups = [(s[i:i + 3]) for i in range(0, len(s), 3)]\n    # reverse groups in groups list, with the first three characters of each group in reversed order.\n    groups = [group[::-1] for group in groups[::-1]]\n    # join the groups to form the decoded string.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    f = [0, 1]\n    i = 2\n    while i < n:\n        f.append(f[i-1] + f[i-2])\n        i += 1\n    return f[n-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a, b = 0, 1\n    while a <= n:\n        if is_prime(a):\n            yield a\n        a, b = b, a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    else:\n        return fib(n)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        n -= 1\n        a, b = 0, 1\n        while n > 0:\n            a, b = b, a + b\n            n -= 1\n        if is_prime(b):\n            return b\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    fib = [1, 2]\n    for i in range(2, n):\n        fib.append(fib[-2] + fib[-1])\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    fib = [1, 2]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return check_prime(fib[-1])\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be > 0\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    return search_fib(n)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    p1, p2, i = 2, 3, 1\n    while p1 < n:\n        p1 = p2\n        p2 = p1 + p2\n        i += 1\n    return p2\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    x = 0\n    y = 1\n    count = 2\n    while count < n:\n        x, y = y, x+y\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                break\n        else:\n            count += 1\n    if count == n:\n        return x\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    p = 1\n    f = 1\n    i = 1\n    fibs = [1, 2, 3]\n    while i < n:\n        p = f + p\n        f = f + f\n        fibs.append(f)\n        i = i + 1\n    if is_prime(p):\n        return p\n    return fibs[-1]\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l) < 3:\n        return False\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    if len(d)!= 3:\n        return False\n    if d.values() == [1, 1, 1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_map = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    sum_map.add(l[i])\n                    sum_map.add(l[j])\n                    sum_map.add(l[k])\n    if len(sum_map) == 3:\n        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert l, 'list must not be empty'\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(set(l))!= len(l) and sum(set(l)) == 0"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(l)) == 3 and sum(l) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return True if len(set(l)) == 3 and -sum(l) in l else False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] + l[j] == 0:\n            return True\n        elif l[i] + l[j] > 0:\n            j -= 1\n        else:\n            i += 1\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(set(l)) < 3 and sum(l) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for x in l:\n        for y in l:\n            for z in l:\n                if x + y + z == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num_collisions = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 0"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    global N\n    N = n\n    return car_race(n)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # initialize collision count to 0\n    collisions = 0\n    # iterate through number of cars\n    for i in range(1, n + 1):\n        # iterate through the number of iterations\n        for j in range(1, i + 1):\n            # if i is less than j\n            if i < j:\n                # increment collision count\n                collisions += 1\n    # return collision count\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    cars = [(1, 1), (0, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (0, -2), (1, -2)]\n    collisions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i == 0 and j == 1:\n                continue\n            if i == 1 and j == 0:\n                continue\n            if i == -1 and j == -2:\n                continue\n            if i == -2 and j == -1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == -1 and j == 2:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == 2 and j == -1:\n                continue\n            if i == 2 and j == 0:\n                continue\n            if i == 1 and j == -2:\n                continue\n            if i == 0 and j == -2:\n                continue\n            if i == -1 and j == 1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == -2 and j == 1:\n                continue\n            if i == 1 and j == 2:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == 2 and j == 1:\n                continue\n            if i == 1 and j == 0:\n                continue\n            if i == -2 and j == -1:\n                continue\n            if i == -1 and j == 0:\n                continue\n            if i == 0 and j == 1:\n                continue\n            if i == 1 and j == -2:\n                continue\n            if i == -1 and j == 2:\n                continue\n            if i == -2 and j == 1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == 2 and j == -1:\n                continue\n            if i == 0 and j == -1:\n                continue\n            if i == 2 and j == -2:\n                continue\n            if i == 1 and j == -2:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == -1 and j == 1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == -2 and j == 1:\n                continue\n            if i == 1 and j == 2:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == 2 and j == 1:\n                continue\n            if i == 1 and j == 0:\n                continue\n            if i == -1 and j == -2:\n                continue\n            if i == -2 and j == -1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == -1 and j == 2:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == 2 and j == -1:\n                continue\n            if i == 2 and j == 0:\n                continue\n            if i == 1 and j == -2:\n                continue\n            if i == 0 and j == -2:\n                continue\n            if i == -1 and j == 1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == -2 and j == 1:\n                continue\n            if i == 1 and j == 2:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == 2 and j == 1:\n                continue\n            if i == 1 and j == 0:\n                continue\n            if i == -2 and j == -1:\n                continue\n            if i == -1 and j == 0:\n                continue\n            if i == 0 and j == 1:\n                continue\n            if i == 1 and j == -2:\n                continue\n            if i == -1 and j == 2:\n                continue\n            if i == -2 and j == 1:\n                continue\n            if i == -2 and j == 0:\n                continue\n            if i == 2 and j == -1:\n                continue\n            if i == 0 and j == -1:\n                continue\n            if i == 2 and j == -2:\n                continue\n            if i == 1 and j == -2:\n                continue\n            if "
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 1\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    collisions = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # A counter to keep track of collisions\n    counter = 0\n    # A list to keep track of cars\n    cars = []\n    # Iterate over n times\n    for i in range(n):\n        # A new car is added to the list\n        cars.append(Car())\n    # Iterate over the list of cars\n    for j in range(n):\n        # A new car is added to the list\n        cars.append(Car())\n    # Iterate over the list of cars\n    for k in range(n):\n        # The first car moves left\n        cars[k].move(\"left\")\n        # Iterate over the list of cars\n        for l in range(n):\n            # If the car is moving right to left\n            if cars[l].direction == \"right\":\n                # If the car has crossed the line in the last iteration\n                if abs(cars[k].position) < abs(cars[l].position):\n                    # Increase the collision counter\n                    counter += 1\n    # Return the collision counter\n    return counter\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return [l[i] + 1 for i in range(len(l))]\n    # the below is faster\n    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # version 1\n    # return [x+1 for x in l]\n    # version 2\n    # for i in range(len(l)):\n    #     l[i] += 1\n    # return l\n    # version 3\n    return [l[i] + 1 for i in range(len(l))]\n    # version 4\n    # return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [l[i]+1 for i in range(len(l))]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [l[i] + 1 for i in range(len(l))]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = l[:]\n    for i in range(1, len(result)):\n        result[i] += result[i-1]\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_l = []\n    for i in l:\n        new_l.append(i + 1)\n    return new_l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l[:] = [x + 1 for x in l]\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l) <= 1:\n        return False\n    for i in l:\n        if l.count(i) >= 2:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        s = l[i] + l[j]\n        if s < 0:\n            i += 1\n        elif s > 0:\n            j -= 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(l) < 2:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(0, len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[-i] = i\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(l)\n    l.sort()\n    for i in range(n):\n        if l[i] > 0:\n            return False\n        for j in range(i + 1, n):\n            if l[j] * -1 > 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # l is a list of integers\n    # return True if there are two distinct elements in l that sum to zero,\n    # and False otherwise\n    set_l = set(l)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0 and l[i]!= l[j]:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # TODO: Implement me\n    \n    return False\n    \nprint pairs_sum_to_zero([1, 3, 5, 0])\nprint pairs_sum_to_zero([1, 3, -2, 1])\nprint pairs_sum_to_zero([1, 2, 3, 7])\nprint pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nprint pairs_sum_to_zero([1])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # Remove duplicates from list\n    unique_elements = list(set(l))\n    \n    # Initialize a dictionary\n    unique_elements_dict = {}\n    \n    for element in unique_elements:\n        unique_elements_dict[element] = element\n    \n    for element in l:\n        # get element's complement\n        complement = -1 * element\n        # check if the complement exists in the dictionary\n        if complement in unique_elements_dict:\n            # if so, return True\n            return True\n    \n    # Return False\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    seen = set()\n    for a in l:\n        if -a in seen:\n            return True\n        seen.add(a)\n    return False"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if x < 0:\n        x = x * (-1)\n    x_list = []\n    while x > 0:\n        x_list.append(str(x % base))\n        x //= base\n    x_list.reverse()\n    return \"\".join(x_list)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # convert base to string for dealing with\n    # any integer that has base larger than 10\n    if base < 10:\n        return str(x)\n    # if base is 10, just return the integer value\n    elif base == 10:\n        return str(x)\n    # convert the number to string, split the string\n    # by the base, convert to integer and return\n    else:\n        return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == 0:\n        return '0'\n    if base < 10:\n        return str(x)\n    return change_base(x//base, base) + str(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x < 0:\n        raise ValueError\n    elif x == 0:\n        return \"0\"\n    x = abs(x)\n    digits = []\n    while x:\n        digits.append(x % base)\n        x //= base\n    return \"\".join(str(n) for n in digits)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # I need to do something for the sign of the number.\n    if x < 0:\n        return change_base(-x, base)\n    else:\n        return change_base(x, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if base >= 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = int(x / base)\n    return ''.join(digits[::-1])\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x % base)"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    y = []\n    while x:\n        y.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(y)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if base > 9:\n        raise ValueError('Base cannot be greater than 9')\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return str(int(x, base))\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    area = (a * h)/2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    fib4_values = [0, 0, 1, 1]\n    if n <= 2:\n        return fib4_values[n]\n    elif n == 3:\n        return 2\n    else:\n        for i in range(4, n + 1):\n            fib4_values.append(fib4_values[i - 1] + fib4_values[i - 2] + fib4_values[i - 3] + fib4_values[i - 4])\n        return fib4_values[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        a = 0\n        b = 1\n        for i in range(n-1):\n            a, b = b, a + b\n        return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    first = 0\n    second = 1\n    for i in range(n-1):\n        first, second = second, first + second\n    return second\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 4:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = 0\n    b = 1\n    c = 0\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return c\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0: return 0\n    if n == 1: return 1\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 2\n    else:\n        a, b = 1, 1\n        for _ in range(n-3):\n            a, b = b, a + b\n        return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[(n - 1) // 2] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[(n - 1) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    copy = sorted(l)\n    length = len(copy)\n    if length % 2 == 0:\n        return (copy[length / 2] + copy[length / 2 - 1]) / 2.0\n    else:\n        return copy[length / 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = sorted(l)\n    mid = int(len(l)/2)\n    if len(l)%2==0:\n        return (l[mid] + l[mid-1])/2\n    else:\n        return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l.sort()\n    return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # if len(l) % 2 == 0:\n    #     return sum(l) / 2\n    # else:\n    #     return sorted(l)[len(l) / 2]\n    return medianHelper(sorted(l), len(l))\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int((len(l)/2)-1)])/2\n    else:\n        return l[int(len(l)/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    if len(l) == 0:\n        raise ValueError(\"List is empty.\")\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1])/2\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    mid = len(l)//2\n    return (l[mid]+l[~mid])/2\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    text = text.lower()\n    text = re.sub('[^a-z0-9]', '', text)\n    return text[::-1] == text\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return text[::-1].casefold() == text.casefold()\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    text = text.lower()\n    text = re.sub(r'[^a-z0-9]','',text)\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(text) <= 1:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if text == '':\n        return True\n    if len(text) == 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # We can't use.isPalindrome() since we want to be able to handle empty strings\n    # We don't want to convert to lower case since isPalindrome() will return True if the string is empty\n    return all(text[i] == text[-i - 1] for i in range(len(text) // 2))\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #assert type(text) == str, 'Text should be a string'\n    if len(text) <= 1:\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (n % p + p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp((n - 1) // 2, p) ** 2) % p * p % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return (modp(n - 1, p) ** 2) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert n >= 0, \"n must be non-negative.\"\n    assert p > 0, \"p must be positive.\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp(n-1, p) * p) % p\n    else:\n        return (modp(n/2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n / 2, p) * p % p\n    else:\n        return modp(n // 2, p) ** 2 % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp((n-1), p) * p) % p\n    else:\n        return (modp(n/2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) ** 2 % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return pow(n, n, p)\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([x for x in text if x not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = ''.join(char for char in text if char not in vowels)\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    vowels = \"aeiouAEIOU\"\n    for vowel in vowels:\n        text = text.replace(vowel, \"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    text = text.lower()\n    res = ''\n    for ch in text:\n        if ch not in vowels:\n            res += ch\n    return res\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    text_new = ''\n    for char in text:\n        if char not in vowels:\n            text_new += char\n    return text_new"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = 'AEIOUaeiou'\n    text = text.lower()\n    new_text = ''\n    for c in text:\n        if c not in vowels:\n            new_text += c\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    for ch in text:\n        if ch.lower() in vowels:\n            text = text.replace(ch, \"\")\n    return text"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    no_vowels = ''\n    for letter in text:\n        if letter not in vowels:\n            no_vowels += letter\n    return no_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_string = ''\n    for letter in text:\n        if letter.lower() in vowels:\n            new_string += ''\n        else:\n            new_string += letter\n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    for i in range(len(text)):\n        if text[i].lower() in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if l == []:\n        return True\n    elif l[0] < t:\n        return below_threshold(l[1:], t)\n    else:\n        return False\n    \ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(5, 10)\n    5\n    >>> gcd(10, 20)\n    10\n    >>> gcd(100, 50)\n    50\n    >>> gcd(100, 25)\n    25\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all([num < t for num in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([i for i in l if i < t]) == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([i for i in l if i < t]) == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return l == [i for i in l if i < t]\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if t == 0:\n        return True\n    elif t > 0:\n        return all(num <= t for num in l)\n    elif t < 0:\n        return all(num >= t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s0)!= len(s1):\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(map(lambda x, y: x == y, s0, s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    else:\n        return len(set(s0).intersection(s1)) == len(s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for char in s0:\n        if char not in s1:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(s0) == len(s1) and all(a == b for a, b in zip(s0, s1))\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Add your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n > 1:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #could be optimised to improve time complexity\n    opening_bracket_pos = brackets.find(\"<\")\n    closing_bracket_pos = -1\n    while opening_bracket_pos >= 0:\n        closing_bracket_pos = brackets.find(\">\", opening_bracket_pos)\n        if closing_bracket_pos < 0:\n            return False\n        if closing_bracket_pos < opening_bracket_pos:\n            return False\n        opening_bracket_pos = brackets.find(\"<\", closing_bracket_pos + 1)\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    open_brackets, closed_brackets = \"\", \"\"\n    for b in brackets:\n        if b == \"<\":\n            open_brackets += \">\"\n        elif b == \">\":\n            closed_brackets += \"<\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while \">\" in brackets:\n        if \"<\" not in brackets:\n            return False\n        idx = brackets.index(\">\")\n        brackets = brackets[:idx] + brackets[idx+1:]\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    mapping = {\n        '<': '>',\n        '>': '<',\n    }\n    stacks = []\n    for bracket in brackets:\n        if bracket in '<>':\n            if len(stacks) == 0 or stacks.pop()!= mapping[bracket]:\n                return False\n    return len(stacks) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(\"<\")\n        else:\n            if not bracket_stack:\n                return False\n            if bracket_stack.pop()!= \">\":\n                return False\n    if bracket_stack:\n        return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(\"<\")\n        elif bracket == \">\":\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not brackets:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not brackets:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not brackets:\n        return True\n    if len(brackets) % 2!= 0:\n        return False\n    start = 0\n    end = len(brackets)\n    while start < end:\n        if brackets[start] == \"<\":\n            end -= 1\n            if brackets[end] == \">\":\n                end -= 1\n            else:\n                return False\n        else:\n            start += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(l) == 1:\n        return True\n    if l[1] - l[0] > 0:\n        return all(l[i] - l[i - 1] <= 0 for i in range(1, len(l)))\n    if l[1] - l[0] < 0:\n        return all(l[i] - l[i - 1] >= 0 for i in range(1, len(l)))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or \\\n        all(l[i] <= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) < 2:\n        return True\n    return l[1] > l[0] if l[1] > l[0] else l[1] < l[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (all(l[i] < l[i+1] for i in range(len(l) - 1))\n        or all(l[i] > l[i+1] for i in range(len(l) - 1)))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)-1):\n        if l[i+1] < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert l, \"List must not be empty\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    common = [x for x in l1 if x in l2]\n    return common\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    i1, i2 = 0, 0\n    while i1 < len(l1) and i2 < len(l2):\n        if l1[i1] == l2[i2]:\n            yield l1[i1]\n            i1 += 1\n            i2 += 1\n        elif l1[i1] < l2[i2]:\n            i1 += 1\n        else:\n            i2 += 1\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_divisor = n - 1\n    while max_divisor > 1:\n        if n % max_divisor == 0:\n            return max_divisor\n        else:\n            max_divisor -= 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert n > 1\n    max_pf = 1\n    while n % 2 == 0:\n        max_pf = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_pf = i\n            n //= i\n    if n > 2:\n        max_pf = n\n    return max_pf\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert n > 1\n    factors = set()\n    for i in range(2, n):\n        if n % i == 0:\n            factors.add(i)\n    return max(factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert n > 1 and n % 2 == 1\n    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        upper_bound = int(n ** 0.5) + 1\n        for i in range(3, upper_bound, 2):\n            if n % i == 0:\n                return i\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_num = 0\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    i = 2\n    while i < n:\n        if n % i == 0:\n            n //= i\n            print(n)\n            largest_prime_factor(n)\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # for i in range(n, 1, -1):\n    #     if n % i == 0:\n    #         return i\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n    \n    \ndef sum_to_n2(n):\n    return sum(range(n + 1))\n    \n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 1:\n        return n\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(range(1, n + 1)"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(range(n+1))"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bracket_stack = Stack()\n    open_brackets = \"()[]\"\n    for bracket in brackets:\n        if bracket in open_brackets:\n            bracket_stack.push(bracket)\n        elif bracket == \")\":\n            if bracket_stack.is_empty():\n                return False\n            else:\n                bracket_stack.pop()\n    return bracket_stack.is_empty()\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Fill this in.\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    open_brackets = []\n    for i, bracket in enumerate(brackets):\n        if bracket == \"(\":\n            open_brackets.append(i)\n        elif bracket == \")\":\n            try:\n                open_bracket = open_brackets.pop()\n            except IndexError:\n                return False\n            if i - open_bracket!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    new_brackets = ''\n    for i in brackets:\n        if i == '(':\n            new_brackets += ')'\n        else:\n            new_brackets += '('\n    return new_brackets == brackets\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    unopened = 0\n    for i in range(0, len(brackets)):\n        if brackets[i] == \"(\":\n            unopened += 1\n        elif brackets[i] == \")\":\n            unopened -= 1\n        if unopened < 0:\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    deriv = []\n    for i in range(len(xs)):\n        deriv.append(i * xs[i])\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    derivatives = []\n    for i in range(1, len(xs)):\n        derivatives.append(xs[i] * i)\n    return derivatives\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i] + i * xs[i+1] for i in range(len(xs)-1)] + [xs[-1]]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    length = len(xs)\n    if length == 1:\n        return [0]\n    else:\n        return [(length-1) * x for x in xs[1:]] + [xs[0]]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        deriv = []\n        for i in range(n):\n            if i == 0:\n                deriv.append(xs[1])\n            else:\n                deriv.append(xs[i] * i)\n        return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert type(xs) == list\n    assert len(xs) >= 1\n    res = [0] * (len(xs) - 1)\n    for i in range(len(xs)):\n        if i == 0:\n            res[i] = xs[i + 1]\n        elif i == len(xs) - 1:\n            res[i - 1] = xs[i - 1]\n        else:\n            res[i - 1] = xs[i] * i\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [1]\n    return [xs[i]*i for i in range(1, len(xs))] + [xs[-1]*(len(xs)-1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = [0] * len(xs)\n    result[0] = xs[1]\n    for i in range(1, len(xs) - 1):\n        result[i] = xs[i] * i\n    result[-1] = xs[-1]\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(xs, list)\n    assert all([isinstance(x, int) for x in xs])\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert len(xs) > 1, \"derivative only works on polynomials of at least one degree\"\n    return [xs[i] * i for i in range(1, len(xs))] + [xs[-1]]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 0:\n        return -1\n    if n == 0 or n == 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for c in s if c in 'aeiouy']) + sum([1 for c in s[-1:] if c in 'aeiouy'])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len([c for c in s if c in \"aeiouyAEIOUY\"]) + (len([c for c in s[:-1] if c == \"y\"]) if s[-1] == \"y\" else 0)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.lower()\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = set('aeiouy')\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    if s.endswith('y'):\n        vowels_count -= 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count+=1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for letter in s:\n        if letter in 'aeiou':\n            count += 1\n        elif letter == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = 0\n    for c in s:\n        if c in 'aeiouy':\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for letter in s:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        elif letter == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowel_string = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowel_string:\n            count += 1\n    if s[-1] == 'y' and i in vowel_string:\n        count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if shift > x:\n        return str(x)[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Make shift a multiple of the number of digits\n    shift %= len(str(x))\n    # Split the integer into digits and reverse the digits\n    digits = [int(d) for d in str(x)]\n    digits.reverse()\n    # Adjust the shift to the left side of the digits\n    shift += len(digits)\n    # Add the digits together to form the new integer\n    total = sum(d * 10**i for i, d in enumerate(digits))\n    # Right-shift the total by shift and return the result\n    return str(total)[-shift:]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    x = int(str(x)[::-1])\n    return str(x)[(shift%len(str(x))):]+str(x)[:(shift%len(str(x)))]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = x % 10\n    if shift > d:\n        return str(d) + circular_shift(x // 10, shift - d)\n    else:\n        return str(x % 10) + circular_shift(x // 10, shift)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    digits = stringify(x)\n    return \"\".join(digits[shift:] + digits[:shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if shift > len(str(x)):\n        shift = shift % len(str(x))\n    \n    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    shift %= len(x)\n    return x[-shift:] + x[:len(x) - shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return int(str(x)[-shift:] + str(x)[:-shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if shift > len(str(abs(x))):\n        shift %= len(str(abs(x)))\n    if x < 0:\n        x = -x\n    return str(abs(x) % 10**shift)[-shift:] + str(abs(x) // 10**shift)[:-shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = s.upper()\n    return sum(ord(c) - 64 for c in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([ord(x)-ord('A')+1 for x in s.upper() if ord(x)-ord('A')+1 >= 10])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([ord(c) for c in s if ord(c) > 96])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) == 0:\n        return 0\n    total = 0\n    for i in s:\n        if i >= 'A' and i <= 'Z':\n            total += ord(i) - ord('A') + 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(ord(s[i]) for i in range(len(s)) if s[i].isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([ord(x) for x in s if ord(x) > 96])"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(map(ord,s))\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c) - ord('A') + 1\n    return total\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([s[i] for i in range(n) if (i == (n/2) or i == (n/2-1) or i == (n/2-2))])\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if(s.find(\"apples\") == -1):\n        return 0\n    elif(s.find(\"oranges\") == -1):\n        return 0\n    else:\n        return int(n) - int(s[:s.find(\"apples\")]) - int(s[s.find(\"apples\") + 5 : s.find(\"oranges\")])\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.split()\n    return int(s[0]) - int(s[1]) - int(n)\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n - sum(list(map(int, re.findall(r'\\d+', s))))\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \"\"\"\n    1. first convert the string into a integer\n    2. calculate the difference between the total fruits and the total of the given string\n    3. calculate the total number of apples and the total number of oranges\n    4. return the difference of the total number of fruits and the total number of apples and the total number of oranges\n    \"\"\"\n    def total_fruits(s):\n        \"\"\"\n        converts the string to integer\n        \"\"\"\n        return int(s)\n    def total_number_of_apples(s):\n        \"\"\"\n        calculates the total number of the apples\n        \"\"\"\n        return int(s) % 10\n    def total_number_of_oranges(s):\n        \"\"\"\n        calculates the total number of the oranges\n        \"\"\"\n        return int(s) % 10\n    def total_number_of_mangoes(s):\n        \"\"\"\n        calculates the total number of the mango fruits\n        \"\"\"\n        return int(s) // 10\n    def difference_of_the_total_number_of_apples_and_oranges(s):\n        \"\"\"\n        returns the difference between the total number of the fruits and the total number of the apples and the total number of the oranges\n        \"\"\"\n        return total_fruits(s) - (total_number_of_apples(s) + total_number_of_oranges(s))\n    total_number_of_apples_in_basket = difference_of_the_total_number_of_apples_and_oranges(s)\n    total_number_of_oranges_in_basket = difference_of_the_total_number_of_apples_and_oranges(s)\n    total_number_of_mangoes_in_basket = difference_of_the_total_number_of_apples_and_oranges(s)\n    return total_number_of_mangoes_in_basket - total_number_of_apples_in_basket - total_number_of_oranges_in_basket\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    start = s.find(\"apples\")\n    if start!= -1:\n        count = int(s[start+5:])\n        return count - int(n/2)\n    else:\n        start = s.find(\"oranges\")\n        if start!= -1:\n            count = int(s[start+5:])\n            return count - int(n/2)\n        else:\n            start = s.find(\"mangoes\")\n            if start!= -1:\n                count = int(s[start+5:])\n                return count - int(n/2)\n            else:\n                return -1\n        \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n > 0:\n        if \"apples\" in s:\n            n -= s.count(\"apples\")\n            if n > 0:\n                return fruit_distribution(s.replace(\"apples\",\"\",1), n)\n            else:\n                return n\n        if \"oranges\" in s:\n            n -= s.count(\"oranges\")\n            if n > 0:\n                return fruit_distribution(s.replace(\"oranges\",\"\",1), n)\n            else:\n                return n\n        if \"mangoes\" in s:\n            n -= s.count(\"mangoes\")\n            if n > 0:\n                return fruit_distribution(s.replace(\"mangoes\",\"\",1), n)\n            else:\n                return n\n    else:\n        return n\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total=0\n    for i in range(n):\n        if s[i]=='a':\n            total+=1\n        else:\n            total-=1\n    return n-total\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    orange_basket = s.split(\" \")[0]\n    fruit_basket = s.split(\" \")[1]\n    return int(fruit_basket) - int(orange_basket) - int(fruit_basket)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not s:\n        return 0\n    # This function counts the number of items\n    def count(string,element):\n        return string.count(element)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    smallest_even = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_index = i\n    if smallest_index!= -1:\n        return [ smallest_even, smallest_index]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    evens = []\n    for val in arr:\n        if val % 2 == 0:\n            evens.append(val)\n    if evens == []:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # find the minimum even value and its index\n    # create a list of tuples [(even_value, index)]\n    # sort the list by the even_value field\n    # return the second element of the sorted list\n    if not arr:\n        return []\n    minimum = arr[0]\n    minimum_index = 0\n    even_list = [(a, i) for i, a in enumerate(arr) if a % 2 == 0]\n    even_list.sort(key=lambda x: x[0])\n    return even_list[1]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ans = []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smallest_even_value = -1\n    smallest_even_value_idx = -1\n    for i in range(len(arr)):\n        if smallest_even_value < 0 and arr[i] % 2 == 0:\n            smallest_even_value = arr[i]\n            smallest_even_value_idx = i\n        elif smallest_even_value > 0 and arr[i] % 2 == 0 and arr[i] <= smallest_even_value:\n            smallest_even_value = arr[i]\n            smallest_even_value_idx = i\n    return [ smallest_even_value, smallest_even_value_idx ] if smallest_even_value_idx >= 0 else []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # lst = list(arr)\n    # if len(lst) == 0:\n    #     return []\n    # return [lst[min(i, i+1) for i in range(len(lst)) if lst[i]%2==0]\n    return [min([n for n in arr if n%2==0], key=lambda n: n), arr.index(min([n for n in arr if n%2==0], key=lambda n: n))] if arr else []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 1]\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            return [arr[i], i + 1]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x[0] % 2 == 0, sorted(enumerate(arr), key=lambda x: x[1])))"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr: return []\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    freqs = {}\n    for i in lst:\n        freqs[i] = lst.count(i)\n    if not freqs:\n        return -1\n    else:\n        return max(freqs, key = lambda k: freqs[k])"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    arr = lst\n    maxi = max(arr)\n    freq = [0]*(maxi+1)\n    \n    for i in arr:\n        freq[i] += 1\n    \n    for i in range(maxi,-1,-1):\n        if freq[i] >= i:\n            return i\n    return -1\n    \nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1\nassert search([10, 2, 3, 4, 5, 4, 4, 4]) == 4\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert search([10, 10, 10]) == 10\nassert search([1, 1, 1]) == -"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # using hash table to store the frequency of numbers\n    freq_map = {}\n    # find the first number which is greater than 0\n    for num in lst:\n        if num > 0:\n            break\n    # no number greater than 0, return -1\n    else:\n        return -1\n    # calculate the frequency of each number\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    # find the maximum number which frequency is greater than or equal to the number\n    for num in lst:\n        if freq_map[num] >= num:\n            return num\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_val = max(lst)\n    counts = Counter(lst)\n    for i in range(max_val, 0, -1):\n        if counts[i] >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    freq = Counter(lst)\n    for i in range(len(lst)):\n        if freq[lst[i]] > freq[lst[i]] and lst[i] > 0:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst = sorted(lst)\n    n = len(lst)\n    for i in xrange(n-1, -1, -1):\n        if lst[i] == lst[i-1]:\n            continue\n        else:\n            if i == n - 1:\n                return lst[i]\n            else:\n                if lst[i] >= lst[i+1]:\n                    return lst[i]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    nums = set(lst)\n    for num in nums:\n        if lst.count(num) > num:\n            return num\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    hash = {}\n    for i in lst:\n        hash[i] = hash.get(i, 0) + 1\n    max = -1\n    for i in hash:\n        if hash[i] > hash[max] and hash[i] >= i:\n            max = i\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ans = -1\n    count = 0\n    for n in lst:\n        count += 1\n        if count >= n:\n            ans = max(ans, n)\n    return ans\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n    lst = sorted(lst)\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_lst = []\n    len_lst = len(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for num in lst:\n        if num in result:\n            result.remove(num)\n            result.insert(0, num)\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # return sorted(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    strange_lst = [0] * len(lst)\n    for i in xrange(len(lst)):\n        strange_lst[i] = min(lst)\n        lst.remove(strange_lst[i])\n        strange_lst[i] = max(lst)\n        lst.remove(strange_lst[i])\n        strange_lst[i] = min(lst)\n        lst.remove(strange_lst[i])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst.sort()\n    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    tmp = lst[0]\n    new_lst = [tmp]\n    for i in lst[1:]:\n        if i < tmp:\n            tmp = i\n        else:\n            new_lst.append(tmp)\n            tmp = i\n    new_lst.append(tmp)\n    return new_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return lst\n    lst.sort()\n    lst = lst[::-1]\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2) if a + b > c and a + c > b and b + c > a else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # verify that the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # return the area of the triangle\n        return round((a * b * 1.0) / 2, 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (a + b <= c) or (b + c <= a) or (a + c <= b):\n        return -1\n    else:\n        return round((a*b*c)**(1/2), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a, b, c = sorted([a, b, c])\n    if a >= b + c:\n        return -1\n    return round((a * b) / 2, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a, b, c = float(a), float(b), float(c)\n    s = (a + b + c) / 2\n    if a + b > c and b + c > a and a + c > b:\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return round(((a + b + c) / 2) * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c), 2) if a + b > c and a + c > b and b + c > a else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # code\n    if ((a + b <= c) or (a + c <= b) or (b + c <= a)):\n        return -1\n    else:\n        return round(float(0.5 * (a + b + c)), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    if a+b>c and b+c>a and c+a>b:\n        area =.5 * (a*b - c*a)\n        return round(area, 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    s = (a + b + c) / 2\n    if a >= (b + c) or b >= (c + a) or c >= (a + b):\n        return -1\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # (a**2) + (b**2) == c**2\n    if a + b > c and b + c > a and a + c > b:\n        return round((a * b) / 2, 2)\n    return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if is_palindrome(q) and sum(q)<=w:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def sum_list(lst):\n        result = 0\n        for i in lst:\n            result += i\n        return result\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_palindrome(lst):\n        l = len(lst)\n        for i in range(int(l/2)):\n            if lst[i]!= lst[l-i-1]:\n                return False\n        return True\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def checkPalindrome(list):\n        pLen = len(list)\n        for i in range(0,pLen//2):\n            if list[i]!= list[pLen-i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return balanced(q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(q) <= w and is_palindromic(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def convert(lst):\n        lst2 = []\n        for i in lst:\n            lst2.append(str(i))\n        return lst2\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return q[0] + q[-1] <= w and is_palindrome(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return q == q[::-1] and sum(q) <= w\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    indices = find_indices_of_odd(arr)\n    return min(indices)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(arr)//2):\n        if arr[i]!= arr[-i - 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 0 if not arr else smallest_change_helper(arr, 0, len(arr))\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(arr) - count_palindromic_changes(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    changes = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= i+1:\n            changes += 1\n    return changes\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if arr is None:\n        return None\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1 if arr[0] == 1 else 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([1 for i in range(len(arr)) if arr[i]!= arr[~i]])\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def helper(arr, n):\n        if n == 0: return 0\n        if n == 1: return 1\n        if arr[0]!= arr[-1]: return n\n        return 1 + helper(arr[1:-1], n - 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    start = 0\n    stop = len(arr) - 1\n    # if the array is already palindromic return 0\n    if is_palindromic(arr):\n        return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in lst1 if len(x) > len(lst2) and len(x) < len(lst2) + len(lst1) and len(x) > len(lst1) - len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # list_a = len(lst1)\n    # list_b = len(lst2)\n    # if list_a == list_b:\n    #     return lst1\n    # else:\n    #     if list_a < list_b:\n    #         return lst1\n    #     else:\n    #         return lst2\n    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        print \"failed\"\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    c = 0\n    for l in lst1:\n        c += len(l)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2) and len(x) > 0] + [x for x in lst2 if len(x) < len(lst1) and len(x) > 0]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    elif len(lst2) > len(lst1):\n        return total_match(lst1, lst2)\n    else:\n        if lst1 == lst2:\n            return lst1\n        else:\n            for a in lst1:\n                if len(a) < len(lst2):\n                    return [a]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1[0:len(lst1) - len(lst2)]\n    else:\n        return lst2[0:len(lst2) - len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return lst1 if len(lst1) == 0 else lst2\n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return is_prime(a / 2) and is_prime(a / 3) and is_prime(a / 5)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # check if a is a multiple of 3\n    if a % 3 == 0:\n        # loop through all numbers from 3 to a/3 \n        for i in range(3, (int)(a / 3) + 1, 2):\n            # if a is divisible by i and it is a prime number\n            if a % i == 0 and is_prime(i):\n                # return False\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(1, a):\n        if i % 3!= 0:\n            if a % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if (a % 2 == 0):\n        return False\n    for i in range(3, int(a / 2), 2):\n        if (a % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    divisors = [2,3,5]\n    for x in divisors:\n        if a%x!= 0:\n            return False\n        else:\n            a = a/x\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 2\n    while i * i <= a:\n        if a % i == 0:\n            return False\n        i += 1\n    return a % i!= 0\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 1\n    while i < 100:\n        if a % i == 0:\n            b = 0\n            j = 1\n            while j <= i:\n                if j!= i:\n                    b = b + int(a / j)\n                j = j + 1\n            if b == i:\n                return True\n        i = i + 1\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # We have to check only from 2 to sqrt(a)\n    for i in range(2, int(sqrt(a))):\n        # Check if number is divisible by any number from 2 to sqrt(a)\n        if a % i == 0:\n            # If it is, check if it's a prime number\n            if is_prime(i) and is_prime(a / i):\n                # If it's both, then return True\n                return True\n    # If we made it this far, return False\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x == n:\n        return True\n    if x < n and x % n == 0:\n        return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x == n**int(x)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return True\n    if x < n:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    elif n % int(math.log(x, n)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n!= 0\n    if x > n:\n        return False\n    if x == n:\n        return True\n    return is_simple_power(x, n // 2) and (x * 2) == n\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n**int(log(x, n)) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n % int(x) == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Only works if n is a positive integer\n    if n <= 0:\n        return False\n    # Base case: If n is 1 or x is 1, then x is a simple power\n    if n == 1 or x == 1:\n        return True\n    # Otherwise x is not a simple power\n    if x % n!= 0:\n        return False\n    # Recursive case: If n is 2, then x is a simple power iff n is a power of 2\n    return is_simple_power(x/n, 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if x==n:\n        return True\n    if x%n==0:\n        return is_simple_power(x/n, n)\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a**(1.0/3.0) == int(a**(1.0/3.0))\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = a\n    while n>=0:\n        n = n**3\n        if n == a:\n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = abs(a)\n    if a == 0:\n        return True\n    if a == 1:\n        return True\n    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return a**3 == int(a**3)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a**(1./3) % 1 == 0"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(abs(a))\n    else:\n        return a ** 3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True if a**3 == a else False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a<=0:\n        return True\n    else:\n        return a**3==a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (a ** 3) % 1 == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in num:\n        if i in '0123456789ABCDEF':\n            result.append(i)\n    p = 0\n    for i in result:\n        if int(i) not in prime_numbers:\n            p += 1\n    print(p)\n    return p\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(prime_numbers(num))\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import math\n    \n    hexadecimal = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    \n    result = 0\n    num = num.upper()\n    for i in range(0, len(num)):\n        if int(num[i]) in hexadecimal.values():\n            if is_prime(int(num[i])) == True:\n                result += 1\n    return result\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    nums = [int(num,16)]\n    primes = [2,3,5,7,11,13,17]\n    i = 0\n    while True:\n        num = nums[-1]\n        if num % 2 == 0:\n            num /= 2\n            nums.append(num)\n            primes.pop(i)\n            i -= 1\n            continue\n        i += 1\n        if i == 6:\n            i = 0\n        num = num / 2\n        if num == 1:\n            break\n        nums.append(num)\n    if nums[-1] == 1:\n        return 0\n    return len(primes)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_prime(n):\n        return n > 1 and all(n % i for i in range(2, int(n**0.5)+1))\n    num_as_int = int(num, 16)\n    count = 0\n    for i in range(num_as_int+1):\n        if i < 10:\n            if is_prime(i):\n                count += 1\n        else:\n            if is_prime(i) and is_prime(i ** 2):\n                count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 0\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n    for i in num:\n        if i in primes:\n            result += 1\n    return result\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for n in num:\n        if n in \"23456789ABCDEF\":\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    out = 0\n    for i in num:\n        if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8' or i == '9':\n            out = out + 1\n    return out\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    binary = \"db\" + binary + \"db\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    binary = \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(decimal, int):\n        raise TypeError('Please enter a valid number')\n    if not isinstance(decimal, int):\n        raise TypeError('Please enter a valid number')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 'db' + format(decimal, '08b') + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if decimal == 0:\n        return 'db0'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    b = format(decimal, 'b')\n    b = \"\".join(reversed(b))\n    return \"db\" + b + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"db\" + bin(decimal).replace(\"0b\", \"\").zfill(32) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    decimal = int(decimal)\n    binary = bin(decimal)\n    binary = binary[2:]\n    return 'db' + ''.join(['0' for i in range(8 - len(binary))] + list(binary)) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    binary = \"\"\n    # YOUR CODE HERE\n    if decimal == 0:\n        return \"db0\"\n    if decimal == 1:\n        return \"db1\"\n    if decimal < 0:\n        return None\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary[::-1] + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    binary = ''\n    for _ in range(16):\n        binary += '1' if decimal % 2 else '0'\n        decimal = decimal // 2\n    return 'db' + binary[::-1] + 'db'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # If s is longer than 3 then we need to iterate through the string.\n    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s) - 2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        else:\n            return False\n    for i in range(len(s)):\n        if i+1 >= len(s):\n            break\n        if s[i] == s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    s_set = set()\n    for i in xrange(len(s)-2):\n        if s[i] == s[i+2]:\n            return False\n        s_set.add(s[i])\n    return len(s_set) >= 3\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def get_s(s):\n        ret = []\n        for c in s:\n            ret.append(c)\n        return \"\".join(ret)\n    \n    def get_n(s, n):\n        ret = []\n        for i in range(len(s)):\n            if i % n == 0:\n                ret.append(s[i])\n        return ret\n    \n    ret = True\n    s = get_s(s)\n    n = 3\n    if len(s) < 3:\n        ret = False\n    else:\n        n = 3\n        while n <= len(s):\n            s = get_n(s, n)\n            if s == s[::-1]:\n                ret = True\n                break\n            n += 1\n    return ret\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    s = list(s)\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = s.lower()\n    s = re.sub('[^a-z]','',s)\n    while len(s) > 3:\n        count = collections.Counter(s[i:i+3] for i in range(len(s)-2))\n        if 2 in count.values():\n            s = s[count.values().index(2)+1:]\n        else:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Look at each substring in the string. If there are 3 different letters,\n    # then the string is happy.\n    string = list(s)\n    while True:\n        for i in range(len(string)-2):\n            if string[i] == string[i+1] and string[i] == string[i+2]:\n                return False\n        if len(string) < 3:\n            return True\n        string = string[3:]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-3):\n        if s[i] == s[i+3]:\n            return False\n    return True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Hint: the code you write should be short, so avoid repetitions.\n    return [grade_equation(x) for x in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    grade_equation = {\n                    4.0: \"A+\",\n                    3.7: \"A\",\n                    3.3: \"A-\",\n                    3.0: \"B+\",\n                    2.7: \"B\",\n                    2.3: \"B-\",\n                    2.0: \"C+\",\n                    1.7: \"C\",\n                    1.3: \"C-\",\n                    1.0: \"D+\",\n                    0.7: \"D\",\n                    0.0: \"E\"\n                    }\n    return [grade_equation.get(x, \"E\") for x in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    return [letter_grade(gpa) for gpa in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ['A+', 'B', 'C-', 'C', 'A-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    grades = [round(grade, 1) for grade in grades]\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ['E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    grades = sorted(grades)\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    return list(map(grade, grades))\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return None\n    raise NotImplementedError('You must implement this')\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(2, int(len(string)/2)):\n        if string[i] == string[len(string)-1-i]:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        for i in range(2,len(string)):\n            if (len(string) % i) == 0:\n                return False\n    return True\n    "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (len(string) == len(set(string)))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(string[i] == string[i-1] for i in range(1,len(string)))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Create a list of all possible prime numbers\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    # Make sure the length is a prime number\n    if len(string) < 2:\n        return False\n    # Check every possible digit for the number\n    for i in range(len(string)):\n        # Take the int version of the string\n        string = int(string)\n        # For every possible prime\n        for prime in primes:\n            # If the digit is not a prime\n            if string % prime!= 0:\n                # If the length is prime, it's true\n                if len(str(prime)) == len(string):\n                    return True\n                # If the length is not prime, we are done\n                else:\n                    break\n    # If the loop completed, it's false\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        return True\n    if len(string) % 2 == 0:\n        return False\n    if len(string) % 2 == 1:\n        half_len = len(string) // 2\n        for i in range(1, half_len + 1):\n            if string[i] == string[-i]:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(string) == 1:\n        return False\n    \n    # Check to see if the prime_length is divisible by a number in the range of 2 to the length of the string\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # note that this is actually a straightforward solution to the problem\n    return len(string)!= len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(string, str), \"Input must be a string\"\n    for x in range(1, len(string)):\n        if len(string) % x == 0 and x!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(string) == 1:\n        return False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, 10**(n-1)):\n        start = i // 10**(n-1)\n        end = i % 10**(n-1)\n        if start == 1 or end == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    count = 0\n    for i in xrange(1, 10**n):\n        if i < 10:\n            if i < 9:\n                count += 1\n            else:\n                count += 1\n        else:\n            if i < 99:\n                count += 1\n            else:\n                count += 1\n                if i < 999:\n                    count += 1\n                else:\n                    count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Count the number of n-digit positive integers that start or end with 1\n    # by iterating over the digits, counting the number of times the n-digit\n    # digit integer is one and adding that to the count.\n    return sum(1 for i in range(10**(n-1), 10**n) if str(i)[0] == '1' or str(i)[-1] == '1')\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(10):\n        if n == 1:\n            count += 1\n        else:\n            count += (starts_one_ends(n - 1) + (n - 1) * 9)\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1'):\n            count += 1\n        if str(i).endswith('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for num in range(10**(n-1), 10**n):\n        if num//10**(n-1) == 1:\n            count += 1\n        if num % 10**n == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    ways = 1\n    for i in xrange(1, n):\n        # One can use a single digit to make the number positive\n        # and get a new ways\n        ways += 9 * 9 ** i\n    return ways\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num_ones = [0] * (n + 1)\n    num_ones[1] = 1\n    for x in range(2, n + 1):\n        num_ones[x] = num_ones[x-1]\n        if x % 10 == 1:\n            num_ones[x] += num_ones[x-10]\n    return num_ones[n]\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(1 for num in range(10**(n-1), 10**n) if str(num)[0] in {'1', '8', '9'})\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in xrange(1, 10 ** (n - 1)):\n        s = str(i)\n        if s.startswith('1') or s.endswith('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    return bin(N)"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (N == 0):\n        return \"0\"\n    return solve(N//2) + str(N % 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return str(sum(int(i) for i in str(N)))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Counting up from 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 - 0 - 1 -...\n    binary = \"\"\n    while N:\n        binary = str(N % 2) + binary\n        N = N >> 1\n    return binary\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # The solution is a little tricky. If the binary number has N digits,\n    # the result should be N - 1 + 2 * sum(int(digit) for digit in str(N))\n    # The 1st digit is the last digit of the binary number.\n    # The last digit should be 0 or 1. If it is 1, then the first digit\n    # should be 0, since the first digit is not the sum of the other digits.\n    \n    return str(bin(N - 1 + 2 * sum(int(digit) for digit in str(N))))[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    bin = str(bin(N))[2:]\n    return sum([int(i) for i in bin])"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    binary = \"\"\n    for x in str(N):\n        binary += \"1\" if int(x) else \"0\"\n    return binary\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # write your code here\n    return sum(map(int, str(N)))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Implement your solution here\n    return \"\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #lst = [4, 2, 6, 7]\n    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807(\u4ece0\u5f00\u59cb)\n    for index, item in enumerate(lst):\n        if index % 2 == 0:\n            yield item\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    temp = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            temp.append(lst[i])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # a more efficient and clever solution is to use pop and insert\n    # result = [lst.pop(0)]\n    # for i in lst[::2]:\n    #     result.insert(i,i)\n    # return result\n    return sum(lst[::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    even = 0\n    odd = 1\n    new_list = []\n    while odd <= len(lst):\n        new_list.append(lst[even])\n        even += 2\n        odd += 2\n    return new_list\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            result = result + lst[i]\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(0,len(lst),2):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    words = s.split(' ')\n    n = len(words)\n    temp = []\n    for i in xrange(n):\n        for j in xrange(len(words[i])):\n            temp.append(words[i][j])\n    temp.sort()\n    s = ''.join(temp)\n    i = 0\n    for j in xrange(n):\n        for k in xrange(len(words[j])):\n            words[j][k] = s[i]\n            i += 1\n    return''.join(words)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(''.join(sorted(word)))\n    return''.join(new_words)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # A simple solution will be to reverse the string and then sort it\n    # reverse, sort, reverse again\n    # but this is not the most efficient solution\n    reverse = s[::-1]\n    sort = \"\".join(sorted(reverse))\n    reverse = sort[::-1]\n    return reverse"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return''.join(sorted(s.split(), key = str.lower))\n    \nassert anti_shuffle('Hi') == 'Hi'\nassert anti_shuffle('hello') == 'ehllo'\nassert anti_shuffle('Hello World!!!') == 'Hello!!!Wdlor'"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = s.split()\n    l = [''.join(sorted(i)) for i in l]\n    return''.join(l)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join([i for i in s.split() if len(i) > 1])\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join(sorted(s.split(),key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = s.split()\n    s = sorted(s, key=lambda x: x.strip())\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return None\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    \n    for row in lst:\n        if x in row:\n            res.append((lst.index(row), row.index(x)))\n    res.sort(key=lambda x: x[0])\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted([(i, j) for i, row in enumerate(lst) for j, _ in enumerate(row) if lst[i][j] == x])\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted([(i, len(lst[i]) - lst[i].index(x) - 1) for i in xrange(len(lst)) if x in lst[i]])\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = []\n    for row in lst:\n        row.sort()\n        row.sort(reverse=True)\n        res.append([row[x], row[len(row) - x - 1]])\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    for row in lst:\n        row.sort(reverse=True)\n    \n    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n                break\n    \n    return result\n    \nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([], 1) == []\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nassert get_row([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # lst.sort()\n    row_index = 0\n    column_index = -1\n    lst_len = len(lst)\n    \n    while row_index < lst_len and column_index < lst[row_index]:\n        column_index += 1\n        \n    \n    result = []\n    row_index = 0\n    column_index = -1\n    \n    while row_index < lst_len and column_index < lst[row_index]:\n        if lst[row_index][column_index] == x:\n            result.append((row_index, column_index))\n            \n        column_index += 1\n        \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    out = []\n    for i in xrange(len(lst)):\n        for j in xrange(len(lst[i])):\n            if lst[i][j] == x:\n                out.append((i, j))\n    out = sorted(out, key = lambda x: (x[0], -x[1]))\n    return out\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not lst or x not in lst:\n        return []\n    rows = []\n    for row in lst:\n        rows += [(x, row.index(x))]\n    return sorted(rows, key=lambda x: x[0])\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # your code here\n    # try using recursion\n    # and numpy array to solve this\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not array:\n        return array\n    return sorted(array, key=lambda x: x[0] + x[-1])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(array)\n    if n <= 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odd, even = [], []\n    for num in array:\n        if (num + array[0]) % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even + odd\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(array, key = lambda x : (sum(x), x[0])) if sum(array[0]) % 2 == 0 else sorted(array, key = lambda x : (sum(x), x[0]), reverse = True)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(array) <= 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    odd = sum(array[0::2])\n    even = sum(array[1::2])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def sort(array, asc=True):\n        if len(array) <= 1:\n            return array\n        # sorted array\n        middle = len(array) // 2\n        l = array[:middle]\n        r = array[middle:]\n        if not asc:\n            l.reverse()\n            r.reverse()\n        return sort(l, asc) + sort(r, asc)\n    # sum(first index value, last index value) is odd\n    return sort(array, True) if sum(array[0], array[-1]) % 2 else sort(array, False)"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def check_sum(array):\n        sum = 0\n        for i in array:\n            sum += i\n        return sum\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(array) < 2:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not array: return []\n    result = []\n    if sum(array[0: len(array) // 2]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    cipher = ''\n    for letter in s:\n        idx = alphabet.index(letter)\n        cipher += alphabet[idx + 2]\n    return cipher\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated in a\n    opposite manner. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    cipher = ''\n    for letter in s:\n        idx = alphabet.index(letter)\n        cipher += alphabet[idx - 2]\n    return cipher\n    \n    \ndef caesar(s, n):\n    \"\"\"Create a function caesar that takes a string as an argument and\n    returns a string encrypted with the Caesar Cipher. \n    The Caesar Cipher shifts each character in the string by n places\n    (wrapping around at the end of the alphabet).\n    For example:\n    caesar('abc', 2) returns 'zab'\n    caesar('xyz', 3) returns 'wvw'\n    \"\"\"\n    if len(s) == 1:\n        return s\n    else:\n        new_s = ''\n        for char in s:\n            if char =='':\n                new_s +=''\n            else:\n                new_s += encrypt(char)\n        return new_s\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Find the number of steps to rotate the alphabet\n    steps = (ord('z') - ord('a') + 1) / 2\n    # Create the new alphabet\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n        'm', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # Encrypt the string and return it\n    return ''.join(alphabet[(alphabet.index(x) + steps) % 26] for x in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    from string import ascii_lowercase\n    ALPHABET = list(ascii_lowercase)\n    for i in range(2):\n        ALPHABET.append(ALPHABET.pop(0))\n    new_alphabet = [''] * (len(ALPHABET)*2)\n    for i,j in enumerate(ALPHABET):\n        new_alphabet[i] = ALPHABET[(i + 1) % len(ALPHABET)]\n        new_alphabet[i + len(ALPHABET)] = ALPHABET[i]\n    \n    def encrypt(s):\n        res = ''\n        for c in s:\n            res += new_alphabet[ALPHABET.index(c)]\n        return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated = alphabet[2:] + alphabet[:2]\n    return \"\".join([rotated[alphabet.index(c)] for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    shifted = {}\n    for i in range(26):\n        shifted[chr(ord('a')+i)] = chr(ord('a')+i+2*i)\n    encrypted = ''\n    for char in s:\n        if char in shifted:\n            encrypted += shifted[char]\n        else:\n            encrypted += char\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def rotate(s, letters):\n        letters = list(letters)\n        letters.append(letters.pop(0))\n        s = list(s)\n        new_s = ''\n        for letter in s:\n            new_s += letters[letters.index(letter)]\n        return new_s\n    rotated_string = rotate(s, 'abcdefghijklmnopqrstuvwxyz')\n    return rotated_string\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet2 = alphabet.upper()\n    new_alphabet = alphabet[2:]+alphabet[0:2]\n    new_alphabet2 = alphabet2[2:]+alphabet2[0:2]\n    new_alphabet2 = new_alphabet2[2:]+new_alphabet2[0:2]\n    for i in range(len(new_alphabet)):\n        alphabet = alphabet[1:]+alphabet[0]\n        alphabet2 = alphabet2[1:]+alphabet2[0]\n        new_alphabet = new_alphabet[1:]+new_alphabet[0]\n        new_alphabet2 = new_alphabet2[1:]+new_alphabet2[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    global alphabet\n    return ''.join([alphabet[(alphabet.index(c) + 1) % 26] for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst: return None\n    if len(lst) == 1: return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if not lst:\n        return None\n    \n    lst = sorted(lst)\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[0]:\n            return lst[i]\n            \n    return None\n        \n    "
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst.sort()\n    try:\n        return lst[1]\n    except IndexError:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Best O(n) solution\n    lst.sort()\n    return lst[1] if len(lst) > 1 else None"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pas"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    smallest_index = None\n    for index, value in enumerate(lst):\n        if value < smallest:\n            smallest = value\n            smallest_index = index\n    if smallest_index == 0:\n        return lst[1]\n    return lst[smallest_index - 1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return sorted(lst)[1] if len(lst) > 1 else None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    smallest = None\n    for elem in lst:\n        if smallest is None or elem < smallest:\n            smallest = elem\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not lst:\n        return None\n    min_val = None\n    for i, num in enumerate(lst):\n        if not min_val or num < min_val:\n            min_val = num\n            min_i = i\n    return min_val\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for word in S.split() if word.startswith('i'))"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for word in S.split():\n        if word == 'I':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len([s for s in S.split('.') if s.strip().startswith('I')])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for sentence in S.split('.'):\n        for word in sentence.split():\n            if word == 'I':\n                count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return S.count('I')"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1] == \" \":\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([s for s in S.split('.') if s.startswith('I ')])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([sentence.startswith('I') for sentence in S.split('.')])\n    # return sum(map(lambda s: s.startswith('I'), S.split('.')))\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(sentence[0] == 'I' for sentence in S.split('.') + S.split('?') + S.split('!'))"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for s in S.split('.') if 'I' in s)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x == y + z or x == z + y or x == y + z\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return True if x + y == z and type(x) is int and type(y) is int and type(z) is int else False\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if type(x) is not int or type(y) is not int or type(z) is not int:\n        return False\n    elif (x+y+z) % 1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return any(x==(y+z), any(int(x)==(y+z), int(z)==(y+z)))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == y + z or x == z + y or z == y + x:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return True if (x == y + z or x == z + y or x == y + z) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int) else False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x == y + z or y == x + z or z == x + y\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = 'AEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_letter = chr(ord(letter)+2)\n            encoded_message += new_letter\n        else:\n            encoded_message += letter\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in 'aeiou':\n            new_message += message[(message.index(letter)+2)%5]\n        else:\n            new_message += letter\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    letter_map = {\n        'a': '4',\n        'b': '8',\n        'c': '0',\n        'd': '6',\n        'e': '3',\n        'f': '1',\n        'g': '9',\n        'h': '2',\n        'i': '7',\n        'j': '1',\n        'k': '5',\n        'l': '0',\n        'm': '4',\n        'n': '5',\n        'o': '0',\n        'p': '7',\n        'q': '0',\n        'r': '5',\n        's': '5',\n        't': '7',\n        'u': '0',\n        'v': '6',\n        'w': '0',\n        'x': '2',\n        'y': '7',\n        'z': '1',\n    }\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def make_letter_dic(alphabet):\n        letter_dic = dict(zip(list(alphabet), list(alphabet)))\n        return letter_dic\n    \n    letter_dic = make_letter_dic(string.ascii_lowercase)\n    \n    for i in range(len(message)):\n        if message[i].lower() in letter_dic:\n            message = message[:i] + letter_dic[message[i].lower()] + message[i + 1:]\n            \n    return messag"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    message = message.upper()\n    new_message = ''\n    for letter in message:\n        if letter in 'AEIOU':\n            index = list(ALPHABET).index(letter)\n            new_index = index + 2\n            if new_index > 25:\n                new_index = new_index - 26\n            new_letter = list(ALPHABET)[new_index]\n        else:\n            new_letter = letter\n        new_message += new_letter\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    message = message.lower()\n    \n    vowels = 'aeiou'\n    \n    result = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.index(letter)\n            result += vowels[index+2]\n        else:\n            result += letter\n    \n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # You can add more elif statements.  \n    # Remind yourself of the helper function in order_letters\n    # below.\n    return \"\".join([order_letters[ord(letter) - ord(\"a\")] for letter in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = 'AEIOU'\n    \n    for letter in message:\n        if letter in vowels:\n            message = message.replace(letter, chr(ord(letter)+2))\n            \n    return message\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    from math import log10, sqrt\n    lst = [x for x in lst if x > 0]\n    if lst == []:\n        return 0\n    lst = sorted(lst)\n    for i in xrange(len(lst)):\n        if lst[i] == lst[i+1]:\n            lst[i] = sqrt(lst[i])\n    for i in xrange(len(lst)):\n        lst[i] = log10(lst[i])\n    res = 0\n    for i in xrange(len(lst)):\n        res += (lst[i] % 1)\n    return re"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    maxp = max(lst)\n    digits = [int(i) for i in str(maxp)]\n    return sum(digits)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(list(map(lambda x: sum(map(lambda y: int(y) % 10, list(str(x)))) if isPrime(x) else 0, lst)))"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(lst)\n    for i in range(0, n):\n        if not is_prime(lst[i]):\n            lst[i] = 0\n            return sum(map(int, str(lst[i])))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 0\n    for i in lst:\n        if isPrime(i):\n            result += i\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import math\n    # Using a set as we know there are no duplicates\n    lst = set(lst)\n    # Checking if all the numbers are prime\n    nums = [int(math.sqrt(n)) for n in lst]\n    primes = [True] * len(lst)\n    for i in range(2, len(lst)):\n        if primes[i]:\n            for j in range(i * i, len(lst), i):\n                primes[j] = False\n    primes_set = set(primes)\n    primes = [primes[i] for i in range(len(primes)) if primes[i] == True]\n    primes = [n for n in primes if n < len(lst)]\n    # Checking if the numbers are in the set of prime numbers\n    primes = [n for n in primes if n in lst]\n    # Sum of the digits\n    lst = [str(n) for n in lst]\n    s = [sum(int(digit) for digit in num) for num in lst]\n    s = [n for n in s if n in primes_set]\n    s = [int(n) for n in s]\n    return sum(s)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    prime = []\n    for i in lst:\n        if i in prime:\n            pass\n        elif i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                prime.append(i)\n    return sum(map(int,str(max(prime))))"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_i = 0\n    max_num = 0\n    for i, n in enumerate(lst):\n        if is_prime(n):\n            if n > max_num:\n                max_num = n\n                max_i = i\n    return sum(int(x) for x in str(max_num))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(x) for x in str(max(lst)) if x!= 0])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = 0\n    b = 0\n    for i in lst:\n        if isPrime(i):\n            a = a + i\n    return a\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.islower() or key.isupper():\n            return False\n    return True\n    \n    \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        all_lower = True\n        all_upper = True\n        for i in dict:\n            if i.islower():\n                all_lower = False\n            elif i.isupper():\n                all_upper = False\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not dict:\n        return False\n    else:\n        return all(type(k) is str for k in dict.keys()) and all(type(v) is str for v in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        if type(dict) is not dict:\n            return True\n        else:\n            return False\n    elif len(dict) > 1:\n        for key, value in dict.items():\n            if type(key) is not str or type(value) is not str:\n                return False\n            elif type(key) is str and type(value) is str:\n                if key.islower() or value.islower():\n                    continue\n                else:\n                    return False\n    return True\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not dict:\n        return False\n    for k in dict.keys():\n        if type(k)!= type(\"abc\"):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    if all([isinstance(key, str) for key in dict]):\n        return all([key.islower() or key.isupper() for key in dict.keys()])\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n    else:\n        newDict = dict.copy()\n        for key in newDict:\n            if type(key)!= str:\n                return False\n            elif key.islower():\n                newDict.pop(key)\n            else:\n                pass\n        if len(newDict) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return True\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n            elif key.isupper():\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # your code here\n    if not dict:\n        return False\n    return all(isinstance(key, str) for key in dict.keys()) and all(isinstance(key, str) for key in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not dict:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(2, n):\n        if is_prime(i):\n            print(i)\n            \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return []\n    res = []\n    for i in range(2, n):\n        if is_prime(i):\n            res.append(i)\n            if len(res) == n:\n                break\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers = range(2, n + 1)\n    results = []\n    for i in numbers:\n        if i == 2:\n            results.append(2)\n        elif i % 2 == 0:\n            continue\n        elif i > 10:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                results.append(i)\n    return results\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr = []\n    for i in range(n):\n        if is_prime(i):\n            arr.append(i)\n    return arr\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    array = []\n    for i in range(2,n+1):\n        is_prime = True\n        for j in range(2,i):\n            if (i % j) == 0:\n                is_prime = False\n        if is_prime:\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    if n == 3:\n        return [2,3,5]\n    return count_up_to(n-1) + count_up_to(n-2) + count_up_to(n-3)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert n > 0\n    n_primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            n_primes.append(i)\n    return n_primes\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    if n % 2 == 0:\n        return count_up_to(n - 1)\n    else:\n        return [2] + count_up_to(n - 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return []\n    if n == 0:\n        return []\n    # start with a list of all numbers between 0 and n\n    my_list = range(n + 1)\n    # remove all of the multiples of 2\n    my_list = [num for num in my_list if num % 2!= 0]\n    # remove all of the multiples of 3\n    my_list = [num for num in my_list if num % 3!= 0]\n    # remove all of the multiples of 5\n    my_list = [num for num in my_list if num % 5!= 0]\n    # remove all of the multiples of 7\n    my_list = [num for num in my_list if num % 7!= 0]\n    # remove all of the multiples of 11\n    my_list = [num for num in my_list if num % 11!= 0]\n    # remove all of the multiples of 13\n    my_list = [num for num in my_list if num % 13!= 0]\n    # remove all of the multiples of 17\n    my_list = [num for num in my_list if num % 17!= 0]\n    # remove all of the multiples of 19\n    my_list = [num for num in my_list if num % 19!= 0]\n    # remove all of the multiples of 23\n    my_list = [num for num in my_list if num % 23!= 0]\n    # remove all of the multiples of 29\n    my_list = [num for num in my_list if num % 29!= 0]\n    # remove all of the multiples of 31\n    my_list = [num for num in my_list if num % 31!= 0]\n    # remove all of the multiples of 37\n    my_list = [num for num in my_list if num % 37!= 0]\n    # remove all of the multiples of 41\n    my_list = [num for num in my_list if num % 41!= 0]\n    # remove all of the multiples of 43\n    my_list = [num for num in my_list if num % 43!= 0]\n    # remove all of the multiples of 47\n    my_list = [num for num in my_list if num % 47!= 0]\n    # remove all of the multiples of 53\n    my_list = [num for num in my_list if num % 53!= 0]\n    # remove all of the multiples of 59\n    my_list = [num for num in my_list if num % 59!= 0]\n    # remove all of the multiples of 61\n    my_list = [num for num in my_list if num % 61!= 0]\n    # remove all of the multiples of 67\n    my_list = [num for num in my_list if num % 67!= 0]\n    # remove all of the multiples of 71\n    my_list = [num for num in my_list if num % 71!= 0]\n    # remove all of the multiples of 73\n    my_list = [num for num in my_list if num % 73!= 0]\n    # remove all of the multiples of 79\n    my_list = [num for num in my_list if num % 79!= 0]\n    # remove all of the multiples of 83\n    my_list = [num for num in my_list if num % 83!= 0]\n    # remove all of the multiples of 89\n    my_list = [num for num in my_list if num % 89!= 0]\n    # remove all of the multiples of 97\n    my_list = [num for num in my_list if num % 97!= 0]\n    # remove all of the multiples of 101\n    my_list = [num for num in my_list if num % 101!= 0]\n    # remove all of the multiples of 103\n    my_list = [num for num in my_list if num % 103!= 0]\n    # remove all of the multiples of 107\n    my_list = [num for num in my_list if num % 107!= 0]\n    # remove all of the multiples of 109\n    my_list = [num for num in my_list if num % 109!= 0]\n    # remove all of the multiples of 113\n    my_list = [num for num in my_list if num % 113!= 0]\n    # remove all of the multiples of 127\n    my_list "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        s = [2,3]\n        x = s[-1] + 2\n        while len(s) < n:\n            if is_prime(x):\n                s.append(x)\n            x = s[-1] + 2\n        return s\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([int(x) * int(y) for x, y in zip(str(a), str(b))])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    return abs(a) * abs(b)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    \n    def unit_multiply(a, b):\n        \"\"\"\n        Function that takes a string representing a number and \n        returns the integer value of that string.\n        \"\"\"\n        # Your code here\n        \n        a = int(a)\n        b = int(b)\n        \n        def multiply(a, b):\n            if a == 0 or b == 0:\n                return 0\n            elif a == 1:\n                return b\n            elif b == 1:\n                return a\n            \n            if a < b:\n                a, b = b, a\n            \n            if b == 1:\n                return a\n            \n            elif b == 2:\n                return 2 * a\n            \n            else:\n                return multiply(a, b - 1) + a\n            \n        if a < 0:\n            a *= -1\n        \n        if b < 0:\n            b *= -1\n        \n        return multiply(a, b)\n        \n    def integer_divide(a, b):\n        \"\"\"\n        Function that takes a string representing a number and \n        returns the integer value of that string.\n        \"\"\"\n        # Your code here\n        \n        a = int(a)\n        b = int(b)\n        \n        def divide(a, b):\n            if a == 0:\n                return 0\n            elif a == 1:\n                return 1\n            elif b == 1:\n                return a\n            \n            elif a < b:\n                a, b = b, a\n            \n            if b == 1:\n                return a\n            \n            elif b == 2:\n                return 2 * a\n            \n            else:\n                return divide(a, b - 1) + a\n        \n        if a < 0:\n            a *= -1\n            \n        if b < 0:\n            b *= -1\n            \n        return divide(a, b)\n        \n    def multiply_base(a, b, base):\n        \"\"\"\n        Function that takes a string representing a number and \n        returns the integer value of that string.\n        \"\"\"\n        # Your code here\n        \n        a = int(a, base)\n        b = int(b, base)\n        \n        def multiply(a, b):\n            if a == 0 or b == 0:\n                return 0\n            elif a == 1:\n                return b\n            elif b == 1:\n                return a\n            \n            if a < b:\n                a, b = b, a\n            \n            if b == 1:\n                return a\n            \n            elif b == 2:\n                return 2 * a\n            \n            else:\n                return multiply(a, b - 1) + a\n            \n        if a < 0:\n            a *= -1\n            \n        if b < 0:\n            b *= -1\n            \n        return multiply(a, b)\n    \n    def unit_divide(a, b):\n        \"\"\"\n        Function that takes a string representing a number and \n        returns the integer value of that string.\n        \"\"\"\n        # Your code here\n        \n        a = int(a)\n        b = int(b)\n        \n        def divide(a, b):\n            if a == 0:\n                return 0\n            elif a == 1:\n                return 1\n            elif b == 1:\n                return a\n            \n            elif a < b:\n                a, b = b, a\n            \n            if b == 1:\n                return a\n            \n            elif b == 2:\n                return 2 * a\n            \n            else:\n                return divide(a, b - 1) + a\n        \n        if a < 0:\n            a *= -1\n            \n        if b < 0:\n            b *= -1\n            \n        return divide(a, b)\n        \n    def divide_base(a, b, base):\n        \"\"\"\n        Function that takes a string representing a number and \n        returns the integer value of that string.\n        \"\"\"\n        # Your code here\n        \n        a = int(a, base)\n        b = int(b, base)\n        \n        def divide(a, b):\n            if a == 0:\n                return 0\n            elif a == 1:\n                return 1\n            elif b == 1:"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([int(i) for i in str(a * b)])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    prod = 0\n    for i in range(len(a)):\n        num = a[i]\n        prod = prod * 10 + num\n    for i in range(len(b)):\n        num = b[i]\n        prod = prod * 10 + num\n    return prod\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    elif a < 0 and b > 0:\n        return multiply(a * -1, b)\n    elif a > 0 and b < 0:\n        return multiply(a, b * -1)\n    elif a < 0 and b < 0:\n        return multiply(a * -1, b * -1)\n    else:\n        a = str(a)\n        b = str(b)\n        a = a[-1::-1]\n        b = b[-1::-1]\n        return int(a) * int(b)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    carry = 0\n    result = 0\n    for i in range(b):\n        temp = (a & 1) * b\n        carry = (temp << 1) | (carry & 1)\n        a >>= 1\n        b >>= 1\n        result = (carry | temp)\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return 0\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if b == 0:\n        return 0\n    \n    if b < 0:\n        return multiply(-1, a*b)\n    \n    if a == 0:\n        return 0\n    \n    return ((a % 10) * (b % 10)) + multiply(a // 10, b)\n    \nassert multiply(148, 412) == 16\nassert multiply(19, 28) == 72\nassert multiply(2020, 1851) == 0\nassert multiply(14,-15) == 20"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Your code here\n    \n    return 0"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if (ord(s[i]) >= 65) and (ord(s[i]) <= 90):\n            if i % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return sum([1 for i in range(0,len(s),2) if s[i].isupper()])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(x.isupper() for x in s[::2])\n    \n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    # return 1\n    return sum(1 for c in s[::2] if c.upper() in vowels)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert type(s) == str, 'count_upper() accepts only string argument'\n    return sum([1 for i in range(0, len(s), 2) if s[i].upper() in 'AEIOU'])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(0,len(s),2) if s[i].isupper())\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # your code here\n    #return s.count('A') + s.count('E') + s.count('I') + s.count('O') + s.count('U')\n    return sum([1 for i in xrange(len(s) // 2) if s[i].isupper()])\n    \nprint count_upper('aBCdEf')\nprint count_upper('abcdefg')\nprint count_upper('dBBE')"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return round(int(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # FIXME: implement me\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return round(float(value))\n    # '''\n    # or\n    # return int(round(float(value)))\n    # '''\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    from decimal import Decimal\n    import math\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # convert to float\n    v = float(value)\n    # extract int part\n    v_int = int(v)\n    # find difference\n    diff = v - v_int\n    # round it\n    if diff > 0:\n        v_ret = v_int + 1\n    else:\n        v_ret = v_int\n    # return\n    return v_ret\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import math\n    def f(num):\n        if float(num) == int(float(num)):\n            return int(num)\n        else:\n            return int(math.ceil(float(num)))\n    return f(value)\n    \ndef closest_integer2(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    value = float(value)\n    if value == round(value):\n        return int(value)\n    return round(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    integer_value = int(value)\n    value_minus_integer = value - integer_value\n    if value_minus_integer > 0:\n        return integer_value + 1\n    else:\n        return integer_value - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = [n]\n    while n > 1:\n        n -= 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n // 2) + 1\n        l.append(n)\n    return l\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    levels = [n]\n    n = n - 1\n    while n > 0:\n        if n % 2 == 0:\n            levels.append(n)\n            n = n - 2\n        else:\n            levels.append(n)\n            n = n - 1\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # make a list of 0 to n\n    l = list(range(0,n+1))\n    # get the number of stones in each level\n    l = [n] + [n-i for i in l if i % 2] + [n + i for i in l if i % 2 == 0]\n    return l\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pile = [n]\n    while pile[-1] > 1:\n        pile.append(pile[-1] - 2 * (pile[-1] % 2))\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = [n]\n    if n % 2:\n        for i in range(n-1, -1, -1):\n            res.append(i+1)\n    else:\n        for i in range(n-1, -1, -2):\n            res.append(i+2)\n    return res\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [n, n + (n % 2) * 2, n + (n // 2) * 2]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stones = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n -= 1\n            stones.append(n)\n        else:\n            n //= 2\n            stones.append(n)\n    return stones\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(n):\n        result.append(2 * i + 1)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [n] + [n+2*i+1 for i in range(1, n//2)] + [n+2*i for i in range(n//2+1, 0, -1)]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(',')"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    words = s.split(\",\")\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # YOUR CODE HERE\n    return s.split(\",\")\n    \nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return s.split(\", \")\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if x % 2 == 0:\n        return x\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    nums = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            nums.append(i)\n    return nums\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if (x % 2 == 0 and y % 2 == 0) and (x < y):\n        return x\n    elif (x % 2 == 0 and y % 2 == 0) and (x > y):\n        return y\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x >= y:\n        return -1\n    elif x == y:\n        return x\n    elif x > y:\n        return x + 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n    \nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for num in range(x, y + 1):\n        if num % 2 == 0 and num > 0:\n            return num\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(((i, i + y) for i in range(x, y, 2))[0][1] if ((i, i + y) for i in range(x, y, 2)) else -1)"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = -1\n    if x % 2 == 0 and y % 2 == 0 and x <= y:\n        while x <= y:\n            if x % 2 == 0:\n                result = x\n            x = x + 2\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    return bin(round(sum(range(n, m+1))/float(m-n+1)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    rounded = (m - n + 1) // 2\n    return str(bin(rounded))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == m:\n        return -1\n    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = 0\n    if n > m:\n        return -1\n    for i in range(n, m + 1):\n        s += i\n    return bin(s)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # * 1.1\n    if n > m: return -1\n    # * 1.2\n    l = (m + n - 1) // 2\n    # * 2.1\n    r = bin(l)[2:]\n    # * 2.2\n    if len(r) < l: r = \"0\" + r\n    # * 3\n    return r\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rounded_avg = (n + m) / 2\n    return str(bin(rounded_avg))[2:]"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    else:\n        return format(int((n+m)/2), 'b')\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # convert to binary\n    n_bin = \"{0:b}\".format(n)\n    m_bin = \"{0:b}\".format(m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    return \"{0:b}\".format(int((n + m) / 2))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted([i for i in x if i % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # the list of numbers that doesn't have an even digit\n    unique_nums = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    list = []\n    for i in range(0, len(x)):\n        if int(x[i]) % 2!= 0:\n            list.append(int(x[i]))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for num in x:\n        if num <= 9:\n            result.append(num)\n        elif (num % 2) == 0:\n            pass\n        else:\n            result.append(num)\n    return sorted(result)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO: Write your solution here\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set([i for i in x if i % 2]))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    list_ = []\n    for i in x:\n        if str(i)[0] == str(i)[1]:\n            pass\n        else:\n            list_.append(i)\n    list_.sort()\n    return list_\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in x if x % 2!= 0]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted([i for i in x if sum(int(digit) for digit in str(i)) % 2 == 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted([x for x in x if x%2==0])\n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    arr = sorted(arr)\n    arr = arr[::-1]\n    \n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [str(arr[0])]\n    elif len(arr) == 2:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n    elif len(arr) == 3:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n        elif arr[1] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[1]]\n        elif arr[1] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[1]]\n        elif arr[1] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[1]]\n        elif arr[2] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[2]]\n        elif arr[2] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[2]]\n        elif arr[2] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[2]]\n    elif len(arr) == 4:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n        elif arr[1] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[1]]\n        elif arr[1] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[1]]\n        elif arr[1] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[1]]\n        elif arr[2] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[2]]\n        elif arr[2] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[2]]\n        elif arr[2] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[2]]\n        elif arr[3] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[3]]\n        elif arr[3] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[3]]\n        elif arr[3] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[3]]\n    elif len(arr) == 5:\n        if arr[0] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[0]]\n        elif arr[0] in [4, 5, 6]:\n            return ['Four', 'Five', 'Six'][arr[0]]\n        elif arr[0] in [7, 8, 9]:\n            return ['Seven', 'Eight', 'Nine'][arr[0]]\n        elif arr[1] in [1, 2, 3]:\n            return ['One', 'Three', 'Two'][arr[1]]\n        e"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [digit_to_name(num) for num in sorted(arr) if 1 <= num <= 9]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Check for empty arrays\n    if len(arr) == 0:\n        return []\n    \n    # Sorts the array\n    arr.sort()\n    \n    # Breaks down the array into a list of numbers 1-9\n    numbers = []\n    for i in range(len(arr)):\n        if arr[i] >= 1 and arr[i] <= 9:\n            numbers.append(arr[i])\n    \n    # Sort the numbers array\n    numbers.sort()\n    \n    # Makes the result\n    result = []\n    for number in numbers:\n        result.append(names[number-1])\n    \n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0] < 1 or arr[0] > 9:\n            return []\n        else:\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[0] - 1]\n    sorted_arr = sorted(arr)\n    reverse_arr = sorted_arr[::-1]\n    arr_len = len(reverse_arr)\n    result = [None] * arr_len\n    for i in range(arr_len):\n        if 1 <= reverse_arr[i] <= 9:\n            result[i] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][reverse_arr[i] - 1]\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # arr.sort()\n    # arr.reverse()\n    return [digit_name(n) for n in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] if arr else []\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    arr.reverse()\n    for i in xrange(len(arr)):\n        if arr[i] < 10 and arr[i] > 0:\n            arr[i] = str(arr[i])\n        else:\n            continue\n    return arr"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [d2n[x] for x in sorted([n for n in arr if 1 <= n <= 9])[::-1]]\n    \nif __name__ == '__main__':\n    print by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    print by_length([])\n    print by_length([1, -1, 55])\n    print by_length([1, -1, 10, 100, 1000])"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if not arr:\n        return []\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    r = [1]\n    for i in range(1, n):\n        r.append(i * r[i-1])\n    return r\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        l = f(n-1)\n        l2 = []\n        for i in range(1,len(l)):\n            if i%2 == 0:\n                l2.append(l[i]*l[i])\n            else:\n                l2.append(l[i]+sum(l[:i]))\n        l2.append(l[-1])\n        return l2\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    i = 1\n    factorial = 1\n    result = [1]\n    while i <= n:\n        if i % 2 == 0:\n            factorial = factorial * i\n            result.append(factorial)\n        else:\n            factorial = 1\n            result.append(i + 1)\n        i = i + 1\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [i if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"\"\"\n    #1st method\n    result = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(i)\n    return result\n    \"\"\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return [1]\n    else:\n        result = [1]\n        for i in range(1, n):\n            if i % 2 == 0:\n                result.append(result[i - 1] * i)\n            else:\n                result.append(sum(range(1, i + 1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(result[i-1] * i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = [0, 0]\n    for i in range(1, n+1):\n        res[is_palindrome(i)] += 1\n    return res\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([1 for x in range(1, n) if x % 2 == 0 and is_palindrome(x)]) * 2, \\\n           sum([1 for x in range(1, n) if x % 2 == 1 and is_palindrome(x)])\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i%2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ans = (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"\"\"\n    Let N denote the number of digits in n.\n    Let the first half of the number be the first half of a palindrome.\n    For example, 111111111 has 4 consecutive palindromes\n    whose first half is 111, 1111 and 1111. The first half of 101111011\n    has 4 consecutive palindromes whose first half is 101, 1011 and 1011.\n    The first half of 100101111 has 4 consecutive palindromes whose first half is 100, 1001 and 1001.\n    Therefore, the number of even integer palindromes in the first half of n is N//2, and the number of odd integer\n    palindromes in the first half of n is (N-N//2).\n    Now we can simply find the number of even and odd integer palindromes\n    in the second half of n.\n    \"\"\"\n    digit_len = int(math.ceil(math.log10(n)) + 1)\n    palindromes = [str(i) for i in range(10 ** (digit_len // 2 - 1), 10 ** digit_len)]\n    for p in palindromes:\n        if is_even_palindrome(int(p + p[-2::-1])):\n            if is_odd_palindrome(int(p + p[-2::-1])):\n                return (1, 1)\n            else:\n                return (1, 0)\n        elif is_odd_palindrome(int(p + p[-2::-1])):\n            return (0, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = (0, 0)\n    for i in range(1, n + 1):\n        even = 0\n        odd = 0\n        while i:\n            if i % 2:\n                odd += 1\n            else:\n                even += 1\n            i //= 10\n        if even == even_odd_palindrome(i)[0]:\n            res = (res[0] + even, res[1] + odd)\n    return res"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = n+1\n    cnt = 0\n    for i in xrange(1, n):\n        for j in xrange(i, n):\n            if is_palindrome(i, j):\n                if i % 2 == 1:\n                    cnt += 1\n                else:\n                    cnt -= 1\n    return (cnt, n-cnt-1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = str(n)\n    return int(n[0]) % 2, int(n[-1]) % 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in arr:\n        if i > 0:\n            tmp = i\n        else:\n            tmp = -1 * i\n        while tmp > 0:\n            total += tmp % 10\n            tmp = int(tmp / 10)\n    return total\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your Code Here\n    return len([x for x in arr if sum(int(digit) for digit in str(x)) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your Code Here\n    return sum(1 for x in arr if sum(int(y) for y in str(x)) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for x in arr:\n        # Check if the number is positive or negative\n        if x > 0:\n            # Count the number of positive numbers with non-zero digits\n            count += count_digits(x)\n        elif x < 0:\n            # Count the number of negative numbers with non-zero digits\n            count += count_digits(abs(x))\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([x for x in arr if int(str(x).replace('-', '')) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len([i for i in arr if i > 0 and sum(map(int, list(str(i)))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nums = len(arr)\n    if nums == 0:\n        return 0\n    if nums == 1:\n        return 1 if arr[0] > 0 else 0\n    if nums == 2:\n        return 1 if arr[0] > 0 and arr[1] > 0 else 0\n    pos_nums = 0\n    for i, num in enumerate(arr):\n        if num > 0:\n            pos_nums += count_nums(arr[i+1:])\n    return pos_nums\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in arr:\n        s = 0\n        while i!= 0:\n            r = i % 10\n            s += r\n            i = i // 10\n        if s > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(filter(lambda x: sum(map(int, str(abs(x)))) > 0, arr))\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for num in arr if any(int(digit) > 0 for digit in str(abs(num))))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    for i in xrange(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    for i in xrange(len(arr)-1):\n        if arr[i]<arr[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr)==0:\n        return True\n    temp=arr[-1]\n    arr[-1]=arr[0]\n    arr[0]=temp\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i]>arr[i+1]:\n            temp=arr[i]\n            arr[i]=arr[i+1]\n            arr[i+1]=temp\n        else:\n            break\n    if arr[0]<=arr[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if not arr:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr=sorted(arr)\n    for i in range(len(arr)):\n        if arr[i]!=i+1:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    N = len(arr)\n    if N==0:\n        return True\n    for i in range(N):\n        if i!=0 and arr[i]<arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # if array is empty\n    if arr is None or len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>=arr[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            for j in range(n-1,i,-1):\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    min_index = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    \n    arr[-1], arr[min_index] = arr[min_index], arr[-1]\n    \n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count=0\n    for i in range(len(arr)):\n        if arr[i]>max(arr[i+1:]):\n            return False\n        else:\n            arr[i]+=1\n            count+=1\n            while arr[i]>max(arr[i+1:]):\n                arr[i]+=1\n                count+=1\n    if count==len(arr):\n        return True\n    return False\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_even(n):\n        return n%2==0\n    return 'YES' if all(is_even(n) for n in lst1) and all(is_even(n) for n in lst2) else 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst1 = lst1[:]\n    lst2 = lst2[:]\n    for i in lst1:\n        if i % 2!= 0:\n            lst1.remove(i)\n    for i in lst2:\n        if i % 2!= 0:\n            lst2.remove(i)\n    if len(lst1) == len(lst2):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n1 = len(lst1)\n    n2 = len(lst2)\n    lst1_even = 0\n    lst2_even = 0\n    for i in range(n1):\n        if lst1[i] % 2 == 0:\n            lst1_even += 1\n    for i in range(n2):\n        if lst2[i] % 2 == 0:\n            lst2_even += 1\n    if lst1_even == n1 and lst2_even == n2:\n        return \"YES\"\n    elif lst1_even < n1 and lst2_even < n2:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"NO\"\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # Check that the lst1 and lst2 have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    # Check that all elements of lst1 and lst2 are in the range [1,100]\n    for i in range(0, len(lst1)):\n        if lst1[i] > 100 or lst1[i] < 1:\n            return \"NO\"\n        if lst2[i] > 100 or lst2[i] < 1:\n            return \"NO\"\n    # Check that all elements of lst1 are even\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    # Check that all elements of lst2 are even\n    for i in range(0, len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    # Check that the lst1 and lst2 are a mixture of even and odd numbers\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count_of_evens = 0\n    for number in lst1:\n        if number % 2 == 0:\n            count_of_evens += 1\n    for number in lst2:\n        if number % 2 == 1:\n            count_of_evens -= 1\n    if count_of_evens <= 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"\"\"\n    return \"YES\" if len(set(lst1) - set(lst2)) == 0 else \"NO\"\n    \"\"\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num_diff = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            num_diff += 1\n        if lst2[i] % 2!= 0:\n            num_diff += 1\n    return \"YES\" if num_diff == 0 else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in lst1:\n        if i % 2!= 0:\n            return \"NO\"\n    for i in lst2:\n        if i % 2!= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst3 = []\n    for i in lst1:\n        if i % 2 == 0:\n            lst3.append(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    output_dict = {}\n    for letter in test:\n        if letter in output_dict:\n            output_dict[letter] += 1\n        else:\n            output_dict[letter] = 1\n    return output_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not test:\n        return {}\n    words = test.split()\n    hash_map = {}\n    for word in words:\n        for letter in word:\n            if letter in hash_map:\n                hash_map[letter] += 1\n            else:\n                hash_map[letter] = 1\n    return hash_map\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # HINT: Use a dictionary to store the result\n    # HINT: Use the collections.Counter class\n    # HINT: Loop through your input to create a list of words\n    # HINT: Loop through the list of words to create a dictionary of letter:freq\n    # HINT: Use the dictionary to create a dictionary of letter:freq\n    # HINT: Use the dictionary to find the most common letter\n    # HINT: Use the dictionary to return a dictionary of letter:freq\n    if not test:\n        return {}\n    else:\n        counter = collections.Counter(test.split())\n        return counter.most_common()[0][0]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    histo = {}\n    for c in test:\n        if c in histo:\n            histo[c] += 1\n        else:\n            histo[c] = 1\n    \n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n    "
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    hist = {}\n    for c in test:\n        if c not in hist:\n            hist[c] = 1\n        else:\n            hist[c] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Split into list of letters\n    split_letters = test.split(' ')\n    # Empty string, don't count anything\n    if len(split_letters) == 0:\n        return {}\n    # Initialize dictionary\n    letter_dict = {}\n    # Loop through each letter and add to dictionary\n    for letter in split_letters:\n        if letter in letter_dict.keys():\n            letter_dict[letter] += 1\n        else:\n            letter_dict[letter] = 1\n    # Return dictionary\n    return letter_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    hist = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = {}\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    if res == res[::-1]:\n        return (res,True)\n    else:\n        return (res,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (s[::-1],s==s[::-1])\n    "
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for char in c:\n        s = s.replace(char,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # your code here\n    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import re\n    i = 0\n    j = len(s) - 1\n    s = s.lower()\n    c = c.lower()\n    s = re.sub(r'[^'+c+']',r'',s)\n    return s,s[i] == s[j]\n    \n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for i in s:\n        if i not in c:\n            result.append(i)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(s) == 0:\n        return (s,True)\n    if len(s) == 1:\n        return (s,s == c)\n    if s[0] == c:\n        return reverse_delete(s[1:],c)\n    return (s[0] + reverse_delete(s[1:],c)[0],reverse_delete(s[1:],c)[1])\n    \n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join([x for x in s if x not in c]),''.join([x for x in s if x not in c])==''.join([x for x in s[::-1] if x not in c])\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = list(s)\n    for i in c:\n        while i in s:\n            s.remove(i)\n    if s == s[::-1]:\n        return \"\".join(s),True\n    else:\n        return \"\".join(s),False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {'3':'one','1':'two','0':'three','5':'four','6':'five','7':'six','8':'seven','9':'eight','2':'nine'}\n    o = []\n    for i in lst:\n        s = \"\"\n        for j in i:\n            if j in d:\n                s += d[j]\n        o.append(s.count('odd'))\n    return [f'the number of odd elements {n}n the str{i}ng {s} of the {lst.index(i)+1}n input.' for n,i in zip(o,lst)]"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def count_odd(s):\n        cnt = 0\n        for ch in s:\n            if ch.isdigit() and int(ch)%2 == 1:\n                cnt+=1\n        return cnt\n    return [\"the number of odd elements \" + str(count_odd(lst[i])) + \"n the str\" + str(i+1) + \" of the \" + str(len(lst)) + \"n input.\" for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    results = []\n    for string in lst:\n        digit_sum = sum(1 for digit in string if int(digit) % 2)\n        results.append(\"the number of odd elements \" + str(digit_sum) + \"n the str\" +\n                        str(string) + \" of the \" + str(len(string)) + \"n input.\")\n    return results\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    d = {}\n    for i in lst:\n        o = 0\n        for x in i:\n            if int(x)%2 == 1:\n                o += 1\n        d[i] = o\n    return [\"the number of odd elements \"+str(d[i])+\"n the \"+i+\"of the \"+str(len(lst))+\" input.\" for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in lst:\n        odd = 0\n        for num in i:\n            if int(num) % 2!= 0:\n                odd += 1\n        result.append( \"the number of odd elements {n} the str4ng {s} of the {s}nput.\".format(n = odd, s = i))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in lst:\n        result.append('the number of odd elements '+str(len(filter(lambda x: x%2!=0,list(i))))+' the str4ng '+str(i))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [\"the number of odd elements \" + str(len(str(i)) - 1) + \"n the str\" + str(i) + \" of the \" + str(len(i)) + \"nput.\" for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in lst:\n        print(i.count('1'))\n    return []\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in lst:\n        count += len(i) - sum(int(x)%2 for x in i)\n    return [count]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    res = []\n    for s in lst:\n        odd = 0\n        for i in s:\n            if int(i)%2 == 1:\n                odd += 1\n        res.append(\"the number of odd elements {}n the str4ng {} of the {}nput.\".format(odd,s,len(s)))\n    return res\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = 0\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum < 0:\n            curr_sum = 0\n        result = max(result, curr_sum)\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sums = []\n    for i in range(len(nums)):\n        sums.append(0)\n    sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i - 1] + nums[i]\n    min_subarray_sum = sums[len(nums) - 1]\n    for i in range(len(nums) - 2, -1, -1):\n        min_subarray_sum = min(min_subarray_sum, sums[i])\n    return min_subarray_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    current_sum = sum(nums)\n    min_sum = current_sum\n    n = len(nums)\n    for i in xrange(n):\n        current_sum = current_sum - nums[i] + nums[i+1]\n        if current_sum < min_sum:\n            min_sum = current_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    min_sum = sys.maxint\n    current_sum = 0\n    for num in nums:\n        if current_sum < 0:\n            current_sum = 0\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Base cases\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n    return min(nums[0], sum(nums[1:]))\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(nums)\n    cum = [0]\n    for num in nums:\n        cum.append(cum[-1] + num)\n    res = float('inf')\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            res = min(res, cum[j] - cum[i - 1])\n    return res\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(nums)\n    i = 0\n    j = 0\n    minSum = -1\n    minSubArray = []\n    while i < n:\n        if nums[i] < 0:\n            j = i\n            minSum += nums[i]\n            while j < n and nums[j] < 0:\n                minSum += nums[j]\n                j += 1\n            if j == n:\n                break\n            minSum -= nums[i]\n            minSubArray.append(minSum)\n            i = j\n        else:\n            i += 1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            s = sum(nums[i - 1: j])\n            if s >= 0:\n                return s\n    return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(nums)\n    min_sum = [float('inf')] * n\n    min_sum[0] = nums[0]\n    for i in range(1, n):\n        min_sum[i] = min_sum[i-1] + nums[i] if min_sum[i-1] < 0 else nums[i]\n    return min(min_sum)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # O(n^2*w)\n    # O(n*w)\n    n, w = len(grid), len(grid[0])\n    # i: row, j: col\n    for i in range(n):\n        for j in range(w):\n            if grid[i][j] == 1:\n                grid[i][j] = max(0, grid[i][j] - 1)\n    for i in range(n):\n        for j in range(w):\n            if grid[i][j]!= 0:\n                grid[i][j] = grid[i][j] + 1\n                if grid[i][j] > capacity:\n                    grid[i][j] = capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    max_filled = max(map(max, grid))\n    \n    result = 0\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                for i in range(max_filled):\n                    if grid[row][col] == 1:\n                        if row + i < rows:\n                            grid[row + i][col] -= 1\n                        else:\n                            grid[0][col] -= 1\n                        if col + i < cols:\n                            grid[row][col + i] -= 1\n                        else:\n                            grid[row][0] -= 1\n                        result += 1\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def max_value(grid):\n        max_val = 0\n        for i in range(len(grid)):\n            if max_val < max(grid[i]):\n                max_val = max(grid[i])\n        return max_val\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    # Sum up the water units in each row\n    rows_sum = []\n    for i in range(n):\n        total = 0\n        for j in range(m):\n            if grid[i][j] == 1:\n                total += 1\n        rows_sum.append(total)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # grid[i][j] = 1 if the well at position (i,j) is empty\n    # grid[i][j] = -1 if the well at position (i,j) is full\n    import sys\n    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    t = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            t[i][j] = grid[i][j]\n            if grid[i][j] == 1:\n                t[i][j] = -1\n    count = 0\n    while True:\n        index = [-1, -1]\n        flag = False\n        for i in range(n):\n            for j in range(m):\n                if t[i][j] == -1:\n                    continue\n                if index[0] == -1:\n                    index[0] = i\n                    index[1] = j\n                elif t[i][j] > t[index[0]][index[1]]:\n                    index[0] = i\n                    index[1] = j\n                elif t[i][j] == t[index[0]][index[1]]:\n                    flag = True\n        if flag:\n            continue\n        for i in range(n):\n            for j in range(m):\n                if t[i][j] == -1:\n                    continue\n                if t[index[0]][index[1]] > t[i][j]:\n                    count += 1\n        capacity -= 1\n        if capacity == 0:\n            break\n    return count\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    N = len(grid)\n    sorted_grid = sorted(grid)\n    for row_idx in range(N):\n        for col_idx in range(N):\n            if grid[row_idx][col_idx] == 1:\n                grid[row_idx][col_idx] = 0\n                return max_fill(grid, capacity)\n    return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    buckets = [[0]*(cols + 1) for _ in range(rows)]\n    grid = [[0]+row+[0] for row in grid]\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import collections\n    rows, cols = len(grid), len(grid[0])\n    bucket_to_well = collections.defaultdict(int)\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c]:\n                bucket_to_well[c] += 1\n    well_to_bucket = collections.defaultdict(int)\n    water_count = 0\n    while bucket_to_well:\n        max_well = max(bucket_to_well.items(), key=lambda x: x[1])\n        well = max_well[0]\n        water_count += max_well[1] * capacity\n        for bucket in range(well, well+capacity):\n            well_to_bucket[bucket] += 1\n        bucket_to_well[well] = 0\n    return water_count - well_to_bucket[0]\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import math\n    # Step 1: collect wells' information\n    well_count = grid.shape[0]\n    well_length = grid.shape[1]\n    wells = []\n    well_start_point = 0\n    well_end_point = well_length\n    for i in range(well_count):\n        well = []\n        well.append(well_start_point)\n        well.append(well_end_point)\n        wells.append(well)\n        well_start_point += well_length\n        well_end_point += well_length\n    wells = np.array(wells)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # @TODO: Use dict instead\n    # @TODO: Or use sorted\n    def find_bits(x):\n        res = []\n        i = 0\n        while x > 0:\n            if x % 2 == 1:\n                res.append(i)\n            i += 1\n            x = x >> 1\n        return res\n    #\n    d = {i: find_bits(i) for i in arr}\n    d = sorted(d.items(), key=lambda x: (len(x[1]), -x[1]))\n    return [i[0] for i in d]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    def count_ones(num):\n        return str(bin(num))[2:].count('1')\n    \n    return sorted(arr, key=count_ones)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([int(bin(i)[2:]) * i for i in arr], key=lambda x: (str(x).count('1'), -x))"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # arr = [int(str(n), 2) for n in arr]\n    # return sorted(arr)\n    \n    # return sorted(arr, key=lambda x: bin(x).count('1'))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr = sorted(arr)\n    res = []\n    for i in arr:\n        res.append(int(''.join(str(x) for x in bin(i).split('b')[1]), 2))\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    counts = [(num, bin(num).count('1')) for num in arr]\n    return sorted(arr, key=lambda x: (counts[x-1][1], counts[x-1][0]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [w for w in s.split() if len(count_consonants(w)) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    words = []\n    i = 0\n    while i < len(s):\n        while s[i]!='':\n            i += 1\n        j = i + 1\n        while s[j]!='':\n            j += 1\n        words.append(s[i+1:j])\n        i = j + 1\n    return [w for w in words if len(w) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    words = s.split(' ')\n    result = []\n    for word in words:\n        if len(consonants(word)) == n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) < 1:\n        return []\n    elif len(s) == 1:\n        return s.split(' ')\n    else:\n        return filter(lambda w: len(consonants(w)) == n, s.split(' '))\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    words = s.split()\n    output = []\n    for word in words:\n        if len(get_consonants(word)) == n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return None\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert type(s) == str\n    assert type(n) == int\n    if s:\n        return list(filter(lambda x: x.count('a') + x.count('e') + x.count('i') + x.count('o') + x.count('u') == n, s.split(' ')))\n    else:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [w for w in s.split() if len([c for c in w if c not in \"aeiou\"]) == n]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert type(word) == str, \"Word is not a string\"\n    assert word.isalpha(), \"Word contains other than English characters\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    pos = 0\n    length = len(word)\n    while pos < length:\n        if word[pos] in VOWELS:\n            return word[pos]\n        elif word[pos] in CONSONANTS:\n            pos += 1\n            while pos < length and word[pos] not in VOWELS + CONSONANTS:\n                pos += 1\n            return word[pos]\n        else:\n            pos += 1\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(word) < 1:\n        return ''\n    \n    \n    vowels = 'aeiou'\n    index = len(word) - 1\n    \n    while index > 0:\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a','e','i','o','u']\n    if word[0] in vowels:\n        return word[0]\n    if word[-1] in vowels:\n        return word[-1]\n    else:\n        for i in xrange(len(word)-1,0,-1):\n            if word[i] in vowels:\n                return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(word) <= 1:\n        return \"\"\n    if word[-1] == \"y\":\n        return word[-1]\n    if word[-1] == \"Y\":\n        return word[-1]\n    if word[-2] == \"Y\":\n        return word[-1]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    index = -1\n    for letter in word[::-1]:\n        if letter not in vowels:\n            index -= 1\n        else:\n            break\n    return word[index + 1:]\n    "
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([i for i in word[::-1] if i in \"aeiouy\"])\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # your code here\n    if len(word) == 0:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(word)-1,0,-1):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(word) <= 1:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    list_of_vowels = ['a', 'e', 'i', 'o', 'u']\n    current_consonant = None\n    vowel_position = 0\n    \n    for i, c in enumerate(reversed(word)):\n        if c.lower() in list_of_vowels:\n            vowel_position = len(word) - i - 1\n            current_consonant = c\n            break\n    \n    if current_consonant is None:\n        return \"\"\n    \n    next_vowel = current_consonant\n    vowel_position += 1\n    while True:\n        next_vowel = word[vowel_position]\n        if next_vowel.lower() in list_of_vowels:\n            break\n        vowel_position += 1\n    \n    return word[vowel_position-1]"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 'Yes' if is_balanced(lst[0]) and is_balanced(lst[1]) else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    def is_good(string):\n        if len(string) % 2 == 1:\n            return False\n        stack = []\n        for c in string:\n            if c == '(':\n                stack.append(c)\n            elif len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            elif stack[-1] == ')':\n                return False\n        return True\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # lst = [')()', ')(']\n    # lst = ['(', ')']\n    # lst
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == '()' else 'No'\n    # Indices of open parentheses\n    open_lst = [i for i, x in enumerate(lst) if x == '(']\n    # Indices of close parentheses\n    close_lst = [i for i, x in enumerate(lst) if x == ')']\n    # Indices of close parentheses that are not the last one\n    close_lst_not_last = [i for i, x in enumerate(close_lst) if x!= close_lst[-1]]\n    for i in range(len(close_lst_not_last)):\n        j = close_lst_not_last[i] + 1\n        # If there is an open parenthesis that's close to a close parenthesis\n        if j < len(open_lst) and open_lst[j] == close_lst_not_last[i] - 1:\n            # Removing the last close parenthesis from the string\n            lst[close_lst_not_last[i]] = ''\n            lst[close_lst_not_last[i] - 1] = ''\n            lst[close_lst_not_last[i] + 1:] = ''\n            # Continue the loop\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    open_count = 0\n    for i in lst[0]:\n        if i == '(':\n            open_count += 1\n        elif i == ')':\n            if open_count == 0:\n                return 'No'\n            open_count -= 1\n    if open_count!= 0:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if lst[0].count('(') == lst[1].count(')'):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(lst)):\n        if lst[i] == '(' and i < len(lst) - 1:\n            lst[i+1] = ')'\n        if lst[i] == ')' and i > 0:\n            lst[i-1] = '('\n    return 'Yes' if '(' not in lst and ')' not in lst else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ## the problem is you have to make all the open parentheses closed\n    ## and then have the closed ones opened\n    ## so if there are open parentheses that are not closed, then the string\n    ## is not good\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Let the two-pointer be i, j. A list of size k with the max k numbers is \n    # the longest list that ends at arr[i] and starts at arr[j]. We keep moving i\n    # to the right until we find a number that is larger than the smallest number\n    # in the list. When we find a number, we increment the j pointer to the right. \n    # We keep moving j to the left until we find a number that is smaller than the\n    # largest number in the list. The max_list will be the list with the maximum\n    # k numbers.\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    i, j = 0, len(arr) - 1\n    max_list = []\n    while j - i + 1 > k:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n    while len(max_list) < k:\n        if arr[i] > arr[j]:\n            max_list.append(arr[i])\n            i += 1\n        else:\n            max_list.append(arr[j])\n            j -= 1\n    return max_list\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = [0] * k\n    n = len(arr)\n    for i in xrange(n):\n        if arr[i] > res[-1]:\n            res.pop()\n            res.append(arr[i])\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr or k < 1:\n        return []\n    arr.sort(reverse = True)\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(arr, reverse=True)[:k]"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr)[-k:]"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_arr = []\n    for i in range(k):\n        max_index = arr.index(max(arr))\n        max_arr.append(arr[max_index])\n        arr.pop(max_index)\n    return max_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr)[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TC : O(n*log(k))\n    # SC : O(k)\n    heapq.heapify(arr)\n    ret = []\n    for i in range(k):\n        ret.append(heapq.heappop(arr))\n    return ret\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(arr)\n    if n == 0 or k == 0:\n        return []\n    elif n <= k:\n        return sorted(arr)\n    else:\n        nmax = arr[n-1]\n        for i in range(n-k, n):\n            if nmax < arr[i]:\n                nmax = arr[i]\n        return [nmax] + maximum(arr, k-1)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            if i % 2 == 0:\n                sum += lst[i]\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([a for i,a in enumerate(lst) if not i%2])"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # use built in function to count the number of even integers in the list\n    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2 == 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2])\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return sum([x for (i,x) in enumerate(lst) if i % 2 == 0 and x % 2 == 0])\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([i for i in lst if i % 2 == 0 and i % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # result = 0\n    # for i in range(0,len(lst),2):\n    #     if lst[i]%2 == 0:\n    #         result+=lst[i]\n    # return result\n    return sum(lst[i] for i in range(0,len(lst),2) if lst[i]%2 == 0)\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    _sum = 0\n    for i in arr[:k]:\n        _sum += i\n    return _sum\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    return result\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if k > len(arr):\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    idx = 0\n    while idx < k:\n        num = arr[idx]\n        if num < 10:\n            arr[idx] = num + 10\n            idx += 1\n        else:\n            arr[idx] = arr[idx] % 10 + 10\n            idx += 1\n            arr[idx] = arr[idx] // 10\n    return sum(arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 0\n    for i in range(k):\n        res += arr[i]\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    arr.sort()\n    i = 0\n    while i < k:\n        arr.pop()\n        i += 1\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([int(x) for x in arr[:k]])"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([i for i in arr[:k] if len(str(i)) <= 2])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return [n] + get_odd_collatz(n-1)\n    else:\n        return [n] + get_odd_collatz(n/2)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seq = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (3 * n) + 1\n        seq.append(n)\n    return sorted(seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n_lst = []\n    while n!= 1:\n        if n%2 == 1:\n            n_lst.append(n)\n        n = n/2 if n%2 == 0 else 3*n + 1\n    return n_lst\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(list(set([i for i in range(1, n + 1, 2) if get_collatz(i) == i])))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    odd_collatz = []\n    if n < 2:\n        return odd_collatz\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    odd_numbers = []\n    if n % 2 == 0:\n        return [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        odd_numbers.append(n)\n    return odd_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    elif n % 2 == 0:\n        return get_odd_collatz(n/2) + [n]\n    else:\n        return get_odd_collatz(3*n+1) + [n]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sequence = []\n    while n > 1:\n        if n % 2 == 1:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sequence\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import re\n    date_pattern = re.compile('([0-9]{2})-([0-9]{2})-([0-9]{4})')\n    date_results = date_pattern.search(date)\n    if date_results:\n        date_converted = list(map(int, date_results.groups()))\n        return True if (\n            date_converted[0] < 1 or date_converted[0] > 31\n            or date_converted[1] < 1 or date_converted[1] > 12\n            or date_converted[2] < 1 or date_converted[2] > 2020\n        ) and (\n            date_converted[0] < 1 or date_converted[0] > 29\n            or date_converted[1] < 1 or date_converted[1] > 12\n        ) else False\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    try:\n        date_components = date.split('-')\n        month = int(date_components[0])\n        day = int(date_components[1])\n        year = int(date_components[2])\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    date_split = date.split('-')\n    if len(date_split)!= 3:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # Convert the string to a list of integers for easier processing\n    date_as_list = [int(i) for i in date.split(\"-\")]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_valid_date(date):\n        import re\n        match = re.match(r'(\\d{1,2})\\-([1-9]|[1-2]\\d)\\-([12][0-9]{3})', date)\n        if not match:\n            return False\n        else:\n            day = match.group(2)\n            month = match.group(1)\n            year = match.group(3)\n            if not 1 <= int(day) <= 31:\n                return False\n            if not 1 <= int(month) <= 12:\n                return False\n            if not 1 <= int(year) <= 9999:\n                return False\n            else:\n                return True\n    return is_valid_date(date)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import re\n    def date_cleaner(date):\n        if len(date) == 0:\n            return False\n        date = re.split(\"\\s\",date)\n        month = date[0]\n        day = date[1]\n        year = date[2]\n        return len(month) == 2 and len(day) == 2 and len(year) == 4 and month.isdigit() and day.isdigit() and year.isdigit()\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # TODO: Implement me\n    # Hint: Use the datetime module to extract the day, month and year from the\n    # date string.\n    # For the month, use the range of 1 to 12.\n    # For the day, use the range of 1 to 31.\n    # For the year, use the range of 1000 to 9999.\n    def is_valid_date(date):\n        \"\"\"You have to write a function which validates a given date string and\n        returns True if the date is valid otherwise False.\n        The date is valid if all of the following rules are satisfied:\n        1. The date string is not empty.\n        2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        3. The months should not be less than 1 or higher than 12.\n        4. The date should be in the format: mm-dd-yyyy\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # the date format should be mm-dd-yyyy\n    # the date should not have any extra spaces\n    # the date should have 3 parts: month, day, year\n    # the day should be an integer and should be between 1 and 31\n    # the month should be an integer and should be between 1 and 12\n    # the year should be an integer and should be between 1 and 9999\n    # return True if the date is valid, False if not\n    \n    if date == '':\n        return False\n    date_format = re.compile('^\\d{1,2}-\\d{1,2}-\\d{4}')\n    if date_format.match(date) is None:\n        return False\n    date_part = date.split('-')\n    if len(date_part)!= 3:\n        return False\n    for part in date_part:\n        if int(part) < 1 or int(part) > 31:\n            return False\n    for part in date_part:\n        if int(part) < 1 or int(part) > 12:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # YYYY-MM-DD format\n    regex = r'^\\d{1,2}\\-\\d{1,2}\\-\\d{4}'\n    if re.match(regex, date):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not date:\n        return False\n    \n    parsed_date = date.split('-')\n    \n    # the date should be in the format: mm-dd-yyyy\n    if len(parsed_date)!= 3:\n        return False\n    \n    # months should be between 1 and 12\n    if int(parsed_date[0]) < 1 or int(parsed_date[0]) > 12:\n        return False\n    \n    # months should not be less than 1 or higher than 12\n    if int(parsed_date[0]) == 1 or int(parsed_date[0]) == 3 or int(parsed_date[0]) == 5 or int(parsed_date[0]) == 7 or int(parsed_date[0]) == 8 or int(parsed_date[0]) == 10 or int(parsed_date[0]) == 12:\n        if int(parsed_date[0]) > 12:\n            return False\n    \n    # days should be between 1 and 31\n    if int(parsed_date[1]) < 1 or int(parsed_date[1]) > 31:\n        return False\n    \n    # days should not be less than 1 or higher than 31\n    if int(parsed_date[1]) == 1 or int(parsed_date[1]) == 3 or int(parsed_date[1]) == 5 or int(parsed_date[1]) == 7 or int(parsed_date[1]) == 8 or int(parsed_date[1]) == 10 or int(parsed_date[1]) == 12:\n        if int(parsed_date[1]) > 31:\n            return False\n    \n    # days should not be less than 1 or higher than 30\n    if int(parsed_date[1]) == 4 or int(parsed_date[1]) == 6 or int(parsed_date[1]) == 9 or int(parsed_date[1]) == 11:\n        if int(parsed_date[1]) > 30:\n            return False\n    \n    # days should not be less than 1 or higher than 29 for the month 2\n    if int(parsed_date[1]) == 2:\n        if int(parsed_date[2]) < 1 or int(parsed_date[2]) > 29:\n            return False\n    \n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    lista = txt.split()\n    return lista\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    txt_list = txt.split()\n    return txt_list\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return txt.split(\" \")\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return re.findall(r\"[\\w']+\", txt)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    txt = txt.replace(\" \", \",\")\n    txt = txt.replace(\",\", \" \")\n    \n    return txt.split(',')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [a for a in txt.split()]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    split = re.findall(r'\\S+', txt)\n    return split\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    txt = txt.lower()\n    if'' not in txt:\n        txt = txt.replace(',', '')\n    if ',' not in txt:\n        return len([i for i in txt if ord(i) % 2!= 0])\n    return txt.split(' ')\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [int(i) for i in lst]\n    if len(lst) < 2: return True\n    if lst[0] > lst[1]: return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]: return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) <= 1:\n        return True\n    sorted_lst = sorted(lst)\n    return lst == sorted_lst\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_lst = sorted(lst)\n    if len(lst) == 1:\n        return True\n    if sorted_lst == lst:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(lst)):\n        if lst[i]!= lst[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # is_sorted = True\n    # for i in range(1, len(lst)):\n    #     if lst[i - 1] > lst[i]:\n    #         is_sorted = False\n    #         break\n    # return is_sorted\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst2 = lst[:]\n    lst2.sort()\n    return lst == lst2\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Time - O(n)\n    # Space - O(n)\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return True\n    if len(lst) == 2:\n        return lst[0] <= lst[1]\n    if lst[0] == lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return is_sorted(lst[1:])\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    def isPrime(x):\n        if x <= 1:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x**0.5 + 1), 2):\n            if x % i == 0:\n                return False\n        return True\n    \n    def isIntersect(interval1, interval2):\n        return interval1[0] <= interval2[1] and interval1[1] >= interval2[0]\n    \n    def getIntersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    \n    if not isIntersect(interval1, interval2):\n        return \"NO\"\n    \n    return \"YES\" if isPrime(abs(interval1[1] - interval1[0])) else \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"YES\" if gcd(interval1[1] - interval1[0], interval2[1] - interval2[0]) == 1 else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # set the interval is a closed interval, otherwise no intersection\n    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n    if interval1_start > interval1_end or interval2_start > interval2_end:\n        return \"NO\"\n    return \"YES\" if (interval1_end - interval1_start) % (interval2_end - interval2_start) == 0 else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # a = interval1[0]\n    # b = interval1[1]\n    # c = interval2[0]\n    # d = interval2[1]\n    # if a < c or b > d:\n    #     return 'NO'\n    # if a <= c and b >= d:\n    #     return 'YES'\n    # if c <= a and d >= b:\n    #     return 'YES'\n    # if a == c and b == d:\n    #     return 'YES'\n    # return 'NO'\n    \n    # This is my solution, better than 90% of the solutions\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return 'NO'\n    if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n        return 'NO'\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return 'YES'\n    if interval1[0] == interval2[0] and interval1[1]!= interval2[1]:\n        return 'NO'\n    if interval1[0]!= interval2[0] and interval1[1] == interval2[1]:\n        return 'NO'\n    if interval1[0]!= interval2[0] and interval1[1]!= interval2[1]:\n        return 'NO'\n    \n    # It's not my solution, but I understand better\n    l1 = interval1[1] - interval1[0] + 1\n    l2 = interval2[1] - interval2[0] + 1\n    if l1 == l2:\n        return 'YES'\n    return 'NO'\n    "
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Approach 1: Naive Brute Force\n    # Time Complexity: O(n**2)\n    # n: number of intervals\n    # Space Complexity: O(1)\n    # n: number of intervals\n    # if the length of the intersection is a prime number, return \"YES\",\n    # otherwise, return \"NO\"\n    intersection = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    if intersection > 0 and is_prime(intersection):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if interval1[0] >= interval1[1]:\n        return 'NO'\n    elif interval2[0] >= interval2[1]:\n        return 'NO'\n    elif interval1[0] == interval1[1]:\n        return 'NO'\n    elif interval2[0] == interval2[1]:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"YES\" if is_prime(interval1[1] - interval1[0]) or is_prime(interval2[1] - interval2[0]) \\\n        else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if interval1[0] >= interval1[1] or interval2[0] >= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval1[1] and interval2[0] <= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if arr:\n        signs = [1, -1, 0]\n        return sum(x * y * z for x, y, z in zip(arr, signs, repeat(1)))\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if arr:\n        return sum(int(i) * (1 if i > 0 else -1) for i in arr)\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    # element-wise multiplication with * sign\n    return sum([1 if i > 0 else -1 if i < 0 else 0 for i in arr]) *\\\n        abs(reduce(lambda x, y: x * y, arr))\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pas"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if arr:\n        sign_sum = sum(\n            [abs(a) * (1 if a > 0 else -1) * (1 if a > 0 else -1)\n             for a in arr])\n        return sign_sum\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(int(x < 0) * abs(x) for x in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    result = 1\n    for elem in arr:\n        result *= abs(elem)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    mags = [abs(x) for x in arr]\n    return sum([x * y for x, y in zip(arr, mags)]) if arr else None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = 1\n    for a in arr:\n        res *= (abs(a) if a else 1)\n    return res if arr else None"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if arr:\n        mags = [abs(x) for x in arr]\n        prod_signs = reduce(mul, mags, 1)\n        return prod_signs if prod_signs > 0 else 0\n    else:\n        return None\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    Algorithm: Dijkstra's algorithm\n    Initialize all cells as INF\n    Add the starting cells\n    While there are unvisited cells:\n        Find the cell with smallest distance from the starting cells\n        If this cell is a starter cell,\n            it means we can reach this starter cell with the smallest distance\n            (no need to visit this starter cell)\n        Else (this cell is a neighbor of starter cell)\n            there is a path between starter cell and this cell, \n            so we add the starter cell to the result, and mark it as visited\n            Visit this cell\n    \"\"\"\n    # base cases\n    if k == 0:\n        return grid[0][0]\n    if k == 1:\n        return grid[0][0]\n    # initialize all cells as INF\n    rows = len(grid)\n    cols = len(grid[0])\n    result = [float('inf')] * k\n    visited = [[False] * cols for _ in range(rows)]\n    # add the starter cells\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                continue\n            result[0] = grid[row][col]\n            break\n    while True:\n        # find the starter cell with min distance\n        min_dist, starter_row, starter_col = float('inf'), None, None\n        for row in range(rows):\n            for col in range(cols):\n                if not visited[row][col] and grid[row][col]!= 0:\n                    if result[0] > grid[row][col]:\n                        result[0] = grid[row][col]\n                        starter_row = row\n                        starter_col = col\n                    elif result[0] == grid[row][col]:\n                        if row < starter_row or (row == starter_row and col < starter_col):\n                            starter_row = row\n                            starter_col = col\n        if starter_row is None:\n            return result\n        # if starter cell is starter, break\n        if starter_row == 0 and starter_col == 0:\n            break\n        # else: visit starter cell\n        visited[starter_row][starter_col] = True\n        # visit starter cell\n        for row in range(rows):\n            for col in range(cols):\n                if visited[row][col] and grid[row][col]!= 0:\n                    # calculate distance\n                    dist = abs(starter_row - row) + abs(starter_col - col)\n                    if dist < min_dist or min_dist == float('inf'):\n                        min_dist = dist\n                    if dist < result[min_dist]:\n                        result[min_dist] = grid[row][col]\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def isValid(row, col, grid):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # dp[i][j] is the min path on the grid with i, j as the start point\n    # O(k * n * n) time\n    # O(k * n * n) space\n    m, n = len(grid), len(grid[0])\n    dp = [[sys.maxsize for i in range(n)] for j in range(m)]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # O(n**3) time, O(1) space\n    def dfs(grid, i, j, k, visited, curr, path):\n        if k == 0:\n            return\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return\n        if visited[i][j]:\n            return\n        if i == len(grid)-1 and j == len(grid[0])-1:\n            if k == 1:\n                curr.append(grid[i][j])\n                return\n            else:\n                path.append(grid[i][j])\n                curr.append(path)\n                return\n        visited[i][j] = True\n        dfs(grid, i+1, j, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i-1, j, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i, j+1, k-1, visited, curr, path + [grid[i][j]])\n        dfs(grid, i, j-1, k-1, visited, curr, path + [grid[i][j]])\n        visited[i][j] = False\n    \n    curr = []\n    visited = [ [False] * len(grid[0]) for _ in range(len(grid)) ]\n    path = []\n    dfs(grid, 0, 0, k, visited, curr, path)\n    return curr\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    N = len(grid)\n    if k <= 0:\n        return []\n    elif N == 1:\n        if k == 1:\n            return grid[0]\n        else:\n            return []\n    \n    # Build graph\n    graph = defaultdict(lambda: [])\n    for i in range(N):\n        for j in range(N):\n            if i > 0:\n                graph[i].append(grid[i - 1][j])\n            if j > 0:\n                graph[i].append(grid[i][j - 1])\n            if i > 0 and j > 0:\n                graph[i].append(grid[i - 1][j - 1])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    m, n = len(grid), len(grid[0])\n    result = [1 for i in xrange(k)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if i == 0 and j == 0:\n                result = [grid[i][j]] + result\n            elif i == 0:\n                result = [grid[i][j]] + result\n            elif j == 0:\n                result = result + [grid[i][j]]\n            else:\n                if result[i - 1] < result[i] and grid[i - 1][j] < grid[i][j]:\n                    result[i] = result[i - 1] + grid[i][j]\n                elif result[i - 1] > result[i] and grid[i - 1][j] > grid[i][j]:\n                    result[i] = result[i - 1] + grid[i][j]\n                elif result[i - 1] < result[i] and grid[i - 1][j] > grid[i][j]:\n                    result[i] = result[i - 1] + grid[i][j]\n                elif result[i - 1] > result[i] and grid[i - 1][j] < grid[i][j]:\n                    result[i] = result[i - 1] + grid[i][j]\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    row_len, col_len = len(grid), len(grid[0])\n    # start from each cell\n    for row in range(row_len):\n        for col in range(col_len):\n            if row == 0 and col == 0:\n                continue\n            elif row == 0:\n                grid[row][col] += grid[row][col - 1]\n            elif col == 0:\n                grid[row][col] += grid[row - 1][col]\n            else:\n                grid[row][col] += min(grid[row - 1][col], grid[row][col - 1])\n    # we reach here when row == 0 and col == 0\n    # and we have a path of length k (i.e., one cell)\n    # we return the last cell's value\n    return grid[-1][-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if grid is None or len(grid) == 0:\n        return []\n    if k < 1:\n        return []\n    m, n = len(grid), len(grid[0])\n    if k == 1:\n        return [grid[x][y] for x in range(m) for y in range(n)]\n    if k == 2:\n        return [grid[x][y] for x in range(m) for y in range(n) if x == 0 or y == 0]\n    if k == 3:\n        return [grid[x][y] for x in range(m) for y in range(n) if x == 0 or y == 0 or x == m - 1 or y == n - 1]\n    if m * n < k:\n        return []\n    # grid = grid + [max(grid)] * (k - len(grid))\n    # m = len(grid)\n    # n = len(grid[0])\n    # if k < m * n:\n    #     return []\n    # if k == m * n:\n    #     return grid\n    # if k == 1:\n    #     return [grid[x][y] for x in range(m) for y in range(n)]\n    # if k == 2:\n    #     return [grid[x][y] for x in range(m) for y in range(n) if x == 0 or y == 0]\n    # if k == 3:\n    #     return [grid[x][y] for x in range(m) for y in range(n) if x == 0 or y == 0 or x == m - 1 or y == n - 1]\n    result = []\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    def dfs(i, j, k):\n        if i < 0 or j < 0 or i >= m or j >= n or visited[i][j]:\n            return\n        visited[i][j] = True\n        result.append(grid[i][j])\n        if k == 1:\n            return\n        for dx, dy in neighbors:\n            dfs(i + dx, j + dy, k - 1)\n        visited[i][j] = False\n    dfs(0, 0, k)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 2]\n        for i in range(n - 2):\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    nums = []\n    a, b, c = 0, 0, 1\n    while len(nums) < n:\n        nums.append(a)\n        a, b, c = b, c, a + b + c\n    return nums\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = [1, 3, 1]\n    if n < 3:\n        return l[:n + 1]\n    for _ in range(3, n + 1):\n        l.append(sum(l[-3:]))\n    return l"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    a = b = 1\n    c = 0\n    while len(result) < n + 1:\n        c = a + b + c\n        a = b\n        b = c\n        result.append(c)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"n must be a non-negative integer\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1,1]\n    if n == 2:\n        return [1,1,1]\n    else:\n        #First 2 are the base case\n        res = [1,1,1]\n        #The next n terms\n        for i in range(3,n+1):\n            if i % 2 == 0:\n                res.append(res[i-1] + res[i-2])\n            else:\n                res.append(res[i-1] + res[i-2] + res[i-3])\n        return res\n        \nif __name__ == \"__main__\":\n    print(tri(2))\n    print(tri(3))\n    print(tri(4))\n    print(tri(5))\n    print(tri(6)"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # s = [0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1680, 3136, \n    # 2187, 4592, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, \n    # 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, \n    # 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, \n    # 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, \n    # 20365011074, 32951280099, 59049891013, 8639000, 14930352, 24157817, 39088169, \n    # 63348266652, 1105453614964, 17711, 28657, 46368, 75025, 121393, 196418, \n    # 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, \n    # 14930352, 24157817, 39088169, 63348266652, 1105453614964, 17711, 28657, \n    # 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, \n    # 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63348266652, \n    # 1105453614964, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, \n    # 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, \n    # 39088169, 63348266652, 1105453614964, 17711, 28657, 46368, 75025, 121393, \n    # 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, \n    # 14930352, 24157817, 39088169, 63348266652, 1105453614964, 17711, 28657, \n    # 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, \n    # 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63348266652, \n    # 1105453614964, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, \n    # 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, \n    # 39088169, 63348266652, 1105453614964, 17711, 28657, 46368, 75025, 121393, \n    # 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, \n    # 14930352, 24157817, 39088169, 63348266652, 1105453614964, 17711, 28657, \n    # 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, \n    # 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63348266652, \n    # 1105453614964, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, \n    # 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, \n    # 3908"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    T = [0, 1, 1]\n    if n < 3:\n        return T[:n + 1]\n    for i in range(3, n + 1):\n        T.append(T[i - 1] + T[i - 2] + T[i - 3])\n    return T\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        t = [1, 3]\n        for i in range(n - 2):\n            t.append(t[i] + t[i + 1] + t[i + 2])\n        return t\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"\"\"\n    # Solution 1\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    res = [1]\n    for i in range(n-2):\n        res.append(res[-1] + res[-2] + res[-3])\n    res.append(1)\n    return res\n    \"\"\"\n    # Solution 2\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    res = [1, 1]\n    while len(res) < n:\n        res.append(sum(res[-3:]))\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 0:\n        return []\n    res = [1, 3, 3]\n    if n == 0:\n        return [1]\n    if n == 1:\n        return res\n    n -= 1\n    while n > 0:\n        res.append(res[-2] + res[-1] + res[-3])\n        n -= 1\n    return res\n    \ndef pisano(m):\n    \"\"\"Return m modulo pisano period. It is a period of the function pisano(m) = pisano(m + 1) + 1 for m >= 0.\n    For example:\n    pisano(0) = 1\n    pisano(3) = 4\n    pisano(7) = 8\n    pisano(10) = 60\n    \"\"\"\n    res = 1\n    mod = m % 60\n    for i in xrange(m):\n        res = (res * m + 1) % 60\n    return res\n    \ndef fibonacci(n):\n    \"\"\"Fibonacci sequence. It is a number sequence, in which each number is the sum of two\n    previous numbers. Fibonacci sequence is defined by recurrence:\n    f(0) = 0\n    f(1) = 1\n    f(n) = f(n - 1) + f(n - 2), for n > 1.\n    For example:\n    f(2) = 1\n    f(3) = 1 + 2 = 3\n    f(4) = 3 + 2 = 5\n    f(5) = 5 + 3 = 8\n    f(6) = 8 + 4 = 11\n    f(7) = 11 + 5 = 18\n    f(8) = 18 + 8 = 26\n    f(9) = 26 + 9 = 33\n    f(10) = 33 + 10 = 41\n    You are given a non-negative integer number n. You have to return the n-th number of \n    Fibonacci sequence.\n    Examples:\n    fibonacci(4) = 3\n    fibonacci(8) = 21\n    \"\"\"\n    if n < 0:\n        return []\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    res = [0, 1]\n    n -= 1\n    while n > 0:\n        res.append(res[-2] + res[-1])\n        n -= 1\n    return res\n    \ndef how_many(num, n):\n    \"\"\"There are n numbers in a row, each of them can be used once, how many numbers\n    you can use? The number n is given and you have to find out how many numbers in a row\n    can be used.\n    For example:\n    how_many(5, 5) = 10\n    how_many(5, 6) = 4\n    how_many(5, 7) = 6\n    how_many(5, 8) = 6\n    \"\"\"\n    if num == n:\n        return 1\n    if n > num:\n        return 0\n    return how_many(num, num + n) + 1\n    \ndef permutations(nums):\n    \"\"\"Return all possible permutations of given array of numbers.\n    For example:\n    permutations([1,2,3]) = [\n        [1, 2, 3],\n        [1, 3, 2],\n        [2, 1, 3],\n        [2, 3, 1],\n        [3, 1, 2],\n        [3, 2, 1]\n    ]\n    \"\"\"\n    res = [[]]\n    if len(nums) == 1:\n        return [nums]\n    for n in nums:\n        new = []\n        for r in res:\n            for i in xrange(len(r) + 1):\n                new.append(r[:i] + [n] + r[i:])\n        res = new\n    return res\n    \ndef is_palindrome(num):\n    \"\"\"Return true if num is palindrome, otherwise false.\n    For example:\n    is_palindrome(123) = True\n    is_palindrome(456) = False\n    \"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    s = str(num)\n    return s == s[::-1]\n    \ndef i"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return reduce(lambda x,y:x*y, filter(lambda x:x%2,map(int,str(n))))\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 0:\n        n = -n\n    r = 1\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % 2!= 0:\n            r *= int(str(n)[i])\n    return r\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    num = n\n    product = 1\n    while num > 0:\n        num, i = divmod(num, 10)\n        if i % 2 == 1:\n            product *= i\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, [int(x) for x in str(n) if int(x) % 2!= 0])\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    digits = []\n    count = 0\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n    for d in digits:\n        if d % 2 == 1:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, digits)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n and n%10 and 1 or 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    digits = 1\n    while n > 0:\n        digits *= n % 10\n        n //= 10\n    return digits\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nstr = str(n)\n    return int(''.join(filter(lambda x: int(x) % 2 == 1, nstr)))\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 10:\n        return n\n    else:\n        if n%2 == 0:\n            return 0\n        else:\n            digits = 1\n            for i in range(3, n, 2):\n                if n%i == 0:\n                    digits = 0\n            return digits\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_nested_helper(s):\n        bracket_stack = []\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    brackets = []\n    for char in string:\n        if char == '[' or char == ']':\n            brackets.append(char)\n        elif len(brackets) > 0 and char == brackets[-1]:\n            brackets.pop()\n        else:\n            return False\n    return len(brackets) == 0\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(string) < 3:\n        return False\n    while len(string) > 0:\n        if string[0]!= '[' or string[-1]!= ']':\n            return False\n        string = string[1:-1]\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    nested_stack = []\n    #create empty stack\n    #iterate through string:\n    for bracket in string:\n        if bracket == '[':\n            nested_stack.append(bracket)\n        elif bracket == ']' and len(nested_stack) > 0:\n            nested_stack.pop()\n        else:\n            return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    def is_valid(s):\n        left = 0\n        for c in s:\n            if c == '[':\n                left += 1\n            elif c == ']':\n                left -= 1\n            if left < 0:\n                return False\n        return left == 0\n    \n    if not is_valid(string):\n        return False\n    \n    string = list(string)\n    start = 0\n    end = len(string) - 1\n    while start < end:\n        if string[start] == string[end]:\n            if is_valid(string[start+1:end]):\n                return True\n        elif string[start] == ']' and string[end] == '[':\n            if is_valid(string[start+1:end]):\n                return True\n        elif string[start] == ']' and string[end] == ']':\n            if is_valid(string[start+1:end]):\n                return True\n        elif string[start] == '[' and string[end] == '[':\n            if is_valid(string[start+1:end]):\n                return True\n        start += 1\n        end -= 1\n    return False"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    string = list(string)\n    flag = False\n    for i in range(len(string)):\n        if string[i] == '[':\n            if i == 0 or string[i-1]!= ']':\n                flag = True\n            continue\n        if string[i] == ']' and flag == True:\n            return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    brackets = 0\n    for c in string:\n        if c == \"[\":\n            brackets += 1\n        elif c == \"]\":\n            brackets -= 1\n        if brackets < 0:\n            return False\n    return brackets == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return nested(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    open_ = 0\n    for char in string:\n        if char == '[':\n            open_ += 1\n        else:\n            open_ -= 1\n        if open_ < 0:\n            return False\n    return open_ == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(map(lambda x: int(ceil(x))**2, lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(x**2 for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum( [int(math.ceil(i**2)) for i in lst] )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = 0\n    for x in lst:\n        res += x**2\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    def sq(x):\n        return x**2\n    \n    return sum(sq(x) for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([(int(math.ceil(i))**2) for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(int(math.ceil(x))**2 for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # iterate each element, square the value, sum it up and return it\n    return sum( [int(math.ceil(i**2)) for i in lst] )\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum( (int(math.ceil(elem)) ** 2) for elem in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    for num in lst:\n        if num < 0:\n            num = num * -1\n        num = int(math.ceil(num))\n        sum += num * num\n    return sum\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(txt) < 2:\n        return False\n    else:\n        return txt[-1] not in '!.?', \"\".join(txt)\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if txt == \"\":\n        return False\n    return not (txt[-1].isalpha() and txt[-2].isalpha())\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return True if txt[-1].isalpha() and txt[-1].lower() not in \"abcdefghijklmnopqrstuvwxyz \" else False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \" \"\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(txt) == 0:\n        return False\n    elif len(txt) == 1:\n        return False\n    elif txt[-1].isalpha() == False:\n        return False\n    elif txt[-1] == \" \":\n        return True\n    elif txt[-1].isalpha() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if txt[-1] not in '.,':\n        return True\n    else:\n        return False\n    pass\n    \n    \ndef word_count(txt):\n    '''\n    Create a function that returns the number of words in a string.\n    A word is a group of characters separated by space.\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and txt[-1] not in (\"'\",'\"',\" \"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(txt)==0: return False\n    last_char=txt[-1]\n    if last_char.isalpha():\n        return True\n    elif last_char==\" \":\n        return check_if_last_char_is_a_letter(txt[:-1])\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if txt == \"\" or txt[-1].isalpha() or txt[-1].isnumeric():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import string\n    if txt[-1] not in string.ascii_letters:\n        return False\n    elif txt[-1] in string.ascii_letters:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            if d[arr[i]] < i - 1:\n                return i - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert all(0 <= e <= 10 ** 5 for e in arr)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    left = []\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            left.append(arr[i])\n    if len(left) == 0:\n        return -1\n    else:\n        return max(left)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    current = -1\n    arr.append(max(arr) + 1)\n    for i in range(0,len(arr)):\n        if arr[i] > arr[i-1]:\n            current = i\n    return current\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = len(arr)-1\n    while i > 0 and arr[i] <= arr[i-1]:\n        i -= 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_arr = -1\n    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            max_arr = arr[i+1]\n            max_index = i+1\n        else:\n            break\n    return max_index\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Create a new list with negative values sorted\n    negative_lst = [i for i in lst if i < 0]\n    negative_lst.sort()\n    # Create a new list with positive values sorted\n    positive_lst = [i for i in lst if i > 0]\n    positive_lst.sort()\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = [x for x in lst if x < 0]\n    lst = [x for x in lst if x > 0]\n    return (max(lst), min(lst)) if lst else (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pos = 0\n    neg = 0\n    for i in lst:\n        if i > 0:\n            pos = i\n        elif i < 0:\n            neg = i\n    if neg == 0 and pos == 0:\n        return None, None\n    elif neg > pos:\n        return None, pos\n    else:\n        return pos, neg\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    negatives = []\n    positives = []\n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        elif num > 0:\n            positives.append(num)\n    if negatives == []:\n        a = None\n    else:\n        a = max(negatives)\n    if positives == []:\n        b = None\n    else:\n        b = min(positives)\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = sorted(lst)\n    neg = None\n    pos = None\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            neg = lst[i]\n        elif lst[i] > 0:\n            pos = lst[i]\n    if neg!= None:\n        return (neg, None)\n    else:\n        return (None, pos)"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    int_set = set()\n    for i in lst:\n        int_set.add(i)\n    if not int_set:\n        return (None, None)\n    min_int = int_set.pop()\n    max_int = int_set.pop()\n    for i in int_set:\n        if i < min_int:\n            min_int = i\n        elif i > max_int:\n            max_int = i\n    return (max_int, min_int)"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0:\n            if max_neg == None:\n                max_neg = num\n            elif num > max_neg:\n                max_neg = num\n        elif num > 0:\n            if min_pos == None:\n                min_pos = num\n            elif num < min_pos:\n                min_pos = num\n    return (max_neg, min_pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    negatives = [int(n) for n in lst if int(n) < 0]\n    positives = [int(n) for n in lst if int(n) > 0]\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = float(a)\n    b = float(b)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, int) or isinstance(b, int):\n        return a if isinstance(a, int) else b\n    elif isinstance(a, float) or isinstance(b, float):\n        return a if isinstance(a, float) else b\n    elif isinstance(a, str) or isinstance(b, str):\n        return a if isinstance(a, str) else b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)):\n        return a if a > b else b\n    elif isinstance(b, (int, float)):\n        return b if a > b else a\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == b:\n        return None\n    elif type(a) == type(b):\n        return a if (type(a) == int or type(a) == float) and (type(b) == int or type(b) == float) else b\n    elif type(a) == str and type(b) == str:\n        return a if len(a) > len(b) else b\n    else:\n        return a if (type(a) == int or type(a) == float) and (type(b) == int or type(b) == float) else b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a > b:\n        return a\n    elif a == b:\n        return None\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    if type(a)!= type(b):\n        a = float(a) if type(a) == str else a\n        b = float(b) if type(b) == str else b\n        return a if a > b else b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    return None\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(i for i in range(4,n+1,2) if n-i%2==0) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([i for i in range(1,n,2) if i <= n-4]) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(range(n/2, n, 2)) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 1:\n        return False\n    n_list = []\n    for i in range(2, n/2+1, 2):\n        n_list.append(i)\n    sum_n = sum(n_list)\n    if n == sum_n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return n % 2 == 0 and sum(x for x in range(1, n//2) if x % 2 == 0) == n//2\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a, b, c, d = 0, 2, 4, 6\n    while n > a:\n        if n == a + b:\n            return True\n        elif n == a + c:\n            return True\n        elif n == a + d:\n            return True\n        a += 2\n        b += 2\n        c += 2\n        d += 2\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #assert n > 0\n    #if n % 2 == 0:\n    #    return False\n    #if n == 0:\n    #    return True\n    #return is_equal_to_sum_even(n-2)\n    #if n == 0:\n    #    return True\n    #return is_equal_to_sum_even(n-2) and n % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return True\n    for i in range(2, n):\n        if is_even(i) and is_even(n-i):\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if (n - 4) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return is_equal_to_sum(n, 4, 2, 1, 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO\n    # 1) Check if n is a positive integer\n    # 2) Check if n is 0\n    # 3) Return 1 if n = 0\n    # 4) Return n * special_factorial(n-1) if n > 0\n    if n == 0:\n        return 1\n    elif n > 0:\n        return n * special_factorial(n-1)\n    else:\n        return \"ERROR: Factorial for non-numbers\"\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 1 if n < 0 else n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def _factorial(n):\n        if n == 1:\n            return 1\n        else:\n            return n * _factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # My solution\n    \n    text = re.sub(r' +', '_', text)\n    if (text.count('_') > 2):\n        text = text.replace('_', '-')\n    \n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    text = text.replace(' ', '_')\n    if text[-1] =='':\n        text = text[:-1]\n    if len(text) > 2:\n        text = text.replace('_', '-')\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if text.count(\" \") == 1:\n        return text.replace(\" \",\"_\")\n    elif text.count(\" \") == 2:\n        return text.replace(\" \",\"-\")\n    else:\n        return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # your code here\n    text = re.sub(r'[ \\t]+', '_', text)\n    text = re.sub(r'\\s+', '-', text)\n    if len(re.findall(r'[_]+', text)) > 2:\n        text = re.sub(r'[_]+', '-', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_text = text\n    # Replace spaces\n    new_text = new_text.replace(' ', '_')\n    # Deal with consecutive spaces\n    new_text = new_text.replace('-', '_')\n    # Remove leading spaces\n    new_text = new_text.lstrip('_')\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if not text:\n        return None\n    text_list = text.split(\" \")\n    for i in range(len(text_list)):\n        text_list[i] = text_list[i].strip()\n        if len(text_list[i]) == 1:\n            text_list[i] = \"_\"+text_list[i]\n        elif len(text_list[i]) > 2:\n            text_list[i] = \"_\"+text_list[i].replace(\" \", \"-\")\n    return \" \".join(text_list)"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return re.sub(\" \"*2, '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    text = re.sub(r'\\s+', '_', text)\n    text = re.sub(r'\\_+', '-', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return re.sub(r'\\s', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    text = re.sub(r\"\\s+\", \"_\", text)\n    if re.search(r\"_+\", text):\n        text = re.sub(r\"_+\", \"_\", text)\n    return text\n    \ndef to_lowercase(text):\n    \"\"\"\n    Given a string text, return a lowercase version of it. \n    \n    to_lowercase(\"Example\") == \"example\"\n    to_lowercase(\"Example 1\") == \"example_1\"\n    to_lowercase(\" Example 2\") == \"example_2\"\n    \"\"\"\n    return text.lower()\n    \ndef to_uppercase(text):\n    \"\"\"\n    Given a string text, return an uppercase version of it. \n    \n    to_uppercase(\"Example\") == \"EXAMPLE\"\n    to_uppercase(\"Example 1\") == \"EXAMPLE_1\"\n    to_uppercase(\" Example 2\") == \"EXAMPLE_2\"\n    \"\"\"\n    return text.upper()\n    \ndef make_new_filename(filename, replacements):\n    \"\"\"\n    Given a filename, replace all the keys of replacements with the values. \n    For example, if we have filename=\"example.txt\", \n    replacements={'example': 'ex_ample', 'txt': 'txt'} \n    then return 'ex_ample.txt'\n    \n    make_new_filename('example.txt', {'example': 'ex_ample', 'txt': 'txt'}) == 'ex_ample.txt'\n    make_new_filename('example.txt', {'example': 'ex_ample', 'txt': 'txt'}) == 'ex_ample.txt'\n    make_new_filename('example.txt', {'example': 'ex_ample', 'txt': 'txt'}) == 'ex_ample.txt'\n    \"\"\"\n    for key, value in replacements.iteritems():\n        filename = re.sub(key, value, filename)\n    return filename\n    \ndef get_meta_data(filename):\n    \"\"\"\n    Given a filename, return a dictionary containing the metadata \n    of the file, or None if the file doesn't exist. \n    \n    Example:\n        get_meta_data(\"music.mp3\") == {'artist': 'Mozart', 'title': 'Symphony No. 1', 'year': '1872', 'genre': 'Classic'}\n    \"\"\"\n    try:\n        meta = mutagen.File(filename, easy=True)\n    except mutagen.MutagenError:\n        return None\n    else:\n        return {'artist': meta.get('artist', None), 'title': meta.get('title', None), 'year': meta.get('date', None), 'genre': meta.get('genre', None)}\n    \ndef fix_filename(filename):\n    \"\"\"\n    Given a filename, replace all spaces with underscores, and \n    make sure the file extension is included in the filename. \n    For example, if the filename is \" Example.txt\", \n    then return \"Example_txt\". \n    \n    fix_filename(\"Example.txt\") == \"Example_txt\"\n    fix_filename(\"Example.txt\") == \"Example_txt\"\n    fix_filename(\"Example.txt\") == \"Example_txt\"\n    \"\"\"\n    filename = fix_spaces(filename)\n    filename = filename.replace(' ', '_')\n    if re.search(\"\\..+$\", filename):\n        return filename\n    else:\n        return filename + \".mp3\"\n    \ndef make_directory(directory):\n    \"\"\"\n    Given a directory, create that directory if it doesn't exist. \n    \n    Example:\n        make_directory(\"example\") == None\n        make_directory(\"example/ex_ample\") == None\n        make_directory(\"example/ex_ample/\") == None\n        make_directory(\"example/ex_ample/\") == \"example/ex_ample/\"\n        make_directory(\"example/ex_ample/\") == \"example/ex_ample/\"\n    \"\"\"\n    if os.path.exists(directory):\n        return None\n    else:\n        os.makedirs(directory)\n        return directory\n    \ndef move_files(files, destination):\n    \"\"\"\n    Given a list of files, move each file into the destination folder. \n    \n    Example:\n        move_files(['test.txt', 'tes"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    file_name_pattern = re.compile(r'\\d|\\.|\\s|^[a-zA-Z]+[a-zA-Z]+\\.?[a-zA-Z]+')\n    if file_name_pattern.search(file_name) is not None:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 'Yes' if re.search(r'[0-9]+', file_name) and re.search(r'\\.+', file_name) and re.search(r'^[a-zA-Z]+', file_name) and re.search(r'[a-zA-Z]+\\.[txt|exe|dll]', file_name) else 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"Yes\" if re.match(r\"^[a-zA-Z][a-zA-Z0-9]?\\.?[a-zA-Z0-9]+\\.[a-zA-Z][a-zA-Z0-9]+$\", file_name) and len(re.findall(r\"\\d\", file_name)) == 0 and file_name.count(\".\") == 1 and re.match(r\"^[a-zA-Z]+[a-zA-Z0-9]+\\.[a-zA-Z][a-zA-Z0-9]+$\", file_name) and len(re.findall(r\"[a-zA-Z]+[a-zA-Z0-9]+\\.[a-zA-Z][a-zA-Z0-9]+\", file_name)) == 2 and (file_name.endswith(\"exe\") or file_name.endswith(\"dll\")) else \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def file_name_check_one(file_name):\n        if len(file_name) > 3:\n            return 'No'\n        if file_name.find('.') == -1:\n            return 'No'\n        if file_name[0].lower() < 'a' or file_name[0].lower() > 'z':\n            return 'No'\n        if file_name[1:].find('.') == -1:\n            return 'No'\n        if file_name[1:].find('txt') == -1 and file_name[1:].find('exe') == -1 and file_name[1:].find('dll') == -1:\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if re.search(r'[^a-zA-Z0-9]', file_name) or len(file_name) > 100:\n        return 'No'\n    dot_position = file_name.rfind('.')\n    if dot_position == -1 or file_name[:dot_position].strip() == '' or file_name[dot_position + 1:].strip() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import re\n    valid_file_name = 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return 'Yes' if re.search('[0-9]{3}', file_name) and file_name.find('.') == file_name.rfind('.') - 1 and re.search('[a-zA-Z]+', file_name) and re.search('[txt,exe,dll]', file_name) else 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"\"\"\n    # This solution was the first to come to mind.\n    # It works but it uses a lot of memory, which is inefficient.\n    # To solve this, we can instead use the first-order theorem.\n    # The first-order theorem states that if you take a variable, take the derivative, \n    # you get the rate of change. For example, if the function f(x) = x^2, the derivative\n    # of f(x) with respect to x is 2x. Hence, we can take the derivative of a function\n    # f(x) = x^2:\n    # df(x) = 2x\n    # (1) df(x) = 2x\n    # (2) df(x) = 4x\n    # (3) df(x) = 8x\n    # (4) df(x) = 16x\n    # (5) df(x) = 16x\n    # (6) df(x) = 16x\n    # (7) df(x) = 16x\n    # (8) df(x) = 16x\n    # (9) df(x) = 16x\n    # (10) df(x) = 16x\n    # (11) df(x) = 16x\n    # (12) df(x) = 16x\n    # (13) df(x) = 16x\n    # (14) df(x) = 16x\n    # (15) df(x) = 16x\n    # (16) df(x) = 16x\n    # (17) df(x) = 16x\n    # (18) df(x) = 16x\n    # (19) df(x) = 16x\n    # (20) df(x) = 16x\n    # (21) df(x) = 16x\n    # (22) df(x) = 16x\n    # (23) df(x) = 16x\n    # (24) df(x) = 16x\n    # (25) df(x) = 16x\n    # (26) df(x) = 16x\n    # (27) df(x) = 16x\n    # (28) df(x) = 16x\n    # (29) df(x) = 16x\n    # (30) df(x) = 16x\n    # (31) df(x) = 16x\n    # (32) df(x) = 16x\n    # (33) df(x) = 16x\n    # (34) df(x) = 16x\n    # (35) df(x) = 16x\n    # (36) df(x) = 16x\n    # (37) df(x) = 16x\n    # (38) df(x) = 16x\n    # (39) df(x) = 16x\n    # (40) df(x) = 16x\n    # (41) df(x) = 16x\n    # (42) df(x) = 16x\n    # (43) df(x) = 16x\n    # (44) df(x) = 16x\n    # (45) df(x) = 16x\n    # (46) df(x) = 16x\n    # (47) df(x) = 16x\n    # (48) df(x) = 16x\n    # (49) df(x) = 16x\n    # (50) df(x) = 16x\n    # (51) df(x) = 16x\n    # (52) df(x) = 16x\n    # (53) df(x) = 16x\n    # (54) df(x) = 16x\n    # (55) df(x) = 16x\n    # (56) df(x) = 16x\n    # (57) df(x) = 16x\n    # (58) df(x) = 16x\n    # (59) df(x) = 16x\n    # (60) df(x) = 16x\n    # (61) df(x) = 16x\n    # (62) df(x) = 16x\n    # (63) df(x) = 16x\n    # (64) df(x) = 16x\n    # (65) df(x) = 16x\n    # (66) df(x) = 16x\n    # (67) df(x) = 16x\n    # (68) df"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 'Yes' if re.match(\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}[.][txt|exe|dll]$\", file_name) else 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        total = 0\n        for i, num in enumerate(lst):\n            if i % 3 == 0:\n                if i % 4 == 0:\n                    total += num * num\n                else:\n                    total += num\n            else:\n                total += num\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # pass\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i]**2\n        if i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i]**3\n    total = sum(lst)\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([i**2 if i%3==0 else i**3 for i in lst])\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0 and i % 4!= 0:\n            res += e ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            res += e ** 3\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if (i % 4 == 0) and (i % 3 == 0):\n            res += lst[i] ** 3\n        elif (i % 4 == 0) and (i % 3!= 0):\n            res += lst[i] ** 2\n        else:\n            res += lst[i]\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if (i%3 == 0 and i%4!= 0):\n            res += lst[i]*lst[i]\n        elif (i%4 == 0):\n            res += lst[i]*lst[i]*lst[i]\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    summation = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) and (i % 4!= 0):\n            summation += lst[i]**2\n        elif (i % 4 == 0) and (i % 3!= 0):\n            summation += lst[i]**3\n        else:\n            summation += lst[i]\n    return summation\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return sum([x**2 if (i % 3 == 0 or i % 4 == 0) else x for i, x in enumerate(lst)])\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for num in lst:\n        if num % 3 == 0:\n            if num % 4!= 0:\n                num *= num\n        if num % 4 == 0:\n            if num % 3!= 0:\n                num = num * num\n        result += num\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_lst = []\n    for idx,item in enumerate(lst):\n        if not idx%3 and not idx%4:\n            new_lst.append(item**2)\n        else:\n            new_lst.append(item)\n    return sum(new_lst)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join([x for x in sentence.split(' ') if len(x) > 1 and is_prime(len(x))])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    words = sentence.split(\" \")\n    primes = []\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([x for x in sentence.split() if len(x) > 2 and is_prime(len(x))])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # we can use math to get the prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n      103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\n      223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\n      347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,\n      463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pas"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return''.join(filter(lambda x: len(x) == len(set(x)), sentence.split(' ')))"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    words = sentence.split()\n    new_words = \"\"\n    for word in words:\n        new_words += word + \" \"\n    return new_words[:-1]\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    \n    result = ''\n    for word in words:\n        if is_prime_number(len(word)):\n            result += word +''\n    return result[:-1]\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x == simplify_helper(x, n)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # Fetch the numerator and denominator values from the string\n    num_string, den_string = x.split('/')\n    num_string, den_string = int(num_string), int(den_string)\n    \n    # Calculate the numerator and denominator\n    num, den = num_string * n, den_string * n\n    \n    # If the numerator and denominator of the simplified fraction match, return True\n    if num % den == 0:\n        return True\n    \n    # Else, return False\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"\"\"\n    To solve this problem, we can use the recursion algorithm, but we have to figure out the recursion for\n    the base case. It is easy to see that x will always be the numerator of the fraction, and n will always be\n    the denominator. The algorithm will eventually run into an endless recursion, because the denominator\n    will eventually go to zero. As such, we will have to return a boolean based on whether x or n is 0.\n    \"\"\"\n    if n == \"0\":\n        return True\n    elif x == \"0\":\n        return False\n    elif n == \"1\":\n        return True\n    elif x == \"1\":\n        return True\n    elif x == n:\n        return True\n    elif x == \"-\" + n:\n        return False\n    elif n == \"-\" + x:\n        return True\n    else:\n        return simplify(x, int(n) - int(x))\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not n:\n        return False\n    a, b = x.split('/')\n    a, b = int(a), int(b)\n    a = a * n\n    b = b * n\n    if a % b == 0:\n        return True\n    return False"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = x.split(\"/\")\n    b = n.split(\"/\")\n    if int(b[1]) == 0:\n        return False\n    else:\n        a = int(a[0]) / int(b[0])\n        b = int(b[1]) / int(b[0])\n    if a == b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return eval(x) == int(eval(x))\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == \"1\":\n        return True\n    else:\n        num_str, denom_str = x.split(\"/\")\n        num_int, denom_int = int(num_str), int(denom_str)\n        return simplify(num_int * n, denom_int)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def divide(x, y):\n        return float(x) / float(y)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    nums = sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n    return nums"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum([int(c) for c in str(x)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num_dict = {}\n    for num in nums:\n        num_dict[num] = sum(int(digit) for digit in str(num))\n    return sorted(nums, key = lambda num: (num_dict[num], num))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len([n for n in nums if n > 10 and ((n%10==1) or (n%10==3) or (n%10==5) or (n%10==7) or (n%10==9))])\n    \ndef almostIncreasingSequence(sequence):\n    \"\"\"Given a sequence of integers as input, write a function that returns True \n    if the sequence is almost increasing and False otherwise.\n    \n    For example:\n    almostIncreasingSequence([5, 4, 3, 2, 1, -1]) => False\n    almostIncreasingSequence([5, 4, 3, 2, 1, -2]) => True\n    almostIncreasingSequence([5, 4, 3, 2, 1]) => True\n    almostIncreasingSequence([1, 3, 2, 5]) => True\n    almostIncreasingSequence([1, 3, 2, 5, -1]) => True\n    almostIncreasingSequence([1, 3, 2, 5, -2]) => False\n    almostIncreasingSequence([1, 3, 2, 5, -3]) => False\n    almostIncreasingSequence([1, 3, 2]) => False\n    almostIncreasingSequence([-1, -2, -3, -4]) => False\n    almostIncreasingSequence([1, 3, 2, -3]) => False\n    \"\"\"\n    return (sorted(sequence) == sequence) or (sequence[1:] == sequence[:-1])\n    \ndef wordPattern(pattern, string):\n    \"\"\"Given a pattern and a string, write a function that returns True if the \n    pattern can be found in the string and False otherwise.\n    \n    For example:\n    wordPattern('(abc)', 'abc def') => True\n    wordPattern('(abc)', 'abc abc') => False\n    wordPattern('(abc)', 'abcd') => False\n    wordPattern('(abc)', 'abc abc abcd') => True\n    wordPattern('(abc)', 'abc abcd abcd') => False\n    wordPattern('(abc)', 'abc ABC') => False\n    wordPattern('(abc)', 'abc ABC abcd') => False\n    wordPattern('(abc)', 'ABc abcd') => True\n    \"\"\"\n    return pattern == pattern[::-1] and len(set(zip(pattern, string.split(' ')))) == len(set(string.split(' ')))\n    \ndef arrayNesting(array):\n    \"\"\"Write a function that takes an array of integers as input and returns the \n    largest value in the array that can be formed by concatenating the same \n    number of integers together.\n    \n    For example:\n    arrayNesting([5, 4, 3, 2, 1]) => 15\n    arrayNesting([5, 4, 3, 2, 1, 1]) => 21\n    arrayNesting([1, 2, 3]) => 6\n    arrayNesting([5, 4, 3, 2, 1, 2]) => 6\n    arrayNesting([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) => 45\n    \"\"\"\n    def helper(subarr, depth):\n        if depth == len(array) / 2:\n            return 0\n        if len(subarr) == len(array):\n            return 0\n        return max(helper(subarr + [array[i]], depth + 1) for i in xrange(len(array)))\n    \n    return helper([], 0)\n    \ndef minimumMoves(grid):\n    \"\"\"Write a function that takes a grid of MxN dimension as input and \n    returns the number of moves the frog must make to get from the start \n    to the goal.\n    \n    The grid is a 2D array where 0 is a lake and 1 is a land that the frog \n    can traverse. For example:\n    minimumMoves([\n    [0, 0, 0, 0, 0, 0, 0, 0], \n    [0, 0, 0, 0, 0, 0, 0, 0], \n    [0, 0, 0, 0, 0, 0, 0, 0], \n    [0, 0, 0, 0, 0, 0, 0, 0], \n    [0, 0, 0, 0, 0, 0, 0, 0], \n    [0, 0, 0, 0, 0, 0, 0, 0], \n    [0, 0, 0"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for n in nums if n > 10 and (n % 10) % 2 == 1 and (n // 10) % 2 == 1)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(x > 10 and (x % 10) // 2 == 1 for x in nums)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (((num % 10) // 10) % 2!= 0) and ((num // 10) % 10) % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10 % 2 == 0 and num % 10 % 2 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([n for n in nums if n > 10 and (int(str(n)[0])%2 == 1 and int(str(n)[-1])%2 == 1)])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([n for n in nums if n > 10 and (n % 10)%2 == 1 and (n//10)%2 == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([1 for num in nums if num>10 and (num % 10 + num // 10) % 2 == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def oddDigit(num):\n        return (num % 10) % 2 == 1\n    def check(num):\n        return num > 10 and oddDigit(num)\n    return sum(check(num) for num in nums)\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i < j < k and (i * i + j * j + k * k) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = [i * i - i + 1 for i in xrange(n)]\n    return sum(1 for i in xrange(n - 1) for j in xrange(i + 1, n) for k in xrange(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_triples = 0\n    a = [i * i - i + 1 for i in range(1, n)]\n    for i in range(1, n):\n        for j in range(i):\n            if (a[i] + a[j] + a[n - 1]) % 3 == 0:\n                max_triples += 1\n    return max_triples\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def is_multiple_of_three(num):\n        return num % 3 == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([i for i in range(n) if (i * i - i + 1) % 3 == 0])"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = [i*i - i + 1 for i in range(n)]\n    return sum([1 for i in range(n-1) for j in range(i+1, n) if (a[i] + a[j] + a[i]) % 3 == 0])\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of 3.\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if (a[i] + a[j] + a[i]) % 3 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum((i*i - i + 1)*(n - i) // 6 for i in range(n))"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return sum(i*i - i + 1 for i in range(1, n+1))\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    a = [i * i - i + 1 for i in range(1, n+1)]\n    return sum(a[i] % 3 == 0 for i in range(1, n))"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # get planet data\n    planets = data.get_planets()\n    \n    # initialize planet variables\n    planet1_orbit = planets[planet1][\"orbit\"]\n    planet2_orbit = planets[planet2][\"orbit\"]\n    planet1_orbit_index = planets[planet1][\"orbit_index\"]\n    planet2_orbit_index = planets[planet2][\"orbit_index\"]\n    \n    # create list of planets in between planet1 and planet2\n    planets_between = []\n    \n    for planet in planets:\n        if planets[planet][\"orbit\"] > planet1_orbit and planets[planet][\"orbit\"] < planet2_orbit:\n            planets_between.append(planet)\n    \n    # sort planets by orbit index\n    planets_between.sort(key=lambda planet: planets[planet][\"orbit_index\"])\n    \n    return tuple(planets_between)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Earth\")\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Mars\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Jupiter\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Neptune\")\n    elif planet1 == \"Neptune\" or planet2 == \"Neptune\":\n        return (\"Pluto\")\n    else:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        # See what are the shortest distance from planet1 to planet2, \n        # and which planet is the closest to the sun\n        distances = [bf_distance(planet1, planet2), bf_distance(planet2, \"Sun\")]\n        min_dist, planet_of_min_dist = min(zip(distances, planets), key=lambda pair: pair[0])\n        if planet1 == planet2:\n            return (planet1,)\n        else:\n            if planet_of_min_dist == planet1:\n                return tuple([planet for planet in planets if planet!= planet1])\n            else:\n                return tuple([planet for planet in planets if planet!= planet2])"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # get the position of planet1 and planet2 from their names\n    planet1_dict = {\n        'Jupiter': 0,\n        'Venus': 1,\n        'Mercury': 2,\n        'Neptune': 3,\n        'Earth': 4,\n        'Mars': 5,\n        'Saturn': 6,\n        'Uranus': 7\n    }\n    planet2_dict = {\n        'Jupiter': 0,\n        'Venus': 1,\n        'Mercury': 2,\n        'Neptune': 3,\n        'Earth': 4,\n        'Mars': 5,\n        'Saturn': 6,\n        'Uranus': 7\n    }\n    planet1_orbit = planet1_dict[planet1]\n    planet2_orbit = planet2_dict[planet2]\n    # check if planet1 and planet2 are valid names\n    if planet1 not in planet_orbit_dict.keys() or planet2 not in planet_orbit_dict.keys():\n        return ()\n    planet1_orbit_dict = planet_orbit_dict[planet1]\n    planet2_orbit_dict = planet_orbit_dict[planet2]\n    # get the planet indexes of planet1 and planet2\n    planet1_orbit_index = planet1_orbit_dict.keys()\n    planet2_orbit_index = planet2_orbit_dict.keys()\n    # get the orbit index of planet1 and planet2\n    planet1_orbit_index = planet1_orbit_dict.values()\n    planet2_orbit_index = planet2_orbit_dict.values()\n    # make a list of planets between planet1 and planet2\n    planet_list = planet1_orbit_index + planet2_orbit_index\n    planet_list = sorted(list(set(planet_list)))\n    planet_list = [planet1_orbit_dict[i] for i in planet_list]\n    planet_list = [planet2_orbit_dict[i] for i in planet_list]\n    # return the list of planets\n    return tuple(planet_list)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    dict_planet = {}\n    \n    #Making the dictionary planet\n    for i in planets:\n        dict_planet[i] = distance(i, planet1)\n    \n    #Ordering the dictionary planet\n    ordered_planet = sorted(dict_planet.items(), key = lambda x:x[1])\n    \n    #Checking which planet is lower and storing it\n    for i in ordered_planet:\n        if distance(i[0], planet2) < distance(planet1, planet2):\n            planet1 = i[0]\n    \n    #Checking which planet is higher and storing it\n    for i in ordered_planet:\n        if distance(i[0], planet2) > distance(planet1, planet2):\n            planet2 = i[0]\n    \n    #Checking if the planets are on the same orbit\n    if planet2 == planet1:\n        return planet1\n    else:\n        return (planet1, planet2)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    planet_positions = [\n        (0, 0, planets.index(planet1)),\n        (0, 1, planets.index(planet1)),\n        (0, 2, planets.index(planet1)),\n        (1, 0, planets.index(planet2)),\n        (1, 1, planets.index(planet2)),\n        (1, 2, planets.index(planet2)),\n        (2, 0, planets.index(planet1)),\n        (2, 1, planets.index(planet1)),\n        (2, 2, planets.index(planet1)),\n        ]\n    return tuple(planets[x[2]] for x in sorted(planet_positions, key=lambda x: x[0]))\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    else:\n        return tuple([x for x in planets if (x!= planet1 and x!= planet2) and (x > planet1 and x < planet2)])\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    def bf_rec(planet1, planet2, result):\n        if planet1 not in planets:\n            return []\n        elif planet2 not in planets:\n            return []\n        elif planet1 == planet2:\n            return result\n        else:\n            nearby = []\n            for planet in planets:\n                if planet in result:\n                    continue\n                elif planet < planet1:\n                    nearby.append(planet)\n                else:\n                    if planet > planet2:\n                        nearby.append(planet)\n                    else:\n                        if (planet-planet1) % 3 == 0:\n                            nearby.append(planet)\n            nearby.sort()\n            return nearby + result\n    \n    planets = \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split()\n    result = []\n    return bf_rec(planet1, planet2, result)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # return sorted(lst, key=len)\n    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # This is a tuple which is the same as a list.\n    # The first part of the tuple is a list, and the second part is a tuple.\n    return sorted(((s for s in lst if len(s) % 2 == 0), tuple(sorted(lst))))[0]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted([x for x in lst if len(x)%2==0], key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            res.append(word)\n    res.sort(key=len)\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    length = len(lst)\n    lst = sorted(lst, key = len)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(filter(lambda x: len(x)%2==0, lst))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pas"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # sort by length of words\n    lst.sort(key=len)\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if is_prime(n):\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0 and n > 2:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_prime(n):\n        \"\"\"A simple function to check if a number is a prime.\n        \"\"\"\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x if n % 2 == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return None\n    elif n % 2 == 0:\n        return x_or_y(n-1, x, y)\n    else:\n        return x_or_y(n-1, y, x)\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in lst:\n        if isinstance(i, int):\n            if i % 2!= 0:\n                total += i**2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and (num % 2 == 1):\n            total += (num * num)\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(num * num for num in lst if num % 2)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    for l in lst:\n        if l >= 0 and isinstance(l, int):\n            total += l * l\n    return total\n    \ndef double_the_difference_recursive(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_recursive([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_recursive([-1, -2, 0]) == 0\n    double_the_difference_recursive([9, -2]) == 81\n    double_the_difference_recursive([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    return lst[0] * lst[0] + double_the_difference_recursive(lst[1:])\n    \ndef test_double_the_difference_recursive():\n    assert double_the_difference_recursive([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10\n    assert double_the_difference_recursive([-1, -2, 0]) == 0\n    assert double_the_difference_recursive([9, -2]) == 81\n    assert double_the_difference_recursive([0]) == 0\n    assert double_the_difference_recursive([1, 3, 2, 0, 1]) == 1 + 9 + 0 + 0 + 1 + 9 + 0 + 0 + 1 == 22\n    assert double_the_difference_recursive([]) == 0\n    assert double_the_difference_recursive([-1, -2, -3]) == 0\n    assert double_the_difference_recursive([1.5, 2.5, 3.5]) == 1.5 + 4.5 + 9.5 + 16.5 == 42.5\n    assert double_the_difference_recursive([0.5, 1.5, 2.5, 3.5]) == 0.5 + 1.5 + 4.5 + 9.5 + 16.5 == 22.5\n    assert double_the_difference_recursive([-0.5, -1.5, -2.5, -3.5]) == 0.5 + 1.5 + 4.5 + 9.5 + 16.5 == 22.5\n    \ndef double_the_difference_iterative(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_iterative([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_iterative([-1, -2, 0]) == 0\n    double_the_difference_iterative([9, -2]) == 81\n    double_the_difference_iterative([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    odds = []\n    total = 0\n    for l in lst:\n        if l >= 0 and isinstance(l, int):\n            total += l * l\n            if l % 2 == 1:\n                odds.append(l)\n    return total + double_the_difference_iterative(odds)\n    \ndef test_double_the_difference_iterative():\n    assert double_the_difference_iterative([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10\n    assert double_the_difference_iterative([-1, -2, 0]) == 0\n    assert double_the_difference_iterative([9, -2]) == 81\n    assert double_the_difference_iterative([0]) == 0\n    assert double_the_difference_iterative([1, 3, 2, 0, 1]) == 1 + 9 + 0 + 0 + 1 + 9 + 0 + 0 + 1 == 22\n    assert double_the_difference_iterative([]) == 0\n    assert double_the_difference_iterative([-1, -2"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(x**2 for x in lst if x % 2!= 0)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst:\n        return 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = 0\n    for elem in lst:\n        if elem > 0 and isinstance(elem,int):\n            result += elem*elem\n    return result\n    \n    \ndef is_palindrome(string):\n    '''\n    Given a string, return true if it is a palindrome.\n    Ignore whitespace and case.\n    '''\n    if not isinstance(string, str):\n        return False\n    elif string == string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_anagram(s1,s2):\n    '''\n    Given two strings, check to see if they are anagrams. An anagram is when the two strings can be written using the same letters, \n    ignoring the order of the letters.\n    '''\n    if len(s1) == len(s2):\n        if sorted(s1.replace(' ','')) == sorted(s2.replace(' ','')):\n            return True\n    return False\n    \n    \ndef count_words(string):\n    '''\n    Given a string, return the number of words in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return 0\n    return len(string.split(' '))\n    \n    \ndef count_letters(string):\n    '''\n    Given a string, return the number of letters in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return 0\n    return len(string.replace(' ',''))\n    \n    \ndef count_vowels(string):\n    '''\n    Given a string, return the number of vowels in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return 0\n    vowels = 'aeiou'\n    return len([char for char in string.lower() if char in vowels])\n    \n    \ndef count_consonants(string):\n    '''\n    Given a string, return the number of consonants in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return 0\n    consonants = 'bcdfghjklmnpqrstvwxz'\n    return len([char for char in string.lower() if char in consonants])\n    \n    \ndef count_numbers(string):\n    '''\n    Given a string, return the number of numbers in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return 0\n    numbers = '0123456789'\n    return len([char for char in string.lower() if char in numbers])\n    \n    \ndef count_unique_chars(string):\n    '''\n    Given a string, return the number of unique characters in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return 0\n    return len(set(string.lower()))\n    \n    \ndef last_char(string):\n    '''\n    Given a string, return the last character in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return ''\n    return string[-1]\n    \n    \ndef first_char(string):\n    '''\n    Given a string, return the first character in the string. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return ''\n    return string[0]\n    \n    \ndef str_reverse(string):\n    '''\n    Given a string, return the string in reverse order. Ignore single character words and any leading or trailing spaces.\n    '''\n    if not isinstance(string, str):\n        return ''\n    return string[::-1]\n    \n    \ndef str_strip(string):\n    '''\n    Given a string, return a copy of the string with the leading and trailing spaces removed.\n    '''\n    if not isinstance(string, str):\n        return ''\n    return string.strip()\n    \n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i%2!=0])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not lst:\n        return 0\n    else:\n        return sum([(x*x) for x in lst if x > 0 and x % 2 == 1])\n        \n        "
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    total = 0\n    for x in lst:\n        if x < 0 or isinstance(x, int):\n            continue\n        total += (x*x)\n    return total\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    \n    # check that the lengths of the arrays match\n    if len(guess)!=len(game):\n        print 'lengths of arrays do not match'\n        return []\n    \n    \n    # create a list of the differences between the guesses and the scores\n    diff=[]\n    for i in range(len(guess)):\n        diff.append(guess[i]-game[i])\n    \n    # return that list\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    compared = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            compared.append(0)\n        else:\n            compared.append(abs(guess[i] - game[i]))\n    return compared\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n    \n    \ndef superReducedString(s):\n    \"\"\"Reduce a string to a lowercase-only string with no consecutive letters\n    being repeated.\n    \n    superReducedString('aa') -> 'a'\n    superReducedString('aaab') -> 'ab'\n    superReducedString('aab') -> 'ab'\n    \"\"\"\n    result = []\n    for l in s:\n        if len(result) == 0:\n            result.append(l)\n        elif l == result[-1]:\n            result.pop()\n        else:\n            result.append(l)\n    return ''.join(result)\n    \n    \ndef insertionSort(arr):\n    \"\"\"Given an array of numbers, sort them in non-decreasing order.\n    \n    insertionSort([1,2,4,3]) -> [1,2,3,4]\n    insertionSort([]) -> []\n    insertionSort([5,4,3,2,1]) -> [1,2,3,4,5]\n    \"\"\"\n    for i in range(len(arr)):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            arr[j],arr[j-1] = arr[j-1],arr[j]\n            j -= 1\n    return arr\n    \n    \ndef firstUniqChar(s):\n    \"\"\"Given a string, find the first non-repeating character in it and return its index.\n    If it doesn't exist, return -1.\n    \n    firstUniqChar('leetcode') -> 0\n    firstUniqChar('loveleetcode') -> 2\n    firstUniqChar('aabb') -> -1\n    \"\"\"\n    for i,c in enumerate(s):\n        if c not in s[i+1:]:\n            return i\n    return -1\n    \n    \ndef isMonotonic(array):\n    \"\"\"Given an array of integers, determine whether it is monotonic or not.\n    An array is said to be monotonic if the entries, from left to right, are either\n    nondecreasing or nonincreasing.\n    \n    isMonotonic([1,2,3,4,5]) -> True\n    isMonotonic([1,1,1]) -> False\n    isMonotonic([1,1,1,1]) -> False\n    isMonotonic([1,2,3]) -> True\n    \"\"\"\n    for i in range(1,len(array)):\n        if array[i] > array[i-1]:\n            return False\n    return True\n    \n    \ndef minJumps(array):\n    \"\"\"Given an array of integers, find the minimum number of jumps required to reach\n    the last index from the start.\n    \n    minJumps([0,2,2,0,1,1,1,1,0,1,1,0]) -> 3\n    minJumps([0,1,1,1,1,2]) -> 3\n    minJumps([0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    diff = 0\n    for i in range(len(guess)):\n        diff += abs(guess[i] - game[i])\n    return diff\n    \n    # better\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    \"\"\"\n    result = [0] * len(guess)\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            result[i] = 0\n        else:\n            result[i] = abs(guess[i]-game[i])\n    return result\n    \"\"\"\n    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    results = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            results.append(0)\n        else:\n            results.append(abs(guess[i]-game[i]))\n    return results\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [guess[i] - game[i] if guess[i] - game[i]!= 0 else abs(guess[i] - game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_extensions = sorted(extensions, key=lambda x: x[:x.index('.')])\n    strength = -1\n    for ext in sorted_extensions:\n        ext_name = ext[ext.index('.') + 1:]\n        ext_strength = len(ext_name) - sum([1 for c in ext_name if c.isupper()]) + sum([1 for c in ext_name if c.islower()])\n        if strength == -1 or strength < ext_strength:\n            strength = ext_strength\n            strongest_extension = ext\n    return class_name + \".\" + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    class_caps = [c for c in class_name if c.isupper()]\n    class_sm = [c for c in class_name if c.islower()]\n    extension_caps = [e for e in extensions if e.isupper()]\n    extension_sm = [e for e in extensions if e.islower()]\n    class_strength = sum(i > j for i, j in zip(class_caps, class_sm)) - sum(i < j for i, j in zip(class_caps, class_sm))\n    extension_strength = sum(i > j for i, j in zip(extension_caps, extension_sm)) - sum(i < j for i, j in zip(extension_caps, extension_sm))\n    if extension_strength > class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n    elif extension_strength < class_strength:\n        return \"{0}.{1}\".format(class_name, extensions[-1])\n    else:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    class_name = class_name.strip().split('.')\n    extensions = [extension.strip().lower() for extension in extensions]\n    strength = 0\n    for extension in extensions:\n        extension_name = extension.split('.')\n        uppercase = 0\n        for letter in extension_name:\n            if letter.isupper():\n                uppercase += 1\n        lowercase = 0\n        for letter in extension_name:\n            if letter.islower():\n                lowercase += 1\n        strength = float(uppercase - lowercase) / len(extension_name)\n        if strength > strength:\n            strongest_extension = '.'.join(class_name + extension_name)\n            return strongest_extension\n    return '.'.join(class_name + extensions[0].split('.'))\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code goes here\n    list_of_strings = []\n    for extension in extensions:\n        list_of_strings.append(\"{}.{}\".format(class_name, extension))\n    \n    return max(list_of_strings, key=lambda x: sum([ord(char) - 96 for char in x.split('.')[1]]))\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Please do not modify the code below.\n    strongest_extension = extensions[0]\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        ext_strength = cap - sm\n        if ext_strength > strong_extension_strength:\n            strongest_extension = extension\n            strong_extension_strength = ext_strength\n    return '{0}.{1}'.format(class_name, strongest_extension)\n    \n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    extension_strength = 0\n    for extension in extensions:\n        extension_strength += get_uppercase(extension) - get_lowercase(extension)\n    if extension_strength == 0:\n        return \"{0}.{1}\".format(class_name, extensions[0])\n    else:\n        strongest_extension_strength = max(get_uppercase(extension) - get_lowercase(extension) for extension in extensions)\n        extension_to_return = None\n        for extension in extensions:\n            if get_uppercase(extension) - get_lowercase(extension) == strongest_extension_strength:\n                extension_to_return = extension\n                break\n        return \"{0}.{1}\".format(class_name, extension_to_return)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    class_name = class_name.lower()\n    extensions = [x.lower() for x in extensions]\n    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        if extension_strength > strength:\n            strength = extension_strength\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    extension_strength = {}\n    for extension in extensions:\n        name = extension.split('.')[-1]\n        uppercase_count = sum(1 for c in name if c.isupper())\n        lowercase_count = sum(1 for c in name if c.islower())\n        extension_strength[extension] = uppercase_count - lowercase_count\n    return '%s.%s' % (class_name, max(extension_strength.items(), key=lambda x: x[1])[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    max_strength = 0\n    max_name = \"\"\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            max_name = extension\n    return \"{0}.{1}\".format(class_name, max_name)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    extensions.sort(key=lambda e: len(e), reverse=True)\n    count = 0\n    for i in range(0, len(extensions)):\n        extension_name = extensions[i].split('.')[-1]\n        for c in extension_name:\n            if c.isupper():\n                count += 1\n        for c in extension_name:\n            if c.islower():\n                count -= 1\n        if count > 0:\n            return class_name + '.' + extensions[i]\n    return class_name + '.' + extensions[0]"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return any(b in a for a in [a, a[1:]+a[0], a[2:]+a[0:2], a[2:0:-1]+a[:2]])\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a == b:\n        return True\n    elif b in a:\n        return True\n    else:\n        for i in range(0,len(a)-len(b)+1):\n            if a[i:len(b)+i] == b:\n                return True\n        return False\n        \n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a==b:\n        return True\n    \n    for i in range(1,len(b)):\n        if b[i:] in a and b[:i] in a:\n            return True\n    \n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = len(a)\n    for i in range(l):\n        if b in a[i:]:\n            return True\n        if b in a[l-i:]:\n            return True\n        if b in a[l-2*i:]:\n            return True\n        if b in a[2*i:]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return True if b in a else False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(b) > len(a):\n        return False\n    if len(b) == len(a) and b in a:\n        return True\n    \n    for i in range(len(a) - len(b) + 1):\n        if b == a[i:i+len(b)]:\n            return True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pattern = a[len(a)-len(b):]+a[:len(a)-len(b)]\n    return b in pattern\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return b in a or (len(a)>1 and a[1:] in b)\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    if b in a:\n        return True\n    for x in range(0,len(b)):\n        if a[x:] == b[:len(b)-x]:\n            return True\n        if a[x:] == b[-x:]:\n            return True\n        if a[-x:] == b[:len(b)-x]:\n            return True\n        if a[-x:] == b[-x:]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = len(a)\n    for i in xrange(l):\n        for j in xrange(l):\n            if j == i:\n                continue\n            if a[i:j] in b:\n                return True\n            if a[j:i] in b:\n                return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odd_count = 0\n    even_count = 0\n    if num < 0:\n        num *= -1\n        num = str(num)\n        for digit in num:\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    else:\n        num = str(num)\n        for digit in num:\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (len(str(abs(num))), len(str(abs(num)))-len(str(abs(num))))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(str(abs(num))), len(str(abs(num))) % 2\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(str(abs(num))) - len(str(abs(num)//2))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if num < 0:\n        num = -num\n    even = 0\n    odd = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num /= 10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (num.count(2) % 2, num.count(1) % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = [0, 0]\n    if num < 0:\n        num *= -1\n        count[0] = 1\n    while num!= 0:\n        if num % 2 == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n        num //= 10\n    return tuple(count)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    while num:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 1\n        num /= 10\n    return count, 10 - count\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count_odd = 0\n    count_even = 0\n    \n    if num > 0:\n        while num > 0:\n            if num % 2 == 1:\n                count_odd += 1\n            else:\n                count_even += 1\n            num /= 10\n        return (count_even, count_odd)\n    elif num == 0:\n        return (0, 0)\n    else:\n        return (1, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(int(i) % 2 for i in str(num))\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = ''\n    d = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        100: 'c',\n        1000:'m'\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('int_to_mini_roman: 1 <= num <= 1000')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # NOTE: this solution iterates through the whole range of roman numerals,\n    # and therefore may be inefficient.\n    \n    assert 1 <= number <= 1000, 'Argument must be between 1 and 1000'\n    numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n    result = ''\n    for (rom, mini) in numerals:\n        while number >= rom:\n            result += mini\n            number -= rom\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = \"\"\n    if number == 1000:\n        return \"m\" * number\n    for digit in range(1, number + 1):\n        digit_roman = NUMERALS_ROMAN[digit]\n        if digit > 1 and NUMERALS_ROMAN[digit] == NUMERALS_ROMAN[digit - 1]:\n            if digit < 4 and digit > 1:\n                digit_roman = digit_roman.replace(\"i\", \"v\")\n            elif digit < 9:\n                digit_roman = digit_roman.replace(\"x\", \"l\")\n            else:\n                digit_roman = digit_roman.replace(\"x\", \"c\")\n        result += digit_roman\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    if number < 1 or number > 1000:\n        return None\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return_string = ''\n    \n    # these are the smallest roman numerals, ordered by value\n    small_romans = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix']\n    # these are the smallest values, ordered by the value of the roman numeral\n    small_numbers = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"int_to_mini_roman: number is not an integer between 1 and 1000\")\n    # check if number is in a certain range\n    if number == 1000:\n        return'm' * 13\n    elif number == 100:\n        return 'cm'\n    elif number == 10:\n        return 'd'\n    elif number == 9:\n        return 'cd'\n    elif number == 8:\n        return 'c'\n    elif number == 7:\n        return 'cx'\n    elif number == 6:\n        return 'b'\n    elif number == 5:\n        return 'bx'\n    elif number == 4:\n        return 'a'\n    elif number == 3:\n        return 'ax'\n    elif number == 2:\n        return 'i'\n    elif number == 1:\n        return 'i'\n    elif number < 4:\n        return int_to_mini_roman(number - 1) + 'i'\n    elif number < 9:\n        return int_to_mini_roman(number - 5) + 'v'\n    elif number < 14:\n        return int_to_mini_roman(number - 10) + 'x'\n    else:\n        return int_to_mini_roman(number - 15) +'m'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = ''\n    while number >= 1000:\n        res +='m'\n        number -= 1000\n    while number >= 900:\n        res += 'c'\n        number -= 900\n    while number >= 500:\n        res += 'd'\n        number -= 500\n    while number >= 400:\n        res += 'cd'\n        number -= 400\n    while number >= 100:\n        res += 'c'\n        number -= 100\n    while number >= 90:\n        res += 'xc'\n        number -= 90\n    while number >= 50:\n        res += 'x'\n        number -= 50\n    while number >= 40:\n        res += 'x'\n        number -= 40\n    while number >= 10:\n        res += 'ix'\n        number -= 10\n    while number >= 9:\n        res += 'v'\n        number -= 9\n    while number >= 5:\n        res += 'v'\n        number -= 5\n    while number >= 4:\n        res += 'iv'\n        number -= 4\n    while number >= 1:\n        res += 'i'\n        number -= 1\n    return res\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Initialize the string for the conversion\n    conversion_string = ''\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # convert number to a string\n    num_string = str(number)\n    # make a list of the length of the number\n    num_list = [int(num_string[i]) for i in range(len(num_string))]\n    # traverse through the list\n    roman_list = ['' for i in range(len(num_list))]\n    for i in range(len(num_list)):\n        if num_list[i] < 4:\n            roman_list[i] = num_list[i] * roman_list[i - 1]\n        elif num_list[i] == 4:\n            roman_list[i] = 'cd' + roman_list[i - 2]\n        elif num_list[i] == 5:\n            roman_list[i] = 'dv' + roman_list[i - 2]\n        elif num_list[i] == 9:\n            roman_list[i] ='m' + roman_list[i - 2]\n        elif num_list[i] > 5:\n            roman_list[i] = (num_list[i] - 5) * roman_list[i - 1]\n    # return the roman numeral\n    return ''.join([char for char in roman_list])\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a > b and a > c:\n        a, b, c = b, a, c\n    if b > c and b > a:\n        b, a, c = a, c, b\n    if c > a and c > b:\n        c, b, a = a, b, c\n    if a**2 == b**2 + c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (b**2 + c**2) == (a**2 + b**2) or (c**2 + a**2) == (b**2 + c**2)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ((a ** 2) + (b ** 2)) == (c ** 2) or ((c ** 2) + (b ** 2)) == (a ** 2)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (c**2 - b**2)/a**2 > 0\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return True if sqrt(pow(b,2) + pow(c,2) - pow(a,2)) == 0 else False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ((a**2 + b**2) == c**2) or ((b**2 + c**2) == a**2) or \\\n           ((c**2 + a**2) == b**2)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # write your code here\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_val = -1\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_val:\n            max_val = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_word = \"\"\n    for word in words:\n        max_word = max_word if len(max_word) > len(word) else word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return max(words, key=len)\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(words) == 1:\n        return words[0]\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    if len(max_word) == 1:\n        return max_word\n    return max_word[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_word = ''\n    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_word = word\n            max_count = len(word)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_length:\n            max_length = len(set(word))\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_letters = {}\n    for word in words:\n        letters = get_letters(word)\n        for letter in letters:\n            if letter in max_letters:\n                max_letters[letter] += 1\n            else:\n                max_letters[letter] = 1\n    max_len = 0\n    max_letter = \"\"\n    for letter in max_letters:\n        if max_letters[letter] > max_len:\n            max_len = max_letters[letter]\n            max_letter = letter\n    return max_letter\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    maximum = -1\n    maximum_word = \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def find(word):\n        count = {}\n        for i in word:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        return len(count)\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def unique_char(word):\n        return len(set(word))\n    return max(words, key = unique_char)\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total, left = 0, 0\n    if need > remaining:\n        total = remaining\n    else:\n        total = need\n        left = remaining - need\n    return [total, left]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    count = number // need\n    if number < need * count:\n        count -= 1\n    return [count * need, number - count * need]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    remaining -= number\n    if remaining > 0:\n        remaining = max(0, remaining)\n    return [number + remaining, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if number > need:\n        return [need, number - need]\n    elif number == need:\n        return [number, 0]\n    else:\n        return [number, 0]\n    \ndef fibonacci(n):\n    \"\"\"\n    This function returns the n-th fibonacci number.\n    \n    Example:\n    * fibonacci(4) -> 3\n    * fibonacci(5) -> 5\n    \n    Variables:\n    @n : integer\n        the index you want to calculate\n    \n    Constrain:\n    * 0 <= n <= 20\n    \n    Have fun :)\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n        \ndef fizz_buzz(n):\n    \"\"\"\n    This function returns the n-th fizz buzz number.\n    \n    Example:\n    * fizz_buzz(3) -> 1\n    * fizz_buzz(4) -> 2\n    * fizz_buzz(5) -> Fizz\n    * fizz_buzz(6) -> 2\n    * fizz_buzz(7) -> Fizz\n    * fizz_buzz(8) -> 8\n    * fizz_buzz(9) -> Fizz\n    \n    Variables:\n    @n : integer\n        the index you want to calculate\n    \n    Constrain:\n    * 0 <= n <= 20\n    \n    Have fun :)\n    \"\"\"\n    if n % 3 == 0 and n % 5 == 0:\n        return \"FizzBuzz\"\n    elif n % 3 == 0:\n        return \"Fizz\"\n    elif n % 5 == 0:\n        return \"Buzz\"\n    else:\n        return n\n        \ndef permutation(n, k):\n    \"\"\"\n    This function returns the nth permutation of k.\n    \n    Example:\n    * permutation(3, 2) -> 23\n    * permutation(4, 5) -> 4125\n    * permutation(3, 3) -> 3\n    \n    Variables:\n    @n : integer\n        the index you want to calculate\n    @k : integer\n        the length of the permutation\n    \n    Constrain:\n    * 0 <= n <= 100\n    * 0 <= k <= 100\n    \n    Have fun :)\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    elif k == 1:\n        return n\n    else:\n        return permutation(n - 1, k - 1) * (n - 1) + permutation(n - 1, k)\n    \ndef permute(n, k, r):\n    \"\"\"\n    This function returns the nth permutation of k and the rth element.\n    \n    Example:\n    * permute(3, 2, 2) -> 12\n    * permute(4, 5, 3) -> 4125\n    * permute(3, 3, 3) -> 3\n    \n    Variables:\n    @n : integer\n        the index you want to calculate\n    @k : integer\n        the length of the permutation\n    @r : integer\n        the index of the element you want to calculate\n    \n    Constrain:\n    * 0 <= n <= 100\n    * 0 <= k <= 100\n    * 0 <= r <= k\n    \n    Have fun :)\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    elif k == 1:\n        return n\n    else:\n        return permute(n - 1, k - 1, r) * (n - 1) + permute(n - 1, k, r - 1)\n    \ndef power(a, b):\n    \"\"\"\n    This function returns the a^b.\n    \n    Example:\n    * power(3, 2) -> 9\n    * power(3, 3) -> 27\n    * power(3, 0) -> 1\n    * power(2, 3) -> 8\n    \n    Variables:\n    @a : integer\n        the number that you want to calculate\n    @b : integer\n        the power that you want to calculate\n    \n    Constrain:\n    * 0 <= a <= 1000\n    * 0 <"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if number >= need:\n        return [need + number - need // 2, number - need // 2]\n    else:\n        return [number, 0]"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [max(0, number+remaining-need), need-remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if need > remaining:\n        return [number + remaining, 0]\n    elif need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number < 0:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be under 1000')\n    if need < 0:\n        raise ValueError('Need must be positive')\n    if need > 1000:\n        raise ValueError('Need must be under 1000')\n    if remaining < 0:\n        raise ValueError('Remaining must be positive')\n    \n    number = min(need, remaining)\n    remaining -= number\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [number + need, remaining - need]"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if remaining < need:\n        return [need, remaining]\n    else:\n        return [need+remaining, remaining-need]"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def do_addition(operator, operand):\n        addition = 0\n        for i in operand:\n            addition += i\n        return addition\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return eval(operator + \"\".join([str(i) for i in operand]))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(len(operand)-1):\n        result = result + (operator[i] * operand[i])\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for i, o in enumerate(operator):\n        if o == '+':\n            result += operand[i]\n        elif o == '-':\n            result -= operand[i]\n        elif o == '*':\n            result *= operand[i]\n        elif o == '//':\n            result = result // operand[i]\n        else:\n            result = result ** operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Make the given lists into a two-dimensional array\n    grid = []\n    for i in range(len(operator)):\n        row = []\n        for j in range(len(operand)):\n            row.append(operator[i])\n        grid.append(row)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if operator[0] == '+':\n        return sum(operand)\n    elif operator[0] == '*':\n        return reduce(lambda x, y: x * y, operand)\n    elif operator[0] == '-':\n        return sum(operand) - reduce(lambda x, y: x * y, operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # TODO: implement this function.\n    # raise NotImplementedError\n    \n    # raise NotImplementedError\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(operand) == 0:\n        return None\n    elif len(operand) == 1:\n        return operand[0]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join([('@' if x.isalpha() else x).upper() if x.isalpha() else x for x in s])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.translate(s.maketrans(\"1234567890\", \"9876543210\"))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([a.lower() if a.isalpha() else a for a in s])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(reversed(solve_helper(s)))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def rev(i, j):\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    \n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i].isalpha():\n            if s[i].isupper():\n                rev(i, j)\n            else:\n                rev(i, j)\n                s[i], s[j] = s[j], s[i]\n            j -= 1\n        i += 1\n    if s[-1].isalpha():\n        if s[-1].isupper():\n            rev(j, len(s) - 1)\n        else:\n            s[j], s[-1] = s[-1], s[j]\n    else:\n        s = s[::-1]\n    return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = s.lower()\n    if \" \" in s:\n        s = s.split(\" \")\n        new = []\n        for i in s:\n            if i == \"\":\n                continue\n            else:\n                new.append(i[::-1])\n        s = \" \".join(new)\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = s.lower()\n    r = s.upper()\n    for i in range(len(l)):\n        if l[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            r = r[:i] + l[i] + r[i+1:]\n    for i in range(len(r)):\n        if r[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            l = l[:i] + r[i] + l[i+1:]\n    return r\n    \nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    print \"All cases passed\""
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join(map(lambda x: x if isinstance(x, str) else (x[::-1].swapcase() if x.isalpha() else x), s))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if not s[i].isalpha():\n            s[i] = s[i].swapcase()\n    s.reverse()\n    return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    try:\n        return hashlib.md5(text).hexdigest()\n    except:\n        print(\"Error: Non-string value for text.\")\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #'str' means'string'\n    # http://stackoverflow.com/a/3438757/1594879\n    if text:\n        return str(hashlib.md5(text.encode('utf-8')).hexdigest())\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    text = text.strip()\n    return md5(text).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if text == '':\n        return None\n    import hashlib\n    hash = hashlib.md5(text)\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if text == '':\n        return None\n    else:\n        m = hashlib.md5()\n        m.update(text)\n        return m.hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # If a is even, there are no even numbers between a and b\n    # in order to return even numbers, we will have to return all of them\n    if a % 2 == 0:\n        return [a]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #create list of integers between a and b\n    results = []\n    if a <= b:\n        for i in range(a, b+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n    else:\n        for i in range(b, a+1):\n            if i % 2 == 0:\n                results.append(i)\n        return results\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(a, b):\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [k for k in range(a, b + 1) if k % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # We could just do this:\n    # return [i for i in range(a, b+1) if i % 2 == 0]\n    # However, Python 2.7 doesn't support this.\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    result = []\n    while a < b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a == b:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]"
    }
]