[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i, a in enumerate(numbers):\n        for j in range(i, len(numbers)):\n            if numbers[j] - a <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i, number1 in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            number2 = numbers[j]\n            if abs(number1 - number2) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO: rewrite this function\n    for i, number1 in enumerate(numbers):\n        for number2 in numbers[i + 1:]:\n            if abs(number1 - number2) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i] + threshold >= sorted_numbers[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for idx1, val1 in enumerate(numbers):\n        for idx2, val2 in enumerate(numbers):\n            if idx1 == idx2:\n                continue\n            if abs(val1 - val2) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            string += \"(\"\n        elif char == \")\":\n            string += \")\"\n        elif char == \"{\":\n            string += \"{\"\n        elif char == \"}\":\n            string += \"}\"\n    return string.split(\" \")\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    Our regular expression in regex.py looks for a pair of opening and closing parentheses\n    E.g. ((()()))\n    So this works:\n    \"\"\"\n    \"\"\"\n    We will do the same here, but we will use a stack for our purpose instead of a queue (which we did last time)\n    \"\"\"\n    stack = []\n    paren_strings = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append('(')\n        elif paren == ')':\n            if stack[-1] == '(':\n                stack.pop()\n                paren_strings.append(''.join(stack[::-1]))\n                stack = []\n            else:\n                stack.append(')')\n    if len(stack) > 0:\n        paren_strings.append(''.join(stack[::-1]))\n    return paren_strings\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Brackets = Open and Close, with an empty string representing a full match\n    brackets = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n    # curr_stack stores all open brackets, and list of matched string so far\n    curr_stack = []\n    matched = []\n    for c in paren_string:\n        # Case: open bracket\n        if c in brackets:\n            curr_stack.append(c)\n        # Case: close bracket\n        else:\n            # If no matching open bracket, return empty list\n            if len(curr_stack) == 0:\n                return matched\n            # If matched closed bracket, open brackets in curr_stack should all be closed\n            if brackets[curr_stack.pop()]!= c:\n                return matched\n    return matched\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Example: ('( ) ( ( ) ) ( ) (( ) ( ( ( ) ) ) ( ) ) (( ) ) ( ( ( ( ) ) ) ) ( ) ) ( ( ) ) ( ( ( ) ( ) ) ) ) ')\n    # Example: (()())\n    # Example: (())\n    # Example: ()\n    # Example: (()))\n    # Example: ((()))\n    # Example: (((((()))))))\n    # Example: ((((((()))))))\n    # Example: (()))\n    # Example: (()))\n    # Example: ((()))\n    # Example: ((()))\n    # Example: ((((()))))\n    # Example: ((((((()))))))\n    # Example: (((((((())))))))))\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[:i+1])\n                paren_string = paren_string[i+1:]\n                break\n            else:\n                result.append(paren_string[:i])\n                paren_string = paren_string[i+1:]\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    start_idx = 0\n    groups = []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    parens_stack = []\n    result = []\n    for paren in paren_string:\n        if paren == '(':\n            parens_stack.append(paren)\n        elif paren == ')':\n            if parens_stack and parens_stack[-1] == '(':\n                parens_stack.pop()\n                result.append(paren)\n            else:\n                parens_stack.append(paren)\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    paren_stack = []\n    in_paren = False\n    for ch in paren_string:\n        if ch == '(':\n            if in_paren:\n                paren_stack.append('(')\n            else:\n                in_paren = True\n        elif ch == ')':\n            if len(paren_stack) == 0 or paren_stack.pop()!= '(':\n                raise Exception('Invalid balance of parentheses')\n            in_paren = False\n    if len(paren_stack) > 0:\n        raise Exception('Missing closing parentheses')\n    return [paren_string[:i] for i in range(1, len(paren_string) + 1)]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    open_parens = 0\n    in_parens = False\n    result = []\n    current_string = []\n    for c in paren_string:\n        if c == \"(\":\n            in_parens = True\n            open_parens += 1\n            if open_parens == 1:\n                result.append(\"\")\n                current_string = []\n        elif c == \")\":\n            in_parens = False\n            close_parens = 0\n            for char in current_string:\n                if char == \"(\":\n                    close_parens += 1\n            if close_parens == open_parens:\n                result.append(\"\".join(current_string))\n            else:\n                print(f\"Unbalanced parens: {close_parens} / {open_parens}\")\n        elif in_parens:\n            current_string.append(c)\n        else:\n            current_string.append(c)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 0\n    while number > 10:\n        number /= 10\n        i += 1\n    return number * 10 ** i\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    int_part = math.floor(number)\n    return number - int_part\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    remainder = number - int(number)\n    return remainder\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    integer_part, decimal_part = str(int(number)).split(\".\")\n    return float(\".\" + decimal_part)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    integer, decimals = math.modf(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # declare variables for the integer and the decimal part\n    integer = 0\n    decimal = 0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    number = float(number)\n    if number < 1:\n        raise ValueError(\"Number must be positive\")\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return math.modf(number)[0]\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] >= 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    balance = 0\n    for operation in operations:\n        balance = balance + operation if operation > 0 else balance - operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(operations) == 0:\n        return False\n    if len(operations) == 1:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    operations_stack = []\n    for i in operations:\n        if i < 0:\n            if operations_stack:\n                if operations_stack.pop() < 0:\n                    return True\n        else:\n            operations_stack.append(i)\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    current_balance = 0\n    for operation in operations:\n        if operation < 0:\n            current_balance = current_balance + operation\n        else:\n            current_balance = current_balance - operation\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    flag = False\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            if balance < 0:\n                flag = True\n                break\n            balance = balance + operation\n    return flag\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for op in operations:\n        if op < 0:\n            return True\n        else:\n            pass\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # The mean of the absolute difference between each number and the mean.\n    absolute_differences = [abs(x - mean(numbers)) for x in numbers]\n    return mean(absolute_differences)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: Replace the following line with a one-line lambda expression\n    mad = lambda x: sum([abs(x - y) for y in x]) / len(x)\n    return mad(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(numbers)\n    m = sum(numbers) / n\n    differences = [abs(x - m) for x in numbers]\n    mad = sum(differences) / n\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    sums = 0.0\n    for x in numbers:\n        sums += abs(x - mean)\n    return sums / n\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return None\n    if n == 1:\n        return 0.0\n    sum_numbers = sum(numbers)\n    mean_sum_numbers = sum_numbers / n\n    absolute_differences = [abs(x - mean_sum_numbers) for x in numbers]\n    #print(absolute_differences)\n    return sum(absolute_differences) / (n - 1)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for number in numbers:\n        total += abs(number - numbers[0])\n    return total / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Given a list of numbers, calculate mean and standard deviation\n    mean = sum(numbers) / len(numbers)\n    _sum = 0.0\n    for num in numbers:\n        _sum += abs(num - mean)\n    return _sum / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        raise ValueError(\"List is empty\")\n    mean = sum(numbers) / len(numbers)\n    # MAD = sum(map(abs, numbers)) / len(numbers)\n    MAD = sum(map(abs, numbers - mean)) / len(numbers)\n    return MAD\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index!= len(numbers) - 1:\n            result.append(number)\n            result.append(delimeter)\n        else:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # check that delimeter is an integer\n    if not isinstance(delimeter, int):\n        raise TypeError(\"delimeter must be an integer\")\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n        result.append(numbers[i + 1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = [numbers[0]]\n    for index, number in enumerate(numbers):\n        if index % 2 == 0:\n            result.append(number)\n        else:\n            result.append(delimeter)\n            result.append(number)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            res.append(numbers[i])\n        else:\n            res.append(numbers[i])\n            res.append(delimeter)\n    return res\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i, last_elem = 0, len(numbers) - 1\n    while i <= last_elem:\n        numbers[i] = delimeter\n        i += 1\n        numbers[i] = delimeter\n        i += 1\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return delimeter.join(map(str, numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return numbers[0:1] + [delimeter] + numbers[1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [numbers[i] if i % 2 == 0 else delimeter for i in range(len(numbers))]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [numbers[i] for i in range(0, len(numbers), 2)] + [delimeter,]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Initialize count\n    count = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    paren_groups = paren_string.split(' ')\n    max_levels = []\n    for paren_group in paren_groups:\n        levels = []\n        nested_parens = paren_group.count('(')\n        if nested_parens!= 0:\n            current_level = 1\n            index = 0\n            while index < len(paren_group):\n                char = paren_group[index]\n                if char == '(':\n                    current_level += 1\n                elif char == ')':\n                    current_level -= 1\n                    if current_level == 0:\n                        levels.append(index)\n                        index += 1\n                    else:\n                        index += 1\n                else:\n                    index += 1\n        else:\n            levels.append(0)\n        max_levels.append(max(levels))\n    return max_levels\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            max_depth += 1\n        elif char == \")\":\n            stack.pop()\n            max_depth = max_depth if len(stack) == 0 else max_depth - 1\n    return max_depth\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Make a stack of tuples: (count, level)\n    stack = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            stack.append((1, 0))\n        elif paren == ')':\n            count, level = stack.pop()\n            stack[-1][0] += count\n            stack[-1][1] = max(level, stack[-1][1])\n    return [s[0] for s in stack]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    level_of_nesting = 0\n    max_level_of_nesting = 0\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            level_of_nesting += 1\n            max_level_of_nesting = max(level_of_nesting, max_level_of_nesting)\n        elif char == ')':\n            level_of_nesting -= 1\n        \n    return [max_level_of_nesting, level_of_nesting]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(res)\n            res = []\n        elif c == ')':\n            if len(stack) > 0:\n                top = stack.pop()\n                res = top + [len(res)]\n            else:\n                res.append(0)\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nesting_depth = []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    paren_stack = []\n    curr_level = 0\n    curr_total = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    paren_stack = []\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(index)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_stack.append(index)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    paren_stack = []\n    nesting_count = 0\n    \n    for paren in paren_string:\n        if paren == '(':\n            nesting_count += 1\n            paren_stack.append(nesting_count)\n        elif paren == ')':\n            nesting_count -= 1\n            paren_stack.pop()\n    \n    return paren_stack\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum_num = 0\n    product_num = 1\n    for i in numbers:\n        sum_num += i\n        product_num *= i\n    return (sum_num, product_num)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        return 0, 1\n    return sum(numbers), functools.reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if numbers:\n        return (sum(numbers), 1) * len(numbers)\n    return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return 0, 1\n    return sum(numbers), reduce(lambda a, b: a*b, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(numbers), reduce(lambda a, b: a*b, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if numbers == []:\n        return 0, 1\n    else:\n        return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_list = []\n    max_number = numbers[0]\n    for number in numbers:\n        if number > max_number:\n            max_number = number\n        max_list.append(max_number)\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    rolling_max_list = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[:i+1]))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Generate the prefixes\n    rolling_max = []\n    rolling_max.append(numbers[0])\n    for i in range(1, len(numbers)):\n        # Take the max of the current prefix and the last element in the sequence\n        rolling_max.append(max(numbers[i], rolling_max[i - 1]))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        return []\n    left, right, result = [numbers[0]], [], []\n    for i in range(1, len(numbers)):\n        if left and numbers[i] > left[-1]:\n            result.append(left[-1])\n            left.append(numbers[i])\n        elif right and numbers[i] > right[-1]:\n            left.append(right[-1])\n            right.append(numbers[i])\n        else:\n            left.append(numbers[i])\n    result.append(left[-1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_number = 0\n    result = []\n    for number in numbers:\n        if number > max_number:\n            result.append(number)\n            max_number = number\n        else:\n            result.append(max_number)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [max(numbers[:i + 1]) for i, n in enumerate(numbers)]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_element = max(numbers)\n    max_element_index = numbers.index(max_element)\n    result = [max_element]\n    for i in range(max_element_index, len(numbers)):\n        numbers[i] = max_element\n        max_element -= 1\n        max_element_index += 1\n        max_element = max(numbers[max_element_index:])\n        result.append(max_element)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    ret = []\n    for i in range(1, len(numbers)):\n        if numbers[i] > numbers[i - 1]:\n            ret.append(numbers[i])\n        else:\n            ret.append(numbers[i - 1])\n    return ret\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    while len(numbers) > 0:\n        current_max = max(numbers)\n        result.append(current_max)\n        numbers.remove(current_max)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_so_far = 0\n    max_ending_here = 0\n    result = [0] * len(numbers)\n    for i, n in enumerate(numbers):\n        max_ending_here = max(max_ending_here + n, n)\n        max_so_far = max(max_so_far, max_ending_here)\n        result[i] = max_so_far\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            postfix = string[len(string) - i:len(string)]\n            return prefix + postfix[::-1]\n    return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if is_palindrome(string):\n        return string\n    else:\n        max_postfix_palindrome = find_max_postfix_palindrome(string)\n        return max_postfix_palindrome + string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    longest_suffix = longest_palindrome(string)\n    palindromic_suffix = string[-len(longest_suffix):]\n    reversed_prefix = string[:-len(longest_suffix)]\n    return string + reversed_prefix + palindromic_suffix\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Find the longest postfix of the string that is a palindrome.\n    for i in reversed(range(len(string))):\n        if is_palindrome(string[i:]):\n            return string[i:] + string[:i]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not string:\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string = string.lower()\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(string)):\n        string_ = string[i:]\n        if is_palindrome(string_):\n            return string_ + string_[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if string == '':\n        return string\n    if is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string + string\n    else:\n        suffix = max(filter(lambda x: is_palindrome(x), string[::-1][1:]), key=len)\n        return suffix + string + suffix[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(a) == len(b)\n    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert a.__len__() == b.__len__()\n    res = ''\n    for i in range(a.__len__()):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(a) == len(b)\n    return \"\".join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return str(int(a) ^ int(b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join([str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('a and b must be of same length')\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    longest_string = None\n    max_length = -1\n    for string in strings:\n        if len(string) > max_length:\n            longest_string = string\n            max_length = len(string)\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    longest = strings[0]\n    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    sorted_strings = sorted(strings, key=len)\n    return sorted_strings[-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    maxlen = len(strings[0])\n    maxstr = strings[0]\n    for s in strings:\n        if len(s) > maxlen:\n            maxlen = len(s)\n            maxstr = s\n    return maxstr\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a < 0 or b < 0:\n        raise ValueError(\"Greatest common divisor is only defined for \"\n                         \"non-negative integers\")\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    while b > 0:\n        remainder = a % b\n        a = b\n        b = remainder\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        a %= b\n    else:\n        b %= a\n    return greatest_common_divisor(a, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # The greatest common divisor of a and b is the largest integer that divides\n    # both of them without remainder.\n    if a == 0 or b == 0:\n        return a if b == 0 else b\n    if a == b:\n        return a\n    if a < b:\n        return greatest_common_divisor(b, a)\n    return greatest_common_divisor(a % b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(reversed([string[:i] for i in range(len(string) + 1)]))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return [string[:i] for i in range(1, len(string))]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string))]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    all_pre = []\n    for i in range(len(string)):\n        all_pre.append(string[:i+1])\n    return all_pre\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = ''\n    for i in range(n + 1):\n        result += str(i)\n    return result\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seq = []\n    for i in range(n + 1):\n        seq.append(str(i))\n    return \" \".join(seq)\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in range(0, n+1):\n        result += str(i) + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = ''\n    for i in range(n + 1):\n        result += str(i) +''\n    return result.strip()\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = \"\"\n    for i in range(n + 1):\n        res += str(i) + \" \"\n    return res[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    distinct_count = 0\n    for char in string:\n        if char not in distinct_count:\n            distinct_count += 1\n    return distinct_count\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set([x.lower() for x in string]))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    distinct_characters = set()\n    for c in string:\n        distinct_characters.add(c.lower())\n    return len(distinct_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    parsed_music = []\n    current_note = None\n    current_beat = 0\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    for c in music_string:\n        if c == 'o':\n            res.append(1)\n        elif c == 'o|':\n            res.append(0.5)\n        elif c == '.':\n            res.append(0.25)\n        elif c == '|':\n            res.append(0)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # These are the list of musical notes in the format string.\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [len(filter(lambda x: x == 'o', music_string.split('o|'))) + 1,\n            len(filter(lambda x: x == 'o', music_string.split('o|.'))),\n            len(filter(lambda x: x == 'o', music_string.split('o| o'))),\n            len(filter(lambda x: x == 'o', music_string.split('o|.'))),\n            len(filter(lambda x: x == 'o', music_string.split('o| o o'))),\n            len(filter(lambda x: x == 'o', music_string.split('o|. o'))),\n            len(filter(lambda x: x == 'o', music_string.split('o| o o o')))]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = []\n    for item in music_string.split(\" \"):\n        if item == \"o\" or item == \"o|\" or item == \".|\":\n            lst.append(4)\n        elif item == \"o.|\":\n            lst.append(2)\n        elif item == \"o.|.\":\n            lst.append(1)\n        elif item == \"o.|.|\":\n            lst.append(0.5)\n        elif item == \"o..|\":\n            lst.append(0.25)\n        else:\n            lst.append(float(item))\n    return lst\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [int(x) for x in music_string.split(' ')]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    instructions = []\n    for s in music_string.split(\" \"):\n        instructions.append(4 if s == \"o\" else 2 if s == \"o|\" else 1 if s == \".|\" else 0)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    current_note = ''\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for character in music_string.split():\n        if character == \"o\":\n            result.append(1)\n        elif character == \"o|\":\n            result.append(0.5)\n        elif character == \".|\":\n            result.append(0.25)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string.split(substring)) - 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if substring == '':\n        return 0\n    elif len(string) < len(substring):\n        return 0\n    elif substring == string[:len(substring)]:\n        return 1 + how_many_times(string[len(substring):], substring)\n    else:\n        return how_many_times(string[1:], substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) < len(substring):\n        return 0\n    elif len(string) == len(substring):\n        return 1 if substring in string else 0\n    else:\n        return how_many_times(string[1:], substring) + how_many_times(string[1:], substring + string[0])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #string.replace(substring, '', 1)\n    #return len(string) - len(string.replace(substring, ''))\n    return sum([1 for i in range(len(string)) if string.find(substring, i) >= 0])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    index = 0\n    counter = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index!= -1:\n            counter += 1\n            index += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    # start at the beginning of the string\n    for i in range(len(string)):\n        # get a slice of the substring and the string\n        substr = string[i:i + len(substring)]\n        # compare that slice of the string with the substring\n        if substr == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # keep a counter\n    counter = 0\n    # loop over the string\n    for index in range(len(string) - len(substring) + 1):\n        # increment the counter if the substring is found\n        if string[index: index + len(substring)] == substring:\n            counter += 1\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers.split(' ')\n    sorted_numbers = sorted(numbers)\n    return''.join(sorted_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers = numbers.split()\n    for i in range(len(numbers)):\n        numbers[i] = int(numbers[i])\n    numbers = sorted(numbers)\n    return \" \".join([str(n) for n in numbers])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                  'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = [number_map[c] for c in numbers.split()]\n    return''.join([str(n) for n in sorted_numbers])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_numbers = []\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers = numbers.replace(' ', '')\n    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    return''.join([str(nums[s]) for s in numbers.split()])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numeral_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',\n                    'six': '6','seven': '7', 'eight': '8', 'nine': '9'}\n    sorted_numbers = []\n    for numeral in numbers.split(' '):\n        sorted_numbers.append(numeral_dict[numeral])\n    return''.join(sorted_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if numbers == 'zero':\n        return 'zero'\n    else:\n        return''.join(sorted(numbers.split(' ')))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers.sort()\n    diff_1 = abs(numbers[0] - numbers[1])\n    diff_2 = abs(numbers[-1] - numbers[-2])\n    if diff_1 <= diff_2:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[-1], numbers[-2]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_numbers = sorted(numbers)\n    smallest_difference = abs(sorted_numbers[0] - sorted_numbers[1])\n    smallest_difference_index = 0\n    second_smallest_difference_index = 1\n    first_number = sorted_numbers[smallest_difference_index]\n    second_number = sorted_numbers[second_smallest_difference_index]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return min(numbers, key=lambda x: x if x - 2.0 < 0.0 else x + 2.0), max(numbers, key=lambda x: x if x - 2.0 < 0.0 else x + 2.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n    first = numbers[0]\n    second = numbers[1]\n    if first == second:\n        return first, second\n    for i in range(2, len(numbers)):\n        if numbers[i] > first:\n            second = first\n            first = numbers[i]\n        elif numbers[i] > second:\n            second = numbers[i]\n    return first, second\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required\")\n    numbers.sort()\n    num1 = numbers[0]\n    num2 = numbers[1]\n    if num1 > num2:\n        num1, num2 = num2, num1\n    for i in range(len(numbers) - 1):\n        n1 = numbers[i]\n        n2 = numbers[i + 1]\n        if n1 > n2:\n            n1, n2 = n2, n1\n        if abs(n1 - num1) > abs(n2 - num2):\n            num1 = n1\n            num2 = n2\n    return num1, num2\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_numbers = sorted(numbers)\n    if sorted_numbers[0] == sorted_numbers[1]:\n        return sorted_numbers[0], sorted_numbers[1]\n    if sorted_numbers[-1] == sorted_numbers[-2]:\n        return sorted_numbers[-1], sorted_numbers[-2]\n    return sorted_numbers[0], sorted_numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # TODO: Write test for this function\n    return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_numbers = sorted(numbers)\n    closest_pairs = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(2, len(numbers)):\n        if closest_pairs[0] - closest_pairs[1] > sorted_numbers[i] - closest_pairs[1]:\n            closest_pairs = (sorted_numbers[i], closest_pairs[1])\n        elif closest_pairs[0] - closest_pairs[1] < sorted_numbers[i] - closest_pairs[1]:\n            closest_pairs = (closest_pairs[0], sorted_numbers[i])\n    return closest_pairs\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    step = 1/float(max_val - min_val)\n    return [min_val + (max_val - min_val) * i * step for i in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [((num - minimum) / (maximum - minimum)) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x/max(numbers) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    minimum = float(minimum)\n    maximum = float(maximum)\n    for i, num in enumerate(numbers):\n        numbers[i] = (num - minimum) / (maximum - minimum)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(numbers) > 1\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return list(map(lambda x: (x-min_num) / (max_num-min_num), numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Find the smallest and largest numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    # Rescale to a 0-1 range on both ends\n    rescaled = [float(num - smallest) / (largest - smallest) for num in numbers]\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    total = sum(numbers)\n    unit_length = 1.0 / total\n    return [n * unit_length for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # cast to int because min and max only accept int\n    smallest = min(int(n) for n in numbers)\n    largest = max(int(n) for n in numbers)\n    new_numbers = []\n    for n in numbers:\n        # linearly transform n\n        new_numbers.append(max(0, min(1, (n - smallest) / float(largest - smallest))))\n    return new_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [min(numbers) / max(numbers), 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert (len(numbers) > 1)\n    m = min(numbers)\n    M = max(numbers)\n    return [(((x - m) / (M - m)) * 2) - 1 for x in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [int(value) for value in values if isinstance(value, (int, float))]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [num for num in values if type(num) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [val for val in values if isinstance(val, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda value: isinstance(value, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n % divisor(n)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # One way to solve this problem is to generate all divisors of n until a number that\n    # is larger than n is found.\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        raise ValueError(\"Largest divisor is only defined for positive integers\")\n    return reduce(gcd, range(1, n+1))\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n - 1\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # a little trick to avoid division by zero\n    return n + (-n & n - 1)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for x in range(n // 2, 1, -1):\n        if n % x == 0:\n            return x\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    divisor = 2\n    factors = []\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert n > 0\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    divisor = 3\n    while divisor <= n ** 0.5:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 2\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not n:\n        return []\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n % 2 == 0:\n        return [2] * (n // 2)\n    i = 3\n    result = []\n    while i * i <= n:\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            result.extend([i] * count)\n        i += 2\n    if n > 1:\n        result.extend([n])\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [2] + factorize(n // 2)\n    elif n % 3 == 0:\n        return [3] + factorize(n // 3)\n    elif n % 5 == 0:\n        return [5] + factorize(n // 5)\n    else:\n        return [n]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def _factorize(n: int, i: int):\n        if i > n:\n            return []\n        if i == n:\n            return [i]\n        if i * i > n:\n            return [n]\n        if (n % i) == 0:\n            return [i] + _factorize(n // i, i)\n        else:\n            return [i] + _factorize(n, i + 1)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    f_list = []\n    while n % 2 == 0:\n        f_list.append(2)\n        n //= 2\n    divisor = 3\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            f_list.append(divisor)\n            n //= divisor\n        else:\n            divisor += 2\n    if n > 1:\n        f_list.append(n)\n    return f_list\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n//2)\n    else:\n        return [2] + factorize((n - 1) // 2) + [n]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [3, 3]\n    if n % 5 == 0:\n        return [5, 5]\n    if n % 7 == 0:\n        return [7, 7]\n    if n % 11 == 0:\n        return [11, 11]\n    if n % 13 == 0:\n        return [13, 13]\n    if n % 17 == 0:\n        return [17, 17]\n    if n % 19 == 0:\n        return [19, 19]\n    if n % 23 == 0:\n        return [23, 23]\n    if n % 29 == 0:\n        return [29, 29]\n    if n % 31 == 0:\n        return [31, 31]\n    if n % 37 == 0:\n        return [37, 37]\n    if n % 41 == 0:\n        return [41, 41]\n    if n % 43 == 0:\n        return [43, 43]\n    if n % 47 == 0:\n        return [47, 47]\n    if n % 53 == 0:\n        return [53, 53]\n    if n % 59 == 0:\n        return [59, 59]\n    if n % 61 == 0:\n        return [61, 61]\n    if n % 67 == 0:\n        return [67, 67]\n    if n % 71 == 0:\n        return [71, 71]\n    if n % 73 == 0:\n        return [73, 73]\n    if n % 79 == 0:\n        return [79, 79]\n    if n % 83 == 0:\n        return [83, 83]\n    if n % 89 == 0:\n        return [89, 89]\n    if n % 97 == 0:\n        return [97, 97]\n    if n % 101 == 0:\n        return [101, 101]\n    if n % 103 == 0:\n        return [103, 103]\n    if n % 107 == 0:\n        return [107, 107]\n    if n % 109 == 0:\n        return [109, 109]\n    if n % 113 == 0:\n        return [113, 113]\n    if n % 127 == 0:\n        return [127, 127]\n    if n % 131 == 0:\n        return [131, 131]\n    if n % 137 == 0:\n        return [137, 137]\n    if n % 139 == 0:\n        return [139, 139]\n    if n % 149 == 0:\n        return [149, 149]\n    if n % 151 == 0:\n        return [151, 151]\n    if n % 157 == 0:\n        return [157, 157]\n    if n % 163 == 0:\n        return [163, 163]\n    if n % 167 == 0:\n        return [167, 167]\n    if n % 173 == 0:\n        return [173, 173]\n    if n % 179 == 0:\n        return [179, 179]\n    if n % 181 == 0:\n        return [181, 181]\n    if n % 191 == 0:\n        return [191, 191]\n    if n % 193 == 0:\n        return [193, 193]\n    if n % 197 == 0:\n        return [197, 197]\n    if n % 199 == 0:\n        return [199, 199]\n    if n % 211 == 0:\n        return [211, 211]\n    if n % 223 == 0:\n        return [223, 223]\n    if n % 227 == 0:\n        return [227, 227]\n    if n % 229 == 0:\n        return [229, 229]\n    if n % 233 == 0:\n        return [233, 233]\n    if n % 239 == 0:\n        return [239, 239]\n    if n % 241 == 0:\n        return [241, 241]\n    if n % 251 == 0:\n        return [251, 251]\n    if n % 257 == 0:\n        return [257, 257]\n    if n % 263 == 0:\n        return [263, 263]\n    if n % 269 == 0:\n        return [269, 269]\n    if n % 27"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return []\n    i = 2\n    res = []\n    while i * i <= n:\n        while n % i == 0:\n            res.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        res.append(n)\n    return res\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    unique = []\n    for i in numbers:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for i, x in enumerate(numbers) if i == numbers.index(x)]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_list = []\n    for number in numbers:\n        if number not in new_list:\n            new_list.append(number)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    occurrences = {}\n    output = []\n    for number in numbers:\n        if number not in occurrences:\n            occurrences[number] = 0\n        occurrences[number] += 1\n    for key, value in occurrences.items():\n        if value == 1:\n            output.append(key)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    _len = len(numbers)\n    _no_duplicates = []\n    for i in range(_len):\n        if numbers[i] not in _no_duplicates:\n            _no_duplicates.append(numbers[i])\n    return _no_duplicates\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n    \n    \ndef poly_d(poly, d):\n    \"\"\"\n    Compute derivative of a polynomial at specified point\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join([\n        chr(ord(c) ^ ord('a') + ord('A')) if c.islower() else c\n        for c in string\n    ])\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(\n        [char.swapcase() if char.isupper() else char.swapcase() for char in string]\n    )\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([(char.upper() if char.isupper() else char.lower()) for char in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Solution 1\n    # new_string = \"\"\n    # for c in string:\n    #     if c.isupper():\n    #         new_string += c.lower()\n    #     elif c.islower():\n    #         new_string += c.upper()\n    #     else:\n    #         new_string += c\n    # return new_string\n    # Solution 2\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    flipped_string = ''\n    for c in string:\n        if c.isupper():\n            flipped_string += c.lower()\n        elif c.islower():\n            flipped_string += c.upper()\n        else:\n            flipped_string += c\n    return flipped_string\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n    \n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    concatenated = \"\"\n    for strng in strings:\n        concatenated += strng\n    return concatenated\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    positive = []\n    for x in l:\n        if x > 0:\n            positive.append(x)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # hint: use filter()\n    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    #if not n % 2 or n % 3:\n    #    return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3, int(n**0.5 + 1), 2))\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 2:\n        return True\n    elif n < 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, n // 2, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n > 1 and all(n%i for i in range(2, int(math.sqrt(n))+1))\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if not any(xs):\n        raise ValueError(\"Coefficients of polynomial must not be zero.\")\n    if max(xs) == 0:\n        raise ValueError(\"Coefficients of polynomial must have non zero largest coefficient.\")\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if i == 0:\n            return -xs[i] / xs[i + 1]\n        if xs[i] * xs[i + 1] > 0:\n            raise ValueError(\"Coefficients of polynomial must have opposite signs.\")\n        if xs[i] * xs[i + 1] == 0:\n            return -xs[i] / xs[i + 1]\n        if i == len(xs) - 1:\n            return xs[i] / xs[i - 1]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    if len(xs) % 2 == 1:\n        return None\n    zeroes = [x for x in xs if x == 0]\n    if len(zeroes) == 0:\n        return None\n    for i in range(0, len(zeroes), 2):\n        if zeroes[i]!= zeroes[i+1]:\n            return -(zeroes[i] / zeroes[i+1])\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    poly_x = poly(xs[::-1], 1.0)\n    while poly_x > 0.0:\n        for i, coeff in enumerate(xs[::-1]):\n            xs[-i - 1] -= coeff / poly_x\n        poly_x = poly(xs[::-1], 1.0)\n    return xs[::-1][0]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(xs) % 2 == 1:\n        return None\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    # Note: (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    delta = math.pow(xs[1], 2) - 4 * xs[0] * xs[2]\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return -xs[2] / (2 * xs[0])\n    else:\n        return -xs[2] * 1j / (2 * xs[0])\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(xs) % 2:\n        return None\n    # Sort the coefficients in descending order.\n    xs.sort(reverse=True)\n    for i in range(0, len(xs), 2):\n        # If there are non zero coefficients at both ends of the list,\n        # the polynomial will have no solution.\n        if xs[i] and xs[i + 1]:\n            return None\n        # If there are only non zero coefficients on one end of the list,\n        # the polynomial will have no solution.\n        if xs[i] or xs[i + 1]:\n            return -xs[i] / xs[i + 1]\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0 and i % 2 == 0:\n            return i / 2\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # find first non-zero coefficient\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            # find index j such that coeff * (x - xs[j]) is non zero\n            for j, other_coeff in enumerate(xs):\n                if coeff * (j - i)!= 0:\n                    break\n            else:\n                # if all coefficients are zero\n                raise ValueError(f'no non-zero coefficient found in {xs}')\n            break\n    # since xs[i] is non-zero, xs[i] - xs[j] is a coefficient of a polynomial\n    # we know a root of the polynomial (x - xs[j]) is zero\n    return xs[j] - xs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not len(xs) % 2:\n        raise ValueError('len(xs) must be odd')\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if xs:\n        assert len(xs) % 2 == 0\n        if len(xs) > 0:\n            # if polynomial is 0 at x = 0, then find_zero returns zero\n            assert xs[-1]!= 0\n            if len(xs) > 1:\n                # x = - poly(xs) / poly(xs[1:])\n                return -xs[0] / xs[-1]\n            else:\n                # x = - poly(xs) / poly(xs[0])\n                return -xs[0] / xs[0]\n    return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(xs) % 2 == 1 or max(xs) == 0:\n        return None\n    if all(poly(xs, i) == 0 for i in range(len(xs))):\n        return len(xs) // 2\n    else:\n        return -1\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    divByThree = []\n    notDivByThree = []\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = l[:]\n    l.sort()\n    return [l[i] for i in range(len(l)) if i % 3 == 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n    l_new.sort()\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return l[::-3] + l[1::3] + l[2::3]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    list_out = list()\n    for item in l:\n        if item % 3!= 0:\n            list_out.append(item)\n    list_out = sorted(list_out)\n    i = 0\n    for item in l:\n        if item % 3 == 0:\n            l[i] = list_out[-1]\n            list_out.pop()\n        i += 1\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l.sort()\n    l1 = []\n    for i in l:\n        if i%3 == 0:\n            l1.append(i)\n        else:\n            l1.append(l[len(l)-1])\n    return l1\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l2 = []\n    for i in l:\n        if i % 3!= 0:\n            l2.append(i)\n        else:\n            l2.append(l[l.index(i)])\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(l, list), \"l is not a list\"\n    l2 = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    index = 0\n    for i in l:\n        if i % 3!= 0:\n            l[index] = i\n            index += 1\n    l[:] = l[:index] + sorted(l[index:])\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return sorted(set(l))\n    r = []\n    for e in l:\n        if e not in r:\n            r.append(e)\n    return r\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(set(l))\n    \ndef map_and_filter(l: list, f):\n    \"\"\"Maps f over l, then filters the result\n    >>> items = [5, 3, 7, 2, 1, 0, 4, 8]\n    >>> def is_odd(x): return x % 2 == 1\n    >>> map_and_filter(items, is_odd)\n    [1, 3, 7, 4, 8]\n    \"\"\"\n    return unique(filter(f, l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    uniq = []\n    [uniq.append(i) for i in l if not uniq or i > uniq[-1]]\n    return uniq\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for x in l:\n        if x not in res:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Initialize maximum element\n    maximum = l[0]\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_num = l[0]\n    for elem in l:\n        if elem > max_num:\n            max_num = elem\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        raise ValueError('List is empty')\n    max_so_far = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_so_far:\n            max_so_far = l[i]\n    return max_so_far\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return l[0] if len(l) == 1 else max(l[0], max_element(l[1:]))\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    return l[-1]\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert l!= [], 'Cannot find maximum element of empty list'\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = l\n    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n // 11 - (n // 13) - (n // 7)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # the number of times the 7 appears in the integers less than n which are divisible by 11 or 13\n    return sum(str(n)[i] == \"7\" for i in range(len(str(n))))\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n    \n    # 7s\n    sevens = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            sevens += 1\n    \n    return sevens\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            i += 1\n        else:\n            i += 0\n    return i\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 11 == 0:\n        return (n // 11) * 3\n    elif n % 13 == 0:\n        return (n // 13) * 2\n    elif n % 7 == 0:\n        return (n // 7)\n    else:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    counter = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    total = 0\n    for x in range(1, n):\n        if (x % 11 == 0) or (x % 13 == 0):\n            total += 1\n    return total\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l1 = l[0::2]\n    l2 = sorted(l[1::2])\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_list = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            new_list.append(l[index])\n        else:\n            new_list.append(sorted(l)[index])\n    return new_list\n    \n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l1 = []\n    l2 = []\n    for i in range(0,len(l),2):\n        l1.append(l[i])\n    for i in range(1,len(l),2):\n        l2.append(l[i])\n    l2.sort()\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert isinstance(l, list), 'l must be a list'\n    new_l = []\n    for i in range(1, len(l), 2):\n        new_l.append(l[i])\n    for i in range(0, len(l), 2):\n        if i < len(l):\n            new_l.append(l[i])\n    return new_l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l_new = l[:2] + sorted(l[2:])\n    return l_new"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in range(1, len(l), 2):\n        l2.append(l[i])\n    l2 = l2 + [l[i] for i in range(0, len(l), 2) if i % 2 == 1]\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    odd_l = l[1::2]\n    even_l = sorted(l[::2])\n    return [even_l[i] if i < len(even_l) else odd_l[i - len(even_l)] for i in range(len(l))]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort(key = lambda x: x%2, reverse = True)\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return l[1::2] + [x for x in sorted(l[0::2])]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l_copy = l[:]\n    l_copy.sort(key=lambda x: x if x%2==0 else l_copy[int(x/2)])\n    return l_copy\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([group[-1] + group[:-1] for group in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = encode_cyclic(s)\n    s = s[::-1]\n    return s\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[2:] + group[0:2] for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    groups = [s[i:min((i + 3), len(s))] for i in range(0, len(s), 3)]\n    groups = [(group[2] + group[1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # determine length of string, split into groups of 3.\n    n = len(s)\n    groups = [(s[(3 * i):min((3 * i + 3), n)] for i in range((n + 2) // 3))]\n    # loop over groups.\n    for i, group in enumerate(groups):\n        # cyclically reverse each group.\n        groups[i] = group[::-1]\n    # add groups together.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # iterate over groups of 3.\n    # for each group:\n    #   if the group is already 3 characters long, do nothing.\n    #   else:\n    #       decode the group, insert it back into the string.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] if len(group) == 3 else (group + group[0]) for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join([g[1] + g[0] for g in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s) % 3!= 0:\n        raise ValueError(\"input string is not encoded by encode_cyclic function.\")\n    s = [s[i:i + 3] for i in range(0, len(s), 3)]\n    s = [\"\".join(x) for x in zip(*s)]\n    return s[0]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1:\n        raise ValueError('n must be > 0')\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 2\n    b = 3\n    c = 5\n    for i in range(1, n-1):\n        a, b, c = b, c, b + c\n    return b\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    a = 1\n    b = 2\n    \n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        for i in range(2, n):\n            a, b = b, a+b\n        return b\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    prime_list = []\n    fib_list = []\n    for i in range(n):\n        if is_prime(i):\n            prime_list.append(i)\n        fib_list.append(fib(i))\n    for i in range(n):\n        if fib_list[i] in prime_list:\n            return fib_list[i]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    p = 2\n    a, b = 1, 1\n    while b < n:\n        p += 1\n        a, b = b, a+b\n    return p\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    first = 0\n    second = 1\n    i = 2\n    while i <= n:\n        first, second = second, second + first\n        i += 1\n    if is_prime(second):\n        return second\n    else:\n        return None\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    fib = 1\n    # make sure n is greater than 1\n    if n < 2:\n        return 2\n    \n    # iterate over i from 2 to n\n    for i in range(2, n):\n        fib = fib + i\n    \n    # check if fib is a prime number\n    if isPrime(fib):\n        return fib\n    return False\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    i = 2\n    while True:\n        if is_prime(i):\n            fib = fibonacci(i)\n            if fib == n:\n                return i\n            elif fib > n:\n                break\n        i += 1\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert type(n) == int and n > 0\n    return sum_of_primes(n)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def fib(n: int):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 3\n        else:\n            return fib(n-1) + fib(n-2)\n    assert is_prime(fib(n))\n    return fib(n)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    fib = [1, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    while not is_prime(fib[-1]):\n        fib[-1] += 1\n    return fib[-1]\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return any([sum(l[i:i+3]) == 0 for i in range(len(l))])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        seen.add(i)\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(l) < 3:\n        return False\n    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(i)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pas"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l = [int(i) for i in l]\n    for a in l:\n        for b in l:\n            for c in l:\n                if a!= b and a!= c and b!= c and a + b + c == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set([elem for elem in l if elem <= 0])) == 3\n    # return sum([elem for elem in l if elem <= 0]) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = set()\n    for i in l:\n        if i in a:\n            return True\n        else:\n            a.add(i)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(l) == 0 and len(set(l)) == len(l)\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # \"set\" of sums, dict of sums and counts\n    sums = set()\n    sums_and_counts = {}\n    for i in l:\n        sums_and_counts[i] = sums_and_counts.get(i, 0) + 1\n        sums.add(i)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(n) for j in range(i + 1, n) if abs(i - j) % (n // 2) == 0)"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n    # your code here\n    \ndef test_car_race_collision():\n    assert car_race_collision(3) == 2\n    assert car_race_collision(10) == 4\n    assert car_race_collision(100) == 8\n    assert car_race_collision(1000) == 400\n    assert car_race_collision(10000) == 8000\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            left = [i, j]\n            right = [j, i]\n            if car_race(left, right):\n                return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for _ in range(n) for _ in range(n))\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    cars = [(-1)**(i) for i in range(n)]\n    pairs = [cars[i:i+2] for i in range(0,len(cars),2)]\n    return sum(1 for pair in pairs if pair[0] == pair[1])\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Base Case\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(int(collision(i, i + 1) > 0) for i in range(n))\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    cars = {0: [1, 0, 0],\n            1: [0, 1, 0],\n            2: [1, 1, 0],\n            3: [2, 1, 0],\n            4: [0, 2, 0],\n            5: [1, 2, 0],\n            6: [2, 2, 0],\n            7: [0, 3, 0],\n            8: [1, 3, 0],\n            9: [2, 3, 0],\n            10: [0, 4, 0],\n            11: [1, 4, 0],\n            12: [2, 4, 0],\n            13: [3, 4, 0],\n            14: [0, 5, 0],\n            15: [1, 5, 0],\n            16: [2, 5, 0],\n            17: [3, 5, 0],\n            18: [4, 5, 0],\n            19: [0, 6, 0],\n            20: [1, 6, 0],\n            21: [2, 6, 0],\n            22: [3, 6, 0],\n            23: [4, 6, 0],\n            24: [0, 7, 0],\n            25: [1, 7, 0],\n            26: [2, 7, 0],\n            27: [3, 7, 0],\n            28: [4, 7, 0],\n            29: [0, 8, 0],\n            30: [1, 8, 0],\n            31: [2, 8, 0],\n            32: [3, 8, 0],\n            33: [4, 8, 0],\n            34: [0, 9, 0],\n            35: [1, 9, 0],\n            36: [2, 9, 0],\n            37: [3, 9, 0],\n            38: [4, 9, 0],\n            39: [0, 10, 0],\n            40: [1, 10, 0],\n            41: [2, 10, 0],\n            42: [3, 10, 0],\n            43: [4, 10, 0],\n            44: [0, 11, 0],\n            45: [1, 11, 0],\n            46: [2, 11, 0],\n            47: [3, 11, 0],\n            48: [4, 11, 0],\n            49: [0, 12, 0],\n            50: [1, 12, 0],\n            51: [2, 12, 0],\n            52: [3, 12, 0],\n            53: [4, 12, 0],\n            54: [0, 13, 0],\n            55: [1, 13, 0],\n            56: [2, 13, 0],\n            57: [3, 13, 0],\n            58: [4, 13, 0],\n            59: [0, 14, 0],\n            60: [1, 14, 0],\n            61: [2, 14, 0],\n            62: [3, 14, 0],\n            63: [4, 14, 0],\n            64: [0, 15, 0],\n            65: [1, 15, 0],\n            66: [2, 15, 0],\n            67: [3, 15, 0],\n            68: [4, 15, 0],\n            69: [0, 16, 0],\n            70: [1, 16, 0],\n            71: [2, 16, 0],\n            72: [3, 16, 0],\n            73: [4, 16, 0],\n            74: [0, 17, 0],\n            75: [1, 17, 0],\n            76: [2, 17, 0],\n            77: [3, 17, 0],\n            78: [4, 17, 0],\n            79: [0, 18, 0],\n            80: [1, 18, 0],\n            81: [2, 18, 0],\n            82: [3, 18, 0],\n            83: [4, 18, 0],\n            84: [0, 19, 0],\n           "
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # 0 <= n <= 100\n    assert 1 <= n <= 100\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert isinstance(n, int) and n > 0, 'n must be a positive integer'\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_l = []\n    for element in l:\n        new_l.append(element + 1)\n    return new_l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = list(l)\n    for i in range(len(l)):\n        result[i] += 1\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x+1 for x in l]\n    \ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [9, 8, 9, 7, 8, 7, 1, 0, 124]\n    \"\"\"\n    return [x-1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l2 = [x + 1 for x in l]\n    return l2\n    \n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    all_pairs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            all_pairs.append((l[i], l[j]))\n    return any(sum(pair) == 0 for pair in all_pairs)\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    memo = {}\n    for i in l:\n        if i in memo:\n            return True\n        else:\n            memo[-i] = True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    from itertools import combinations\n    l.sort()\n    for x,y in combinations(l, 2):\n        if x == y:\n            continue\n        if x+y == 0:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(0, len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # make a set of the values in the list, remove duplicates, and sort them\n    seen = set()\n    numbers = sorted([i for i in l if i not in seen and not seen.add(i)])\n    # now test each pair of numbers\n    for i in range(len(numbers) - 1):\n        if -numbers[i] == numbers[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = set(l)\n    for i in s:\n        if -i in s:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    list_ = set(l)\n    for x in list_:\n        if -x in list_:\n            return True\n    return False\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED. GREAT!\\n\""
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # YOUR CODE GOES HERE\n    a = set()\n    for i in l:\n        if i in a:\n            return True\n        a.add(i)\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if base < 10:\n        return str(x)\n    if x == 0:\n        return \"0\"\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert type(x) == int and x >= 0, 'invalid input'\n    assert base < 10, 'invalid base'\n    if x == 0:\n        return '0'\n    digits = []\n    while x!= 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    q = x // base\n    r = x % base\n    if q == 0:\n        return str(r)\n    else:\n        return change_base(q, base) + str(r)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x > 0:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if x == 0:\n        return '0'\n    num = ''\n    while x > 0:\n        num += digits[x % base]\n        x //= base\n    return num[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x <= 0:\n        return '0'\n    elif x < base:\n        return str(x)\n    elif x % 10 == 0:\n        return change_base(x // 10, base) + '0'\n    else:\n        return change_base(x // 10, base) + chr(ord('a') + x % 10 - 1)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # if base is greater than 10, then raise an error.\n    if base > 10:\n        raise ValueError('Base should be less than or equal to 10.')\n    else:\n        # define empty string 'output'.\n        output = ''\n        # change numerical base of input x to base.\n        # if base is 1, then just return the input x.\n        if base == 1:\n            output = str(x)\n        # if base is greater than 1, then start converting from\n        # base to base.\n        else:\n            while x > 0:\n                # if the last digit is 0, then the remainder is 0.\n                if x % base == 0:\n                    output += '0'\n                # if the last digit is not 0, then the remainder is a\n                # digit.\n                else:\n                    output += str(x % base)\n                # shift the input x by 1.\n                x = x // base\n            # reverse the output string.\n            output = output[::-1]\n        # return the output.\n        return output\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    digs = string.digits + string.ascii_letters\n    if x < base:\n        return digs[x]\n    else:\n        return change_base(x // base, base) + digs[x % base]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    d = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f', 16: 'g', 17: 'h', 18: 'i', 19: 'j', 20: 'k', 21: 'l', 22:'m', 23: 'n', 24: 'o', 25: 'p', 26: 'q', 27: 'r', 28:'s', 29: 't', 30: 'u', 31: 'v', 32: 'w', 33: 'x', 34: 'y', 35: 'z'}\n    result = ''\n    for i in str(x):\n        if i not in d:\n            return 'Invalid input'\n        result += d[i]\n    return result"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    area =.5 * a * h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return float(0.5 * a * h)\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a = 0\n        b = 1\n        c = 2\n        for i in range(2,n):\n            temp = a + b + c\n            a = b\n            b = c\n            c = temp\n        return temp\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 4:\n        return 1 if n == 0 else 0\n    else:\n        a, b = 1, 0\n        for _ in range(3, n+1):\n            c = a + b\n            a, b = b, c\n        return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 3:\n        return 1\n    a, b, c = 0, 1, 1\n    for i in range(3, n):\n        a, b, c = b, c, a + b + c\n    return c\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 4:\n        return n\n    a, b = 0, 1\n    for i in range(4, n + 1):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a, b, c, d = 0, 0, 1, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d\n    \ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    a, b, c, d, e = 0, 0, 1, 1, 1\n    for _ in range(n):\n        a, b, c, d, e = b, c, e, a+b+c+d, e\n    return e\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0: return 0\n    a, b = 0, 1\n    for _ in range(n): a, b = b, a+b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 2:\n        return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        fib4_n_1 = 2\n        fib4_n_2 = 0\n        fib4_n_3 = 1\n        fib4_n_4 = 0\n        for i in range(5, n+1):\n            fib4_n_4 = fib4_n_3 + fib4_n_2 + fib4_n_1 + fib4_n_4\n            fib4_n_3 = fib4_n_2\n            fib4_n_2 = fib4_n_1\n            fib4_n_1 = fib4_n_4\n        return fib4_n_4\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 1:\n        return sorted(l)[len(l) // 2]\n    else:\n        return (sorted(l)[len(l) // 2 - 1] + sorted(l)[len(l) // 2]) / 2.0\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = sorted(l)\n    return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid - 1]) / 2\n    \ndef histogram(values: list, density=False):\n    \"\"\"\n    >>> histogram([0.0, 0.0, 1.0, 1.0, 2.0, 3.0])\n    [0.0, 0.0, 1.0, 1.0, 2.0, 3.0]\n    >>> histogram(['a', 'b', 'c', 'd', 'e'], density=True)\n    [0.0, 0.5, 0.5, 0.0, 0.0]\n    \"\"\"\n    # remove duplicates, if any\n    values = list(set(values))\n    # order the values\n    values.sort()\n    # initialize histogram\n    hist = [0.0] * (len(values) + 1)\n    for i in range(len(values)):\n        hist[values[i]] = hist[values[i]] + 1.0\n    # return the histogram\n    if density == True:\n        for i in range(len(hist)):\n            hist[i] = hist[i] / len(values)\n    return hist\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_l = sorted(l)\n    return (sorted_l[len(sorted_l) // 2] + sorted_l[(len(sorted_l) // 2) - 1]) / 2.0\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert len(l) >= 1, 'Cannot calculate median of less than 2 elements'\n    l.sort()\n    return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    return l[int(len(l) / 2)] if len(l) % 2 == 1 else (l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    mid = len(l)//2\n    sortedL = sorted(l)\n    if len(l) % 2 == 0:\n        return (sortedL[mid] + sortedL[mid - 1])/2.0\n    else:\n        return sortedL[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(l)/len(l)\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    text = text.lower()\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Edge case: Empty string\n    if not text:\n        return True\n    # Edge case: Only one letter\n    if len(text) == 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return text[::-1] == text\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(text, str), 'Argument must be a string'\n    text = text.lower()\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return pow(2, n) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return pow(n, p, MOD)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (modp(n - 1, p) * p) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def modp_helper(n, p):\n        if n == 0:\n            return 1\n        else:\n            return (modp_helper(n//2, p)**2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (2 * modp(n-1, p)) % p\n    else:\n        return (modp(n/2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (modp(n - 1, p) * (n - 1) * p + modp(n // 2, p)) % p\n    else:\n        return modp(n // 2, p) ** 2"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (modp(n-1, p) * p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    r = 1\n    while n:\n        if n & 1:\n            r = (r * n) % p\n        n = n >> 1\n    return r\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    return (2 * modp(n - 1, p) % p)\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_text = new_text + char\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_text = \"\"\n    vowels = \"aeiouAEIOU\"\n    for i in text:\n        if i in vowels:\n            continue\n        else:\n            new_text += i\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join([l for l in text if l not in vowels])\n    \ndef main():\n    print(\"Enter a string:\")\n    text = input()\n    print(remove_vowels(text))\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    res = ''\n    for x in text:\n        if x in vowels:\n            res += x\n    return res\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    text_vowels = ''\n    for char in text:\n        if char in vowels:\n            continue\n        else:\n            text_vowels += char\n    return text_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # your code here\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = ''\n    for letter in text:\n        if letter not in vowels:\n            new_str += letter\n    return new_str\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ['a','A','e','E','i','I','o','O','u','U']\n    new_text = ''\n    for letter in text:\n        if letter not in vowels:\n            new_text += letter\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    return \"\".join(filter(lambda x: x not in vowels, text))\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = \"aeiou\"\n    res = \"\"\n    for c in text:\n        if c not in vowels:\n            res += c\n    return res\n    \ndef get_text():\n    \"get_text is a function that takes no argument and returns string.\"\n    return raw_input(\"Enter some text: \")\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c.lower() not in vowels)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for e in l:\n        if e < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all([number < t for number in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len([i for i in l if i < t]) == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(el < t for el in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s0 = sorted(s0)\n    s1 = sorted(s1)\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    for c in s0:\n        if c not in s1:\n            return False\n        s1 = s1.replace(c, '')\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s0[0] == s1[0] and s0[1] == s1[1]\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    global numFibCalls\n    numFibCalls += 1\n    if n <= 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # We have created the cache:\n    if n <= 1:\n        return 1\n    else:\n        if n not in cache:\n            cache[n] = fib(n - 1) + fib(n - 2)\n        return cache[n]\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = []\n    for i in range(0, len(brackets)):\n        if brackets[i] == \">\":\n            l.append(\"<\")\n        elif brackets[i] == \"<\":\n            if l == []:\n                return False\n            else:\n                l.pop()\n    return len(l) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \">\":\n            count += 1\n        else:\n            count -= 1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    opening = 0\n    for s in brackets:\n        if s == \"<\":\n            opening += 1\n        else:\n            opening -= 1\n            if opening < 0:\n                return False\n    return opening == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    bracket_map = {\n    \"<\": \">\",\n    \">\": \"<\",\n    \"{\": \"}\",\n    \"}\": \"{\",\n    \"]\": \"[\",\n    \"}\": \"[\",\n    \"}\": \"{\",\n    \"}\": \"[\",\n    \"[\": \"]\",\n    \"]\": \"{\",\n    \"}\": \"{\",\n    \"|\": \"|\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\",\n    \"<\": \">\","
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for c in brackets:\n        if c == \"<\":\n            result.append(c)\n        elif c == \">\" and result!= []:\n            result.pop()\n    return result == []\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # use a stack to remember open brackets\n    # compare open to close, close to open, push on open, pop if close\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if len(stack) > 0:\n                top = stack.pop()\n            else:\n                return False\n        elif bracket == \"<\":\n            stack.append(bracket)\n        else:\n            continue\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(\"<\")\n        elif bracket == \">\":\n            if len(bracket_stack) == 0:\n                return False\n            elif bracket_stack.pop()!= \"<\":\n                return False\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] >= l[i + 1] for i in range(len(l) - 1)) or all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(1, len(l)):\n        if l[i-1] > l[i]:\n            return False\n        elif l[i-1] < l[i]:\n            return True\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l1.sort()\n    l2.sort()\n    count1 = count2 = 0\n    result = []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l1.sort()\n    l2.sort()\n    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(sorted(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def _is_prime(n: int):\n        \"\"\"Return True if n is prime; else False.\"\"\"\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5 + 1), 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def _largest_prime_factor_helper(n: int):\n        \"\"\"Return the largest prime factor of n. Assume n is positive.\"\"\"\n        for i in range(int(n/2), 1, -1):\n            if n % i == 0 and _is_prime(i):\n                return i\n        return n\n    return _largest_prime_factor_helper(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n    \ndef sum_of_divisors(n: int):\n    \"\"\"Return the sum of the divisors of n.\n    >>> sum_of_divisors(13195)\n    11641\n    >>> sum_of_divisors(2048)\n    42\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum(set(range(1, n // 2 + 1) + [n]))\n        \ndef is_abundant(n: int):\n    \"\"\"Is n a sum of two abundant numbers?\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(18)\n    True\n    >>> is_abundant(19)\n    False\n    \"\"\"\n    if n < 12:\n        return False\n    if n == 12:\n        return True\n    else:\n        return sum(set(range(1, n // 2 + 1) + [n])) > n\n    \ndef factorize(n: int):\n    \"\"\"Return the factorization of n as a list of (prime, multiplicity) pairs.\n    >>> factorize(25)\n    [(5, 2)]\n    >>> factorize(36)\n    [(2, 3)]\n    >>> factorize(12)\n    [(2, 2), (3, 1)]\n    >>> factorize(14)\n    [(7, 1), (7, 1)]\n    \"\"\"\n    if n == 1:\n        return []\n    if n < 4:\n        return []\n    if n % 2 == 0:\n        return [(2, n // 2)]\n    elif n % 3 == 0:\n        return [(3, n // 3)]\n    elif n % 5 == 0:\n        return [(5, n // 5)]\n    else:\n        return [(2, n // 2), (3, n // 3), (5, n // 5)]\n        \ndef is_perfect(n: int):\n    \"\"\"Is n a perfect number?\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(12)\n    False\n    >>> is_perfect(28)\n    True\n    >>> is_perfect(29)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    else:\n        sum_of_divisors = sum(set(range(1, n // 2 + 1) + [n]))\n        return sum_of_divisors == n\n    \ndef is_abundant(n: int):\n    \"\"\"Is n a sum of two abundant numbers?\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(18)\n    True\n    >>> is_abundant(19)\n    False\n    \"\"\"\n    if n < 12:\n        return False\n    if n == 12:\n        return True\n    else:\n        return sum(set(range(1, n // 2 + 1) + [n])) > n\n    \ndef is_deficient(n: int):\n    \"\"\"Is n a deficient number?\n    >>> is_deficient(12)\n    False\n    >>> is_deficient(18)\n    False\n    >>> is_deficient(19)\n    True\n    \"\"\"\n    if n < 12:\n        return False\n    if n == 12:\n        return True\n    else:\n        return sum(set(range(1, n // 2 + 1) + [n])) < n\n        \ndef is_deficient(n: int):\n    \"\"\"Is n a deficient number?\n    >>> is_deficient(12)\n    False\n    >>> is_deficient(18)\n    False\n    >>> is_deficient(19)\n    True\n    \"\"\"\n    if n < 12:\n        return False\n    if n == 12:\n        return True\n    else:\n        return sum(set(range(1, n // 2 + 1) + [n])) < n\n        \ndef is_deficient(n: int):\n    \"\"\"Is n a deficient number?\n    >>> is_deficient(12)\n    False\n    >>> is_deficient(18)\n    False\n    >>> is_deficient(19)\n    True\n    \"\""
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        largest_prime_factor(n // 2)\n    else:\n        n -= 1\n        while n % 2 == 0:\n            n //= 2\n        largest_prime_factor(n)\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert n > 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"\"\"\n    assert n > 1\n    f = 2\n    while n % f!= 0:\n        f += 1\n    return f\n    \"\"\"\n    f = 2\n    while f < n:\n        if n % f == 0:\n            n /= f\n        else:\n            f += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    num = n\n    i = 2\n    while i*i <= num:\n        if num % i == 0:\n            num = num / i\n        else:\n            i += 1\n    if num > 1:\n        return num\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert n > 1\n    prime = 2\n    while n > prime:\n        if n % prime == 0:\n            return prime\n        prime += 1\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n    \ndef sum_to_n_n(n):\n    \"\"\"sum_to_n_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_n(30)\n    465\n    >>> sum_to_n_n(100)\n    5050\n    >>> sum_to_n_n(5)\n    15\n    >>> sum_to_n_n(10)\n    55\n    >>> sum_to_n_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i*i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #lst = []\n    #for i in range(n+1):\n        #lst.append(i)\n    #return sum(lst)\n    return sum(range(n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum, k = 0, 1\n    while k <= n:\n        sum += k\n        k += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return n * (n + 1) // 2\n    \ndef multiply_to_n(n: int):\n    \"\"\"multiply_to_n is a function that multiplies numbers from 1 to n.\n    >>> multiply_to_n(30)\n    225\n    >>> multiply_to_n(100)\n    100\n    >>> multiply_to_n(5)\n    30\n    >>> multiply_to_n(10)\n    36\n    >>> multiply_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return n\n    return n * multiply_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum, i = 0, 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(range(n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bracket_pairs = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    for b in brackets:\n        if b in bracket_pairs:\n            stack.append(b)\n        elif b in bracket_pairs.values():\n            if stack == [] or bracket_pairs[stack.pop()]!= b:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(\"(\")\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(u'(' == b for b in brackets) and all(u')' == b for b in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return brackets == ''.join(list(map(correct_bracketing, brackets)))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\" or bracket == \")\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if stack[-1] == \")\":\n                    return False\n                else:\n                    stack.pop()\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [xs[i]*i for i in range(1, len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [1] + [x * i for i, x in enumerate(xs[1:])]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(xs) > 0\n    der = [xs[i] for i in range(1, len(xs))]\n    der[0] = xs[0] * len(xs)\n    return der\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(xs) <= 1:\n        return []\n    return [xs[i] * (i + 1) for i in range(len(xs) - 1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # init derivative\n    deriv = [0] * (len(xs) - 1)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    poly = []\n    for i in range(1, len(xs)):\n        poly.append(i * xs[i])\n    return poly\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    ans = []\n    for i in range(1, len(xs)):\n        ans.append(i * xs[i])\n    return ans\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i * j for i, j in zip(xs[1:], xs[:-1])]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(xs) == 1:\n        return [0]\n    elif len(xs) == 2:\n        return [xs[1]]\n    elif len(xs) == 3:\n        return [xs[1] * 2, xs[0] * 2]\n    else:\n        return [xs[1] * i for i in range(len(xs) - 1)]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if n == 0 or n == 1:\n    #     return n\n    # return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib_new(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # start the recursion\n    if n < 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 3:\n        return 1\n    if n == 3:\n        return 2\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 0\n    # elif n == 2:\n    #     return 1\n    # elif n > 2:\n    #     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib_helper(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for i in s if i in 'aeiouy']) + (sum([1 for i in s[-1:] if i in 'aeiouy']) if s[-1:] in 'y' else 0)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(filter(lambda x: x in ['a', 'e', 'i', 'o', 'u', 'y'], s))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = ['a','e','i','o','u']\n    vowels_count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            vowels_count += 1\n        elif s[i] == 'y' and s[i-1] == 'a':\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowel = 0\n    for i in s:\n        if i in \"aeiou\":\n            vowel += 1\n    return vowel + (1 if s[-1] in \"aeiouy\" else 0)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n        if i == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(s.count(c) for c in 'aeiouyAEIOUY') + (s.count('y') if s.endswith('y') else 0)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        elif char == 'y':\n            if s[-1] == 'y':\n                count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = set('aeiou')\n    vowels_in_word = set(s) & vowels\n    return len(vowels_in_word)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\") + s.count(\"y\")\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = str(abs(x))\n    return s[shift:] + s[:shift] if shift > len(s) else s[-shift:] + s[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert x >= 0, 'positive numbers only'\n    str_x = str(x)\n    len_str_x = len(str_x)\n    res = ''\n    if len_str_x >= shift:\n        res = str_x[-shift:] + str_x[:-shift]\n    else:\n        res = str_x + (str_x + str_x)[-shift:]\n    return str(int(res))\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(int(str(x)[-shift:] + str(x)[:-shift]))"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert type(x) == int, 'x must be an integer'\n    assert type(shift) == int,'shift must be an integer'\n    n = len(str(x))\n    if shift > n:\n        x, shift = reverse(x), shift - n\n    return str(int(str(x)[shift:] + str(x)[:shift]))\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    shift %= len(str(x))\n    return str(x)[-shift:] + str(x)[:len(str(x))-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    digit_shift = abs(shift)\n    if digit_shift > x:\n        digit_shift = x\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(str(x))\n    if shift > n:\n        return str(x)[::-1]\n    shift = shift % n\n    return str(x)[n - shift:] + str(x)[:n - shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if shift > len(str(x)):\n        x = str(x)[::-1]\n    else:\n        x = str(x)[len(str(x))-shift:len(str(x))] + str(x)[0:len(str(x))-shift]\n    return x\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[-shift:]+str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    shift %= len(str(x))\n    return (str(x) + str(x)[:shift])[-shift:]\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(chr(ord(c)+32) for c in s if ord(c)>=65)"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([ord(i) for i in s if ord(i) > 64 and ord(i) < 91])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(map(ord,list(s)[:-1]) if s else [])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = s.upper()\n    res = 0\n    for i in s:\n        if ord(i) > 96:\n            res = res + ord(i) - 65\n    return res\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(ord(c) - ord('A') + 1 for c in s.upper() if ord(c) >= ord('A'))\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([ord(x) for x in s.upper() if ord(x)>=ord('A') and ord(x)<=ord('Z')])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(map(lambda x: ord(x)-ord('A')+1, s))\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return int(s) - n\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.count('mango')-s.count('orange')-s.count('apple')\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_digit(s):\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n - s.count('oranges') - s.count('apples')\n    \ndef is_prime(n):\n    \"\"\"\n    In this task, you will be given a number n, which is a positive integer less than 1000, \n    and you must determine whether the number n is prime or not.\n    Note that a positive integer n is prime if all of its positive divisors are distinct.\n    for example:\n    is_prime(6) -> false\n    is_prime(11) -> true\n    is_prime(97) -> true\n    is_prime(108) -> false\n    \"\"\"\n    return len(set(range(1,n+1))) == n\n    \ndef is_palindrome(n):\n    \"\"\"\n    In this task, you will be given a number n, which is a positive integer less than 1000, \n    and you must determine whether the number n is palindrome or not.\n    Note that a positive integer n is palindrome if it is equal to the number with its reverse.\n    for example:\n    is_palindrome(6) -> false\n    is_palindrome(121) -> true\n    is_palindrome(10) -> false\n    is_palindrome(23) -> false\n    \"\"\"\n    return str(n) == str(n)[::-1]\n    \ndef is_armstrong(n):\n    \"\"\"\n    In this task, you will be given a number n, which is a positive integer less than 1000, \n    and you must determine whether the number n is armstrong or not.\n    Note that an integer n is armstrong if the sum of the nth powers of its digits is equal to n.\n    for example:\n    is_armstrong(153) -> true\n    is_armstrong(371) -> true\n    is_armstrong(7) -> false\n    is_armstrong(370) -> false\n    \"\"\"\n    return n == sum(int(i)**3 for i in str(n))\n    \ndef is_pandigital(n,string):\n    \"\"\"\n    In this task, you will be given a number n, which is a positive integer less than 10 \n    and you must determine whether the number n is pandigital or not.\n    Note that a positive integer n is pandigital if its digits, when ordered, form a \n    series (with no duplicated digits) such that the first digit (in the series) is less \n    than the second digit, the second digit is less than the third digit, etc.\n    for example:\n    is_pandigital(7,7) -> true\n    is_pandigital(123,123) -> true\n    is_pandigital(123,456) -> false\n    is_pandigital(123,7) -> false\n    is_pandigital(123,87) -> false\n    is_pandigital(123,37) -> false\n    \"\"\"\n    return n == \"\".join(sorted(string))\n    \ndef is_super_pandigital(n,string):\n    \"\"\"\n    In this task, you will be given a number n, which is a positive integer less than 10 \n    and you must determine whether the number n is super pandigital or not.\n    Note that a positive integer n is super pandigital if its digits, when ordered, form \n    a series (with no duplicated digits) such that the first digit (in the series) is greater \n    than the second digit, the second digit is greater than the third digit, etc.\n    for example:\n    is_super_pandigital(7,7) -> true\n    is_super_pandigital(123,123) -> true\n    is_super_pandigital(123,456) -> false\n    is_super_pandigital(123,7) -> false\n    is_super_pandigital(123,87) -> false\n    is_super_pandigital(123,37) -> false\n    \"\"\"\n    return n == \"\".join(sorted(string)[::-1])\n    \ndef is_antipalindrome(n):\n    \"\"\"\n    In this task, you will be given a number n, which is a positive integer less than 1000, \n    and you must determine whether the number n is antipalindrome or not.\n    Note that an integer n is antipalindrome if it is equal to th"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.count('mango') - s.count('apple')\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert isinstance(n, int)\n    assert isinstance(s, str)\n    assert s.count(\"fruits\") >= 0\n    assert s.count(\"apples\") >= 0\n    assert s.count(\"oranges\") >= 0\n    assert s.count(\"mangoes\") >= 0\n    assert n > 0\n    assert s.count(\"fruits\") >= n\n    assert s.count(\"apples\") >= n\n    assert s.count(\"oranges\") >= n\n    assert s.count(\"mangoes\") >= n\n    return sum([1 for i in s.split() if i == \"mangoes\"]) - sum([1 for i in s.split() if i == \"apples\"]) - sum([1 for i in s.split() if i == \"oranges\"])\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.count(\"mango\")-s.count(\"apple\")-s.count(\"orange\")\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n_apples = int(s[0:s.index(\" \")])\n    n_oranges = int(s[s.index(\" \")+1:])\n    return n - n_apples - n_oranges\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # s, n = input().split()\n    # print(s,n)\n    if int(s) + int(n) == 100:\n        return 100 - int(s) - int(n)\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # check if it is an integer\n    if not isinstance(n,int):\n        return \"n must be an integer\"\n    # check if the string is empty\n    if not s:\n        return 0\n    # split the string by the commas\n    s = s.split(\",\")\n    # check if the number of fruits and the number of apples and oranges are the same\n    if int(s[0]) + int(s[1])!= int(n):\n        return \"the number of fruits and the number of apples and oranges are not the same\"\n    # initalize the counter\n    cnt = 0\n    # initialize the string to the letter and the counter\n    s = s[2]\n    cnt = cnt + 1\n    # for every element in the string\n    for i in s:\n        # check if it is an apple\n        if i == \"a\":\n            # check if the counter is equal to the total number of apples\n            if cnt == int(s[0]):\n                # update the counter\n                cnt = cnt + 1\n            else:\n                # return an error\n                return \"cannot be a fruit\"\n        # check if it is an orange\n        elif i == \"o\":\n            # check if the counter is equal to the total number of oranges\n            if cnt == int(s[1]):\n                # update the counter\n                cnt = cnt + 1\n            else:\n                # return an error\n                return \"cannot be a fruit\"\n        # check if it is a mango\n        elif i == \"m\":\n            # if the counter is equal to the total number of fruits\n            if cnt == n:\n                # update the counter\n                cnt = cnt + 1\n            else:\n                # return an error\n                return \"cannot be a fruit\"\n    # return the total number of mango fruits\n    return n - cnt\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def even_val(x):\n        return x%2 == 0\n    \n    arr.sort(key = even_val)\n    return arr if even_val(arr[0]) else []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def pluck_helper(arr, sm, ind):\n        if not arr:\n            return None\n        if len(arr) == 1:\n            return [sm, ind]\n        elif arr[0] % 2 == 0:\n            return pluck_helper(arr[1:], sm, ind+1)\n        elif arr[0] % 2 == 1:\n            return pluck_helper(arr[1:], sm+1, ind+1)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            result.append([arr[i], i])\n    if result:\n        return sorted(result, key=lambda x: x[0])[0]\n    else:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr: return []\n    i = j = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            if j == 0 or arr[i] < arr[j-1]:\n                j = i\n        i += 1\n    return [arr[j], j] if j!= 0 else []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    ans = []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nodes = []\n    for idx, node in enumerate(arr):\n        if node % 2 == 0:\n            nodes.append([node, idx])\n    nodes.sort(key=lambda node: node[0])\n    if not nodes:\n        return []\n    return nodes[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ans = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            ans.append([arr[i], i])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    frequency = [0]*(len(lst)+1)\n    for i in lst:\n        frequency[i] += 1\n    max = -1\n    for i in range(len(frequency)):\n        if frequency[i] > frequency[max] and frequency[i]>=i:\n            max = i\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = {}\n    for i in lst:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    max_freq = -1\n    for key, value in count.items():\n        if value > max_freq:\n            max_freq = value\n    return max_freq\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    d = Counter(lst)\n    for i, v in enumerate(sorted(d, key=lambda x: -d[x])):\n        if d[v] >= i:\n            return v\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return -1\n    max_freq = 0\n    max_int = -1\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            max_freq = lst.count(lst[i])\n            max_int = lst[i]\n        elif lst.count(lst[i]) > max_freq:\n            max_freq = lst.count(lst[i])\n            max_int = lst[i]\n    return max_int\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for n in lst:\n        if lst.count(n) >= n:\n            return n\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst.sort()\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    d = {}\n    for num in lst:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    for key, val in d.iteritems():\n        if val >= key:\n            return key\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    for key in freq:\n        if freq[key] >= key:\n            return key\n    return -1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #lst.sort()\n    #return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return lst\n    for i in range(len(lst)):\n        min_value = min(lst[i:])\n        for j in range(len(lst[i:])):\n            if lst[j] == min_value:\n                break\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        smallest = lst[0]\n        remaining_lst = [x for x in lst[1:] if x < smallest]\n        remaining_lst += [x for x in lst[1:] if x >= smallest]\n        return remaining_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst_new = []\n    for i in range(len(lst)):\n        lst_new.append(lst[lst.index(min(lst))])\n        lst.remove(min(lst))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if lst == []:\n        return []\n    lst_len = len(lst)\n    min_value = min(lst)\n    min_index = lst.index(min_value)\n    lst_min = lst[:min_index]\n    lst_max = lst[min_index:]\n    lst_min.reverse()\n    lst_min.extend(lst_max)\n    return lst_min\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_lst = sorted(lst)\n    min_ = sorted_lst[0]\n    sorted_lst[0] = sorted_lst[-1]\n    sorted_lst[-1] = min_\n    return sorted_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    sorted_lst = []\n    min_val = min(lst)\n    max_val = max(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not lst:\n        return []\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a*b*c)/2, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 0 or b < 0 or c < 0:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round((a + b + c) * (a + b - c) * (a + c - b) / (8*(a+b+c)))\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    side1 = a + b\n    side2 = b + c\n    side3 = c + a\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def valid_triangle(side_a, side_b, side_c):\n        return side_a + side_b > side_c and side_b + side_c > side_a and side_c + side_a > side_b\n    if not valid_triangle(a, b, c):\n        return -1\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return round(area, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        area = round(1.0*(a*b)/2, 2)\n        return area\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        return round((a * b) / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a, b, c = sorted([a, b, c])\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    return round((a * b * c) ** 0.5, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    side_a, side_b, side_c = sorted([a, b, c])\n    if side_a + side_b <= side_c:\n        return -1\n    return round((side_a + side_b - side_c) * (side_a + side_b - side_c) / 2, 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if is_it_balanced(q):\n        return is_it_less_equal(sum(q), w)\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_palindrome(l):\n        '''\n        Write a function that returns True if the list is a palindrome, and False otherwise.\n        '''\n        return l[:] == l[::-1]\n    return is_palindrome(q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # return True if it's balanced and the sum is <= 5\n    if is_palindromic(q) and sum(q) <= w:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(q)==1:\n        return q[0]<=w\n    else:\n        if not is_palindromic(q):\n            return False\n        else:\n            return sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def sum_palindrome(lst):\n        return sum(lst[:len(lst)//2]) == sum(lst[len(lst)//2:])\n    return sum_palindrome(q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return q == q[::-1] and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(q) % 2 == 0 and sum(q) <= w and is_palindrome(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pas"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if is_palindrome(q) == True:\n        return sum(q) <= w\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    num_odd = 0\n    for i in xrange(len(arr)):\n        if (arr[i] % 2):\n            num_odd += 1\n            if (num_odd > 1):\n                return -1\n    return num_odd"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    arr_len = len(arr)\n    hash_table = {}\n    for i in range(arr_len):\n        if arr[i] not in hash_table:\n            hash_table[arr[i]] = 1\n        else:\n            hash_table[arr[i]] += 1\n    odd_count = 0\n    for val in hash_table:\n        if hash_table[val] % 2 == 1:\n            odd_count += 1\n    if odd_count > 1:\n        return -1\n    else:\n        return arr_len - odd_count\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    smallest = len(arr)\n    for i in xrange(len(arr) / 2 + 1):\n        if is_palindrome(arr, i, len(arr) - 1 - i):\n            smallest = min(smallest, abs(i - len(arr) + i))\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return sum(abs(arr[i] - arr[~i]) for i in xrange(len(arr) / 2))"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Figure out what each element can do.\n    # -1 means that it cannot be changed to any other element\n    # 0 means that it can be changed to any other element\n    action_map = [[-1, -1] for x in range(len(arr))]\n    for i in range(len(arr)):\n        left_range = i - 1\n        right_range = i + 1\n        while left_range >= 0 and arr[i] == arr[left_range]:\n            action_map[left_range][0] = 0\n            left_range -= 1\n        while right_range < len(arr) and arr[i] == arr[right_range]:\n            action_map[right_range][1] = 0\n            right_range += 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smallest = min(arr)\n    for i in xrange(len(arr)):\n        if i == 0:\n            arr[i] = abs(arr[i] - smallest)\n        else:\n            arr[i] = min(arr[i], abs(arr[i] - smallest))\n    return sum(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # make a dictionary of how many times each element appears in the array\n    # we can only make change on elements that appear only once\n    # we want the number of changes to be as minimal as possible\n    # we only want to make as many changes as we need to get the array back to a palindrome\n    # we can only change elements that are at the start or end of the array\n    # how do we find out if the array is a palindrome?\n    # let's take a look at the array and see if we can find a middle element\n    # if we do, we can reverse the middle element to the end and the end element to the middle\n    # the number of changes to make is the length of the array minus the length of the middle element\n    # we can then compare the number of changes with each of the other elements to see which has the minimal number of changes\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_palindromic(arr):\n        \"\"\"\n        Return True if the array is a palindromic array, False otherwise.\n        \"\"\"\n        return arr == arr[::-1]\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            changes += 1\n            for j in range(i, len(arr)):\n                if arr[j] == i:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return changes\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in xrange(len(arr)):\n        count += min(abs(arr[i] - arr[len(arr) - 1 - i]), abs(arr[i] - arr[i]))\n    return count\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # lst1, lst2 = sorted(lst1), sorted(lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) > len(lst2):\n            return lst2\n        else:\n            return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return total_match_helper(lst1, lst2)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return lst1\n    if len(lst1) < len(lst2):\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2) and len(x) > 0]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst1) == 0:\n        return lst2\n    if len(lst2) == 0:\n        return lst1\n    if len(lst1) == len(lst2):\n        return lst1\n    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i for i in lst1 if len(i) < len(lst2)] + [i for i in lst2 if len(i) < len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1[len(lst1) - len(lst2):]\n    else:\n        return lst2[len(lst2) - len(lst1):]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return is_prime(2 * a) and is_prime(3 * a) and is_prime(5 * a)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for x in range(2, int(a ** (1/2)) + 1):\n        if a % x == 0:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a == 1:\n        return False\n    for i in xrange(2,a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a < 100:\n        return False\n    for i in range(2,int(a**(1/2))+1):\n        if a % i == 0 and is_prime(i):\n            if is_prime(a/i):\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a <= 100:\n        a_factors = prime_factorization(a)\n        for i in range(2, a / 2):\n            if i not in a_factors and a % i == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #YOUR CODE HERE\n    if is_prime(a) == False:\n        return False\n    \n    for i in range(2, a // 2 + 1):\n        if is_prime(i) == False:\n            continue\n        if a % i == 0:\n            return False\n        if is_prime(a // i) == False:\n            continue\n        if a % i == 0 and is_prime(a // i) == False:\n            continue\n        return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_prime(a):\n        return a > 1 and all(a % i for i in xrange(2, a))\n    p = [i for i in xrange(2,100) if is_prime(i)]\n    for i in xrange(len(p)-3):\n        for j in xrange(i+1,len(p)-2):\n            for k in xrange(j+1, len(p)-1):\n                if p[i]*p[j]*p[k] == a:\n                    return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a < 100:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Find all 3 primes, if any exist, multiply them\n    # Prime numbers are greater than 1. \n    def get_primes(num):\n        primes = []\n        is_prime = lambda x: all(x % i for i in range(2, x))\n        for i in range(2, num):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n    primes = get_primes(100)\n    if len(primes) > 0:\n        return all([a % x == 0 for x in primes])\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x == n**int(x)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n==1:\n        return True\n    if x==1:\n        return True\n    if n%2==0 and n!=2:\n        return False\n    else:\n        return is_simple_power(x, n//2)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x == n**int(str(n)[0])\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n**int(x) == x"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n==1:\n        return True\n    if n==0:\n        return False\n    if x==0:\n        return False\n    if x%n==0:\n        return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n ** int(x) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n ** int(log(x, n)) == x"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(x) == pow(n, int(x))\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x == n or x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n**int(x)==x"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return pow(a,3) == a"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a==0 or a==1 or a==-1 or a==3 or a==-3 or a==5 or a==-5 or a==7 or a==-7 or a==9 or a==-9 or a==11 or a==-11 or a==13 or a==-13 or a==15 or a==-15 or a==17 or a==-17 or a==19 or a==-19 or a==21 or a==-21 or a==23 or a==-23 or a==25 or a==-25 or a==27 or a==-27 or a==29 or a==-29 or a==31 or a==-31 or a==33 or a==-33 or a==35 or a==-35 or a==37 or a==-37 or a==39 or a==-39 or a==41 or a==-41 or a==43 or a==-43 or a==45 or a==-45 or a==47 or a==-47 or a==49 or a==-49\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # codigo aqui\n    return a**(1./3.) == int(a**(1./3.))\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a*a*a == a*a*a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (a**(1./3.)).is_integer()\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a >= 0:\n        if a**3 == a:\n            return True\n        else:\n            return False\n    elif a < 0:\n        return iscube(a*-1)\n    "
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(num) == 0:\n        return 0\n    elif len(num) == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(len(num)):\n            if int(num[i:i+1], 16) in [2, 3, 5, 7, 11, 13, 17]:\n                result += 1\n    return result\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        elif num <= 3:\n            return True\n        elif num%2 == 0 or num%3 == 0:\n            return False\n        i = 5\n        while i*i <= num:\n            if num%i == 0 or num%(i+2) == 0:\n                return False\n            i += 6\n        return True\n    count = 0\n    for i in xrange(len(num)):\n        if is_prime(int(num[i:],16)):\n            count += 1\n        if count == 2:\n            return i\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    num = int(num,16)\n    b = []\n    d = []\n    for i in range(2, num+1):\n        if num % i == 0:\n            b.append(i)\n    for j in b:\n        if j > 2 and j < num:\n            d.append(j)\n    a = len(d)\n    return a"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not num:\n        return 0\n    \n    n = len(num)\n    \n    # init counters\n    digit_counts = [0 for _ in range(10)]\n    \n    # count the digits\n    for i in range(n):\n        digit_counts[ord(num[i]) - ord('A')] += 1\n    \n    # check if the digit is prime\n    def is_prime(n):\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_counts = [0 for _ in range(10)]\n    \n    # count the primes\n    for i in range(10):\n        if digit_counts[i] > 0:\n            if is_prime(digit_counts[i]):\n                prime_counts[i] = 1\n    \n    # sum the counts\n    count = 0\n    for i in range(10):\n        count += prime_counts[i] * (10 - i)\n    \n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Hint: use the sympy library to determine whether a number is prime\n    return hex_to_dec(num)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    if num:\n        for i in range(len(num)):\n            for j in range(10,16):\n                if is_prime(int(num[i]+str(j), 16)) and is_prime(int(num[i][0]+str(j), 16)) and is_prime(int(num[i]+str(j), 16)) and is_prime(int(num[i][0]+str(j), 16)):\n                    count+=1\n        return count\n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if num == \"\":\n        return 0\n    else:\n        return len(filter(lambda x: isPrime(int(x)),\n            map(lambda x: num.count(x), set(num))))\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    from string import ascii_uppercase\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    chars = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5}\n    count = 0\n    for i, c in enumerate(num):\n        if chars[c] == 5:\n            return count\n        if i == 0:\n            chars[c] = 1\n            continue\n        if chars[c] == 1:\n            continue\n        if chars[num[i-1]] == 4:\n            chars[c] = 1\n            continue\n        if chars[num[i-1]] == 5:\n            continue\n        if chars[num[i-1]] == 3:\n            chars[c] = 1\n            continue\n        if chars[num[i-1]] == 2:\n            chars[c] = 1\n            continue\n        chars[c] = 1\n        count += 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bit_string = \"\"\n    \n    while decimal > 0:\n        bit_string += str(decimal % 2)\n        decimal //= 2\n    bit_string = 'db' + bit_string + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    binary = \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if decimal < 0:\n        raise ValueError('The decimal value must be positive')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary = \"\"\n    if decimal < 0:\n        return \"Incorrect number. No negative numbers allowed\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    binary_string = \"\"\n    while decimal:\n        binary_string += str(decimal%2)\n        decimal /= 2\n    binary_string = \"db\" + binary_string + \"db\"\n    return binary_string\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = \"\"\n    while decimal:\n        res += str(decimal % 2)\n        decimal = decimal // 2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not isinstance(decimal, int):\n        return None\n    if decimal == 0:\n        return \"db0\"\n    if decimal == 1:\n        return \"db1\"\n    binary = \"\"\n    while decimal > 0:\n        binary += \"1\" if decimal % 2 == 0 else \"0\"\n        decimal = decimal // 2\n    binary = \"db\" + binary[::-1] + \"db\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if decimal == 0:\n        return \"db\"\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    binary = \"db\" + binary[::-1]\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + str(binary) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if decimal == 0:\n        return '0'\n    elif decimal == 1:\n        return '1'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(s) >= 3 and s == s[0] + s[1] + s[2] and all(s[i]!= s[i+1] for i in range(len(s)-2))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(s) <= 2:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    return s[0]!= s[2] and s[1]!= s[3]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert isinstance(s, str)\n    s = s.lower()\n    d = defaultdict(int)\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n        d[s[i]] += 1\n    return len(d) > 0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    l = len(s)\n    if l < 3:\n        return False\n    c = set()\n    for i in range(0,l-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(s) > 2 and len(set(s[i:i+3] for i in range(len(s)-2))) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = len(s)\n    if l >= 3:\n        if l == 3:\n            return is_distinct(s)\n        else:\n            for i in range(0,l,3):\n                s1 = s[i:i+3]\n                if is_distinct(s1):\n                    if is_distinct(s1):\n                        if i!= 0:\n                            s2 = s[i-3:i]\n                            if is_distinct(s2):\n                                s3 = s[i-1:i+1]\n                                if is_distinct(s3):\n                                    s4 = s[i:i+2]\n                                    if is_distinct(s4):\n                                        return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_happy_helper(start, end, visited):\n        if start > end:\n            return True\n        if start == end:\n            return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(s) >= 3 and len(set(s[i:i + 3] for i in range(len(s) - 2))) == 1"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return []\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [grade_letter(gpa) for gpa in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Grading\n    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def f(grades):\n        a = [['A+', 'A', 'A-'], ['B+', 'B', 'B-'], ['C+', 'C', 'C-'], ['D+', 'D', 'D-'], ['F', 'E', 'E-']]\n        return [a[i][j] for i in range(len(a)) for j in range(len(a[i])) if grades[i] >= float(a[i][j])]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"F\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    grade_table = [('A+',4.0), ('A', 3.7), ('A-', 3.3), ('B+', 3.0), ('B', 2.7), ('B-', 2.3), ('C+', 2.0), ('C', 1.7), ('C-', 1.3), ('D+', 1.0), ('D', 0.7), ('D-', 0.0)]\n    return [grade_table[int(i)-1][0] for i in grades]\n    \nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    grades = sorted(grades)\n    if grades[0] < 4.0:\n        return ['E']\n    elif grades[0] < 3.7:\n        return ['D-']\n    elif grades[0] < 3.3:\n        return ['D']\n    elif grades[0] < 3.0:\n        return ['D+']\n    elif grades[0] < 2.7:\n        return ['C-']\n    elif grades[0] < 2.3:\n        return ['C']\n    elif grades[0] < 2.0:\n        return ['C+']\n    elif grades[0] < 1.7:\n        return ['B-']\n    elif grades[0] < 1.3:\n        return ['B']\n    elif grades[0] < 1.0:\n        return ['B+']\n    elif grades[0] < 0.7:\n        return ['A-']\n    elif grades[0] < 0.0:\n        return ['A']\n    else:\n        return ['A+']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [letter_grade(grade) for grade in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #Write your code here\n    n = len(grades)\n    table = [\n        [4.0, 'A+', 'A', 'A-'],\n        [3.7, 'A', 'A', 'A-'],\n        [3.3, 'A', 'A', 'A-'],\n        [3.0, 'A', 'A', 'A-'],\n        [2.7, 'B', 'B', 'B-'],\n        [2.3, 'B', 'B', 'B-'],\n        [2.0, 'B', 'B', 'B-'],\n        [1.7, 'C', 'C', 'C-'],\n        [1.3, 'C', 'C', 'C-'],\n        [1.0, 'D', 'D', 'D-'],\n        [0.7, 'D', 'D', 'D-'],\n        [0.0, 'E', 'E', 'E']\n    ]\n    l = []\n    for i in grades:\n        j = 0\n        while j<n:\n            if table[j][0]<=i:\n                l.append(table[j][1])\n                break\n            j += 1\n    return l\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total_sum = 0\n    for char in string:\n        total_sum += ord(char) - 97 + 1\n    return total_sum % 2 == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = string.strip()\n    # start with a range of 4 because 1 is the 'empty string', 2 is 'a', 3 is 'b', etc\n    for i in range(4, len(string)):\n        # iterate over the chars in the string\n        for j in range(len(string)):\n            # we can check if the char is a letter by casting it to a string\n            if isinstance(string[j], str):\n                # cast it as an integer\n                num = int(string[j])\n                # if the number is divisible by the current i, we know we cannot have a prime\n                if num % i == 0:\n                    return False\n    # if we made it here, it means the string is a prime number\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # ************************** Solution ******************************\n    # convert string to a list\n    string = list(string)\n    # start from 2 to the length of the list\n    for i in range(2, len(string)):\n        # if it is a prime number\n        if string[i] == 'a':\n            # iterate through the list to delete the 'a'\n            while string[i] == 'a':\n                del string[i]\n                # if the length is 1, it is not a prime number\n                if len(string) == 1:\n                    return False\n                # if the length is 2, it is a prime number\n                if len(string) == 2:\n                    return True\n        # if it is not a prime number\n        else:\n            return False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        for i in range(2, int(len(string))):\n            if int(len(string)) % i == 0:\n                return False\n        return True\n    \ndef factorial(n):\n    \"\"\"Write a function that returns the factorial of a number\n    Examples\n    factorial(5) == 120\n    factorial(5) == 120\n    factorial(4) == 24\n    factorial(1) == 1\n    factorial(0) == 1\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import math\n    def is_prime(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        else:\n            sqrt = int(math.sqrt(n))\n            for i in range(2, sqrt + 1):\n                if n % i == 0:\n                    return False\n            return True\n    \n    string_length = len(string)\n    if string_length == 1:\n        return False\n    else:\n        half_length = int(string_length / 2)\n        for i in range(1, half_length + 1):\n            if is_prime(i) and is_prime(string_length - i):\n                return True\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #use inbuilt function, math.ceil(x)\n    #return len(string)==1 or len(string)==2 or math.ceil(math.sqrt(len(string)))==math.ceil(math.sqrt(len(string)))\n    #check the right number of characters\n    #check the right number of unique characters\n    #check for single characters that are not letters\n    #if there are 3 letters in a row, check for 2 in a row\n    #if there are 4 letters in a row, check for 2 in a row\n    #if there are 6 letters in a row, check for 2 in a row\n    #if there are 8 letters in a row, check for 2 in a row\n    #if there are 9 letters in a row, check for 2 in a row\n    #if there are 11 letters in a row, check for 2 in a row\n    #if there are 12 letters in a row, check for 2 in a row\n    #if there are 13 letters in a row, check for 2 in a row\n    #if there are 14 letters in a row, check for 2 in a row\n    #if there are 15 letters in a row, check for 2 in a row\n    #if there are 16 letters in a row, check for 2 in a row\n    #if there are 17 letters in a row, check for 2 in a row\n    #if there are 18 letters in a row, check for 2 in a row\n    #if there are 19 letters in a row, check for 2 in a row\n    #if there are 20 letters in a row, check for 2 in a row\n    #if there are 21 letters in a row, check for 2 in a row\n    #if there are 22 letters in a row, check for 2 in a row\n    #if there are 23 letters in a row, check for 2 in a row\n    #if there are 24 letters in a row, check for 2 in a row\n    #if there are 25 letters in a row, check for 2 in a row\n    #if there are 26 letters in a row, check for 2 in a row\n    #if there are 27 letters in a row, check for 2 in a row\n    #if there are 28 letters in a row, check for 2 in a row\n    #if there are 29 letters in a row, check for 2 in a row\n    #if there are 30 letters in a row, check for 2 in a row\n    #if there are 31 letters in a row, check for 2 in a row\n    #if there are 32 letters in a row, check for 2 in a row\n    #if there are 33 letters in a row, check for 2 in a row\n    #if there are 34 letters in a row, check for 2 in a row\n    #if there are 35 letters in a row, check for 2 in a row\n    #if there are 36 letters in a row, check for 2 in a row\n    #if there are 37 letters in a row, check for 2 in a row\n    #if there are 38 letters in a row, check for 2 in a row\n    #if there are 39 letters in a row, check for 2 in a row\n    #if there are 40 letters in a row, check for 2 in a row\n    #if there are 41 letters in a row, check for 2 in a row\n    #if there are 42 letters in a row, check for 2 in a row\n    #if there are 43 letters in a row, check for 2 in a row\n    #if there are 44 letters in a row, check for 2 in a row\n    #if there are 45 letters in a row, check for 2 in a row\n    #if there are 46 letters in a row, check for 2 in a row\n    #if there are 47 letters in a row, check for 2 in a row\n    #if there are 48 letters in a row, check for 2 in a row\n    #if there are 49 letters in a row, check for 2 in a row\n    #if there are 50 letters in a row, check for 2 in a row\n    #if there are 51 letters in a row, check for 2 in a row\n    #if there are 52 letters in a row, check for 2 in a row\n    #if there are 53 letters in a row, check for 2 in a row\n    #if there are 54 letters in a row, check for 2 in a row\n    #if there are 55 letters in a row, check for 2 in a row\n    #if there are 56 letters in a row, check for 2 in a row\n    #if there are 57 letters in a row, check for "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(string)\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # List comprehension: [True for number in range(2,number) if number is prime]\n    return [True if number > 1 and number % index!= 0 else False for index in range(2,len(string))] == [True]*len(string)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # return True if len(string) == 2 else False\n    return len(string) == 2 and isPrime(int(string))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # if n <= 0, the result is zero\n    if n <= 0:\n        return 0\n    # if n == 1, the result is one\n    if n == 1:\n        return 1\n    # if n == 2, the result is 1, 2 and 4\n    if n == 2:\n        return 2\n    # if n > 2, the result is the number of digits in n\n    return n\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    start = 0\n    end = 0\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(bool(int(c)) for c in str(n))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    solution = 0\n    for number in xrange(10 ** (n - 1), 10 ** n):\n        if str(number)[0] == '1':\n            solution += 1\n        if str(number)[-1] == '1':\n            solution += 1\n    return solution\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 2\n    else:\n        return starts_one_ends(n-1) + sum(map(lambda x: starts_one_ends(x), range(10**(n-1), 10**n)))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for i in xrange(1, n + 1) if str(i).startswith('1') or str(i).endswith('1'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    s = start_one_ends(n-1)\n    if n % 2 == 0:\n        return s + 4*(s % 2)\n    else:\n        return s + 4*(s % 2) + 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def helper(n):\n        \"\"\"\n        Helper function to determine how many starting 1s and ending 1s\n        in the given number.\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        res = helper(n - 1)\n        if n % 10 == 1:\n            res += helper(n // 10)\n        return res\n    return helper(n)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert isinstance(n, int) and n > 0\n    assert isinstance(n, int) and n > 0\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return bin(N).replace(\"0b\",\"\")\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    binary = \"\"\n    while N:\n        binary += str(N%2)\n        N //= 2\n    return binary[::-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    while N > 0:\n        total = total + N % 2\n        N = N / 2\n    return str(total)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(0, len(str(N))):\n        sum += int(str(N)[i])\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join(map(str, [int(x) for x in bin(N)[2:]]))\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return str(bin(N)).count('1')\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    binary = \"\"\n    # Write your code here.\n    \n    while N!= 0:\n        binary += str(N % 2)\n        N //= 2\n    return binary[::-1]"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if N == 0:\n        return \"0\"\n    \n    N_binary = bin(N)[2:]\n    N_binary = str(N_binary).replace(\"1\", \"0\")\n    N_binary = str(N_binary).replace(\"0\", \"1\")\n    \n    return N_binary\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    if N < 0:\n        N = -1 * N\n    num = [int(x) for x in str(N)]\n    total = sum(num)\n    binary = bin(total)\n    binary = binary[2:]\n    binary = binary.rjust(len(str(N)), \"0\")\n    return binary\n    "
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(lst[1::2])\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = lst[::2]\n    lst = lst[::-1]\n    return sum(lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if lst:\n        if lst[0] % 2 == 0:\n            return lst[0]\n        return add(lst[1:])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    i = 1\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            lst[i] += lst[i]\n        i += 1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(0,len(lst),2)])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst[i] += lst[i-1]\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + add(lst[2:])\n    "
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n    return new_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # @TODO: Add code to perform the function above \n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    word_list = s.split(' ')\n    res = ''\n    for word in word_list:\n        temp = list(word)\n        temp.sort()\n        res += ''.join(temp) +''\n    return res[:-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # split the string into a list of strings\n    a = s.split(' ')\n    # split each word in the list of strings into list of characters\n    b = []\n    for w in a:\n        b.append(''.join(sorted(w)))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(sorted(s.split(), key = lambda x:x[0]))\n    #return s\n    #return''.join(sorted(s.split(), key = lambda x:sorted(x)))\n    #return s.replace(' ','')\n    #return re.sub(r'(\\w+)', lambda m:'' + m.group(1) +'', s)\n    #return ''.join(sorted(s.split(), key = lambda x:sorted(x)))\n    #return''.join(sorted(s.split(), key = lambda x:x[0]))\n    #return''.join(sorted(s.split(), key = str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ord(x[0])))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = s.split(\" \")\n    l2 = sorted(l)\n    return \" \".join(l2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # get row\n    def get_row_col(row, col):\n        return row * len(lst[0]) + col\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    output = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                output.append((i, j))\n    output = sorted(output, key=lambda x: x[0])\n    output = sorted(output, key=lambda x: x[1], reverse=True)\n    return output\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = []\n    for r in lst:\n        for c in r:\n            if c == x:\n                res.append((lst.index(r), r.index(c)))\n    res.sort(key = lambda x : (x[0], -x[1]))\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    row_set = set()\n    for row in lst:\n        row_set.add(row.count(x))\n    \n    row_lst = [i for i in range(len(lst)) if lst[i].count(x) in row_set]\n    row_lst.sort()\n    \n    row_lst.sort(key=lambda x:lst[x].count(x), reverse=True)\n    return [tuple(lst[i][j] for j in row_lst) for i in range(len(lst))]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    for x in lst:\n        if x[0] == x:\n            res.append((lst.index(x), lst.index(x)))\n    res.sort(key=lambda tup: (tup[0], tup[1]))\n    return res\n    \ndef get_rows(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_rows([[], [1], [1, 2, 3]]) == [(0, 0), (0, 1), (1, 2)]\n    get_rows([[], []]) == []\n    get_rows([[], [1], [1, 2, 3], [4], [4]]) == [(0, 0), (1, 1), (1, 2), (2, 1), (3, 0), (3, 1)]\n    \"\"\"\n    res = []\n    for x in lst:\n        res.append(get_row(x, lst.index(x)))\n    return res\n    \ndef get_columns(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_columns([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]) == [(0, 0), (1, 2), (1, 1), (2, 3), (2, 0)]\n    get_columns([[], [1], [1, 2, 3]]) == [(0, 0), (0, 1), (1, 1), (1, 2)]\n    get_columns([[], []]) == []\n    get_columns([[], [1], [1, 2, 3], [4], [4]]) == [(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (2, 0), (3, 1), (3, 2), (4, 1), (4, 0)]\n    \"\"\"\n    res = []\n    for i in range(len(lst[0])):\n        tmp = []\n        for j in lst:\n            tmp.append(j[i])\n        res.append(tmp)\n    res.sort(key=lambda tup: (tup[0], tup[1]))\n    return res\n    \ndef get_rows_and_columns(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by row"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    lst.sort()\n    result = []\n    \n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: -x[1])\n    \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    out = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                out.append((i, j))\n    return sorted(out, key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert lst, \"Cannot work on empty lists\"\n    \n    # code goes here\n    lst_of_lst = lst[:]\n    \n    #print(lst_of_lst)\n    \n    for row in lst_of_lst:\n        row.sort()\n        row.reverse()\n    \n    #print(lst_of_lst)\n    \n    result = []\n    \n    for row in lst_of_lst:\n        for item in row:\n            if item == x:\n                result.append((lst_of_lst.index(row), row.index(item)))\n    \n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(array) <= 1:\n        return array\n    \n    odd_sum = sum(array)\n    if odd_sum % 2 == 0:\n        return sorted(array)\n    \n    return sorted(array, reverse=True)\n    \nif __name__ == \"__main__\":\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 4, 3, 6, 0, 1, 5])"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = array[:]\n    if sum(result[0], result[-1]) % 2 == 1:\n        result = sorted(result, reverse=True)\n    else:\n        result = sorted(result)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def helper(array, flag):\n        \"\"\"\n        return array sorted by sum\n        \"\"\"\n        if not array:\n            return array\n        if flag == 'odd':\n            return sorted(array, reverse=True)\n        elif flag == 'even':\n            return sorted(array)\n    sum = lambda array: sum([array[0], array[-1]])\n    if sum(array) % 2 == 0:\n        flag = 'even'\n    else:\n        flag = 'odd'\n    return helper(array, flag)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not array:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not array:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not array:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def sum(i, j):\n        return i + j\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not array:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(array, list)\n    assert all(isinstance(x, int) for x in array)\n    assert all(x >= 0 for x in array)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not array:\n        return array\n    else:\n        for i in range(len(array)):\n            for j in range(i+1, len(array)):\n                if array[i] + array[j] == 0 or array[i] + array[j] % 2 == 0:\n                    array[i], array[j] = array[j], array[i]\n    return array\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(s, str):\n        return None\n    s = s.lower()\n    return rotate(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    encrypted = ''\n    for letter in s:\n        if ord(letter) + 1 > ord('z'):\n            encrypted += chr(ord(letter) + 1 - ord('z') - ord('a'))\n        else:\n            encrypted += chr(ord(letter) + 1)\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert isinstance(s, str) and len(s) > 0\n    return ''.join(rotate_char(s[i], i) for i in range(len(s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    rotated_alphabet = rotate_alphabet(ALPHABET, 2)\n    new_alphabet = convert_alphabet(rotated_alphabet)\n    new_text = convert_text(new_alphabet, s)\n    return new_text\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    rotated_alphabet = rotate_alphabet(ALPHABET, -2)\n    new_alphabet = convert_alphabet(rotated_alphabet)\n    new_text = convert_text(new_alphabet, s)\n    return new_text\n    \ndef rotate_alphabet(alphabet, rotations):\n    \"\"\"Create a function rotate_alphabet that takes a string as an\n    argument and a positive integer as an argument and returns a\n    string that is the alphabet rotated by the given rotations.\n    rotate_alphabet('a', 1) returns 'b'\n    rotate_alphabet('a', 2) returns 'c'\n    rotate_alphabet('a', 3) returns 'd'\n    rotate_alphabet('a', 4) returns 'a'\n    rotate_alphabet('a', 5) returns 'a'\n    rotate_alphabet('a', 6) returns 'a'\n    rotate_alphabet('a', 7) returns 'a'\n    rotate_alphabet('a', 8) returns 'a'\n    rotate_alphabet('a', 9) returns 'a'\n    rotate_alphabet('a', 10) returns 'a'\n    rotate_alphabet('a', 11) returns 'a'\n    rotate_alphabet('a', 12) returns 'a'\n    rotate_alphabet('a', 13) returns 'a'\n    rotate_alphabet('a', 14) returns 'a'\n    rotate_alphabet('a', 15) returns 'a'\n    rotate_alphabet('a', 16) returns 'a'\n    rotate_alphabet('a', 17) returns 'a'\n    rotate_alphabet('a', 18) returns 'a'\n    rotate_alphabet('a', 19) returns 'a'\n    rotate_alphabet('a', 20) returns 'a'\n    rotate_alphabet('a', 21) returns 'a'\n    rotate_alphabet('a', 22) returns 'a'\n    rotate_alphabet('a', 23) returns 'a'\n    rotate_alphabet('a', 24) returns 'a'\n    rotate_alphabet('a', 25) returns 'a'\n    rotate_alphabet('a', 26) returns 'a'\n    rotate_alphabet('a', 27) returns 'a'\n    rotate_alphabet('a', 28) returns 'a'\n    rotate_alphabet('a', 29) returns 'a'\n    rotate_alphabet('a', 30) returns 'a'\n    rotate_alphabet('a', 31) returns 'a'\n    rotate_alphabet('a', 32) returns 'a'\n    rotate_alphabet('a', 33) returns 'a'\n    rotate_alphabet('a', 34) returns 'a'\n    rotate_alphabet('a', 35) returns 'a'\n    rotate_alphabet('a', 36) returns 'a'\n    rotate_alphabet('a', 37) returns 'a'\n    rotate_alphabet('a', 38) returns 'a'\n    rotate_alphabet('a', 39) returns 'a'\n    rotate_alphabet('a', 40) returns 'a'\n    rotate_alphabet('a', 41) returns 'a'\n    rotate_alphabet('a', 42) returns 'a'\n    rotate_alphabet('a', 43) returns 'a'\n    rotate_alphabet('a', 44) returns 'a'\n    rotate_alphabet('a', 45) return"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {'a':'b','b':'c','c':'d','d':'e','e':'f','f':'g','g':'h','h':'i','i':'j','j':'k','k':'l','l':'m','m':'n','n':'o','o':'p','p':'q','q':'r','r':'s','s':'t','t':'u','u':'v','v':'w','w':'x','x':'y','y':'z','z':'a'}\n    temp = ''\n    for i in s:\n        if i in d.keys():\n            temp += d[i]\n        else:\n            temp += i\n    return temp\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    d = {'a':'b','b':'c','c':'d','d':'e','e':'f','f':'g','g':'h','h':'i','i':'j','j':'k','k':'l','l':'m','m':'n','n':'o','o':'p','p':'q','q':'r','r':'s','s':'t','t':'u','u':'v','v':'w','w':'x','x':'y','y':'z','z':'a'}\n    temp = ''\n    for i in s:\n        if i in d.keys():\n            temp += d[i]\n        else:\n            temp += i\n    return temp\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rotated_alphabet = [rotate_letter(x) for x in alphabet]\n    encrypted = \"\"\n    for i in s:\n        try:\n            encrypted += rotated_alphabet[alphabet.index(i)]\n        except ValueError:\n            encrypted += i\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[1:] + alphabet[0]\n    return ''.join(shifted_alphabet[alphabet.index(ch) + 2] for ch in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    return ''.join(map(lambda x: chr((ord(x) - ord('a') + 2) % 26 + ord('a')), s))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(map(lambda x: chr(ord(x) + 2), s))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    try:\n        return sorted(lst)[1]\n    except IndexError:\n        return None"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_list = sorted(lst)\n    return sorted_list[1] if len(sorted_list) > 1 else None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        if lst[1] < lst[0]:\n            return lst[1]\n        else:\n            for i in range(0, len(lst)):\n                if lst[i] < lst[0]:\n                    return lst[i]\n                \n                \n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    \n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    first = second = None\n    for i in lst:\n        if not second or i < second:\n            second = i\n        elif not first or i < first:\n            first = i\n    return first if first and first!= second else None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return None\n    first = lst[0]\n    lst = lst[1:]\n    if len(lst) == 0:\n        return None\n    second = lst[0]\n    lst = lst[1:]\n    if len(lst) == 0:\n        return None\n    third = lst[0]\n    return second if second < third else third\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if len(lst) == 0:\n        return None\n    \n    smallest_element = lst[0]\n    \n    for x in lst:\n        if x < smallest_element:\n            smallest_element = x\n    \n    lst.remove(smallest_element)\n    \n    if len(lst) == 0:\n        return None\n    \n    return lst[0]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    if lst == []:\n        return None\n    smallest_num = lst[0]\n    for x in lst:\n        if x <= smallest_num:\n            smallest_num = x\n    smallest_num_index = lst.index(smallest_num)\n    if smallest_num_index == len(lst) - 1:\n        return None\n    return lst[smallest_num_index + 1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst.sort()\n    return lst[1] if len(lst) > 1 else None"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # count the number of \"I\"\n    return S.count(\"I\")"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([1 for sentence in S.split(\".\") if sentence[:2] == \"I \"])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if S.startswith(\"I\"):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    number_of_boredom_sentences = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split('?')\n        if words[0] == \"I\":\n            number_of_boredom_sentences += 1\n    return number_of_boredom_sentences"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = S.split('.')\n    return sum([1 for s in s if s.startswith('I')])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = S.split(' ')\n    l = len(a)\n    count = 0\n    for i in range(l):\n        if a[i] == 'I' and (i == 0 or a[i - 1]!= '.' and a[i - 1]!= '?' and a[i - 1]!= '!'):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = len(S)\n    i = 0\n    while i < l:\n        if S[i:i+4] == \"I am\":\n            i += 4\n            return 1\n        if S[i:i+3] == \"i am\":\n            i += 3\n            return 1\n        if S[i:i+2] == \"i \":\n            i += 2\n            return 1\n        i += 1\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for word in S.split():\n        if word == \"I\":\n            count += 1\n    return count\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return None\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == y + z or x == z + y or y == x + z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (type(x) is int) and (type(y) is int) and (type(z) is int):\n        if (x+y) == z or (x+z) == y or (y+z) == x:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) or (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    try:\n        return int(x) == (int(y) + int(z)) and (x == int(x)) and (y == int(y)) and (z == int(z))\n    except:\n        return False\n        \n        \n    return True\n    \n    \nany_int(3, 2, 2) \u279e False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (x == y + z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return True if x+y==z and (type(x)==int or type(y)==int) and (type(z)==int) else False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True if x == y + z or x == y + z or x == y + z else False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x == (y + z) and (type(x) == int or type(y) == int or type(z) == int)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (x == y + z or x == z + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def swap(c):\n        if c.isalpha():\n            if c.isupper():\n                return chr(ord(c) + 2)\n            else:\n                return chr(ord(c) - 2)\n        else:\n            return c\n    \n    def encode_vowels(c):\n        if c in VOWELS:\n            return VOWELS[(VOWELS.index(c) + 2) % len(VOWELS)]\n        else:\n            return c\n    \n    return ''.join([encode_vowels(c) if c.isalpha() else c for c in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = 'AEIOU'\n    \n    \n    def get_swapped_case(letter):\n        \"\"\"\n        Get the swapped case of a letter\n        \"\"\"\n        if letter in vowels:\n            return letter.swapcase()\n        return letter\n    \n    \n    \n    def swap(letter):\n        \"\"\"\n        Swap the case of a letter\n        \"\"\"\n        return get_swapped_case(letter)\n        \n    def encode_letter(letter):\n        \"\"\"\n        Encode a letter\n        \"\"\"\n        if letter in vowels:\n            return letter.swapcase()\n        return letter\n    \n    def encode_word(word):\n        \"\"\"\n        Encode a word\n        \"\"\"\n        encoded_word = ''\n        for letter in word:\n            encoded_word += encode_letter(letter)\n        return encoded_word\n    \n    return encode_word(message)\n    \nprint(encode('This is a message')"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # message = message.lower()\n    # vowels = 'aeiou'\n    # message = message.translate(str.maketrans('', '', vowels))\n    # for vowel in vowels:\n    #     message = message.replace(vowel, chr(ord(vowel) + 2))\n    # return message\n    pass\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \" \\n*** ALL TESTS PASSED. NICE JOB! ***\\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    dictionary = {'a': '', 'e': '', 'i': '', 'o': '', 'u': ''}\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    encoded = \"\"\n    for i in range(len(message)):\n        c = message[i].lower()\n        if c in 'aeiou':\n            c = chr(ord(c) + 2)\n        encoded += c\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = \"AEIOUaeiou\"\n    new_message = \"\"\n    for letter in message:\n        if letter.isalpha() and letter.lower() in vowels:\n            new_message += chr(ord(letter)+2)\n        else:\n            new_message += letter\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    new_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            new_message += (char.lower() + char.lower())\n        else:\n            new_message += char\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Set up list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Change to lower case\n    message = message.lower()\n    \n    # Replace all vowels with a2\n    for v in vowels:\n        message = message.replace(v, '2')\n    \n    # Return message\n    return message\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('test')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # Set up list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Change to lower case\n    message = message.lower()\n    \n    # Replace all vowels with a2\n    for v in vowels:\n        message = message.replace('2', v)\n    \n    # Return message\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # check if message is empty, if so, return it\n    if message == '':\n        return ''\n    \n    # determine number of vowels\n    vowels = 0\n    for letter in message:\n        if letter in VOWELS:\n            vowels += 1\n    \n    # create list of vowels\n    vowels = VOWELS * vowels\n    vowels = vowels[:vowels.rfind('e')]\n    \n    # swap case and replace vowels\n    # if vowels is none, return original message\n    if vowels == '':\n        return message\n    \n    letters = [''] * vowels\n    for letter in message:\n        if letter in VOWELS:\n            letter_index = VOWELS.find(letter)\n            letters[letter_index] = letter\n            \n    # construct result\n    result = ''.join(letters)\n    result += message[vowels.rfind('e'):]\n    \n    # return result\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    from math import log10\n    from functools import reduce\n    from itertools import chain\n    from math import ceil, floor\n    \n    isPrime = lambda x: all(x % i for i in range(2, int(x ** 0.5) + 1)) if x > 1 else False\n    \n    # map(lambda x: x % 2, range(2, int(floor(log10(max(lst)) + 1))))\n    \n    prime_lst = filter(isPrime, lst)\n    \n    if prime_lst:\n        return sum(map(lambda x: int(str(x)[0]), prime_lst))\n    else:\n        return 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = [int(i) for i in lst]\n    max_val = max(lst)\n    max_val = sum([int(i) for i in str(max_val)])\n    return max_val\n    # return max([int(i) for i in str(max(lst))])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    largest = 0\n    for i in lst:\n        prime = isPrime(i)\n        if(prime):\n            largest = largest + i\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    from itertools import takewhile, count\n    lst.sort()\n    print(lst)\n    for prime in takewhile(lambda p: p<=sum(lst[:len(lst)//2]), count(2,2)):\n        if all(lst[i]%prime==0 for i in range(len(lst)//2)):\n            return sum(int(i) for i in str(prime))\n    return sum(int(i) for i in str(max(lst)))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    primes = []\n    for number in lst:\n        flag = True\n        for j in primes:\n            if number % j == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(number)\n    primes.sort(reverse = True)\n    total = 0\n    for p in primes:\n        total += p % 10\n    return total\n    \n    \nprint skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\nprint skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nprint skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\nprint skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nprint skjkasdkd([0,81,12,3,1,21])\nprint skjkasdkd([0,8,1,2,1,7]"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_prime(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**(1/2))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n    l = list(filter(lambda x: is_prime(x), lst))\n    return sum([int(i) for i in l])"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def isPrime(x):\n        if x < 2:\n            return False\n        if x % 2 == 0:\n            return x == 2\n        for i in range(3, int(math.sqrt(x)) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(map(int, str(max(lst))))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([int(i) for i in str(max(lst)) if int(i) > 1])\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            else:\n                if key.isupper() or key.islower():\n                    continue\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not dict:\n        return False\n    lower_keys = {k.lower() for k in dict.keys()}\n    upper_keys = {k.upper() for k in dict.keys()}\n    for key in lower_keys:\n        if key not in upper_keys:\n            return False\n    for key in upper_keys:\n        if key not in lower_keys:\n            return False\n    return True\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if dict == {}:\n        return False\n    else:\n        keys = dict.keys()\n        if all(isinstance(x, str) for x in keys):\n            if all(x.islower() for x in keys):\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if isinstance(key, int) or isinstance(key, float) or isinstance(key, bool):\n            return False\n        if isinstance(key, str):\n            if len(key) > 1:\n                if key[0].isupper():\n                    return False\n                if key[0].islower():\n                    return True\n        if isinstance(key, unicode):\n            if key[0].isupper():\n                return False\n            if key[0].islower():\n                return True\n    return True"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if isinstance(key, str):\n            if key.isupper():\n                return False\n        elif isinstance(key, int):\n            return False\n        elif isinstance(key, bool):\n            return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict.keys():\n            if type(key) == str:\n                if key.isupper():\n                    return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if key.isupper():\n            return False\n    for key in dict:\n        if key.islower():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # use join to convert values to a string\n    all_keys = ''.join(dict.keys())\n    all_keys = all_keys.lower()\n    # convert the keys to lower case\n    all_keys = list(set(all_keys.split(' ')))\n    # check the condition\n    if len(all_keys) == 0:\n        return False\n    for each_key in all_keys:\n        if not each_key.islower() and not each_key.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    output = []\n    for i in xrange(2, n+1):\n        if is_prime(i):\n            count += 1\n            output.append(i)\n        if count == n:\n            break\n    return output\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #Note: this is a very common interview problem. You can solve it in O(n) time using a sieve.\n    #The trick is to use a faster prime number sieve, which will use about half the time you would have to\n    #use a sieve\n    primes = sieve(n)\n    return [i for i in primes if i < n]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    prime_numbers = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for j in prime_numbers:\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    if n < 0:\n        return []\n    prime_nums = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            prime_nums.append(i)\n    return prime_nums"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # The following iterative solution is O(n) time and O(n) space\n    # nums = [True] * (n + 1)\n    # for i in range(2, n + 1):\n    #     if nums[i]:\n    #         for j in range(i * 2, n + 1, i):\n    #             nums[j] = False\n    # primes = []\n    # for i in range(2, n + 1):\n    #     if nums[i]:\n    #         primes.append(i)\n    # return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    primes = [2]\n    for i in range(3, n+1, 2):\n        for j in range(len(primes)):\n            if i % primes[j] == 0:\n                break\n        else:\n            primes.append(i)\n    return primes[:n]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    def count_up_to_loop(n):\n        if n < 2:\n            return []\n        prime_list = [2]\n        for x in range(3, n, 2):\n            if is_prime(x):\n                prime_list.append(x)\n        return prime_list\n    \n    def count_up_to_rec(n, prime_list):\n        if n < 2:\n            return []\n        for x in range(len(prime_list), n, 2):\n            if is_prime(x):\n                prime_list.append(x)\n        return prime_list\n    \n    # recursive\n    if n == 0:\n        return []\n    return count_up_to_rec(n, [2])\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i for i in range(2, n+1) if all(i % j!= 0 for j in range(2, int(i**0.5)+1))]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_prime(n):\n        if n < 2: return False\n        if n == 2: return True\n        if n % 2 == 0: return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 0\n    a = abs(a)\n    b = abs(b)\n    while a > 0 or b > 0:\n        if a > 0 and b > 0:\n            res += (a % 10) * (b % 10)\n            a //= 10\n            b //= 10\n        else:\n            if a > 0:\n                res += a % 10\n                a //= 10\n            elif b > 0:\n                res += b % 10\n                b //= 10\n    return res\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return int(''.join(str(a) * b))\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return 0\n    return (a * b) // 10 + (a * b) % 10\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    product = 0\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1:\n        return b\n    elif b == 1:\n        return a\n    else:\n        sign = -1 if a < 0 or b < 0 else 1\n        if a < 0 or b < 0:\n            a = abs(a)\n            b = abs(b)\n        product = sign * (a // 10) * (b // 10)\n        product += a % 10 * b % 10\n        return product\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # CODE GOES HERE\n    return sum(int(x) * int(y) for x, y in zip(a, b))"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    n = max(a,b)\n    ans = 0\n    for i in range(n,0,-1):\n        if a % i == 0 and b % i == 0:\n            ans += i\n            a /= i\n            b /= i\n    return ans\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = str(a)\n    b = str(b)\n    c = len(a)\n    d = len(b)\n    if c>d:\n        b = \"0\"*(c-d) + b\n    else:\n        a = \"0\"*(d-c) + a\n    a = int(a)\n    b = int(b)\n    ans = 0\n    for i in range(c):\n        ans += a // (10 ** i) * (b // (10 ** i))\n    return ans\n    "
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    product = 0\n    for d in a:\n        product = product * 10 + int(d)\n    for d in b:\n        product = product * 10 + int(d)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a > 0 and b > 0:\n        return multiply(a, b // 10) * 10 + multiply(a, b % 10)\n    elif a < 0 and b > 0:\n        return multiply(a * -1, b // 10) * 10 + multiply(a * -1, b % 10) * -1\n    elif a < 0 and b < 0:\n        return multiply(a * -1, b // 10) * 10 + multiply(a * -1, b % 10) * -1\n    elif a > 0 and b < 0:\n        return multiply(a, b * -1) * -1\n    else:\n        return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a > 0 and b > 0:\n        a = list(str(a))\n        b = list(str(b))\n        a = int(''.join(a))\n        b = int(''.join(b))\n        return a * b\n    elif a < 0 and b < 0:\n        a = list(str(abs(a)))\n        b = list(str(abs(b)))\n        a = int(''.join(a))\n        b = int(''.join(b))\n        return a * b\n    elif a < 0 and b > 0:\n        a = list(str(abs(a)))\n        b = list(str(b))\n        a = int(''.join(a))\n        b = int(''.join(b))\n        return a * b\n    else:\n        a = list(str(abs(a)))\n        b = list(str(b))\n        a = int(''.join(a))\n        b = int(''.join(b))\n        return a * b\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for c in s:\n        if c.isupper() and (s.index(c)%2==0):\n            count += 1\n    return count\n    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nprint(\"all tests passed\")"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n                num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    s = s.lower()\n    output = 0\n    for i in range(len(s)):\n        if (i + 1) % 2 == 0:\n            if s[i] in 'aeiou':\n                output += 1\n    return output\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for c in s[::2] if c.upper() in \"AEIOU\")\n    \n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 1\n    count_lower('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s[::2] if c.lower() in \"aeiou\")\n    \n    \ndef count_numerics(s):\n    \"\"\"\n    Given a string s, count the number of numerical characters in even indices.\n    \n    For example:\n    count_numerics('aBCdEf') returns 1\n    count_numerics('abcdefg') returns 0\n    count_numerics('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s[::2] if c in \"0123456789\")\n    \n    \ndef count_alphanumeric(s):\n    \"\"\"\n    Given a string s, count the number of alphanumeric characters in even indices.\n    \n    For example:\n    count_alphanumeric('aBCdEf') returns 1\n    count_alphanumeric('abcdefg') returns 0\n    count_alphanumeric('dBBE') returns 1\n    \"\"\"\n    return sum(1 for c in s[::2] if c.isalnum())\n    \n    \ndef count_special(s):\n    \"\"\"\n    Given a string s, count the number of special characters in even indices.\n    \n    For example:\n    count_special('aBCdEf') returns 1\n    count_special('abcdefg') returns 0\n    count_special('dBBE') returns 1\n    \"\"\"\n    return sum(1 for c in s[::2] if c in \"!@#$%^&*()-+=[]{}|;:,./?`~\")\n    \n    \ndef count_symbols(s):\n    \"\"\"\n    Given a string s, count the number of symbols in even indices.\n    \n    For example:\n    count_symbols('aBCdEf') returns 1\n    count_symbols('abcdefg') returns 1\n    count_symbols('dBBE') returns 1\n    \"\"\"\n    return sum(1 for c in s[::2] if not c.isalnum())\n    \n    \ndef count_whitespace(s):\n    \"\"\"\n    Given a string s, count the number of whitespace characters in even indices.\n    \n    For example:\n    count_whitespace('aBCdEf') returns 1\n    count_whitespace('abcdefg') returns 1\n    count_whitespace('dBBE') returns 1\n    \"\"\"\n    return sum(1 for c in s[::2] if not c.isalnum())\n    \n    \ndef main():\n    s = input(\"Enter a string: \")\n    print(\"Total number of uppercase vowels in even indices:\", count_upper(s))\n    print(\"Total number of lowercase vowels in even indices:\", count_lower(s))\n    print(\"Total number of numerical characters in even indices:\", count_numerics(s))\n    print(\"Total number of alphanumeric characters in even indices:\", count_alphanumeric(s))\n    print(\"Total number of special characters in even indices:\", count_special(s))\n    print(\"Total number of symbols in even indices:\", count_symbols(s))\n    print(\"Total number of whitespace characters in even indices:\", count_whitespace(s))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    \n    return count\n    \n    \ndef count_upper_string(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_string('aBCdEf') returns 1\n    count_upper_string('abcdefg') returns 0\n    count_upper_string('dBBE') returns 0\n    \"\"\"\n    \n    vowels = ['A','E','I','O','U']\n    \n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    \n    return count\n    \n    \ndef main():\n    print count_upper('aBCdEf')\n    print count_upper('abcdefg')\n    print count_upper('dBBE')\n    print count_upper_string('aBCdEf')\n    print count_upper_string('abcdefg')\n    print count_upper_string('dBBE')\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([1 for i in range(len(s)) if (i % 2 == 0 and s[i].upper() in VOWELS)])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(s)\n    res = 0\n    for i in range(0, n, 2):\n        if s[i].upper() in VOWELS:\n            res += 1\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(ord(c) >= ord('A') and ord(c) <= ord('Z') for c in s[::2])\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    '''\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    '''\n    num_list = map(int, str(value))\n    length = len(num_list)\n    half_length = length // 2\n    mid_num = int(num_list[half_length])\n    if abs(mid_num) == abs(num_list[0]):\n        return abs(mid_num)\n    elif num_list[0] == 0:\n        return 0\n    elif num_list[0] > 0:\n        if abs(mid_num) > abs(num_list[0]):\n            return mid_num\n        elif abs(num_list[0]) > abs(num_list[-1]):\n            return num_list[0]\n        else:\n            return num_list[-1]\n    else:\n        if abs(mid_num) > abs(num_list[-1]):\n            return -mid_num\n        elif abs(num_list[-1]) > abs(num_list[0]):\n            return -num_list[-1]\n        else:\n            return -num_list[0]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if '.' in value:\n        value = int(float(value))\n    else:\n        value = int(value)\n    values = {value:0, value+1:1, value-1:2}\n    return values[max(values, key=values.get)]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    float_value = float(value)\n    return int(float_value) if int(float_value) == float_value else (int(float_value)+1 if float_value > 0 else int(float_value)-1)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if value == int(value):\n        return int(value)\n    return round(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    integer = float(value)\n    # If integer is zero, return zero\n    if integer == 0:\n        return integer\n    # Convert to an integer\n    integer = int(integer)\n    # If the difference between integer and value is less than 0.5, return integer\n    if abs(integer - value) < 0.5:\n        return integer\n    # If the difference is greater than 0.5, return the integer that is closest to value\n    if abs(integer - value) > 0.5:\n        if integer < value:\n            return integer + 1\n        else:\n            return integer - 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    number = int(value)\n    if number - int(number) == 0:\n        return int(number)\n    elif number - int(number) > 0:\n        return int(number) + 1\n    else:\n        return int(number) - 1\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return round(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    float_val = float(value)\n    int_val = int(round(float_val))\n    if float_val == int_val:\n        return int_val\n    elif float_val > int_val:\n        return int_val + 1\n    else:\n        return int_val - 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    value = float(value)\n    if value == int(value):\n        return int(value)\n    else:\n        if value > 0:\n            return int(value + 0.5)\n        else:\n            return int(value - 0.5)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = [n]\n    while n > 1:\n        n = n - 2 if n % 2 == 0 else n - 1\n        res.append(n)\n    return res\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [n, n+1, n+2]"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [n]\n    elif n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n] + make_a_pile(n - 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return None\n    level = [n]\n    for i in range(n):\n        if n % 2 == 0:\n            n -= 2\n            level.append(n)\n        else:\n            n -= 1\n            level.append(n)\n    return level\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stones = [n]\n    while n > 1:\n        if n % 2 == 1:\n            stones.append(n+1)\n            n += 1\n        else:\n            stones.append(n)\n            n -= 1\n    return stones\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [n, n]\n    else:\n        s = [n]\n        if n % 2 == 1:\n            s.append(n + 1)\n        else:\n            s.append(n + 2)\n        return s + make_a_pile(n-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [n]\n    else:\n        return [n] + make_a_pile(n - 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [n] + [n * 2 + 1] * (n % 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = [n]\n    if n % 2 == 1:\n        for i in range(n-1):\n            nums.append(n+2*i+1)\n    else:\n        for i in range(n-1):\n            nums.append(n+2*i)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = [n]\n    while n > 1:\n        n -= 1\n        res.append(n)\n    return res\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(',')"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # ---\n    # Copy your code from the previous exercise and modify it to \n    # take a string argument, not a file name.\n    return [w for w in s.split(', ') if w!= '']\n    # ---\n    # return list(filter(None, re.split('[,]', s)))\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.split(',')\n    \n    \ndef first_letter(s):\n    \"\"\"\n    Return the first letter of the word passed in.\n    \n    For example:\n    first_letter(\"Hello\") == \"H\"\n    first_letter(\"CS1301\") == \"C\"\n    \"\"\"\n    return s[0]\n    \n    \ndef last_4_letters(s):\n    \"\"\"\n    Return the last 4 letters of the word passed in.\n    \n    For example:\n    last_4_letters(\"Hello\") == \"llo\"\n    last_4_letters(\"CS1301\") == \"CS13\"\n    \"\"\"\n    return s[-4:]\n    \n    \ndef is_palindrome(s):\n    \"\"\"\n    Return true if the string passed in is a palindrome.\n    \n    A palindrome is a word or phrase that is the same forwards and backwards.\n    \n    For example:\n    is_palindrome(\"racecar\") == true\n    is_palindrome(\"Not a palindrome\") == false\n    is_palindrome(\"Able was I ere I saw Elba\") == true\n    \"\"\"\n    return s[::-1].lower() == s.lower()\n    \n    \ndef rotate_word(s):\n    \"\"\"\n    Return the \"rotated word\" of the word passed in.\n    \n    A \"rotated word\" is a word which has been rotated by 1, 2 or 3 letters.\n    \n    For example:\n    rotate_word(\"Hello\") == \"lloHe\"\n    rotate_word(\"Hi\") == \"Hi\"\n    rotate_word(\"Able was I ere I saw Elba\") == \"ElbaAble\"\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    return s[1:] + s[0]\n    \n    \ndef reverse(s):\n    \"\"\"\n    Return the \"reversed\" string of the word passed in.\n    \n    A \"reversed\" string is a string which has been reversed.\n    \n    For example:\n    reverse(\"Hello\") == \"olleH\"\n    reverse(\"Hi\") == \"iH\"\n    reverse(\"Able was I ere I saw Elba\") == \"saw ElbaAble\"\n    \"\"\"\n    return s[::-1]\n    \n    \ndef strip(s):\n    \"\"\"\n    Return a string with leading and trailing whitespace removed.\n    \n    For example:\n    strip(\"  Hello!  \") == \"Hello!\"\n    strip(\"  CS1301!  \") == \"CS1301\"\n    \"\"\"\n    return s.strip()\n    \n    \ndef is_isogram(s):\n    \"\"\"\n    Return true if the string passed in is an isogram.\n    \n    An isogram is a word or phrase without repeated letters.\n    \n    For example:\n    is_isogram(\"Hello\") == false\n    is_isogram(\"foobar\") == true\n    is_isogram(\"abba\") == false\n    is_isogram(\"PooP\") == true\n    \"\"\"\n    return len(set(s)) == len(s)\n    \n    \ndef count_vowels(s):\n    \"\"\"\n    Return the number of vowels in the string passed in.\n    \n    For example:\n    count_vowels(\"Hello\") == 2\n    count_vowels(\"PooP\") == 0\n    count_vowels(\"FooBar\") == 1\n    \"\"\"\n    vowels = 'aeiou'\n    return sum(c in vowels for c in s)\n    \n    \ndef count_consonants(s):\n    \"\"\"\n    Return the number of consonants in the string passed in.\n    \n    For example:\n    count_consonants(\"Hello\") == 1\n    count_consonants(\"PooP\") == 3\n    count_consonants(\"FooBar\") == 0\n    \"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    return sum(c in consonants for c in s)\n    \n    \ndef count_letters(s):\n    \"\"\"\n    Return the number of letters in the string passed in.\n    \n    For example:\n    count_letters(\"Hello\") == 5\n    count_letters(\"PooP\") == 0\n    count_letters(\"FooBar\") == "
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # initialize array of words\n    words = []\n    # split string on spaces and commas\n    s = s.split(',')\n    # for each word, add it to the array\n    for word in s:\n        words.append(word.strip())\n    return words\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    big = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            big = i\n    return big\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # find the nearest int value\n    step = x - y\n    n = 0\n    if step < 0:\n        n = y - x + 1\n    else:\n        n = y - x\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Write your code here\n    \n    while x < y:\n        if x % 2 == 0:\n            x = x + 1\n        else:\n            x = x + 2\n    return x\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # This is an example if you want to test your code\n    \n    # TODO: Your code here\n    if x == y:\n        return x\n    elif y < x:\n        return -1\n    else:\n        return (x + y - 1) // 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x > y:\n        return -1\n    while x < y:\n        if x % 2 == 0:\n            return x\n        x += 1\n    return x - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    if (x > y):\n        return -1\n    if ((x % 2 == 1) and (y % 2 == 0)):\n        if (x == y):\n            return x\n        if (x > y):\n            return x\n        return y\n    elif (y % 2 == 1):\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x % 2 == 0 and y % 2 == 0:\n        if x < y:\n            return x\n        else:\n            return y\n    elif x % 2!= 0 and y % 2!= 0:\n        if x < y:\n            return -1\n        else:\n            return y\n    else:\n        if x < y:\n            return -1\n        else:\n            return x\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # your code goes here\n    max_num = -1\n    if x > y:\n        max_num = -1\n    elif x == y:\n        max_num = x\n    else:\n        for i in range(x, y + 1):\n            if i % 2 == 0 and max_num < i:\n                max_num = i\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if x % 2 == 0 and y % 2 == 0:\n        return -1\n    else:\n        if x % 2 == 0:\n            return x\n        else:\n            return y\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n > m: return -1\n    n = n + 1\n    m = m + 1\n    average = (n + m) // 2\n    average_bin = bin(average).replace('0b','')\n    return average_bin[-1] if len(average_bin) > 1 else '0'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # if n > m:\n    #     return -1\n    return bin(n + m - 1)[2:].zfill(32)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if n > m:\n        return -1\n    \n    range = m - n + 1\n    bits = \"{0:b}\".format(range)\n    \n    return int(bits, 2)\n    \n    \nif __name__ == '__main__':\n    print(rounded_avg(1, 5)) # 0b11\n    print(rounded_avg(7, 5)) # -1\n    print(rounded_avg(10, 20)) # 0b1111\n    print(rounded_avg(20, 33)) # 0b11010\n    print(rounded_avg(33, 49)) # 0b11011"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return bin(int((n+m-1)/2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == m:\n        return \"0b0\"\n    if n > m:\n        return -1\n    if n < 0:\n        return -1\n    n = n+1\n    m = m+1\n    a = [0] * n\n    for i in xrange(n):\n        a[i] = bin(i+1)[2:]\n    avg = int(reduce(lambda x,y: x+y, a), 2)\n    return \"0b\" + \"\".join(a)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if m < n:\n        return -1\n    avg = (n + m) // 2\n    return int(bin(avg)[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    else:\n        a = bin(n)\n        b = bin(m)\n        #print(a)\n        #print(b)\n        return a[2:] + b[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = int(n)\n    m = int(m)\n    \n    if m > n:\n        return -1\n    \n    return format(int((n + m) / 2), 'b')\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    assert type(n) == int\n    assert type(m) == int\n    assert n <= m\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted([num for num in x if num % 2 == 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    newList = []\n    for i in x:\n        if i % 2 == 1:\n            newList.append(i)\n    return sorted(newList)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted([e for e in x if e % 2])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not x:\n        return []\n    result = []\n    for num in x:\n        digits = [int(digit) for digit in str(num)]\n        if not any(digits[i]%2 for i in range(len(digits))):\n            result.append(num)\n    return sorted(result)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted([n for n in x if n % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in x if x%2==1]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    unique = []\n    for i in x:\n        if i % 2!= 0 and i not in unique:\n            unique.append(i)\n    unique.sort()\n    return unique"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    a = []\n    \n    for x in arr:\n        if (1 <= x <= 9):\n            a.append(one_to_nine[x - 1])\n    \n    a.sort()\n    a.reverse()\n    \n    return a\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr = sorted(arr)\n    arr.reverse()\n    \n    res = []\n    for num in arr:\n        if num == 9:\n            res.append(\"Nine\")\n        elif num == 8:\n            res.append(\"Eight\")\n        elif num == 7:\n            res.append(\"Seven\")\n        elif num == 6:\n            res.append(\"Six\")\n        elif num == 5:\n            res.append(\"Five\")\n        elif num == 4:\n            res.append(\"Four\")\n        elif num == 3:\n            res.append(\"Three\")\n        elif num == 2:\n            res.append(\"Two\")\n        elif num == 1:\n            res.append(\"One\")\n        else:\n            continue\n    \n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    arr.sort()\n    return [name_by_number(num) for num in arr[::-1]]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if arr:\n        arr = sorted(arr)\n        for i in range(len(arr)):\n            arr[i] = names[arr[i] - 1]\n        return arr[::-1]\n    else:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    arr.reverse()\n    digits = ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n    output = []\n    for item in arr:\n        if item >= 1 and item <= 9:\n            output.append(digits[item-1])\n    return output"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [str(i) for i in sorted(arr) if 1<=i<=9]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    new_arr = [str(i) for i in arr]\n    new_arr.sort()\n    new_arr.reverse()\n    return [x[-1] for x in new_arr]\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n    \n    arr = [str(x) for x in arr]\n    arr.sort()\n    return [digit_to_name(int(x)) for x in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr.sort()\n    arr.reverse()\n    \n    new = []\n    for x in arr:\n        if x < 10 and x > 0:\n            new.append(one_to_nine[x])\n    \n    return new\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    one_to_nine = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    arr.sort()\n    arr.reverse()\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    soln = [1]\n    for i in range(2,n+1):\n        if i%2 == 0:\n            soln.append(soln[i-1] * i)\n        else:\n            soln.append((i+1) * sum(range(2,i)))\n    return soln\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # list to store the values of the factorials of the numbers from 1 to n\n    factorials = [1]\n    # for every number from 1 to n, add the product of the numbers from 1 to the number\n    for i in range(1, n):\n        factorials.append(factorials[i-1] * i)\n    # list to store the result\n    result = []\n    # for every number from 1 to n, add the value to the result if the number is even\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(factorials[i])\n        # add the sum of numbers from 1 to the number to the result if the number is odd\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [1] + [f(i) for i in range(2, n)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #\n    # Your code here\n    #\n    #\n    def fact(n):\n        if n <= 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    return [fact(i) if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            l.append(l[i - 2] * i)\n        else:\n            l.append(i)\n    return l"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert isinstance(n, int)\n    if n == 1:\n        return [1]\n    else:\n        return [i for i in range(1,n+1)] + [sum(range(1,i)) for i in range(2,n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    list_ = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            list_.append(math.factorial(i))\n        else:\n            list_.append(sum(range(1, i + 1)))\n    return list_\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    res = [1]\n    \n    for i in range(2,n+1):\n        if i%2 == 0:\n            res.append(res[-1] * i)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # base case\n    if n == 1:\n        return 0, 1\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_palindrome(n):\n        if n < 10:\n            return True\n        else:\n            return n % 10 == n // 10 % 10\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count_even, count_odd = 0, 0\n    for i in xrange(1, n+1):\n        if is_palindrome(i):\n            if i%2==0:\n                count_even += 1\n            else:\n                count_odd += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = 0\n    res_odd = 0\n    for i in range(1, n + 1):\n        res += len(to_palindrome(i))\n        res_odd += len(to_palindrome(i)) % 2\n    return (res_odd, res - res_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = (0, 0)\n    for i in range(1, n):\n        if str(i) == str(i)[::-1] and int(str(i)[::-1]) % 2 == 0:\n            result = (result[0] + 1, result[1])\n        if str(i) == str(i)[::-1] and int(str(i)[::-1]) % 2 == 1:\n            result = (result[0], result[1] + 1)\n    return result\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ret = (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count_even, count_odd = 0, 0\n    for i in xrange(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            count_even += 1\n        if str(i) == str(i)[::-1]:\n            count_odd += 1\n    return (count_even, count_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # use bit manipulation\n    # flip the bit of a number with single bit flip.\n    # Flip all the even bit of the number, and all the odd bit of the number.\n    # time complexity: O(N), N is the input number\n    # space complexity: O(1)\n    ans = (0, 0)\n    if n <= 1:\n        return ans\n    if n % 2 == 0:\n        ans = (1, 0)\n    if n % 2 == 1:\n        ans = (0, 1)\n    for i in range(3, n + 1, 2):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                ans[0] += 1\n            else:\n                ans[1] += 1\n    return ans\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        return 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    odd_count, even_count = 0, 0\n    for i in range(1, n):\n        if is_palindrome(i) and i % 2 == 0:\n            even_count += 1\n        elif is_palindrome(i) and i % 2 == 1:\n            odd_count += 1\n    return (even_count, odd_count)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n            num_str = str(num)\n            num_sum = 0\n            for digit in num_str:\n                num_sum += int(digit)\n            if num_sum > 0:\n                count += 1\n        else:\n            num_str = str(num)\n            num_sum = 0\n            for digit in num_str:\n                num_sum += int(digit)\n            if num_sum > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(v for v in arr if v > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(1 for i in arr if sum(int(x) for x in str(i)) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for x in arr if sum(map(int, str(abs(x)))) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(int(d) > 0 for d in str(abs(arr[0]))) if arr else 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(1 for i in arr if sum(map(int, list(str(i)))) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for num in arr:\n        num_digits = len(str(num))\n        if num_digits > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(c > 0 for a in arr for c in [int(str(a)[0]), int(str(a)[1])])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            num_str = str(i)\n            num_sum = 0\n            for i in num_str:\n                num_sum += int(i)\n            if num_sum > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([1 for num in arr if sum(map(int, str(abs(num)))) > 0])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr)<=1:\n        return True\n    arr=sorted(arr)\n    for i in xrange(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # To perform atmost n right shift operations to get non-decreasing order\n    # we have to find out if the array is sorted or not\n    # we will find out if the array is sorted by comparing the element\n    # with the previous element (arr[i] > arr[i-1])\n    # if yes, we will do a right shift operation to array\n    # else, we will have to go back to the beginning and do a left shift operation\n    # to the array\n    # if the array is sorted then return True\n    # else return False\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            # if we shift back the array and we get non-decreasing\n            # then we are done\n            arr = arr[i:]+arr[:i]\n            break\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr = arr[:]\n    for _ in xrange(len(arr)):\n        if arr[0] > arr[-1]:\n            if arr[0] < arr[-1] or arr[0] == arr[-1]:\n                arr = arr[1:]\n            else:\n                return False\n        else:\n            arr = arr[1:] + [arr[0]]\n    return True\n    \ndef min_max_sum(arr):\n    \"\"\"\n    We have an array arr[1], arr[2],..., arr[N]\n    We can find the max sum and min sum of this array by performing following\n    operation on the given array:\n        Find the middle element of the array.\n        Check if this element is greater than the sum of first and last elements\n        of the array.\n        If this is the case then replace the middle element with the sum of the\n        first and last element of the array.\n        Return the max and min sums of the modified array.\n        \n    If the array is empty then return 0, 0.\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #base case\n    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr)==0:\n        return True\n    return is_sorted(arr) and move_one_ball(arr[:-1])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    arr.sort()\n    arr[0], arr[len(arr) - 1] = arr[len(arr) - 1], arr[0]\n    return arr == sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return True\n    arr_len = len(arr)\n    for i in range(arr_len):\n        if i == 0 and arr[i] > arr[i+1]:\n            return False\n        elif i==arr_len-1:\n            return True\n        elif arr[i] > arr[i+1]:\n            return False\n        \n    for shift_count in range(arr_len):\n        temp = arr[0]\n        for i in range(1, arr_len):\n            arr[i-1] = arr[i]\n        arr[arr_len-1] = temp\n        if arr[0] > arr[1]:\n            return False\n        \n    return True\n        \nif __name__==\"__main__\":\n    print(move_one_ball([3, 4, 5, 1, 2]))\n    print(move_one_ball([3, 4, 5, 1, 2, 0, 1, 1, 0, 0, 0, 0]))\n    print(move_one_ball([3, 4, 5, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0]))\n    print(move_one_ball([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    N = len(arr)\n    if N < 2:\n        return True\n    else:\n        arr = sorted(arr)\n        \n        for i in range(N-1):\n            if arr[i] > arr[i+1]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if arr==[]:\n        return True\n    i=0\n    j=len(arr)-1\n    while i<j:\n        if arr[i]<arr[j]:\n            return True\n        else:\n            if arr[i]>arr[j] and arr[j-1]<arr[j]:\n                j-=1\n            elif arr[i]<arr[j] and arr[j-1]>arr[j]:\n                j-=1\n            else:\n                i+=1\n                j-=1\n    return False\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst1_even = [el for el in lst1 if el%2 == 0]\n    lst2_even = [el for el in lst2 if el%2 == 0]\n    if lst1_even == lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst1 = lst1[:]\n    lst2 = lst2[:]\n    for num in lst1:\n        if num % 2 == 0:\n            lst1.remove(num)\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    return"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    exchanged = False\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] % 2 == 0:\n            exchanged = True\n            if lst2[j] % 2 == 0:\n                i += 1\n                j += 1\n                if lst2[j] % 2 == 0:\n                    i += 1\n                    j += 1\n            else:\n                j += 1\n        else:\n            i += 1\n    if exchanged:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"YES\" if all(lst1[i] % 2 == lst2[i] % 2 for i in range(len(lst1))) else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    exchange_all = lambda lst1, lst2: all(map(lambda x, y: x % 2 == 0 and y % 2 == 0, lst1, lst2))\n    return \"YES\" if exchange_all(lst1, lst2) else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    elif lst1[0] % 2!= 0 or lst2[0] % 2!= 0:\n        return \"NO\"\n    else:\n        for i in range(1,len(lst1)):\n            if lst1[i] % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in lst1:\n        if i % 2!= 0:\n            return \"NO\"\n    for i in lst2:\n        if i % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    hist = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n        else:\n            hist[c] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    histo = {}\n    for letter in test:\n        if letter in histo:\n            histo[letter] += 1\n        else:\n            histo[letter] = 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    histo = {}\n    for letter in test:\n        if letter not in histo:\n            histo[letter] = 1\n        else:\n            histo[letter] += 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for c in test:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if test == '':\n        return {}\n    hist = {}\n    for l in test:\n        if l not in hist:\n            hist[l] = 1\n        else:\n            hist[l] += 1\n    return hist"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    histo = {}\n    for i in test:\n        histo[i] = histo.get(i, 0) + 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if test is None or test == '':\n        return {}\n    \n    # initialize empty dictionary\n    dictionary = {}\n    \n    # process the input string\n    for char in test:\n        if char in dictionary:\n            dictionary[char] += 1\n        else:\n            dictionary[char] = 1\n    \n    # return the dictionary\n    return dictionary\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    histo = {}\n    for c in test:\n        histo[c] = histo.get(c, 0) + 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    test = test.split()\n    dic = {}\n    for s in test:\n        dic[s] = dic.get(s,0) + 1\n    return dic\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (s.replace(c,\"\"), is_palindrome(s.replace(c,\"\")))\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if is_palindrome(s):\n        return (s,True)\n    \n    if not is_palindrome(s):\n        for i in range(len(s)):\n            if s[i] == c:\n                s = s[:i] + s[i+1:]\n                \n                if is_palindrome(s):\n                    return (s,True)\n        return (s,False)\n    \n        \n        \n    \n        \n    \n    \n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = len(s)\n    a = []\n    b = []\n    for i in xrange(l):\n        if s[i] in c:\n            a.append(s[i])\n        else:\n            b.append(s[i])\n    if a == b:\n        return ''.join(b),True\n    else:\n        return ''.join(b),False\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    output = []\n    s = s.lower()\n    c = c.lower()\n    for i in s:\n        if i in c:\n            s = s.replace(i,'',1)\n            c = c.replace(i,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    return (s,False)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    s_rev = s[::-1]\n    if s_rev == s:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    chars = {}\n    for char in c:\n        if char not in chars:\n            chars[char] = 1\n        else:\n            chars[char] += 1\n    i = 0\n    j = len(s)-1\n    while i <= j:\n        if s[i] not in chars:\n            i += 1\n        elif s[j] not in chars:\n            j -= 1\n        else:\n            if chars[s[i]] > 1:\n                chars[s[i]] -= 1\n                chars[s[j]] -= 1\n            else:\n                if s[i]!= s[j]:\n                    return ('',False)\n                else:\n                    i += 1\n                    j -= 1\n    return (s[i:j+1],True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    c = list(c)\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in c:\n            count+=1\n    s=s[count:]\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in c:\n            count+=1\n    s = s[count:]\n    s = s[::-1]\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n    \n    \n    \nif __name__ == '__main__':\n    assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)\n    assert reverse_delete(\"abcdef\",\"b\") == ('acdef',False)\n    assert reverse_delete(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    print('done!'"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    d = {}\n    for i in c:\n        d[i]=1\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in d:\n            del s[i]\n    if s == s[::-1]:\n        return s,True\n    else:\n        return s,False\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    s_t = s[::-1]\n    for i in c:\n        s_t = s_t.replace(i,'')\n    return s_t,s_t == s_t[::-1]\n    \n    \n    \n    "
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # split s into a list of characters\n    s_list = list(s)\n    # create an empty list for the result string\n    res_list = []\n    # loop over each character in s\n    for char in s_list:\n        # if character is equal to a character in c\n        if char == c:\n            # delete the character from the s_list\n            s_list.remove(char)\n    # convert s_list back into a string\n    s = ''.join(s_list)\n    # reverse the string\n    s = s[::-1]\n    # convert s back into a list\n    s_list = list(s)\n    # loop over each character in s\n    for char in s_list:\n        # add each character to the res_list\n        res_list.append(char)\n    # convert the res_list back into a string\n    res = ''.join(res_list)\n    # if the result string is the same as the reverse of s\n    if res == s:\n        # return (res,True)\n        return (res,True)\n    else:\n        # return (res,False)\n        return (res,False)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_lst = []\n    for word in lst:\n        count = 0\n        for char in word:\n            if int(char)%2!= 0:\n                count += 1\n        new_lst.append(\"the number of odd elements \" + str(count) + \" in the str4ng \" + str(word) + \" of the \" + str(lst.index(word) + 1) + \" nput.\")\n    return new_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [str(len([digit for digit in string if int(digit)%2])) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i,string in enumerate(lst)]\n    #first, make a list of all the odd numbers (between 0 and 9)\n    #for each item in the list, if the digit is an even number, remove it\n    #at the end, convert the list back into a string, and then print it\n    #use enumerate to keep track of the list index\n    #lst.pop() to remove the last item in the list\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = []\n    for i in lst:\n        count = 0\n        for char in i:\n            if int(char) % 2 == 1:\n                count += 1\n        res.append(\"the number of odd elements \" + str(count) + \" in the str4ng \" + str(i) + \" of the \" + str(lst.index(i) + 1) + \" nput.\")\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    odd_lst = []\n    for n in lst:\n        n = int(n)\n        odd_lst.append(len([x for x in n if int(x) % 2!= 0]))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [len([i for i in s if int(i)%2 == 1]) for s in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    out = []\n    for i in lst:\n        num_odd = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                num_odd += 1\n        out.append(num_odd)\n    return [\"the number of odd elements \"+str(n)+\" the str4ng \"+str(lst[n])+\" of the \"+str(len(lst))+\"n input.\" for n in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 == 1:\n                count += 1\n        output.append(count)\n    return [\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(lst.index(i) + 1) + \" of the \" + str(len(lst)) + \"n input.\" for i in output]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = []\n    for word in lst:\n        count.append(len(list(filter(lambda x: int(x)%2!= 0, word))))\n    return [\"the number of odd elements %sn the str%ing %s of the %snput.\"%(i, count[i], i) for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [len([x for x in lst[i] if int(x) % 2 == 1]) for i in range(len(lst))]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not nums:\n        return 0\n    sub_sum = sum(nums)\n    if sub_sum == 0:\n        return 0\n    max_val = max(nums)\n    min_sum = sub_sum\n    n = len(nums)\n    for i in range(n):\n        sub_sum = sub_sum - nums[i] + max_val\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ans = 0\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            ans = max(ans, sum)\n    return ans\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    curr_sum = 0\n    min_sum = nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum_so_far = 0\n    min_so_far = sum_so_far\n    for num in nums:\n        sum_so_far = max(0, sum_so_far + num)\n        min_so_far = min(min_so_far, sum_so_far)\n    return min_so_far\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    min_subarray = 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] + min_sum >= 0:\n            min_sum = nums[i] + min_sum\n        else:\n            min_sum = 0\n        if min_sum < min_subarray:\n            min_subarray = min_sum\n    return min_subarray\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n    minSum = nums[0]\n    minIdx = 0\n    for i in xrange(1, len(nums)):\n        if nums[i] < 0:\n            minSum += nums[i]\n        else:\n            minSum = nums[i]\n        if minSum < minSum:\n            minSum = minSum\n            minIdx = i\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    minSubArraySum = 0\n    minSubArraySum_index = len(nums) - 1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    global_min_sum = [nums[0]]*len(nums)\n    for i in range(1,len(nums)):\n        if global_min_sum[i-1] > 0:\n            global_min_sum[i] = min(global_min_sum[i-1]+nums[i], nums[i])\n        else:\n            global_min_sum[i] = nums[i]\n    return min(global_min_sum)\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = len(nums)\n    if l == 0:\n        return 0\n    res = []\n    nums.append(float(\"inf\"))\n    sum = 0\n    for i in xrange(l):\n        sum += nums[i]\n        res.append(sum)\n    res = sorted(res)\n    sum = 0\n    for i in xrange(l-1, -1, -1):\n        sum += nums[i]\n        if sum > res[i]:\n            return sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    previous_sums = [0] * (len(nums) + 1)\n    best_sum = float(\"inf\")\n    for i in range(1, len(nums) + 1):\n        previous_sums[i] = nums[i - 1] + previous_sums[i - 1]\n        if previous_sums[i] < 0:\n            previous_sums[i] = 0\n        if previous_sums[i] < best_sum:\n            best_sum = previous_sums[i]\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    print(n,m)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                #print(i,j)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = max(grid[i-1][j], grid[i][j-1])\n    print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= 0:\n                return -1\n    return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    row = len(grid)\n    col = len(grid[0])\n    n = 0\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j]:\n                n += int(math.ceil(capacity / grid[i][j]))\n    return n\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    cap = capacity\n    \n    if n == 0:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import math\n    rows = len(grid)\n    cols = len(grid[0])\n    buckets = {}\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                bucket = 0\n                buckets[bucket] = []\n                for k in range(rows):\n                    if grid[k][j] == 1:\n                        bucket += 1\n                        buckets[bucket] = []\n                for k in range(cols):\n                    if grid[i][k] == 1:\n                        bucket += 1\n                        buckets[bucket] = []\n    for i in range(len(buckets)):\n        buckets[i+1] = 0\n    for i in range(len(buckets)-1):\n        buckets[i+1] = buckets[i] + buckets[i+1]\n    return buckets[len(buckets)-1]\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import copy\n    from collections import deque\n    n = len(grid)\n    m = len(grid[0])\n    # bfs\n    # for each cell, find the max cell that can be filled in the cell\n    # remove the cell and refill it\n    # repeat until there is no cell that can be filled in\n    \n    # init the grid\n    for row in grid:\n        for i in xrange(len(row)):\n            row[i] = -1\n    buckets = {}\n    # init the buckets\n    for i in xrange(capacity):\n        buckets[i] = 0\n    # fill the buckets\n    q = deque([(0,0)])\n    while q:\n        r,c = q.popleft()\n        # check if filled\n        if r == n-1 and c == m-1:\n            continue\n        # check if visited\n        if grid[r][c]!= -1:\n            continue\n        # fill in\n        grid[r][c] = 1\n        # add to queue\n        if r < n-1:\n            q.append((r+1, c))\n        if r > 0:\n            q.append((r-1, c))\n        if c < m-1:\n            q.append((r, c+1))\n        if c > 0:\n            q.append((r, c-1))\n    # count the buckets\n    count = 0\n    for r in xrange(n):\n        for c in xrange(m):\n            if grid[r][c] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    from collections import deque\n    rows, cols = len(grid), len(grid[0])\n    tot_water = sum(sum(row) for row in grid)\n    # if we have more than the capacity, we can't make it.\n    # if we have less than the capacity, we can fill it.\n    if tot_water > capacity:\n        return -1\n    if tot_water < capacity:\n        return 0\n    # find all the spots with 0\n    to_filling = deque()\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                to_filling.append((row, col))\n    # use bfs to fill\n    visited = set()\n    cnt = 0\n    while to_filling:\n        cur = to_filling.popleft()\n        cnt += 1\n        row, col = cur\n        if cur in visited:\n            continue\n        visited.add(cur)\n        # we have to fill it.\n        # add to queue\n        # remove it from queue\n        # add its neighbors to queue\n        # repeat until queue is empty or capacity reached\n        # add it to visited set\n        # loop through all buckets and fill each with capacity\n        # check if visited or capacity reached\n        # increment cnt\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    row_count, col_count = len(grid), len(grid[0])\n    capacity_matrix = [[0 for j in range(col_count)] for i in range(row_count)]\n    for i in range(row_count):\n        for j in range(col_count):\n            capacity_matrix[i][j] = grid[i][j] * capacity\n    count = 0\n    for i in range(row_count):\n        for j in range(col_count):\n            if capacity_matrix[i][j] > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    wells = [[-1 for _ in row] for row in grid]\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            wells[i][j] = grid[i][j]\n    \n    def is_valid(wells, capacity, i, j):\n        if i < 0 or j < 0 or i >= len(wells) or j >= len(wells[0]):\n            return False\n        elif wells[i][j] == -1:\n            return False\n        elif wells[i][j] == 0:\n            wells[i][j] = 1\n            return True\n        elif wells[i][j] < capacity:\n            wells[i][j] = wells[i][j] + 1\n            return True\n        elif wells[i][j] == capacity:\n            wells[i][j] = 0\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # sort the grid on the height\n    grid.sort(key=lambda x: x[0])\n    # how many buckets are needed to extract water\n    b = math.ceil(capacity / len(grid[0][1:]))\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total_water = sum([sum(row) for row in grid])\n    return math.ceil(total_water / capacity)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bits = [bin(i).count('1') for i in arr]\n    return sorted(arr, key=lambda x: (bits[x], arr[x]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: bin(x).count('1'))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    bits = [bin(i).count(\"1\") for i in arr]\n    return sorted(arr, key=lambda x: (bits[x], arr[x]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted([-i for i in arr if i < 0] + [i for i in arr if i >= 0])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:], x))"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    arr = sorted(arr, key=lambda x: bin(x).count('1'))\n    return arr"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def sort_func(x, y):\n        return x*(-1)**(x+y)\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sorted_arr = []\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ret = []\n    for elem in arr:\n        binary = bin(elem)[2:]\n        ret.append((elem, len(list(filter(lambda x: x=='1', list(binary)))), elem))\n    ret.sort(key=lambda x: (-x[1], x[2]))\n    return [x[2] for x in ret]"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) == 0:\n        return []\n    \n    current_word = \"\"\n    new_words = []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import string\n    vowels = \"aeiouAEIOU\"\n    result = []\n    if not s:\n        return result\n    for word in s.split():\n        count = 0\n        for c in word:\n            if c in string.ascii_lowercase:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n    \n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4)) # [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3)) # [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2)) # []\n    print(select_words(\"Hello world\", 4)) # [\"world\"]\n    print(select_words(\"Uncle sam\", 3)) # [\"Uncle\""
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # 1. split s into a list of words\n    words = s.split(\" \")\n    # 2. check each word for exactly n consonants\n    return [word for word in words if has_n_consonants(word, n)]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [word for word in s.split() if len(word) == n]"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return []\n    \n    words = []\n    for word in s.split():\n        if len(word) == n and word.count(\" \") == 0:\n            words.append(word)\n    \n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [word for word in re.findall('[A-Za-z]+', s) if word.count('a') + word.count('e') + word.count('i') + word.count('o') + word.count('u') == n]\n    \nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\nprint(select_words(\"\", 0))\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    words = []\n    s = s.split(\" \")\n    for word in s:\n        if word!= \"\":\n            if has_consonants(word, n):\n                words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for word in s.split(\" \"):\n        if len(set(word).difference(set(consonants))) == n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    # A few hints:\n    # - use a list comprehension to generate a list of the words in s that have at \n    #   least n consonants\n    # - use a loop to generate a list of the words in s that have at least n consonants\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if word[0] in \"aeiou\":\n        return word[0]\n    elif word[-1] in \"aeiou\":\n        return word[-1]\n    else:\n        for i in range(len(word) - 1, 0, -1):\n            if word[i] in \"aeiou\":\n                return word[i]\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = \"\"\n    \n    def _search(string, index, direction):\n        if index >= len(string):\n            return index\n        \n        if string[index].lower() not in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"):\n            return index\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    index = len(word) - 1\n    while index >= 0:\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not word:\n        return \"\"\n    \n    vowels = \"aeiouAEIOU\"\n    i = len(word) - 1\n    while i >= 0 and word[i] not in vowels:\n        i -= 1\n    \n    if i < 0:\n        return \"\"\n    \n    j = i\n    while j < len(word) and word[j] not in vowels:\n        j += 1\n    \n    if j == len(word):\n        return word[i]\n    \n    return word[i:j]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    # words = ['a', 'e', 'i', 'o', 'u']\n    # words = [w for w in words if w.isalpha()]\n    # words = [w for w in words if len(w) > 1]\n    \n    # words = list(filter(lambda x: len(x) > 1, words))\n    # print(words)\n    \n    for i in range(len(word) - 1, 0, -1):\n        # print(i, word[i])\n        if word[i] in vowels:\n            return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = ['a','e','i','o','u']\n    vowel_pos = []\n    word = word.lower()\n    for idx,char in enumerate(word):\n        if char in vowels:\n            vowel_pos.append(idx)\n    if not vowel_pos:\n        return \"\"\n    if len(vowel_pos) == 1:\n        return word[vowel_pos[0]+1]\n    vowel_pos.sort(reverse=True)\n    # print vowel_pos,word[vowel_pos[0]+1:vowel_pos[1]]\n    return word[vowel_pos[0]+1:vowel_pos[1]]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    list_of_vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word.lower()\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in list_of_vowels:\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Build a hash table of the open and closed brackets\n    hash_table = {}\n    for i in range(len(lst[0])):\n        if lst[0][i] not in hash_table:\n            hash_table[lst[0][i]] = [i]\n        else:\n            hash_table[lst[0][i]].append(i)\n    \n    # Iterate over the open and close brackets of the second string\n    for j in range(len(lst[1])):\n        if lst[1][j] in hash_table:\n            if len(hash_table[lst[1][j]]) == 0:\n                return 'No'\n            else:\n                for k in hash_table[lst[1][j]]:\n                    if lst[0][k]!= lst[1][j]:\n                        return 'No'\n                    else:\n                        hash_table[lst[1][j]].remove(k)\n                        lst[0] = lst[0][:k]+lst[1][j]+lst[0][k+1:]\n                        \n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not lst:\n        return 'Yes'\n    stack, parens = [], []\n    for p in lst:\n        if p == '(':\n            stack.append('(')\n        else:\n            if not stack:\n                parens.append(p)\n                continue\n            if parens[-1] == '(':\n                stack.pop()\n                parens.pop()\n            else:\n                parens.append(p)\n    return 'Yes' if not stack and not parens else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    j = len(lst[0]) - 1\n    while i < len(lst[0]) and j >= 0:\n        if lst[0][i]!= lst[1][j]:\n            return 'No'\n        i += 1\n        j -= 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Brute Force\n    def is_balanced(lst):\n        if len(lst) % 2!= 0:\n            return False\n        for i in range(len(lst)//2):\n            if lst[i]!= lst[-1-i]:\n                return False\n        return True\n    for i in range(len(lst[0])):\n        for j in range(len(lst[1])):\n            new_lst = [lst[0][:i]+lst[1][j]+lst[0][i+1:],lst[1][:j]+lst[0][i]+lst[1][j+1:]]\n            if is_balanced(new_lst):\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # the order matters\n    def is_balanced(s):\n        left = right = 0\n        for c in s:\n            if c == '(':\n                left += 1\n            else:\n                right += 1\n            if right > left:\n                return False\n        return True\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    lst = iter(lst)\n    try:\n        left = next(lst)\n        right = next(lst)\n    except StopIteration:\n        return 'Yes'\n    \n    if left!= '(' or right!= ')':\n        return 'No'\n    \n    lst = ''.join(lst)\n    if lst.count('(')!= lst.count(')'):\n        return 'No'\n    \n    return match_parens(lst[1:])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"\"\"\n    if arr is None or len(arr) < 1:\n        return []\n    elif len(arr) < k:\n        return sorted(arr)\n    else:\n        max_arr = []\n        for i in range(len(arr) - k + 1):\n            max_arr.append(max(arr[i:i+k]))\n        return max_arr\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def find_max(arr, k):\n        start, end = 0, len(arr) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if arr[mid] > arr[end]:\n                end = mid\n            elif arr[mid] < arr[end]:\n                start = mid\n            else:\n                end -= 1\n        \n        if k <= end:\n            return arr[:k]\n        if k > end + 1:\n            return arr[end + 1:]\n        return arr[:end + 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # base case, return empty array\n    if k == 0:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # find the kth largest number in arr\n    kth_max_arr = find_kth_max(arr, k)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in xrange(k):\n        m = max(arr)\n        result.append(m)\n        arr.remove(m)\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [sorted(arr, reverse = True)[i] for i in xrange(k)]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    return arr[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if k > len(arr):\n        return arr\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = list(filter(lambda x: x%2==0, lst))\n    return sum(lst)\n    \nassert solution([5, 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\nassert solution([30, 13, 24, 321]) == 0"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([int(i%2) for i in lst])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[::2])"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sums = 0\n    for i in lst:\n        if i % 2 == 0:\n            continue\n        sums += i\n    return sums\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2!= 0])\n    \n    \n    \ndef main():\n    print(solution([5, 8, 7, 1]))\n    print(solution([3, 3, 3, 3, 3]))\n    print(solution([30, 13, 24, 321]))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst_len = len(lst)\n    if lst_len == 1:\n        return 0\n    else:\n        odd_sum = 0\n        for i in range(lst_len):\n            if (i % 2) == 0:\n                continue\n            else:\n                odd_sum += lst[i]\n        return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst.sort()\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2!= 0:\n                total += lst[i]\n    return total"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # 1st pass, sort, O(nlogn)\n    # [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    # [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    # [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    # [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([x for x in arr[:k] if len(str(x)) <= 2])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            arr[i] = arr[i] * 10\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # corner cases\n    if not arr:\n        return 0\n    if k >= len(arr):\n        return sum(arr)\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    result = 0\n    while i < k:\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n        i += 1\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if k > len(arr):\n        return 0\n    nums = {i: [] for i in range(k + 1)}\n    sum = 0\n    for i in range(len(arr)):\n        nums[i + 1].append(arr[i])\n    for i in range(k + 1):\n        if len(nums[i]) > 0:\n            sum += sum(nums[i])\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def max_subarray_sum(arr, k):\n        sums = [None] * (k + 1)\n        sums[0] = 0\n        for i in range(1, k + 1):\n            sums[i] = sums[i-1] + arr[i - 1]\n        max_sum = sums[0]\n        for i in range(k + 1, len(arr) + 1):\n            sums[i] = max(sums[i-1], sums[i-k-1] + arr[i - 1 - k])\n            max_sum = max(sums[i], max_sum)\n        return max_sum\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    ans = 0\n    for i in range(min(k, len(arr))):\n        ans += arr[i]\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = 0\n    for i in range(k):\n        s += arr[i]\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(arr[:k])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    collatz_seq = []\n    while n!= 1:\n        if n % 2 == 1:\n            collatz_seq.append(n)\n        n = 3 * n + 1\n    return collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: x%2!= 0, [n] + _get_collatz_sequence(n)))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2) + [n]\n    else:\n        return get_odd_collatz((3 * n) + 1) + [n]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # get_odd_collatz(1) should return [1]\n    return [i for i in xrange(1, n+1) if get_collatz_seq_len(i)%2!= 0]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = int(n)\n    odds = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3*n + 1\n        odds.append(n)\n    return odds\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not isinstance(n, int) or n <= 0:\n        return \"Please provide a positive integer.\"\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2) + [n]\n    return get_odd_collatz(3 * n + 1) + [n]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Base case: 1\n    if n == 1:\n        return [1]\n    # Otherwise, calculate the next number in the sequence\n    if n % 2 == 0:\n        n = n / 2\n    else:\n        n = (3 * n) + 1\n    return [n] + get_odd_collatz(n)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return [n]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n / 2) + [n]\n        else:\n            return get_odd_collatz(3 * n + 1) + [n]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    odd_nums = []\n    \n    while n!= 1:\n        if n % 2 == 1:\n            odd_nums.append(n)\n        n = (n + 1) / 2 if n % 2 == 0 else (3 * n) + 1\n    \n    return odd_nums\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    months = ['january','march','may', 'july', 'august', 'october', 'december']\n    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday','saturday','sunday']\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    valid_date_re = re.compile('^(\\d{1,2})-(\\d{1,2})-(\\d{4})$')\n    return valid_date_re.match(date)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # We will use regular expressions for this task. Regular expressions will be\n    # useful for matching text/strings and performing some manipulation on them.\n    import re\n    regex = re.compile(r'^(\\d{2})-(\\d{2})-(\\d{4})$')\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    month = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n    day = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n    year = [str(i) for i in range(1930, 2001)]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def valid_month(month):\n        months = [1, 3, 5, 7, 8, 10, 12]\n        if month not in months:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    date_list = date.split('-')\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Remove spaces and lowercase all letters\n    date = date.replace(' ', '').lower()\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not date:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if txt == None:\n        return None\n    # if we do not have any text, we return an empty list\n    if len(txt) == 0:\n        return []\n    # if we have only one word, we return it\n    if len(txt) == 1:\n        return txt\n    # if we have more than 1 word, we split the word on spaces\n    if len(txt) > 1:\n        txt = txt.split(' ')\n    # if we still have more than 1 word, we split the word on commas\n    if len(txt) > 1:\n        txt = txt[0].split(',')\n    # if we still have more than 1 word, we split the word on semi-colons\n    if len(txt) > 1:\n        txt = txt[0].split(';')\n    # if we still have more than 1 word, we split the word on hyphens\n    if len(txt) > 1:\n        txt = txt[0].split('-')\n    # we split the word on any whitespace we find\n    for i in range(len(txt)):\n        txt[i] = txt[i].split(' ')\n    # we split the word on any commas we find\n    for i in range(len(txt)):\n        txt[i] = txt[i].split(',')\n    # we split the word on any semi-colons we find\n    for i in range(len(txt)):\n        txt[i] = txt[i].split(';')\n    # we split the word on any hyphens we find\n    for i in range(len(txt)):\n        txt[i] = txt[i].split('-')\n    # we now have a list of lists, we return it\n    return txt\n    \ndef count_words(txt):\n    '''\n    Given a string of words, return the number of words\n    Examples\n    count_words(\"Hello world!\") \u279e 6\n    count_words(\"Hello,world!\") \u279e 6\n    count_words(\"a,b,c,d\") \u279e 4\n    count_words(\"1,2,3,4,5,6\") \u279e 6\n    count_words(\"If you can read, you can write!\") \u279e 10\n    '''\n    txt = split_words(txt)\n    # if we found no text, we return 0\n    if txt == None:\n        return 0\n    # we add all the length of the words in the list to count\n    count = 0\n    for word in txt:\n        count = count + len(word)\n    # we return the count\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your Code Here\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import re\n    def test(x):\n        return re.findall('[a-z]+', x)\n    \n    if txt == \"\":\n        return []\n    if len(txt) == 1:\n        return txt\n    if len(txt) == 2:\n        if txt[0].lower() == txt[1].lower():\n            return txt\n    txt = txt.lower()\n    \n    splits = []\n    for word in txt.split(\" \"):\n        if word.isdigit():\n            splits.append(int(word))\n        else:\n            splits.append(len(test(word)))\n    return splits\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return txt.split(' ')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) <= 1: return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code here\n    return True if lst[-1] - lst[0] == 0 else False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_lst = sorted(lst)\n    lst_len = len(lst)\n    lst_len_sorted = len(sorted_lst)\n    for i in range(0, lst_len):\n        if lst[i]!= sorted_lst[i]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    nums = set(lst)\n    if len(nums) <= 1:\n        return True\n    for i in range(len(nums)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) <= 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    elif lst[0] == lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return is_sorted(lst[1:])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = list(lst)\n    lst.sort()\n    if lst == lst[:]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n    for i in range(1,len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Using Bubble Sort\n    # Keeps track of last number to compare to next number\n    # If all numbers are sorted, return True\n    # Else, return False\n    if len(lst) < 2:\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 'YES' if (interval1[0] < interval1[1] and interval2[0] < interval2[1]) or (interval1[0] > interval1[1] and interval2[0] > interval2[1]) else 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = interval1[0]\n    b = interval1[1]\n    c = interval2[0]\n    d = interval2[1]\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a >= c and b <= d:\n        return \"YES\"\n    elif a <= c and b >= d:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if interval1[0] <= interval1[1] and interval2[0] <= interval2[1]:\n        return interval1[0] <= interval2[1] and interval1[1] >= interval2[0]\n    elif interval1[0] >= interval1[1] and interval2[0] >= interval2[1]:\n        return interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # special case:\n    # (start, end) and (start, end) is same\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def check_prime(number):\n        \"\"\"Checks if a number is a prime number\"\"\"\n        if number <= 1:\n            return False\n        elif number == 2:\n            return True\n        else:\n            i = 2\n            while i <= number/2:\n                if number % i == 0:\n                    return False\n                i += 1\n            return True\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # a, b = interval1\n    # c, d = interval2\n    # if b < a or d < c:\n    #     return \"NO\"\n    # elif (a >= c and a <= d) or (b >= c and b <= d):\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if arr:\n        res = sum([abs(x)*sign(x) for x in arr])\n        return res\n    else:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([abs(x) * sign(x) for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    return sum([abs(x) for x in arr]) * prod([-1, 1, 0][x > 0] for x in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(abs(i) for i in arr) * prod([sign(i) for i in arr]) if arr else None"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return None if not arr else sum(map(abs, arr)) * sign(reduce(lambda x, y: x * y, arr))\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    return sum([abs(x) * sign(x) for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n    return product\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n    res = 0\n    for num in arr:\n        res += abs(num) * sign(num)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([abs(x) * sign(x) for x in arr]) if arr else None\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    m = len(grid)\n    if m == 0: return None\n    n = len(grid[0])\n    if n == 0: return None\n    if k > m * n: return None\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not grid or not grid[0]:\n        return []\n    \n    m = len(grid)\n    n = len(grid[0])\n    \n    dp = [[[False for j in range(n)] for i in range(m)] for k in range(k+1)]\n    # preprocess\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[0][i][j] = True\n            elif i == 0:\n                dp[1][i][j] = grid[i][j] > grid[i][j-1]\n            elif j == 0:\n                dp[1][i][j] = grid[i][j] > grid[i-1][j]\n            else:\n                dp[1][i][j] = grid[i][j] > grid[i-1][j] or grid[i][j] > grid[i][j-1]\n    \n    res = []\n    for k in range(2, k+1):\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[k][i][j] = True\n                elif i == 0:\n                    dp[k][i][j] = dp[k-1][i][j] and grid[i][j] > grid[i][j-1]\n                elif j == 0:\n                    dp[k][i][j] = dp[k-1][i][j] and grid[i][j] > grid[i-1][j]\n                else:\n                    dp[k][i][j] = dp[k-1][i][j] and dp[k][i-1][j] and grid[i][j] > grid[i-1][j] or dp[k-1][i][j-1] and grid[i][j] > grid[i-1][j-1]\n        \n        res = grid[m-1][n-1]\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if i == m-1 and j == n-1:\n                    res = min(res, grid[i][j])\n                elif i == m-1:\n                    res = min(res, grid[i][j], grid[i][j-1])\n                elif j == n-1:\n                    res = min(res, grid[i][j], grid[i-1][j])\n                else:\n                    res = min(res, grid[i][j], grid[i-1][j], grid[i][j-1])\n    \n    return res\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m, n = len(grid), len(grid[0])\n    \n    visited = [[False] * n for _ in range(m)]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import heapq\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(grid) <= 0:\n        return []\n    if len(grid[0]) <= 0:\n        return []\n    \n    # find the top row and left column\n    top_row = 0\n    left_col = 0\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] < grid[top_row][left_col]:\n                top_row = r\n                left_col = c\n    \n    # to store the next most smallest\n    nxt_smallest = []\n    # get the next smallest\n    getNextSmallest(grid, nxt_smallest, top_row, left_col, k)\n    return nxt_smallest\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def check_boundary(x, y, grid):\n        if x < 0 or x >= len(grid):\n            return False\n        if y < 0 or y >= len(grid[0]):\n            return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not grid or not grid[0] or k <= 0:\n        return []\n    if k == 1:\n        return [min(i for row in grid for i in row) for j in range(len(grid))]\n    m, n = len(grid), len(grid[0])\n    p = [[0] * n for _ in range(m)]\n    for i in range(m):\n        p[i][0] = grid[i][0]\n    for j in range(n):\n        p[0][j] = grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            p[i][j] = min(p[i-1][j], p[i][j-1]) + grid[i][j]\n    res = []\n    i, j = m-1, n-1\n    while i >= 0 and j >= 0 and k > 0:\n        if p[i][j] == p[i-1][j]:\n            i -= 1\n        elif p[i][j] == p[i][j-1]:\n            j -= 1\n        else:\n            res.append(grid[i][j])\n            k -= 1\n            i -= 1\n            j -= 1\n    return res[::-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(grid) == 1:\n        return grid[0]\n    if k == 1:\n        return grid[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    numbers = [1, 3, 2, 8]\n    if n == 2:\n        return numbers\n    if n == 3:\n        return numbers + [8]\n    for i in xrange(4, n + 1):\n        numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i - 3])\n    return numbers\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert type(n) is int and n >= 0\n    a, b, c = 3, 1, 1\n    res = [a]\n    if n == 0:\n        return res\n    for _ in range(n - 1):\n        res.append(b)\n        a, b, c = b, b + c, a + b\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    tri = [1, 3, 2]\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return tri\n    if n == 3:\n        return [1, 3, 2]\n    while len(tri) <= n:\n        new = tri[-1] + tri[-2] + tri[-3]\n        tri.append(new)\n    return tri\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        trib_seq = [1, 1, 2]\n        i = 3\n        while len(trib_seq) < n+1:\n            trib_seq.append(sum(trib_seq[i-2:i]))\n            i += 1\n        return trib_seq\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        t = [1, 1, 1]\n        for i in range(3, n + 1):\n            t.append(t[i-1] + t[i-2] + t[i-3])\n        return t\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    fib = [1, 1, 2]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2] + fib[-3])\n    return fib[:n + 1]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        numbers = [1, 1, 1]\n        for i in range(n-1):\n            numbers.append(sum(numbers[-3:]))\n        return numbers"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        # tribonacci_sequence = [1, 2, 3]\n        tribonacci_sequence = [1, 1, 1]\n        for i in range(3, n + 1):\n            tribonacci_sequence.append(sum(tribonacci_sequence[-3:]))\n        return tribonacci_sequence\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Define a recursive function.\n    def trib(n):\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        else:\n            if n % 2 == 0:\n                return trib(n - 1) + [sum(trib(n - 2))]\n            else:\n                return trib(n - 1) + [trib(n - 2)[-1] + trib(n - 2)[-2] + trib(n - 2)[-3]]\n    return trib(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = [1]\n    fib1, fib2, fib3 = 1, 2, 3\n    for i in range(1, n + 1):\n        if i == 1:\n            res.append(fib1)\n        elif i == 2:\n            res.append(fib2)\n        elif i == 3:\n            res.append(fib3)\n        else:\n            fib1, fib2, fib3 = fib2, fib3, fib3 + fib2 + fib1\n            res.append(fib3)\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 1 if n % 2 else n\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 1\n    while n > 0:\n        result *= n % 10\n        n //= 10\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 10:\n        return n\n    if n % 10 == 0:\n        return 0\n    s = 0\n    while n > 0:\n        if n % 2 == 1:\n            s += n % 10\n        n /= 10\n    return s\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    product = 1\n    for i in range(len(n)):\n        if int(n[i]) % 2!= 0:\n            product *= int(n[i])\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    x = []\n    while n!= 0:\n        y = n % 10\n        if y!= 0:\n            x.append(y)\n        n //= 10\n    prod = 1\n    for i in x:\n        if i % 2 == 1:\n            prod *= i\n    return prod\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # edge case:\n    if n == 0:\n        return 0\n    \n    # edge case:\n    if n < 0:\n        return 0\n    \n    # edge case:\n    if n == 1:\n        return 1\n    \n    # initialize variable:\n    product = 1\n    \n    # loop through the digits, adding to the product at each step:\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % 2 == 0:\n            product *= int(str(n)[i])\n    \n    return product\n    \nprint digits(235)\nprint digits(1)\nprint digits(4)\nprint digits(12)"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % 2!= 0:\n            count += 1\n    return count * n if count > 0 else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    product = 1\n    for i in xrange(len(str(n))):\n        if int(str(n)[i]) % 2!= 0:\n            product *= int(str(n)[i])\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = str(n)\n    ans = 1\n    for c in s:\n        if int(c) % 2 == 1:\n            ans *= int(c)\n    return ans\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            res *= int(i)\n    return res\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_string = string\n    stack = []\n    for letter in string:\n        if letter == ']' and stack:\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(letter)\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pile = []\n    for c in string:\n        if c == '[' or c == ']':\n            pile.append(c)\n            if len(pile) == 1:\n                return False\n            if pile[-2] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-2] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-1] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if pile[-1] == '[' and c == ']':\n                pile.pop(-1)\n                pile.pop(-1)\n            if len(pile)!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pas"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False if stack else True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        elif string[i] == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return is_valid(string, 0)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # for the second solution use a stack of lists\n    # if a closing bracket is encountered, pop the last element\n    # if it's not a bracket, the bracket is not nested\n    \n    # when the stack is empty, all brackets are nested\n    # when the stack has at least one closing bracket, the bracket is not nested\n    \n    # if the stack is empty, all brackets are nested\n    # if the stack has at least one closing bracket, the bracket is not nested\n    \n    stack = []\n    for bracket in string:\n        if bracket == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        else:\n            stack.append(bracket)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    characters = {'[': ']', '{': '}', '(': ')'}\n    stack = []\n    for c in string:\n        if c in characters.keys():\n            stack.append(c)\n        elif c in characters.values():\n            if len(stack) == 0 or characters[stack.pop()]!= c:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(string):\n        if string[i] == ']' and string[-1] == '[':\n            string = string[:i] + string[i+1:-1]\n        elif string[i] == ']' and string[-1] == '[':\n            string = string[:i] + string[i+1:]\n        elif string[i] == ']' and string[-1] == ']':\n            string = string[:i] + string[i+1:]\n        elif string[i] == '[' and string[-1] == ']':\n            string = string[:i] + string[i+1:]\n        else:\n            i += 1\n    if len(string) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bracket = re.compile(r'[\\[\\]\\{\\}\\(\\)]')\n    return not re.search(bracket, string)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum( [int(math.ceil(i))**2 for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(x**2 for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = list(map(int, lst))\n    for i in lst:\n        i = ceil(i)\n    return sum(map(lambda x: x**2, lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(i**2 for i in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([int(ceil(float(x)**2)) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for i in lst:\n        result = result + pow(i, 2)\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([round(x**2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return sum([round(float(x)*float(x)) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(math.ceil(x**2)) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([math.floor(a**2) for a in lst])\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return txt[-1].isalpha() and not txt[-1].lower() in \"aeiou\"\n    \n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (txt[-1].isalpha() and txt[-1]!= \" \" and txt[-1]!= \".\")\n    #pass\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    txt = txt.rstrip()\n    if txt[-1].isalpha() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(txt)>1 and txt[-1].isalpha() and not txt[-1].isalnum()\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return txt.strip()[-1].isalpha() and txt.strip()[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(txt) < 1:\n        return False\n    if txt[-1].isalpha() and txt[-1]!='':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(txt) == 0:\n        return False\n    elif len(txt) == 1:\n        return False\n    else:\n        if txt[-1].isalpha() == True:\n            if txt[-1] not in [\" \", \"'\", \"\\\"\"]:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    last_char = txt[-1]\n    if (last_char.isalpha()) and not(last_char.isupper() or last_char.islower()):\n        return True\n    return False\n    \n    \n    \ndef tup_of_first_last_char_of_palindrome(txt):\n    '''\n    Create a function that returns a tup of the first and the last\n    characters of a given string. If the string is not a palindrome,\n    the function should return a tup with \"None\" as the first and\n    second items.\n    Note: \"palindrome\" is a word or phrase that reads the same\n    backward as forward.\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return True if txt[-1].isalpha() and not txt.split() else False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    txt_len = len(txt)\n    if txt_len == 0:\n        return False\n    elif txt_len == 1:\n        return False\n    elif txt[-1].isalpha():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return max([(idx, arr[idx] - arr[idx - 1]) for idx in range(1, len(arr)) if arr[idx] > arr[idx - 1]] or [-1])[0]\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    index = 0\n    arr_len = len(arr)\n    while index < arr_len - 1:\n        if arr[index] >= arr[index + 1]:\n            index += 1\n        else:\n            break\n    if index == arr_len - 1:\n        return -1\n    else:\n        return index"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i + 1] <= arr[i]:\n            return -1\n    return i\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def largest_idx(num):\n        for i in range(len(arr)):\n            if arr[i] <= num:\n                return i\n        return -1\n    return largest_idx\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return max(\n        [\n            i if arr[i] <= arr[i - 1] else -1\n            for i in range(1, len(arr))\n        ]\n    )\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Sort array to get a list of values that can be compared\n    arr.sort()\n    # Loop over array elements (starting with index = 1)\n    for i in range(1, len(arr)):\n        # If current element is greater than the previous element then the\n        # previous element can't be in the array because the next element is\n        # greater than the previous element. The array can't be arranged\n        # because the next element is greater than the current element.\n        if arr[i] > arr[i - 1]:\n            return -1\n    # If there is a single element in the array, then the last element is\n    # the largest element, therefore return the index of the last element\n    return arr[-1]\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Try to find the largest index i, such that arr[i] >= arr[i-1]\n    # If not found, return -1\n    arr_copy = list(arr)\n    for i in range(len(arr_copy)):\n        if arr_copy[i] < arr_copy[i-1]:\n            arr_copy[i] = -1\n    return max(arr_copy)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # add code here\n    max_neg = None\n    min_pos = None\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if not negatives and not positives:\n        return (None, None)\n    elif not negatives and positives:\n        return (positives[0], None)\n    elif not positives and negatives:\n        return (negatives[0], None)\n    else:\n        return (max(negatives), min(positives))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return None, None"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_neg = -float('inf')\n    min_pos = float('inf')\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n        if num > 0 and num < min_pos:\n            min_pos = num\n    if max_neg == -float('inf'):\n        max_neg = None\n    if min_pos == float('inf'):\n        min_pos = None\n    return (max_neg, min_pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # We will use a stack for this, but we can use a sorted list\n    # and we can also use a set.\n    lst = sorted(list(set(lst)))\n    n, p = None, None\n    if len(lst) == 0:\n        return (n, p)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n    if lst[0] < 0:\n        n = lst[0]\n    else:\n        p = lst[0]\n    for x in lst:\n        if x < 0:\n            if n is None or n < x:\n                n = x\n        else:\n            if p is None or p > x:\n                p = x\n    return (n, p)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b = None, None\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = i\n            elif a > i:\n                a = i\n        elif i > 0:\n            if b is None:\n                b = i\n            elif b < i:\n                b = i\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_neg = max_pos = None\n    for num in lst:\n        if num > 0:\n            if max_pos is None or max_pos < num:\n                max_pos = num\n        elif num < 0:\n            if max_neg is None or max_neg < num:\n                max_neg = num\n    return (max_neg, max_pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    negs = filter(lambda x: x < 0, lst)\n    pos = filter(lambda x: x > 0, lst)\n    if not negs:\n        return (None, None)\n    if not pos:\n        return (None, None)\n    return (max(negs), min(pos))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if isinstance(a, float):\n        a = str(a)\n    if isinstance(b, float):\n        b = str(b)\n    if a == b:\n        return None\n    if float(a) > float(b):\n        return a\n    return b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if isinstance(a, float):\n        return a if a > b else b\n    elif isinstance(a, str):\n        a = a.replace(',', '.')\n        a = a.replace('.', ',')\n        return float(a)\n    elif isinstance(a, int) or isinstance(a, str):\n        return None\n    else:\n        return a\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    elif type(a) == str and type(b) == str:\n        return a if float(a) > float(b) else b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if type(a) == type(b):\n        return None\n    else:\n        if a < b:\n            return b\n        return a\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        else:\n            return b\n    if isinstance(a, str) and not isinstance(b, str):\n        if a > b:\n            return a\n        else:\n            return b\n    if not isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return b\n        else:\n            return a\n    if a == b:\n        return None\n    else:\n        if isinstance(a, int) or isinstance(a, float) or isinstance(a, str):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a_type = type(a)\n    b_type = type(b)\n    if a_type == b_type:\n        if a_type == int or a_type == float:\n            return max(a, b)\n        else:\n            return None\n    elif a_type == str:\n        return max(a, b, key=len)\n    elif b_type == str:\n        return max(a, b, key=len)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # O(1) runtime\n    if n % 2!= 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n % 2 == 0 and sum([i for i in range(4, n, 2) if i <= n]) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in xrange(n/2, 0, -2):\n        if i*(i+2) == n:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return is_equal_to_sum_n(n, 4, 2, 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 4:\n        return False\n    if n % 2 == 0:\n        return n / 2 in [2, 4]\n    else:\n        return n - 2 in [2, 4]"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n%2!= 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (n % 2 == 0 and n / 2 + 2 * n % 2 == n / 2)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not n % 2:\n        n = n / 2\n    while n > 0:\n        if n % 2:\n            return False\n        n = n / 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(filter(lambda x: x%2==0, range(2,n+1,2))) == n\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    factorial = 1\n    for x in range(n):\n        factorial = factorial * (n - x)\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return 1\n    return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pas"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0:\n        raise ValueError(\"Factorials of negative numbers are not defined\")\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # TODO: complete the implementation\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    factorial = 1\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import re\n    text = re.sub(r'\\s+', '_', text)\n    if text.count(' ') > 2:\n        text = re.sub(r'\\s+', '-', text)\n    return text\n    \ndef generate_id(text, a_id_map):\n    \"\"\"\n    Given a text, generate a unique id, which is a number \n    that will not collide with other ids used in the code. \n    \n    If an id is not available, then the id is -1\n    \n    generate_id(\"a\", [3, 2, 1, -1]) == \"1\"\n    generate_id(\"b\", [3, 2, 1, -1]) == \"2\"\n    generate_id(\"c\", [3, 2, 1, -1]) == \"3\"\n    generate_id(\"a\", [3, 2, 1, -1]) == \"4\"\n    \"\"\"\n    id = -1\n    while id in a_id_map:\n        id += 1\n    return id\n    \ndef format_attrs(attrs, a_id_map):\n    \"\"\"\n    Given a dictionary of attributes, \n    return the text of the HTML tag corresponding to the attributes.\n    \n    format_attrs({'id':'a'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    format_attrs({'id':'a', 'class':'blue'}, {3: 'a', 2: 'b', 1: 'c'}) == \" id=\\\"a\\\" class=\\\"blue\\\"\"\n    \"\"\"\n    import re\n    \n    s = ''\n    for k, v in attrs.items():\n        if k == 'id':\n            s += \" id=\\\"{0}\\\"\".format(v)\n        elif k == 'class':\n            s += \" class=\\\"{0}\\\"\".format(v)\n        else:\n            s += \" {0}=\\\"{1}\\\"\".format(k, v)\n    if s!= '':\n        s ='' + s\n    \n    \n    return s\n    \ndef escape_html(s):\n    \"\"\"\n    Escape HTML characters that can't be represented in HTML strings, \n    like &, <, and >\n    \n    escape_html(\"Example\") == \"Example\"\n    escape_html(\"Example<script>alert('Hello');</script>\") == \"Example&lt;script&gt;alert('Hello');&lt;/script&gt;\"\n    \"\"\"\n    import re\n    return re.sub(r'&(?![A-Za-z]+[0-9]*;|#[0-9]+;|#x[0-9A-F]+;)', '&amp;', s)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return text\n    if \"  \" in text:\n        text = text.replace(\"  \",\"-\")\n    if not text:\n        return text\n    \n    return text[0] + \"\".join(text.split())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import re\n    \n    result = re.sub('\\s+', '_', text)\n    if len(result) > 2:\n        result = re.sub('\\s+', '-', result)\n    return result\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return re.sub(r\"\\s+\", \"\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    text = text.replace(\" \", \"_\")\n    if text.count(\"_\") > 2:\n        text = text.replace(\"_\", \" \", 1)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    new_text = re.sub(r'[ \\t]+', '_', text)\n    if len(re.findall(r'[ \\t]+', text)) > 2:\n        new_text = re.sub(r'[ \\t]+', '-', new_text)\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_text = re.sub(' +','_',text)\n    if len(new_text) > 2:\n        new_text = re.sub('_+','_',new_text)\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text.replace(\" \", \"_\")\n    \ndef to_snake_case(string):\n    \"\"\"\n    Converts a string to snake_case\n    to_snake_case(\"Example\") == \"example\"\n    to_snake_case(\"Example 1\") == \"example_1\"\n    to_snake_case(\" Example 2\") == \"_example_2\"\n    to_snake_case(\" Example   3\") == \"_example_3\"\n    \"\"\"\n    return \"_\".join(string.split(\" \")).lower()"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if text == \"\":\n        return \"\"\n    \n    if len(text) == 1:\n        if text[0] == \" \":\n            return \"_\"\n        else:\n            return text\n    \n    \n    new_text = \"\"\n    \n    i = 0\n    while i < len(text):\n        char = text[i]\n        next_char = text[i+1]\n        \n        if char == \" \" and next_char == \" \":\n            char = \"_\"\n        \n        new_text += char\n        \n        i += 1\n    \n    return new_text\n    \n    \n    \ndef main():\n    \"\"\"\n    Loads the fixed file and prints it.\n    \"\"\"\n    with open(\"simple_text.txt\") as f:\n        text = f.read()\n        fixed_text = fix_spaces(text)\n        print(fixed_text)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    return 'Yes'\n    \n    \ndef main():\n    # test case 1\n    print file_name_check(\"example.txt\")\n    print file_name_check(\"1example.dll\")\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import re\n    if re.search(r'\\d', file_name):\n        return 'No'\n    if re.search(r'\\.{2,}', file_name):\n        return 'No'\n    if re.search(r'^[a-zA-Z]', file_name):\n        return 'No'\n    if re.search(r'\\.txt$|\\.exe$|\\.dll$', file_name):\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    regex = re.compile(r\"[a-zA-Z]*\\.[a-zA-Z0-9]*\\.[a-zA-Z]*\")\n    if not regex.search(file_name):\n        return 'No'\n    if not file_name.split('.')[0]:\n        return 'No'\n    if not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def file_name_checker(file_name):\n        return file_name.replace(' ', '').replace('\\t', '').replace('\\n', '').lower() \\\n            .replace('.', '').replace('-', '').replace('_', '').replace('++', '') \\\n            .replace('+', '') == '' or file_name[0] in 'abcdefghijklmnopqrstuvwxyz' \\\n            and file_name.count('.') == 1 and file_name.count('-') == 1 \\\n            and file_name.count('_') == 1 and file_name.count('++') == 1 and \\\n            file_name[file_name.find('.') + 1:].lower() in ['txt', 'exe', 'dll']\n    return file_name_checker(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def file_name_check_helper(file_name):\n        def file_name_check_helper_helper(file_name):\n            # Check for file name length\n            if len(file_name) > 40:\n                return 'No'\n            # Check for file name digit\n            digit = 0\n            for i in file_name:\n                if i.isdigit():\n                    digit += 1\n            if digit > 3:\n                return 'No'\n            # Check for file name.\n            if file_name.find('.') == -1:\n                return 'No'\n            # Check for file name.\n            file_name_dot_pos = file_name.find('.')\n            if file_name_dot_pos == 0:\n                return 'No'\n            file_name_after_dot = file_name[file_name_dot_pos:]\n            if not file_name_after_dot[0].isalpha():\n                return 'No'\n            # Check for file name.\n            if file_name_after_dot not in ['txt', 'exe', 'dll']:\n                return 'No'\n            return 'Yes'\n        return file_name_check_helper_helper(file_name)\n    return file_name_check_helper(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def valid_name(file_name):\n        if re.search(\"\\d+\", file_name):\n            return \"No\"\n        elif re.search(\"\\.\", file_name):\n            return \"Yes\"\n        elif re.search(\"[a-zA-Z]\\w\", file_name):\n            return \"Yes\"\n        elif re.search(\"[a-zA-Z]\\w\\w\\w\", file_name):\n            return \"Yes\"\n        elif re.search(\"[a-zA-Z]\\w\\w\\w\\w\", file_name):\n            return \"Yes\"\n        else:\n            return \"No\"\n    return valid_name(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_valid_name(file_name):\n        if not '.' in file_name:\n            return 'No'\n        if not file_name[0].isalpha():\n            return 'No'\n        if not file_name[1:].isalpha():\n            return 'No'\n        if file_name.endswith('.txt') or file_name.endswith('.exe') or file_name.endswith('.dll'):\n            return 'Yes'\n        return 'No'\n    return is_valid_name(file_name)\n    \nimport string\ndef word_count(words):\n    \"\"\"Create a function which takes a string containing multiple words separated by spaces\n    and returns a tuple containing the number of words in the string and the number of unique\n    words in the string.\n    Examples:\n    word_count(\"\") # => (0, 0)\n    word_count(\"example example\") # => (2, 2)\n    word_count(\"a a a a a a a a a a\") # => (12, 12)\n    word_count(\"word word word\") # => (3, 3)\n    \"\"\"\n    def count_unique_words(string):\n        unique = set()\n        words = string.split()\n        for word in words:\n            if word in unique:\n                continue\n            unique.add(word)\n        return len(unique), len(words)\n    return count_unique_words(words)\n    \ndef is_increasing_sequence(sequence):\n    \"\"\"Create a function which takes a sequence of integers and returns 'Yes' if the \n    sequence is increasing, and returns 'No' otherwise.\n    Examples:\n    is_increasing_sequence([1, 2, 3, 4, 5]) # => 'Yes'\n    is_increasing_sequence([2, 3, 4, 5, 1]) # => 'No' (the sequence is decreasing)\n    is_increasing_sequence([1, 2, 3, 4, 1]) # => 'Yes' (the sequence is non-increasing)\n    is_increasing_sequence([]) # => 'No' (the sequence is empty)\n    \"\"\"\n    def is_increasing(sequence):\n        for i in range(1, len(sequence)):\n            if sequence[i-1] >= sequence[i]:\n                continue\n            else:\n                return False\n        return True\n    return is_increasing(sequence)\n    \ndef is_sorted(sequence):\n    \"\"\"Create a function which takes a sequence of integers and returns 'Yes' if the \n    sequence is sorted, and returns 'No' otherwise.\n    Examples:\n    is_sorted([1, 2, 3]) # => 'Yes'\n    is_sorted([3, 2, 1]) # => 'No' (the sequence is not sorted)\n    is_sorted([1, 1, 2, 3]) # => 'Yes' (the sequence is sorted)\n    is_sorted([1, 2, 3, 4]) # => 'Yes' (the sequence is sorted)\n    is_sorted([]) # => 'No' (the sequence is empty)\n    \"\"\"\n    def is_sorted_asc(sequence):\n        if not sequence:\n            return True\n        return all([sequence[i] <= sequence[i+1] for i in range(len(sequence)-1)])\n    return is_sorted_asc(sequence)\n    \ndef add_two_numbers(a, b):\n    \"\"\"Create a function which takes two integers (a and b) and returns their sum.\n    Examples:\n    add_two_numbers(1, 2) # => 3\n    add_two_numbers(3, 4) # => 7\n    add_two_numbers(2, 4) # => 6\n    add_two_numbers(-1, -1) # => -2\n    add_two_numbers(5, 5) # => 10\n    add_two_numbers(0, 0) # => 0\n    \"\"\"\n    return a + b\n    \ndef find_longest_word(words):\n    \"\"\"Create a function which takes a string containing multiple words separated by spaces\n    and returns the length of the longest one of the words.\n    Examples:\n    find_longest_word(\"\") # => 0\n    find_longest_word(\"example\") # => 5\n    find_longest_word(\"python\") # => 6\n    find_longest_word(\"exampl"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # YOUR CODE GOES HERE\n    # a = 0\n    # l = len(file_name)\n    # for i in range(l):\n    #     if file_name[i] >= '0' and file_name[i] <= '9':\n    #         a = a + 1\n    # print a\n    # if a == 1:\n    #     pass\n    # else:\n    #     return 'No'\n    # l = len(file_name)\n    # if l > 0:\n    #     if file_name[0] < 'a' or file_name[0] > 'z':\n    #         return 'No'\n    #     if file_name[l-1] == '.':\n    #         return 'Yes'\n    #     if file_name[l-1] == '.':\n    #         return 'Yes'\n    #     return 'No'\n    # else:\n    #     return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Write your code here\n    file_name_lst = file_name.split(\".\")\n    if len(file_name_lst)!= 2:\n        return \"No\"\n    if file_name_lst[0] == '':\n        return \"No\"\n    if not file_name_lst[0][0].isalpha():\n        return \"No\"\n    if not file_name_lst[0].isdigit():\n        return \"No\"\n    if file_name_lst[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4!= 0:\n            sum += lst[i]**2\n        elif i%4 == 0 and i%3!= 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n            \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst2=[]\n    for i in range(0, len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst2.append(lst[i]**2)\n        elif i % 4 == 0 and i % 3!= 0:\n            lst2.append(lst[i]**3)\n        else:\n            lst2.append(lst[i])\n    return sum(lst2)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i]**2\n        elif i%4 == 0:\n            sum += lst[i]**3\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Write your code here\n    new_lst = []\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            new_lst.append(lst[i]**2)\n        elif i % 4 == 0 and i % 3!= 0:\n            new_lst.append(lst[i]**3)\n        else:\n            new_lst.append(lst[i])\n    return sum(new_lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            if i % 4 == 0:\n                sum += i*i*i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst2 = [elem**2 if index%3 == 0 else elem**3 for index, elem in enumerate(lst)]\n    return sum(lst2)"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(0,len(lst)):\n        if(i%3==0 or i%4==0):\n            sum = sum + (lst[i]*lst[i])\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    newList = []\n    index = 0\n    \n    for i in lst:\n        if (index % 3 == 0 or index % 4 == 0):\n            newList.append(i * i)\n        else:\n            newList.append(i)\n        index += 1\n        \n    return sum(newList"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([(e ** 2) for i, e in enumerate(lst) if i % 4 == 0 and i % 3 == 0])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join([s for s in sentence.split() if is_prime(len(s))])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(sorted(set(sentence.split()), key=len)[::-1])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not sentence:\n        return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return''.join(filter(lambda w: is_prime(len(w)), sentence.split(' ')))"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for word in sentence.split(' '):\n        if is_prime(len(word)):\n            result.append(word)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Using integer division, and slightly changing the result to maintain an integer.\n    return x.replace(\"/\", \"//\").replace(\" \", \"\") == str(int(eval(x) * int(n)))\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def sign(x):\n        if x[0] == '-':\n            return -1\n        else:\n            return 1\n    \n    def simp(x, n):\n        numer, denom = x.split('/')\n        numer = int(numer)\n        denom = int(denom)\n        sign1 = sign(numer)\n        sign2 = sign(denom)\n        if sign1 == sign2:\n            return False\n        else:\n            if sign2 == -1:\n                numer = -numer\n                denom = -denom\n            gcd = gcd(numer, denom)\n            numer = int(numer / gcd)\n            denom = int(denom / gcd)\n            if numer == 0:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == \"0\" or n == \"0\":\n        return True\n    try:\n        numerator, denominator = map(int, x.split('/'))\n        num, den = int(numerator), int(denominator)\n        return simplify_whole_num(num, den)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numerator, denominator = int(x[0]), int(x[2])\n    simplified = numerator / denominator\n    if simplified.is_integer():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    numerator *= n\n    if not numerator % denominator:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert isinstance(x, str) and isinstance(n, str)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x == \"0\" or n == \"0\":\n        return False\n    try:\n        x, n = x.split('/'), n.split('/')\n        x[1] = int(x[1])\n        n[1] = int(n[1])\n    except:\n        return False\n    if x[1] % n[1] == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = x.split('/')\n    b = n.split('/')\n    if a[0] == b[0]:\n        if int(b[1])/int(a[1]) == int(b[0])/int(a[0]):\n            return True\n        else:\n            return False\n    elif a[1] == b[1]:\n        if int(b[0])/int(a[0]) == int(b[1])/int(a[1]):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def gcd(x, y):\n        if x % y == 0:\n            return y\n        else:\n            return gcd(y, x % y)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return True\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {}\n    for i, n in enumerate(nums):\n        d[n] = i\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(nums, key = lambda x: sum([int(digit) for digit in str(x)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda i: sum([int(j) for j in str(i)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # a list of dicts, where the key is the sum of the digits of a number and the value is a list of numbers\n    # that have that sum of digits\n    digits = {}\n    for i in range(len(nums)):\n        num = nums[i]\n        digits.setdefault(sum(map(int, list(str(num)))), []).append(num)\n    # a list of sorted lists, sorted by the sum of the digits\n    sorted_lists = [sorted(l, key=lambda num: nums.index(num)) for l in digits.values()]\n    # flatten the lists, which are sorted lists\n    sorted_nums = [num for l in sorted_lists for num in l]\n    return sorted_nums"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    nums = sorted(nums)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def sum_digits(x):\n        return sum([int(d) for d in str(abs(x))])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not nums:\n        return []\n    sums = [(n, sum(map(int, str(n)))) for n in nums]\n    sums.sort(key=lambda x: (x[1], nums.index(x[0])))\n    return [i[0] for i in sums]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(nums, key=sum)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([n for n in nums if n > 10 and (n%10)%2!= 0 and (n//10)%2!= 0])\n    \n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #for i in range(len(nums)):\n    #    if nums[i] > 10 and nums[i] % 2 == 1 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n    #        return 1\n    #return 0\n    return len([n for n in nums if n > 10 and n % 2 == 1 and (nums[0] % 2 == 1 or nums[-1] % 2 == 1)])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return len([n for n in nums if n > 10 and (n % 10 // 2!= 0 or n // 10 % 2 == 0)])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([num for num in nums if num > 10 and (num % 10 // 1 + num % 10 // 3 + num % 10 // 5 + num % 10 // 7 + num % 10 // 9) * 2 == num])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # return sum(1 for num in nums if num > 10 and num%2!=0 and num%10!=0)\n    # return sum(1 for num in nums if num > 10 and num%2!=0 and (num%10==1 or num%10==3 or num%10==5 or num%10==7 or num%10==9))\n    count = 0\n    for num in nums:\n        if num > 10 and num%2!=0 and (num%10==1 or num%10==3 or num%10==5 or num%10==7 or num%10==9):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for n in nums if n > 10 and str(n)[0]%2==1 and str(n)[-1]%2==1)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(nums) == 0:\n        return 0\n    # Write your code here\n    count = 0\n    for n in nums:\n        if n > 10 and (n/10 % 10 % 2 == 1):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for n in nums:\n        if n > 10 and (n % 10 == 1 or n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = [x*x - x + 1 for x in range(1,n+1)]\n    return sum(a[x] for x in range(n) if x < n-1 and a[x] % 3 == 0)"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 0\n    return get_max_triples(n-1) + get_max_triples(n-2) + get_max_triples(n-3)\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = [0] * n\n    count = 0\n    for i in range(n):\n        a[i] = i * i - i + 1\n        if i > 0:\n            count += i * (a[i] - a[i - 1])\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    return sum([1 for x in a for y in a if x + y + z == 0 and x < y < z])\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 0\n    \n    arr = [0 for _ in range(n)]\n    arr[0] = 1\n    for i in range(1, n):\n        arr[i] = i * i - i + 1\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i * i + j * j + k * k == i * i + j * j + k * k and i < j < k:\n                    result += 1\n    return result\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 3:\n        return 0\n    max_triples = 0\n    a = [0] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    a.sort()\n    for i in range(n - 2):\n        max_triples += (i + 2) * a[i]\n    return max_triples\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if (i*i+i-j+1)%3 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    planet_dict = {}\n    for planet in planets:\n        planet_dict[planet] = bf_helper(planet, planet1, planet2)\n    return tuple(sorted(planet_dict[planet] for planet in planet_dict))\n    \ndef bf_helper(planet, planet1, planet2):\n    orbit_planets = []\n    for planet_to_orbit in planets:\n        if planet_to_orbit!= planet and planet_to_orbit in orbits[planet]:\n            orbit_planets.append(planet_to_orbit)\n    planet_orbit = []\n    for planet_to_orbit in orbit_planets:\n        if planet_to_orbit!= planet1 and planet_to_orbit!= planet2 and planet_to_orbit in orbits[planet1]:\n            planet_orbit.append(planet_to_orbit)\n    return planet_orbit\n    \ndef test_bf():\n    assert bf('Jupiter', 'Neptune') == ('Saturn', 'Uranus')\n    assert bf('Earth', 'Mercury') == ('Venus',)\n    assert bf('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    assert bf('Venus', 'Earth') == ('Earth', 'Mars', 'Jupiter', 'Saturn')\n    assert bf('Mars', 'Jupiter') == ('Saturn', 'Uranus')\n    assert bf('Earth', 'Saturn') == ('Mercury', 'Uranus')\n    assert bf('Jupiter', 'Saturn') == ('Mercury', 'Uranus', 'Earth', 'Mars')\n    \n    \n    \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    planet_orbit = {}\n    for planet in planets:\n        planet_orbit[planet] = find_orbit(planet)\n    def find_distance(planet1, planet2):\n        return abs(planet_orbit[planet1] - planet_orbit[planet2])\n    res = sorted(planets, key=find_distance)\n    return tuple(res)\n    "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # PLANETS = {'Mercury': 0, 'Venus': 1, 'Earth': 2, 'Mars': 3, 'Jupiter': 4, 'Saturn': 5, 'Uranus': 6, 'Neptune': 7}\n    # PLANETS = {'Mercury': -1, 'Venus': 0, 'Earth': 1, 'Mars': 2, 'Jupiter': 3, 'Saturn': 4, 'Uranus': 5, 'Neptune': 6}\n    # PLANETS = {'Mercury': -2, 'Venus': -1, 'Earth': 0, 'Mars': 1, 'Jupiter': 2, 'Saturn': 3, 'Uranus': 4, 'Neptune': 5}\n    # PLANETS = {'Mercury': -3, 'Venus': -2, 'Earth': -1, 'Mars': 0, 'Jupiter': 1, 'Saturn': 2, 'Uranus': 3, 'Neptune': 4}\n    # PLANETS = {'Mercury': -4, 'Venus': -3, 'Earth': -2, 'Mars': -1, 'Jupiter': 0, 'Saturn': 1, 'Uranus': 2, 'Neptune': 3}\n    # PLANETS = {'Mercury': -5, 'Venus': -4, 'Earth': -3, 'Mars': -2, 'Jupiter': -1, 'Saturn': 0, 'Uranus': 1, 'Neptune': 2}\n    # PLANETS = {'Mercury': -6, 'Venus': -5, 'Earth': -4, 'Mars': -3, 'Jupiter': -2, 'Saturn': -1, 'Uranus': 0, 'Neptune': 1}\n    # PLANETS = {'Mercury': -7, 'Venus': -6, 'Earth': -5, 'Mars': -4, 'Jupiter': -3, 'Saturn': -2, 'Uranus': -1, 'Neptune': 0}\n    # PLANETS = {'Mercury': -8, 'Venus': -7, 'Earth': -6, 'Mars': -5, 'Jupiter': -4, 'Saturn': -3, 'Uranus': -2, 'Neptune': -1}\n    # PLANETS = {'Mercury': -9, 'Venus': -8, 'Earth': -7, 'Mars': -6, 'Jupiter': -5, 'Saturn': -4, 'Uranus': -3, 'Neptune': -2}\n    # PLANETS = {'Mercury': -10, 'Venus': -9, 'Earth': -8, 'Mars': -7, 'Jupiter': -6, 'Saturn': -5, 'Uranus': -4, 'Neptune': -3}\n    # PLANETS = {'Mercury': -11, 'Venus': -10, 'Earth': -9, 'Mars': -8, 'Jupiter': -7, 'Saturn': -6, 'Uranus': -5, 'Neptune': -4}\n    # PLANETS = {'Mercury': -12, 'Venus': -11, 'Earth': -10, 'Mars': -9, 'Jupiter': -8, 'Saturn': -7, 'Uranus': -6, 'Neptune': -5}\n    # PLANETS = {'Mercury': -13, 'Venus': -12, 'Earth': -11, 'Mars': -10, 'Jupiter': -9, 'Saturn': -8, 'Uranus': -7, 'Neptune': -6}\n    # PLANETS = {'Mercury': -14, 'Venus': -13, 'Earth': -12, 'Mars': -11, 'Jupiter': -10, 'Saturn': -9, 'Uranus': -8, 'Neptune': -7}\n    # PLANETS = {'Mercury': -15, 'Venus': -14, 'Earth': -13, 'Mars': -12, 'Jupiter': -11, 'Saturn': -10, 'Uranus': -9, 'Neptune': -8}\n    # PLANETS = {'Mercury': -16, 'Venus': -15, 'Earth': -14, 'Mars': -13, 'Jupiter': -12, 'Saturn': -11, 'Uranus': "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    '''\n    earth = 0\n    venus = 0\n    mars = 0\n    jupiter = 0\n    saturn = 0\n    uranus = 0\n    neptune = 0\n    '''\n    planets = {'Mercury':0, 'Venus':0, 'Mars':0, 'Jupiter':0, 'Saturn':0, 'Uranus':0, 'Neptune':0}\n    for planet in planets:\n        planets[planet] = find(planet)\n    for planet in planets:\n        if planets[planet] < planets[planet1]:\n            planets[planet] = planets[planet1] - planets[planet]\n            planets[planet1] = planets[planet1] - planets[planet]\n    for planet in planets:\n        if planets[planet] > planets[planet2]:\n            planets[planet] = planets[planet2] - planets[planet]\n            planets[planet2] = planets[planet2] - planets[planet]\n    return tuple(planets)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    m1 = planet_name_to_orbit_map[planet1]\n    m2 = planet_name_to_orbit_map[planet2]\n    r = []\n    for x in m1:\n        if m2.__contains__(x):\n            r.append(x)\n    return tuple(r)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    planet_orbit = {'Jupiter': (10.209, 5.688), 'Venus': (9.424, 6.257),\n                   'Uranus': (8.303, 8.741), 'Neptune': (7.979, 10.534),\n                   'Mercury': (10.076, 3.304), 'Venus': (9.416, 4.723),\n                   'Earth': (8.304, 5.251), 'Mars': (7.237, 6.320),\n                   'Saturn': (8.688, 9.805), 'Uranus': (8.843, 11.119),\n                   'Pluto': (11.039, -11.643), 'Neptune': (8.827, -10.814)}\n    \n    if planet1 not in planet_orbit.keys() or planet2 not in planet_orbit.keys():\n        return tuple()\n    else:\n        sun_pos = planet_orbit['Sun']\n        planet1_pos = planet_orbit[planet1]\n        planet2_pos = planet_orbit[planet2]\n        \n        if planet1_pos[1] > sun_pos[1]:\n            if planet2_pos[0] >= sun_pos[0] or planet2_pos[0] < planet1_pos[0]:\n                return tuple()\n            else:\n                if planet2_pos[1] > planet1_pos[1]:\n                    return (planet2, planet1)\n                else:\n                    return (planet1, planet2)\n        elif planet1_pos[1] < sun_pos[1]:\n            if planet2_pos[0] > sun_pos[0] or planet2_pos[0] < planet1_pos[0]:\n                return tuple()\n            else:\n                if planet2_pos[1] < planet1_pos[1]:\n                    return (planet2, planet1)\n                else:\n                    return (planet1, planet2)\n        else:\n            if planet2_pos[1] > planet1_pos[1]:\n                return (planet2, planet1)\n            else:\n                return (planet1, planet2)"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    list = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ]\n    if planet1 not in list or planet2 not in list:\n        return tuple()\n    if planet1 == planet2:\n        return tuple()\n    if planet1 == \"Neptune\" and planet2 == \"Earth\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Earth\":\n        return (\"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 == \"Venus\" and planet2 == \"Earth\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Mars\" and planet2 == \"Earth\":\n        return (\"Jupiter\", \"Neptune\")\n    if planet1 == \"Venus\" and planet2 == \"Mars\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Jupiter\" and planet2 == \"Venus\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Neptune\")\n    if planet1 == \"Neptune\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    if planet1 == \"Neptune\" and planet2 == \"Mars\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1 == \"Neptune\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\")\n    if planet1 == \"Mars\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Jupiter\")\n    if planet1 == \"Mars\" and planet2 == \"Neptune\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Saturn\" and planet2 == \"Saturn\":\n        return (\"Neptune\")\n    if planet1 == \"Neptune\" and planet2 == \"Saturn\":\n        return (\"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Earth\":\n        return (\"Jupiter\")\n    if planet1 == \"Jupiter\" and planet2 == \"Earth\":\n        return (\"Saturn\", \"Neptune\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Earth\":\n        return (\"Jupiter\", \"Neptune\")\n    if planet1 == \"Neptune\" and planet2 == \"Earth\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1 == \"Earth\" and planet2 == \"Neptune\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Neptune\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Neptune\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Sa"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # planet_orbit = {\"Mercury\":0, \"Venus\":1, \"Earth\":2, \"Mars\":3, \"Jupiter\":4, \"Saturn\":5, \"Uranus\":6, \"Neptune\":7}\n    planet_orbit = {\"Mercury\":0, \"Venus\":1, \"Earth\":2, \"Mars\":3, \"Jupiter\":4, \"Saturn\":5, \"Uranus\":6, \"Neptune\":7}\n    planet1 = planet1.title()\n    planet2 = planet2.title()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n    planets = []\n    for name in PLANETS:\n        if name!= planet1 and name!= planet2:\n            if (PLANETS[name].orbit.intersects(PLANETS[planet1].orbit) and PLANETS[name].orbit.intersects(PLANETS[planet2].orbit)):\n                planets.append(name)\n    planets.sort()\n    return tuple(planets)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda word: (len(word), word))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def len_sort(lst):\n        def cmp(x, y):\n            if len(x) > len(y):\n                return -1\n            elif len(x) < len(y):\n                return 1\n            elif len(x) == len(y):\n                return 0\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not lst:\n        return []\n    else:\n        # first split the list into lists of same lengths\n        num_lst = []\n        for word in lst:\n            num_lst.append(len(word))\n        num_lst = sorted(num_lst)\n        # now sort each item in the list by length\n        lst_copy = list(lst)\n        new_lst = []\n        for num in num_lst:\n            for word in lst_copy:\n                if len(word) == num:\n                    new_lst.append(word)\n                    lst_copy.remove(word)\n        return new_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    return None\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([word for word in lst if len(word) % 2 == 0], key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_lst = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_lst.append(word)\n    return sorted(sorted_lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Your code here\n    return sorted(lst, key=lambda x: (-len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst_len = [len(x) for x in lst]\n    idx = lst_len.index(max(lst_len))\n    lst_len.sort()\n    return lst_len[:idx] + lst_len[idx+1:]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    from collections import OrderedDict\n    s = sorted(lst, key = lambda x: len(x), reverse=True)\n    return s\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_list = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            new_list.append(word)\n    return sorted(new_list)\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if n % 2 == 0 and n!= 2:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if n % 2 == 0:\n        return y\n    else:\n        return x"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #pass\n    return x if isPrime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if n % x == 0 or n % y == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n    \n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    if not lst:\n        return 0\n    \n    return sum([a*a for a in lst if a%2 and a>0])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not lst:\n        return 0\n    return sum(n ** 2 for n in lst if n % 2)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([x*x for x in lst if x % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i%2!= 0])\n    "
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([x ** 2 for x in lst if x % 2!= 0])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum(x**2 for x in lst if x%2!= 0)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # return sum([x*x for x in lst if x % 2 == 1])\n    return sum([x**2 for x in lst if x % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    if lst:\n        for item in lst:\n            if item % 2 == 1 and item!= 0:\n                total += item ** 2\n        return total\n    else:\n        return 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Check for empty list\n    if not lst:\n        return 0\n    # Initialize sum and count\n    s = 0\n    c = 0\n    # Iterate through list\n    for i in lst:\n        # Check if the number is a negative integer or an integer\n        if i >= 0:\n            # Calculate the difference and add it to the sum\n            s += i**2\n            # Increment the count by 1\n            c += 1\n    # Calculate the average\n    avg = s / c\n    # If the average is a float, return the rounded average\n    if avg - int(avg) == 0:\n        return int(avg)\n    # Return the average rounded to two decimal places\n    return round(avg, 2)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = [i for i in lst if i>=0 and isinstance(i, int)]\n    return sum([i*i for i in lst if i%2==1])"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [a-b for a,b in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # one more solution:\n    # return [abs(guess[i]-game[i]) for i in range(len(game))]\n    # return [abs(guess[i]-game[i]) for i in range(len(guess))]\n    # one more solution:\n    # return [abs(guess[i]-game[i]) for i in range(len(guess))]\n    # [abs(guess[i]-game[i]) for i in range(len(guess))]\n    # return map(abs,guess-game)\n    # return map(lambda x,y:abs(x-y),guess,game)\n    return map(lambda x,y:abs(x-y),guess,game)\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # I only knew this as of late when I started coding in Python, so I tried to explain it.\n    \n    # When you are comparing the results of matches, and if you are wrong, the result is negative,\n    # and if you are right it is 0. When you are comparing the results of matches, and if you are wrong, the result is positive, and if you are right it is 0.\n    \n    # This is a tricky one, but I can't think of a better way.\n    \n    # Let's take a look at the results of our tests.\n    print \"compare(game,guess):\",compare(game,guess)\n    print \"game=\",game\n    print \"guess=\",guess\n    \n    # this is the crazy part.\n    for i in range(len(game)):\n        if game[i]!= guess[i]:\n            return [game[i]-guess[i],guess[i]-game[i]]\n    # we made it through the tests, and we know they all match.\n    return [0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [abs(score-guess) for score, guess in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n    return\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    compare = [abs(guess[i] - game[i]) for i in range(len(game))]\n    return compare\n    \n    \n    \ndef format_results(result):\n    \"\"\"\n    turns a list of results into a nice string of the form:\n    \n    >>> format_results([0,0,0,0,0,0])\n    'You guessed it, you guessed it, you guessed it, you guessed it, you guessed it, you guessed it'\n    \n    >>> format_results([4,4,1,0,0,-2])\n    'You missed! You missed! You missed! You missed! You guessed it, you guessed it'\n    \n    \"\"\"\n    output = \"\"\n    for index, guess in enumerate(result):\n        if guess == 0:\n            output += \"You guessed it, \"\n        else:\n            output += \"You missed! You guessed \" + str(guess) + \" \"\n    \n    output = output[:-1]\n    return output\n    \n    \ndef test_compare():\n    assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n    assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n    assert compare([2,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[2,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([1,2,1,2,1,2],[2,1,2,1,2,1]) == [0,0,0,0,2,3]\n    assert compare([2,1,1,1,1,1],[2,1,2,1,2,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[2,1,2,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[2,1,2,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[2,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([1,1,1,1,1,1],[2,1,2,1,2,1]) == [0,0,0,0,2,3]\n    assert compare([1,1,1,1,1,1],[2,1,2,1,2,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[2,1,2,1,2,1]) == [0,0,0,0,0,0]\n    assert compare([1,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert compare([2,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n    assert format"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [abs(score-guess) for score,guess in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(guess[i]-game[i])\n    return score\n    \ndef is_valid_guess(score):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given an array of scores and an integer you can assume is the number of matches. \n    Return true or false, depending on whether the person guessed correctly.\n    \n    example:\n    is_valid_guess([0,0,0,0,0,0],6) -> true\n    is_valid_guess([1,2,3,4,5,1],6) -> false\n    \"\"\"\n    for i in range(len(score)):\n        if score[i]!= 0:\n            return False\n    return True\n        \n    \ndef get_score_percent(score):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine the percentage of correct matches.\n    \n    example:\n    get_score_percent([1,2,3,4,5,1]) -> 12.5\n    get_score_percent([0,5,0,0,0,4]) -> 75.0\n    \"\"\"\n    return (sum(score) / len(score))*100\n    \n    \ndef get_rank(score):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine the rank of a player based on their score.\n    \n    example:\n    get_rank([1,2,3,4,5,1]) -> 6\n    get_rank([0,5,0,0,0,4]) -> 1\n    \"\"\"\n    return score.index(max(score))+1\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #return sum(abs(a-b) for a,b in zip(guess,game))\n    return [abs(a-b) for a,b in zip(guess,game)]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not class_name:\n        return None\n    \n    if not extensions:\n        return None\n    \n    # You may want to use the following lists for your solution.\n    lowercase_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    uppercase_letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    all_letters = []\n    all_letters.extend(lowercase_letters)\n    all_letters.extend(uppercase_letters)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    strongest_extension = extensions[0]\n    strength = len(extensions[0]) - len(extensions[0].lower())\n    for extension in extensions:\n        ext_strength = len(extension) - len(extension.lower())\n        if ext_strength > strength:\n            strongest_extension = extension\n            strength = ext_strength\n    return \"{0}.{1}\".format(class_name, strongest_extension)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not extensions:\n        return class_name\n    cap_len = sum(1 for c in extensions if c.isupper())\n    sm_len = sum(1 for c in extensions if c.islower())\n    return '{}.{}'.format(class_name, extensions[cap_len - sm_len].capitalize())\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return '{0}.{1}'.format(class_name, max(extensions, key = lambda x: sum(map(lambda y: 1 if y.isupper() else -1, x))))\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    class_strength = 0\n    for letter in class_name:\n        if letter.isupper():\n            class_strength += 1\n        elif letter.islower():\n            class_strength -= 1\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Insert your code here\n    return '%s.%s' % (class_name, sorted(extensions, key=lambda x: (sum(c.isupper() for c in x), sum(c.islower() for c in x)))[-1])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Find out the class name\n    class_name = class_name.split('.')\n    class_name = class_name[len(class_name) - 1]\n    \n    # Find the extensions\n    extensions.sort(key=lambda x: -len(x))\n    \n    # Return the strongest extension\n    return '.'.join([class_name, extensions[0]])"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Don't change the code below\n    \n    # Your code goes here\n    extension_strength = {}\n    for extension in extensions:\n        extension_strength[extension] = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    strongest_extension = ''\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return None\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(a)):\n        if a[i:] in b or a[:len(a)-i] in b:\n            return True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if b in a or a in b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(a) < len(b):\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(a,str) or not isinstance(b,str):\n        return False\n    for i in range(1,len(b)):\n        if b in a:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            return False\n            \n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(1, len(b) + 1):\n        if b in a + a:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = a.lower()\n    b = b.lower()\n    for i in range(len(a)):\n        if b in a[i:]:\n            return True\n        if b in a[i:]+a[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return bool(re.search(r'(.+)({})(.+)'.format(b), a))\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return any([True for x in range(1,len(b)) if b in a[x:] + a[:x]])\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # A string in \"lower case\", with no spaces\n    a = a.lower()\n    # A string in \"lower case\", with no spaces\n    b = b.lower()\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    even_count = 0\n    odd_count = 0\n    if num == 0:\n        return (0, 0)\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if num < 0:\n        num *= -1\n    if num == 0:\n        return 0, 0\n    is_odd = 1\n    count_of_odd = 0\n    count_of_even = 0\n    while num:\n        if is_odd:\n            if num % 2 == 0:\n                count_of_even += 1\n            else:\n                count_of_odd += 1\n        else:\n            if num % 2 == 1:\n                count_of_even += 1\n            else:\n                count_of_odd += 1\n        is_odd = not is_odd\n        num //= 10\n    return count_of_even, count_of_odd\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (num/10%10,num%10)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    even, odd = 0, 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num_str = str(abs(num))\n    num_digits = len(num_str)\n    even = 0\n    odd = 0\n    for i in range(num_digits):\n        digit = int(num_str[i])\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if num == 0:\n        return (1, 1)\n    \n    if num < 0:\n        return even_odd_count(abs(num))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = -num\n        \n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (len(str(abs(num))), len(str(abs(num))))\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"integer must be between 1 and 1000\")\n    to_roman = {1000:'m', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n                50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for i in to_roman.keys():\n        quotient, remainder = divmod(number, i)\n        result += to_roman[i] * quotient\n        number -= i * quotient\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Create the dictionary of roman numeral values\n    symbols = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M',\n    }\n    # We need to convert the number to a string so that we can easily iterate\n    # over it\n    number_str = str(number)\n    # Create a list of the roman numeral symbols from the number\n    symbols_list = [symbols[int(i)] for i in number_str]\n    # Return the symbols joined into a string\n    return ''.join(symbols_list)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    d = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n         50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO: check that the number is within the proper range\n    num_to_roman = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m',\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    romans = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\""
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    roman_numerals = (\n        'x', 'ix', 'v', 'iv', 'i', 'iv', 'v', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x',\n        'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', "
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    roman_numerals = ['i', 'x', 'c','m']\n    i = 1\n    result = []\n    while i <= number:\n        value = number % 10\n        if value == 9:\n            result.append(roman_numerals[0])\n            number = number // 10\n        elif value == 4:\n            result.append(roman_numerals[1])\n            number = number // 10\n        elif value == 5:\n            result.append(roman_numerals[2])\n            number = number // 10\n        elif value == 6:\n            result.append(roman_numerals[3])\n            number = number // 10\n        elif value < 4:\n            result.append(roman_numerals[value - 1])\n            number = number // 10\n        else:\n            result.append(roman_numerals[value - 1])\n            number = number // 10\n            result.append(roman_numerals[value - 4])\n        i += 1\n    return ''.join(result).lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    values = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    numerals = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert(1 <= number and number <= 1000)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Uncomment to test.\n    # assert right_angle_triangle(3, 4, 5) == True\n    # assert right_angle_triangle(1, 2, 3) == False\n    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2) or\n        math.pow(b, 2) + math.pow(c, 2) == math.pow(a, 2) or\n        math.pow(c, 2) + math.pow(a, 2) == math.pow(b, 2))\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (c**2 + a**2) == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return math.fabs(math.pow(a, 2) + math.pow(b, 2) - math.pow(c, 2)) < eps\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Note: math.sqrt() is a function that return the square root of a number\n    # Math.pow() is a function that return a number raised to a power\n    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return pow(a, 2) + pow(b, 2) == pow(c, 2) or pow(a, 2) + pow(c, 2) == pow(b, 2) or pow(b, 2) + pow(c, 2) == pow(a, 2)\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(words, key=lambda x:len(set(x)))[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(words, key=len)[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(words) == 1:\n        return words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    words = list(map(lambda x: set(x), words))\n    max_len = max(map(len, words))\n    max_len_words = []\n    for w in words:\n        if len(w) == max_len:\n            max_len_words.append(w)\n    if max_len_words == []:\n        return \"\"\n    max_len_words.sort()\n    return max_len_words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # max_word = \"\"\n    # max_length = 0\n    # for word in words:\n    #     if len(word) > max_length:\n    #         max_length = len(word)\n    #         max_word = word\n    # return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if need > remaining:\n        remaining = 0\n    eaten = number + remaining\n    left = need - eaten\n    if left > 0:\n        return [eaten, left]\n    return [eaten, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    \n    return [total, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if remaining == 0:\n        return [need, 0]\n    if number >= need:\n        return [number - need, remaining - need]\n    else:\n        return [number, remaining - number]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [number + need, max(0, remaining - need)]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if number >= need:\n        return [number + need - need, remaining]\n    return [number, need - number]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # if the number of remaining carrots is less than the number of eaten carrots, eat all the remaining carrots\n    # otherwise, eat as many as you can.\n    if remaining < need:\n        return [remaining + number, 0]\n    else:\n        return [need + number, remaining - need]\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = int(input().strip())\n    b = int(input().strip())\n    \n    result = eat(n, a, b)\n    print(result[0])\n    print(result[1])"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [need, remaining - number]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if remaining < need:\n        return [need, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [ number + need, (1000 - remaining) if number + need > remaining else 0 ]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # first check if the operator is supported\n    if operator not in supported_algebra_operators:\n        raise Exception('Given operator is not supported.')\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # The return value\n    answer = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Hint: Think about the boundary condition. What will happen if the number of operator is 0?\n    # Think about the boundary condition. What will happen if the number of operator is 1?\n    # Think about the boundary condition. What will happen if the number of operator is 2?\n    # Your code here\n    if operator:\n        op1 = operator[0]\n        if len(operator) == 1:\n            return int(operand[0]) + int(operand[1])\n        if len(operator) == 2:\n            return int(operand[0]) + int(operand[1]) + int(operand[2])\n        op2 = operator[1]\n        if len(operator) == 3:\n            return int(operand[0]) + int(operand[1]) * int(operand[2])\n        if len(operator) == 4:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3])\n        if len(operator) == 5:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4])\n        if len(operator) == 6:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5])\n        if len(operator) == 7:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6])\n        if len(operator) == 8:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7])\n        if len(operator) == 9:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8])\n        if len(operator) == 10:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9])\n        if len(operator) == 11:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9]) / int(operand[10])\n        if len(operator) == 12:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9]) / int(operand[10]) / int(operand[11])\n        if len(operator) == 13:\n            return int(operand[0]) + int(operand[1]) * int(operand[2]) - int(operand[3]) / int(operand[4]) / int(operand[5]) / int(operand[6]) / int(operand[7]) / int(operand[8]) / int(operand[9]) / int(operand[10]) / int(operand[11]) / int(operand[12])\n        if len(operator) == 14:\n            return int(operand[0]) + int(operand[1]) * int(operan"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def do_add(a, b):\n        return a + b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Return this result when the given lists do not form a valid algebra expression.\n    if len(operator)!= len(operand) - 1:\n        return None\n    \n    # Create a new result list.\n    result = []\n    # Add elements in reverse order.\n    for i in range(len(operand) - 1, -1, -1):\n        # Perform the operation on the current element.\n        result.insert(0, do_operation(operator[i], operand[i], operand[i + 1]))\n    # Return the result.\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # FIXME: Put your code here.\n    result = 0\n    for x in range(len(operand)):\n        for y in range(len(operator)):\n            if y == 0:\n                result = result + operator[y] * operand[x]\n            else:\n                result = result - operator[y] * operand[x]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Write your code here.\n    # use for loop to get the result\n    result = None\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = operand[i] + operand[i+1]\n        elif operator[i] == '-':\n            result = operand[i] - operand[i+1]\n        elif operator[i] == '*':\n            result = operand[i] * operand[i+1]\n        elif operator[i] == '//':\n            result = operand[i] // operand[i+1]\n        elif operator[i] == '**':\n            result = operand[i] ** operand[i+1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) == 0:\n        return s[::-1]\n    if s[0] in string.ascii_letters:\n        return s[::-1]\n    else:\n        return s[0].swapcase() + solve(s[1:])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(['L' if c.islower() else 'U' if c.isupper() else c for c in s])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([s.lower() if s.isalpha() else s for s in s])[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not s:\n        return s\n    ans = []\n    for c in s:\n        if c.isalpha():\n            ans.append(c.swapcase())\n        else:\n            ans.append(c)\n    return \"\".join(ans)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(reversed([case.swapcase() if case.isalpha() else case for case in s]))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return \"\".join([\"\".join([\"\".join([c.lower() if c.isalpha() else c for c in s[::-1]]) if c.isalpha() else c for c in s]) if not s.isalpha() else s[::-1]])"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = list(s)\n    for i in range(0, len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    s.reverse()\n    return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.swapcase()\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = \"\"\n    if len(s) == 0:\n        return result\n    else:\n        for letter in s:\n            if letter.isalpha():\n                result += letter.swapcase()\n            else:\n                result += letter\n        return result\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    if not s:\n        return s\n    res = \"\"\n    for i in s:\n        if i.isalpha():\n            res += i.swapcase()\n        else:\n            res += i\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    import md5\n    return md5.new(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if text is None:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(text) == 0:\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    elif isinstance(text, str):\n        # return hashlib.md5(text.encode('utf-8')).hexdigest()\n        return hashlib.md5(text).hexdigest()\n    else:\n        raise ValueError(\"'text' is not a string.\")\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # s = md5()\n    # s.update(text)\n    # return s.hexdigest()\n    return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if text:\n        return md5(text).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if text == '':\n        return None\n    return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    integers = []\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # See https://stackoverflow.com/a/16994939\n    if a > b:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    even_nums = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(range(a, b, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # 1. find the min and max integers\n    min_int = min(a, b)\n    max_int = max(a, b)\n    # 2. find all integers between min and max\n    integers = []\n    for i in range(min_int, max_int + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a % 2 == 0 and b % 2 == 0:\n        return [x for x in range(a + 1, b, 2)]\n    elif a % 2!= 0 and b % 2!= 0:\n        return []\n    else:\n        return [x for x in range(a + 1, b, 2)]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if a % 2 == 0 and b % 2 == 0:\n        return [i for i in range(a, b + 1, 2)]\n    return []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    results = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            results.append(i)\n"
    }
]