[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     has_close_elements([0, 1, 2, 3], 0.2) is False, 'incorrect'\nassert     has_close_elements([0, 1, 2, 3], 0.1) is True, 'incorrect'\nassert     has_close_elements([0, 1, 2, 3, 4], 0.1) is False, 'incorrect'\nassert     has_close_elements([0, 1, 2, 3, 4], 0.3) is True, 'incorrect'\nassert     has_close_elements([0, 1, 2, 3, 4], 0.01) is True, 'incorrect'\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 0) == False, \"Wrong answer for [1, 2, 3, 4], 0\"\nassert     has_close_elements([1, 2, 3, 4], 1) == False, \"Wrong answer for [1, 2, 3, 4], 1\"\nassert     has_close_elements([1, 2, 3, 4], 2) == False, \"Wrong answer for [1, 2, 3, 4], 2\"\nassert     has_close_elements([1, 2, 3, 4], 3) == False, \"Wrong answer for [1, 2, 3, 4], 3\"\nassert     has_close_elements([1, 2, 3, 4], 4) == False, \"Wrong answer for [1, 2, 3, 4], 4\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     has_close_elements([1,2,3], 1) == False\nassert     has_close_elements([1,2,3, 4], 1) == False\nassert     has_close_elements([1, 2, 3, 4], 2) == False\nassert     has_close_elements([1, 2, 3, 4], 3) == False\nassert     has_close_elements([1, 2, 3, 4], 4) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.0, 1.0, 2.0, 3.0], 1) == True, \\\n        'Something is wrong with your has_close_elements implementation'\nassert     has_close_elements([1.0, 1.0, 2.0, 3.0], 2) == False, \\\n        'Something is wrong with your has_close_elements implementation'\nassert     has_close_elements([1.0, 1.0, 2.0, 3.0], 0) == True, \\\n        'Something is wrong with your has_close_elements implementation'\nassert     has_close_elements([], 1) == False, \\\n        'Something is wrong with your has_close_elements implementation'\n\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0], 0.1) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0], 0.2) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0], 0.5) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0], 1.0) == False\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0], 2.0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     has_close_elements([0, 2, 3, 4], 1) == True\nassert     has_close_elements([0, 2, 3, 4], 2) == True\nassert     has_close_elements([0, 2, 3, 4], 3) == True\nassert     has_close_elements([0, 2, 3, 4], 4) == True\nassert     has_close_elements([0, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     has_close_elements([1.1, 1.2, 2.3, 3.4, 5.5], 0.5) == True,'should be True'\nassert     has_close_elements([1.1, 1.2, 2.3, 3.4, 5.5], 0.6) == False,'should be False'\nassert     has_close_elements([1.1, 1.2, 2.3, 3.4, 5.5], 0.4) == False,'should be False'\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert         has_close_elements([1.0, 2.0, 3.0, 4.0], 1.0)\nassert         has_close_elements([1.0, 2.0, 3.0, 4.0], 0.1)\nassert         has_close_elements([1.0, 2.0, 3.0, 4.0], 0.05)\nassert         not has_close_elements([1.0, 2.0, 3.0, 4.0], 0.04)\nassert         not has_close_elements([1.0, 2.0, 3.0, 4.0], 0.07)\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 0.1) == False, 'incorrect'\nassert     has_close_elements([1, 2, 3, 4, 5], 0.9) == True, 'incorrect'\nassert     has_close_elements([1, 2, 3, 4, 5], 1.2) == False, 'incorrect'\nassert     has_close_elements([1, 2, 3, 4, 5], 1.6) == True, 'incorrect'\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == False, 'incorrect'\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"(())()\") == ['(())', '()']\nassert     separate_paren_groups(\"(((())))\") == ['(((())))', '()']\nassert     separate_paren_groups(\"((()(())))\") == ['((()(())))', '()']\nassert     separate_paren_groups(\"(((()()))((())))\") == ['(((()()))((())))', '()']\nassert     separate_paren_groups(\"(()(())((()(()()))))\") == ['(()(())((()(()())))]', '()']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"(()())\") == ['(())', '()']\nassert     separate_paren_groups(\"(()())()\") == ['(()())', '()', '()']\nassert     separate_paren_groups(\"()()\") == ['', '()', '', '']\nassert     separate_paren_groups(\"()()()\") == ['', '', '', '']\nassert     separate_paren_groups(\"()()(()())\") == ['', '', '()', '', '', '(())']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(())()\") == [\"(())()\", \"()\"]\nassert     separate_paren_groups(\"((()))\") == [\"((()))\", \"()\"]\nassert     separate_paren_groups(\"((()))\") == [\"((()))\", \"()\"]\nassert     separate_paren_groups(\"()()(())()(()(()))\") == [\"()()(())()(()(()))\", \"()\"]\nassert     separate_paren_groups(\"()((())())\") == [\"()((())())\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(this())\") == [\"(this())\"]\nassert     separate_paren_groups(\"(this(many)others)\") == [\"this(many)\", \"others\"]\nassert     separate_paren_groups(\"(this(many(others))))\") == [\"this(many(others))\"]\nassert     separate_paren_groups(\"(this(many(others))))\") == [\"this(many(others))\"]\nassert     separate_paren_groups(\"(this(many(others))))\") == [\"this(many(others))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(())()(())\") == ['(())()', '(())']\nassert     separate_paren_groups(\"((()))\") == [\"((()))\"]\nassert     separate_paren_groups(\"((()))\") == [\"((()))\"]\nassert     separate_paren_groups(\"(())((()))\") == ['(())((()))', '(())']\nassert     separate_paren_groups(\"(()((()))\") == ['(()((()))']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\")(()))(((((())()()))(()()(())))((())())\") == [\n        \"()()()\",\n        \"()()(()))\",\n        \"()\",\n        \"()\",\n        \"()(())((())())\",\n        \"()()\",\n        \"()\",\n        \"()()(())\"\n    ]\nassert     separate_paren_groups(\"(())((()))\") == [\n        \"()(())\",\n        \"(())()\"\n    ]\nassert     separate_paren_groups(\"(()(())((()(()(())))))\") == [\n        \"()(())\",\n        \"()(())\",\n        \"()(())\",\n        \"()(())\",\n        \"()(())\",\n        \"()(())\",\n        \"()(())((()))\"\n    ]\nassert     separate_paren_groups(\"(()(())(()))\") == [\n        \"()(())\",\n        \"()(())\",\n        \"()(())\",\n        \"()\"\n    ]\nassert     separate_paren_groups(\"()(()()(()()))\") == [\n        \"()(())\",\n        \"()(())\",\n        \"()(())\",\n        \"()\"\n    ]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('{9, (3 + 8), 5}') == ['{9, (3 + 8), 5}']\nassert     separate_paren_groups('{8, 6), (2 + 3}') == ['{8, 6), (2 + 3}']\nassert     separate_paren_groups('{(2 + 3), 6}') == ['(2 + 3), 6']\nassert     separate_paren_groups('{8, 6), {2 + 3}') == ['{8, 6), {2 + 3}']\nassert     separate_paren_groups('{}') == ['{}']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('(()())') == ['(()())', '(())']\nassert     separate_paren_groups('(()(()))') == ['(()(()))', '(())']\nassert     separate_paren_groups('(()()()()())()()(())()(()())()') == ['(()())()(())', '(()())()', '(())()']\nassert     separate_paren_groups('(()())((()()(()())))') == ['(()())((()()(()())))', '(()())']\nassert     separate_paren_groups('()(()(()(()()(()()()))))') == ['()(()(()(()()(()()()))))', '(())']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     separate_paren_groups('(())') == ['()']\nassert     separate_paren_groups('()()') == ['(())', '()()']\nassert     separate_paren_groups('((()))') == ['((()))']\nassert     separate_paren_groups('((()))()((()()))') == ['((()))', '(()())', '()((()()))']\nassert     separate_paren_groups('((((()))))') == ['((((()))))']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('(()())(()())') == ['(()())(()())', '(()())(())']\nassert     separate_paren_groups('(()())(())(()(()))') == ['(()())(())(()(()))', '(()())(())(()())']\nassert     separate_paren_groups('(()())(())') == ['(()())(())', '(()())(())']\nassert     separate_paren_groups('(()())(())((()))') == ['(()())(())((()))', '(()())(())(())']\n\ndef are_balanced(paren_string: str) -> bool:\n    \"\"\"Return True if the parentheses are balanced, False otherwise.\n    Ignore any spaces in the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     truncate_number(1.23456) == 0.23456\nassert     truncate_number(0.1234) == 0.1234\nassert     truncate_number(0.0) == 0.0\nassert     truncate_number(0.12345) == 0.12345\nassert     truncate_number(-0.12345) == -0.12345\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     truncate_number(42.0) == 0.0\nassert     truncate_number(1.42) == 0.42\nassert     truncate_number(-1.42) == -0.42\nassert     truncate_number(-0.42) == -0.42\nassert     truncate_number(-0.001) == -0.001\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     truncate_number(123.456) == 0.456\nassert     truncate_number(456.789) == 0.789\nassert     truncate_number(789.321) == 0.321\nassert     truncate_number(2.34567) == 0.34567\n\ndef subtract_decimals(number: float, to_subtract: float) -> float:\n    \"\"\" Given a positive floating point number number and positive\n    floating point number to_subtract, return the number difference.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     truncate_number(1.1) == 0.1\nassert     truncate_number(0.1) == 0.0\nassert     truncate_number(0.01) == 0.0\nassert     truncate_number(0.11) == 0.1\nassert     truncate_number(11.11111111111111) == 0.1111111111111111\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef truncate_number_2(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     truncate_number(12.0) == 0.0\nassert     truncate_number(15.0) == 0.5\nassert     truncate_number(2.5) == 0.0\nassert     truncate_number(2.25) == 0.25\nassert     truncate_number(0.5) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     truncate_number(4.6) == 0.6\nassert     truncate_number(5.9) == 0.9\nassert     truncate_number(6.0) == 0.0\nassert     truncate_number(1.5) == 1.0\nassert     truncate_number(2.0) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef convert_to_percentage(number: float) -> float:\n    \"\"\" Given a floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and\n    decimals (leftover part always smaller than 1).\n\n    Return the number multiplied by 100, which is the percentage\n    of the integer part.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     truncate_number(99.9) == 9\nassert     truncate_number(99.7) == 9\nassert     truncate_number(99.6) == 9\nassert     truncate_number(99.5) == 9\nassert     truncate_number(99.4) == 9\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_zero([1, 2, 3, 4, -1, -2, -3, -4]) == False\nassert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == False\nassert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == True\n\n\ndef immediate_family(sisters: List[str], matriarch: str) -> List[str]:\n    \"\"\" You're given a list of female siblings from the same family and a name of a matriarch\n    of that family. The function should return a list of female siblings who are the children of\n    the matriarch. If there are no such siblings, the function should return an empty list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_zero([1,2,3]) == False\nassert     below_zero([1,2,-3]) == True\nassert     below_zero([1,2,1]) == False\nassert     below_zero([1,1,-1]) == False\nassert     below_zero([1,1,-2]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, -5]) == True\nassert     below_zero([1, 2, 3, 4, -5, 6]) == True\nassert     below_zero([1, 2, 3, -4, -5, 6]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_zero([5, -2, 3, 7]) == False\nassert     below_zero([5, -2, 3, 7, -3, -8, -2]) == True\nassert     below_zero([-5, -2, 3, 7, -3, -8, -2]) == False\nassert     below_zero([5, -5, 3, 7, -3, -8, -2]) == True\nassert     below_zero([5, -5, 3, 7, -3, -8, -2, -10, -2]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 1, 1, 1, 1]) == True\nassert     below_zero([-1, 1, 1, 1, 1]) == True\nassert     below_zero([1, -1, 1, 1, 1]) == True\nassert     below_zero([1, -1, 1, 1, 1, 1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_zero([1,2,3]) == False\nassert     below_zero([1,2,3,0,-1]) == False\nassert     below_zero([1,-2,3]) == True\nassert     below_zero([1,-2,3,-3]) == True\nassert     below_zero([1,-2,-3]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_zero([1,2,3,4,5,6,7,8,9,10,-11,-12,-13,-14,-15]) == True, \"Wrong answer\"\nassert     below_zero([1,2,3,4,5,6,7,8,9,10,-11,-12,-13,-14,-15,0]) == False, \"Wrong answer\"\nassert     below_zero([]) == False, \"Wrong answer\"\nassert     below_zero([1]) == True, \"Wrong answer\"\n\nprint(\"Correct!\")\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_zero([1,2,3,4,5]) == False\nassert     below_zero([1,2,3,4,5,6,7,8,9,0]) == True\nassert     below_zero([5,5,5,5]) == False\n\n\ndef find_second(nums: List[int], target: int) -> int:\n    \"\"\" You're given a list of numbers and a target number. Return the index of the second largest\n    number in the list that is larger than the target number. If there is no such index, return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_zero([5, -1, 4, -3, -2]) is True\nassert     below_zero([5, -1, 4, -3, -2, -3, -4, -5]) is True\nassert     below_zero([5, -1, 4, -3, -2, -3, -4, -5, -6]) is False\nassert     below_zero([-1, -1, -1, -1]) is False\nassert     below_zero([1, -1, 1, 1]) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, -5]) == True\nassert     below_zero([1, 2, 3, 4, -5, 6, 7, 8, 9, -10]) == True\nassert     below_zero([1, 2, -3, 4, -5, 6, 7, 8, 9, -10]) == False\nassert     below_zero([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.0\nassert mean_absolute_deviation([0, 1, 2, 3, 4]) == 2.0\nassert     mean_absolute_deviation([-1, 2, 3, 4, 5]) == 3.0\nassert mean_absolute_deviation([-10, 2, 3, 4, 5]) == 2.5\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the Median of this dataset.\n    Median is the average of the two middle points.\n    E.g.:\n    numbers = [1, 3, 2]\n    median = 2.5\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([0, 2, 3, 4, 5, 8, 9]) == 5.5\nassert     mean_absolute_deviation([1, 2, 4, 5, 6, 8, 9]) == 3.5\nassert     mean_absolute_deviation([5, 4, 3, 2, 1, 8, 9]) == 4.0\nassert     mean_absolute_deviation([-1, 2, 3, 4, 5, 8, 9]) == 2.5\nassert     mean_absolute_deviation([0, 0, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.5, \\\n    'Wrong Mean Absolute Deviation for [1, 2, 3, 4, 5]'\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 5]) == 1.5, \\\n    'Wrong Mean Absolute Deviation for [1, 2, 3, 4, 5, 5]'\nassert     mean_absolute_deviation([0, 0, 0, 0, 0]) == 0, \\\n    'Wrong Mean Absolute Deviation for [0, 0, 0, 0, 0]'\nassert     mean_absolute_deviation([1, 1, 1, 1, 1]) == 0, \\\n    'Wrong Mean Absolute Deviation for [1, 1, 1, 1, 1]'\nassert     mean_absolute_deviation([]) == 0, \\\n    'Wrong Mean Absolute Deviation for []'\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4]) == 1.0\nassert     mean_absolute_deviation([0.1, 1.2, 2.3, 3.4, 4.5]) == 0.4\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the average absolute difference\n    between each element and a centerpoint (median in this case):\n    MAD = median(| x - x_median |)\n    \"\"\"\n    pass\n\n\ndef linear_trend(numbers: List[float], period: int) -> float:\n    \"\"\" For a given list of input numbers, calculate Linear Trend of this\n    dataset.\n    The input period is the time length of the sliding window in which\n    the data are smoothed out with.\n    Linear Trend is calculated with a formula:\n    y = m * x + b\n    \"\"\"\n    pass\n\ndef extreme_value_factor(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Extreme Value Factor\n    (CV):\n    CV = max / min\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert mean_absolute_deviation([1, 2, 3]) == 1.0\nassert mean_absolute_deviation([1, 2, 2]) == 0.5\nassert mean_absolute_deviation([1, 2, 3, 4]) == 0.75\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median(| x - x_median |)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4]) == 1.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 3.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([]) == 0, \"MAD of an empty list is zero.\"\nassert     mean_absolute_deviation([1]) == 0, \"MAD of a list with 1 element is 0.\"\nassert     mean_absolute_deviation([1, 1]) == 0, \"MAD of a list with 2 elements is 0.\"\nassert     mean_absolute_deviation([2, 2]) == 0, \"MAD of a list with 2 elements is 0.\"\nassert     mean_absolute_deviation([1, 2]) == 1, \"MAD of a list with 2 elements is 1.\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median (i.e. the middle\n    element) of this dataset.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 3) == [1, 3, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 3, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [1, 5, 2, 5, 3, 5, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     intersperse([], 3) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersperse([1, 2, 3, 4, 5, 6, 7], 3) == [1, 3, 2, 3, 4, 5, 6, 7], \"Should be [1, 3, 2, 3, 4, 5, 6, 7]\"\nassert intersperse([], 3) == [], \"Should be []\"\nassert intersperse([1, 2, 3, 4, 5, 6, 7], 0) == [1, 2, 3, 4, 5, 6, 7], \"Should be [1, 2, 3, 4, 5, 6, 7]\"\nassert intersperse([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 2, 3, 4, 5, 6, 7], \"Should be [1, 2, 2, 3, 4, 5, 6, 7]\"\nassert intersperse([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, 3, 4, 5, 6, 7], \"Should be [1, 2, 3, 3, 4, 5, 6, 7]\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef encode_words(words: List[str]) -> List[str]:\n    \"\"\" Encode the list of words `words' by replacing each letter in each word by its\n        corresponding element of the list `alphabet'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef is_odd(n: int) -> bool:\n    \"\"\" Determine whether the input number is odd or even.\n    \"\"\"\n    pass\n\ndef find_min_sum(numbers: List[int]) -> int:\n    \"\"\" Find the minimum sum of numbers in the input list `numbers'\n    \"\"\"\n    pass\n\ndef is_empty(s: str) -> bool:\n    \"\"\" Determine whether the input string is empty\n    \"\"\"\n    pass\n\ndef reverse_words(s: str) -> str:\n    \"\"\" Reverse the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5, 1]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 3, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 4, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] == intersperse(list(range(1, 13)), 10)\n\ndef intersperse_with_func(numbers: List[int], delimeter: int, func: Callable[[int, int], int]) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n        based on the return value of the given function.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 3) == [1, 3, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 4, 2, 4, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     intersperse([], 1) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersperse([], delimeter=1) == []\nassert     intersperse([1], delimeter=1) == [1]\nassert     intersperse([1, 2], delimeter=1) == [1, 2]\nassert     intersperse([1, 2, 3], delimeter=1) == [1, 2, 3]\nassert     intersperse([1, 2, 3, 4], delimeter=1) == [1, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nassert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3, 0]\nassert intersperse([1, 2, 3], 1) == [1, 1, 0, 2, 1, 3, 1]\nassert intersperse([1, 2, 3, 4, 5], 10) == [1, 10, 0, 2, 10, 0, 3, 10, 0, 4, 10, 0, 5, 10]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]\nassert     intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 1) == [1, 1, 2, 1, 3, 1, 4]\n\n\ndef intersperse_short(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Instead of inserting a delimeter between every two consecutive elements of input list `numbers',\n    insert the delimeter only between each two consecutive delimeters of input list `numbers'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('(())') == [1]\nassert     parse_nested_parens('((()))') == [2]\nassert     parse_nested_parens('(()(()))') == [3]\nassert     parse_nested_parens('()()') == [0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_nested_parens( \"(())\" ) == [0]\nassert     parse_nested_parens( \"(()())\" ) == [0,0]\nassert     parse_nested_parens( \"(()()(()()))\" ) == [0,0,0,0]\nassert     parse_nested_parens( \"(((()())))\" ) == [3]\nassert     parse_nested_parens( \"(((((((((())))))))))\") == [9]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(())\") == [0], \"Test 1\"\nassert     parse_nested_parens(\"(()())\") == [0, 1], \"Test 2\"\nassert     parse_nested_parens(\"((()))\") == [1, 1], \"Test 3\"\nassert     parse_nested_parens(\"(((()())()))\") == [1, 2, 2], \"Test 4\"\nassert     parse_nested_parens(\"(((()())())())\") == [1, 2, 3, 3], \"Test 5\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(()(()()))\") == 2\nassert     parse_nested_parens(\"(((()(()())))\") == 3\nassert     parse_nested_parens(\"(()(((()())()))(()))\") == 4\nassert     parse_nested_parens(\"((()(()()))(()))\") == 4\nassert     parse_nested_parens(\"(()(((()()())))(())\") == 4\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(((()))\") == 3\nassert     parse_nested_parens(\"(()())\") == 2\nassert     parse_nested_parens(\"((((((())))))\") == 6\nassert     parse_nested_parens(\"()\") == 0\nassert     parse_nested_parens(\"(())\") == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('()()') == [1, 1]\nassert     parse_nested_parens('((()))') == [2, 2, 2]\nassert     parse_nested_parens('(((())))') == [3, 3, 3, 3]\nassert     parse_nested_parens('((((((()))))))') == [4, 4, 4, 4, 4]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"()\") == [1, 1]\nassert     parse_nested_parens(\"()()()\") == [3, 3]\nassert     parse_nested_parens(\"(()(()))\") == [3, 3]\nassert     parse_nested_parens(\"(()(()()))\") == [3, 3]\nassert     parse_nested_parens(\"((((((((())))))\") == [10]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('(())') == [0],'should be 0'\nassert     parse_nested_parens('()()') == [0, 0],'should be [0, 0]'\nassert     parse_nested_parens('((()))') == [0, 1],'should be [0, 1]'\nassert     parse_nested_parens('(()(()(') == [0, 2],'should be [0, 2]'\n\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"(())\") == [0]\nassert     parse_nested_parens(\"()()\") == [1, 0]\nassert     parse_nested_parens(\"((()))\") == [2, 1, 0]\nassert     parse_nested_parens(\"(()(()())())\") == [3, 1, 1, 0, 2, 1, 1, 0]\nassert     parse_nested_parens(\"((((((((((((((((((((((())))))()()(()())())())())())(())()()(((())))))()())()()())()())()()()((((()((()()))()(((((((((((((((((((((((((((((((())))((())))((()(()()(((((()))())((((()))()(((()))(())()((()()))(())(()()((()()))(()((((())))))((())((())(()(((((((((((((((((()))))))()(((((((((((((((((((()))()((()))(())()(((((()))(()(()(()(((((((((((((((((((((((((((()))(((()))(())((((((()))))))()(((((()))(()((()(()()(((()(((((((((((((((()))(()(((((((((((((((((()))()))(()()((()(((((((()((()(()((()(()(()()(((((((((((((()))(())()(((()(()(()(((((((()((()(()(((((((((((((()(())()(((((((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    parse_nested_parens('(())((()()))') == [1, 1, 2]\n    parse_nested_parens('(()(()())(())()))') == [3, 2, 2, 2]\n\n\ndef parse_nested_parens_two(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the maximum nesting of parentheses that is contained by that group.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"tiger\", \"lion\", \"lionel\", \"cat\", \"dog\"], \"lion\") == [\"lion\", \"lionel\"]\nassert filter_by_substring([\"tiger\", \"lion\", \"lionel\", \"cat\", \"dog\"], \"tiger\") == [\"tiger\"]\nassert filter_by_substring([\"tiger\", \"lion\", \"lionel\", \"cat\", \"dog\"], \"eagle\") == []\n\n\ndef binary_search(a: List[str], x: str) -> int:\n    \"\"\" Find x in an array of strings. The array is ordered. If x is found, return the index of the element.\n        If x is not found, return -1.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"aaa\", \"aa\", \"a\"], \"a\") == [\"aaa\", \"aa\"]\nassert     filter_by_substring([\"aaaa\", \"aa\", \"a\"], \"a\") == [\"aaaa\", \"aa\"]\nassert     filter_by_substring([\"aaaa\", \"bbb\", \"ccc\"], \"a\") == []\n\n\ndef list_and_string_reverse(list_of_string: List[str], string_to_reverse: str) -> List[str]:\n    \"\"\" Reverses the given string and returns it\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['aba', 'abacaba', 'caba'], 'aba') == ['aba', 'abacaba']\nassert     filter_by_substring(['aba', 'caba', 'abacaba'], 'aba') == ['aba', 'abacaba']\nassert     filter_by_substring(['a', 'ab', 'abc', 'abac', 'abaca'], 'ab') == ['a', 'ab', 'abac', 'abaca']\nassert     filter_by_substring(['aba', 'caba', 'abc'], 'aba') == ['aba', 'caba']\nassert     filter_by_substring(['aba', 'caba', 'a'], 'aba') == ['aba', 'caba']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"aba\", \"baba\", \"aba\"], \"aba\") == [\"aba\", \"aba\"]\nassert     filter_by_substring([\"aba\", \"baba\", \"baba\"], \"baba\") == [\"baba\"]\nassert     filter_by_substring([\"aba\", \"baba\", \"baba\"], \"aba\") == [\"aba\", \"aba\"]\n\n\ndef filter_by_substring_v1(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [word for word in strings if substring in word]\n\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"pink\", \"blue\", \"red\", \"yellow\"], \"red\") == [\"red\"]\nassert     filter_by_substring([\"pink\", \"blue\", \"red\", \"yellow\"], \"blue\") == [\"blue\"]\nassert     filter_by_substring([\"pink\", \"blue\", \"red\", \"yellow\"], \"pink\") == [\"pink\"]\nassert     filter_by_substring([\"pink\", \"blue\", \"red\", \"yellow\"], \"yellow\") == [\"yellow\"]\nassert     filter_by_substring([\"pink\", \"blue\", \"red\", \"yellow\"], \"green\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_substring(['111', '222', '333', '444', '555', '666', '777', '888', '999'], '11') == ['111', '777', '888', '999']\nassert     filter_by_substring(['111', '222', '333', '444', '555', '666', '777', '888', '999'], '3') == ['333', '444', '555']\nassert     filter_by_substring(['111', '222', '333', '444', '555', '666', '777', '888', '999'], '777') == ['777']\nassert     filter_by_substring(['111', '222', '333', '444', '555', '666', '777', '888', '999'], '11') == ['111', '777', '888', '999']\nassert     filter_by_substring(['111', '222', '333', '444', '555', '666', '777', '888', '999'], '222') == ['222']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"a\", \"abcd\", \"ab\", \"cd\", \"xyz\"], \"xyz\") == [\n        \"xyz\", \"abcd\", \"ab\", \"cd\"]\nassert     filter_by_substring([\"a\", \"abcd\", \"ab\", \"cd\", \"xyz\"], \"cd\") == [\n        \"cd\", \"abcd\", \"ab\", \"cd\"]\nassert     filter_by_substring([\"a\", \"abcd\", \"ab\", \"cd\", \"xyz\"], \"\") == [\n        \"a\", \"abcd\", \"ab\", \"cd\", \"xyz\"]\nassert     filter_by_substring([\"a\", \"abcd\", \"ab\", \"cd\", \"xyz\"], \"z\") == [\n        \"\", \"\", \"\", \"\", \"\"]\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"aaa\", \"bbb\", \"ccc\"], \"aa\") == [\"aaa\", \"bbb\"]\nassert     filter_by_substring([\"aaa\", \"bbb\", \"ccc\"], \"bbb\") == [\"bbb\"]\nassert     filter_by_substring([\"aaa\", \"bbb\", \"ccc\"], \"zzz\") == []\nassert     filter_by_substring([\"aaa\", \"bbb\", \"ccc\"], \"aaa\") == [\"aaa\"]\nassert     filter_by_substring([\"aaa\", \"bbb\", \"ccc\"], \"aaa\", ignore_case = True) == [\"aaa\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"abc\", \"def\", \"ghi\"], \"d\") == []\nassert     filter_by_substring([\"abc\", \"def\", \"ghi\"], \"d\") == []\nassert     filter_by_substring([\"abc\", \"def\", \"ghi\"], \"g\") == [\"ghi\"]\nassert     filter_by_substring([\"abc\", \"def\", \"ghi\"], \"a\") == [\"abc\", \"def\", \"ghi\"]\nassert     filter_by_substring([\"abc\", \"def\", \"ghi\"], \"\") == [\"abc\", \"def\", \"ghi\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"april\", \"april fool\", \"may\"], \"ap\") == \\\n        [\"april\", \"april fool\"]\nassert filter_by_substring([\"april\", \"april fool\", \"may\"], \"a\") == \\\n        [\"april\", \"april fool\"]\nassert filter_by_substring([\"april\", \"april fool\", \"may\"], \"april\") == \\\n        [\"april\"]\nassert filter_by_substring([\"april\", \"april fool\", \"may\"], \"april fool\") == \\\n        [\"april fool\"]\nassert filter_by_substring([\"april\", \"april fool\", \"may\"], \"may\") == \\\n        [\"may\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, -2]) == (-3, -2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([2, 4, 6, 8, 10]) == (30, 40)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, 2, 3]) == (0, -6)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (0, 1) == sum_product([])\nassert     (0, 1) == sum_product([1])\nassert     (0, 1) == sum_product([2])\nassert     (0, 1) == sum_product([3])\nassert     (2, 3) == sum_product([1, 2])\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_product([2, 3, 4]) == (7, 24)\nassert     sum_product([]) == (0, 1)\n\n\ndef sum_product_modified(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list\n    except for the smallest element in the list. Empty sum should be equal to 0 and empty product should be equal\n    to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef reverse_string(phrase: str) -> str:\n    \"\"\" Return a string of all characters in reverse order.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 0)\nassert     sum_product([-1, -2, -3, -4, -5]) == (-15, -120)\nassert     sum_product([0, -1, -2, -3, -4, -5]) == (0, -120)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([2]) == (2, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\n\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (21, 210)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1,2]) == [1,2]\nassert     rolling_max([1,2,3,4]) == [1,2,3,4]\nassert     rolling_max([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment in\n    the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rolling_max([4, 6, 2, 1, 9, 56, 7, 8, 9, 4, 56, 7]) == \\\n        [4, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9]\nassert     rolling_max([4, 6, 2, 1, 9, 56, 7, 8, 9, 4, 56, 7, 7]) == \\\n        [4, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9]\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 5, 3, 2, 7, 6, 4]) == [1, 5, 5, 7, 7, 7, 7]\nassert     rolling_max([-1, 5, 3, 2, 7, 6, 4]) == [None, 5, 5, 7, 7, 7, 7]\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 2]) == [1, 2]\nassert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rolling_max([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,10]) == [1,2,3,4,5,6,7,8,9,10,10]\nassert     rolling_max([1,1,1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1,1,1,1]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,1]) == [1,2,3,4,5,6,7,8,9,10,1]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,2]) == [1,2,3,4,5,6,7,8,9,10,2]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n\ndef sliding_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of sliding maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 1, 2, 1]) == [1, 2, 2, 2, 2]\nassert     rolling_max([1, 2, 1, 2, 1, 2]) == [1, 2, 2, 2, 2, 2]\nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 5, 5, 5, 5, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     rolling_max([]) ==     []\nassert     rolling_max([1]) ==     [1]\nassert     rolling_max([1, 2]) ==     [1, 2]\nassert     rolling_max([1, 2, 3]) ==     [1, 2, 3]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rolling_max([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(is_palindrome('a man a plan a canal panama'))\n    print(make_palindrome('a man a plan a canal panama'))"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_palindrome(\"racecar\") == \"racecar\", \"Test 1\"\nassert     make_palindrome(\"racer\") == \"racecar\", \"Test 2\"\nassert     make_palindrome(\"bob\") == \"bbob\", \"Test 3\"\nassert     make_palindrome(\"boobs\") == \"boobs\", \"Test 4\"\nassert     make_palindrome(\"palindrome\") == \"palinne\", \"Test 5\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     make_palindrome('racecar') == 'racecar', 'wrong result'\nassert     make_palindrome('racketracer') == 'rackrack', 'wrong result'\n\n\nif __name__ == '__main__':\n    # string = input()\n    string = 'racecar'\n    if is_palindrome(string):\n        print(string)\n    else:\n        print(make_palindrome(string))"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     make_palindrome('abc') == 'abcba'\nassert     make_palindrome('ab') == 'aba'\nassert     make_palindrome('abcd') == 'abcdba'\nassert     make_palindrome('abcdcba') == 'abcdcba'\nassert     make_palindrome('abcdef') == 'abcdefba'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_palindrome('abc') == 'cabac'\nassert     make_palindrome('abracadabra') == 'abacdadrabacadaba'\nassert     make_palindrome('a') == 'a'\nassert     make_palindrome('ab') == 'ba'\nassert     make_palindrome('aba') == 'baa'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    #print(is_palindrome(\"a\"))\n    #print(is_palindrome(\"aa\"))\n    #print(is_palindrome(\"aba\"))\n    #print(is_palindrome(\"abba\"))\n\n    #print(make_palindrome(\"aba\"))\n    #print(make_palindrome(\"abb\"))\n    #print(make_palindrome(\"abccba\"))\n    #print(make_palindrome(\"abcccba\"))\n\n    pass\n\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     make_palindrome('') == '', 'Empty string is not a palindrome'\nassert     make_palindrome('a') == 'a', 'Single character is not a palindrome'\nassert     make_palindrome('ab') == 'ab', 'Two letters is not a palindrome'\nassert     make_palindrome('aba') == 'aba', 'Palindrome with first character duplicated'\nassert     make_palindrome('abab') == 'abba', 'Palindrome with last character duplicated'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_xor('1011011', '1011010') == '1110111', 'incorrect result'\nassert     string_xor('1011010', '1011011') == '1110111', 'incorrect result'\nassert     string_xor('1011011', '1011011') == '1110110', 'incorrect result'\nassert     string_xor('1011011', '1011011') == '1110110', 'incorrect result'\nassert     string_xor('1011011', '1011010') == '1110110', 'incorrect result'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_xor(\"1100\", \"1110\") == \"100\"\nassert     string_xor(\"1010\", \"1011\") == \"101\"\nassert     string_xor(\"1100\", \"1000\") == \"1100\"\nassert     string_xor(\"1111\", \"1111\") == \"1111\"\nassert     string_xor(\"1010\", \"1100\") == \"1100\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_xor('1100', '1100') == '1100'\nassert     string_xor('1010', '1010') == '1010'\nassert     string_xor('1100', '1010') == '1110'\nassert     string_xor('1010', '1010') == '1010'\nassert     string_xor('1111', '1010') == '1011'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_xor('100010', '111011') == '101010'\nassert     string_xor('111011', '100010') == '101010'\nassert     string_xor('101010', '111011') == '101010'\nassert     string_xor('101010', '101010') == '111011'\nassert     string_xor('111011', '101010') == '101010'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_xor('11001100', '10101010') == '11101101'\nassert     string_xor('10101010', '11001100') == '11101101'\n\n\ndef string_xor_to_int(a: str, b: str) -> int:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_xor('10101010', '101111010') == '10101010', \"Test 1 failed\"\nassert     string_xor('10101010', '101111110') == '101111010', \"Test 2 failed\"\nassert     string_xor('10101010', '10111111') == '10111110', \"Test 3 failed\"\nassert     string_xor('10101010', '10111111') == '10111110', \"Test 4 failed\"\n\ndef string_multiply(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary multiplication on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_xor('1100', '1110') == '1100','string_xor test'\nassert     string_xor('1100', '10') == '110','string_xor test'\nassert     string_xor('1100', '110110110') == '111001011','string_xor test'\nassert     string_xor('1100', '1100') == '1100','string_xor test'\nassert     string_xor('1100', '') == '1100','string_xor test'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_xor(\"11\", \"11\") == \"10\"\nassert     string_xor(\"11\", \"10\") == \"11\"\nassert     string_xor(\"1010\", \"1011\") == \"1011\"\nassert     string_xor(\"101010\", \"101011\") == \"101010\"\nassert     string_xor(\"101010\", \"101010\") == \"101011\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_xor(a = '1100', b = '1110') == '1100'\nassert     string_xor(a = '1100', b = '1101') == '1110'\nassert     string_xor(a = '1100', b = '1110') == '1100'\nassert     string_xor(a = '1100', b = '1111') == '1110'\nassert     string_xor(a = '1100', b = '1111') == '1110'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     longest(['aaaaaaaaaa', 'bbbbbbbbbb', 'ccccccccccc', 'ddddddddddddddddd', 'eeeeeee']) == 'eeeeeee'\nassert longest(['cccccccccc', 'ddddddddddd', 'eeeeeeee', 'ffffffffff', 'ggggggggggggg']) == 'eeeeeeee'\nassert longest(['ddddddddddd', 'eeeeeeee', 'ffffffffff', 'ggggggggggggg']) == 'eeeeeeee'\nassert longest(['aaaaaaaaaa', 'bbbbbbbbbb', 'ccccccccccc']) == 'ccccccccccc'\nassert longest(['aaaaaaaaaa', 'bbbbbbbbbb', 'ccccccccccc', 'ddddddddddddddddd', 'eeeeeee']) == 'eeeeeee'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \n\ndef test_longest():\n    strings = [\n        'a',\n        'abcd',\n        'abcde',\n        'abcdef',\n        'abcd',\n        'abc',\n    ]\n    assert longest(strings) == 'abcdef'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     longest([\"a\", \"abc\", \"abcd\", \"abcdef\"]) == \"abcdef\"\nassert     longest([\"a\", \"abcd\", \"abc\", \"ab\"]) == \"abcd\"\nassert     longest([\"a\", \"abc\", \"abcdef\", \"a\"]) == \"abcdef\"\nassert     longest([\"\", \"abcd\", \"abcd\", \"a\"]) == \"abcd\"\nassert     longest([\"a\", \"\", \"\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     longest([\"a\", \"abc\", \"abcd\", \"abcde\"]) == \"abcde\"\nassert     longest([\"a\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]) == \"abcdefgh\"\nassert     longest([\"\", \"a\", \"\", \"ab\", \"abc\", \"\", \"a\", \"x\"]) == \"x\"\nassert     longest([\"\", \"a\", \"\", \"ab\", \"abc\", \"\", \"a\", \"x\"]) == \"x\"\nassert     longest([\"\", \"\", \"\", \"a\", \"x\"]) == \"x\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     longest(['a', 'aa', 'aaa']) == 'aaa'\nassert     longest(['a', 'a', 'a']) == 'a'\nassert     longest(['a', 'a', '']) == 'a'\nassert     longest(['', '', '']) == ''\nassert     longest(['', '', '']) == ''\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     longest([\"abc\", \"de\", \"defg\"]) == \"defg\"\nassert longest([\"abc\", \"de\", \"bcd\", \"defg\"]) == \"defg\"\nassert longest([\"abc\", \"de\", \"bcd\", \"bcd\"]) == \"bcd\"\nassert longest([\"abc\", \"de\", \"bcd\"]) == \"abc\"\nassert longest([\"\", \"\", \"\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     longest([\"x\", \"y\", \"z\"]) == \"z\"\nassert     longest([\"a\", \"bb\", \"c\"]) == \"bb\"\nassert     longest([\"a\", \"aa\", \"c\"]) == \"aa\"\nassert     longest([\"a\", \"a\", \"a\", \"a\"]) == \"a\"\nassert     longest([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     longest([\"aa\", \"bb\", \"cc\"]) == \"aa\"\nassert     longest([\"cc\", \"aa\", \"bb\"]) == \"aa\"\nassert     longest([\"aa\", \"bb\", \"cc\", \"aa\"]) == \"aa\"\nassert     longest([\"bb\", \"aa\", \"cc\"]) == \"aa\"\nassert     longest([\"bb\", \"cc\", \"aa\"]) == \"aa\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     longest([\"alo\", \"asd\", \"qeqqeqqw\", \"woa\", \"ertyuio\"]) == \"qeqqeqw\"\nassert     longest([\"a\", \"ab\", \"abc\", \"abcd\"]) == \"abcd\"\nassert     longest([\"qwe\", \"qwerty\"]) == \"qwe\"\nassert     longest([\"z\", \"y\", \"x\", \"w\"]) == \"z\"\nassert     longest([\"z\", \"y\", \"x\", \"w\", \"q\"]) == \"z\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     longest([\"one\", \"two\", \"three\"]) == \"three\"\nassert     longest([\"one\", \"two\", \"one\"]) == \"two\"\nassert     longest([\"one\"]) == \"one\"\nassert     longest([\"one\", \"one\"]) == \"one\"\nassert     longest([\"\", \"\", \"\"]) == \"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # common_divisors(10, 20)\n    # common_divisors(5, 10)\n    # common_divisors(50, 24)\n    # common_divisors(5, 15)\n    # common_divisors(10, 30)\n    # common_divisors(15, 30)\n    # common_divisors(40, 30)\n    # common_divisors(5, 8)\n    pass"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(45, 63) == 3\nassert     greatest_common_divisor(45, 18) == 9\nassert     greatest_common_divisor(45, 12) == 9\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \ngreatest_common_divisor(14, 21) == 1\ngreatest_common_divisor(14, 20) == 2\ngreatest_common_divisor(14, 30) == 14\ngreatest_common_divisor(14, 42) == 14\ngreatest_common_divisor(14, 13) == 1\ngreatest_common_divisor(42, 42) == 42\ngreatest_common_divisor(42, 42.5) == 42\ngreatest_common_divisor(42, 43) == 1\ngreatest_common_divisor(42, -42) == 42\ngreatest_common_divisor(-42, 42) == 42\ngreatest_common_divisor(0, 42) == 0\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(0, -42) == 0\ngreatest_common_divisor(-42, 0) == 0\ngreatest_common_divisor(-42, -42) == 42\ngreatest_common_divisor(-42, -42) == 42\ngreatest_common_divisor(-42, 42) == 42\ngreatest_common_divisor(-42, 42) == 42\ngreatest_common_divisor(-42, 43) == 1\ngreatest_common_divisor(-42, 43) == 1\ngreatest_common_divisor(-42, 43) == 1\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor(0, 43) == 0\ngreatest_common_divisor"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(3, 5) == 1\nassert     greatest_common_divisor(3, 4) == 1\nassert     greatest_common_divisor(4, 12) == 4\nassert     greatest_common_divisor(6, 12) == 6\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(6, 8) == 6\nassert     greatest_common_divisor(0, 8) == 8\nassert     greatest_common_divisor(4, 4) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(4, 2) == 2\nassert     greatest_common_divisor(10, 100) == 10\nassert     greatest_common_divisor(99, 99) == 99\nassert     greatest_common_divisor(99, 10) == 9\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(6, 8) == 2\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(2, 6) == 2\nassert     greatest_common_divisor(2, 10) == 2\nassert     greatest_common_divisor(2, 15) == 2\nassert     greatest_common_divisor(6, 10) == 2\nassert     greatest_common_divisor(6, 15) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(4, 6) == 2\nassert     greatest_common_divisor(5, 9) == 5\nassert     greatest_common_divisor(13, 15) == 1\nassert     greatest_common_divisor(1234567, 12345678) == 1234567\nprint('greatest_common_divisor is Ok')\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Check if number is prime\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     all_prefixes('banana') == ['ban', 'ba', 'an', 'na', 'an', 'n']\nassert     all_prefixes('dog') == ['do', 'di', 'do', 'do', 'di']\nassert     all_prefixes('bananas') == ['ban', 'ba', 'an', 'na', 'an', 'n', 'ans']\nassert     all_prefixes('panamabananas') == ['pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pan', 'pa', 'pan', 'pan', 'pan', 'pa', 'pan', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pan', 'pa', 'pan', 'pa"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('ab') == ['', 'a', 'ab']\nassert     all_prefixes('') == ['', '']\nassert     all_prefixes('a') == ['', 'a']\nassert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     all_prefixes('antidisestablishmentterianism') == ['antidisestablishmentterianism',\n                                                             'antidisestablishmentterianism',\n                                                             'antidisestablishmentterianism',\n                                                             'antidisestablishmentterianism',\n                                                             'antidisestablishmentterianism',\n                                                             'antidisestablishmentterianism']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abracadabra') == ['a', 'ab', 'abc', 'abra', 'abrac', 'abracad', 'abracadab', 'abracadabra']\nassert     all_prefixes('abracadabra') == ['a', 'ab', 'abc', 'abra', 'abrac', 'abracad', 'abracadab', 'abracadabra']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"b\", \"c\"]\nassert     all_prefixes(\"abcab\") == [\"a\", \"b\", \"c\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcabxab\") == [\"a\", \"b\", \"c\", \"ab\", \"abc\", \"xab\", \"xabc\"]\nassert     all_prefixes(\"abcabxabxab\") == [\"a\", \"b\", \"c\", \"ab\", \"abc\", \"xab\", \"xabc\", \"xabxab\", \"xabxabc\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     all_prefixes('antidisestablishmentarianism') == ['antidisestablishmentarianism', 'antidisestablishmentarian', 'antidisestablishmentar', 'antidisestablishmentarian', 'antidisestablishmentarianism', 'antidisestablishmentarianism ']\nassert     all_prefixes('racecar') == ['racecar', 'racecar ', 'race car', 'race car', 'race car ', 'race car  ']\nassert     all_prefixes('') == ['','']\nassert     all_prefixes(' ') == [' ']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('cba') == ['c', 'cb', 'cba']\nassert     all_prefixes('acb') == ['a', 'ac', 'acb']\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('') == ['', '']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc'], \"all_prefixes('abc') wrong output\"\nassert     all_prefixes('ab') == ['', 'a', 'ab'], \"all_prefixes('ab') wrong output\"\nassert     all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd'], \"all_prefixes('abcd') wrong output\"\nassert     all_prefixes('xyz') == ['', 'x', 'y', 'xy', 'xyz'], \"all_prefixes('xyz') wrong output\"\nassert     all_prefixes('') == ['', ''], \"all_prefixes('') wrong output\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     all_prefixes(string = \"abc\") == [\"\"]\nassert     all_prefixes(string = \"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(string = \"abcd\") == [\"a\", \"ab\", \"abcd\"]\nassert     all_prefixes(string = \"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\n\n\ndef is_unique(string: str) -> bool:\n    \"\"\" Check if the input string is unique\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"banana\") == [\n        \"\", \"b\", \"ba\", \"ban\", \"bana\", \"banan\", \"banana\"\n    ]\n\nassert     all_prefixes(\"pineapple\") == [\n        \"\", \"p\", \"pi\", \"pin\", \"pine\", \"pineau\", \"pineapp\", \"pineappl\", \"pineapple\"\n    ]\n\n\ndef first_unique_character(string: str) -> int:\n    \"\"\" Return the index of the first non-repeating character in the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0 1'\nassert     string_sequence(2) == '0 1 2'\nassert     string_sequence(3) == '0 1 2 3'\nassert     string_sequence(4) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(15) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(26) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return''.join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef string_sequence2(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_sequence(5) =='0 1 2 3 4 '\nassert     string_sequence(10) =='0 1 2 3 4 5 6 7 8 9 '\n\ndef array_sum_equals_k(nums: List[int], k: int) -> bool:\n    \"\"\" Given an array of positive integers and a positive integer k,\n       return whether any two numbers from the array add up to k.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0\"\n\ndef arithmetic_progression(n: int, d: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive in the arithmetic sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(3) == '0 1 2'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef count_stair_ways(n: int) -> int:\n    \"\"\" Given an integer n, return the number of ways to reach the nth step in the staircase,\n        where a 1-step has 1 way, a 2-step has 2 ways, and so on.\n\n        Note: the nth step is the step number where you take n steps to reach the top of the staircase.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"abcd\") == 4\nassert     count_distinct_characters(\"aaaaaa\") == 1\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"aaaa\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_distinct_characters('') == 0\nassert count_distinct_characters('aa') == 1\nassert count_distinct_characters('AbCdEfG') == 7\nassert count_distinct_characters('12345') == 5\nassert count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_distinct_characters('abcABC123') == 6\nassert     count_distinct_characters('abc123') == 6\nassert     count_distinct_characters('aa') == 2\nassert     count_distinct_characters('aaA') == 3\nassert     count_distinct_characters('aaaaaaaaaa') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('aa') == 1\nassert     count_distinct_characters('abcde') == 5\nassert     count_distinct_characters('abcdea') == 5\nassert     count_distinct_characters('aaAAaaa') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\nassert     count_distinct_characters(\"abcABC\") == 3\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\n        'abdca'\n    ) == 3, f\"Answer is incorrect for count_distinct_characters('abdca').\"\nassert     count_distinct_characters(\n        'abc'\n    ) == 3, f\"Answer is incorrect for count_distinct_characters('abc').\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"abcABC\") == 3\nassert     count_distinct_characters(\"ABCabc\") == 4\nassert     count_distinct_characters(\"abcABCabc\") == 6\nassert     count_distinct_characters(\"abcABCABC\") == 3\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\nassert     count_distinct_characters(\"abcABC\") == 3\nassert     count_distinct_characters(\"aBc\") == 3\nassert     count_distinct_characters(\"aBcA\") == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\nassert     count_distinct_characters(\"abcABC\") == 3\nassert     count_distinct_characters(\"aBcCdDeFgGhH\") == 7\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        Use dict()\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"abcABC\") == 3, \"count_distinct_characters('abcABC')\"\nassert     count_distinct_characters(\"abcABCa\") == 4, \"count_distinct_characters('abcABCa')\"\nassert     count_distinct_characters(\"abcABCb\") == 3, \"count_distinct_characters('abcABCb')\"\nassert     count_distinct_characters(\"abcABCc\") == 4, \"count_distinct_characters('abcABCc')\"\nassert     count_distinct_characters(\"abA1bCaBcC\") == 6, \"count_distinct_characters('abA1bCaBcC')\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_music('') == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_music('Ao') == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_music('Ao|') == [4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_music('oAoo') == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('AoAoo') == [4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_music('.o|o') == [4, 2, 1], 'Wrong output for parse_music(\".o|o\")'\nassert     parse_music('o|o') == [4, 1], 'Wrong output for parse_music(\"o|o\")'\nassert     parse_music('oo') == [4, 4], 'Wrong output for parse_music(\"oo\")'\nassert     parse_music('.o.o') == [4, 2, 1, 1, 1], 'Wrong output for parse_music(\".o.o\")'\nassert     parse_music('oo.oo') == [4, 4, 4, 4, 4, 4], 'Wrong output for parse_music(\"oo.oo\")'\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_music(\"o|.|o|o|o|o|.|o|o|o|o|o|o|o|o|o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_music('.|.o|.o|.o|.') == [2, 2, 2, 2], 'Wrong result for parse_music(\".|.o|.o|.o|.\")'\nassert     parse_music('.|.|.|.|.') == [4, 4, 4, 4], 'Wrong result for parse_music(\".|.|.|.|.\")'\nassert     parse_music('.|.|.|.') == [4, 4, 4, 4], 'Wrong result for parse_music(\".|.|.|.\")'\nassert     parse_music('.|.|.') == [3, 3, 3, 3], 'Wrong result for parse_music(\".|.|.\")'\nassert     parse_music('.|.|') == [3, 3, 3, 3], 'Wrong result for parse_music(\".|.|.\")'\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_music(\".|.o|o|.|.|.o|o|\") == [2, 2, 4, 2, 2, 2, 4]\nassert     parse_music(\"|.o|o|.o|o|\") == [4, 2, 4, 2]\nassert     parse_music(\"o|.o|.o|.o|\") == [2, 4, 2, 4]\nassert     parse_music(\"o|.o|.o|.o|.o|\") == [2, 4, 2, 4, 2, 4]\nassert     parse_music(\"|.o|.o|.o|.o|.|\") == [4, 4, 4, 4, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_music('.o|.o|o|o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|.o|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_music(\"o o o o o o o | | | | | | | | | | | | | | |\") == [4, 2, 4, 2, 2, 1, 4, 1, 2, 4, 1, 2, 2, 1, 4, 1]\nassert     parse_music(\"o o o o o o o |. | | |. | | | | | | | |\") == [4, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1]\nassert     parse_music(\"o o o o o o o |.. | |.. | | | | | | |\") == [4, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1]\nassert     parse_music(\"o o o o o o o |... |... |... | | |\") == [4, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1]\nassert     parse_music(\"o o o o o o o |.... |.... |.... |.... |.... |.... \") == [4, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_music('oo|...oo|') == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_music(\"OO|.|..|\") == [2, 2, 1, 2]\nassert     parse_music(\"Ooo|oo.\") == [2, 2, 2, 1]\nassert     parse_music(\"..|..|Oo|Oo|.|..|..|\") == [1, 1, 4, 2, 4, 4, 2, 1]\n\n\ndef parse_notes(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how long does each\n    note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_music('.|.') == [2, 2, 2, 2], 'parse_music not working as intended'\nassert     parse_music('..|..|') == [1, 1, 1, 1, 1, 1, 1], 'parse_music not working as intended'\nassert     parse_music('o|.o|o|.') == [4, 2, 4, 2, 4, 2, 4], 'parse_music not working as intended'\nassert     parse_music('o|.o|o|.') == [4, 2, 4, 2, 4, 2, 4], 'parse_music not working as intended'\nassert     parse_music('o|.o|o|.') == [4, 2, 4, 2, 4, 2, 4], 'parse_music not working as intended'\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     how_many_times(string, substring) == 1\nassert     how_many_times(string, 'impossible') == 0\nassert     how_many_times(string, '') == 0\nassert     how_many_times(string, string) == 1\nassert     how_many_times(string, 'aaaaaaaaaaaaaaaaaaaa') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     how_many_times(\"sims\", \"sim\") == 2, \"first\"\nassert     how_many_times(\"very very sims\", \"sims\") == 1, \"second\"\nassert     how_many_times(\"simsimsimsimsimsimsimsimsims\", \"sims\") == 7, \"third\"\nassert     how_many_times(\"simsimsimsimsimsimsimsimsims\", \"sims\") == 7, \"fourth\"\nassert     how_many_times(\"simsimsimsimsimsimsimsimsims\", \"sims\") == 7, \"fifth\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     how_many_times(\"Python is great and Java is also great\", \"great\") == 3, \"incorrect\"\nassert     how_many_times(\"Java is also great\", \"Java\") == 2, \"incorrect\"\nassert     how_many_times(\"Python is great and Java is also great\", \"Java\") == 1, \"incorrect\"\nassert     how_many_times(\"Python is great and Java is also great\", \"Python\") == 2, \"incorrect\"\nassert     how_many_times(\"Python is great and Java is also great\", \"Python\") == 1, \"incorrect\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     how_many_times(\"how many times in a\", \"time\") == 3\nassert     how_many_times(\"the word is there\", \"not\") == 0\nassert     how_many_times(\"the word is there\", \"the\") == 2\nassert     how_many_times(\"the word is there\", \"there\") == 2\nassert     how_many_times(\"the word is there\", \"word\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     how_many_times(\"hello world\", \"o\") == 2, \"expected 2\"\nassert     how_many_times(\"foo bar foo baz bar bar foo foo baz bar\", \"bar\") == 5, \"expected 5\"\nassert     how_many_times(\"\", \"bar\") == 0, \"expected 0\"\nassert     how_many_times(\"bar\", \"bar\") == 1, \"expected 1\"\n\n\ndef find_all_occurrences(string: str, substring: str) -> list:\n    \"\"\" Find all indexes in the original string where the given substring starts.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     how_many_times('', '') == 0, 'Empty string'\nassert     how_many_times('Hello', '') == 0, 'Empty substring'\nassert     how_many_times('Hello', 'e') == 1, 'One character'\nassert     how_many_times('Hello', 'llo') == 1, 'No overlaping cases'\nassert     how_many_times('Hello', 'll') == 2, 'Two overlaping cases'\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     how_many_times(string='abababab', substring='ab') == 3, \\\n        'incorrect result for how_many_times'\nassert     how_many_times(string='abababab', substring='ba') == 2, \\\n        'incorrect result for how_many_times'\nassert     how_many_times(string='abababab', substring='aa') == 1, \\\n        'incorrect result for how_many_times'\nassert     how_many_times(string='aa', substring='aa') == 2, \\\n        'incorrect result for how_many_times'\nassert     how_many_times(string='abababa', substring='aa') == 1, \\\n        'incorrect result for how_many_times'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_numbers('nine one zero four three two') == '0 1 2 3 4 9'\nassert     sort_numbers('eight nine seven three six') == '0 1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('zero') == '0'\nassert     sort_numbers('five') == '0 5'\nassert     sort_numbers('two five eight three') == '0 2 3 5 8'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_numbers('eight one zero three two') == 'zero one two three eight'\nassert     sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('nine seven three six two one zero four') == 'zero one two three four seven nine'\nassert     sort_numbers('nine eight one six three two five four') == 'one two three four five six nine'\nassert     sort_numbers('two zero nine seven four three one eight five six') == 'zero one two three four five six seven eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n    sort_numbers('nine') == 'nine'\n    sort_numbers('eight one zero three two') == 'zero one two three eight'\n    sort_numbers('three three three') == 'three three three'\n    sort_numbers('two five six four one eight three seven eight one four') == 'one two three four five six seven eight three eight one four'\n    sort_numbers('four eight three six five seven two eleven two eleven one') == 'one two two four eight three six five seven eleven eleven two'\n    sort_numbers('one') == 'one'\n    sort_numbers('two') == 'two'\n    sort_numbers('three') == 'three'\n    sort_numbers('one zero') == 'one zero'\n    sort_numbers('one one') == 'one one'\n    sort_numbers('nine nine') == 'nine nine'\n    sort_numbers('eight nine seven nine') == 'nine nine eight seven nine'\n    sort_numbers('six six') =='six six'\n\n\ndef get_email_address_and_domain_name(email: str) -> (str, str):\n    \"\"\" \n    Return a tuple where the first element is the email address (everything before the @)\n    and the second element is the domain name (everything after the @)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_numbers('two one four three five six seven eight nine zero one two') == 'zero one one two two three four five six seven eight nine'\nassert     sort_numbers('zero one one two') == 'zero one one two'\nassert     sort_numbers('five four three two one zero') == 'zero one two three four five'\n\n\ndef sort_grades(student_grades: List[float]) -> List[float]:\n    \"\"\" Input is a list of floats.\n    Each float represents a student's grade.\n    Return a list of floats, where the floats are the grades sorted from smallest to largest.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_numbers('zero nine one two three four five six seven eight') == \\\n        'zero one two three four five six seven eight nine'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('eight two three four five six seven') == 'eight two three four five six seven'\nassert     sort_numbers('nine eight seven six five four three two one') == 'one two three four five six seven eight nine'\nassert     sort_numbers('zero one two three four five six seven eight nine') == \\\n        'zero one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_numbers('eight one nine two seven four six three') == \"one, two, three, four, five, six, seven, eight, nine\"\nassert     sort_numbers('nine four eight one three six seven two') == \"one, two, three, four, five, six, seven, eight, nine\"\nassert     sort_numbers('two seven four six three one nine eight') == \"one, two, three, four, five, six, seven, eight, nine\"\nassert     sort_numbers('zero nine seven eight six five four three two one') == \"one, two, three, four, five, six, seven, eight, nine\"\nassert     sort_numbers('eight nine seven six five four three two one zero') == \"one, two, three, four, five, six, seven, eight, nine\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_numbers('0 2 3 9 8 7 6 5 4') == '0 2 3 4 5 6 7 8 9'\nassert     sort_numbers('1 2 3 4 5 6 7 8 9 0') == '0 1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('9 8 7 6 5 4 3 2 1 0') == '0 1 2 3 4 5 6 7 8 9'\n\n\ndef get_even_counts(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Input numbers will only contain even numbers.\n    Return the count of each even number in descending order\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_numbers('five three two one four') == 'one, two, three, five, four'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('eight nine seven six five four') == 'four, five, six, seven, eight, nine'\nassert     sort_numbers('six five four three two one') == 'one, two, three, four, five, six'\nassert     sort_numbers('nine eight seven six five four') == 'four, five, six, seven, eight, nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_numbers('9 7 5 3 2 8 1 6 4') == '1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('3 5 2 1 9 8 7 4 6') == '1 2 3 5 6 7 8 9'\nassert     sort_numbers('1 9 7 5 3 2 8 1 6 4') == '1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('9 4 8 7 3 2 5 1 6') == '1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('7 1 8 3 9 5 4 6 2') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_numbers(\"zero nine two one four three five six\") == \"01234\"\nassert     sort_numbers(\"nine one eight three seven four six two\") == \"0123456789\"\nassert     sort_numbers(\"six seven three five four zero two eight nine\") == \"0123456789\"\nassert     sort_numbers(\"five six three two one\") == \"12345\"\nassert     sort_numbers(\"six three five two one zero four\") == \"01245\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1.0, 3.0] == find_closest_elements([1.0, 3.0])\nassert     [1.0, 2.0] == find_closest_elements([1.0, 3.0, 4.0])\nassert     [1.0, 2.0, 3.0] == find_closest_elements([1.0, 3.0, 4.0, 2.0])\nassert     [0.0, 2.0] == find_closest_elements([2.0, 1.0, 3.0])\n\nif __name__ == '__main__':\n    print('find_closest_elements testing...')\n    "
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1.2, 2.3, 3.1, 4.1, 5.5]) == (3.1, 4.1)\nassert     find_closest_elements([1.2, 2.3, 3.1, 4.1, 5.5, 6.6, 7.7, 8.8, 9.9]) == (5.5, 6.6)\nassert     find_closest_elements([1.2, 2.3, 3.1, 4.1, 5.5, 6.6, 7.7, 8.8, 9.9, 0.5]) == (5.5, 6.6)\nassert     find_closest_elements([0.0]) == (0.0, 0.0)\nassert     find_closest_elements([]) == ()\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_closest_elements([1.0, 1.2, 3.3]) == (1.0, 3.3)\nassert     find_closest_elements([1.0, 1.0, 3.3]) == (1.0, 1.0)\nassert     find_closest_elements([1.0, 1.2, 3.3, 1.0]) == (1.0, 3.3)\nassert     find_closest_elements([1.0, 1.2, 3.3, 2.5]) == (1.0, 2.5)\nassert     find_closest_elements([1.0, 1.2, 3.3, 3.0]) == (1.0, 3.3)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1, 2, 3]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 6]) == (1, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 6)\nassert     find_closest_elements([3, 2, 1, 5, 4, 6]) == (2, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_closest_elements([1, 2, 3]) == (1, 3)\nassert     find_closest_elements([-2, 3, 8, 15]) == (-2, 15)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 6)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10)\nassert     find_closest_elements([-3, 0, 3, 10, 15]) == (-3, 3)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1.0, 1.1, 1.2, 2.3, 2.4, 3.5, 4.6]) == (1.1, 3.5)\nassert     find_closest_elements([1.0, 1.1, 1.2, 2.3, 2.4, 3.5, 4.6, 7.8]) == (1.1, 3.5)\nassert     find_closest_elements([1.0, 1.1, 1.2, 2.3, 2.4, 3.5, 4.6, 7.8, 8.9]) == (1.1, 3.5)\nassert     find_closest_elements([0.0, 1.1, 1.2, 2.3, 2.4, 3.5, 4.6]) == (0.0, 1.1)\nassert     find_closest_elements([1.0, 1.1, 1.2, 2.3, 2.4, 3.5, 4.6, 7.8, 8.9, 9.0]) == (1.1, 3.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_closest_elements([2.5, 7.8, 4.3, 1.2, 3.6]) == (1.2, 3.6)\nassert     find_closest_elements([1.1, 3.3]) == (1.1, 3.3)\nassert     find_closest_elements([5.4, 4.6, 2.5, 1.2, 3.6]) == (1.2, 2.5)\nassert     find_closest_elements([-5.4, -4.6, -2.5, -1.2, -3.6]) == (-1.2, -2.5)\nassert     find_closest_elements([0.4, 0.6, 0.2, 0.1, 0.3]) == (0.1, 0.3)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (find_closest_elements([1.0, 2.0]) == (1.0, 2.0)), \"Always select two numbers from a list\"\nassert     (find_closest_elements([1.0, 2.0, 3.0]) == (1.0, 2.0)), \"Should work with lists of two or more numbers\"\nassert     (find_closest_elements([3.0, 2.0, 3.0]) == (2.0, 3.0)), \"Should sort in ascending order\"\nassert     (find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (1.0, 2.0)), \"Should sort in ascending order\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_closest_elements([3, 1, 2, 4]) == (1, 2)\nassert     find_closest_elements([3, 1, 2, 6]) == (3, 6)\nassert     find_closest_elements([1, 2, 4, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 4, 6, 8]) == (1, 2)\n\n\ndef max_profit(stock_prices: List[float]) -> float:\n    \"\"\" Finds the maximum possible profit and the date for which it can be made.\n    The input is a list of floats representing the price of the stock for a given period of time.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1, 1, 3, 4, 5]) == (1, 3)\nassert     find_closest_elements([1, 2, 3, 4, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 3)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 10]) == (1, 6)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 10, 8, 9]) == (1, 6)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([0, 1, 2, 3]) == [0, 1, 2, 3], \"Expected [0, 1, 2, 3] but got %s\" % rescale_to_unit([0, 1, 2, 3])\nassert     rescale_to_unit([0, 2, 4, 8]) == [0, 0.5, 1, 1], \"Expected [0, 0.5, 1, 1] but got %s\" % rescale_to_unit([0, 2, 4, 8])\nassert     rescale_to_unit([2, 4, 6, 8]) == [0.5, 0.75, 0.875, 1], \"Expected [0.5, 0.75, 0.875, 1] but got %s\" % rescale_to_unit([2, 4, 6, 8])\nassert     rescale_to_unit([1, 2, 3, 4]) == [0, 0.25, 0.5, 0.75], \"Expected [0, 0.25, 0.5, 0.75] but got %s\" % rescale_to_unit([1, 2, 3, 4])\nassert     rescale_to_unit([8, 16, 32, 64]) == [0, 0.125, 0.25, 0.5], \"Expected [0, 0.125, 0.25, 0.5] but got %s\" % rescale_to_unit([8, 16, 32, 64])\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([0, 0.5, 1]) == [0, 1, 1]\nassert     rescale_to_unit([0.5, 1, 3]) == [0, 1, 1]\n\ndef rescale_to_unit_correct(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    The difference between rescale_to_unit and rescale_to_unit_correct is that the latter one does not round numbers when rescaling\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [0.1, 0.2, 0.3] == rescale_to_unit([0.1, 0.2, 0.3])\nassert     [0.5, 0.3, 0.8] == rescale_to_unit([0.5, 0.3, 0.8])\nassert     [0.8, 0.9, 1.2] == rescale_to_unit([0.8, 0.9, 1.2])\nassert     [1.1, 1.4, 1.8] == rescale_to_unit([1.1, 1.4, 1.8])\nassert     [0.5, 1.8, 3.8] == rescale_to_unit([0.5, 1.8, 3.8])\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef compute_distance(x, y) -> float:\n    \"\"\" Compute distance between two points\n    \"\"\"\n    pass\n\n\ndef compute_distances(data: List[List[float]]) -> List[List[float]]:\n    \"\"\" Compute distances between every pair of points in a data set\n    \"\"\"\n    pass\n\n\ndef rescale_to_unit_by_mean(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([0, 0]) == [0, 0]\nassert     rescale_to_unit([0.1, 0.2, 0.3]) == [0, 0.1, 0.2]\nassert     rescale_to_unit([5.0, 0.0, -3.0, -1.0, 1.0, 3.0]) == [0, 0, -1, -0.33, 0.67, 1]\n\ndef calc_energy(numbers: List[float]) -> float:\n    \"\"\" Calculate energy of a list of numbers using the rescale_to_unit function\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [0, 1] == rescale_to_unit([2, 4])\nassert     [0, 0.5, 1] == rescale_to_unit([1, 2, 3])\n\n\ndef rescale_to_unit_rational(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [0.0, 0.5, 1.0] == rescale_to_unit([0.0, 2.0, 4.0])\nassert     [0.0, 1.0, 2.0] == rescale_to_unit([0.0, -1.0, 2.0])\nassert     [0.0, 0.5, 1.0] == rescale_to_unit([-0.5, 0.0, 0.5])\nassert     [0.0, 1.0, 2.0] == rescale_to_unit([-0.5, 1.0, 0.0])\nassert     [0.0, 0.5, 1.0] == rescale_to_unit([-0.5, 0.0, -1.0])\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0, 0.5, 0.75, 1.0]\nassert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.5, 0.75, 1.0, 1.25]\n\n\ndef rescale_to_unit_using_list_comprehension(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0, 0.5, 0.75, 1]\nassert rescale_to_unit([1, 2]) == [0, 0.5]\nassert rescale_to_unit([1]) == [0]\nassert rescale_to_unit([]) == []\n\n\ndef rescale_to_zero_one(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Filter integers\"\nassert     filter_integers([1, '1', '1.5', '2', '3', 4, 5]) == [1, 2, 3, 4, 5], \"Filter integers\"\nassert     filter_integers([1, None, 2, None, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Filter integers\"\nassert     filter_integers([1, True, 2, False, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Filter integers\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_integers([2, 3, 'a', 5, 'b']) == [2, 3, 5], \"filter_integers does not work as expected\"\nassert     filter_integers([2, 3, 'a', 5, 9.8]) == [2, 3, 5], \"filter_integers does not work as expected\"\nassert     filter_integers([2, 3, 'a', 'd', 9.8]) == [2, 3, 9.8], \"filter_integers does not work as expected\"\nassert     filter_integers([1, 2, 'a', 4, 'b', 'c', 'd', 6]) == [1, 2, 4], \"filter_integers does not work as expected\"\nassert     filter_integers([1, 2, 'a', 4, 'b', 9.8, 'd', 6]) == [1, 2, 4, 9.8, 6], \"filter_integers does not work as expected\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_integers([12, 'a', 4, 'a', 'b', 'a', 6, 'a']) \\\n        == [12, 4, 6]\nassert     filter_integers([]) == []\nassert     filter_integers([12, 'a', 4, 'a', 'b', 'a', 6, 'a', 7, 'a']) \\\n        == [12, 4, 6, 7]\n\nprint(\"Exercise01 is correct.\")\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     filter_integers([1, 2, 3, 'a', 5, 6, 7]) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, 0, 5, 6, 7]) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, None, 5, 6, 7]) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, 4.5, 5, 6, 7]) == [1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4]\nassert filter_integers([1, '2', 3, '4', 5]) == [1, 2, 3, 4]\nassert filter_integers(['1', '2', '3', '4', '5']) == []\nassert filter_integers([1, 2, 3, '4', 5]) == []\nassert filter_integers([1, 2, '3', 4, 5]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_integers([\"a\", 2, 3, \"a\"]) == [2, 3]\nassert     filter_integers([3, None, 1, 2, \"a\"]) == [3, 1, 2]\nassert     filter_integers([3, None, 1, 2, 1.2, \"a\"]) == [3, None, 1, 2, 1.2]\n\nprint(\"Exercise 01 is correct.\")\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_integers([1,2,3,4]) == [1,2,3,4], \\\n        \"Possible case: filter_integers([1,2,3,4])\" + \\\n        \"\\n\\tShould be: [1,2,3,4]\"\nassert     filter_integers([\"1\",2,3,4]) == [1,2,3,4], \\\n        \"Possible case: filter_integers([1,2,3,4])\" + \\\n        \"\\n\\tShould be: [1,2,3,4]\"\nassert     filter_integers([1,2,\"3\",4]) == [1,2,4], \\\n        \"Possible case: filter_integers([1,2,\"+ \\\n        \"3,4])\" + \\\n        \"\\n\\tShould be: [1,2,4]\"\nassert     filter_integers([1,2,3.0,4]) == [1,2,3,4], \\\n        \"Possible case: filter_integers([1,2,3.0,4])\" + \\\n        \"\\n\\tShould be: [1,2,3,4]\"\nassert     filter_integers([1,2,3.0,None]) == [1,2,3,None], \\\n        \"Possible case: filter_integers([1,2,3.0,None])\" + \\\n        \"\\n\\tShould be: [1,2,3,None]\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_integers(list(range(10))) == list(range(0,10,1))\nassert     filter_integers(list(range(5))) == list(range(0,5,1))\nassert     filter_integers(list(range(-5,-10,-1))) == list(range(0,0,1))\nassert     filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1]) == list(range(0,10,1))\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == list(range(0,10,1))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1, 2, 3, 'a', 5, 6, 7, 8, 9]) == [1, 2, 3, 5, 6, 7, 8, 9]\nassert     filter_integers([1, 2, 3, 'a', 5, 6, 7, 'b', 9]) == [1, 2, 3, 5, 6, 7, 9]\nassert     filter_integers([1, 2, 3, 'a', 5, 6, 7, 'b', 9]) == [1, 2, 3, 5, 6, 7, 9]\nassert     filter_integers(['a', 2, 3, 4, 5, 6, 7, 8, 9]) == []\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef strcmp(str1: str, str2: str) -> bool:\n    \"\"\" Compare two strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strlen(\"hello\") == 5\nassert strlen(\"\") == 0\nassert strlen(\"hi\") == 2\nassert strlen(\"a\"*10**9) == 10**9\n\n\ndef substr(string: str, start: int, num: int) -> str:\n    \"\"\" Return sub-string from given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     strlen('abc') == 3\nassert strlen('abc') == strlen('abd')\nassert strlen('abd') == strlen('abcdef')\nassert strlen('abc') == strlen('abcd')\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if two strings are the same, -1 if the second string is\n        smaller, 1 if the second string is larger\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     strlen(str1) == 10\nassert strlen(str2) == 10\nassert strlen(str3) == 8\nassert strlen(str4) == 8\nassert strlen(str5) == 8\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef substr(string: str, start_index: int, count: int) -> str:\n    \"\"\" Return substring of given string \n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     strlen('123')     == 3\nassert     strlen('a')     == 1\nassert     strlen('')     == 0\nassert     strlen(' ')     == 1\nassert     strlen('1234567890')     == 10\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('x') == 1\nassert     strlen('\\n') == 1\n\nassert     strlen('hello world') == 11\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('Hello') == 5\nassert     strlen('World') == 5\nassert     strlen('a') == 1\n\ndef substr(string: str, left: int, right: int) -> str:\n    \"\"\" Return substring of given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_divisor(10) == 5\nassert     largest_divisor(0) == 1\nassert     largest_divisor(1) == 1\nassert     largest_divisor(8) == 2\nassert     largest_divisor(12) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_divisor(20) == 5\nassert     largest_divisor(21) == 7\nassert     largest_divisor(25) == 5\nassert     largest_divisor(8) == 4\nassert     largest_divisor(15) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef all_sublists(lst: list) -> list:\n    \"\"\" For a given list of integers, return all possible sublists of the list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of the proper divisors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_divisor(6) == 3\nassert     largest_divisor(24) == 12\nassert     largest_divisor(25) == 5\n\ndef num_of_divisors(n: int) -> int:\n    \"\"\" Finds the number of divisors of a given number n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(3) == 3\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_divisor(10) == 5\nassert     largest_divisor(11) == 11\nassert     largest_divisor(25) == 5\nassert     largest_divisor(15) == 3\nassert     largest_divisor(3) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(16) == [2, 2, 2, 2]\nassert     factorize(32) == [2, 2, 2, 2, 2]\nassert     factorize(123456) == [2, 3, 3, 5, 5, 823]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     assert(factorize(1) == [])\nassert     assert(factorize(2) == [2])\nassert     "
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (factorize(6) == [2, 3])\nassert     (factorize(10) == [2, 5])\nassert     (factorize(101) == [101])\nassert     (factorize(999) == [3, 3, 3])\nassert     (factorize(456) == [2, 2, 3, 13])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert         [2, 2] == factorize(2),         'Factorize a number two times'\nassert         [2, 3] == factorize(6),         'Factorize a number three times'\nassert         [2, 3, 2] == factorize(24),     'Factorize a number four times'\nassert         [2, 2, 2, 2] == factorize(8),     'Factorize a number four times'\nassert         [3, 5] == factorize(30),         'Factorize a number four times'\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [2, 2, 3, 5, 5] == factorize(25)\nassert     [3, 5, 5] == factorize(25)\nassert     [] == factorize(0)\nassert     [] == factorize(1)\nassert     [] == factorize(3)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (factorize(1) == [])\nassert     (factorize(2) == [2])\nassert     (factorize(3) == [3])\nassert     (factorize(4) == [2, 2])\nassert     (factorize(5) == [5])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [2, 3] == factorize(18)\nassert     [3, 2] == factorize(27)\nassert     [5, 2, 3] == factorize(20)\nassert     [11, 2, 3, 3] == factorize(75)\nassert     [101, 5, 3, 3] == factorize(1_010)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef get_prime_factors(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of a given integer in the order from smallest to largest.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nimport unittest\n\nclass TestFactorize(unittest.TestCase):\n    def test_wrong_types_raise_exception(self):\n        \"\"\"\n        Tests whether types are handled correctly\n        \"\"\"\n        with self.subTest(i=1):\n            self.assertRaises(TypeError, factorize,'string')\n        with self.subTest(i=2):\n            self.assertRaises(TypeError, factorize, 1.5)\n        with self.subTest(i=3):\n            self."
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 3, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 2, 3, 3, 4, 5, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [1, 1, 2, 2] == remove_duplicates([1, 2, 2, 1, 1])\nassert     [1, 1, 2, 2, 3, 4] == remove_duplicates([1, 2, 2, 1, 1, 3, 4])\nassert     [1, 1, 2] == remove_duplicates([1, 2, 1, 1, 2, 2])\nassert     [1, 1] == remove_duplicates([1, 1, 2, 2])\nassert     [] == remove_duplicates([1, 2, 2, 3])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [1, 2, 2, 3] == remove_duplicates([1, 2, 2, 3])\nassert     [1, 2, 3] == remove_duplicates([1, 1, 2, 2, 3, 3])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 2, 2, 3, 3, 4, 4])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 2, 3, 3, 4, 4])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1, 2, 3] == remove_duplicates([1, 2, 3, 1, 2, 3])\nassert    [] == remove_duplicates([])\nassert     [1, 2, 3] == remove_duplicates([1, 2, 3, 4, 3, 3, 2, 1, 2, 3, 2])\n\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [1,2,3] == remove_duplicates([1,2,3,1,3])\nassert     [1,2,3] == remove_duplicates([1,2,3,1,2,2,2])\nassert     [1,2,3] == remove_duplicates([1,2,3,1,2,2,3,3,3,3,3])\nassert     [1,2,3] == remove_duplicates([1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1,2,3,5,6] == remove_duplicates([1, 2, 2, 3, 5, 5, 5, 6, 7])\nassert     [] == remove_duplicates([])\nassert     [1,2] == remove_duplicates([1, 2])\nassert     [0,1,1,2,2,3,3,5,5,7] == remove_duplicates([0, 1, 1, 2, 2, 3, 3, 5, 5, 7])\nassert     [0,1,2,2,3,3,5,5,7,7] == remove_duplicates([0, 1, 2, 2, 3, 3, 5, 5, 7, 7])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef test_remove_duplicates():\n    test1 = [1, 2, 3, 4, 3, 2, 1]\n    test2 = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    test1_duplicate_removed = [1, 2, 3, 4]\n    test2_duplicate_removed = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    assert remove_duplicates(test1) == test1_duplicate_removed\n    "
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     flip_case('Hello world!') == 'hELLO wORLD!'\nassert     flip_case('here') == 'hERE'\nassert     flip_case('Lets go') =='sTLS go!'\n\nprint('Correct!'"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     flip_case(\"Python\") == \"pYTHON\"\nassert     flip_case(\"python\") == \"pYTHON\"\nassert     flip_case(\"PyThOn\") == \"pYTHON\"\nassert     flip_case(\"PythOn\") == \"pYTHON\"\nassert     flip_case(\"\") == \"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef capitalize(string: str) -> str:\n    \"\"\"\n    capitalize the string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     flip_case(\"Hello\") == \"hELLO\"\nassert     flip_case(\"Hi\") == \"iH\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"ABC\") == \"ABC\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     flip_case(\"Python\") == \"pYTHON\"\nassert     flip_case(\"COMP1531\") == \"cOMP1531\"\nassert     flip_case(\"FISRTS\") == \"fISRTS\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"COMP1531\") == \"COMP1531\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     flip_case(None) is None, \"None should be returned when input is None\"\nassert     flip_case(\"\") == \"\", \"Empty string should return an empty string\"\nassert     flip_case(\"tHis Is A TeSt String\") == \"THIS IS A TEST STRING\", \"String with mixed case should be returned unchanged\"\nassert     flip_case(\"ThIs Is A sTrInG\") == \"THIS IS A STRING\", \"String with all lowercase characters should be returned unchanged\"\nassert     flip_case(\"ThIs Is A strInG\") == \"THIS IS A STRING\", \"String with all uppercase characters should be returned unchanged\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     flip_case('a') == 'A'\nassert     flip_case('A') == 'a'\nassert     flip_case('aa') == 'aa'\nassert     flip_case('aAA') == 'AaA'\nassert     flip_case('AaaA') == 'aAAa'\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"b\") == \"B\"\nassert     flip_case(\"B\") == \"b\"\nassert     flip_case(\"aBcDe\") == \"AbCdE\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     concatenate([\"Hello\", \"World\"])     == \"Hello World\", \"Should be Hello World\"\nassert     concatenate([\"Hello\", \"World\"])     == \"HelloWorld\", \"Should be HelloWorld\"\nassert     concatenate([\"12345\"])             == \"12345\", \"Should be 12345\"\nassert     concatenate([\"12345\", \"67890\"])     == \"1234567890\", \"Should be 1234567890\"\nassert     concatenate([\"Hello\", \"World\"])     == \"HelloWorld\", \"Should be HelloWorld\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     concatenate([\"A\", \"B\", \"C\"]) == \"ABC\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\"]) == \"ABCD\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == \"ABCDEF\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]) == \"ABCDEFGHIJ\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     concatenate(['cat','mouse']) == 'catmouse'\nassert     concatenate(['cat','mouse', 'fox']) == 'catmousefox'\nassert     concatenate(['cat','mouse', 'fox', 'dog']) == 'catmousefoxdog'\nassert     concatenate(['cat','mouse', 'fox', 'dog', 'chicken']) == 'catmousefoxdogchicken'\nassert     concatenate(['cat','mouse', 'fox', 'dog', 'chicken', 'goat']) == 'catmousefoxdogchickengoat'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert     concatenate([\"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"\", \"\", \"bob\", \"\", \"\"]) == \"bob\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"\", \"\", \"x\", \" \", \"y\", \" \", \"z\"]) == \"x y z\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     concatenate(['banana','fruits']) == 'bananafruits'\nassert     concatenate(['apple','fruits']) == 'applefruits'\nassert     concatenate(['apple','banana','fruits']) == 'applebananafruits'\nassert     concatenate(['apple','banana','apple']) == 'applebananapple'\nassert     concatenate(['apple','apple']) == 'appleeapplee'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\nassert concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\nassert concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"abcdefg\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     concatenate(['a', 'b', 'c']) == 'abc'\nassert     concatenate(['A', 'B', 'C']) == 'ABC'\nassert     concatenate(['1', '2', '3']) == '123'\n\nprint(concatenate(['a', 'b', 'c']))\nprint(concatenate(['A', 'B', 'C']))\nprint(concatenate(['1', '2', '3']))\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     concatenate([\"Hello\", \" \", \"World\"]) == \"Hello World\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([\"A\", \"B\", \"C\", \" \"]) == \"A\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"a b c d\"\nassert concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"a b c d e f\"\nassert concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\n\n\ndef test_letter_count_for_text_length_three():\n    \"\"\"\n    test case for letter count for text length three\n    \"\"\"\n    assert letter_count(\"abc\") == 3\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"hello\", \"cat\", \"catapult\"], \"cat\") == [\"cat\", \"catapult\"], \\\n        \"Your function is not filtering correctly.\"\nassert filter_by_prefix([\"hello\", \"cat\", \"catapult\"], \"cat\") == [\"cat\", \"catapult\"], \\\n        \"Your function is not filtering correctly.\"\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"b\") ==     [\"banana\", \"berry\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"a\") ==     [\"apple\", \"cherry\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"a\") ==     [\"apple\", \"cherry\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"c\") ==     [\"cherry\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"berry\"], \"c\") ==     [\"cherry\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['hey', 'hello', 'heyy'], 'h') == ['hey', 'heyy']\nassert     filter_by_prefix(['hey', 'hello', 'heyy'], 'he') == ['hey', 'heyy']\nassert     filter_by_prefix(['hey', 'hello', 'heyy'], 'h') == ['hey', 'heyy']\nassert     filter_by_prefix(['hey', 'hello', 'heyy'], 'he') == ['hey', 'heyy']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"bob\", \"cat\", \"job\"], \"b\") == [\"bob\", \"job\"]\nassert     filter_by_prefix([\"bob\", \"cat\", \"job\"], \"bob\") == [\"bob\"]\nassert     filter_by_prefix([\"bob\", \"cat\", \"job\"], \"bobob\") == [\"bob\"]\nassert     filter_by_prefix([\"bob\", \"cat\", \"job\"], \"bobobbo\") == []\nassert     filter_by_prefix([\"bob\", \"cat\", \"job\"], \"\") == [\"bob\", \"cat\", \"job\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_prefix(['dog', 'cat', 'fox'], 'dog') == ['dog']\nassert     filter_by_prefix(['dog', 'cat', 'fox'], 'c') == ['cat', 'fox']\nassert     filter_by_prefix(['dog', 'cat', 'fox'],'s') == []\nassert     filter_by_prefix(['dog', 'cat', 'fox'], 'a') == ['dog', 'cat', 'fox']\nassert     filter_by_prefix(['dog', 'cat', 'fox'], '') == ['dog', 'cat', 'fox']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['foo', 'bar', 'baz'], 'b') == ['bar', 'baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'ba') == ['foo', 'bar']\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'foo') == ['foo']\n\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'ba') == ['foo', 'bar']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_prefix(['abc', 'abd', 'a'], 'ab') == ['abc', 'abd']\nassert     filter_by_prefix(['abcd', 'a', 'b'], 'a') == ['abcd', 'a']\nassert     filter_by_prefix(['abcd', 'a', 'b'], 'c') == []\nassert     filter_by_prefix(['abcd', 'a', 'b'], 'd') == ['abcd']\nassert     filter_by_prefix(['abcd', 'a', 'b'], 'z') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'a') == ['a', 'a', 'a', 'a', 'a']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'c') == ['c', 'c', 'c', 'c', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'd') == ['d', 'd', 'd', 'd', 'd']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'z') == []\n\n\ndef filter_by_prefix_regex(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1, 2, 3] == get_positive([-1, 2, -3])\nassert     [] == get_positive([])\nassert     [1, 2, 3] == get_positive([1, 2, 3])\nassert     [] == get_positive([-1, -2, -3])\n\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1, -1]) == [1]\nassert     get_positive([1, -1, 2, -3, 4, -5]) == [1, 2, 4]\n\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_positive([3, -2, -1, 0, 2, 2]) == [3, 2, 2]\nassert     get_positive([0, -1, -2, -3, -4, -5]) == []\nassert     get_positive([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == []\n\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint(\"Passed!\")\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_positive([1, -1, -2, 3, 4, -5]) == [1, 3, 4, 5]\nassert     get_positive([1, -1, -2, -3, -4, -5]) == [1, -1, -2, -3, -4, -5]\nassert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     get_positive([1, 2, -3, 4, 5]) == [1, 2, 4, 5]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_positive([1, 2, 3]) == [1, 2, 3]\nassert     get_positive([]) == []\nassert     get_positive([-1, -2, -3]) == []\nassert     get_positive([-1, -2, 3]) == [3]\nassert     get_positive([0, -2, -3]) == [-2, -3]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef get_positive_with_filter(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     type(get_positive([1, -1, 0, 1])) == list\nassert     get_positive([1, -1, 0, 1]) == [1, 1, 1]\nassert     get_positive([]) == []\nassert     get_positive([1, 0, -2, 0]) == [1, 0, 1]\nassert     get_positive([1, 0, -2, -1]) == [1]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_positive([0, 1, 2, 3]) == [1, 2, 3]\nassert     get_positive([-2, -1, 0, 1, 2, 3]) == [1, 2, 3]\nassert     get_positive([-2.5, -1.5, 0, 1.5, 2.5, 3.5]) == [1.5, 2.5, 3.5]\nassert     get_positive([]) == []\n\n\ndef sum_odd(l: list):\n    \"\"\"Return sum of odd numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_positive([1, -1, 2, 3, -5, 8]) == [1, 2, 3, 8]\nassert     get_positive([]) == []\nassert     get_positive([-5, 0, 1]) == [-5, 1]\n\ndef sum_odd(numbers: list):\n    \"\"\"Return the sum of odd numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef factors(n):\n    \"\"\"Return the factors of a given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(9) == False\nassert     is_prime(13) == True\nassert     is_prime(0) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(12) == False\nassert     is_prime(11) == True\nassert     is_prime(8) == False\n\ndef smallest_prime_larger_than(n):\n    \"\"\"Return the smallest prime number larger than a given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(11) == True\nassert     is_prime(10) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_prime(3) == True, 'This is not a prime.'\nassert     is_prime(2) == True, 'This is a prime.'\nassert     is_prime(1) == False, 'This is not a prime.'\nassert     is_prime(4) == False, 'This is not a prime.'\nassert     is_prime(8) == False, 'This is not a prime.'\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    \ndef test_is_prime():\n    \"\"\" Test is_prime \"\"\"\n    \n    # Correct is_prime cases\n    assert is_prime(3) == True\n    assert is_prime(7) == True\n    assert is_prime(11) == True\n    \n    # Incorrect is_prime cases\n    assert is_prime(0) == False\n    "
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef next_prime(n):\n    \"\"\"Return the smallest prime number larger than a given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_prime(5) == True\nassert     is_prime(6) == False\nassert     is_prime(6.1) == False\nassert     is_prime(7) == True\nassert     is_prime(10) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_prime(-1) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_zero([5, 3, 0, 0]) == [0.25]\nassert     find_zero([4, -3, 0, 0]) == [0.2]\nassert     find_zero([2, 0, 0, 0]) == [0]\nassert     find_zero([0, 2, 0, 0]) == [0]\nassert     find_zero([0, 0, 0, 2]) == [0]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef test_poly():\n    xs = [1, 3, 2, 0, -1]\n    assert poly(xs, 3) == 5\n    xs = [1, 2, 3, 4]\n    assert poly(xs, 3) == 18\n\ndef test_find_zero():\n    xs = [1, 3, 2, 0, -1]\n    "
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     poly([1, 0, 0], 1) == 0\nassert     poly([1, 0, 0], 2) == 0\nassert     poly([1, 0, 0], 3) == 0\nassert     poly([1, 0, 0], 4) == 0\nassert     poly([1, 0, 0], 5) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     poly([1,1], 1) == 2\nassert     poly([1,2,3,4], 2) == 4\nassert     poly([-1,2,3,4], -2) == 4\nassert     poly([-1,2,3,4], 2) == -4\nassert     poly([-1,1,1], -1) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     poly([1], 0.5) == 0.5\nassert     poly([1], 2) == 2\nassert     poly([1, 0], -3) == 0\nassert     poly([1, 0, 0], 3) == 3\nassert     poly([1, 1], 3) == 2\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef find_zeros(xs: list, n: int):\n    \"\"\" Find all zeros of a polynomial in n variables.\n    find_zeros takes a list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    Returns list of tuples, each tuple is a point of zero.\n    \"\"\"\n    pass\n\ndef eval_poly(xs: list, n: int):\n    \"\"\" Evaluate all polynomials of degree <= n.\n    eval_poly takes a list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    Returns list of polynomials evaluated at those points.\n    \"\"\"\n    pass\n\ndef find_zeros_in_range(xs: list, n: int):\n    \"\"\" Find all zeros of polynomials of degree <= n in the interval [-1, 1].\n    Returns list of tuples, each tuple is a point of zero.\n    \"\"\"\n    pass\n\ndef plot(xs: list, n: int):\n    \"\"\" Plot a polynomial.\n    plot takes a list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_zero([1, 2, 4, 9, 16]) ==     [2.0, 4.0]\nassert     find_zero([2, 4, 8, 16]) ==     [2.0]\nassert     find_zero([1, 0, 0, 0, 0, 1]) ==     [0.0]\nassert     find_zero([1, 2, 0, 0, 0]) ==     [0.0]\nassert     find_zero([1, 2, 3, 0, 0, 1]) ==     [0.0]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     poly([2], -3) == -2\nassert     poly([2, 3], 1) == 2\nassert     poly([2, 3, 4], 0) == 3\nassert     poly([2, 3, 4], -1) == -4\nassert     poly([2, 3, 4], 1) == 4\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     poly([1, 2, 0], 1) == 3\nassert     poly([1, 2, 3, 4, 0], 5) == 12\nassert     poly([1, 2, 3, 4, 0], 0) == 1\nassert     poly([1, 2, 3, 4, 0], 0.5) == 1.5\nassert     poly([1, 2, 0], 0) == 1\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n    assert "
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_third([1,4,5,6,3,2]) == [1,2,3,4,5,6], \\\n        \"sort_third: incorrect output for input [1,4,5,6,3,2]\"\nassert     sort_third([3,7,1,2,4,9,8]) == [1,2,3,4,7,8,9], \\\n        \"sort_third: incorrect output for input [3,7,1,2,4,9,8]\"\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_third([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_third([1,0,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_third([1,2,0,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_third([1,2,3,0,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_third([1,2,3,4,0,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_third([4,1,3,7]) == [1,3,4,7]\nassert     sort_third([3,4,1,2]) == [1,2,3,4]\nassert     sort_third([3,1,2,4]) == [1,2,3,4]\nassert     sort_third([3,4,1,2,6]) == [1,2,3,4,6]\nassert     sort_third([2,4,1,3]) == [1,2,3,4]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_third([3, 2, 4, 5, 1]) == [1, 2, 3, 4, 5]\nassert     sort_third([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_third([1, 2, 3, 1, 2, 3]) == [1, 1, 2, 2, 3, 3]\n\ndef mult_first(m: list):\n    \"\"\"This function takes a list m and returns a list m' such that\n    m' is identical to m except that the first two elements are\n    multiplied by two.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_third([1, 3, 5, 2, 4, 9, 10, 3]) == [1, 3, 2, 3, 4, 5, 9, 10]\nassert     sort_third([1, 3, 5, 2, 4, 9, 10, 4]) == [1, 3, 2, 3, 4, 4, 5, 9, 10]\nassert     sort_third([1, 3, 5, 2, 4, 9, 10, 5]) == [1, 3, 2, 3, 4, 5, 5, 9, 10]\nassert     sort_third([1, 3, 5, 2, 4, 9, 10, 6]) == [1, 3, 2, 3, 4, 5, 5, 6, 9, 10]\nassert     sort_third([1, 3, 5, 2, 4, 9, 10, 7]) == [1, 3, 2, 3, 4, 5, 5, 6, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_third([2, 4, 6, 8, 5, 7, 10]) == [2, 4, 6, 5, 7, 8, 10]\nassert     sort_third([5, 4, 6, 8, 3, 7, 10]) == [5, 4, 6, 8, 3, 7, 10]\nassert     sort_third([5, 4, 6, 8, 3, 7, 10]) == [5, 4, 6, 8, 3, 7, 10]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([1, 2, 3, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([1, 2, 3, 4, 5, 2]) == [1, 2, 3, 4, 5]\nassert unique([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef list_in_list(a: list, b: list):\n    \"\"\"Return True if a is contained in b.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique([1, 2, 3, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique([1, 1, 2, 3, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique([]) == []\nassert     unique([1]) == [1]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique([1, 2, 3, 4, 5, 3]) == [1, 2, 3, 4, 5]\nassert unique([]) == []\nassert unique([1, 2, 3, 4, 5, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef my_enumerate(l: list):\n    \"\"\"Return a list of the pairs (index, value) for a list of values\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef intersect(l1: list, l2: list):\n    \"\"\"Return the intersection of two sorted lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique([2, 3, 1, 3, 4, 2, 1]) == [2, 1, 3, 4]\nassert     unique([2, 3, 1, 3, 4, 2, 1]) == [2, 1, 3, 4]\nassert     unique([]) == []\nassert     unique([2, 2, 3, 4, 5, 4, 3]) == [2, 3, 4, 5]\nassert     unique([2, 2, 3, 4, 5, 4, 3]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \nassert \n\ndef find_intersection(l1: list, l2: list):\n    \"\"\"Find common elements in two lists\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique([1,1,2,2,3,3]) == [1,2,3], 'unique failed'\nassert unique([1,1,2,2,3,3]) == [1,2,3], 'unique failed'\nassert unique([1,1,2,2,3,3]) == [1,2,3], 'unique failed'\nassert unique([1,2,3]) == [1,2,3], 'unique failed'\nassert unique([]) == [], 'unique failed'\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef find_dup(l: list):\n    \"\"\"Find duplicate element in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     unique([1, 2, 1, 1, 1, 2, 2, 3]) == [1, 2, 3]\nassert     unique([]) == []\nassert     unique([1]) == [1]\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([]) == None\nassert     max_element([1, 2, 3, 1]) == 3\nassert     max_element([1, 2, 3, 0]) == 3\nassert     max_element([3, 1, 1, 2]) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_element([1, 3, 2]) == 3\nassert     max_element([1, 2, 3]) == 3\nassert     max_element([3, 2, 1]) == 3\nassert     max_element([1, 4, 2, 3, 1]) == 4\nassert     max_element([0, 1]) == 1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([4, 3, 2, 1]) == 4\nassert     max_element([1, 2, 4, 3]) == 4\nassert     max_element([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([3, 2, 1, 4, 5]) == 5\nassert     max_element([-5, -4, -3, -2, -1]) == -1\nassert     max_element([0]) == 0\nassert     max_element([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.5\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_element([2, 3, -4, 5, 6]) == 6\nassert     max_element([2, 3, -4, -1, 0]) == 3\nassert     max_element([2, 3, -4, 0, 6]) == 6\nassert     max_element([-2, 3, -4, 0, 6]) == 0\nassert     max_element([-2, -3, -4, 0, 6]) == -2\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert max_element([1, 2, 3, -4]) == 3\nassert max_element([1, 2, 3, -5]) == 3\nassert max_element([-1, -2, -3, -4]) == -1\nassert max_element([-1, -2, -3, -5]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fizz_buzz(11) == 3\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(101) == 2\nassert     fizz_buzz(456) == 0\nassert     fizz_buzz(7) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fizz_buzz(15) == 2\nassert     fizz_buzz(16) == 3\nassert     fizz_buzz(24) == 2\nassert     fizz_buzz(100) == "
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef fizz_buzz_table(n: int) -> list:\n    \"\"\"Return a list of strings corresponding to the FizzBuzz table of n.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    print(fizz_buzz_table(10))"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # check test cases\n    assert fizz_buzz(15) == 2\n    assert fizz_buzz(12) == 0\n    assert fizz_buzz(2) == 0\n    "
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef sum_all(numbers: list) -> int:\n    \"\"\"This function takes a list of numbers and returns the sum of all of the elements in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_even([3, 2, 6, 4, 1, 2, 7, 9]) == [3, 2, 6, 4, 1, 2, 7, 9]\nassert     sort_even([3, 2, 5, 4, 1, 2, 7, 9]) == [3, 2, 5, 4, 1, 2, 7, 9]\nassert     sort_even([3, 2, 5, 4, 1, 2, 7, 9, 0]) == [3, 2, 5, 4, 1, 2, 7, 9, 0]\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_even([4, 0, 1, 2, 3, 4, 5, 6, 1, 0]) == [4, 4, 2, 2, 4, 4, 6, 6, 1, 1]\nassert     sort_even([1, 2, 3, 4]) == [2, 4, 6, 8]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8, 10, 12, 14, 16]\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_even([3, 8, 9, 0, 5, 7, 2, 6, 1]) == [0, 2, 3, 5, 6, 7, 8, 9, 1]\nassert     sort_even([7, 2, 1, 5, 6, 3, 9, 4, 8]) == [2, 4, 6, 7, 8, 9, 1, 3, 5]\nassert     sort_even([]) == []\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef contains_first_letter_first(l: list):\n    \"\"\"This function takes a list l, and returns True iff the first letter\n    of l is the first letter of the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_even([0, 2, 4, 6, 1, 5, 7]) == [0, 2, 4, 1, 6, 5, 7]\nassert     sort_even([0, 2, 4, 1, 1, 4, 2, 1]) == [0, 2, 1, 1, 4, 4, 2, 2]\nassert     sort_even([0, 1, 2, 3]) == [0, 2, 1, 3]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef merge_two_sorted_lists(l: list, m: list):\n    \"\"\"This function takes two sorted lists l and m and returns a new list\n    with the elements of l and m combined, sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_even([2,5,7,1,9,7,5]) == [2,2,5,5,7,7,9]\nassert     sort_even([]) == []\nassert     sort_even([2,7,9,4,1]) == [2,7,9,9,4]\nassert     sort_even([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_cyclic(encode_cyclic(\"Cheer up!\")) == \"Cheer up!\"\nassert decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert decode_cyclic(encode_cyclic(\"ab\")) == \"aba\"\nassert decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert decode_cyclic(encode_cyclic(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     \"MOWTAWEK\" == decode_cyclic(encode_cyclic(\"MOWTAWEWKTK\"))\nassert     \"MOWTAWEWKTK\" == decode_cyclic(encode_cyclic(\"MOWTAWEWKTK\"))\n\n\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_cyclic(\"esgbcg\") == \"abcdefg\"\nassert decode_cyclic(\"adgbecg\") == \"abeabcg\"\nassert decode_cyclic(\"gbecdg\") == \"cbedcg\"\nassert decode_cyclic(\"gbcde\") == \"ebcde\"\nassert decode_cyclic(\"gbcdef\") == \"ebcdef\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"qwert\")) == \"qwert\"\nassert     decode_cyclic(encode_cyclic(\"qwerty\")) == \"qwerty\"\nassert     decode_cyclic(encode_cyclic(\"qwertyuiop\")) == \"qwertyuiop\"\nassert     decode_cyclic(encode_cyclic(\"qwertyuiopasdfghjklzxcvbn\")) == \"qwertyuiopasdfghjklzxcvbn\"\nassert     decode_cyclic(encode_cyclic(\"qwertyuiopasdfghjklzxcvbnm\")) == \"qwertyuiopasdfghjklzxcvbnm\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decode_cyclic(encode_cyclic(\"moons\")) == \"moons\"\nassert     decode_cyclic(encode_cyclic(\"moons\")) == \"moons\"\nassert     decode_cyclic(encode_cyclic(\"moons\")) == \"moons\"\nassert     decode_cyclic(encode_cyclic(\"moons\")) == \"moons\"\nassert     decode_cyclic(encode_cyclic(\"moons\")) == \"moons\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decode_cyclic(encode_cyclic(\"I am a string\")) == \"iamastring\"\n\ndef encode_pig_latin(s: str):\n    \"\"\"\n    returns encoded string by pig latinifying it.\n    \"\"\"\n    # split string to words\n    words = s.split(' ')\n    # pig latinify words and join them together.\n    return''.join([w[1:] + w[0] + 'ay' for w in words])\n\ndef decode_pig_latin(s: str):\n    \"\"\"\n    returns decoded string by pig latinifying it.\n    \"\"\"\n    # split string to words\n    words = s.split(' ')\n    # pig latinify words and join them together.\n    return''.join([w[len(w) - 3:] + w[0:len(w) - 3] for w in words])\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef main():\n    s = \"aaba\"\n    print(encode_cyclic(s))\n    print(decode_cyclic(encode_cyclic(s)))\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decode_cyclic(encode_cyclic('f')) == 'f'\nassert     decode_cyclic(encode_cyclic('f' * 10)) == 'f' * 10\nassert     decode_cyclic(encode_cyclic('f' * 100)) == 'f' * 100\nassert     decode_cyclic(encode_cyclic('f' * 1000)) == 'f' * 1000\n\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prime_fib(5) == 5\nassert     prime_fib(10) == 29\nassert     prime_fib(15) == 541\nassert     prime_fib(20) == 6765\nassert     prime_fib(25) == 121393\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prime_fib(5) == 13\nassert prime_fib(10) == 89\nassert prime_fib(11) == 149\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert prime_fib(0) == (0, False)\nassert prime_fib(1) == (1, True)\nassert prime_fib(2) == (1, False)\nassert prime_fib(3) == (2, True)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prime_fib(10) == 89\nassert     prime_fib(20) == 1597\nassert     prime_fib(50) == 15989713\n\n\ndef list_primes(n: int):\n    \"\"\"\n    list_primes returns the list of primes <= n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef test_prime_fib():\n    \"\"\"\n    This function tests prime_fib function\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prime_fib(0) == (1, 1)\nassert     prime_fib(1) == (1, 2)\nassert     prime_fib(2) == (2, 3)\nassert     prime_fib(3) == (3, 5)\nassert     prime_fib(4) == (5, 7)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    prime_fib(0) == [2, 1]\n    prime_fib(2) == [2, 3, 5]\n    prime_fib(4) == [2, 3, 5, 7]\n    prime_fib(6) == [2, 3, 5, 7, 11, 13]\n    prime_fib(8) == [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([0, -2, 1, 2, -3, 3]) == True\nassert triples_sum_to_zero([0, -2, 1, 2, -3, 2]) == False\nassert triples_sum_to_zero([0, -2, 1, 2, -3, -2]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1,-1,1,-1,1]) == False\nassert     triples_sum_to_zero([0,0,0,0]) == True\nassert     triples_sum_to_zero([0,0,0,1]) == False\nassert     triples_sum_to_zero([0,0,1,1,1,2]) == True\nassert     triples_sum_to_zero([0,0,1,1,2,2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([-1, 2, 1, -4]) == True\nassert triples_sum_to_zero([0, 0, 0, 0]) == False\nassert triples_sum_to_zero([1, 1, 1, 1]) == True\nassert triples_sum_to_zero([0, 2, 1, -3]) == True\nassert triples_sum_to_zero([0, 0, 2, 1, -3]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([0,0,0,0,0]) == False, 'Error in triples_sum_to_zero'\nassert     triples_sum_to_zero([1,0,1,0,1]) == True, 'Error in triples_sum_to_zero'\nassert     triples_sum_to_zero([0,-1,0,2,0]) == False, 'Error in triples_sum_to_zero'\nassert     triples_sum_to_zero([-4,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([2, -5, -1, 0, 2]) == True\nassert     triples_sum_to_zero([1, -2, 1]) == False\nassert     triples_sum_to_zero([0, 0, 1]) == True\n\ndef factor_sum_to_zero(l: list):\n    \"\"\"\n    factor_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    factor to be zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([1, 1, 0, -1, 3]) == True\nassert     triples_sum_to_zero([1, -1, 2, 0, 3]) == False\nassert     triples_sum_to_zero([2, 3, 0, -2, 2]) == True\nassert     triples_sum_to_zero([2, 3, 0, -2, 2, -2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-5, -3, -3, 6, -5, 0, -3, 9, 0, 5]) == True\nassert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     triples_sum_to_zero([]) == False\n\ndef triples_sum_to_zero_iterative(l: list):\n    \"\"\"\n    triples_sum_to_zero_iterative takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1, -1, 1, -1, 1, -1, 1]) == True\nassert     triples_sum_to_zero([-1, 2, 2, -1]) == True\nassert     triples_sum_to_zero([1, -1, 2, 2]) == False\nassert     triples_sum_to_zero([-1, 2, 3, 1]) == False\nassert     triples_sum_to_zero([1, -1, 2, 3]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1,2]) == False\nassert     triples_sum_to_zero([1,2,3]) == False\nassert     triples_sum_to_zero([1,2,3,4,5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     car_race_collision(3) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(3) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0\nassert car_race_collision(2) == 0\nassert car_race_collision(3) == 0\nassert car_race_collision(4) == 1\nassert car_race_collision(5) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0, \"car_race_collision(1)\"\nassert     car_race_collision(2) == 0, \"car_race_collision(2)\"\nassert     car_race_collision(3) == 1, \"car_race_collision(3)\"\nassert     car_race_collision(4) == 1, \"car_race_collision(4)\"\nassert     car_race_collision(5) == 2, \"car_race_collision(5)\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     car_race_collision(1) == 1, \"car_race_collision(1)\"\nassert     car_race_collision(2) == 0, \"car_race_collision(2)\"\nassert     car_race_collision(3) == 2, \"car_race_collision(3)\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     car_race_collision(3) == 0, \"Wrong answer for car_race_collision(3)\"\nassert     car_race_collision(5) == 2, \"Wrong answer for car_race_collision(5)\"\nassert     car_race_collision(10) == 4, \"Wrong answer for car_race_collision(10)\"\nprint(\"Problem 5.5.1: Correct!\")\n\n\ndef car_race_collision_cheat(n: int):\n    \"\"\"\n    A slight variation on car_race_collision().\n    We cheat a bit here.   We assume that the two cars being compared are\n    moving in the same direction; and that this is true even though, as we\n    know, the assumption of car_race_collision() is not 100% true.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     car_race_collision(3) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(4) == 1\nassert     car_race_collision(5) == 2\nassert     car_race_collision(10) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef car_race_collision_solution(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     car_race_collision(0) == 0, 'Wrong answer'\nassert car_race_collision(1) == 0, 'Wrong answer'\nassert car_race_collision(2) == 1, 'Wrong answer'\nassert car_race_collision(3) == 1, 'Wrong answer'\nassert car_race_collision(4) == 2, 'Wrong answer'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     car_race_collision(5) == 20\nassert     car_race_collision(6) == 22\nassert     car_race_collision(7) == 24\nassert     car_race_collision(8) == 26\nassert     car_race_collision(9) == 28\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     car_race_collision(3) == 1, \"wrong answer for car_race_collision(3)\"\nassert     car_race_collision(5) == 3, \"wrong answer for car_race_collision(5)\"\nassert     car_race_collision(8) == 6, \"wrong answer for car_race_collision(8)\"\nassert     car_race_collision(33) == 23, \"wrong answer for car_race_collision(33)\"\n\ndef car_race_collision2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \nprint('Correctness test passed!')\n\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([0,9,8,7,6,5,4,3,2,1]) == [1,10,9,8,7,6,5,4,3,2]\nassert     incr_list([-1,0,1,2,3]) == [0,1,2,3,4]\nassert     incr_list([-1,-2,1,2,3]) == [-1,-2,2,3,4]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \n\ndef incr_list2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     incr_list([1, 3, 7]) == [2, 4, 8]\nassert     incr_list([]) == []\nassert     incr_list([4, 4]) == [5, 5]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([0, 1, 2]) == [1, 2, 3]\nassert     incr_list([-1, -2, -3]) == [-2, -3, -4]\nassert     incr_list([1, -2, -3]) == [0, -1, -2]\nassert     incr_list([1, -2, 3]) == [0, -1, 4]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1, 0, -2, 3]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -2, 1]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -2, 1, -2]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -2, -2]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([1,-2,3,4,5]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([1,2,3,-4,5]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([1,-2,3,4,0]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([1,-2,3,-4,0]) == False, \"Wrong output\"\nprint(\"Exercise 1 is correct.\")\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"Empty list\"\nassert     pairs_sum_to_zero([0]) == False, \"Single element\"\nassert     pairs_sum_to_zero([0, 1, 2]) == False, \"No 2 elements\"\nassert     pairs_sum_to_zero([0, -1, 2]) == True, \"2 negative numbers\"\nassert     pairs_sum_to_zero([0, 1, 2, 3]) == False, \"More than 2 elements\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1, -1, 2, -2, 3, 3]) == True\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, 3, 3]) == False\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, 3, 0]) == True\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, 3, -3]) == False\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, 3, 0, 0]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef pairs_sum_to_zero_test(test_case):\n    \"\"\"\n    pairs_sum_to_zero_test is a function that tests pairs_sum_to_zero.\n    it takes a list of integers as an input, and returns True if there are two\n    distinct elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7]) == True, \"Not implemented error\"\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, -1]) == False, \"Not implemented error\"\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7]) == True, \"Not implemented error\"\nassert     pairs_sum_to_zero([1, -1, 1, -1]) == True, \"Not implemented error\"\nassert     pairs_sum_to_zero([1, 2, 3, -3]) == False, \"Not implemented error\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5,6]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([1,-2,3,0,5,6]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([0,0,0,0,0]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([1,2,3,4,5]) == False, \"Wrong output\"\n\nprint(\"pairs_sum_to_zero is correct.\")\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([1, 3, 5, 0, 0, -6]) == True\nassert     pairs_sum_to_zero([1, 3, -5, 0, 0, -6]) == False\nassert     pairs_sum_to_zero([1, 3, 5, 0, 0, 0]) == True\nassert     pairs_sum_to_zero([0, 0, 1, 3, 5, 0]) == False\nassert     pairs_sum_to_zero([0, 0, 1, 3, 5, 0, 0, 0]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([2,4,-1,0]) == True\nassert     pairs_sum_to_zero([0,3,-1,2]) == True\nassert     pairs_sum_to_zero([0,1,-1,0]) == False\n\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     change_base(5, 2) == '101', \"Wrong result for 5 in base 2.\"\nassert     change_base(0b101010, 2) == '101010', \"Wrong result for 0b101010 in base 2.\"\nassert     change_base(0o310, 8) == '13', \"Wrong result for 0o310 in base 8.\"\nassert     change_base(0x2A, 16) == '2A', \"Wrong result for 0x2A in base 16.\"\n\nprint(\"Problem #2: \")\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     change_base(1234, 7) == '1234'\nassert     change_base(1234, 8) == '7674'\nassert     change_base(1234, 10) == '1234'\nassert     change_base(1234, 2) == '101010'\nassert     change_base(1234, 3) == '1412'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     change_base(10, 2) == \"1010\"\nassert     change_base(10, 8) == \"10\"\nassert     change_base(10, 16) == \"a\"\nassert     change_base(10, 26) == \"z\"\nassert     change_base(10, -2) == \"1010\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert _____\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(25, 3) == '12'\nassert     change_base(42, 4) == '3030'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     change_base(10, 2) == \"1010\", \"error in change_base 10, 2\"\nassert     change_base(10, 3) == \"10\", \"error in change_base 10, 3\"\nassert     change_base(10, 8) == \"10\", \"error in change_base 10, 8\"\nassert     change_base(10, 7) == \"10\", \"error in change_base 10, 7\"\nassert     change_base(10, 10) == \"10\", \"error in change_base 10, 10\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 3) == '10'\nassert     change_base(10, 4) == '12'\nassert     change_base(10, 5) == '14'\nassert     change_base(10, 6) == '15'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     change_base(10, 2) == \"1010\", change_base(10, 2)\nassert     change_base(20, 2) == \"10100\", change_base(20, 2)\nassert     change_base(20, 3) == \"202\", change_base(20, 3)\nassert     change_base(20, 5) == \"2020\", change_base(20, 5)\nassert     change_base(20, 10) == \"101020\", change_base(20, 10)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     change_base(5, 2) == '101'\nassert     change_base(5, 8) == '15'\nassert     change_base(5, 16) == '1F'\nassert     change_base(42, 3) == '1A2'\n\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert change_base(2, 2) == '10'\nassert change_base(7, 3) == '111'\nassert change_base(18, 4) == '132'\nassert change_base(0, 5) == '0'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triangle_area(5, 2) == 10, 'Not correct'\nassert     triangle_area(1, 5) == 2.5, 'Not correct'\nassert     triangle_area(1, 2) == 1, 'Not correct'\n\ndef rectangle_area(a, b):\n    \"\"\"Given length of a side and high return area for a rectangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triangle_area(5, 10) == 25\nassert     triangle_area(7, 12) == 49\nassert     triangle_area(3, 10) == 37.5\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triangle_area(3, 5) == 4.5\nassert     triangle_area(4, 10) == 36.0\nassert     triangle_area(5, 10) == 37.5\nassert     triangle_area(7, 10) == 21.0\nassert     triangle_area(9, 10) == 27.0\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\n\n\ndef rectangle_area(a, b):\n    \"\"\"Given length of two sides of a rectangle return its area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(3,4) == 7.5, \"triangle area\"\nassert     triangle_area(4,3) == 7.5, \"triangle area\"\n\ndef square_area(a):\n    \"\"\"Given length of a side return area for a square.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert triangle_area(2, 2) == 1.0\nassert \nassert "
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    triangle_area(3,4) == 6\n    triangle_area(4,6) == 12\n    triangle_area(5,10) == 2"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triangle_area(3,5) == 3.0\nassert     triangle_area(3,4) == 2.0\nassert     triangle_area(4,6) == 2.0\nassert     triangle_area(6,5) == 5.0\nassert     triangle_area(3,4) == 2.0\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert fib4(1) == 0\nassert fib4(2) == 2\nassert fib4(3) == 0\nassert fib4(10) == 55\nprint('the correctness of fib4 is ok')\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(10) == 55\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 0\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     median([1,2,3,4,5]) == 3\nassert     median([1,2,3,4,5,6,7]) == 4\nassert     median([5,5,5,5,5,5]) == 5\nassert     median([]) == None\nassert     median([0,1,2]) == 1.5\nprint('Problem 024: All tests passed')"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef mode(l: list):\n    \"\"\"Return the mode of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef mode(l: list):\n    \"\"\"Return the mode of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     median([2, 3, 4]) == 3, 'Test 1.1 failed.'\nassert     median([2, 3, 4, 6]) == 4, 'Test 1.2 failed.'\nassert     median([2, 3, 4, 6, 8]) == 6, 'Test 1.3 failed.'\nassert     median([2, 3, 4, 6, 8, 10]) == 7, 'Test 1.4 failed.'\nassert     median([2, 3, 4, 6, 8, 10, 11]) == 8, 'Test 1.5 failed.'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     median([2, 4, 6, 8, 10, 12, 14]) == 6.5\nassert     median([2, 4, 6, 8, 10, 12, 14, 16]) == 8\nassert     median([2, 4, 6, 8, 10, 12, 14, 16, 18]) == 8.5\nassert     median([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 10\nassert     median([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]) == 12\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (median([1, 2, 3, 4, 5, 6, 7]) == 3)\nassert     (median([1, 2, 3, 4, 5, 6, 7, 8]) == 4)\nassert     (median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5)\nassert     (median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5)\nassert     (median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([2, 1, 3, 4, 5]) == 3\nassert     median([2, 3, 1, 4, 5]) == 3\nassert     median([2, 3, 4, 1, 5]) == 3\nassert     median([2, 3, 4, 5, 1]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5, 6]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     median([3, 10, 1, 5, 5]) == 5, \"wrong result for [3, 10, 1, 5, 5]\"\nassert     median([1, 2, 3, 4, 5, 6]) == 3, \"wrong result for [1, 2, 3, 4, 5, 6]\"\nassert     median([5, 3, 6, 2, 10]) == 5, \"wrong result for [5, 3, 6, 2, 10]\"\nassert     median([2, 3]) == 2, \"wrong result for [2, 3]\"\nassert     median([1, 3]) == 2, \"wrong result for [1, 3]\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"aibohphobia\") == True, \"is_palindrome('aibohphobia')\"\nassert     is_palindrome(\"aibohphobia\") == True, \"is_palindrome('aibohphobia')\"\nassert     is_palindrome(\"asdfghjkl\") == False, \"is_palindrome('asdfghjkl')\"\n\nprint('All tests passed!')"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"\") == True, \"Empty string is a palindrome\"\nassert     is_palindrome(\"a\") == True, \"One character is a palindrome\"\nassert     is_palindrome(\"ab\") == False, \"Two characters are not a palindrome\"\nassert     is_palindrome(\"aba\") == True, \"A string with an even number of characters is a palindrome\"\nassert     is_palindrome(\"abba\") == True, \"A string with an even number of characters is a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_palindrome('a') is False, 'Case \"a\" is not palindrome'\nassert     is_palindrome('aab') is True, 'Case \"aab\" is palindrome'\nassert     is_palindrome('abba') is True, 'Case \"abba\" is not palindrome'\nassert     is_palindrome('amanaplanacanalpanama') is True, 'Case \"amanaplanacanalpanama\" is not palindrome'\nassert     is_palindrome('ababa') is False, 'Case \"ababa\" is palindrome'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"mom\") == True\nassert     is_palindrome(\"sassas\") == True\nassert     is_palindrome(\"mama\") == True\nassert     is_palindrome(\"mum\") == True\nassert     is_palindrome(\"mam\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef is_palindrome2(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = text.lower()\n    for c in text:\n        if c!='':\n            break\n    else:\n        return True\n\n    first, *rest = text\n    for c in rest:\n        if c!= first:\n            return False\n    return True\n\n\ndef is_palindrome3(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = text.lower()\n    if len(text) <= 1:\n        return True\n    else:\n        first, *rest = text\n        return rest[0] == first and is_palindrome3(rest[1:])\n\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_palindrome('')\nassert     is_palindrome('a')\nassert     is_palindrome('a b a')\nassert     not is_palindrome('aa')\nassert     not is_palindrome('ab a')\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"anna\") == True\nassert     is_palindrome(\"anna\") == True\nassert     is_palindrome(\"anna\") == True\nassert     is_palindrome(\"anna\") == True\nassert     is_palindrome(\"anna\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abca\") == False\nassert     is_palindrome(\"abccba\") == True\nassert     is_palindrome(\"abccbaa\") == False\n\n\ndef is_anagram(word1: str, word2: str):\n    \"\"\"\n    Checks if given words are anagrams\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef split_in_parts(text: str, parts: int):\n    \"\"\"\n    Returns array of strings, each of length of string divided by `parts`\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"ababab\") == True\nassert     is_palindrome(\"abababa\") == False\nassert     is_palindrome(\"abababaA\") == False\nassert     is_palindrome(\"abababaB\") == False\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef test_modp():\n    # modp(2, 2) = 0b10 = 2\n    assert modp(2, 2) == 2\n    # modp(2, 3) = 0b11 = 3\n    assert modp(2, 3) == 3\n    # modp(5, 7) = 0b10101\n    assert modp(5, 7) == 10101\n    # modp(2, 3) = 0b11 = 3\n    "
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef bit(n: int, k: int):\n    \"\"\"Return the k-th bit of n (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     modp(0, 17) == 17\nassert     modp(0, 1) == 1\nassert     modp(5, 17) == 17\nassert     modp(5, 1) == 1\nassert     modp(14, 17) == 17\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     modp(0, 3) == 2\nassert     modp(1, 3) == 3\nassert     modp(2, 3) == 6\nassert     modp(3, 3) == 0\nassert     modp(4, 3) == 3\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     modp(3, 8) == 7\nassert     modp(5, 10) == 5\nassert     modp(3, 16) == 11\nassert     modp(5, 32) == 31\n\ndef egcd(a, b):\n    \"\"\"Return a triple (r, m, n) such that r = gcd(a, b) and\n    m*a + n*b = gcd(a, b).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     modp(3, 5) == 1\nassert     modp(5, 5) == 2\nassert     modp(8, 5) == 4\nassert     modp(9, 5) == 3\n\ndef crt(m: int, n: int, a: int, b: int):\n    \"\"\"Return the result of a * m + b * n that has the smallest possible integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     modp(0, 5) == 0\nassert     modp(1, 5) == 1\nassert     modp(2, 5) == 2\nassert     modp(3, 5) == 3\nassert     modp(4, 5) == 4\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef get_period(n, p):\n    \"\"\"Return the period of 2^n modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(s)) == s\nassert     encode_shift(decode_shift(s)) == s\n\ndef shift(s, n):\n    \"\"\"\n    takes as input string s and shifts all characters in string by n places. Returns shifted string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + n) % 26) + ord(\"a\")) for ch in s])\n\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(str)) == str\nprint(\"Passed\")\n\n\ndef swap_random_pair(s: str):\n    \"\"\"\n    takes as input a string, and swaps two of its randomly chosen character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     \"My name is Python\" == decode_shift(\"WdssjsCwzdmQ6WzJgxDvqWkd\")\nassert \"My name is Python\" == decode_shift(\"VxXejCwzdmQ6WzJgxDvqWkd\")\nassert \"My name is Python\" == decode_shift(\"WdssjsCwzdmQ6WzJgxDvqWkd\")\nassert \"My name is Python\" == decode_shift(\"WdssjsCwzdmQ6WzJgxDvqWkd\")\nassert \"My name is Python\" == decode_shift(\"WdssjsCwzdmQ6WzJgxDvqWkd\")\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decode_shift(\"u4r2m3c0r1t2e3\") == \"python\"\nassert     decode_shift(\"w0r1d2e3\") == \"w0r1d2e3\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    s = \"zabcdefghijklmnopqrstuvwxyz\"\n    enc = encode_shift(s)\n    print(enc)\n    dec = decode_shift(enc)\n    print(dec)\n    assert(dec == s)"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"the quick brown fox jumps over the lazy dog\")) == \"the quick brown fox jumps over the lazy dog\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decode_shift(encode_shift(\"this is a test\")) == \"this is a test\"\nassert     decode_shift(encode_shift(\"ztffnhrglmtt\")) == \"ztffnhrglmtt\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"xyz\")) == \"xyz\"\nassert     decode_shift(encode_shift(\"Hello World!\")) == \"Hello World!\"\n\n\ndef caesar_hack(s: str) -> bool:\n    \"\"\"\n    returns true iff s is encoded with a Caesar cipher and false otherwise.\n    \"\"\"\n    pass\n\n\ndef main():\n    s = input(\"Enter string: \")\n    if caesar_hack(s):\n        print(encode_shift(s))\n    else:\n        print(\"String is not encoded by Caesar cipher.\")\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_vowels('hello') == 'hll','remove_vowels: wrong result for \"hello\"'\nassert     remove_vowels('I have an apple') ==' hv nr j ac pple','remove_vowels: wrong result for \"I have an apple\"'\nassert     remove_vowels('I have a pen') ==' hv nr j a pen','remove_vowels: wrong result for \"I have a pen\"'\nassert     remove_vowels('My brother is so cool') == 'M  yr brn s ckr  scool','remove_vowels: wrong result for \"My brother is so cool\"'\nassert     remove_vowels('I have a pen, I have an apple, I have a banana') ==' hv nr j a pen, I  hv nr j a pen, I  hv nr j a pen,','remove_vowels: wrong result for \"I have a pen, I have an apple, I have a banana\"'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_vowels('hello world') == 'hllo wrld', \"remove_vowels('hello world') == 'hllo wrld'\"\nassert     remove_vowels('hEllo worLD') == 'hEllo wORld', \"remove_vowels('hEllo worLD') == 'hEllo wORld'\"\nassert     remove_vowels('I have a pen') =='I hav a pen', \"remove_vowels('I have a pen') =='I hav a pen'\"\nassert     remove_vowels('I have a pencil') =='I hav a pencil', \"remove_vowels('I have a pencil') =='I hav a pencil'\"\nassert     remove_vowels('this is sparta') =='ths s n sparta', \"remove_vowels('this is sparta') =='ths s n sparta'\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_vowels('Hello world') == 'Hll wrld'\nassert     remove_vowels('Sophie') == 'Sofhi'\nassert     remove_vowels('This is great') == 'Th s gt rt'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_vowels('this is my string') == 'ts is m y st rng'\nassert     remove_vowels('hello') == 'hll'\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome takes a string and returns True if it is a palindrome and False otherwise.\n    \"\"\"\n    pass\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes string and return True if it is a palindrome and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('Python') == 'ythn'\nassert     remove_vowels('coding') == 'ding'\n\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_vowels('') == '','remove_vowels fails on an empty string'\nassert     remove_vowels('hello') == 'hll','remove_vowels fails to remove first letter'\nassert     remove_vowels('hello world') == 'hll wrld','remove_vowels fails to remove first letter'\nassert     remove_vowels('a') == '','remove_vowels fails on a word with one letter'\nassert     remove_vowels('I like cats') == 'I lk ct s','remove_vowels fails to remove letter e'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     \"this website is for losers LOL\" == remove_vowels(\"this website is for losers LOL\")\nassert     \"Ths s wesbsite i s foor losers LOL\" == remove_vowels(\"Ths s wesbsite i s foor losers LOL\")\nassert     \"hElLo WorlD\" == remove_vowels(\"hElLo WorlD\")\nassert     \"hEllo World\" == remove_vowels(\"hEllo World\")\nassert     \"hEllO World\" == remove_vowels(\"hEllO World\")\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_vowels('hi') == 'h'\nassert     remove_vowels('hAi!?') == 'h   '\nassert     remove_vowels('Why do we never see elephants hiding in trees?Trees, I always thought were evil.') == 'Why do we never see elephants hiding in trees? Trees I always thought were evil.'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_vowels(\"Hello, World!\") == \"Hllo, Wrd!\", \"remove_vowels('Hello, World!') incorrect\"\nassert     remove_vowels(\"\") == \"\", \"remove_vowels('') incorrect\"\nassert     remove_vowels(\"My name is Bond, James Bond.\") == \"M n am  Bond Js Bnd.\", \"remove_vowels('My name is Bond, James Bond.') incorrect\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_threshold([1,2,3], 1) == False, \"1 wrong\"\nassert     below_threshold([2,1,3], 1) == True, \"2 wrong\"\nassert     below_threshold([1,2,3,4,5], 1) == True, \"3 wrong\"\nassert     below_threshold([1,2,3,4,5], 4) == False, \"4 wrong\"\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_threshold([1, 2, 3], 4) == True\nassert     below_threshold([10, 20, 30], 40) == False\nassert     below_threshold([10, 20, 30], 10) == True\nassert     below_threshold([], 40) == True\nassert     below_threshold([], 10) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_threshold([1,2,3,4,5], 0)\nassert    not below_threshold([1,2,3,4,5], 1)\nassert    not below_threshold([1,2,3,4,5], 10)\nassert    not below_threshold([5,2,3,4,5], 4)\nassert    not below_threshold([5,2,3,4,5], 5)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_threshold([], 0) \nassert     below_threshold([1, 2, 3], 3) \nassert     below_threshold([1, 2, 3], 4) \nassert     not below_threshold([1, 2, 3, 4], 3)\nassert     not below_threshold([1, 2, 3, 4], 4)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef make_buckets(l: list, n: int) -> list:\n    \"\"\"Return a list of buckets of size n from list l.\n    \"\"\"\n    pass\n\ndef find_largest_bucket(b: list):\n    \"\"\"Return the index of the bucket with the largest number of entries.\n    \"\"\"\n    pass\n\ndef find_smallest_bucket(b: list):\n    \"\"\"Return the index of the bucket with the smallest number of entries.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef check_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_threshold([1, 2, 3, 4], 10) == False\nassert     below_threshold([5, 6, 7, 8], 10) == True\nassert     below_threshold([-1, -2, -3, -4], 10) == True\nassert     below_threshold([1, 2, 3, 4], 10) == False\nassert     below_threshold([0, 2, 3, 4], 10) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3, 4], 3) == True\nassert     below_threshold([1, 2, 3, 4], 2) == True\nassert     below_threshold([1, 2, 3, 4], 1) == False\nassert     below_threshold([1, 2, 3, 4], 0) == False\n\ndef perfect_shuffle(s1: str, s2: str):\n    \"\"\"Return True if both the strings can be obtained by a perfect shuffle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_threshold([0,1,2,3,4,5,6,7,8,9], 6) == True\nassert     below_threshold([0,1,2,3,4,5,6,7,8,9], 8) == False\n\ndef first_above_threshold(l: list, t: int):\n    \"\"\"Return True if the first number in list l is greater than threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_threshold([2,1,3], 2)             == True\nassert     below_threshold([2,1,3], 5)             == False\nassert     below_threshold([2,1,3], 1)             == True\nassert     below_threshold([2,1,3,4], 4)         == True\nassert     below_threshold([2,1,3,4], 1)         == False\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add(1, 2) == 3, \"add(1, 2) should be 3\"\nassert     add(1, -2) == -1, \"add(1, -2) should be -1\"\nassert     add(1.1, 2.2) == 3.3, \"add(1.1, 2.2) should be 3.3\"\n\ndef is_even(n: int):\n    \"\"\"Check if n is even\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add(10, 20) == 30\n\ndef substract(x: int, y: int):\n    \"\"\"Substract x from y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add(10, 20) == 30\n\nassert     add(10, -1) == 9\n\nassert     add(10, 0) == 10\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add(2, 3) == 5\nassert     add(2, 3) == 5\nassert     add(2, 3) == 5\nassert     add(2, 3) == 5\nassert     add(2, 3) == 5\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef add_many(*args):\n    \"\"\"Add many numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     same_chars('abc', 'ABC') == False, 'incorrect'\nassert     same_chars('abc', 'cde') == False, 'incorrect'\nassert     same_chars('abc', 'def') == True, 'incorrect'\nassert     same_chars('abc', 'ccc') == False, 'incorrect'\nassert     same_chars('abc', 'abc') == True, 'incorrect'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     same_chars(\"aabbccdd\", \"aaabbbccc\") == False, \"different characters\"\nassert     same_chars(\"abc\", \"abc\") == True, \"all characters are the same\"\nassert     same_chars(\"abc\", \"def\") == False, \"different number of characters\"\nassert     same_chars(\"abc\", \"\") == False, \"empty string\"\nassert     same_chars(\"\", \"\") == True, \"both empty\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     same_chars(\"\", \"\") == True, \"Empty strings\"\nassert     same_chars(\"a\", \"a\") == True, \"Both strings are the same\"\nassert     same_chars(\"a\", \"b\") == False, \"Different letters\"\nassert     same_chars(\"ab\", \"a\") == False, \"One of the words is a substring of the other\"\nassert     same_chars(\"abc\", \"abd\") == False, \"Different lengths\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     same_chars('kitten','sitting') == False, \"fail the test\"\nassert     same_chars('computer', 'python') == True, \"fail the test\"\nassert     same_chars('python', 'python') == True, \"fail the test\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef unique_chars(s: str):\n    \"\"\"\n    Return the number of unique characters in a given string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     same_chars(\"a\", \"a\") == True\nassert     same_chars(\"\", \"\") == True\nassert     same_chars(\"a\", \"b\") == False\nassert     same_chars(\"aa\", \"bb\") == False\nassert     same_chars(\"a\", \"aA\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     same_chars('apple', 'pineapple') == False, 'error 1'\nassert     same_chars('apple', 'apple') == True, 'error 2'\nassert     same_chars('apple', 'ape') == False, 'error 3'\nassert     same_chars('apple', 'applep') == False, 'error 4'\nassert     same_chars('apple', 'appl') == False, 'error 5'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     same_chars('apple', 'pineapple') == False,'same_chars: Wrong answer for apple, pineapple'\nassert     same_chars('apple', 'pple') == True,'same_chars: Wrong answer for apple, pple'\nassert     same_chars('pineapple', 'pineapple') == True,'same_chars: Wrong answer for pineapple, pineapple'\nassert     same_chars('apple', 'banana') == False,'same_chars: Wrong answer for apple, banana'\nassert     same_chars('apple', 'apple') == True,'same_chars: Wrong answer for apple, apple'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     same_chars('babbbba', 'bbb')\nassert not same_chars('babbbba', 'bbba')\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fib(0) == 0, \"Fib(0) should be 0\"\nassert     fib(1) == 1, \"Fib(1) should be 1\"\nassert     fib(2) == 1, \"Fib(2) should be 1\"\nassert     fib(3) == 2, \"Fib(3) should be 2\"\nassert     fib(4) == 3, \"Fib(4) should be 3\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef factorial(n: int):\n    \"\"\"Return n-th factorial number.\n    \"\"\"\n    pass\n\n\ndef _factorial(n: int):\n    \"\"\"Return n-th factorial number.\n    \"\"\"\n    pass\n\n\ndef factorial(n: int):\n    \"\"\"Return n-th factorial number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(5) == 5\nassert     fib(10) == 55\n\nprint('fib(1) == 1:', fib(1))\nprint('fib(2) == 1:', fib(2))\nprint('fib(5) == 5:', fib(5))\nprint('fib(10) == 55:', fib(10))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef main():\n    \"\"\"\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert ____ == ____, ____\n\ndef fib_seq(n):\n    \"\"\"Return sequence of Fibonacci numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<x>\") == True\nassert     correct_bracketing(\"<x>\") == True\nassert     correct_bracketing(\"<x\") == False\nassert     correct_bracketing(\"<x<>\") == False\nassert     correct_bracketing(\"<x>y>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing(brackets = \"<<>>\")\nassert not correct_bracketing(brackets = \"<<<<\")\nassert not correct_bracketing(brackets = \">>\")\n\ndef run_test_corr_bracketing(func, brackets, *args, **kwargs):\n    \"\"\" Run func(*args, **kwargs)\n    and check if the result is a correct bracketing\n    \"\"\"\n    assert func(*args, **kwargs) == correct_bracketing(brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef count_balanced_brackets(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return the number of balanced brackets.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<[<[]>)]>>\") == False\nassert     correct_bracketing(\"<[<[]>)]<>\") == False\nassert     correct_bracketing(\"<[[]>)]<>\") == False\nassert     correct_bracketing(\"<[[]>])<>\") == False\nassert     correct_bracketing(\"<[]>])<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<<>>\") == False\n\ndef is_balanced(brackets: str):\n    \"\"\" is_balanced(brackets)\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<<>>\")\nassert     correct_bracketing(\"<><><><><><><><><><>\")\nassert     not correct_bracketing(\"<><\")\nassert     not correct_bracketing(\"<<>><\")\nassert     not correct_bracketing(\"<\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing('<><><><>') == True\nassert     correct_bracketing('<><><><><>') == True\nassert     correct_bracketing('<><><>') == True\nassert     correct_bracketing('<><><><>') == True\nassert     correct_bracketing('<><><><>') == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<>[])\") == False\nassert     correct_bracketing(\"<>[][]\") == False\nassert     correct_bracketing(\"<[]\") == True\n\ndef brackets_match(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if the brackets match.\n    That is, if the following conditions hold:\n    1. Every opening bracket has a closing bracket.\n    2. The pattern \"([])\" does not appear\n    3. The first closing bracket in the pattern appears after a corresponding opening bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<hello>\") == False\nassert     correct_bracketing(\"<goodbye>\") == False\nassert     correct_bracketing(\"<[hello]\") == False\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<]>\") == False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef is_permutation(l1: list, l2: list):\n    \"\"\"Check whether two lists are permutation of each other.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef monotonic_iterative(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     monotonic([1, 2, 3, 4, 5])\nassert     not monotonic([1, 2, 3, 4, 5, 7])\nassert     not monotonic([5, 4, 3, 2, 1])\nassert     not monotonic([5, 4, 3, 2, 1, 0])\nassert     not monotonic([1, 2, 3, 4, 5, 5, 5])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1, 2, 3, 4]) == True\nassert     monotonic([1, 2, 3, 5]) == False\nassert     monotonic([1, 2, 3, 4, 5]) == True\nassert     monotonic([1, 2, 3, 5, 4]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     monotonic([])     == True\nassert     monotonic([1])     == True\nassert     monotonic([1,1])     == True\nassert     monotonic([1,1,1])     == True\nassert     monotonic([1,2])     == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     monotonic([1, 2, 3, 3, 4, 5]) == True\nassert     monotonic([1, 2, 3, 5, 4, 3]) == True\nassert     monotonic([1, 2, 3, 5, 5, 4]) == True\nassert     monotonic([1, 2, 3, 5, 4, 2]) == False\nassert     monotonic([1, 2, 3, 5, 5, 4]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) == True\nassert     monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1, 0]) == True\nassert     monotonic([]) == True\nassert     monotonic([1, 1, 1, 1, 1]) == True\nassert     monotonic([1, -1, -1, -1, -1]) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     common([], []) == []\nassert     common([1, 2], []) == []\nassert     common([], [1, 2]) == []\nassert     common([1, 2], [1, 2]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 5]) == [1, 2]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3]\nassert     common([1, 2, 3], [4, 5]) == []\nassert     common([1, 2, 3], [1, 2]) == [1, 2]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     common(list('abcd'), list('cdef')) == ['c', 'd']\nassert     common(list('abbb'), list('bbba')) == ['b']\nassert     common(list('ab'), list('b')) == []\nassert     common(list('aa'), list('a')) == ['a']\nassert     common(list('aabb'), list('abab')) == ['a', 'b']\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     common([1, 2], [1, 3]) == [1]\nassert     common([1, 2, 3], [1, 3, 5]) == [1, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 1, 1, 3, 5, 2, 1, 2, 2, 2, 2, 3, 2, 2, 3, 4], [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4]\n\ndef main():\n    # Parse input\n    n = int(input())\n    s = list(input())\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     common([1, 2, 3, 4], [1, 4, 5]) == [1, 4], 'common'\nassert     common([1, 2, 3, 4], [4, 5, 6]) == [4], 'common'\nassert     common([1, 2, 3, 4], [4, 5, 6, 7]) == [], 'common'\nassert     common([1, 2, 3, 4], [2, 4, 6, 7]) == [2, 4], 'common'\nassert     common([1, 2, 3, 4], [5, 6, 7, 8]) == [], 'common'\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(17) == 17\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(14) == 2\nassert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(2) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(19) == 19\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(23) == 23\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(2) == 2, \"Check the case n = 2\"\nassert     largest_prime_factor(3) == 3, \"Check the case n = 3\"\nassert     largest_prime_factor(6) == 3, \"Check the case n = 6\"\nassert     largest_prime_factor(9) == 3, \"Check the case n = 9\"\nassert     largest_prime_factor(20) == 19, \"Check the case n = 20\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(14) == 2\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(18) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(9) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(14) == 7\nassert largest_prime_factor(13) == 13\nassert largest_prime_factor(10) == 5\nassert largest_prime_factor(17) == 17\nassert largest_prime_factor(27) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(0) == 0\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(45) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(sum_to_n(3))\nprint(sum_to_n(1))\nprint(sum_to_n(2))\nprint(sum_to_n(100)"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nprint(sum_to_n(5))\nassert\nprint(sum_to_n(10))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1,        # 1\nassert     sum_to_n(2) == 3,        # 1 + 2\nassert     sum_to_n(3) == 6,        # 1 + 2 + 3\nassert     sum_to_n(4) == 10,        # 1 + 2 + 3 + 4\nassert     sum_to_n(5) == 15,        # 1 + 2 + 3 + 4 + 5\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef sum_to_n_test(n):\n    \"\"\"sum_to_n_test is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nassert sum_to_n(1) == 1\nassert sum_to_n(10) == 55\nassert sum_to_n(100) == 5050\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_to_n(4) == 10,'should be 10'\nassert     sum_to_n(5) == 15,'should be 15'\nassert     sum_to_n(1) == 1,'should be 1'\nassert     sum_to_n(0) == 0,'should be 0'\nassert     sum_to_n(2) == 3,'should be 3'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n: int):\n    \"\"\"is_prime(n: int) -> Boolean\n    >>> is_prime(2)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_to_n(0) == 0\nassert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing('') == True\nassert     correct_bracketing('()') == True\nassert     correct_bracketing('(()') == False\nassert     correct_bracketing('(') == False\nassert     correct_bracketing(')') == False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef remove_space(brackets: str):\n    \"\"\" remove spaces in brackets.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \ncorrect_bracketing(\"([]())()\")\nassert not correct_bracketing(\"([]))\")\nassert not correct_bracketing(\"([]))(\")\nassert not correct_bracketing(\"([])(\")\nassert not correct_bracketing(\"([)]\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef is_in(s: str, t: str):\n    \"\"\" s is a substring of t.\n    return True if s is contained in t.\n    \"\"\"\n    pass\n\ndef extract_parenthesis(s: str):\n    \"\"\" return a list of all parenthesis in order,\n    where each parenthesis is a list of all its chars and its pair.\n    \"\"\"\n    pass\n\ndef extract_parenthesis_with_substr(s: str):\n    \"\"\" return a list of all parenthesis in order,\n    where each parenthesis is a list of all its chars and its pair.\n    \"\"\"\n    pass\n\ndef replace_parenthesis(s: str, t: str):\n    \"\"\" replace all occurences of t in s with \"(t)\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing('()')\nassert     correct_bracketing('()()')\nassert     correct_bracketing('()()(()()())')\nassert     not correct_bracketing('(()')\nassert     not correct_bracketing(')()())')\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing('((((())))((()()))')\nassert     not correct_bracketing('(())((()())())')\nassert     not correct_bracketing('((())')\nassert     not correct_bracketing('((()))')\nassert     not correct_bracketing('((())')\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef split_str(string: str):\n    \"\"\"Split a string into a list of its words.\n    Note: A word is defined as a sequence of non-whitespace characters.\n    The words in the list should be sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(\") == False, 'bracket 1 is incorrect'\nassert     correct_bracketing(\"()\") == True, 'bracket 2 is incorrect'\nassert     correct_bracketing(\"()()\") == True, 'bracket 3 is incorrect'\nassert     correct_bracketing(\"(())\") == True, 'bracket 4 is incorrect'\nassert     correct_bracketing(\"((()))\") == True, 'bracket 5 is incorrect'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef add(xs: list, x: int, y: int):\n    \"\"\" xs represents coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return polynomial with its coefficient after adding the coefficient\n     of the polynomial with index x and the coefficient of the polynomial\n     with index y.\n\n     xs[0] + xs[1] * x + xs[2] * x^2 +.... + ys[0] + ys[1] * x + ys[2] * x^2 +...\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     derivative([0, 1, 0]) == [0, 1, 0]\nassert     derivative([1, 1, 1]) == [3, 2, 1]\nassert     derivative([1, 2, 3, 4, 5]) == [24, 20, 12, 8, 6]\nassert     derivative([1, 0, 1, 0]) == [2, 0, 0, 0]\nassert     derivative([1, 2, 3, 4, 5, 6]) == [120, 96, 24, 8, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     derivative([1, 2, 0, 3]) == [2, 4, 0, 6]\nassert     derivative([0, 3, 1, 2, 4]) == [3, 7, 2, 12, 24]\n\ndef derivative_of_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return the second derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [1, 1, 1] == derivative([1, 2, 3])\nassert     [0, 1, 2, 3] == derivative([1, 2, 3, 4])\nassert     [0, 1, 3, 6] == derivative([1, 2, 3, 4, 5])\nassert     [0, 2, 6, 12, 20] == derivative([1, 2, 3, 4, 5, 6])\n\ndef substitute(xs: list, a: int, b: int):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return polynomial in the same form with\n     a substituted by xs[a] and b by xs[b].\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef d2(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return second derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef find_roots(poly, xs, delta=0.1):\n    \"\"\" Find all roots of the polynomial\n    poly: coefficients of the polynomial\n    xs: range of x values\n    delta: step of root search\n    \"\"\"\n    pass\n\ndef roots_check(poly, xs):\n    \"\"\" Find all roots of the polynomial\n    poly: coefficients of the polynomial\n    xs: range of x values\n    \"\"\"\n    roots = find_roots(poly, xs)\n    print(\"The roots of the polynomial\", poly, \"are:\")\n    print(roots)\n    print(\"The function value at the roots is:\")\n    for x in roots:\n        print(eval_poly(poly, x))\n    print(\"The derivative at the roots is:\")\n    for x in roots:\n        print(eval_poly(derivative(poly), x))\n\ndef main():\n    \"\"\" Main function\n    \"\"\"\n    poly = [1, -2, 6, -4]\n    xs = [-10, 0, 3, 5, 7, 10, 12, 13]\n    roots_check(poly, xs)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef find_polynomial_roots(xs: list):\n    \"\"\" xs represents coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return a list of real-valued solutions for x.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     derivative([1, 1, 1]) == [1, 2, 3]\nassert     derivative([1, 2, 3, 4]) == [3, 4, 6, 8]\nassert     derivative([1, 0, 0, 0]) == [0, 0, 0, 0]\nassert     derivative([0, 0, 0, 0]) == [0, 0, 0, 0]\nassert     derivative([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     derivative([1, 2, 3]) == [2, 3, 6]\nassert     derivative([1, 2, 0]) == [2, 0, 0]\n\ndef find_max_derivative_position(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return index of the term which has the maximum derivative.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1\nassert fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef fibfib2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert\nassert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1\nassert fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     vowels_count(\"\") == 0, \"Empty string\"\nassert     vowels_count(\"s\") == 1, \"One char, not a word\"\nassert     vowels_count(\"f\") == 0, \"One char, not a word\"\nassert     vowels_count(\"fo\") == 1, \"One char, not a word\"\nassert     vowels_count(\"foo\") == 3, \"Three vowels, not a word\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     vowels_count('abcde') == 0\nassert     vowels_count('xyz') == 0\nassert     vowels_count('abcdea') == 1\nassert     vowels_count('xyza') == 1\nassert     vowels_count('abcdeyy') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     vowels_count(\"\") == 0, \"Empty string\"\nassert     vowels_count(\"hello\") == 2, \"Hello\"\nassert     vowels_count(\"world\") == 1, \"World\"\nassert     vowels_count(\"toto\") == 2, \"Toto\"\nassert     vowels_count(\"hollo\") == 1, \"Hollo\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     vowels_count(\"sauce\") == 3\nassert     vowels_count(\"stack\") == 3\nassert     vowels_count(\"coding\") == 4\nassert     vowels_count(\"yummy\") == 3\nassert     vowels_count(\"sauce\") == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef test_vowels_count():\n    \"\"\"Test vowels_count function.\"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import nose\n    nose.runmodule("
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     vowels_count('awesome') == 4\nassert     vowels_count('yay') == 2\nassert     vowels_count('python') == 3\nassert     vowels_count('y') == 1\nassert     vowels_count('yay') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     vowels_count(\"abracadabra\") == 5\nassert     vowels_count(\"india\") == 4\nassert     vowels_count(\"y\") == 2\nassert     vowels_count(\"\") == 0\nassert     vowels_count(\"by\") == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     vowels_count('foo')             == 3\nassert     vowels_count('dear')         == 3\nassert     vowels_count('bar')         == 0\nassert     vowels_count('abracadabra') == 7\nassert     vowels_count('This is a test.') == 5\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     vowels_count('abracadabra') == 6, 'wrong result for abracadabra'\nassert     vowels_count('lovesexy') == 4, 'wrong result for lovesexy'\nassert     vowels_count('tvuloveyoutuber') == 7, 'wrong result for tvuloveyoutuber'\nassert     vowels_count('mehiiii') == 0, 'wrong result for mehiiii'\nassert     vowels_count('is') == 2, 'wrong result for is'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     vowels_count(\"aeri\") == 1, \"Wrong result for 'aeri'\"\nassert     vowels_count(\"holly\") == 3, \"Wrong result for 'holly'\"\nassert     vowels_count(\"code\") == 2, \"Wrong result for 'code'\"\nassert     vowels_count(\"marina\") == 2, \"Wrong result for'marina'\"\nassert     vowels_count(\"yacht\") == 1, \"Wrong result for 'yacht'\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (circular_shift('12345', 1) == '54321'), 'wrong result'\nassert     (circular_shift('12345', 2) == '34512'), 'wrong result'\nassert     (circular_shift('12345', 3) == '45123'), 'wrong result'\nassert     (circular_shift('12345', 4) == '51234'), 'wrong result'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     circular_shift('1234', 1) == '2341'\nassert     circular_shift('1234', 2) == '3451'\nassert     circular_shift('1234', 3) == '4123'\nassert     circular_shift('1234', 4) == '4112'\nassert     circular_shift('1234', 5) == '1234'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     circular_shift(45, 1) == \"02469\"\nassert     circular_shift(4567, 3) == \"071\"\nassert     circular_shift(4567, 5) == \"367\"\nassert     circular_shift(4567, 6) == \"579\"\nassert     circular_shift(4567, 7) == \"974\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     circular_shift(\"4987698\", 1) == '9876749'\nassert     circular_shift(\"12345\", 2) == '23451'\nassert     circular_shift(\"1212\", 3) == '2112'\nassert     circular_shift(\"1212\", 2) == '2112'\nassert     circular_shift(\"1212\", -1) == '1221'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (circular_shift(\"1234\", 1) == \"4321\")\nassert     (circular_shift(\"1234\", 2) == \"2341\")\nassert     (circular_shift(\"1234\", 3) == \"1432\")\nassert     (circular_shift(\"1234\", 4) == \"4321\")\nassert     (circular_shift(\"1234\", 5) == \"3421\")\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef multiply(x, y):\n    \"\"\"Multiply two numbers and return the result as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     circular_shift('1234', 1) == '4321'\nassert     circular_shift('1234', 2) == '2341'\nassert     circular_shift('1234', 3) == '1432'\nassert     circular_shift('1234', 4) == '4123'\nassert     circular_shift('1234', 5) == '3412'\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     digitSum('0123456789') == 45\nassert     digitSum('abc') == 0\nassert     digitSum('ABC') == 0\nassert     digitSum('aBc123') == 0\nassert     digitSum('@#$%') == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digitSum('1234') == 12\nassert     digitSum('aDd') == 65\nassert     digitSum('a1234') == 65\nassert     digitSum('ABCD') == 32\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digitSum('BOLD') == 14\nassert     digitSum('BOB') == 48\nassert     digitSum('BOB1') == 49\nassert     digitSum('BOB_1234') == 58\nassert     digitSum('B|O|B|1|2|4|_|_') == 68\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digitSum(\"this is a test\") == 40, \"test case #1 failed\"\nassert     digitSum(\"\")             == 0, \"test case #2 failed\"\nassert     digitSum(\"test\")         == 38, \"test case #3 failed\"\nassert     digitSum(\"z123 this is a test\") == 120, \"test case #4 failed\"\nprint(\"passed unit test\")\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     digitSum('Codeforces') == 13\nassert     digitSum('1') == 1\nassert     digitSum('a') == 97\nassert     digitSum('AB') == 65\nassert     digitSum('Za') == 91\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     digitSum('H3LL0') == 7\nassert     digitSum('H3LL0P') == 12\nassert     digitSum('H3LL0P3') == 19\nassert     digitSum('H3LL0P30') == 21\nassert     digitSum('H3LL0P30B3') == 29\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digitSum(\"AAA11111\") == 11, \"Wrong answer for input \\\"AAA11111\\\"\"\nassert     digitSum(\"AAAAAAAAAAAAAAA\") == 66, \"Wrong answer for input \\\"AAAAAAAAAAAAAAA\\\"\"\nassert     digitSum(\"The quick brown fox jumps over the lazy dog.\") == 97, \"Wrong answer for input \\\"The quick brown fox jumps over the lazy dog.\\\"\"\nassert     digitSum(\"\") == 0, \"Wrong answer for input \\\"\\\"\"\nassert     digitSum(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 81, \"Wrong answer for input \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digitSum('abc') == 6, 'The sum is 6'\nassert     digitSum('abcdEf') == 28, 'The sum is 28'\nassert     digitSum('a B c d e f') == 51, 'The sum is 51'\nassert     digitSum('1A2b3c4d5e6f7g8h9') == 43, 'The sum is 43'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"5 apples and 3 oranges\", 7)     == 2\nassert     fruit_distribution(\"4 mangoes and 1 oranges\", 7)     == 1\nassert     fruit_distribution(\"2 apples, 3 oranges, 4 mangoes\", 20)     == 5\nassert     fruit_distribution(\"7 apples, 4 oranges, 2 mangoes\", 13)     == 3\nassert     fruit_distribution(\"1 apple, 2 oranges, 5 mangoes\", 20)     == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"5\",5) == 1, \"wrong result\"\nassert     fruit_distribution(\"9\",5) == 2, \"wrong result\"\nassert     fruit_distribution(\"18\",6) == 0, \"wrong result\"\nassert     fruit_distribution(\"6\",15) == 2, \"wrong result\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fruit_distribution(\"1 3 5\", \"3 2 4\") == \"Mango\"\nassert     fruit_distribution(\"2 1\", \"3 4\") == \"Orange\"\nassert     fruit_distribution(\"0\", \"1\") == \"Mango\"\nassert     fruit_distribution(\"0\", \"0\") == \"No mango"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"5 1\") == 3\nassert     fruit_distribution(\"10 4\") == 4\nassert     fruit_distribution(\"10 5\") == 5\nassert     fruit_distribution(\"6 9\") == 6\nassert     fruit_distribution(\"15 0\") == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"5, 3\", 10) == 3 \nassert     fruit_distribution(\"5, 3, 2\", 10) == 2 \nassert     fruit_distribution(\"5, 3, 2, 5, 6\", 12) == 1 \nassert     fruit_distribution(\"5, 3, 2, 5, 6, 7\", 15) == 0 \n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"orange3*2+apple*4\", 10) == \"mango\"\nassert fruit_distribution(\"apple*20+apple\", 20) == \"apple\"\nassert fruit_distribution(\"orange*3+apple*2+apple\", 20) == \"orange\"\nassert fruit_distribution(\"mango*3+apple*5+apple*3+orange*2\", 20) == \"mango\"\nassert fruit_distribution(\"apple*3+mango*2+apple*4\", 20) == \"orange\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fruit_distribution('M=1,O=1,L=2,A=2', 4) == 1, 'fruit_distribution is incorrect'\nassert     fruit_distribution('A=1,L=2,O=3', 5) == 0, 'fruit_distribution is incorrect'\nassert     fruit_distribution('M=1,O=1,L=2,A=2', 2) == 2, 'fruit_distribution is incorrect'\nprint('fruit_distribution is correct')\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"4 5 2\", 10) == 2, \"Example #1\"\nassert fruit_distribution(\"9 9 9\", 10) == 0, \"Example #2\"\nassert fruit_distribution(\"4 8 9\", 11) == 1, \"Example #3\"\nassert fruit_distribution(\"6 8 4\", 11) == 2, \"Example #4\"\nassert fruit_distribution(\"6 8 4\", 21) == 0, \"Example #5\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"1 1 1 2 2\", 5) == 2, \"More than 1 mango\"\nassert     fruit_distribution(\"1 1 1 2 2\", 5) == 0, \"Mango in the box\"\nassert     fruit_distribution(\"1 1 2 2 2\", 5) == 1, \"No mango\"\n\nprint(\"Success\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"2 apples, 1 orange, 3 mango\", 4) == 1, \"one mango\"\nassert     fruit_distribution(\"4 apples, 3 oranges\", 4) == 3, \"three oranges\"\nassert     fruit_distribution(\"3 apples, 4 oranges\", 4) == 0, \"no mango\"\nassert     fruit_distribution(\"0 apples, 1 orange\", 4) == 0, \"no mango\"\nassert     fruit_distribution(\"0 apples, 0 oranges\", 4) == 0, \"no mango\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef pluck_root(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck the root and return it.\n    The plucked root should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    If there are no even values or the given array is empty, return null.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pluck( [15, 9, 8, 17, 20, 12, 19, 11, 10, 2, 16, 6, 7, 4, 5, 13, 14, 3, 1, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pluck([1, 2, 3, 4]) == [1, 1]\nassert     pluck([2, 1, 3, 4]) == [2, 2]\nassert     pluck([1, 3, 2, 4]) == [1, 3]\nassert     pluck([3, 2, 1, 4]) == [1, 1]\nassert     pluck([4, 3, 2, 1]) == [1, 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pluck([3, 4, 2, 3, 5]) == [2, 3]\nassert     pluck([2, 4, 3, 2, 3]) == [2, 3]\nassert     pluck([3, 4, 2, 3, 5]) == [3, 4]\nassert     pluck([2, 4, 3, 2, 3]) == [2, 4]\nassert     pluck([2, 4, 3, 2, 3]) == [2, 4]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [4, 1] == pluck([(1, 0), (2, 1), (3, 0), (4, 2)])\nassert     [] == pluck([])\nassert     [1, 1] == pluck([(1, 0), (2, 2)])\nassert     [6, 3] == pluck([(6, 0), (2, 1), (3, 0)])\nassert     [8, 1] == pluck([(6, 0), (2, 2), (8, 0), (3, 2)])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pluck([2, 3, 3, 4, 6]) == [3, 1]\nassert     pluck([2, 2, 2, 2, 4]) == [2, 0]\nassert     pluck([]) == []\nassert     pluck([2, 3, 3, 4, 5, 7, 8, 9, 9, 9]) == [4, 3]\nassert     pluck([2, 2, 2, 2, 5, 5, 7, 7, 8, 9]) == [2, 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [    [3, 1],\n            [5, 1],\n            [4, 1],\n            [3, 1]\n        ] == pluck([3, 5, 4, 3])\nassert     [    [0, 0],\n            [0, 1],\n            [0, 2],\n            [0, 3],\n            [0, 4],\n            [0, 5],\n            [0, 6],\n            [0, 7],\n            [0, 8],\n            [0, 9],\n            [0, 10]\n        ] == pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nassert     [    [2, 1],\n            [5, 1],\n            [3, 1],\n            [2, 1]\n        ] == pluck([2, 5, 3, 2])\nassert     [    [2, 1],\n            [3, 1],\n            [2, 1]\n        ] == pluck([2, 3, 2])\n\ndef max_profit(arr):\n    \"\"\"\n    Given a non-empty array where each element represents the price of a stock on that particular day,\n    find the maximum profit that can be made by buying and selling stocks on that particular day.\n    The given array will contain at least one element.\n    You should use the smallest possible number of transactions possible.\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pluck([1,2,3,4,5,6,7,8,9]) == [5,1], \"pluck is incorrect for [1,2,3,4,5,6,7,8,9]\"\nassert     pluck([5,5,5,5,5,5]) == [], \"pluck is incorrect for [5,5,5,5,5,5]\"\nassert     pluck([5,6,7,8,9,10]) == [5,6], \"pluck is incorrect for [5,6,7,8,9,10]\"\nassert     pluck([0,0,0,0,0]) == [], \"pluck is incorrect for [0,0,0,0,0]\"\nassert     pluck([0]) == [0], \"pluck is incorrect for [0]\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     search([1,2,2,3,3,3,4,4,4]) == 3\nassert search([1,2,2,3,3,3,4,4,4]) == 4\nassert search([1,2,2,3,3,3,4,4,4,1,1,1]) == 1\nassert search([0]) == -1\nassert search([1,2,3,3,3,4,4]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     search([1,2,2,3,3,3,4]) == 2\nassert search([5]) == -1\nassert search([5, 5, 5, 5]) == 5\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nprint('Greatest Integer With Same Frequency:', search([1, 3, 2, 3, 3, 2, 2]))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     search([1, 2, 3, 4, 5]) == -1\nassert     search([0, 3, 5, 1, 2, 3]) == -1\nassert     search([1, 2, 3, 4, 5, 6]) == -1\nassert     search([1, 2, 3, 4, 5, 5]) == -1\nassert     search([1, 2, 3, 4, 5, 6, 5]) == 5\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    lst = [1, 2, 3, 5, 5, 4]\n    print(search(lst))\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     search([1, 2, 2, 4, 3, 3, 3, 5, 6]) == 5\nassert     search([1, 2, 3, 4, 5, 6]) == -1\nassert     search([5, 5, 5, 5, 5]) == 5\nassert     search([0, 0, 0, 1, 0]) == -1\nassert     search([5, 5, 5, 5, 5, 0]) == 0\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     strange_sort_list([3, 2, 1]) == [1, 2, 3]\nassert     strange_sort_list([3, 4, 1, 5, 2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([]) == []\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([5]) == [5]\nassert     strange_sort_list([5, 6, 7, 3, 4, 2, 1]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     strange_sort_list([1, 2, 3]) == [1, 3, 2]\nassert     strange_sort_list([3, 1, 2]) == [1, 2, 3]\nassert     strange_sort_list([1, 2, 1]) == [1, 1, 2]\nassert     strange_sort_list([3, 1, 2, 1]) == [1, 1, 2, 3]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     strange_sort_list([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([3, 5, 1, 2, 4]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(strange_sort_list([10, 3, 2, 7, 5, 3, 3, 2]))"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triangle_area(1, 2, 3) == 1.41\nassert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(1, 2, 3.1) == 1.41\nassert     triangle_area(1, 3, 2) == 1.73\nassert     triangle_area(3, 4, 1) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(10, 10, 10) == 0.14\nassert     triangle_area(10, 10, 20) == 20\nassert     triangle_area(10, 20, 10) == 20\nassert     triangle_area(10, 20, 20) == 40\nassert     triangle_area(10, 20, 30) == 40\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(3, 3, 3) == 'This is a triangle'\nassert     triangle_area(1, 2, 3) == 0\nassert     triangle_area(3, 2, 1) == 0\nassert     triangle_area(2, 3, 1) == 0\nassert     triangle_area(1, 2, 3) == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triangle_area(4,4,4) == 12.00, \"triangle_area returns wrong value\"\nassert     triangle_area(3,4,5) == 2.24, \"triangle_area returns wrong value\"\nassert     triangle_area(3,3,5) == -1, \"triangle_area returns wrong value\"\n\ndef test_triangle_area():\n    '''\n    The function tests if the function triangle_area is working properly.\n    '''\n    assert triangle_area(4,4,4) == 12.00, \"triangle_area returns wrong value\"\n    "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n\ndef test_triangle_area():\n    '''\n    Test cases for triangle_area\n    '''\n    assert triangle_area(3, 4, 5) == 6\n    assert triangle_area(7, 8, 9) == -1\n    "
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     will_it_fly([1,1,1,1,1], 1) == True\nassert     will_it_fly([1,1,1,1,1], 2) == False\nassert     will_it_fly([1,1,1,1,1,1], 4) == True\nassert     will_it_fly([], 1) == True\nassert     will_it_fly([], 2) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     will_it_fly([5,1,2,5,1,2], 10) is True\nassert     will_it_fly([5,1,2,5,1,2], 9) is False\nassert     will_it_fly([5,1,2,5,1,2], 7) is True\nassert     will_it_fly([5,1,2,5,1,2], 3) is False\nassert     will_it_fly([5,1,2,5,1,2], 6) is True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     will_it_fly([3, 1, 2, 3], 6) == False, 'Test 1 Failed'\nassert     will_it_fly([6, 1, 2, 3], 6) == False, 'Test 2 Failed'\nassert     will_it_fly([3, 2, 1, 2, 1], 4) == True, 'Test 3 Failed'\nassert     will_it_fly([3, 3, 1, 1, 2, 2], 5) == True, 'Test 4 Failed'\nassert     will_it_fly([2, 3, 1, 2, 2, 1], 5) == False, 'Test 5 Failed'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     will_it_fly([1],5) == False\nassert     will_it_fly([1,1],5) == True\nassert     will_it_fly([1,1,1,1],5) == True\nassert     will_it_fly([1,1,1,1,1,1,1,1],5) == True\nassert     will_it_fly([1,1,1,1,1,1,1,1,1,1],5) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     will_it_fly([], 0) == False, \"Should be False\"\nassert     will_it_fly([1, 2, 3], 4) == True, \"Should be True\"\nassert     will_it_fly([1, 2, 3], 6) == False, \"Should be False\"\nassert     will_it_fly([1, 2, 3], 7) == False, \"Should be False\"\nassert     will_it_fly([1, 2, 3], 100) == False, \"Should be False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     will_it_fly([1,2,3,4],6) == True, \"Test #1\"\nassert     will_it_fly([1,2,3],6) == False, \"Test #2\"\nassert     will_it_fly([5],5) == False, \"Test #3\"\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10],10) == True, \"Test #4\"\nassert     will_it_fly([],10) == False, \"Test #5\"\nprint(\"... done!\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     will_it_fly([],10) == False\nassert     will_it_fly([1],10) == True\nassert     will_it_fly([1,2],10) == True\nassert     will_it_fly([1,2,3],10) == False\nassert     will_it_fly([1,2,3,3,2,1],10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     will_it_fly([5, 6, 7, 9, 9], 10) == True\nassert     will_it_fly([6, 7, 9, 9, 9, 10], 10) == False\nassert     will_it_fly([6, 9, 9, 9, 9, 10], 10) == True\nassert     will_it_fly([6, 9, 9, 9, 9, 9], 10) == False\nassert     will_it_fly([5, 6, 7, 9, 9, 9, 9], 10) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     will_it_fly( [ 1, 2, 3, 4, 5 ], 10 ) == True, \"Wrong answer\"\nassert     will_it_fly( [1, 2, 3, 4, 5], 9) == False, \"Wrong answer\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5 ], 15) == False, \"Wrong answer\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5 ], 16) == True, \"Wrong answer\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], 16) == True, \"Wrong answer\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     smallest_change( [1, 2, 3, 4, 3, 2, 1] ) == 2, \"Should be 2\"\nassert     smallest_change( [1, 1, 3, 4, 1, 2, 3, 2, 2, 1] ) == 2, \"Should be 2\"\nassert     smallest_change( [1, 2, 3, 4, 5, 4, 3, 2, 1] ) == 2, \"Should be 2\"\nassert     smallest_change( [1, 2, 3, 4, 5, 3, 2, 1] ) == 3, \"Should be 3\"\nassert     smallest_change( [1, 2, 3, 4, 5, 6, 2, 1] ) == 2, \"Should be 2\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    smallest_change([9, 8, 7, 6, 1, 2, 3, 4, 5, 6]) == 0, \"expected 0\"\n    assert \n        smallest_change([9, 8, 7, 6, 1, 2, 3, 5, 6]) == 1, \"expected 1\"\n    assert \n        smallest_change([9, 8, 7, 6, 1, 2, 3, 4, 5, 6]) == 1, \"expected 1\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     smallest_change([1,2,3,5,6,2,1]) == 2\nassert     smallest_change([1,2,3,5,6,2,1,4,7]) == 3\nassert     smallest_change([1,2,3,5,6,2,1,4,7,1]) == 2\nassert     smallest_change([1,2,3,5,6,2,1,4,7,3]) == 2\nassert     smallest_change([1,2,3,5,6,2,1,4,7,3,2,1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     smallest_change([1, 2, 1]) == 2\nassert     smallest_change([1, 2, 3]) == 2\nassert     smallest_change([1, 2, 3, 3, 2, 2]) == 0\nassert     smallest_change([1, 2, 3, 2, 2, 3, 3, 2, 2]) == 3\nassert     smallest_change([1, 2, 3, 2, 2, 3, 3, 2, 2, 1]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5]) == 0\nassert     smallest_change([1, 2, 3, 4, 6]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     smallest_change([1,2,3,4,4,3,2,1]) == 1\nassert     smallest_change([3,1,2,4,5]) == 0\nassert     smallest_change([1,2,3,4,1]) == 0\nassert     smallest_change([1,2,3,1]) == 2\n\n\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     smallest_change([1,2,3,4,3,2,1]) == 3\nassert     smallest_change([1,4,5,4,2,1]) == 2\nassert     smallest_change([1,2,1,2,3]) == 1\nassert     smallest_change([1,2,3,2,1]) == 1\nassert     smallest_change([1,4,6,3,2,1]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     smallest_change([1, 2, 3, 4, 3, 2, 1]) == 1, \"Wrong result for [1, 2, 3, 4, 3, 2, 1]\"\nassert     smallest_change([1, 1, 2, 4, 5, 6, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 9]) == 1, \"Wrong result for [1, 1, 2, 4, 5, 6, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 9]\"\nassert     smallest_change([3, 7, 5, 3, 7]) == 0, \"Wrong result for [3, 7, 5, 3, 7]\"\nassert     smallest_change([]) == 0, \"Wrong result for []\"\n\n\ndef palindrome_index(s):\n    \"\"\"\n    Given a string, find the first index of a palindrome. The palindrome can appear in the string either\n    as a substring or as a permutation.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     total_match(['ba', 'bb', 'bc'], ['ba', 'bb']) \nassert     total_match(['ba', 'bb', 'bc'], ['a', 'b', 'c']) \nassert     total_match(['ba', 'bb', 'bc'], ['aa', 'ab', 'bb', 'bb', 'bc']) \n\ndef reverse_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    the shortest strings in the list.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     total_match(['a', 'z', 'b'], ['b', 'a', 'z']) == ['a', 'b']\nassert     total_match(['a', 'z', 'b'], ['a', 'z']) == ['a', 'z']\nassert     total_match(['a', 'z', 'b'], ['z', 'a', 'z']) == ['z', 'a', 'z']\nassert     total_match(['a', 'z', 'b'], ['z', 'a', 'b']) == ['a', 'z']\nassert     total_match(['a', 'z', 'b'], ['b', 'a', 'z', 'a']) == ['a', 'b']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     total_match(['hello', 'goodbye', 'yes', 'no'], ['yes', 'no', 'hi', 'goodbye']) == ['hello', 'goodbye']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert total_match(['hello', 'goodbye', 'yes', 'no'], ['yes', 'no', 'hi', 'goodbye']) == ['goodbye', 'yes']\nprint(\"Success\""
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     total_match([\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n                    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) ==     [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"], \"Test 1 Passed\"\nassert     total_match([\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n                    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) ==     [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"], \"Test 2 Passed\"\nassert     total_match([\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n                    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) ==     [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"], \"Test 3 Passed\"\nassert     total_match([\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"],\n                    [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]) ==     [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"], \"Test 4 Passed\"\nprint(\"All Tests Passed\""
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     total_match(['a', 'b', 'c'], ['aa', 'bb', 'cc']) == ['aa', 'bb', 'cc']\nassert     total_match(['a', 'b', 'c'], ['ab', 'ac', 'bb', 'bc']) == ['ab', 'ac', 'bb', 'bc']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c']\n\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     total_match(['a'], ['ab', 'cd']), ['a', 'ab']\nassert     total_match(['ab', 'cd'], ['a', 'b', 'c', 'd']), ['ab']\nassert     total_match(['a', 'b', 'cd'], ['ab', 'c', 'd']), ['a', 'b']\nassert     total_match(['ab', 'cd', 'efg'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']), ['ab', 'cd']\nassert     total_match(['abc', 'efg'], ['ab', 'c', 'd', 'e', 'f', 'g']), ['abc']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     total_match([\"abc\", \"efg\"], [\"abcd\", \"efgh\"]) == [\"efg\"]\nassert     total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\"]\nassert     total_match([\"abc\", \"efg\"], [\"ab\", \"ef\"]) == [\"efg\"]\nassert     total_match([\"abc\", \"efg\"], [\"ab\", \"ef\", \"abc\"]) == [\"efg\"]\nassert     total_match([\"abc\", \"efg\", \"xyz\"], [\"ab\", \"ef\", \"abc\"]) == [\"abc\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     total_match(['dog', 'cat', 'parrot'], ['cat', 'dog', 'bird']) == ['dog', 'parrot']\nassert     total_match(['dog', 'cat', 'parrot'], ['cat', 'bird', 'fish']) == ['dog']\nassert     total_match(['dog', 'cat', 'parrot'], ['bird']) == ['dog', 'cat', 'parrot']\nassert     total_match(['bird', 'fish', 'dog', 'cat'], ['bird', 'fish', 'dog', 'cat']) == ['bird', 'fish', 'dog']\nassert     total_match(['bird', 'fish', 'dog', 'cat'], ['bird', 'fish', 'dog', 'cat','mouse']) == ['bird', 'fish', 'dog', 'cat']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     total_match(['abc', 'xyz', 'pqr'], ['cde', 'fgh']) == ['abc', 'pqr'], 'Should be [\"abc\", \"pqr\"]'\nassert     total_match(['abc', 'xyz', 'pqr'], ['abc', 'fgh']) == ['abc'], 'Should be [\"abc\"]'\nassert     total_match(['abc', 'xyz', 'pqr'], ['abc', 'xyz', 'pqr']) == ['abc', 'xyz', 'pqr'], 'Should be [\"abc\", \"xyz\", \"pqr\"]'\nassert     total_match(['abc', 'xyz', 'pqr'], ['cde', 'fgh']) == ['abc', 'pqr'], 'Should be [\"abc\", \"pqr\"]'\nassert     total_match(['abc', 'xyz', 'pqr'], ['cde', 'abc', 'pqr']) == ['abc', 'pqr'], 'Should be [\"abc\", \"pqr\"]'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(1) == False, \"is_multiply_prime(1) should return False\"\nassert     is_multiply_prime(7) == False, \"is_multiply_prime(7) should return False\"\nassert     is_multiply_prime(8) == False, \"is_multiply_prime(8) should return False\"\nassert     is_multiply_prime(12) == False, \"is_multiply_prime(12) should return False\"\nassert     is_multiply_prime(60) == False, \"is_multiply_prime(60) should return False\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(9) == False\nassert     is_multiply_prime(60) == False\nassert     is_multiply_prime(73) == False\nassert     is_multiply_prime(93) == False\nassert     is_multiply_prime(23) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(3) == False\nassert     is_multiply_prime(9) == False\nassert     is_multiply_prime(15) == False\nassert     is_multiply_prime(21) == False\nassert     is_multiply_prime(27) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(6) == True, \"test 1 fail\"\nassert     is_multiply_prime(10) == False, \"test 2 fail\"\nassert     is_multiply_prime(16) == True, \"test 3 fail\"\nassert     is_multiply_prime(21) == False, \"test 4 fail\"\nassert     is_multiply_prime(81) == True, \"test 5 fail\"\nprint(\"great your solution for is_multiply_prime is correct!\""
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(30) == False\nassert     is_multiply_prime(36) == True\nassert     is_multiply_prime(45) == True\nassert     is_multiply_prime(54) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_simple_power(4,2)==True\nassert     is_simple_power(27,3)==True\nassert     is_simple_power(1,1)==True\nassert     is_simple_power(10,2)==False\nassert     is_simple_power(27,4)==False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(16, 2) == True\nassert     is_simple_power(27, 3) == True\nassert     is_simple_power(81, 3) == False\nassert     is_simple_power(0, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(16, 2) == True\nassert     is_simple_power(16, 4) == True\nassert     is_simple_power(27, 3) == False\nassert     is_simple_power(1, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(6, 2) == True\nassert     is_simple_power(5, 2) == False\n\n\ndef num_digits(n):\n    \"\"\"Write a function that returns the number of digits of a number n.\n    n is represented as a list of digits.\"\"\"\n    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(12, 2) == True\nassert     is_simple_power(15, 3) == True\nassert     is_simple_power(1, 10) == False\nassert     is_simple_power(120, 6) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_simple_power(1,1) == True\nassert     is_simple_power(1,2) == False\nassert     is_simple_power(8,2) == True\nassert     is_simple_power(32,2) == True\nassert     is_simple_power(20,4) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_simple_power(4,2) == True, \"4 is simple power of 2\"\nassert     is_simple_power(27,3) == True, \"27 is simple power of 3\"\nassert     is_simple_power(1,1) == True, \"1 is simple power of 1\"\nassert     is_simple_power(2,4) == False, \"2 is not simple power of 4\"\nassert     is_simple_power(3,9) == False, \"3 is not simple power of 9\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_simple_power(1, 1) == True, \"power of 1\"\nassert     is_simple_power(2, 1) == False, \"power of 1\"\nassert     is_simple_power(1, 2) == True, \"power of 2\"\nassert     is_simple_power(4, 2) == True, \"power of 2\"\nassert     is_simple_power(2, 4) == True, \"power of 2\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(7, 3) == True\nassert     is_simple_power(15, 15) == True\nassert     is_simple_power(2, 5) == True\nassert     is_simple_power(10, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_simple_power(1, 2) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(3, 2) == False\nassert     is_simple_power(2, 1) == True\nassert     is_simple_power(5, 2) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     iscube(2) == True\nassert     iscube(27) == True\nassert     iscube(3) == False\nassert     iscube(0) == False\nassert     iscube(1) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     iscube(1) == True\nassert     iscube(8) == True\nassert     iscube(9) == False\nassert     iscube(27) == True\nassert     iscube(125) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     iscube(27) == True, 'Should be True'\nassert     iscube(87) == False, 'Should be False'\nassert     iscube(243) == True, 'Should be True'\nassert     iscube(33) == False, 'Should be False'\nassert     iscube(0) == False, 'Should be False'\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == False\nassert     iscube(3) == False\nassert     iscube(4) == True\nassert     iscube(5) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef iscube_test(a):\n    assert iscube(a) == cube_test(a)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     iscube(6) == True\nassert     iscube(7) == False\nassert     iscube(27) == True\nassert     iscube(0) == False\nassert     iscube(36) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     iscube(8) == True, '8 should be a cube of a number'\nassert     iscube(1) == False, '1 should not be a cube of a number'\nassert     iscube(27) == False, '27 should not be a cube of a number'\nassert     iscube(9) == True, '9 should be a cube of a number'\nassert     iscube(89) == True, '89 should be a cube of a number'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     hex_key('') == 0\nassert hex_key('F') == 0\nassert hex_key('ABCD') == 0\nassert hex_key('B') == 1\nassert hex_key('F2') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     hex_key('FF') == 3, 'incorrect output'\nassert hex_key('11') == 1, 'incorrect output'\nassert hex_key('AA') == 2, 'incorrect output'\nassert hex_key('12') == 0, 'incorrect output'\nassert hex_key('B7') == 2, 'incorrect output'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     hex_key('12e13') == 4\nassert     hex_key('12a13') == 4\nassert     hex_key('12c13') == 4\nassert     hex_key('12d13') == 4\nassert     hex_key('12e13') == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     hex_key('0A') == 3\nassert     hex_key('0F') == 4\nassert     hex_key('F2') == 4\nassert     hex_key('F2F') == 6\nassert     hex_key('A') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     hex_key('FFFF') == 0, 'wrong output'\nassert     hex_key('B11C') == 6, 'wrong output'\nassert     hex_key('A1B1C1D1E1F') == 10, 'wrong output'\n\nassert     hex_key('B11') == 1, 'wrong output'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     hex_key(\"\") == 0\nassert     hex_key(\"A\") == 0\nassert     hex_key(\"ABCDEF\") == 0\nassert     hex_key(\"001234\") == 0\nassert     hex_key(\"123456\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     hex_key(\"A1F\") == 4\nassert     hex_key(\"B2F\") == 3\nassert     hex_key(\"A2F\") == 4\nassert     hex_key(\"B2F\") == 3\nassert     hex_key(\"\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     hex_key('') == [0, 0, 0, 0, 11, 13]\nassert     hex_key('01') == [1, 0, 0, 0, 11, 13]\nassert     hex_key('F') == [0, 0, 0, 0, 15, 17]\nassert     hex_key('AB') == [1, 1, 0, 0, 15, 17]\nassert     hex_key('ABCDEF') == [1, 1, 1, 1, 15, 17]\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     hex_key(\"F2\") == {'2': 1, '3': 1, '5': 1}\nassert     hex_key(\"FFFFFF\") == {'2': 6, '3': 2, '5': 1, '7': 1}\nassert     hex_key(\"\") == {}\nassert     hex_key(\"A\") == {}\nassert     hex_key(\"11\") == {'B': 1}\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     hex_key('B1') == (2, 3, 5, 7)\nassert     hex_key('D3') == (2, 3, 5, 7)\nassert     hex_key('D7') == (2, 3, 5, 7)\nassert     hex_key('D8') == (2, 3, 5, 7)\nassert     hex_key('F5') == (2, 3, 5, 7)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\nassert     decimal_to_binary(4) == 'db100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\nassert     decimal_to_binary(4) == 'db100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(10) == \"1010db\"\nassert     decimal_to_binary(0) == \"0db\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(128) == \"100101\"\nassert     decimal_to_binary(255) == \"11111111\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0db0'\nassert     decimal_to_binary(1) == '1db1'\nassert     decimal_to_binary(2) == '10db2'\nassert     decimal_to_binary(3) == '11db3'\nassert     decimal_to_binary(4) == '100db4'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0db0'\nassert     decimal_to_binary(1) == '0db1'\nassert     decimal_to_binary(3) == '0db11'\nassert     decimal_to_binary(5) == '0db101'\nassert     decimal_to_binary(9) == '0db1001'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(5) == \"101\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == '0db0'\nassert     decimal_to_binary(1) == '1db1'\nassert     decimal_to_binary(2) == '10db2'\nassert     decimal_to_binary(3) == '11db3'\nassert     decimal_to_binary(10) == '1010db10'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == \"dbdbdbdbdbdbdbdb\"\nassert     decimal_to_binary(1) == \"dbdbdbdbdbdbdbdb\"\nassert     decimal_to_binary(2) == \"dbdbdbdbdbdbdbdb\"\nassert     decimal_to_binary(3) == \"dbdbdbdbdbdbdbdb\"\nassert     decimal_to_binary(4) == \"dbdbdbdbdbdbdbdb\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(9) == \"db1010db\"\nassert     decimal_to_binary(15) == \"db1010db\"\nassert     decimal_to_binary(34) == \"db101010db\"\nassert     decimal_to_binary(54) == \"db101010db\"\nassert     decimal_to_binary(0) == \"db0db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_happy(\"d\") == False\nassert     is_happy(\"abcdefghijklmnopqrstuvwxyz\") == True\nassert     is_happy(\"abcdaefg\") == True\nassert     is_happy(\"aaa\") == True\nassert     is_happy(\"abcdefghijklmnopqrstuvwxyxzz\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_happy('x') == False, 'incorrect'\nassert     is_happy('xx') == True, 'incorrect'\nassert     is_happy('xyz') == False, 'incorrect'\nassert     is_happy('xyzab') == True, 'incorrect'\nassert     is_happy('xyzaa') == False, 'incorrect'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_happy(\"abcd\") == False, \"wrong result\"\nassert     is_happy(\"aaabbc\") == True, \"wrong result\"\nassert     is_happy(\"aabccc\") == False, \"wrong result\"\nassert     is_happy(\"aabbcc\") == True, \"wrong result\"\nassert     is_happy(\"abcdef\") == True, \"wrong result\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_happy('') == False\nassert     is_happy('abcd') == False\nassert     is_happy('abc') == False\nassert     is_happy('abcd') == False\nassert     is_happy('aabbcc') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_happy('abc') == False, 'wrong result'\nassert     is_happy('abcdef') == True, 'wrong result'\nassert     is_happy('abcdee') == False, 'wrong result'\nassert     is_happy('aa') == False, 'wrong result'\nassert     is_happy('aaa') == True, 'wrong result'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_happy(\"abc\") == False, \"Fails on happy string of length 1\"\nassert     is_happy(\"abcd\") == True, \"Fails on happy string of length 2\"\nassert     is_happy(\"abcdef\") == True, \"Fails on happy string of length 3\"\nassert     is_happy(\"abcdefgh\") == False, \"Fails on happy string of length 4\"\nassert     is_happy(\"abcdefghijklm\") == True, \"Fails on happy string of length 5\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_happy(\"abcd\") == False\nassert     is_happy(\"abcdefghijklmnopqrstuvwxyz\") == False\nassert     is_happy(\"12345678901234567890\") == False\nassert     is_happy(\"100100100100100100100100\") == True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    mem = set()\n    while len(s) >= 3:\n        substr = s[:3]\n        s = s[1:]\n        if substr in mem:\n            return False\n        mem.add(substr)\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"ab\") == False\nassert     is_happy(\"abc\") == True\nassert     is_happy(\"abcde\") == False\nassert     is_happy(\"abcccccccccde\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([2.0,2.0,1.7,1.3,1.0,0.7,0.0,0.0,0.0,0.0]) == ['B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([1.0,1.0,1.0,0.7,0.0,0.0,0.0,0.0,0.0,0.0]) == ['C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\nassert     numerical_letter_grade([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\n\nprint('numerical_letter_grade passes')\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0]) == [\"A+\"]\nassert     numerical_letter_grade([3.7]) == [\"A\"]\nassert     numerical_letter_grade([3.3]) == [\"A-\"]\nassert     numerical_letter_grade([3.0]) == [\"B+\"]\nassert     numerical_letter_grade([2.7]) == [\"B\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([1.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['D+', 'D', 'D-', 'C+', 'C', 'C-']\nassert     numerical_letter_grade([0.0, 0.0]) == ['E', 'E']\nassert     numerical_letter_grade([0.7, 0.7]) == ['C+', 'C+']\nassert     numerical_letter_grade([0.0, 0.7]) == ['D-', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0]) == ['A+']\nassert     numerical_letter_grade([3.7]) == ['A']\nassert     numerical_letter_grade([3.3]) == ['A-']\nassert     numerical_letter_grade([3.0]) == ['B+']\nassert     numerical_letter_grade([2.7]) == ['B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0]) == ['E', 'D-', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+', 'E']\n\n\ndef is_even(number):\n    \"\"\"Check if number is even or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == \\\n         ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]) == \\\n         ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]) == \\\n         ['A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]) == \\\n         ['B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+']\nassert     numerical_letter_grade([2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7]) == \\\n         ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([3.0, 4.0, 4.5, 3.8, 3.7, 3.9])         == ['B+', 'A+', 'A+', 'B+', 'B+', 'B+']\nassert     numerical_letter_grade([2.5, 2.0, 3.0, 3.3, 2.9])         == ['B-', 'C+', 'A-', 'B-', 'B-']\nassert     numerical_letter_grade([1.5, 3.1, 4.0, 3.8, 2.8])         == ['B-', 'C', 'A', 'B-', 'A-']\nassert     numerical_letter_grade([1.5, 2.5, 3.0, 3.3, 2.9])         == ['B-', 'D', 'A', 'A-', 'A-']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0])         == ['E', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0]) == 'A+'\nassert     numerical_letter_grade([3.7]) == 'A'\nassert     numerical_letter_grade([3.3]) == 'A-'\nassert     numerical_letter_grade([3.0]) == 'B+'\nassert     numerical_letter_grade([2.7]) == 'B'\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (numerical_letter_grade(4.0) == 'A+') \nassert     (numerical_letter_grade(4.0) == 'A+') \nassert     (numerical_letter_grade(4.0) == 'A+') \nassert     (numerical_letter_grade(3.7) == 'A') \nassert     (numerical_letter_grade(3.7) == 'A') \n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]) == ['B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+']\nassert     numerical_letter_grade([2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8]) == ['B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+']\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prime_length('hello') == False, \\\n        'String with length of 5 is a prime number'\nassert     prime_length('ab') == False, \\\n        'String with length of 2 is a prime number'\nassert     prime_length('a') == False, \\\n        'String with length of 1 is a prime number'\nassert     prime_length('11') == False, \\\n        'String with length of 3 is a prime number'\nassert     prime_length('101') == False, \\\n        'String with length of 4 is a prime number'\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prime_length('hello') == False, 'incorrect for string \"hello\"'\nassert     prime_length('abracadabra') == False, 'incorrect for string \"abracadabra\"'\nassert     prime_length('abracadab') == False, 'incorrect for string \"abracadab\"'\nassert     prime_length('abracadaba') == True, 'incorrect for string \"abracadaba\"'\nassert     prime_length('1234567') == False, 'incorrect for string \"1234567\"'\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prime_length(12) == False, \"12 is not prime\"\nassert     prime_length(13) == True, \"13 is prime\"\nassert     prime_length(7) == True, \"7 is prime\"\nassert     prime_length(13) == True, \"13 is prime\"\nassert     prime_length(97) == False, \"97 is not prime\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_length(\"apple\") == False\nassert     prime_length(\"pineapple\") == False\nassert     prime_length(\"\") == False\nassert     prime_length(\"1\") == False\nassert     prime_length(\"101\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef count_prime_length(string, start, end):\n    \"\"\"Write a function that takes a string and two indexes, and counts how\n    many characters in the string are prime numbers between the two indexes.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prime_length('a') == False\nassert     prime_length('ab') == False\nassert     prime_length('abc') == False\nassert     prime_length('abcd') == False\nassert     prime_length('12345') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prime_length('The correct length')\nassert     not prime_length('The correct length, but not a prime')\nassert     not prime_length('1')\nassert     prime_length('2')\nassert     prime_length('3')\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_length('23') == False\nassert     prime_length('7') == True\nassert     prime_length('36') == False\nassert     prime_length('11') == True\nassert     prime_length('100') == False\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1)     == 1\nassert     starts_one_ends(2)     == 0\nassert     starts_one_ends(3)     == 1\nassert     starts_one_ends(10)     == 1\nassert     starts_one_ends(100)     == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 3\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 9\nassert     starts_one_ends(2) == 55\nassert     starts_one_ends(3) == 165\nassert     starts_one_ends(4) == 541\nassert     starts_one_ends(5) == 12155\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 0, \\\n        'starts_one_ends(1)!= 0'\nassert     starts_one_ends(2) == 1, \\\n        'starts_one_ends(2)!= 1'\nassert     starts_one_ends(3) == 1, \\\n        'starts_one_ends(3)!= 1'\nassert     starts_one_ends(4) == 1, \\\n        'starts_one_ends(4)!= 1'\nassert     starts_one_ends(5) == 1, \\\n        'starts_one_ends(5)!= 1'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 4\nassert     starts_one_ends(3) == 9\nassert     starts_one_ends(4) == 18\nassert     starts_one_ends(5) == 24\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     starts_one_ends(4) == 0\nassert     starts_one_ends(5) == 1\nassert     starts_one_ends(6) == 1\nassert     starts_one_ends(7) == 2\nassert     starts_one_ends(8) == 3\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = int(input().strip())\n    print(starts_one_ends(n))\n\n\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 16\nassert     starts_one_ends(3) == 41\nassert     starts_one_ends(4) == 61\nassert     starts_one_ends(5) == 91\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (solve(1) == \"10\")\nassert     (solve(2) == \"11\")\nassert     (solve(3) == \"100\")\nassert     (solve(9) == \"1111\")\nassert     (solve(10) == \"1010\")\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solve(1234) == '100100101101110'\nassert     solve(12) == '1010'\nassert     solve(1) == '1'\nassert     solve(0) == '0"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solve(10) == '1010'\nassert     solve(9) == '1001'\nassert     solve(11) == '1011'\nassert     solve(12) == '1100'\nassert     solve(13) == '1101'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solve(11) == '11'\nassert     solve(10) == '1010'\nassert     solve(1) == '1'\n\nassert     solve(0) == '0'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     solve(12) == '1100'\nassert     solve(5) == '101'\nassert     solve(37) == '101101101'\nassert     solve(5) == '101'\nassert     solve(39) == '10110111110'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     solve(1) == '10'\nassert     solve(2) == '11'\nassert     solve(3) == '11010'\nassert     solve(4) == '11100'\nassert     solve(5) == '101101'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (solve(20) == '101101' and solve(30) == '111011')\nassert     (solve(100) == '1011110110111010' and solve(1000) == '1001001110111100111011110111110'\nassert     (solve(10000) == '1001001110111100111011110111110'"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add([2,3,5,7,1,9,0]) == [2,4,0,6,4,8]\nassert     add([2,1,3,4,5,6]) == [4,6,4,6,8,6]\nassert     add([1,2,3,4,5,6,7,8,9,0]) == [2,6,8,4,10,6,12,8,14,8]\nprint('add success')\n\n\ndef sub(lst):\n    \"\"\"Given a non-empty list of integers lst. return the sum of the even indices..\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add([5,4,3,2,1,7,8,9,6]) == [7,4,2,6,8,5,2,4]\nassert     add([5,4,3,2,1,7,8,9,6,10,1,2,4]) == [7,4,2,6,8,5,10,8,6,4]\nassert     add([2,5,1,4,8,9,6,7]) == [4,8,2,6,7]\nassert     add([2,5,1,4,8,9,6,7,9]) == [4,8,2,6,7,9]\nassert     add([2,5,1,4,8,9,6,7,9,1,2,4,7,6]) == [4,8,2,6,7,9,1,2,4,7,6]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add([1,1,2,3]) == None\nassert     add([1,3,5,7]) == None\nassert     add([4,5,1,2]) == None\nassert     add([1,4,3,5,7]) == None\nassert     add([1,2,3,4,5,6]) == None\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add([1,2,3,4,5,6,7]) == [2,6,4]\nassert     add([1,3,5]) == [2]\nassert     add([7, 9, 8, 4]) == [10, 6, 8]\nassert     add([2,7,5]) == [4,2,10]\nassert     add([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add([3, 2, 4, 7]) == 8\nassert     add([5, 2, 8, 2, 2, 2]) == 12\nassert     add([1, 2, 1, 2, 1, 2]) == 4\n\nprint(\"SUCCESS\""
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add([0])             == []\nassert     add([0, 1])         == [0]\nassert     add([1, 1, 2, 3, 5, 8, 13])     == [1, 2, 3, 5, 13]\nassert     add([1, 3, 5, 7, 9, 11])     == [1, 3, 5, 7, 11]\nassert     add([2, 4, 6, 8, 10, 12, 14])    == [4, 8, 12, 14]\nprint('tests passed')\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add([1,2,3,4,5,6]) == [4,6,2,4]\nassert     add([1,2,3,4,5,6,7]) == [4,6,2,4,7]\nassert     add([1,2,3,4,5,6,7,8,9]) == [4,6,2,4,8,6,4,2]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12]) == [4,6,2,4,8,6,4,2,10,6,4,2]\n\nprint(\"add tests passed\")\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add([0,1,2,3,4,5]) == 6\nassert     add([0,2,4,6,8,10]) == 20\nassert     add([0,0,0,0,0,0,0,0,0]) == 0\n\ndef test_add():\n    assert     add([0,1,2,3,4,5]) == 6\n    "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add([1,2,3,4,5]) == 8\nassert     add([1,3,5]) == 7\nassert     add([6]) == 0\n\nprint(\"add: passed test\")\n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     anti_shuffle(sentence) == \"the was hello there world there hello there hello there\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog\") == \"The tqck qiuick brwn fx jmps oveer tlz yzal\"\nassert     anti_shuffle(\"practice makes perfect\") == \"pracitce makse perfect\"\n\n\ndef anti_shuffle2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     anti_shuffle('hello world') == 'dellh worl'\nassert     anti_shuffle('the quick brown fox jumps over the lazy dog') == 'dexiqc brown ox jmps ovr dey lz th ticq'\nassert     anti_shuffle('how much wood would a wood chuck chuck if a wood chuck could chuck wood') == 'dowh muh oc kciuq echpuck wod wod wod'\nassert     anti_shuffle('how much wood would a wood chuck chuck if a wood chuck could chuck wood') == 'dowh muh oc kciuq echpuck wod wod wod'\nassert     anti_shuffle('how much wood would a wood chuck chuck if a wood chuck could chuck wood') == 'dowh muh oc kciuq echpuck wod wod wod'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     anti_shuffle('kitten purr') == 'cat purk'\nassert     anti_shuffle('Hello world') == 'Hello wld'\nassert     anti_shuffle('I say so') =='say Ies'\n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     anti_shuffle('hello world') == 'leh dlrow'\nassert     anti_shuffle('hello world!') == 'leh dlrow!'\nassert     anti_shuffle('hello world ') == 'leh dlrow '\nassert     anti_shuffle('hello   world   ') == 'leh   dlrow   '\nassert     anti_shuffle('hello world! ') == 'leh dlrow!' '\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nprint(\"All tests passed.\")"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"This is a test!\") == \"Tsi s aet!\"\nassert     anti_shuffle(\"    I  love    IceCream!\") == \"IeLv oeIv IleCream!\"\nassert     anti_shuffle(\"This is a test!\") == \"Tsi s aet!\"\nassert     anti_shuffle(\"    I  love    IceCream!\") == \"IeLv oeIv IleCream!\"\nassert     anti_shuffle(\"This is a test!\") == \"Tsi s aet!\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     anti_shuffle('hello') == 'helol'\nassert     anti_shuffle('hello world') == 'helol rldw'\nassert     anti_shuffle('123 456') == '123 456'\nassert     anti_shuffle('abc') == 'abc'\nassert     anti_shuffle('abc def') == 'abc df'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"The cat in the hat\") == \"ehtc ninht a etat\"\nassert     anti_shuffle(\"The dog in the fog\") == \"eog t dehf etnf\"\nassert     anti_shuffle(\"The sun in the sky\") == \"enist uu sn iot skyp\"\n\nprint(\"all tests passed\")"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [(0, 1), (1, 1), (1, 2)] == get_row([[1, 2], [1, 2, 1], [1, 1, 1, 2]], 1)\nassert     [(0, 0), (0, 2)] == get_row([[1, 2], [1, 2, 1]], 1)\nassert     [(0, 0), (0, 0)] == get_row([[1], [1], [1, 1]], 1)\nassert     [(0, 1), (0, 2), (1, 0)] == get_row([[1, 2], [1, 2, 1], [1, 1, 1, 2]], 1)\nassert     [(0, 1), (0, 2), (1, 2)] == get_row([[1, 2], [1, 2, 1], [1, 1, 1, 2]], 2)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_row([[1,2,3], [4,5,6]], 4) == [(0,3), (1,2)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 2) == [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9], [10,11,12]], 1) == [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2), (3,0), (3,1), (3,2)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]], 4) == [(0,3), (1,2), (2,0), (2,1), (2,2), (3,0), (3,1), (3,2), (4,0), (4,1), (4,2)]\n\ndef max_row(lst):\n    \"\"\"\n    Given a 2-dimensional list,\n    return the tuple of integer - (max row, max column)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     [(0,0), (0,1)] == get_row(\n    [[0,0], [0,1]],\n    1)\nassert     [(0,2), (0,1)] == get_row(\n    [[0,0], [0,1], [0,2]],\n    1)\nassert     [(0,2), (1,1), (2,0)] == get_row(\n    [[0,0], [0,1], [0,2]],\n    2)\nassert     [(0,0), (1,0), (1,1), (2,1)] == get_row(\n    [[0,0], [1,1], [2,1], [3,0]],\n    1)\nassert     [] == get_row(\n    [[0,0], [0,1], [0,2]],\n    3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(1, 3), (1, 2), (1, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(2, 3), (2, 2), (2, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(3, 3), (3, 2), (3, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [(4, 3), (4, 2), (4, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(5, 3), (5, 2), (5, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [(2, 4), (3, 1), (4, 1), (5, 0), (6, 1)] == get_row(lst, 5)\nassert     [(2, 3), (3, 2), (4, 2)] == get_row(lst, 4)\nassert     [(2, 0), (3, 1), (4, 1)] == get_row(lst, 3)\nassert     [(2, 1), (3, 1), (4, 1)] == get_row(lst, 2)\nassert     [(2, 0), (3, 1), (4, 1)] == get_row(lst, 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_row([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], 2) == [\n            (0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (3, 3), (3, 2), (3, 1), (3, 0)], \"Test 1\"\nassert     get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)], \"Test 2\"\nassert     get_row([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (3, 3), (3, 2), (3, 1), (3, 0)], \"Test 3\"\nassert     get_row([[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 2) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 9), (1, 8), (1, 7), (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 9), (3, 8), (3, 7), (3, 6), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, 0)], \"Test 4\"\nassert     get_row([[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 3) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 9), (1, 8), (1, 7), (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 9), (3, 8), (3, 7), (3, 6), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, "
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [(1,1), (1,2), (2,1), (2,2)] == get_row([[1,2],[1,2]],1)\nassert     [(1,2), (2,1)] == get_row([[1,2],[1,2]],2)\nassert     [(1,1), (1,2), (2,1), (2,2)] == get_row([[1,2],[1,2],[1,2],[1,2]],1)\nassert     [(1,2), (2,1)] == get_row([[1,2],[1,2],[1,2],[1,2]],2)\nassert     [(1,2), (2,1), (2,2)] == get_row([[1,2],[1,2],[1,2]],2)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef test_get_row():\n    assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0), (0, 1), (0, 2)]\n    assert get_row([[1], [2], [3]], 3) == [(1, 0), (1, 1), (1, 2)]\n    assert get_row([[1, 2, 3, 4, 5, 6, 7, 8, 9]], 4) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]\n    "
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_row([[1, 2], [3, 4], [5, 6]], 2) == \\\n        [(2, 6), (1, 4)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], 5) == \\\n        [(0, 5), (0, 6), (1, 4)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], 0) == \\\n        [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2], [3, 4]], 1) == \\\n        [(1, 2), (1, 3)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], 7) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_row([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]], 1) == [(0, 4), (0, 3), (0, 2), (0, 1)]\nassert     get_row([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]], 4) == [(0, 1), (0, 2), (0, 3), (0, 4)]\nassert     get_row([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]], 2) == [(0, 2), (0, 3), (0, 4), (1, 3)]\nassert     get_row([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]], 0) == [(1, 1), (1, 2), (1, 3), (1, 4)]\nassert     get_row([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]], 0) == [(1, 1), (1, 2), (1, 3), (1, 4)]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (sorted(sort_array([5, 3, 2, 8, 1, 4])) == [1, 2, 3, 4, 5, 8])\nassert     (sorted(sort_array([5, 3, 1, 8, 0])) == [0, 1, 3, 5, 8])\nassert     (sorted(sort_array([5, 3, 2, 8, 1, 4, 3, 2, 1])) == [1, 2, 2, 3, 3, 3, 4, 5, 8])\nassert     (sorted(sort_array([0, 0, 0, 0, 0, 0, 0, 0, 0])) == [0, 0, 0, 0, 0, 0, 0, 0, 0])\nassert     (sorted(sort_array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_array( [1, 4, 3, 2] ) == [1, 2, 3, 4]\nassert     sort_array( [1, 3, 2, 4] ) == [1, 2, 3, 4]\nassert     sort_array( [1, 3, 2, 5] ) == [1, 2, 3, 5]\nassert     sort_array( [1, 3, 5, 2, 4] ) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]\nassert     sort_array([5, 3, 1, 2, 8, 1]) == [1, 1, 2, 3, 5, 8]\nassert     sort_array([1, 1, 2, 3, 3, 3, 4, 5]) == [1, 1, 2, 3, 3, 3, 3, 4]\nassert     sort_array([5, 2, 3, 1, 2, 1, 1]) == [1, 1, 1, 2, 2, 2, 3]\nassert     sort_array([5, 2, 3, 1, 2, 1, 1, 4]) == [1, 1, 1, 2, 2, 2, 3, 5]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([2, 3, 5, 6, 1, 9]) == [1, 2, 3, 5, 6, 9]\nassert     sort_array([2, 4, 6, 8, 10, 12, 1]) == [1, 2, 4, 6, 8, 10, 12]\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([4, 2, 1, 2, 3]) == [1, 2, 2, 3, 4]\nassert     sort_array([4, 2, 1, 5, 3]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_array([3, 2, 1]) == [1, 2, 3], 'incorrect'\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9, 2, 4, 6, 8], 'incorrect'\nassert     sort_array([4, 6, 2, 8, 5, 9, 3, 7]) == [2, 3, 4, 5, 6, 7, 8, 9], 'incorrect'\nassert     sort_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]) == [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], 'incorrect'\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_array([5,3,2,8,1,4]) == [1,2,3,4,5,8]\nassert     sort_array([5,3,1,8,0]) == [1,3,5,8,0]\nassert     sort_array([1,0,1]) == [0,1,1]\nassert     sort_array([1,1,1,0,0]) == [0,0,1,1,1]\nassert     sort_array([2,3,5,6,9]) == [2,3,5,6,9]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8], \"incorrect sort_array\"\nassert     sort_array([5, 3, 1, 8, 0]) == [8, 5, 3, 1, 0], \"incorrect sort_array\"\nassert     sort_array([]) == [], \"incorrect sort_array\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 3, 5, 2, 8, 4]\nassert     sort_array([5, 3, 1, 8, 0]) == [1, 3, 5, 8, 0]\nassert     sort_array([]) == []\nassert     sort_array([5, 3, 2, 8, 1, 4, 3, 5, 6]) == [3, 5, 5, 3, 2, 6, 8, 1, 4]\nassert     sort_array([5, 3, 2, 8, 1, 4, 3, 5, 6, 9]) == [3, 5, 5, 3, 2, 6, 8, 1, 4, 9]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_array( [2, 3, 5, 6, 1, 12])     == [2, 3, 5, 6, 1, 12], \"Already sorted array, nothing to do\"\nassert     sort_array( [2, 4, 6, 8, 10, 3])     == [2, 4, 6, 8, 10, 3], \"Not sorted array, you should sort it\"\nassert     sort_array( [2, 8, 1, 6, 10, 5])     == [2, 8, 1, 6, 10, 5], \"Already sorted, but reverse, so should sort in reverse\"\nassert     sort_array( [2, 5, 8, 9, 4, 5])     == [2, 5, 8, 9, 4, 5], \"Already sorted, but reverse, so should sort in reverse\"\nassert     sort_array( [4, 7, 9, 8, 3, 4, 5]) == [3, 4, 4, 7, 8, 9, 5], \"Already sorted, but reverse, so should sort in reverse\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     encrypt(\"hello\") == \"ifmmp\"\nassert     encrypt(\"world\") == \"kdlrow\"\nassert     encrypt(\"\") == \"\"\nassert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"z\") == \"a\"\nprint(\"Passed\")\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encrypt('a') == 'h'\nassert     encrypt('n') == 'o'\nassert     encrypt('z') == 'a'\nassert     encrypt('d') == 'c'\nassert     encrypt('g') == 'f'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encrypt('hello') == 'olleh'\nassert     encrypt('xyz') == 'yzx'\nassert     encrypt('zebra') == 'ysaebr'\nassert     encrypt('a') == 'd'\nassert     encrypt('abc') == 'cba'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encrypt('bravo') == 'boqr'\nassert     encrypt('charlie') == 'ikmn'\nassert     encrypt('delta') == 'opqr'\nassert     encrypt('echo') == 'uzwx'\nassert     encrypt('foxtrot') == 'jyvw'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encrypt('hello') == 'olleh', 'error'\nassert     encrypt('z') =='m', 'error'\nassert     encrypt('h') == 'i', 'error'\nassert     encrypt('a') == 'c', 'error'\nassert     encrypt('j') == 'f', 'error'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     encrypt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ADGJMPSVYBFHCZKYXW\"\nassert     encrypt(\"abcdefghijklmnopqrstuvwxyz\") == \"nopqrstuvwxyzabcdefghijklm\"\nassert     encrypt(\"The quick brown fox jumps over the lazy dog\") == \"Qebu ibht gniz kciuqebwud\"\nassert     encrypt(\"Is it true that 42 is my favorite number?\") == \"Mif ttseh is4 bni favo4rati?\"\nassert     encrypt(\"The quick brown fox jumps over the lazy dog\") == \"Qebu ibht gniz kciuqebwud\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (encrypt(\"hello\") == \"ifmmp\")\nassert     (encrypt(\"python\") == \"zvzz\")\nassert     (encrypt(\"coding\") == \"kcdlb\")\nassert     (encrypt(\"computer\") == \"vqjmpt\")\nassert     (encrypt(\"mathematics\") == \"mzzwq\")\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encrypt('c') == 'b'\nassert     encrypt('e') == 'f'\nassert     encrypt('z') == 'a'\nassert     encrypt('z') == 'a'\nassert     encrypt('p') == 'q'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     encrypt(\"hello\") == \"ifmmp\"\nassert     encrypt(\"\") == \"\"\nassert     encrypt(\"G\") == \"L\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner reversable by the encrypt \n    function.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     next_smallest([3, 6, 1, 2]) == 1\nassert     next_smallest([1, 2, 3, 4]) == None\nassert     next_smallest([7, 8, 9, 10]) == 7\nassert     next_smallest([7, 8, 10, 11]) == 8\nassert     next_smallest([9, 10, 11, 12]) == 9\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([2, 3, 4, 5]) == None\nassert     next_smallest([2, 3, 5, 4, 1]) == 4\nassert     next_smallest([4, 5, 3, 2, 1]) == 4\nassert     next_smallest([5, 4, 3, 2, 1]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef solution(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function solution(lst) that returns the 2nd smallest element of the list.\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (next_smallest([1, 2, 3, 4, 5]) == 3)\nassert     (next_smallest([3, 4, 5, 1, 2]) == 3)\nassert     (next_smallest([3, 4, 5, 6, 7]) == None)\nassert     (next_smallest([3, 4, -1, 1, 2]) == 1)\nassert     (next_smallest([-1, -2, -3, -4, -5]) == None)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == 1\nassert     next_smallest([3, 5, 5, 3]) == 3\nassert     next_smallest([1]) == None\nassert     next_smallest([1, 1, 1, 1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     next_smallest([1,2,3]) == 2\nassert     next_smallest([5,2,3]) == 5\nassert     next_smallest([5,3,2]) == 3\nassert     next_smallest([5,2,3,4]) == 3\nassert     next_smallest([1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     next_smallest([2, 4, 5, 8, 2, 7]) == 2\nassert     next_smallest([2, 4, 5, 8, 2, 7, 3]) == 3\nassert     next_smallest([2, 4, 5, 8, 2, 7, 0]) == 0\nassert     next_smallest([2, 4, 5, 8, 2, 7, -1]) == -1\nassert     next_smallest([2, 4, 5, 8, 2, 7, -2]) == -2\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 3, 2, 1, 4]) == 1\nassert     next_smallest([2, 2, 1, 3, 4, 5]) == 1\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert next_smallest([5, 4, 3, 2, 1]) == None\nassert next_smallest([3, 3, 3, 3, 3]) == None\nassert next_smallest([3, 5, 3, 3, 3]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_bored(\"I am bored. I am very bored. So, I go play\") == 2\nassert     is_bored(\"I am not bored. I am very very bored. So, I go play\") == 1\nassert     is_bored(\"I am not bored. I am not very bored. So, I go play\") == 0\n\nassert     is_bored(\"I am not bored. I am very not bored. So, I go play\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_bored(\"I do not like you\") == 1\nassert     is_bored(\"I do not like you. What is wrong with you?\") == 2\nassert     is_bored(\"I am not bored. I like to play sports.\") == 0\nassert     is_bored(\"I am not bored. I like to play sports. What about you?\") == 0\nassert     is_bored(\"I am not bored. I like to play sports. What about you? I do not like you.\") == 2\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_bored(\"I feel happy\") == True, \"False\"\nassert     is_bored(\"I am not feeling happy\") == True, \"False\"\nassert     is_bored(\"This is my best friend and he is playing\") == False, \"False\"\nassert     is_bored(\"I am not feeling sad\") == False, \"False\"\nassert     is_bored(\"I am not feeling sad\") == False, \"False\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_bored('I like bananas!') == 0\nassert     is_bored('He is bored!') == 0\nassert     is_bored('He is not bored!') == 1\nassert     is_bored('I am not bored!') == 1\nassert     is_bored('I am a happy man, why am I boring?') == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_bored(\"I love you. You love me. We love each other.\") == 1\nassert     is_bored(\"I love you.\") == 0\nassert     is_bored(\"I love you. I love you. I love you. I love you.\") == 4\nassert     is_bored(\"I love you. I love you. I love you. I love you. I love you.\") == 0\nassert     is_bored(\"I love you. I love you. I love you. I love you. I love you. I love you.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_bored(\"I know some of you were bored today\") == True, \"Wrong\"\nassert     is_bored(\"I know some of you were boring today\") == False, \"Wrong\"\nassert     is_bored(\"Are you bored? No, I'm just doing my things\") == False, \"Wrong\"\nassert     is_bored(\"I know some of you were boring today. I'm not bored though.\") == False, \"Wrong\"\nassert     is_bored(\"Are you bored? I'm not bored today, I'm just doing my things\") == False, \"Wrong\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_bored(\"I am doing fine. What about you?\") == 1\nassert     is_bored(\"I am not bored. I am doing fine.\") == 0\nassert     is_bored(\"Why is it that I am not bored? I am not doing a chore.\") == 0\nassert     is_bored(\"Do you feel bored?\") == 0\nassert     is_bored(\"What is the problem?\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_bored(\"I am good. Thanks\") == 0\nassert     is_bored(\"I am good. You? Thanks\") == 1\nassert     is_bored(\"I am good! You? Thanks\") == 1\nassert     is_bored(\"I am good? You? Thanks\") == 1\nassert     is_bored(\"I am good! You?. Thanks\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_bored('I am not bored. I do not care!')\nassert     not is_bored('I am not boring. I am not bored.')\nassert     not is_bored('I am not bored. I am not bored.')\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     any_int(1,2,3) == False, 'False'\nassert     any_int(1,3,2) == False, 'False'\nassert     any_int(3,2,1) == False, 'False'\nassert     any_int(3,3,2) == True, 'True'\nassert     any_int(1.5,1.5,3) == True, 'True'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     any_int(1,2,3) == True, \"Wrong any_int result!\"\nassert     any_int(3,4,5) == False, \"Wrong any_int result!\"\nassert     any_int(1,2,3.5) == False, \"Wrong any_int result!\"\nassert     any_int(1,2,1.5) == False, \"Wrong any_int result!\"\nassert     any_int(1,2,3) == True, \"Wrong any_int result!\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == False, \"1\"\nassert     any_int(1, 2, 2) == False, \"2\"\nassert     any_int(3, 4, 5) == False, \"3\"\nassert     any_int(3, 3, 6) == False, \"4\"\nassert     any_int(1, 3, 4) == True, \"5\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     any_int(1, 3, 1) == False, \"Wrong output\"\nassert     any_int(1, 3, 4) == True, \"Wrong output\"\nassert     any_int(1, 3, 4) == False, \"Wrong output\"\nassert     any_int(1, 3, 4) == False, \"Wrong output\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     any_int(1,2,3) == False\nassert     any_int(1,1,2) == True\nassert     any_int(0,0,3) == True\nassert     any_int(1.5,1.5,3) == False\nassert     any_int(1,1.5,3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 4) == False\nassert     any_int(1, 3, 3) == True\nassert     any_int(1.2, 1.3, 1.3) == True\nassert     any_int(3, 4, 7) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     any_int(1, 3, 1) == True, \"Wrong output\"\nassert     any_int(3, 1, 1) == True, \"Wrong output\"\nassert     any_int(3, 1, 2) == True, \"Wrong output\"\nassert     any_int(3, 2, 1) == True, \"Wrong output\"\nassert     any_int(3, 2, 2) == True, \"Wrong output\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     any_int(1,2,3) == False\nassert     any_int(1,2,4) == False\nassert     any_int(1,2,5) == False\nassert     any_int(3,2,1) == False\nassert     any_int(3,2,3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 3) == False, \"Fails 1\"\nassert     any_int(1, 2, 2) == False, \"Fails 2\"\nassert     any_int(1, 2, 4) == True, \"Fails 3\"\nassert     any_int(1.1, 1.1, 3) == False, \"Fails 4\"\nassert     any_int(1.1, 2.2, 3.3) == True, \"Fails 5\"\nprint(\"Correctness check is good!\")\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     \"Yeh!\" == encode(\"aeiou\")\nassert     \"Ooh!\" == encode(\"OOOO\")\nassert     \"MiMi\" == encode(\"iIiI\")\nassert     \"Riiix\" == encode(\"Xiiix\")\nassert     \"Binh\" == encode(\"NINH\")\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encode('HELP ME!') == 'hELLP me!'\nassert     encode('PROGRAMMING IS FUN!') == 'pROGRAMMING iS fUnn!'\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message that has been encoded with\n    encode. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encode(\"hello\") == \"HoELlo\"\nassert     encode(\"world\") == \"WoRLd\"\nassert     encode(\"HOW ARE YOU\") == \"HWO wREE Uo\"\n\nprint(\"all tests passed\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encode(\"The quick brown fox jumped over the lazy dog.\") == \"THQUEIKCBRWKFZRNOSJJEDMPRTVLB\"\nassert     encode(\"the quick brown fox jumped over the lazy dog.\") == \"THQUEIKCBRWKFZRNOSJJEDMPRTVLB\"\nassert     encode(\"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.\") == \"THQUEIKCBRWKFZRNOSJJEDMPRTVLB\"\nassert     encode(\"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.\") == \"THQUEIKCBRWKFZRNOSJJEDMPRTVLB\"\nassert     encode(\"A quick brown fox jumped over the lazy dog.\") == \"AQUEIKCBRWKFZRNOSJJEDMPRTVLB\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     \"SINCE\" == encode(\"since\")\nassert     \"nose\" == encode(\"SINCE\")\nassert     \"SINCE\" == encode(\"sINCE\")\nassert     \"mAnD\" == encode(\"mAnD\")\nassert     \"pRiN\" == encode(\"PriN\")\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef test_encode_success():\n    \"\"\"\n    Check that the encode() function does what we expect it to \n    (I.e. it returns a message that has been encoded)\n    \"\"\"\n    message = \"I am a little tea pot\"\n    expected = \"I aM a lIvE tIvEpOt\"\n    actual = encode(message)\n    assert expected == actual\n\ndef test_encode_fails_on_empty_string():\n    \"\"\"\n    Check that the encode() function fails in the expected way when\n    trying to encode an empty string.\n    \"\"\"\n    message = \"\"\n    expected = \"The message is empty.\"\n    actual = encode(message)\n    assert expected == actual\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encode(\"HELLO\") == \"hEllO\"\nassert     encode(\"Hello World\") == \"hELLO wORLd\"\nassert     encode(\"Ace Aces\") == \"aCE aces\"\nassert     encode(\"ACe aCe\") == \"aCe aCe\"\nassert     encode(\"ACe aCe\") == \"aCe aCe\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     encode(\"banana\") == \"ananaB\"\nassert     encode(\"cat\") == \"tcaC\"\nassert     encode(\"dog\") == \"dgOd\"\nassert     encode(\"orange\") == \"orAnge\"\nassert     encode(\"india\") == \"iNdiIA\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint('all tests have passed'"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef another_prime(num):\n    \"\"\"You need to check if the input is a prime number or not.\n    Return True if it is a prime number or False if not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     skjkasdkd([11, 25, 38, 55, 61]) == [5, 2, 9, 6, 4]\nassert     skjkasdkd([23, 14, 34, 21, 60]) == [5, 2, 3, 7, 5]\nassert     skjkasdkd([20, 1, 23, 25, 17]) == [5, 3, 2, 2, 2]\nassert     skjkasdkd([11, 27, 23, 1, 8, 47, 31]) == [5, 3, 7, 2, 1, 1, 2]\nassert     skjkasdkd([29, 49, 38, 39, 29, 59, 72]) == [7, 3, 2, 7, 2, 2, 5]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     skjkasdkd([21, 43, 32, 32, 55, 66, 43, 46, 32, 43]) == 32\n\ndef largest_prime_sum(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     skjkasdkd([1, 2, 3, 5]) == 5\nassert     skjkasdkd([1, 2, 3, 4, 5]) == 5\nassert     skjkasdkd([2, 3, 4, 5]) == 5\nassert     skjkasdkd([5, 3, 4, 2]) == 5\nassert     skjkasdkd([7, 8, 9, 0]) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import time\n    print(\"All the tests passed!\")\n    t0 = time.clock()\n    print(skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    t1 = time.clock()\n    print(\"time: %f\" % (t1 - t0)"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6]) == 12\nassert     skjkasdkd([12, 11, 13, 13, 15]) == 21\nassert     skjkasdkd([7, 5, 3, 1, 2, 4, 6, 15]) == 15\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 19\nassert     skjkasdkd([12, 11, 13, 13, 15, 16, 17, 18, 19]) == 25\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     skjkasdkd([1,2,3]) == 5\nassert     skjkasdkd([5,3,1]) == 8\nassert     skjkasdkd([11,13,15]) == 9\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False, 'empty dict'\nassert check_dict_case({'A': 1, 'a': 2, 'B': 3}) == True, 'lower case'\nassert check_dict_case({'A': 1, 'a': 2, 'B': 3}) == True, 'upper case'\nassert check_dict_case({'A': 1, 'a': 2, 'B': 3, 'b': 4}) == False,'mixed case'\nassert check_dict_case({'A': 1, 'a': 2, 'B': 3, 'b': 4, 'c': 5, 'C': 6}) == False,'many keys'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False, \"All keys are not in lower case\"\nassert     check_dict_case({\"A\": 1, \"B\": 2, \"c\": 3}) == False, \"All keys are not in lower case\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"C\": 3}) == True, \"All keys are not in lower case\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == False, \"Test 1 Failed\"\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'E': 5}) == False, \"Test 2 Failed\"\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == False, \"Test 3 Failed\"\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}) == True, \"Test 4 Failed\"\nassert     check_dict_case({}) == False, \"Test 5 Failed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_dict_case({'a':1, 'b':2}) == True\nassert     check_dict_case({'a':1, 'b':2, 'A':3}) == True\nassert     check_dict_case({'a':1, 'b':2, 'A':3, 'a':4}) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case({1:1, 2:2}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_dict_case({'a':1, 'b':2, 'c':3}) == True\nassert     check_dict_case({'a':1, 'b':2, 'C':3}) == False\nassert     check_dict_case({'a':1, 'b':2, 'c':3.0}) == False\nassert     check_dict_case({}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, \"Wrong result\"\nassert     check_dict_case({\"a\": 1}) == False, \"Wrong result\"\nassert     check_dict_case({\"a\": 1, \"b\": 1}) == False, \"Wrong result\"\nassert     check_dict_case({\"A\": 1, \"B\": 1}) == False, \"Wrong result\"\nassert     check_dict_case({\"a\": 1, \"b\": 1, \"c\": 1}) == False, \"Wrong result\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_dict_case({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}) == True\nassert     check_dict_case({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}) == False\nassert     check_dict_case({}) == False\n\n\n\ndef add_dicts(dict1, dict2):\n    \"\"\"\n    Given two dictionaries, return a dictionary that contains all the key-value \n    pairs which are the keys in at least one of the dictionaries. The value in \n    this new dictionary should be the sum of the values in the two given dictionaries \n    if the key appears in both dictionaries. If the key does not appear in one \n    or both dictionaries, then the value should be None.\n    \n    Sample Input:\n    dict1 = {1: 1, 2: 2, 3: 3}\n    dict2 = {2: 3, 4: 4, 5: 5}\n    \n    Sample Output:\n    {1: 1, 2: 3, 3: 3, 4: None, 5: None}\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == True\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}) == True\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'Z': 6}) == False\nassert     check_dict_case({}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True\nassert     check_dict_case({'A': 1, 'B': 2, 'c': 3}) == True\nassert     check_dict_case({'a': 1, 'B': 2, 'c': 3}) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1, 'B': 2, 'c': 3}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_dict_case({\"a\": \"A\"}) == True, \"All keys are strings in upper case\"\nassert     check_dict_case({\"a\": \"A\", 2: \"B\"}) == False, \"The key 2 is not a string\"\nassert     check_dict_case({\"A\": \"A\"}) == True, \"All keys are strings in upper case\"\nassert     check_dict_case({\"A\": \"A\", 2: \"B\"}) == False, \"The key 2 is not a string\"\nassert     check_dict_case({\"a\": \"A\", \"b\": \"B\"}) == True, \"Key is in lower case\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_up_to(3) == [2,3]\nassert count_up_to(4) == [2,3]\nassert     count_up_to(5) == [2,3]\nassert count_up_to(15) == [2,3,5,7,11,13]\nassert count_up_to(30) == [2,3,5,7,11,13,17,19,23,29]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(15) == [2, 3, 5, 7, 11]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13]\nassert     count_up_to(25) == [2, 3, 5, 7, 11, 13, 17]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_up_to(5) == [2,3,5,7,11]\nassert     count_up_to(15) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\nassert     count_up_to(100) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\nassert     count_up_to(5000) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\nassert     count_up_to(0) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(15) == [2, 3, 5, 7, 11, 13]\nassert count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(2) == [2]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef test_count_up_to():\n    \"\"\"Test for count_up_to\"\"\"\n    #test the first case\n    #n is not positive\n    assert count_up_to(-1) == []\n    #n = 1\n    assert count_up_to(1) == []\n    #n = 2\n    assert count_up_to(2) == [2]\n    #n = 3\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_up_to(3) == [2]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    pass\n\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_up_to(0) == [0]\nassert     count_up_to(3) == [0,1,2]\nassert     count_up_to(8) == [0,1,2,3,5,7]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     multiply(21, 11) == 2\nassert     multiply(5, 6) == 1\nassert     multiply(5, 0) == 0\nassert     multiply(12, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     multiply(12, 5) == 6\nassert     multiply(13, 4) == 6\nassert     multiply(12, 9) == 6\nassert     multiply(15, 10) == 5\nassert     multiply(15, 15) == 15\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     multiply(12, 15) == 2\nassert     multiply(12, 15) == 2\nassert     multiply(12, 15) == 2\nassert     multiply(12, 15) == 2\nassert     multiply(12, 15) == 2\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (multiply(5, 8) == 1), \"Wrong result\"\nassert     (multiply(12, 10) == 2), \"Wrong result\"\nassert     (multiply(17, 12) == 2), \"Wrong result\"\nassert     (multiply(10, 2) == 5), \"Wrong result\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     multiply(12, 18) == 2\nassert     multiply(12, 11) == 2\nassert     multiply(12, 12) == 3\nassert     multiply(12, 2) == 6\nassert     multiply(12, 21) == 3\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (multiply(5, 3) == 1)\nassert     (multiply(5, 5) == 1)\nassert     (multiply(5, 6) == 2)\nassert     (multiply(9, 4) == 2)\nassert     (multiply(9, 9) == 1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     multiply(25, 20) == 5\nassert     multiply(125, 250) == 5\nassert     multiply(10, 5) == 2\nassert     multiply(10, 20) == 20\nassert     multiply(1, 1) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     multiply(45, 32) == 4\nassert     multiply(3, 9) == 3\nassert     multiply(57, 10) == 7\nassert     multiply(9, 4) == 3\nassert     multiply(8, 5) == 8\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(multiply(2, 3))\n\n    # given two valid inputs, multiply them\n    print(multiply(2, 3))"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     multiply(12, 57) == 2\nassert     multiply(12, 30) == 3\nassert     multiply(2, 8) == 1\nassert     multiply(1, 0) == 0\nassert     multiply(1, 9) == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_upper('This is a sentence.') == 4\nassert     count_upper('ABaCcDDeEfF') == 6\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_upper(\"I have a lovely pair of tennis shoes.\") == 4\nassert     count_upper(\"ThIs iS iN tYPeOf uNdErFeR tExT enShOeS.\") == 0\nassert     count_upper(\"i ntYpeOf uNdErFeR tExT enShOeS.\") == 6\n\n\ndef count_upper_3(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices starting at 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_upper('abc') == 0\nassert count_upper('ABC') == 0\nassert count_upper('aBc') == 1\nassert count_upper('AbC') == 1\nassert count_upper('ABc') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_upper(\"abcde\")         == 0, \"Wrong result\"\nassert     count_upper(\"aBCDe\")         == 1, \"Wrong result\"\nassert     count_upper(\"aBcDe\")         == 0, \"Wrong result\"\nassert     count_upper(\"ABcDe\")         == 1, \"Wrong result\"\nassert     count_upper(\"AbcDe\")         == 1, \"Wrong result\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef calculate_sum(a, b):\n    \"\"\"\n    Calculate the sum of two numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('abcde') == 0\nassert     count_upper('abcdef') == 0\nassert     count_upper('abcDEGH') == 3\nassert     count_upper('AbcDEFgh') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_upper(\"mom\") == 1\nassert     count_upper(\"\") == 0\nassert     count_upper(\"me\") == 2\nassert     count_upper(\"HoWdY\") == 2\nassert     count_upper(\"HOWdy\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_upper(\"abcd\") == 0\nassert     count_upper(\"abCd\") == 0\nassert     count_upper(\"aBcD\") == 0\nassert     count_upper(\"ABcD\") == 0\nassert     count_upper(\"Abcd\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 0\nassert     count_upper('A') == 1\nassert     count_upper('AA') == 2\nassert     count_upper('aA') == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     closest_integer(14) == 14\nassert closest_integer(-14) == -14\nassert closest_integer(14.3) == 14\nassert closest_integer(-14.3) == -15\nassert closest_integer(14.5) == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     closest_integer(\"1.4\") == 1\nassert     closest_integer(\"-1.4\") == -2\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"0.4\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     closest_integer(14.5) == 15\nassert closest_integer(13.5) == 13\nassert     closest_integer(1.4) == 1\nassert closest_integer(-14.5) == -15\nassert closest_integer(-1.4) == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     closest_integer(\"7.5\") == 8\nassert     closest_integer(\"0.5\") == 0\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.45\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.532\") == 15\nassert     closest_integer(\"14.53214\") == 15\nassert     closest_integer(\"14.5321415\") == 15\nassert     closest_integer(\"14.5321415.5\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\ndef end_other(s1, s2):\n    '''\n    Create a function that takes two strings and returns either\n    True or False depending on whether the second string can be\n    formed by concatenating the first string at its end.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"14.5\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 3]\nassert     make_a_pile(3) == [1, 3, 5]\nassert     make_a_pile(4) == [1, 3, 5, 7]\nassert     make_a_pile(5) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1], \"1-stone pile has only 1 stone\"\nassert     make_a_pile(2) == [1, 3], \"2-stone pile has 1 stone and 3 stones\"\nassert     make_a_pile(3) == [1, 3, 5], \"3-stone pile has 1 stone and 3 stones\"\nassert     make_a_pile(4) == [1, 3, 5, 7], \"4-stone pile has 1 stone and 3 stones\"\nassert     make_a_pile(5) == [1, 3, 5, 7, 9], \"5-stone pile has 1 stone and 3 stones\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 3, 1]\nassert     make_a_pile(4) == [4, 6, 4, 1]\nassert     make_a_pile(5) == [5, 10, 5, 3, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 3]\nassert     make_a_pile(3) == [1, 3, 5]\nassert     make_a_pile(4) == [1, 3, 5, 7]\nassert     make_a_pile(5) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef sum_of_digit_factorials(n):\n    \"\"\"\n    Return the sum of the digits in the factorial of n,\n    where n is between 1 and 10**6\n    \"\"\"\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_a_pile(5) == [5, 3, 2, 1, 1]\nassert     make_a_pile(13) == [13, 9, 6, 4, 2, 2]\nassert     make_a_pile(2) == [2, 1, 1]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(0) == []\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 2]\nassert     make_a_pile(3) == [1, 3, 3]\nassert     make_a_pile(4) == [1, 2, 2, 4]\nassert     make_a_pile(5) == [1, 3, 2, 2, 4, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     make_a_pile(2) == [2,1]\nassert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(4) == [4,3,2,1]\nassert     make_a_pile(5) == [5,4,3,2,1]\nassert     make_a_pile(6) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_string(\"This is a sentence\") == \\\n        [\"This\", \"is\", \"a\", \"sentence\"], \"One test failed.\"\nassert     words_string(\"This  is  a sentence\") == \\\n        [\"This\", \"is\", \"a\", \"sentence\"], \"One test failed.\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     \"This,is,a,test\".split(',') == ['This', 'is', 'a', 'test']\nassert     \"This, is, a, test\".split(',') == ['This','', 'is','', 'a','', 'test']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_string(\"this,is,a,test,of,words\") == [\"this\", \"is\", \"a\", \"test\", \"of\", \"words\"]\nassert     words_string(\"through,the,light,you,can,see\") == [\"through\", \"the\", \"light\", \"you\", \"can\", \"see\"]\nassert     words_string(\"and,in,one,of,these,you,will,need,to,go,through,and,go,through,again\") == [\"and\", \"in\", \"one\", \"of\", \"these\", \"you\", \"will\", \"need\", \"to\", \"go\", \"through\", \"and\", \"go\", \"through\", \"again\"]\nassert     words_string(\"testing, is,good,testing,too\") == [\"testing\", \"is\", \"good\", \"testing\", \"too\"]\nassert     words_string(\"\") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     ('hey, how are you?' ==         \n        words_string(\"hey, how are you?\")\n    ), \"not working for empty string\"\n\nassert     (['how', 'are', 'you'] == \n        words_string(\"how are you\")\n    ), \"not working for one word string\"\n\nassert     (['how', 'are', 'you'] == \n        words_string(\"how are you?\")\n    ), \"not working for one word string\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nprint(words_string(\"This here's some text with a lot of words in it\")) # => ['This', \"here's\", \"some\", \"text\", \"with\", \"a\", \"lot\", \"of\", \"words\", \"in\", \"it\"]\nassert \nprint(words_string(\"\")) # => []\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     type(words_string('Hello World, this is a test')) == list\nassert     words_string('Hello World, this is a test').count(',') == 0\nassert     words_string('Hello World, this is a test').count(' ') == 1\nassert     len(words_string('Hello World, this is a test')) == 6\nassert     words_string('Hello World, this is a test').split().count('Hello') == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_string('Hello,World,Goodbye,and,I,am,done') == \\\n        ['Hello', 'World', 'Goodbye', 'and', 'I', 'am', 'done']\n\nassert     words_string('Hello,World,Goodbye,and,I,am,done') == \\\n        ['Hello', 'World', 'Goodbye', 'and', 'I', 'am', 'done']\n\nassert     words_string('Hello,World,Goodbye,and,I,am,done,and,I,am,done') == \\\n        ['Hello', 'World', 'Goodbye', 'and', 'I', 'am', 'done', 'and', 'I', 'am', 'done']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_string('') == []\nassert     words_string('hello, world, python') == ['hello', 'world', 'python']\nassert     words_string('hello,  world, python') == ['hello', 'world', 'python']\nassert     words_string('hello,; world, python') == ['hello', 'world', 'python']\nassert     words_string('hello,; world,; python') == ['hello', 'world', 'python']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_string('asdf, fjdk, afed,  foo,bar') == ['asdf', 'fjdk', 'afed', 'foo', 'bar'], words_string('asdf, fjdk, afed,  foo,bar')\nassert     words_string('asdf,,foo, bar') == ['asdf', 'foo', 'bar'], words_string('asdf,,foo, bar')\nassert     words_string('asdf,,foo,, bar') == ['asdf', 'foo', 'bar'], words_string('asdf,,foo,, bar')\nassert     words_string('asdf, fjdk, afed,  foo,bar ') == ['asdf', 'fjdk', 'afed', 'foo', 'bar'], words_string('asdf, fjdk, afed,  foo,bar ')\nassert     words_string('asdf, fjdk, afed,  foo,bar,asdf') == ['asdf', 'fjdk', 'afed', 'foo', 'bar', 'asdf'], words_string('asdf, fjdk, afed,  foo,bar,asdf')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_string(\"I,am,a,test,t,est\") == ['I', 'am', 'a', 'test', 't', 'est']\nassert     words_string(\"I,am,a,test,t,est, what's\") == ['I', 'am', 'a', 'test', 't', 'est', 'what', \"'s\"]\nassert     words_string(\"I,am,a,test,t,est, what,are,you\") == ['I', 'am', 'a', 'test', 't', 'est', 'what', 'are', 'you']\nassert     words_string(\"what,is,the,best,thing,ever\") == ['what', 'is', 'the', 'best', 'thing', 'ever']\nassert     words_string(\"like,I,love,smoke,puffs\") == ['like', 'I', 'love','smoke', 'puffs']\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     choose_num(1, 5) == 4, \"Test 1 failed\"\nassert     choose_num(5, 1) == -1, \"Test 2 failed\"\nassert     choose_num(5, 5) == -1, \"Test 3 failed\"\nassert     choose_num(3, 20) == 16, \"Test 4 failed\"\nprint(\"choose_num tests passed.\""
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     choose_num(1, 7) == 8, \\\n        'choose_num(1, 7) is incorrect'\nassert     choose_num(6, 8) == -1, \\\n        'choose_num(6, 8) is incorrect'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     choose_num(10, 20) == -1\nassert     choose_num(1, 10) == -1\nassert     choose_num(10, 12) == 10\nassert     choose_num(2, 2) == 2\nassert     choose_num(0, 2) == 0\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     choose_num(10, 20) == -1\nassert     choose_num(1, 100) == 50\nassert     choose_num(100, 200) == 150\nassert     choose_num(100, 200) == 150\nassert     choose_num(100, 110) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     choose_num(2, 10) == 8\nassert choose_num(0, 10) == -1\nassert choose_num(1, 1) == -1\nassert choose_num(10, 1) == -1\nassert choose_num(1, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     choose_num(10, 20) == 18, \"Wrong answer for choose_num(10, 20)\"\nassert     choose_num(20, 10) == -1, \"Wrong answer for choose_num(20, 10)\"\nassert     choose_num(20, 40) == 32, \"Wrong answer for choose_num(20, 40)\"\nassert     choose_num(40, 20) == -1, \"Wrong answer for choose_num(40, 20)\"\nassert     choose_num(20, 20) == 20, \"Wrong answer for choose_num(20, 20)\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     choose_num(4, 10) == -1, \"wrong\"\nassert     choose_num(0, 10) == 8, \"wrong\"\nassert     choose_num(20, 30) == -1, \"wrong\"\nassert     choose_num(10, 10) == 10, \"wrong\"\nassert     choose_num(10, 20) == 12, \"wrong\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     choose_num(0, 3) == 2\nassert     choose_num(2, 4) == -1\nassert     choose_num(5, 6) == -1\nassert     choose_num(20, 21) == 20\nassert     choose_num(21, 20) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     choose_num(1, 100) == 2\nassert choose_num(100, 100) == -1\nassert choose_num(3, 100) == -1\nassert choose_num(0, 100) == -1\nassert choose_num(100, 101) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rounded_avg(1,2) == 0b1100, rounded_avg(1,2)\nassert     rounded_avg(10,20) == 0b11010, rounded_avg(10,20)\nassert     rounded_avg(10,25) == 0b11110, rounded_avg(10,25)\nassert     rounded_avg(1,25) == 0b111111, rounded_avg(1,25)\nassert     rounded_avg(1,25) == 0b111111, rounded_avg(1,25)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\n\n\n\ndef not_string(str):\n    \"\"\"\n    >>> not_string('aa')\n    True\n    >>> not_string('not not')\n    True\n    >>> not_string('aa bb')\n    False\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nrounded_avg(5, 10) == 7.0, 'Test #1'\nassert \nrounded_avg(10, 20) == 15.0, 'Test #2'\nassert \nrounded_avg(50, 100) == 50.0, 'Test #3'\nassert \nrounded_avg(100, 200) == 150.0, 'Test #4'\nassert \nrounded_avg(1000, 100000) == 4950.0, 'Test #5'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rounded_avg(1, 10) == '1111101'\nassert     rounded_avg(1, 20) == '111110111111011110'\nassert     rounded_avg(1, 1000) == '1111101111110111101110111111110111101111'\nassert     rounded_avg(2, 10) == '11101'\nassert     rounded_avg(10, 20) == '1110111101111011111111110111110'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rounded_avg(2, 5) == 2.8\nassert     rounded_avg(20, 24) == 23.0\nassert     rounded_avg(5, 5) == 5.0\nassert     rounded_avg(5, 20) == -1\n\n\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rounded_avg(1, 10) == 0b1100\nassert     rounded_avg(5, 8) == 0b11\nassert     rounded_avg(8, 3) == 0b11\nassert     rounded_avg(5, 4) == 0b1100\nassert     rounded_avg(0, 10) == 0b11010\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rounded_avg(0, 10) == 0\nassert     rounded_avg(0, 20) == 1\nassert     rounded_avg(5, 20) == 1\nassert     rounded_avg(10, 20) == 0\nassert     rounded_avg(15, 20) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rounded_avg(1, 1) == '0.5'\nassert     rounded_avg(1, 2) == '0.5'\nassert     rounded_avg(3, 4) == '1'\nassert     rounded_avg(3, 6) == '0.6'\nassert     rounded_avg(10, 15) == '-1'\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    x = [1, 2, 3, 4, 5, 6, 7]\n    print(\"Input: \", x)\n    print(\"Output: \", unique_digits(x))"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 4, 5, 7, 9], \"Test 1 Failed\"\nassert     unique_digits([12, 345, 1, 89, 11, 88, 32, 5]) == [1, 3, 5, 7, 11, 32], \"Test 2 Failed\"\nassert     unique_digits([1, 11, 3, 10, 5, 12, 7, 5, 12]) == [1, 3, 5, 7, 11], \"Test 3 Failed\"\n\nprint(\"All tests passed\")"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique_digits([34, 23, 44, 1]) == [1, 23, 34]\nassert     unique_digits([6, 34, 24, 4]) == [4, 6, 24]\nassert     unique_digits([2, 4, 5, 5]) == [2, 4, 5]\nassert     unique_digits([2, 2, 4, 5]) == [2, 4, 5]\nassert     unique_digits([2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique_digits([1, 2, 3, 5, 6, 7, 9, 12]) == [1, 3, 5, 7, 9, 12]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [1, 2, 3, 5, 6, 7, 8, 9, 0]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 6, 7, 8, 9, 10]\nassert unique_digits([0, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 2, 3, 5, 6, 7, 8, 9, 10]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20]) == [1, 2, 3, 5, 6, 7, 8, 9, 10, 20]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 3, 4, 5, 7, 8]\nassert     unique_digits([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [2, 3, 4, 5, 6, 7, 8, 9, 11]\nassert     unique_digits([11, 12, 13, 14, 15]) == [11, 12, 13, 14, 15]\n\nassert     unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique_digits([23, 42, 25, 74]) == [23, 42, 25, 74]\nassert     unique_digits([15, 36, 75, 19]) == [15, 19]\nassert     unique_digits([1, 43, 8, 9, 22, 3]) == [1, 43, 9, 22]\nassert     unique_digits([1, 24, 27, 35, 31]) == [1, 27, 31]\nassert     unique_digits([1, 25, 31, 2, 35, 34, 36]) == [1, 25, 31, 2, 34]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef prime_factorization(n):\n    \"\"\"Given an integer n, return the list of prime factors.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nby_length([2, 4, 6, 8, 1, 3, 5, 7, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     by_length(arr1) == ['One', 'Three', 'Five', 'Seven', 'Seven', 'Two', 'Six', 'One', 'One']\nassert     by_length(arr2) == ['Eight', 'Five', 'Two', 'Six', 'Seven', 'One', 'Three', 'Four', 'Nine']\nassert     by_length(arr3) == ['Nine', 'Four', 'One', 'Two', 'Six', 'Three', 'Five', 'Seven', 'Eight']\n\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\n\n\nif __name__ == '__main__':\n    test_by_length()"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     by_length([7, 5, 2, 9, 4, 8, 6, 3, 1]) == \\\n          \"One Two Three Four Five Six Seven Eight Nine\"\nassert     by_length([3, 7, 2, 9, 4, 8, 6, 3, 1]) == \\\n          \"Three Seven Two Nine Four Eight Six Three One\"\nassert     by_length([4, 9, 2, 3, 6, 5, 7, 8, 1]) == \\\n          \"Four Nine Two Three Six Five Seven Eight One\"\nassert     by_length([4, 8, 2, 6, 9, 3, 7, 1, 5]) == \\\n          \"Four Eight Two Three Six Nine Seven One Two\"\nassert     by_length([3, 8, 2, 9, 4, 7, 6, 5, 1]) == \\\n          \"Three Eight Two Nine Four Seven Six Three One\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1, 4, 5, 2, 3] == by_length([\"9\", \"8\", \"4\", \"5\", \"3\"])\nassert     [1, 5, 2, 3, 4] == by_length([\"9\", \"5\", \"4\", \"2\", \"3\"])\nassert     [1, 2, 4, 3, 5] == by_length([\"9\", \"2\", \"5\", \"4\", \"3\"])\nassert     [1, 2, 3, 4, 5] == by_length([\"9\", \"2\", \"3\", \"4\", \"5\"])\n\nprint(\"by_length is correct.\")\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [1,2,3,4] == by_length([1,2,3,4])\nassert     ['Nine', 'Six', 'Seven', 'Eight'] == by_length([9,6,7,8])\nassert     ['Four', 'Five', 'Two', 'Three'] == by_length([4,5,2,3])\nassert     ['One', 'Nine', 'Seven', 'Six'] == by_length([1,9,7,6])\n\nprint('done')"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two']\nassert     by_length([5, 6, 7, 8, 9, 1, 2, 3, 4]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two']\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 1]\nassert     f(4) == [1, 2, 3, 4]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     f(2) == [2, 6] \nassert     f(3) == [3, 2, 6] \nassert     f(4) == [4, 6, 2, 6] \nassert     f(5) == [5, 5, 2, 6]\nassert     f(10) == [10, 2, 6, 24, 120, 720, 120, 24, 6, 2]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     f(5) == [1, 1, 2, 6, 24]\nassert     f(3) == [1, 1, 2]\nassert     f(7) == [1, 1, 2, 6, 24, 210, 1680]\nassert     f(6) == [1, 1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(4) == (2, 2)\nassert     even_odd_palindrome(5) == (2, 3)\nassert     even_odd_palindrome(6) == (2, 4)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (even_odd_palindrome(1) == (1, 0))\nassert     (even_odd_palindrome(2) == (1, 1))\nassert     (even_odd_palindrome(3) == (1, 0))\nassert     (even_odd_palindrome(4) == (2, 2))\nassert     (even_odd_palindrome(5) == (1, 2))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef even_odd_palindrome_solution(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(11))\n    print(even_odd_palindrome_solution(11))"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [(1, 0), (2, 1), (6, 1), (9, 0), (15, 2)] == even_odd_palindrome(15)\n\nprint(\"All Tests Passed!\")"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(10) == (4, 5)\nassert     even_odd_palindrome(100) == (16, 17)\nassert     even_odd_palindrome(1000) == (256, 257)\nassert     even_odd_palindrome(10000) == (8624, 8653)\nassert     even_odd_palindrome(100000) == (126482, 126483)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert even_odd_palindrome(10) == (1, 1)\nassert even_odd_palindrome(11) == (1, 1)\nassert even_odd_palindrome(12) == (2, 1)\nassert even_odd_palindrome(13) == (2, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_nums([]) == 0, \"a\"\nassert     count_nums([5, 9, -5]) == 2, \"b\"\nassert     count_nums([5, -9, -5]) == 3, \"c\"\nassert     count_nums([-5, 5, -9, 5]) == 3, \"d\"\nassert     count_nums([-5, 9, -5, 6]) == 1, \"e\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_nums([]) == 0, \"Empty array\"\nassert     count_nums([-1, 2, 3]) == 1, \"One number in array\"\nassert     count_nums([-1, -2, -3]) == 1, \"Negative number\"\nassert     count_nums([-1, 2, 3, -4]) == 2, \"Two negative numbers\"\nassert     count_nums([-1, -2, -3, -4, -5]) == 5, \"All negative numbers\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [-23, 1234, -1, 12]\n    expected = 3\n    assert count_nums(arr) == expected\n\n    arr = [-12, -23, 123, -1, 12]\n    expected = 4\n    assert count_nums(arr) == expected\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_nums([12, -7, -6, -14, 15]) == 3\nassert     count_nums([12, 14, -95, -96]) == 0\nassert     count_nums([-1, -2, -3, -12]) == 4\nassert     count_nums([0, 0, 0, 0]) == 1\nassert     count_nums([1, 2, 3]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_nums([-1, 2, 3, -4, 5]) == 3, 'case1'\nassert     count_nums([1, -2, 3, -4, 5]) == 2, 'case2'\nassert     count_nums([1, -2, 3, -4, -5]) == 2, 'case3'\nassert     count_nums([1, -2, 3, -4, -5, 6]) == 1, 'case4'\nassert     count_nums([-1, -2, 3, -4, 5]) == 0, 'case5'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_nums([-1,-2,-3,0,1,2,3]) == 5\nassert     count_nums([1,-1,0,-1,1,1]) == 4\nassert     count_nums([1,2,3]) == 0\nassert     count_nums([-1,0,1,1,1]) == 1\nassert     count_nums([-1,0,1,1,1]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_nums([123, -123, -456, 789, -101, -14, -9, -19]) == 4\nassert     count_nums([5, 8, 10]) == 0\nassert     count_nums([-1, -2, -3, -4, -5]) == 5\nassert     count_nums([0, 0, 0]) == 0\n\n\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_nums([1,2,3,-1]) == 2, \"input: [1,2,3,-1]\"\nassert     count_nums([1,2,3,-1,1]) == 4, \"input: [1,2,3,-1,1]\"\nassert     count_nums([-1,0,-2,0,0]) == 1, \"input: [-1,0,-2,0,0]\"\nassert     count_nums([1,2,3,-1,0]) == 3, \"input: [1,2,3,-1,0]\"\nassert     count_nums([1,2,3,1,1]) == 3, \"input: [1,2,3,1,1]\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_nums([1, 2, 3, 4, 5]) == 0\nassert     count_nums([-5, -3, -2, 7, -5]) == 1\nassert     count_nums([1, 2, 3, -4, 5]) == 1\nassert     count_nums([-1, 2, 3, 4, -5]) == 2\nassert     count_nums([1, 2, 3, 4, -5]) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    move_one_ball([4, 5, 2, 1, 3]) == True\nassert \n    move_one_ball([5, 4, 3, 2, 1]) == False\nassert \n    move_one_ball([1, 2, 3, 4, 5]) == True\nassert \n    move_one_ball([1]) == True\nassert \n    move_one_ball([]) == True"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     move_one_ball([1,2,3]) == True\nassert     move_one_ball([1,2,3,4,5,6]) == True\nassert     move_one_ball([5,4,3,2,1]) == True\nassert     move_one_ball([5,4,3,2,1,6]) == True\nassert     move_one_ball([1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     move_one_ball([8, 7, 6, 5, 4, 3, 2, 1]) == False\nassert     move_one_ball([8, 7, 6, 5, 4, 3, 2, 1, 1]) == True\nassert     move_one_ball([]) == True\n\ndef move_one_ball_ex(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     move_one_ball([1, 2, 3, 4]) == False\nassert     move_one_ball([4, 3, 2, 1]) == True\nassert     move_one_ball([5, 4, 3, 2, 1]) == True\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) is True\nassert     move_one_ball([3, 4, 5, 6, 2, 8, 9, 1, 7]) is True\nassert     move_one_ball([5, 4, 3, 2, 1, 6, 8, 9, 7]) is False\nassert     move_one_ball([4, 3, 2, 1, 6, 5, 9, 7, 8]) is False\nassert     move_one_ball([]) is True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     move_one_ball([2, 3, 2, 1]) == True, \"Wrong answer\"\nassert     move_one_ball([2, 2, 2, 2, 2, 2]) == True, \"Wrong answer\"\nassert     move_one_ball([3, 2, 2, 2, 2, 2]) == False, \"Wrong answer\"\nassert     move_one_ball([]) == True, \"Wrong answer\"\nassert     move_one_ball([1, 3, 3, 3]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     exchange([1, 4, 3], [5, 7, 2]) == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 6]) == \"YES\"\nassert     exchange([5, 7, 2], [1, 4, 3]) == \"YES\"\nassert     exchange([5, 7, 3], [1, 4, 2]) == \"NO\"\nassert     exchange([2, 4, 3], [1, 5, 6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     exchange([], [1, 2, 3, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6], [1, 3, 5, 2, 4, 6]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6], [1, 5, 2, 3, 4, 6]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6], [1, 5, 3, 2, 4, 6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     exchange([2, 3, 4, 5, 6], [5, 6, 2, 4, 1]) == \"YES\"\nassert     exchange([2, 3, 4, 5, 6], [5, 6, 2, 4, 2]) == \"YES\"\nassert     exchange([2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == \"NO\"\nassert     exchange([1], [1]) == \"YES\"\nassert     exchange([], []) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     exchange([], []) == \"YES\"\nassert     exchange([1], [2]) == \"NO\"\nassert     exchange([1, 2], [2, 3]) == \"NO\"\nassert     exchange([2, 4], [2, 3]) == \"YES\"\nassert     exchange([2, 4, 6], [2, 3, 5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     exchange([5, 3, 1], [2, 1]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [3, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     exchange([], []) == \"YES\"\nassert     exchange([1, 2], [3, 4]) == \"NO\"\nassert     exchange([2], [1, 3, 5]) == \"YES\"\nassert     exchange([1], [1, 3, 5]) == \"NO\"\nassert     exchange([1, 3, 5], [2, 4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     exchange([1], [3, 6]) == \"YES\"\nassert     exchange([1, 3, 6], [5, 2, 8]) == \"NO\"\nassert     exchange([2, 4], [2, 4]) == \"YES\"\nassert     exchange([4, 4], [1, 5, 8]) == \"NO\"\nassert     exchange([4, 4], [5, 5, 6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\", \"wrong answer for list [1, 2, 3, 4]\"\nassert     exchange([2, 4, 6], [1, 2, 3, 4]) == \"YES\", \"wrong answer for list [1, 2, 3, 4]\"\nassert     exchange([1, 3, 5], [1, 2, 3, 4]) == \"NO\", \"wrong answer for list [1, 3, 5]\"\nassert     exchange([2, 3, 4, 6, 8, 10], [1, 3, 5, 7, 9]) == \"NO\", \"wrong answer for list [1, 3, 5, 7, 9]\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]) == \"NO\", \"wrong answer for list [1, 2, 3, 4, 5]\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     exchange([4, 3, 2, 6], [4, 3, 6, 2]) == \"YES\"\nassert     exchange([4, 3, 2, 5], [4, 3, 6, 2]) == \"NO\"\nassert     exchange([4, 3, 6, 2], [4, 3, 2, 6]) == \"YES\"\nassert     exchange([4, 5, 2, 6], [4, 3, 2, 6]) == \"NO\"\nassert     exchange([4, 3, 6, 2], [4, 6, 2, 3]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     histogram(\"a b b b c a a a b b b a\") == {'a': 7, 'b': 5, 'c': 1}, \\\n        \"Your histogram did not return the correct value for the given input\"\nassert     histogram(\"abcde\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}, \\\n        \"Your histogram did not return the correct value for the given input\"\nassert     histogram(\"a\") == {'a': 1}, \\\n        \"Your histogram did not return the correct value for the given input\"\nassert     histogram(\"\") == {}, \\\n        \"Your histogram did not return the correct value for the given input\"\nprint(\"Exercise 1 is correct.\")\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Read the input\n    input_str = input()\n\n    # Print output\n    histogram = histogram(input_str)\n    for key, value in histogram.items():\n        print(f'{key}: {value}', end ='')\n    print()"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     histogram(\"hello\") == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\nassert     histogram(\"hhllo\") == {\"h\": 2, \"e\": 1, \"l\": 3, \"o\": 2}\nassert     histogram(\"zodiac\") == {\"z\": 1, \"o\": 1, \"d\": 1, \"i\": 1, \"a\": 1, \"c\": 1}\nassert     histogram(\"pneumonoultramicroscopicsilicovolcanoconiosis\") == {\n        \"p\": 1, \"l\": 2, \"u\": 2, \"m\": 1, \"o\": 2, \"n\": 2, \"s\": 2, \"i\": 3, \"v\": 1,\n        \"o\": 2, \"r\": 1, \"a\": 1, \"l\": 1, \"c\": 1, \"o\": 1, \"n\": 1\n    }\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nassert histogram(\"abcc\") == {'a': 2, 'b': 1, 'c': 1}\nassert histogram(\"abcd\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert histogram(\"abbbc\") == {'a': 2, 'b': 2, 'c': 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1} == histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\nassert     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1} == histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a\")\nassert     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1} == histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a a a a\")\nassert     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1} == histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c a a b c\")\nassert     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1} == histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c c c\")\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     histogram(\"bob\") == {'b':1}\nassert     histogram(\"abobob\") == {'b':3}\nassert     histogram(\"abcabd\") == {'a':1,'c':2,'b':2,'d':1}\nassert     histogram(\"abccdeefghi\") == {'a':1,'b':2,'c':2,'d':3,'e':3,'f':3,'g':3,'h':2,'i':1}\nassert     histogram(\"abcdefghi\") == {'a':1,'b':1,'c':1,'d':1,'e':1,'f':1,'g':1,'h':1,'i':1}\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     reverse_delete('abcd', 'ab') == ('cd', True)\nassert     reverse_delete('abcd', 'bc') == ('d', True)\nassert     reverse_delete('abcd', 'c') == ('abcd', False)\n\nprint('all tests have passed')"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     reverse_delete('abdcdf', 'dc') == ('abd', True), \"First\"\nassert     reverse_delete('aabcdec', 'cd') == ('abacde', True), \"Second\"\nassert     reverse_delete('a', 'ab') == ('', False), \"Third\"\nassert     reverse_delete('', 'ab') == ('', False), \"Forth\"\nassert     reverse_delete('abc', 'c') == ('ab', True), \"Fifth\"\nprint('All tests passed!'"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     reverse_delete('abdbc','dbc')==('abd',True)\nassert     reverse_delete('abc','bc')==('abc',True)\nassert     reverse_delete('abdc','bc')==('abdc',True)\nassert     reverse_delete('abdbc','abc')==('abdbc',True)\nassert     reverse_delete('abdbc','d')==('abdbc',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     reverse_delete('chocolate', 'x') == ('choloat', True)\nassert     reverse_delete('chocolate', 't') == ('chocola', False)\nassert     reverse_delete('hello', 'a') == ('ello', False)\nassert     reverse_delete('world', 'world') == ('', True)\n\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"abcdefg\", \"\") == (\"abcdefg\", True)\nassert     reverse_delete(\"abcbdefg\", \"b\") == (\"abdefg\", True)\nassert     reverse_delete(\"abcbdefg\", \"efg\") == (\"abcdefg\", False)\nassert     reverse_delete(\"abcdefg\", \"cdefg\") == (\"abdefg\", True)\nassert     reverse_delete(\"abcdefg\", \"defg\") == (\"abfeg\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"abdc\",\"ab\") == (\"dc\", False)\nassert     reverse_delete(\"abdca\",\"ab\") == (\"dca\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     reverse_delete('a', 'a') == ('a', True)\nassert     reverse_delete('hello', 'l') == ('helo', False)\nassert     reverse_delete('hello', 'h') == ('ello', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"abcbdde\",\"d\") == (\"bacb\", True), \"Test 1\"\nassert     reverse_delete(\"abcbdde\",\"b\") == (\"acbd\", True), \"Test 2\"\nassert     reverse_delete(\"abcbdde\",\"c\") == (\"abcbdde\", True), \"Test 3\"\nassert     reverse_delete(\"abcbdde\",\"e\") == (\"abcbdd\", False), \"Test 4\"\nassert     reverse_delete(\"abcbdde\",\"a\") == (\"cbdde\", False), \"Test 5\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     reverse_delete('abbcdefg', 'b') == ('abcdefg', True)\nassert     reverse_delete('abbcdefg', 'h') == ('abbcdefg', True)\nassert     reverse_delete('abbcdefg', 'c') == ('abbdefg', True)\nassert     reverse_delete('abbcdefg', 'd') == ('abfg', True)\nassert     reverse_delete('abbcdefg', 'g') == ('abfcdef', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     reverse_delete('baba','ab') == ('ba',True)\nassert     reverse_delete('asdfhjvfyuytrewq','s') == ('',True)\nassert     reverse_delete('asdfhjvfyuytrewq','q') == ('asdfhjvfyuytrew',True)\nassert     reverse_delete('asdfhjvfyuytrewq','u') == ('asdfhjvfyytrew',True)\nassert     reverse_delete('asdfhjvfyuytrewq','t') == ('asdfhjvfyyrewq',True)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     odd_count([\"940919\", \"162735\", \"0159\", \"45897\", \"112253\"]) == [6, 2, 1, 3, 2]\nassert     odd_count([\"940919\", \"162735\", \"0159\", \"45897\", \"112253\", \"676893\"]) == [6, 2, 1, 3, 2, 2]\nassert     odd_count([\"940919\", \"162735\", \"0159\", \"45897\", \"112253\", \"676893\", \"111213\"]) == [6, 2, 1, 3, 2, 2, 3]\n\nprint('all tests passed'"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     odd_count(['2312', '3030', '3838']) == [2, 0, 3]\nassert     odd_count(['11', '13', '17', '19', '23']) == [0, 0, 0, 2, 2]\nassert     odd_count(['111', '121', '311', '122', '131', '231']) == [1, 2, 0, 1, 0, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     odd_count([\"66\",\"8\",\"569\",\"123\"]) == [3, 3, 3, 1]\nassert     odd_count([\"0\",\"8\",\"569\",\"0\"]) == [0, 3, 3, 1]\nassert     odd_count([\"1\",\"2\",\"3\",\"4\"]) == [0, 0, 0, 0]\nassert     odd_count([\"133\",\"124\",\"4444\"]) == [2, 2, 1]\nassert     odd_count([\"4444\",\"33\",\"1111\",\"22\"]) == [1, 3, 0, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     odd_count([\"010203\",\"010204\",\"010206\"]) == [3,3,3]\nassert     odd_count([\"11\",\"12\",\"13\"]) == [0,0,0]\nassert     odd_count([\"10\",\"100\",\"1000\"]) == [3,3,3]\nassert     odd_count([\"101\",\"111\",\"1111\"]) == [2,2,2]\n\n\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     odd_count([\"123\", \"456\", \"234\"]) == [3, 1, 2], \"Wrong result for input ['123', '456', '234'].\"\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 1, 2, 0, 1], \"Wrong result for input ['1', '2', '3', '4', '5'].\"\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 1, 2, 0, 1], \"Wrong result for input ['1', '2', '3', '4', '5'].\"\nassert     odd_count([\"aaa\", \"bbb\", \"abc\", \"121\", \"1321\"]) == [3, 1, 2, 0, 2], \"Wrong result for input ['aaa', 'bbb', 'abc', '121', '1321'].\"\nassert     odd_count([\"aba\", \"12a\", \"1010\"]) == [2, 1, 0], \"Wrong result for input ['aba', '12a', '1010'].\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     odd_count([\"odd\"]) == [1]\nassert     odd_count([\"even\"]) == [0]\nassert     odd_count([\"1112223334444\"]) == [4,4,1,2,3]\nassert     odd_count([\"332211112222\"]) == [0,0,0,0,0,0,0,0,0,2]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     odd_count([\"1130\", \"1428\", \"1010\"]) == [2, 5, 3]\nassert     odd_count([\"1313\", \"0\", \"0\"]) == [2, 0, 0]\nassert     odd_count([\"42\", \"141414\", \"11\", \"25\"]) == [0, 1, 0, 2]\nassert     odd_count([\"2\", \"13\", \"0\"]) == [2, 2, 0]\nassert     odd_count([\"7\", \"0\", \"0\", \"34\"]) == [0, 0, 0, 2]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minSubArraySum([2, 3, 1, 4]) == 1, \"Wrong\"\nassert     minSubArraySum([2, 3, 4, 1, 5]) == 2, \"Wrong\"\nassert     minSubArraySum([2, 3, 4, 1, 5, 2]) == 3, \"Wrong\"\nprint('PASSED'"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     minSubArraySum([2, 3, 1, 4, 3, -2, 5]) == -2\nassert     minSubArraySum([2, 3, 1, 4, 3, -2, -1]) == -1\nassert     minSubArraySum([2, 3, 1, 4, 3, -2, -1, 5]) == 3\nassert     minSubArraySum([2, 3, 1, 4, 3, -2, -1, 5, -2]) == 2"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minSubArraySum([2, 3, 4, 1, 2, 4, 5, 3, 1, 2, 3]) == 8\nassert     minSubArraySum([2, 3, 1, 2, 4, 5, 3, 1, 2, 3]) == 4\nassert     minSubArraySum([2, 4, 3, 1, 2, 4, 5, 3, 1, 2, 3]) == 6\nassert     minSubArraySum([2, 4, 3, 1, 2, 4, 5, 3, 1, 2, 3, 9, 10]) == 15\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 3, 1, 2, 4, 4]) == 6\nassert     minSubArraySum([2, 3, 1, 2, 4, 4, 5]) == 6\nassert     minSubArraySum([2, 3, 1, 2, 4, 4, 5, 7, 1, 5]) == 13\nassert     minSubArraySum([2, 3, 1, 2, 4, 4, 5, 7, 1, 5, 2, 4, 4]) == 12\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_fill([[0, 0, 1],\n                  [1, 0, 0],\n                  [1, 1, 1]], 0) == 1, \"error1\"\nassert     max_fill([[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]], 2) == 0, \"error2\"\nassert     max_fill([[0, 0, 1],\n                  [1, 1, 1],\n                  [1, 0, 1]], 1) == 3, \"error3\"\nassert     max_fill([[0, 0, 1],\n                  [1, 0, 0],\n                  [0, 1, 0]], 1) == 1, \"error4\"\nassert     max_fill([[0, 0, 1],\n                  [0, 0, 0],\n                  [0, 1, 0]], 1) == 2, \"error5\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_fill([[0, 1, 0], [0, 1, 0]], 2) == 0\nassert     max_fill([[0, 1, 1], [0, 1, 0]], 2) == 1\nassert     max_fill([[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 1) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_fill([[1,1], [1,1]], 1) == 2\nassert     max_fill([[1,1], [1,1]], 2) == 1\nassert     max_fill([[1,1], [1,1]], 3) == "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ngrid = [[0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]]\ncapacity = 3\n\nprint(max_fill(grid, capacity)"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_fill([[0,1], [1,0]], 2) == 2\nassert     max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]], 2) == 0\nassert     max_fill([[1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0], [1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0], [0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1], [0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1], [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], 2) == 10\nassert     max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]], 2) == 0\nassert     max_fill([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_fill([[0,1],[0,1]], 1) == 2\nassert     max_fill([[0,1],[0,1]], 1) == 2\nassert     max_fill([[0,1],[1,1]], 1) == 3\nassert     max_fill([[0,1],[0,1]], 2) == 2\nassert     max_fill([[0,1],[0,1]], 2) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_fill([[1, 1, 1, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 0, 0, 0, 0, 0]], 4) == 3\nassert max_fill([[1, 1, 0, 0],\n                 [1, 1, 0, 0],\n                 [1, 1, 0, 0],\n                 [1, 0, 0, 0]], 4) == 0\nassert max_fill([[1, 1, 1, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0]], 4) == 1\nassert max_fill([[1, 1, 1, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0]], 2) == 0\nassert max_fill([[1, 1, 1, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0],\n                 [1, 1, 0, 0, 0, 0]], 1) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     max_fill([[0,1,0],[0,0,0],[0,0,0]], 2) == 4, \"error\"\nassert     max_fill([[0,1,0],[0,0,0],[0,0,0]], 1) == 0, \"error\"\nassert     max_fill([[0,0,0],[0,0,0],[0,0,0]], 2) == 4, \"error\"\nassert     max_fill([[0,0,0],[0,0,0],[0,0,0]], 1) == 0, \"error\"\nassert     max_fill([[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], 1) == 10, \"error\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,3,4,5,2]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sort_array([5,0,1,2,3]) == [0,1,2,3,5]\nassert     sort_array([5,1,0,1,2]) == [0,1,1,2,5]\nassert     sort_array([0,2,1,1,0]) == [0,0,1,1,2]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_array([0,1,2,3,4,5]) == [0,1,2,4,8,16]\nassert     sort_array([4,8,7,4,0,6,1,5]) == [0,1,4,4,8,16,32,63]\nassert     sort_array([8,7,6,5,4,3,2,1]) == [1,2,3,4,8,16,32,63]\nassert     sort_array([2,3,5,7,11,13,17,19]) == [2,3,5,7,11,13,17,19]\nassert     sort_array([1,3,5,7,9,11,13,15]) == [1,3,5,7,9,11,13,15]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([12, 11, 13, 10, 15, 19, 8]) == [8, 10, 11, 12, 13, 15, 19]\nassert     sort_array([15, 13, 17, 12, 11, 19, 10]) == [8, 10, 11, 12, 13, 15, 19]\nassert     sort_array([15, 19, 17, 13, 11, 12, 10]) == [8, 10, 11, 12, 13, 15, 19]\nassert     sort_array([15, 19, 17, 12, 11, 13, 10]) == [8, 10, 11, 12, 13, 15, 19]\nassert     sort_array([11, 15, 17, 13, 19, 12, 10]) == [8, 10, 11, 12, 13, 15, 19]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"failed test 1\"\nassert     sort_array([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9], \"failed test 2\"\nassert     sort_array([0,1,2,3,5,8,9]) == [0,1,2,4,8,5,9], \"failed test 3\"\nassert     sort_array([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9], \"failed test 4\"\nassert     sort_array([9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9]) == [0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9], \"failed test 5\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]) == [0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert     sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_array([2, 4, 1, 3]) == [1, 2, 3, 4], 'incorrect result'\nassert     sort_array([2, 4, 1, 3]) == [1, 2, 3, 4], 'incorrect result'\nassert     sort_array([2, 3, 4, 1]) == [1, 2, 3, 4], 'incorrect result'\nassert     sort_array([0, 1, 2, 3]) == [0, 1, 2, 3], 'incorrect result'\nassert     sort_array([1, 2, 3, 0]) == [0, 1, 2, 3], 'incorrect result'\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     select_words('', 1) == []\nassert     select_words('a b c d e', 0) == []\nassert     select_words('abc', 2) == ['abc']\nassert     select_words('a b c d e', 2) == ['a', 'b', 'c']\nassert     select_words('a b c d e f', 2) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     select_words(\"The quick brown fox jumps over the lazy dog\", 2) == \n        [    'quick', 'brown', 'over', 'fox', 'jumps']\nassert     select_words(\"He is the king of the hill\", 2) == \n        ['hill', 'king']\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 0) == \n        []\nassert     select_words(\"\", 0) == \n        []\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 1) == \n        []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     select_words(\"\", 2) == []\nassert     select_words(\"a b c d e f g h i j k\", 2) == []\nassert     select_words(\"ab cd ef gh ij kl\", 2) == [\"ab\", \"cd\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\nif __name__ == \"__main__\":\n    print(select_words(\"ab cd ef gh ij kl\", 2))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 1))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 0))\n    print(select_words(\"\", 2))\n    print(select_words(\"ab cd ef gh ij kl\", 2))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 1))\n    print(select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 0))\n    print(select_words(\"ab cd ef gh ij kl\", 2))"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     select_words('', 0) == []\nassert     select_words('abc', 0) == []\nassert     select_words('abcbac', 0) == []\nassert     select_words('aacbac', 0) == ['aacbac']\nassert     select_words('aacbac', 1) == ['aacbac']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     select_words('consecrate', 3) == ['consecrate']\nassert     select_words('waterbottle', 4) == []\nassert     select_words('redderthanblubber', 2) == ['redderthanblubber']\nassert     select_words('python', 2) == ['python']\nassert     select_words('compound nouns', 6) == ['compound nouns']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     select_words('Hello there', 2)             == [('there', 2), ('hello', 1)]\nassert     select_words('I love my country', 2)     == [('love', 2), ('country', 2)]\nassert     select_words('The quick brown fox jumps over the lazy dog', 5)             == [('brown', 3), ('fox', 3), ('jumps', 2), ('lazy', 2), ('dog', 2)"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     select_words('', 2) == []\nassert     select_words('dog', 1) == ['dog']\nassert     select_words('dogdogdogdog', 3) == ['dog', 'dogdog', 'dogdogdog']\nassert     select_words('dogdogdogdog', 2) == ['dog', 'dogdog']\nassert     select_words('dogdogdogdog', 1) == ['dog']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     select_words('banana', 4) ==     ['banana']\nassert     select_words('cartoon', 2) ==     ['cart', 'car', 'car']\nassert     select_words('cartoon', 3) ==     ['cart', 'car']\nassert     select_words('cartoon', 5) ==     []\nassert     select_words('', 0) ==     []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     select_words('', 0) == []\nassert     select_words('abc', 0) == []\nassert     select_words('abc', 1) == ['a', 'b', 'c']\nassert     select_words('abc', 2) == ['ab', 'ac', 'bc']\nassert     select_words('abc', 3) == ['abc']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef get_closest_vowel(word):\n    for i in range(len(word)):\n        if word[i] in 'aeiou':\n            return word[i:]\n    return '"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('aCd') == 'e'\nassert     get_closest_vowel('abCde') == 'e'\nassert     get_closest_vowel('ABCde') == 'e'\nassert     get_closest_vowel('ABCD') == ''\nassert     get_closest_vowel('ABCD') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"abracadabra\") == 'a'\nassert     get_closest_vowel(\"lattes\") == 'e'\nassert     get_closest_vowel(\"z\") == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('abracadabra') == 'a', \"First\"\nassert     get_closest_vowel('abracadabran') == 'a', \"Second\"\nassert     get_closest_vowel('abr') == '', \"Third\"\nassert     get_closest_vowel('brac') == '', \"Fourth\"\nassert     get_closest_vowel('cod') == '', \"Fifth\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"aAc\") == 'A'\nassert get_closest_vowel(\"abI\") == ''\nassert get_closest_vowel(\"abba\") == ''\nassert get_closest_vowel(\"ggAb\") == ''\nassert get_closest_vowel(\"bycat\") == 'B'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"a-b\") == \"\", \"one consonant\"\nassert     get_closest_vowel(\"b-a\") == \"\", \"one consonant\"\nassert     get_closest_vowel(\"a--b\") == \"\", \"one consonant\"\nassert     get_closest_vowel(\"b--a\") == \"\", \"one consonant\"\nassert     get_closest_vowel(\"aa-b\") == \"\", \"one consonant\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('abracadabra') == 'a'\nassert     get_closest_vowel('abracadabraa') == ''\nassert     get_closest_vowel('abracadabraabra') == 'a'\nassert     get_closest_vowel('abracadabraabracadabra') == 'a'\nassert     get_closest_vowel('abracadabraacadabra') == 'a'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_closest_vowel('pcbs') == 'e', 'incorrect output'\nassert     get_closest_vowel('xzpcbs') == '', 'incorrect output'\nassert     get_closest_vowel('xzpcbsim') == 'i', 'incorrect output'\nassert     get_closest_vowel('pcbsim') == 'e', 'incorrect output"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_closest_vowel('test') == 'e', \"the case doesn't work\"\nassert     get_closest_vowel('a') == '', \"the function can't find the closest vowel in a word beginning with a vowel\"\nassert     get_closest_vowel('Hello') == '', \"the function can't find the closest vowel in a word ending with a consonant\"\nassert     get_closest_vowel('Tshirt') == '', \"the function can't find the closest vowel in a word ending with a consonant\"\nassert     get_closest_vowel('Hello World') == 'e', \"the function can't find the closest vowel in a word ending with a vowel\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['(()', '()()']) == 'No'\nassert     match_parens(['(())', '()()']) == 'No'\nassert     match_parens(['(()())', '()()']) == 'Yes'\nassert     match_parens(['(())', '())']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     match_parens(['(())', '((())']) == 'Yes'\nassert     match_parens(['((()))', '()()']) == 'Yes'\nassert     match_parens(['()', '((()))']) == 'Yes'\nassert     match_parens(['()', '((()))']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     match_parens(['(', ')', ')', '(', ')']) == 'No'\nassert     match_parens(['(', '(', ')', ')', ')']) == 'Yes'\nassert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')', '(', ')', '(']) == 'Yes'\nassert     match_parens(['(', ')', '(', ')', ')']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     match_parens(['(()', '())']) == 'Yes'\nassert     match_parens(['(()', '())', '()()']) == 'Yes'\nassert     match_parens(['((()()', '(())()']) == 'Yes'\nassert     match_parens(['((()()', '(())()', '()(()']) == 'No'\nassert     match_parens(['(()())', '(())()', '(()()', '()()()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     match_parens(['(())']) == 'Yes'\nassert     match_parens(['()']) == 'Yes'\nassert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['()()', '((()))']) == 'Yes'\nassert     match_parens(['(())()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     match_parens(['(())']) == 'Yes'\nassert     match_parens(['(())', '(())']) == 'Yes'\nassert     match_parens(['(())', '(()', '()()']) == 'Yes'\nassert     match_parens(['(()', '(()']) == 'No'\nassert     match_parens(['(())', '(())']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     match_parens(['(())']) == 'Yes'\nassert     match_parens(['()()']) == 'Yes'\nassert     match_parens(['((()))']) == 'Yes'\nassert     match_parens(['()(()()())()()()()']) == 'Yes'\nassert     match_parens(['()()()()(())()(())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     match_parens(['(', ')', ')']) == 'Yes', 'Error'\nassert     match_parens(['(', ')', '(']) == 'No', 'Error'\nassert     match_parens(['(', '(', ')']) == 'Yes', 'Error'\nassert     match_parens(['(', '(', ')', ')', ')', '(', ')', '(']) == 'No', 'Error'\nassert     match_parens(['(', '(', ')', ')', '(', ')', '(']) == 'No', 'Error'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     match_parens([\"(\", \")\"]) == \"Yes\"\nassert     match_parens([\"(\", \")\", \")\"]) == \"Yes\"\nassert     match_parens([\"(\", \")\", \"]\"]) == \"No\"\nassert     match_parens([\"[\", \")\", \"]\"]) == \"No\"\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    '''\n    return \"Yes\" if is_good(lst) else \"No\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     maximum([10, 20, 30, 40], 4) == [40, 40, 40, 40]\nassert     maximum([10, 20, 30, 40], 2) == [40, 40]\nassert     maximum([10, 20, 30, 40], 3) == [40, 40, 40]\nassert     maximum([10, 20, 30, 40], 1) == [40]\nassert     maximum([10, 20, 30, 40], 8) == [40, 40, 40, 40, 40, 40, 40, 40]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (sorted(maximum([3,1,2,4], 2)) == [4, 3])\nassert     (sorted(maximum([1,2,3,4], 2)) == [4, 3])\nassert     (sorted(maximum([3,2,1,4], 2)) == [4, 3])\nassert     (sorted(maximum([1,2,3,4,5,6], 3)) == [6, 5, 4])\nassert     (sorted(maximum([3,1,2,4], 4)) == [3, 2, 1])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted(maximum([10, 5, 9, 3, 2, 6, 20], 3)) == [10, 9, 20]\nassert     sorted(maximum([0, 2, 3, 4, 5, 6, 7], 3)) == [6, 5, 4]\nassert     sorted(maximum([-1, 2, -5, 0, 4, -10], 3)) == [4, -1, 0]\nassert     sorted(maximum([], 3)) == []\nassert     sorted(maximum([1, 2, 3, 4, 5], 7)) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     maximum([10, 12, 10, 3, 5], 2) == [12, 10]\nassert     maximum([1, 2, 3, 4, 5], 2) == [5, 4]\nassert     maximum([5, 4, 3, 2, 1], 1) == [5]\nassert     maximum([5, 4, 3, 2, 1], 4) == [5, 4, 3, 2]\nassert     maximum([5, 4, 3, 2, 1], 6) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [-1, -2, 3, 4] == maximum([3,2,1,4], 2) \nassert     [3, 2, 1] == maximum([1, 3, 2, 2, 3], 3)\nassert     [-1, -2, 3, 4] == maximum([4,3,2,1,4], 2)\nassert     [4, 4, 4] == maximum([4,4,4,4,4], 3)\nassert     [] == maximum([4,4,4,4,4], 5)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1, 2, 3] == maximum([1, 2, 3], 3)\nassert     [1, 2, 3] == maximum([1, 2, 3], 2)\nassert     [-1, -2, 0] == maximum([-1, -2, 0], 3)\nassert     [-1, -2, 0] == maximum([-1, -2, 0], 2)\nassert     [0, 2, 3] == maximum([0, 2, 3], 3)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     maximum([10, 7, 9, 2, 12, 19], 2) == [12, 19]\nassert     maximum([9, 1, 3, 4, 5], 3) == [9, 1, 3]\nassert     maximum([10, 2, 9, 3, 7, 4], 5) == [10, 9, 7, 4]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     set(maximum([1, 2, 3, 4, 3], 2)) == {3, 4}\nassert     set(maximum([5, 4, 3, 2, 1], 3)) == {5, 4, 3}\nassert     set(maximum([-1, -2, -3, -4, -3], 2)) == {-1, -2"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [4, 4, 4, 4, 4, 4, 4] == maximum([1, 1, 2, 3, 4, 0, 0, 0], 3) \nassert     [3, 3, 3, 4, 4, 4, 4] == maximum([1, 2, 3, 0, 0, 0], 3)\nassert     [3, 3, 3, 3, 4, 4, 4] == maximum([1, 1, 2, 3, 4, 0, 0], 3)\n\nassert     [0, 0, 0, 0] == maximum([1, 2, 3, 0, 0, 0], 4)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7], 4) == [4, 5, 6, 7], 'wrong result'\nassert     maximum([5, 4, 3, 2, 1], 2) == [5, 4], 'wrong result'\nassert     maximum([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1], 'wrong result'\nassert     maximum([1, 2, 3, 4, 5], 0) == [], 'wrong result'\nassert     maximum([], 0) == [], 'wrong result'\nprint('Correctness of maximum')\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solution([1, 2, 3, 4, 5]) == 10, \"[1, 2, 3, 4, 5]  is incorrect\"\nassert     solution([1, 2, 3]) == 3, \"[1, 2, 3]  is incorrect\"\nassert     solution([2, 4, 6]) == 6, \"[2, 4, 6]  is incorrect\"\nassert     solution([4, 1, 3, 6]) == 8, \"[4, 1, 3, 6]  is incorrect\"\nassert     solution([4, 1, 3, 6, 2]) == 8, \"[4, 1, 3, 6, 2]  is incorrect\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solution([3,1,2,4]) == 1, \"Test 1 Failed\"\nassert     solution([3,2,4,1]) == 0, \"Test 2 Failed\"\nassert     solution([3,3,3,3]) == 0, \"Test 3 Failed\"\nassert     solution([2,3,3,4,5]) == 2, \"Test 4 Failed\"\nassert     solution([2,2,1,2,2]) == 2, \"Test 5 Failed\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 12\nassert     solution([1, 3, 5]) == 3\nassert     solution([2, 2, 2, 0]) == 0"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add_elements([555, 901, 482, 1771], 2) == 1358\nassert     add_elements([9, 987, 42, 422, 9, 99, 99], 1) == 1058\nassert     add_elements([0, 0, 0, 0], 0) == 0\nassert     add_elements([1, 2, 3, 4, 5], 0) == 0\nassert     add_elements([0, 0, 0, 0, 0], 2) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7], 3) == 12\nassert     add_elements([9, 9, 9, 9], 1) == 0\nassert     add_elements([4, 6, 3, 9], 3) == 12\nassert     add_elements([], 3) == 0\nassert     add_elements([4, 6, 3, 9], 0) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add_elements([1,2,3,4], 2) == 10, \"Wrong answer\"\nassert     add_elements([5,7,8,9], 1) == 15, \"Wrong answer\"\nassert     add_elements([5,8,9], 2) == 18, \"Wrong answer\"\nassert     add_elements([9,8,8,9,9], 2) == 20, \"Wrong answer\"\nassert     add_elements([9,8,8,9,9], 2) == 20, \"Wrong answer\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add_elements([9, 9, 9, 9, 9, 9], 1) == 18\nassert     add_elements([5, 7, 8, 9, 9], 1) == 18\nassert     add_elements([9, 9, 9, 9, 9, 9], 2) == 21\nassert     add_elements([9, 9, 9, 9, 9, 9], 10) == 22\n\nimport numpy as np\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add_elements([2, 9, 9], 2) == 18\nassert     add_elements([9, 9, 9], 1) == 18\nassert     add_elements([1, 2, 3, 4, 5], 2) == 14\nassert     add_elements([99, 999, 9999, 9999], 2) == 19999\nassert     add_elements([1, 2, 3, 9, 9, 9], 3) == 1"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 3) == 15\nassert     add_elements([5, 6, 7, 8, 9], 2) == 16\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 8) == 30\nassert     add_elements([5, 6, 7, 8, 9], 2) == 16\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7) == 33\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add_elements([1, 2, 3], 3) == 7\nassert     add_elements([1, 2, 3, 4, 5, 6], 5) == 21\nassert     add_elements([1, 2, 3], 2) == 7\nassert     add_elements([1, 9], 2) == 10\nassert     add_elements([9, 9], 2) == 19\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add_elements([1,2,3,4,5], 3) == 9\nassert     add_elements([7,8,9,0], 3) == 12\nassert     add_elements([1,3,5,7,9], 2) == 10\nassert     add_elements([5,8,9,1,5], 2) == 15\nassert     add_elements([9,9,9,9,9,9,9], 4) == 990\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert "
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(1)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(3)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(10)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(5)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(16)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n\n\n\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,3]\nassert     get_odd_collatz(3) == [1,7,5,17,5,25,13,65,33,163,83,425,225,8125,4137,16807,8281,4278,84645,1663,43490,17811,531441,262141,1134131,4342410,1746228,5315250,2624676,11359049,47159521,1791658,5316000,26252073,113589049,47172424,179766253,5330020,26267317,113592466,47182020,1820020,5344070,26273224,113618224,471924,179768224,5333968,26291479,113593204,471944,182100,53520,2630187,113608,472080,182464,535536,263224,113616,472096,182688,53584,263677,113664,472206,182848,535840,263445,113632,472224,183012,53552,263580,113620,472224,183040,53520,26370,113696,472352,182880,53540,263819,113744,472428,182880,53520,263944,113712,472424,182848,53512,264048,113696,472512,183024,53520,264096,113616,472544,182720,53608,264032,113612,472512,182720,53600,264032,113612,472416,182720,536064,263740,113664,472224,182816,53640,264032,113616,472224,182848,53520,263824,113696,472224,182992,53624,264064,113632,472224,183008,535904,264064,113616,472224,182992,53624,264224,113632,472224,183016,53520,263824,113616,472224,183040,535904,263944,113696,472224,182720,53664,264096,113664,472224,182816,535840,263740,113664,472224,182824,535824,263712,113632,472224,182816,53640,264096,113632,472224,182824,535824,263840,113632,472224,182960,535920,263936,113632,472224,183024,53568,263776,113696,472224,182848,535848,263824,113664,472224,182912,535920,263824,113696,472224,182824,535920,263824,113664,472224,182912,53568,263936,113696,472224,182848,535848,263824,113664,472224,182960,535920,263824,113696,472224,183024,53568,263776,113664,472224,182848,535840,263824,113632,472224,183016,53572,263824,113632,472224,182816,53640,264096,113616,472224,182912,53624,263824,113632,472224,182912,53624,263824,113664,472224,182848,53520,263824,113696,472224,182912,53624,263824,113632,47222"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,3]\nassert     get_odd_collatz(3) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(4) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(5) == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(3) == [1, 4, 16]\nassert     get_odd_collatz(4) == [1, 5, 16, 64]\nassert     get_odd_collatz(5) == [1, 8, 32, 128]\nassert     get_odd_collatz(6) == [1, 9, 28, 64, 196]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(2) == [2], \"Check your implementation\"\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1], \"Check your implementation\"\nassert     get_odd_collatz(4) == [4, 2, 1], \"Check your implementation\"\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1], \"Check your implementation\"\nassert     get_odd_collatz(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1], \"Check your implementation\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [1] == get_odd_collatz(1)\nassert     [1] == get_odd_collatz(2)\nassert     [3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(3)\nassert     [3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(6)\nassert     [3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(7)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef convert_date(date):\n    \"\"\"You have to write a function which converts a date string to a date object and returns\n    the date object.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     valid_date(\"12-12-2012\") == False\nassert     valid_date(\"12-12-2010\") == True\nassert     valid_date(\"02-29-2014\") == False\nassert     valid_date(\"03-03-2013\") == False\nassert     valid_date(\"12-23-2012\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     valid_date('12-01-2020')     ==    True\nassert     valid_date('12-32-2020')     ==    False\nassert     valid_date('01-13-2020')     ==    False\nassert     valid_date('03-31-2020')     ==    True\nassert     valid_date('12-29-2020')     ==    False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     valid_date(\"12-31-2019\") == False, \"Date should be in the format: mm-dd-yyyy\"\nassert     valid_date(\"-1-11-2019\") == False, \"The number of days should be between 1 and 31\"\nassert     valid_date(\"-2-11-2019\") == False, \"The number of days should be between 1 and 30 for months 4, 6, 9, 11\"\nassert     valid_date(\"13-11-2019\") == False, \"The number of days should be between 1 and 29\"\nassert     valid_date(\"12-30-2019\") == True, \"The number of days should be between 1 and 30\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     valid_date('12-31-2020') == False\nassert     valid_date('12-31-2100') == False\nassert     valid_date('01-30-2000') == True\nassert     valid_date('03-31-2020') == False\nassert     valid_date('03-32-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     valid_date('01-15-2020') == True, 'wrong result'\nassert     valid_date('13-01-2020') == False, 'wrong result'\nassert     valid_date('31-03-2020') == False, 'wrong result'\nassert     valid_date('12-02-2020') == True, 'wrong result'\nassert     valid_date('01-02-2020') == True, 'wrong result'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     valid_date(\"03-28-2012\") == True\nassert     valid_date(\"03-31-2012\") == False\nassert     valid_date(\"03-29-2012\") == True\nassert     valid_date(\"12-02-2012\") == True\nassert     valid_date(\"03-29-2012\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     valid_date(\"02-28-2018\") == True, 'Wrong answer for 02-28-2018'\nassert     valid_date(\"2-28-2018\") == False, 'Wrong answer for 02-28-2018'\nassert     valid_date(\"2-29-2018\") == False, 'Wrong answer for 02-29-2018'\nassert     valid_date(\"01-31-2018\") == False, 'Wrong answer for 01-31-2018'\nassert     valid_date(\"02-28-2020\") == False, 'Wrong answer for 02-28-2020'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nprint('test case 1: checking invalid date: 31-12-2020')\nassert not valid_date('31-12-2020')\nassert not valid_date('32-12-2020')\nassert not valid_date('32-01-2020')\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     split_words('a b c') == ['a', 'b', 'c']\nassert     split_words('a  b  c') == ['a', 'b', 'c']\nassert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a b c') == ['a', 'b', 'c']\nassert     split_words('a\\tb\\t c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     split_words('Split me') == ['Split','me']\nassert     split_words('Split me, please.') == ['Split','me','please.']\nassert     split_words('I would like to split this text.  If you don\u2019t see the point, I would like to split this text.') == ['I','would','like','to','split','this','text','If','you','don\u2019t','see','the','point','I','would','like','to','split','this','text.']\nassert     split_words('I would like to split this text.  If you don\u2019t see the point, I would like to split this text.') == ['I','would','like','to','split','this','text.','If','you','don\u2019t','see','the','point','I','would','like','to','split','this','text.']\nassert     split_words('I would like to split this text.  If you don\u2019t see the point, I would like to split this text.') == ['I','would','like','to','split','this','text.','If','you','don\u2019t','see','the','point','I','would','like','to','split','this','text.']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     split_words('The quick brown fox jumps over the lazy dog') == [\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The, quick, brown, fox, jumps, over, the, lazy, dog') == [\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox jumps over the lazy dog') == [\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox jumps over the lazy dog.') == [\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox jumps over the lazy dog!') == [\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     split_words(\"Happy Birthday\") == ['Happy', 'Birthday']\nassert     split_words(\"abc\") == [1, 2, 3]\nassert     split_words(\"abcdef\") == [1, 2, 3, 4, 5]\nassert     split_words(\"No commas\") == [2, 4, 6, 8, 10, 12, 14]\nassert     split_words(\"Every comma, here, is a comma.\") == ['Every', 'comma', 'here,', 'is', 'a', 'comma']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     split_words(\"abc xyz\") == ['abc', 'xyz']\nassert split_words(\"abc,xyz\") == ['abc', 'xyz']\nassert split_words(\"abc xyz,mnop\") == ['abc', 'xyz','mnop']\nassert split_words(\"abc, xyz, mnop\") == ['abc', 'xyz','mnop']\nassert split_words(\"abc xyz,mnop,xyz\") == ['abc', 'xyz','mnop', 'xyz']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     split_words(\"a b c d\") == ['a', 'b', 'c', 'd']\nassert     split_words(\"\") == []\nassert     split_words(\"1 2 3 4 5\") == ['1', '2', '3', '4', '5']\nassert     split_words(\"a,b,c,d\") == ['a', 'b', 'c', 'd']\nassert     split_words(\"1,2,3,4,5\") == ['1', '2', '3', '4', '5']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     split_words(\"\") == []\nassert split_words(\"abcd\") == ['abcd']\nassert split_words(\"ab,cd\") == ['ab','cd']\nassert split_words(\"ab,cd,ef\") == ['ab','cd','ef']\nassert split_words(\"ab,cd,efgh\") == ['ab','cd','efgh']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     split_words('Hello world') == ['Hello', 'world']\nassert     split_words('No comma here') == ['No', 'comma', 'here']\nassert     split_words('One,two,three') == ['One', 'two', 'three']\nassert     split_words('12345') == ['12345']\nassert     split_words('Abcdefghijklmnopqrstuvwxyz') == [chr(x) for x in range(97,123)]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     split_words('world') == ['world']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('a, b, c, d, e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a, b, c, d, e, f, g, h, i, j, k') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\nassert     split_words('a, b, c, d, e, f, g, h, i, j, k, l') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     split_words(\"abc de fghijklmnopqrst\") == \\\n        [\"abc\", \"de\", \"fghijklmnopqrst\"]\nassert     split_words(\"Hello there, how are you?\") == \\\n        [\"Hello\", \"there,\", \"how\", \"are\", \"you?\"]\nassert     split_words(\"\") == []\nassert     split_words(\"a,b,c,d,e\") == \\\n        [\"a\", \"b\", \"c\", \"d\", \"e\"]\nassert     split_words(\"abc def ghijklmnopqrst\") == \\\n        [\"abc\", \"def\", \"ghijklmnopqrst\"]\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5, 6]) == True\nassert     is_sorted([1, 3, 5, 6, 2, 4]) == False\nassert     is_sorted([1, 3, 5, 6, 2, 4, 5, 6, 1, 2]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\nassert     is_sorted([1, 2, 3, 4, 5, 6, 1, 2, 3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 1, 1, 2]) == False\nassert     is_sorted([1, 5, 2, 4]) == True\nassert     is_sorted([1, 5, 2, 4, 5, 6]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 6]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_sorted([0]) == True\nassert     is_sorted([0, 1]) == True\nassert     is_sorted([1, 0]) == False\nassert     is_sorted([0, 1, 1]) == False\nassert     is_sorted([0, 1, 1, 2]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([2,3,1]) == True\nassert     is_sorted([1,3,2]) == True\nassert     is_sorted([1,1,1]) == True\nassert     is_sorted([2,2,1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([1,2,3,4,0,1,2]) == False\nassert     is_sorted([1,2,3,5,4,6,5,7]) == False\nassert     is_sorted([1,2,3,4,5,6,4,5]) == False\nassert     is_sorted([1,2,3,4,5,6,4,5,7,8,9,10,11]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef contains_n_unique_sorted_items(lst, n):\n    '''\n    Given a list of items, return whether or not the list contains n \n    unique sorted items.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_sorted([0,1,2,3,4,5,6,7,8,9,10]) == True\nassert     is_sorted([0,1,2,3,4,5,6,7,8,9,0]) == False\nassert     is_sorted([]) == True\nassert     is_sorted([1,1,1,1,1]) == True\nassert     is_sorted([1,1,2,1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_sorted([1, 2, 3, 4]) == True\nassert     is_sorted([3, 2, 1]) == True\nassert     is_sorted([3, 2, 1, 3]) == False\nassert     is_sorted([3, 2, 1, 2]) == False\nassert     is_sorted([3, 2, 2, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1,2,3]) == True\nassert     is_sorted([3,1,2]) == False\nassert     is_sorted([3,3,3,3,3]) == False\nassert     is_sorted([3,2,1,3]) == False\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersection((1, 3), (2, 4)) == 'YES', 'wrong result'\nassert     intersection((1, 5), (2, 4)) == 'NO', 'wrong result'\nassert     intersection((1, 2), (2, 3)) == 'NO', 'wrong result'\nprint('test passed')\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 2), (2, 3)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (4, 6)) == \"NO\"\nassert     intersection((1, 3), (5, 7)) == \"NO\"\nassert     intersection((0, 10), (1, 5)) == \"YES\"\nassert     intersection((0, 10), (8, 10)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \nassert \n\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nintersection((1, 3), (2, 4)) == \"NO\"\nassert \nintersection((1, 3), (2, 4)) == \"NO\"\nassert \nintersection((1, 3), (2, 4)) == \"NO\"\nassert \nintersection((1, 3), (2, 4)) == \"NO\"\nassert \nintersection((1, 3), (2, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert intersection((1, 3), (1, 2)) == \"YES\"\nassert intersection((1, 3), (2, 3)) == \"NO\"\nassert intersection((1, 3), (1, 3)) == \"NO\"\nassert intersection((0, 2), (4, 5)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersection([(1, 3), (2, 4)], [(2, 3), (5, 7)]) == \"NO\"\nassert     intersection([(1, 3), (2, 4)], [(5, 6), (7, 9)]) == \"NO\"\nassert     intersection([(1, 3), (2, 4)], [(2, 3), (1, 4)]) == \"YES\"\nassert     intersection([(1, 3), (2, 4)], [(3, 5), (4, 7)]) == \"YES\"\nassert     intersection([(1, 3), (2, 4)], [(3, 5), (4, 6)]) == \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prod_signs([1, 2, -3, 4]) == 12\nassert     prod_signs([-1, -2, -3, 4]) == -24\nassert     prod_signs([-1, -2, -3, 4]) == 12\nassert     prod_signs([]) is None\nassert     prod_signs([1]) is None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prod_signs([1,2,3,4,5]) ==    -15\nassert     prod_signs([-1,2,3,4,5]) ==    -30\nassert     prod_signs([1,-1,3,4,5]) ==    -15\nassert     prod_signs([-1,-1,3,4,5]) ==    5\nassert     prod_signs([0,0,0,0,0]) ==    0\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    # your code here\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (prod_signs([1, 2, 3]) == 6)\nassert     (prod_signs([-1, 2, 3]) == 6)\nassert     (prod_signs([-1, -2, 3]) == 6)\nassert     (prod_signs([1, -2, 3]) == 6)\nassert     (prod_signs([1, 2, -3]) == 6)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prod_signs([1, 2, 3, 4]) == 12\nassert     prod_signs([-2, 3, 4]) == 6\nassert     prod_signs([0, -1, 2, -3, 4]) == None\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prod_signs([1, -1, -1, -1, 1, 1, 1]) == 0, 'arr is incorrect'\nassert prod_signs([1, 1, 1, 1, 1, 1]) == 0, 'arr is incorrect'\nassert prod_signs([]) == None, 'arr is incorrect'\nprint('\"prod_signs\" is ok')\n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers. You need to return an array\n    of the same length, in which the element at index i of the returned array\n    is equal to the product of all numbers of the array that are both at\n    even and at odd indices of the original array.\n    Note: return None for empty arr.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \n\nif __name__ == '__main__':\n    print('Example:')\n    print(prod_signs([1, -3, 0]))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert prod_signs([1, -3, 0]) == 1\n    "
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3]) == None\nassert     prod_signs([1, 2, 3, -2, 3, -3, 3]) == -30\nassert     prod_signs([-1, 2, -3, -3, 3]) == -6\nassert     prod_signs([1, -2, 3, -3, 3]) == -12\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prod_signs([1,-2,3,4]) == 32\nassert     prod_signs([]) == None\nassert     prod_signs([1,-2,3,-4]) == 24\nassert     prod_signs([1,2,3,4]) == 20\nassert     prod_signs([1,-2,3,4,-5]) == -20\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (prod_signs([1,2,3]) == -1 +\n           1 * (-1 + 1) * (2 * (1 + 1)) * (3 * (1 + 1)))\nassert     (prod_signs([-1,1,3]) == -1 +\n           1 * (-1 + 1) * (1 * (1 + 1)) * (3 * (1 + 1)))\nassert     (prod_signs([1,-1,1]) == 1 +\n           -1 * (-1 + 1) * (1 * (1 + 1)) * (1 * (1 + 1)))\nassert     (prod_signs([]) == None)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     minPath([[1, 2, 3],\n                 [4, 5, 6],\n                 [7, 8, 9]], 1) == [1]\n\nassert     minPath([[1, 4, 2, 3],\n                 [5, 7, 6, 4],\n                 [3, 2, 4, 1],\n                 [4, 5, 9, 3]], 2) == [1, 4]\n\nassert     minPath([[1, 4, 2, 3],\n                 [5, 7, 6, 4],\n                 [3, 2, 4, 1],\n                 [4, 5, 9, 3]], 3) == [1, 2, 4, 3]"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minPath(grid1, 2) == [4, 5, 6, 1, 2, 3]\nassert     minPath(grid2, 2) == [2, 3, 4, 5, 1, 2, 3, 4, 5]\nassert     minPath(grid3, 3) == [1, 2, 3, 4, 5, 6, 8, 9, 7]\nassert     minPath(grid4, 4) == [3, 4, 5, 2, 1, 4, 5, 2, 1]\n\nprint(\"all tests have passed\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minPath([[1,3,4],[8,7,4],[3,2,5]], 2) == [3,3]\nassert     minPath([[1,2,3],[8,9,4],[7,6,5]], 3) == [7,8,9]\nassert     minPath([[1,4,5],[8,3,6],[7,2,5]], 3) == [7,8,9]\n\ndef test():\n    assert minPath([[1,3,4],[8,7,4],[3,2,5]], 2) == [3,3]\n    "
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     minPath([[1, 3, 1], \n               [1, 5, 1], \n               [4, 2, 1]], 2) == [1, 1]\nassert     minPath([[2, 1, 3], \n               [1, 1, 4], \n               [1, 1, 4]], 1) == [1]\nassert     minPath([[3, 2, 4], \n               [1, 2, 1], \n               [4, 3, 1]], 1) == [1]\nassert     minPath([[1, 2, 3], \n               [4, 1, 2], \n               [3, 1, 2]], 2) == [1, 1]\nassert     minPath([[2, 2, 2], \n               [2, 2, 2], \n               [2, 2, 2]], 3) == [2, 2, 2]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     minPath( [[1,4,2],\n                [5,3,6],\n                [7,8,9]], 3) == [1,2,3,6,9]\nassert     minPath( [[1,4,2],\n                [5,3,6],\n                [7,8,9]], 1) == [1,2,3,5,6,7,8,9]\nassert     minPath( [[1,4,2],\n                [5,3,6],\n                [7,8,9]], 2) == [1,2,3,4,5,6,7,8,9]\nassert     minPath( [[1,4,2],\n                [5,3,6],\n                [7,8,9]], 7) == [1,2,3,4,5,6,7,8,9]\nassert     minPath( [[1,4,2],\n                [5,3,6],\n                [7,8,9]], 9) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 3) == [1,2,3]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 4) == [1,2,3,4]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]], 5) == [1,2,3,4,5]\n\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 2) == [1, 1]\nassert     minPath([[1,2,3],[4,1,5]], 1) == [1]\nassert     minPath([[5,4,2,1,1],[4,1,2,3,1],[1,2,1,4,1],[1,5,1,1,1]], 3) == [1, 2, 1]\nassert     minPath([[3,2,1,1,1],[3,3,2,2,2],[2,1,3,3,3],[1,1,3,2,1]], 4) == [1, 2, 2, 2]\nassert     minPath([[1,2,3,1,1],[2,3,4,1,1],[4,2,1,4,1],[1,1,4,2,1]], 4) == [1, 1, 1, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minPath([\n                [1,4,5,7],\n                [2,3,6,8],\n                [9,10,11,12],\n                [13,14,15,16]\n            ], 4) == [1, 4, 9, 16]\nassert     minPath([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]\n            ], 4) == [1, 2, 9, 16]\nassert     minPath([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]\n            ], 2) == [1, 5, 9, 16]\nassert     minPath([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]\n            ], 3) == [1, 5, 6, 9, 16]\nassert     minPath([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]\n            ], 1) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     minPath([[5, 2], [4, 6]], 2) == [5, 4]\nassert     minPath([[1, 2], [3, 4]], 3) == [1, 2, 3]\nassert     minPath([[1, 3, 1], [1, 5, 1], [4, 2, 1]], 4) == [1, 3, 1, 1"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(tri(n))"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     tri(2) == 2, \"tri(2) = \" + str(tri(2))\nassert     tri(4) == 3, \"tri(4) = \" + str(tri(4))\nassert     tri(3) == 8, \"tri(3) = \" + str(tri(3))\nassert     tri(5) == 18, \"tri(5) = \" + str(tri(5))\nassert     tri(8) == 34, \"tri(8) = \" + str(tri(8))\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     tri(1) == 3\nassert     tri(3) == 8\nassert     tri(7) == 21\nassert     tri(8) == 34\nassert     tri(7) == 21\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef test_tri_1():\n    assert tri(1) == 3\n\ndef test_tri_2():\n    assert tri(2) == 1 + (2 / 2)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     tri(2) ==     2\nassert     tri(4) ==     3\nassert     tri(3) ==     8\nassert     tri(5) ==     13\nassert     tri(6) ==     21\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 3\nassert     tri(3) == 8\nassert     tri(5) == 17\nassert     tri(6) == 20\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(12) == 0\nassert     digits(13) == 0\nassert     digits(2) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digits(0) == 0\nassert     digits(8) == 1\nassert     digits(25) == 2\nassert     digits(21) == 0\nassert     digits(9) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     digits(11) == 0\nassert     digits(10) == 1\nassert     digits(150) == 3\nassert     digits(42) == 0\nassert     digits(1) == 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digits(999) == 3\nassert     digits(999) == 3\nassert     digits(2222) == 4\nassert     digits(9876) == 0\nassert     digits(8) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(3) == 0\nassert     digits(4) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digits(4) == 4 \nassert     digits(133) == 1 \nassert     digits(3423) == 2\nassert     digits(34) == 0\nassert     digits(1234) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_nested(\"[[]]\") == True\nassert     is_nested(\"[[{}]]\") == True\nassert     is_nested(\"[[{}]]\") == True\nassert     is_nested(\"[{}]\") == False\nassert     is_nested(\"[(])\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_nested(\"[()]\") == True\nassert     is_nested(\"()[()]\") == True\nassert     is_nested(\"[()]\") == True\nassert     is_nested(\"\") == True\nassert     is_nested(\"[()\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_nested('[()]') == True\nassert     is_nested('[()()]') == True\nassert     is_nested('[(])') == False\nassert     is_nested('[()()(()())()]') == True\nassert     is_nested('[())()]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_nested('[1+1]') == True\nassert     is_nested('[1+1][2+2]') == True\nassert     is_nested('[1+1][2+2][3+3][4+4][5+5]') == True\nassert     is_nested('[1+1][2+2][3+3][4+4][5+5][6+6][7+7][8+8][9+9][10+10]') == True\nassert     is_nested('[1+1][2+2][3+3][4+4][5+5][6+6][7+7][8+8][9+9][10+10][11+11][12+12][13+13][14+14][15+15]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_nested('[()]') == True\nassert     is_nested('([)]') == False\nassert     is_nested('[(])') == False\nassert     is_nested('((()') == False\nassert     is_nested('()') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_nested('[())') == True, 'ERROR'\nassert     is_nested('([]{})') == True, 'ERROR'\nassert     is_nested('{}()') == False, 'ERROR'\nassert     is_nested('{[()]}') == True, 'ERROR'\nassert     is_nested('[{())}]') == False, 'ERROR'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_nested('') == True, 'Invalid Input'\nassert     is_nested('[()]') == True, 'Invalid Input'\nassert     is_nested('()') == False, 'Invalid Input'\nassert     is_nested('[(])') == False, 'Invalid Input'\nassert     is_nested('[([])]') == True, 'Invalid Input'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_nested(\"()\") == True\nassert     is_nested(\"([])\") == True\nassert     is_nested(\"([])[]({})\") == True\nassert     is_nested(\"[])\") == False\nassert     is_nested(\"([)]\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_nested('[][][[[]][]][]') == True\nassert     is_nested('[[[]]]') == True\nassert     is_nested('[][][[[]]][]') == True\nassert     is_nested('[][][[]][]') == True\nassert     is_nested('[][][[][]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_nested('[](){([[[]]])}') == True\nassert     is_nested('[](){([[[]]])}[]') == True\nassert     is_nested('[](){([[[]]])}[]') == True\nassert     is_nested('[](){([[[]]])}[]') == True\nassert     is_nested('[](){([[[]]])}[]') == True\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef add_matrices(mat1, mat2):\n    \"\"\"You are given two matrices and need to add them.\n    The first matrix will have two rows and three columns.\n    The second matrix will also have two rows and three columns.\n    The result will be also a matrix with two rows and three columns.\n    However, the numbers in the result are not summed.\n    Each element in the result should be the sum of corresponding elements\n    in the matrices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3]) == 32\nassert     sum_squares([1.2, 3.4]) == 32.9\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1, 2, 3]) == 29\nassert     sum_squares([1, 2, 3, 4]) == 91\n\nprint('Success')\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef square_sums(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a list of the squares of the numbers in the list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 30\nassert     sum_squares([-1, -2, -3, -4, -5]) == 30\nassert     sum_squares([-2, -3, -4, -5]) == 0\nassert     sum_squares([1, 2, 3, 4, 5]) == 55\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3]) == 14\nassert     sum_squares([1,2,3,4]) == 50\nassert     sum_squares([1,2,3,4,5]) == 100\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 2025\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nprint(sum_squares([1,2,3,4,5]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n\ndef double_and_sum(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a tuple which contains sum of \n    the double of all the elements in the given list\n    and sum of all the elements in the given list.\"\"\"\n    pass\n\ndef double_and_sum(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a tuple which contains sum of \n    the double of all the elements in the given list\n    and sum of all the elements in the given list.\"\"\"\n    pass\n\ndef sum_divisible_by_k(lst, k):\n    \"\"\"You are given a list of numbers.\n    You need to return a list of all the numbers in the given list\n    that are divisible by k.\"\"\"\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\"a\") == False, \"Wrong output for check_if_last_char_is_a_letter('a')\"\nassert     check_if_last_char_is_a_letter(\"4\") == False, \"Wrong output for check_if_last_char_is_a_letter('4')\"\nassert     check_if_last_char_is_a_letter(\"A\") == True, \"Wrong output for check_if_last_char_is_a_letter('A')\"\nassert     check_if_last_char_is_a_letter(\"\") == False, \"Wrong output for check_if_last_char_is_a_letter('')\"\nassert     check_if_last_char_is_a_letter(\".\") == False, \"Wrong output for check_if_last_char_is_a_letter('.')\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter(\"!Hello, world!\") == False, \"wrong result\"\nassert     check_if_last_char_is_a_letter(\"H3ll0, world!\") == False, \"wrong result\"\nassert     check_if_last_char_is_a_letter(\"Beatrice's the force!\") == True, \"wrong result\"\nassert     check_if_last_char_is_a_letter(\"I like cheese!\") == False, \"wrong result\"\nassert     check_if_last_char_is_a_letter(\"I do not like cheese!\") == False, \"wrong result\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(\"bye\") == False, \"Error!\"\nassert     check_if_last_char_is_a_letter(\"bye \") == True, \"Error!\"\nassert     check_if_last_char_is_a_letter(\"abc\") == True, \"Error!\"\nassert     check_if_last_char_is_a_letter(\"123\") == False, \"Error!\"\nassert     check_if_last_char_is_a_letter(\"hello\") == True, \"Error!\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"Vasya Pupkin\") == True, 'Wrong result'\nassert     check_if_last_char_is_a_letter(\"Vasya pupkin\") == True, 'Wrong result'\nassert     check_if_last_char_is_a_letter(\"Vasya Pup\") == True, 'Wrong result'\nassert     check_if_last_char_is_a_letter(\"Vasya pup\") == False, 'Wrong result'\nassert     check_if_last_char_is_a_letter(\"Vasya P\") == True, 'Wrong result'\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"\") == False, \"Error\"\nassert     check_if_last_char_is_a_letter(\" \") == False, \"Error\"\nassert     check_if_last_char_is_a_letter(\" \") == False, \"Error\"\nassert     check_if_last_char_is_a_letter(\"A\") == True, \"Error\"\nassert     check_if_last_char_is_a_letter(\"B\") == False, \"Error\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"ab \") == False, \"False result for single space\"\nassert     check_if_last_char_is_a_letter(\"abcd\") == True, \"False result for single alphabetical character\"\nassert     check_if_last_char_is_a_letter(\"abc 3\") == False, \"False result for non alphabetical character\"\nassert     check_if_last_char_is_a_letter(\"abc 3 \") == False, \"False result for non alphabetical character\"\nassert     check_if_last_char_is_a_letter(\"\") == False, \"False result for empty string\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('@Python') == False, 'Incorrect result!'\nassert     check_if_last_char_is_a_letter('@Python s') == True, 'Incorrect result!'\nassert     check_if_last_char_is_a_letter('Python') == False, 'Incorrect result!'\nassert     check_if_last_char_is_a_letter('@Python s') == False, 'Incorrect result!'\nassert     check_if_last_char_is_a_letter('@Python s!') == False, 'Incorrect result!'\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == False, \"Last letter isn't alpha\"\nassert     check_if_last_char_is_a_letter('hello world') == False, \"Last letter isn't alpha\"\nassert     check_if_last_char_is_a_letter('hello world!') == True, \"Last letter is alpha\"\nassert     check_if_last_char_is_a_letter('The quick brown fox jumps over the lazy dog') == True, \"Last letter is alpha\"\nassert     check_if_last_char_is_a_letter('The 1 quick brown fox jumps over the 2 lazy dogs') == False, \"Last letter isn't alpha\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"abcde\") == True\nassert     check_if_last_char_is_a_letter(\"a1b2\") == True\nassert     check_if_last_char_is_a_letter(\"ab12\") == True\nassert     check_if_last_char_is_a_letter(\"ab123\") == False\nassert     check_if_last_char_is_a_letter(\"123\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"Sending a request\") == False\nassert     check_if_last_char_is_a_letter(\"It's raining cats and dogs\") == True\nassert     check_if_last_char_is_a_letter(\" \") == False\nassert     check_if_last_char_is_a_letter(\"aa\") == True\nassert     check_if_last_char_is_a_letter(\"abc \") == False\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     can_arrange([1, 2, 3, 2, 1]) == 3\nassert     can_arrange([5, 3, 4, 1, 2, 3]) == 2\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     can_arrange([1, 2, 3]) == 2, \"This case should return index 2\"\nassert     can_arrange([1, 2, 1, 3]) == 1, \"This case should return index 1\"\nassert     can_arrange([1, 1, 3]) == 1, \"This case should return index 1\"\nassert     can_arrange([1, 3, 2]) == 0, \"This case should return index 0\"\nassert     can_arrange([1, 3, 3]) == -1, \"This case should return -1\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     can_arrange([3, 1, 2]) == 1\nassert     can_arrange([5, 1, 2]) == -1\nassert     can_arrange([1, 2, 3]) == 2\nassert     can_arrange([2, 3, 5, 6]) == -1\nassert     can_arrange([1, 3, 5, 7]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     can_arrange([3, 4, 1, 9]) == 2\nassert     can_arrange([4, 1, 9]) == 1\nassert     can_arrange([9]) == -1\nassert     can_arrange([3, 5, 4, 1]) == -1\nassert     can_arrange([1, 1, 1, 1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     can_arrange(['a', 'b', 'c', 'd']) == 3\nassert     can_arrange(['b', 'c', 'd', 'a']) == -1\nassert     can_arrange([]) == -1\nassert     can_arrange(['a', 'b', 'c', 'd', 'e']) == 4\nassert     can_arrange(['d', 'c', 'b', 'a']) == 0\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     can_arrange([0, 1, 2, 3, 4, 5]) == 3\nassert     can_arrange([5, 1, 2, 3, 4, 5]) == -1\nassert     can_arrange([]) == -1\nassert     can_arrange([1]) == 0\nassert     can_arrange([0, 1, 2, 3, 4, 5, 6]) == 5\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 3\nassert     can_arrange([5, 4, 3, 2, 1]) == 0\nassert     can_arrange([1, 2, 3, 4, 7]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     can_arrange([1,2,4,5,3]) == -1, 'WRONG'\nassert     can_arrange([2,3,4,1,5]) == 1, 'WRONG'\nassert     can_arrange([2,2,4,5,3]) == 2, 'WRONG'\nassert     can_arrange([2,3,3,2,5]) == 0, 'WRONG'\nassert     can_arrange([2,3,3,3,5]) == -1, 'WRONG'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([1, 2, 3]) == (None, 1)\nassert     largest_smallest_integers([-2, -3, 4, -5]) == (-2, 4)\nassert     largest_smallest_integers([0, 0, -1, -2, -3]) == (None, -1)\nassert     largest_smallest_integers([-1, 1]) == (-1, 1)\nassert     largest_smallest_integers([-5, -3, -2, 1, 2, 3, 4]) == (-5, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (None, None)\nassert     largest_smallest_integers([-1, 2, 3, 4]) == (-1, 4)\nassert     largest_smallest_integers([-1, 2, 3, -4]) == (-1, 3)\nassert     largest_smallest_integers([-1, 2, -3, -4]) == (-1, 2)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (largest_smallest_integers([1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-1, 10)), \"Incorrect\"\nassert     (largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (None, None)), \"Incorrect\"\nassert     (largest_smallest_integers([-10, -5, -7, -1, -3]) == (-10, 1)), \"Incorrect\"\nassert     (largest_smallest_integers([0, 0, 0, 0, 0]) == (None, 0)), \"Incorrect\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([-3, -5, -5, 4, 3]) == (-3, 4)\nassert     largest_smallest_integers([4, 3, 6]) == (None, None)\nassert     largest_smallest_integers([-1, -5, -5, -4, 3]) == (-5, 3)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-3, -5, -5, -4, -3]) == (-5, -3)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([1, 2, -4, 5, 8, 0, -10, -2]) == (None, 8)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-5, -4, -3, -2, -1]) == (-1, 1)\nassert     largest_smallest_integers([-5, 4, 3, 2, 1]) == (-5, 1)\nassert     largest_smallest_integers([4, 3, 2, 1]) == (None, 4)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([3, -10, -4, -1, 2, 6, 7, 8, -9]) == (8, 2)\nassert largest_smallest_integers([3, -10, -4, -1, 2, 6, 7, 8, -9]) == (8, 2)\nassert largest_smallest_integers([3, -10, -4, -1, 2, 6, 7, 8, -9]) == (8, 2)\nassert largest_smallest_integers([0, 0, 0, 0, 0]) == (None, None)\nassert largest_smallest_integers([-1]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (None, 10), \"Tuple (None, 10) expected\"\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-10, None), \"Tuple (-10, None) expected\"\nassert     largest_smallest_integers([]) == (None, None), \"Tuple (None, None) expected\"\nassert     largest_smallest_integers([0]) == (None, 0), \"Tuple (None, 0) expected\"\nassert     largest_smallest_integers([1]) == (1, 1), \"Tuple (1, 1) expected\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (largest_smallest_integers([1, 2, -5, -4, -3, 3, 5, 7, 8]) == (None, 1)), \"Wrong output\"\nassert (largest_smallest_integers([]) == (None, None)), \"Wrong output\"\nassert (largest_smallest_integers([-6]) == (-6, None)), \"Wrong output\"\nassert (largest_smallest_integers([-6, 0, 3, 5, 2, 1, -3]) == (-3, 2)), \"Wrong output\"\nassert (largest_smallest_integers([-6, 0, 3, -5, 2, 1, -3]) == (-6, 1)), \"Wrong output\"\nprint(\"Correct output!\")"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nprint(\"OK\")\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, 2, -8, 0, 4, 12]) == (12, 1)\nassert     largest_smallest_integers([0, 0, -2, 3, 4, 0]) == (4, -2)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (None, None)\n\nprint(\"\\nlargest_smallest_integers tests passed\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1, 1.0) == 1.0\nassert     compare_one(\"1\", \"2\") == \"2\"\nassert     compare_one(\"2.0\", \"2.0\") == \"2.0\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (compare_one(100, 100.0) == 100), \"String and integer\"\nassert     (compare_one(100, 100) == 100), \"Two integers\"\nassert     (compare_one(100, 100.5) == 100.5), \"Two floats\"\nassert     (compare_one(100, '100') == '100'), \"String and integer\"\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     compare_one(3, 2.5) == 3\nassert     compare_one(3.5, 2.5) == 3.5\nassert     compare_one('3.5', '2.5') == 3.5\nassert     compare_one('3.5', '2.5') == 3.5\nassert     compare_one(3.5, 3.5) == 3.5\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    "
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger of two values in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     compare_one(0, 1) == 1, 'check the type of return'\nassert     compare_one(0.1, 1) == 1, 'check the type of return'\nassert     compare_one(0.1,.1) ==.1, 'check the type of return'\nassert     compare_one(1, 1) == None, 'check the type of return'\nassert     compare_one('1', 1) == None, 'check the type of return'\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (compare_one(1, 2) == 2)\nassert     (compare_one(1, 1) == 1)\nassert     (compare_one(1, \"1\") == None)\nassert     (compare_one(\"1\", \"1.0\") == \"1.0\")\nassert     (compare_one(\"1.0\", \"1\") == \"1.0\")\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (compare_one(1, 2) == 2), \"incorrect\"\nassert     (compare_one(1, \"2\") == None), \"incorrect\"\nassert     (compare_one(\"1\", 2) == None), \"incorrect\"\nassert     (compare_one(1, \"1\") == 1), \"incorrect\"\nprint(\"compare_one is correct\")\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the largest variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare_one(1.0, 2.0) == 2.0\nassert     compare_one(\"1.0\", \"2.0\") == 2.0\nassert     compare_one(\"1.0\", \"1.0\") == 1.0\nassert     compare_one(\"1.0\", \"1\") == 1.0\nassert     compare_one(1.0, 1) == 1.0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(100) == True\nassert     is_equal_to_sum_even(64) == True\nassert     is_equal_to_sum_even(150) == False\nassert     is_equal_to_sum_even(54) == False\nassert     is_equal_to_sum_even(51) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(14) == False\nassert     is_equal_to_sum_even(22) == False\nassert     is_equal_to_sum_even(46) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(24) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(14) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(2) is True\nassert     is_equal_to_sum_even(4) is True\nassert     is_equal_to_sum_even(10) is False\nassert     is_equal_to_sum_even(2*2+2+2) is True\nassert     is_equal_to_sum_even(5*5+4*4) is True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(14) == True\nassert     is_equal_to_sum_even(16) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef add_even_numbers_of(numbers):\n    \"\"\"Add all the even numbers of the given array of numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(24) == True\nassert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(44) == False\nassert     is_equal_to_sum_even(56) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(30) == False\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(15) == False\n\nprint(\"OK! #1\")\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(14) == True\nassert     is_equal_to_sum_even(18) == True\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\n\n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('\\nTesting special_factorial()...')\n    test_inputs = (\n        (0, 1),\n        (1, 1),\n        (2, 2),\n        (3, 6),\n        (4, 24),\n        (5, 120),\n    )\n    for i, (arg, expected) in enumerate(test_inputs):\n        try:\n            fact = special_factorial(arg)\n        except Exception as e:\n            print(f'Test {i}: crashed with: {e}')\n        else:\n            if fact == expected:\n                print(f'Test {i}: success.')\n            else:\n                print(f'Test {i}: fail. Expected {expected} but got {fact}.')\n    print('Done!'"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef fix_spaces_test():\n    \"\"\"\n    test for fix_spaces\n    \"\"\"\n    pass"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef put_spaces_back(text):\n    \"\"\"\n    Given a string text, replace all underscores with spaces, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\ndef fix_spaces2(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fix_spaces('This     is  a sentence') == 'This_is_a_sentence'\nassert     fix_spaces('   asd   ') == 'asd'\nassert     fix_spaces('asd      asd') == 'asd_-asd'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fix_spaces(\"pneumonoultramicroscopicsilicovolcanoconiosis\") == \"pneumonoultramicroscopicsilicovolcanoconiosis\"\nassert     fix_spaces(\"this is a test   \") == \"this-is-a-test\"\nassert     fix_spaces(\"a   b   c   d   e   f\") == \"a-b-c-d-e-f\"\nassert     fix_spaces(\"\") == \"\"\nassert     fix_spaces(\"hello world\") == \"hello-world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     \"The_ last_name_of_the_student_ is_Mary\" == \\\n        fix_spaces(\"The last name of the student  is Mary\")\nassert \"The last name of the student_ is Mary\" == \\\n        fix_spaces(\"The last name of the student  is Mary\")\nassert \"The last name of the student  is Mary\" == \\\n        fix_spaces(\"The last name of the student  is   Mary\")\nassert \"The last name of the student_ is Mary\" == \\\n        fix_spaces(\"The last name of the student  is    Mary\")\nassert \"The last name of the student is Mary\" == \\\n        fix_spaces(\"The last name of the student  is Mary  \")\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fix_spaces(\"hi there\") == \"hi_there\", \"There should be no changes to 'hi there'\"\nassert     fix_spaces(\"one two three\") == \"one_two_three\", \"There should be no changes to 'one two three'\"\nassert     fix_spaces(\"one two  three\") == \"one_two-three\", \"There should be no changes to 'one two  three'\"\nassert     fix_spaces(\"   one two three   \") == \"one_two_three\", \"There should be no changes to'  one two three   '\"\nassert     fix_spaces(\"one    two three\") == \"one_-two_three\", \"There should be no changes to 'one    two three'\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     file_name_check(\"valid.txt\") == \"Yes\", \"is valid\"\nassert     file_name_check(\"abc.exe\") == \"Yes\", \"contain a valid name\"\nassert     file_name_check(\"abc.exe.dll\") == \"Yes\", \"contain a valid name\"\nassert     file_name_check(\"abc.exe.txt\") == \"No\", \"contain a valid name\"\nassert     file_name_check(\"abc.exe.exe\") == \"No\", \"contain a valid name\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     file_name_check('123.txt') == 'No'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.dll') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.exe.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     file_name_check('my_file.txt') == 'Yes'\nassert     file_name_check('my_file.py') == 'No'\nassert     file_name_check('my_file.exe') == 'No'\nassert     file_name_check('my_file.dll') == 'No'\nassert     file_name_check('0my_file.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     file_name_check('animals.jpg') == 'No', 'animals.jpg'\nassert     file_name_check('animals.jpg.exe') == 'No', 'animals.jpg.exe'\nassert     file_name_check('animals.jpg.dll') == 'No', 'animals.jpg.dll'\nassert     file_name_check('animals.exe') == 'Yes', 'animals.exe'\nassert     file_name_check('animals.exe.dll') == 'No', 'animals.exe.dll'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     file_name_check('0file.txt') == 'No'\nassert     file_name_check('1file.txt') == 'No'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('1.exe') == 'No'\nassert     file_name_check('abc.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     file_name_check('123.txt') == 'No'\nassert     file_name_check('a.1.exe') == 'No'\nassert     file_name_check('a.exe') == 'No'\nassert     file_name_check('a.dll') == 'No'\nassert     file_name_check('a.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     file_name_check('test1.py') == 'No' \nassert     file_name_check('test.txt') == 'No'\nassert     file_name_check('1test.py') == 'No'\nassert     file_name_check('test.exe') == 'No'\nassert     file_name_check('test.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     file_name_check('pyt.exe') == 'Yes', 'Incorrect!'\nassert     file_name_check('pyt.exe.txt') == 'No', 'Incorrect!'\nassert     file_name_check('pyt.exe.dll') == 'Yes', 'Incorrect!'\nassert     file_name_check('pyt.exe.dll.txt') == 'No', 'Incorrect!'\nassert     file_name_check('pyt.exe.dll.exe') == 'No', 'Incorrect!'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     file_name_check('name.txt') == 'Yes'\nassert     file_name_check('name.txt.') == 'No'\nassert     file_name_check('name.txt.exe') == 'No'\nassert     file_name_check('name.exe.exe') == 'No'\nassert     file_name_check('name.dll') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 1 + 16 + 81 + 256 + 625\nassert     sum_squares([0, 2, 3, 4, 5]) == 0 + 4 + 9 + 16 + 25\nassert     sum_squares([0, 1, 2, 3, 4]) == 0 + 1 + 4 + 9 + 16\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_squares([4, 4, 4, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3]) == \\\n                (108 + 27 + 16 + 16 + 16 + 8 + 8 + 8)\n\nprint('sum_squares tests passed'"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 36, 'incorrect for [1, 2, 3, 4]'\nassert     sum_squares([1, 5, 3, 7, 9, 21]) == 231, 'incorrect for [1, 5, 3, 7, 9, 21]'\nassert     sum_squares([1, 3, 5, 7, 9]) == 63, 'incorrect for [1, 3, 5, 7, 9]'\n\ndef dict_max(d):\n    \"\"\"\"\n    This function will take a dictionary. The function shall find the key corresponding to the entry with the greatest value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 4, 2, 3]) == 14\nassert     sum_squares([1, 5, 2, 3]) == 28\nassert     sum_squares([1, 2, 3]) == 9\nassert     sum_squares([2, 2, 2]) == 8\nassert     sum_squares([1, 3, 4]) == 10\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3,4,5,6]) == 57,'sum_squares is not working as expected.'\nassert     sum_squares([1,2,3,4,5,6,7]) == 99,'sum_squares is not working as expected.'\nassert     sum_squares([1,2,3,4,5,6,7,8]) == 654,'sum_squares is not working as expected.'\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 4515,'sum_squares is not working as expected.'\nprint(\"sum_squares: all tests passed.\")\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_squares([2, 3, 1, 1, 5, 3, 2, 9, 5]) == 12, \"Test Failed\"\nprint(\"Test Passed\")\n\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef square(n):\n    \"\"\"\n    This function takes a positive integer n and return the square of the integer n.\n    \"\"\"\n    pass\n\ndef sum_squares_rec(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\n        \"The biggest possible prime number is 97, and the biggest possible even prime number is 94\"\n    ) == \"97 94\", \"Prime\"\nassert     words_in_sentence(\n        \"The biggest possible prime number is 97, and the biggest possible even prime number is 94\"\n    ) == \"97 94\", \"Prime\"\nassert     words_in_sentence(\n        \"The biggest possible prime number is 97, and the biggest possible even prime number is 94\"\n    ) == \"97 94\", \"Prime\"\nassert     words_in_sentence(\n        \"The biggest possible prime number is 97, and the biggest possible even prime number is 94\"\n    ) == \"97 94\", \"Prime\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_in_sentence('Python is an easy to learn, powerful programming language.') == 'Python is an easy to learn, powerful programming language.'\nassert     words_in_sentence('Python is a simple and easy to learn language.') == 'Python is a simple and easy to learn language.'\nassert     words_in_sentence('Python is simple and powerful.') == 'Python is simple and powerful.'\nassert     words_in_sentence('Python is powerful and easy.') == 'Python is powerful and easy.'\n\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"I did not like this movie\") == \"I did not like this movie\"\nassert     words_in_sentence(\"I did not like this movie\") == \"did not like movie this\"\nassert     words_in_sentence(\"I did not like this movie\") == \"did movie not I\"\nassert     words_in_sentence(\"I did not like this movie\") == \"movie did not I\"\nassert     words_in_sentence(\"I did not like this movie\") == \"movie did not movie I\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_in_sentence('I love you') == 'love'\nassert     words_in_sentence('hello, world') == 'hello, world'\nassert     words_in_sentence('hello, world!') == 'hello, world'\nassert     words_in_sentence('hello, world! 123') == 'hello, world'\nassert     words_in_sentence('hello, world! 123!') == 'hello, world'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"hello world\") == \"hello world\"\nassert     words_in_sentence(\"go go go\") == \"go\"\nassert     words_in_sentence(\"python is the best language\") == \"python is the best language\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\" \") == \" \"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_in_sentence('I love prime numbers') == 'prime love I'\nassert     words_in_sentence('I do not like negative numbers') == 'negative do not I'\nassert     words_in_sentence('I love prime numbers and negative numbers') == 'prime love negative numbers I'\nassert     words_in_sentence('I do not like negative numbers and prime numbers') == 'negative do not I prime numbers'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"An example sentence\") == \"An example\"\nassert     words_in_sentence(\"Another sentence\") == \"Another\"\nassert     words_in_sentence(\"Another sentence is here\") == \"Another is here\"\nassert     words_in_sentence(\"The third sentence is here\") == \"The third\"\nassert     words_in_sentence(\"I have a prime sentence here\") == \"prime\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert words_in_sentence('Hi my name is A') == 'Hi A'\nassert words_in_sentence('Hi my name is A B') == 'Hi A B'\nassert words_in_sentence('Hi my name is A B C D E F') == 'Hi A B C D E'\nassert words_in_sentence('Hi my name is A B C D E F G') == 'Hi A B C D E F G'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"It's a lovely day today\") == \"day lovely It's a It\", \"Should work for all the cases\"\nassert words_in_sentence(\"I'm a little tea pot\") == \"pot a little I'm\", \"Should work for all the cases\"\nassert words_in_sentence(\"Cheer up! Not to worry. Be happy.\") == \"Be happy not to worry cheer up\", \"Should work for all the cases\"\nassert words_in_sentence(\"No! No! No\") == \"No No No\", \"Should work for all the cases\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"An example sentence\") == \"An example sentence\", \"Wrong result for words_in_sentence('An example sentence')\"\nassert words_in_sentence(\"The cow jumped over the moon\") == \"The cow jumped over the moon\", \"Wrong result for words_in_sentence('The cow jumped over the moon')\"\nassert words_in_sentence(\"Some example words are here, the words are here, the words are here, and the words are here\") == \"The words are here\", \"Wrong result for words_in_sentence('Some example words are here, the words are here, the words are here, and the words are here')\"\nassert words_in_sentence(\"\") == \"\", \"Wrong result for words_in_sentence('')\"\nassert words_in_sentence(\"Hello world\") == \"\", \"Wrong result for words_in_sentence('Hello world')\"\nprint(\"words_in_sentence() test passed\")\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint('PASSED'"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (simplify(\"2/4\", \"3/5\") == False)\nassert     (simplify(\"2/4\", \"2/3\") == True)\nassert     (simplify(\"3/2\", \"3/5\") == True)\nassert     (simplify(\"3/2\", \"5/3\") == False)\nassert     (simplify(\"1/4\", \"2/5\") == False)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     simplify(\"1/5\", \"2\") == True\nassert     simplify(\"1/5\", \"4\") == True\nassert     simplify(\"1/5\", \"3\") == False\nassert     simplify(\"5/6\", \"1\") == True\nassert     simplify(\"6/8\", \"2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     simplify(\"2/4\", \"2/4\") is True\nassert     simplify(\"4/8\", \"4/8\") is True\nassert     simplify(\"3/7\", \"1/7\") is False\nassert     simplify(\"5/6\", \"1/6\") is False\nassert     simplify(\"2/7\", \"2/7\") is True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     simplify('1/2', '1/2') == True, \"Wrong!\"\nassert     simplify('1/2', '1/4') == False, \"Wrong!\"\nassert     simplify('1/4', '1/4') == True, \"Wrong!\"\nassert     simplify('1/4', '1/8') == True, \"Wrong!\"\nassert     simplify('1/4', '1/2') == False, \"Wrong!\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     simplify(\"4/5\", \"3/7\") == False\nassert     simplify(\"15/5\", \"3/7\") == True\nassert     simplify(\"3/4\", \"7/8\") == True\n\nassert     simplify(\"1/3\", \"2/5\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     simplify(\"12\", \"1\") == False, \"Invalid input, should be False\"\nassert     simplify(\"8\", \"1\") == False, \"Invalid input, should be False\"\nassert     simplify(\"1/3\", \"1\") == True, \"Invalid input, should be True\"\nassert     simplify(\"1/4\", \"2\") == True, \"Invalid input, should be True\"\nassert     simplify(\"2/7\", \"0\") == False, \"Invalid input, should be False\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     simplify(\"7/3\", \"\") == \"7/3\"\nassert     simplify(\"8/2\", \"\") == \"4\"\nassert     simplify(\"4/3\", \"\") == \"1\"\nassert     simplify(\"3/2\", \"\") == \"1/2\"\nassert     simplify(\"3/5\", \"\") == \"3/5\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     simplify(\"10\", \"10\")\nassert not simplify(\"10\", \"20\")\nassert     simplify(\"1/2\", \"1/3\")\nassert     not simplify(\"1/2\", \"1/2\")\nassert     not simplify(\"1/2\", \"1/3\")\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef test_order_by_points():\n    assert \n    "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     order_by_points([54, 96, 23]) == [23, 54, 96]\nassert     order_by_points([856, 1, 23]) == [1, 856, 23]\nassert     order_by_points([]) == []\nassert     order_by_points([-1, -23, -43]) == [-43, -23, -1]\nprint('Almost done!')\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     order_by_points([17, 7, 45, 15]) == [17, 7, 45, 15], \"wrong result\"\nassert     order_by_points([15, 19, 2, 3]) == [15, 2, 19, 3], \"wrong result\"\nassert     order_by_points([15, 19, 2, 3, 5, 19]) == [15, 2, 5, 3, 19, 19], \"wrong result\"\nprint(\"All tests passed.\")\n\nprint(order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nprint('------------------------------')\nprint('TRACKING')\nprint('------------------------------')\n\ndef order_by_points_tracking(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    (TRACKING)\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     order_by_points(nums) == [1, 3, 5, 2, 8, 7]\nassert     order_by_points([2, 7, 4, 8, 1, 3, 6, 9]) == [1, 2, 3, 4, 7, 8, 6, 9]\nassert     order_by_points([4, 3, 1, 2, 5, 7, 8, 6, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nprint('Equality test passed')\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     specialFilter([1,3,5,7,9,11]) == 2\nassert     specialFilter([11,9,1,3,5,7]) == 3\nassert     specialFilter([5,5,5,5,5]) == 5\nassert     specialFilter([2,11,5,9,7,5]) == 4\nassert     specialFilter([5,11,9,7,5,1,9]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     specialFilter([1, 3, 5, 7, 9]) == 2\nassert     specialFilter([1, 3, 5, 7, 9, 13]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 13, 15]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     specialFilter([1,2,3,4,5,6]) == 2\nassert     specialFilter([1,2,3,4,5,6,10]) == 3\nassert     specialFilter([1,2,3,4,5,6,10,100]) == 4\nassert     specialFilter([1,2,3,4,5,6,10,100,101]) == 4\nassert     specialFilter([1,2,3,4,5,6,10,100,101,110]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     specialFilter([5, 9, 8, 6, 1]) == 2\nassert     specialFilter([1, 3, 5, 7, 9]) == 2\nassert     specialFilter([10, 5, 5, 1]) == 0\nassert     specialFilter([5, 10, 9, 8, 6, 1]) == 3\nassert     specialFilter([1, 3, 1, 7, 9]) == 2\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2, \\\n        'specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2'\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3, \\\n        'specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3'\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 6, \\\n        'specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 6'\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 7, \\\n        'specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 7'\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 7, \\\n        'specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 7'\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7]) == 2\nassert     specialFilter([5, 10, 15, 20, 25, 30]) == 3\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7]) == 6\nassert     specialFilter([5, 10, 15, 20, 25, 30]) == 6\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     specialFilter([13, 19, 23, 39, 27, 12, 4, 56, 39, 18, 20, 45]) == 3\nassert     specialFilter([14, 10, 22, 54, 56, 29, 1, 20]) == 5\nassert     specialFilter([1, 2, 3, 4, 5]) == 0\nassert     specialFilter([11, 22, 33, 44, 55]) == 4\nassert     specialFilter([0, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 6\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 8\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 9\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 1\nassert     get_max_triples(2) == 0\nassert     get_max_triples(5) == 3\nassert     get_max_triples(6) == 2\nassert     get_max_triples(7) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 3\nassert     get_max_triples(5) == 4\nassert     get_max_triples(6) == 8\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 6\nassert     get_max_triples(5) == 10\nassert     get_max_triples(6) == 12\nassert     get_max_triples(7) == 14\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_max_triples(2) == 3, get_max_triples(2)\nassert     get_max_triples(3) == 6, get_max_triples(3)\nassert     get_max_triples(4) == 12, get_max_triples(4)\nassert     get_max_triples(5) == 20, get_max_triples(5)\nassert     get_max_triples(6) == 42, get_max_triples(6)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 4\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 2\nassert     get_max_triples(6) == 7\nassert     get_max_triples(7) == 18\nassert     get_max_triples(8) == 36\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 0\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 4\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Earth') == ('Venus', 'Mars')\nassert     bf('Earth', 'Mercury') == ('Venus', 'Mars')\nassert     bf('Mercury', 'Neptune') == ('Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Jupiter') == ('Mercury', 'Venus', 'Mars')\nassert     bf('Earth', 'Saturn') == ('Uranus', 'Neptune', 'Jupiter', 'Venus', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Mars') == ('Venus', 'Jupiter', 'Saturn')\nassert     bf('Neptune', 'Earth') == ('Neptune',)\nassert     bf('Earth', 'Mercury') == ()\nassert     bf('Earth', 'Neptune') == ()\nassert     bf('Mercury', 'Neptune') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     bf(\"Mercury\", \"Neptune\")         == (\"Venus\", \"Earth\", \"Mars\")\nassert     bf(\"Neptune\", \"Venus\")         == (\"Earth\",)\nassert     bf(\"Earth\", \"Mercury\")         == (\"Venus\",)\nassert     bf(\"Earth\", \"Mercury\")         == ()\nassert     bf(\"Earth\", \"Earth\")             == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Uranus') == ('Uranus', 'Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Neptune') == ('Neptune',)\nassert     bf('Earth', 'Jupiter') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Saturn', 'Venus') == ('Venus', 'Earth', 'Mars')\nassert     bf('Venus', 'Mercury') == ('Mercury', 'Earth', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Neptune') == ('Venus', 'Earth', 'Mars'), 'incorrect'\nassert     bf('Earth', 'Neptune') == ('Neptune',), 'incorrect'\nassert     bf('Earth', 'Mercury') == ('Venus', 'Mars'), 'incorrect'\nassert     bf('Earth', 'Earth') == ('Mercury', 'Venus'), 'incorrect'\nassert     bf('Jupiter', 'Neptune') == (), 'incorrect'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     bf(\"Mercury\", \"Saturn\") == (\n        \"Venus\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Earth\", \"Mars\"\n    )\nassert bf(\"Earth\", \"Jupiter\") == (\n        \"Venus\", \"Uranus\", \"Neptune\", \"Earth\", \"Mars\", \"Mercury\", \"Saturn\"\n    )\nassert bf(\"Neptune\", \"Earth\") == (\n        \"Uranus\", \"Neptune\", \"Earth\", \"Mars\", \"Mercury\", \"Saturn\", \"Jupiter\"\n    )\n\nprint(\"Success\")"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     bf(\"Mercury\", \"Earth\") == (\"Venus\", \"Mars\")\nassert     bf(\"Earth\", \"Jupiter\") == (\"Saturn\", \"Uranus\")\nassert     bf(\"Earth\", \"Neptune\") == (\"Jupiter\", \"Uranus\", \"Neptune\")\nassert     bf(\"Mars\", \"Mercury\") == (\"Earth\",)\nassert     bf(\"Venus\", \"Mercury\") == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\")\nassert bf(\"Earth\", \"Neptune\") == (\"Neptune\",)\nassert bf(\"Earth\", \"Saturn\") == (\"Saturn\",)\nassert bf(\"Earth\", \"Mars\") == (\"Mars\",)\nassert bf(\"Jupiter\", \"Mercury\") == (\"Jupiter\",)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Uranus') == ('Uranus', 'Neptune', 'Venus')\nassert     bf('Earth', 'Mercury') == ()\nassert     bf('Earth', 'Earth') == ('Earth')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Jupiter',)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['foo', 'bar', 'bar', 'baz']) == ['foo', 'bar', 'baz']\nassert     sorted_list_sum(['foo', 'bar', 'bar', 'foo']) == ['bar', 'foo']\nassert     sorted_list_sum(['foo', 'bar', 'bar', 'baz', 'baz']) == ['bar', 'baz', 'foo']\nassert     sorted_list_sum(['foo', 'bar', 'bar', 'baz', 'baz', 'foo']) == ['bar', 'baz', 'foo']\nassert     sorted_list_sum(['foo', 'bar', 'bar', 'baz', 'baz', 'foo', 'foo']) == ['bar', 'baz', 'foo']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sorted_list_sum(['a','s', 'd', 'f', 'g']) == ['a', 'd', 'f','s', 'g'], \\\n        'should return a list of strings in sorted order'\nassert     sorted_list_sum(['c', 'd', 'f', 'g']) == ['c', 'd', 'f', 'g'], \\\n        'should return a list of strings in sorted order'\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c']) == \\\n        ['a', 'a', 'a', 'a', 'c', 'b', 'b', 'b'], \\\n        'should return a list of strings in sorted order'\nassert     sorted_list_sum([]) == [], \\\n        'should return an empty list'\nassert     sorted_list_sum(['a','s', 'd', 'f', 'g', 'a','s']) == \\\n        ['a', 'a', 'd', 'f', 'g','s','s'], \\\n        'should return a list of strings in sorted order'"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['a', 'bb', 'c', 'd']) == ['a', 'bb', 'c']\nassert     sorted_list_sum(['a', 'x', 'bb', 'c', 'd']) == ['a', 'bb', 'c']\nassert     sorted_list_sum(['a', 'x', 'bb', 'cc', 'd']) == ['a', 'bb', 'cc']\nassert     sorted_list_sum(['a', 'bb', 'c']) == ['a', 'bb', 'c']\nassert     sorted_list_sum(['a', 'x', 'bb', 'c']) == ['a', 'x', 'bb']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sorted_list_sum(['d', 'c', 'b', 'a']) == ['a', 'b', 'c', 'd'], 'error'\nassert     sorted_list_sum(['a', 'd', 'b', 'c']) == ['a', 'b', 'c', 'd'], 'error'\nassert     sorted_list_sum(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd'], 'error'\nassert     sorted_list_sum(['a', 'd', 'b', 'c']) == ['a', 'b', 'c', 'd'], 'error'\nassert     sorted_list_sum(['c', 'a', 'd', 'b']) == ['a', 'b', 'c', 'd'], 'error'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['a', 'abc', 'abcd', 'abcd', 'bc', 'bcde', 'c', 'd']) == ['a', 'abc', 'abcd', 'bc', 'bcde', 'd'], \"Test 1 Failed\"\nassert sorted_list_sum(['a', 'abc', 'abcd', 'abcd', 'bc', 'bcde', 'c', 'd']) == ['a', 'abc', 'abcd', 'bc', 'bcde', 'd'], \"Test 2 Failed\"\nassert sorted_list_sum(['a', 'abc', 'abcd', 'abcd', 'bc', 'bcde', 'c', 'd']) == ['a', 'abc', 'abcd', 'bc', 'bcde', 'd'], \"Test 3 Failed\"\nassert sorted_list_sum(['a', 'abc', 'abcd', 'abcd', 'bc', 'bcde', 'c', 'd']) == ['a', 'abc', 'abcd', 'bc', 'bcde', 'd'], \"Test 4 Failed\"\nassert sorted_list_sum(['a', 'abc', 'abcd', 'abcd', 'bc', 'bcde', 'c', 'd']) == ['a', 'abc', 'abcd', 'bc', 'bcde', 'd'], \"Test 5 Failed\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    assert sorted_list_sum([]) == []\n    assert sorted_list_sum(['a', 'b', 'c']) == ['a', 'b', 'c']\n    assert sorted_list_sum(['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\n    assert sorted_list_sum(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c']\n    "
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([\"a\", \"e\", \"i\"]) == [\"a\", \"e\", \"i\"]\nassert     sorted_list_sum([\"a\", \"bb\", \"ccc\"]) == [\"a\", \"bb\", \"ccc\"]\nassert     sorted_list_sum([\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]) == [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\nassert     sorted_list_sum([\"y\", \"o\", \"u\"]) == [\"o\", \"u\", \"y\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"Elie\", \"Tim\", \"Matt\"]) == \\\n        [\"Tim\", \"Elie\", \"Matt\"]\nassert     sorted_list_sum([\"John\", \"Eric\", \"Jessica\"]) == \\\n        [\"Eric\", \"John\", \"Jessica\"]\nassert     sorted_list_sum([\"Hilary\", \"Andressa\", \"Elizabeth\"]) == \\\n        [\"Hilary\", \"Andressa\", \"Elizabeth\"]\nassert     sorted_list_sum([\"Nick\", \"John\", \"Eric\", \"Andy\", \"Sarah\", \"Mike\"]) == \\\n        [\"Andy\", \"Eric\", \"John\", \"Mike\", \"Sarah\", \"Nick\"]\nassert     sorted_list_sum([\"John\", \"Andressa\", \"Hilary\", \"Elie\", \"Jessica\"]) == \\\n        [\"Andressa\", \"Hilary\", \"Elie\", \"Jessica\", \"John\"]\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     x_or_y(3, 10, 20) == 10\nassert     x_or_y(4, 10, 20) == 20\nassert     x_or_y(5, 10, 20) == 20\nassert     x_or_y(3, 10, 20) == 10\nassert     x_or_y(7, 10, 20) == 20\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     x_or_y(2,     1,    2) == 1, 'Wrong answer'\nassert     x_or_y(3,     1,    2) == 2, 'Wrong answer'\nassert     x_or_y(11,    2,    3) == 2, 'Wrong answer'\nassert     x_or_y(29,    2,    3) == 3, 'Wrong answer'\n\nprint('You are awesome! All tests passed!')\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     x_or_y(2, 5, 7) == 5\nassert     x_or_y(3, 5, 7) == 7\nassert     x_or_y(5, 5, 7) == 5\nassert     x_or_y(7, 5, 7) == 7\nassert     x_or_y(11, 5, 7) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(4, 1, 2) == 1\nassert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(6, 1, 2) == 1\nprint('The correctness of x_or_y has been tested')"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     x_or_y(3, 5, 2) == 5\nassert     x_or_y(4, 2, 7) == 2\nassert     x_or_y(3, 2, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     x_or_y(3, 1, 2) == 1, \"Wrong answer\"\nassert     x_or_y(5, 1, 2) == 2, \"Wrong answer\"\nassert     x_or_y(4, 1, 2) == 2, \"Wrong answer\"\nprint(\"Correct\")\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     x_or_y(1, 1, 1) == 1\nassert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 2\nassert     x_or_y(5, 1, 1) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert xt_or_yt(1, 1, 1) == 1\nassert xt_or_yt(4, 1, 1) == 1\nassert xt_or_yt(5, 1, 1) == 1\nassert xt_or_yt(6, 1, 1) == 1\nassert xt_or_yt(7, 1, 1) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     x_or_y(1, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(3, 1, 3) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     double_the_difference([1, 2, 3]) == 14\nassert     double_the_difference([1, -2, 3]) == 4\nassert     double_the_difference([]) == 0\n\n\n\ndef is_tachycardic(lst):\n    '''\n    Given a list of words, return True if the list is tachycardic.\n   \n    Otherwise return False.\n   \n    A list is tachycardic if it has three consecutive words where the second\n    word starts with the last letter of the first word, and the third word\n    starts with the second to last letter of the first word.\n   \n    Ignore capitalization when determining if a word is the second word.\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6]) == 29\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     double_the_difference([1,2,3,4,5])     == 5\nassert     double_the_difference([1,2,3,4,5,6])     == 16\nassert     double_the_difference([1,3,4,5,6])     == 0\nassert     double_the_difference([])         == 0\n\nprint('All tests have passed!')\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     double_the_difference([0,0,0]) == 0\nassert     double_the_difference([1,3,5,8]) == 120\nassert     double_the_difference([2,4,6,7]) == 169\nassert     double_the_difference([-5,7,8]) == 29\nassert     double_the_difference([-7,8,9,10,8]) == 289\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     double_the_difference([3, 2, 5, -4, -3, 6]) == 50\nassert     double_the_difference([3, 2.5, 5, -4, -3.8, 6]) == 30.9\nassert     double_the_difference([]) == 0\nassert     double_the_difference([3]) == 0\nassert     double_the_difference([0]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 13\nassert     double_the_difference([-1, 2, 3, 4, 5]) == 0\nassert     double_the_difference([1.1, 2.2, 3.3, 4.4, 5.5]) == 0\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, -2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8]) == 53\nassert double_the_difference([10, -5, 20, 15, -30, 35]) == 250\nassert double_the_difference([]) == 0\nassert double_the_difference([9]) == 81\nassert double_the_difference([0, 1]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     double_the_difference([5, 4, 3]) == 20\nassert     double_the_difference([1, 2, 3, 4, 5]) == 36\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-3, -2, -1, -4, -5, -7]) == 0\nassert     double_the_difference([9, 4, 3]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 38\nassert     double_the_difference([1,-2,3,-4,5]) == 16\nassert     double_the_difference([1.2,2.3,3.4,4.5]) == 38\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     compare(    [[19,20],[30,25],[9,2],[9,2],[7,10],[6,11],[9,10],[9,10],[6,10]], [[2,1],[8,7],[6,5],[7,10],[8,9],[7,10],[9,10],[6,10],[7,10],[8,10]]) == [4,3,2,1,0,1,1,0,1,2], 'Test #1'\nassert     compare(    [[15,30],[2,15],[6,18],[4,15],[8,20],[16,25],[17,24],[6,18],[8,20],[16,25]], [[2,1],[4,1],[7,1],[12,1],[15,1],[6,18],[7,10],[15,10],[16,10],[17,10]]) == [10,9,8,7,6,2,1,0,1,2], 'Test #2'\nassert     compare(    [[2,3],[4,3],[6,1],[8,1],[10,1],[12,1],[14,1],[16,1],[18,1],[10,1],[12,1],[14,1],[16,1],[18,1],[10,1],[12,1],[14,1],[16,1],[18,1]], [[2,1],[4,1],[6,3],[8,1],[10,1],[12,1],[14,1],[16,1],[18,1],[10,1],[12,1],[14,1],[16,1],[18,1],[10,1],[12,1],[14,1],[16,1],[18,1]]) == [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1], 'Test #3'\nassert     compare(    [[1,5],[1,10],[3,2],[4,5],[5,5],[7,5],[9,2],[11,2],[12,3],[14,1],[12,3],[14,1],[15,1],[16,1],[18,1],[18,1],[18,1],[20,1],[25,1],[25,1],[25,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]], [[1,1],[1,1],[3,1],[4,1],[5,1],[7,1],[9,1],[10,1],[12,1],[14,1],[15,1],[16,1],[18,1],[18,1],[18,1],[18,1],[20,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]]) == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 'Test #4'\nassert     compare(    [[19,20],[30,25],[9,2],[9,2],[7,10],[6,11],[9,10],[9,10],[6,10]], [[2,1],[8,7],[6,5],[7,10],[8,9],[7,10],[9,10],[6,10],[7,10],[8,10]]) == [4,3,2,1,0,1,1,0,1,2], 'Test #5'\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     compare([0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1]) == [0, 0, 0, 0, 0, 0]\nassert     compare([1, 2, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1]) == [0, 0, 0, 0, 0, 0]\nassert     compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\nassert     compare([3, 10, 30, 34, 35, 40], [1, 1, 1, 1, 1, 1]) == [7, 20, 32, 19, 14, 12]\nassert     compare([40, 36, 35, 34, 33, 32], [1, 1, 1, 1, 1, 1]) == [12, 11, 11, 11, 11, 11]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (compare([\"15 10 10 5 5 5 10\", \"10 10 5 2 3 5 10\"], [\"5\", \"5\", \"10\"]) == [1, 0, 1]), \"error\"\nassert     (compare([\"15 10 10 5 5 5 10\", \"10 10 5 2 3 5 10\"], [\"5\", \"5\", \"10\"]) == [1, 0, 1]), \"error\"\nassert     (compare([\"15 10 10 5 5 5 10\", \"10 10 5 2 3 5 10\"], [\"5\", \"5\", \"10\"]) == [1, 0, 1]), \"error\"\nassert     (compare([\"15 10 10 5 5 5 10\", \"10 10 5 2 3 5 10\"], [\"5\", \"5\", \"10\"]) == [1, 0, 1]), \"error\"\nassert     (compare([\"15 10 10 5 5 5 10\", \"10 10 5 2 3 5 10\"], [\"5\", \"5\", \"10\"]) == [1, 0, 1]), \"error\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     compare([4, 7, 1, 2], [1, 2, 4, 7]) == [1, 0, 1, 2]\nassert     compare([10, 10, 4, 4, 3], [4, 4, 10, 10, 1]) == [1, 1, 1, 1, 3]\nassert     compare([10, 10, 10, 1, 3], [4, 4, 10, 10, 1]) == [0, 0, 0, 2, 3]\nassert     compare([3, 10, 3, 6, 4], [4, 3, 10, 10, 6]) == [0, 1, 2, 2, 1]\nassert     compare([5, 5, 5, 5, 1], [5, 5, 5, 5, 1]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [0, 1, 1, 1]         == compare(game=[50, 30, 20, 10], guess=[30, 20, 10, 40])\nassert     [0, 1, 1, 1]         == compare(game=[50, 30, 20, 10], guess=[30, 35, 20, 10])\nassert     [2, 1, 0, 0]         == compare(game=[50, 30, 20, 10], guess=[30, 35, 40, 10])\nassert     [2, 1, 0, 0]         == compare(game=[50, 30, 20, 10], guess=[30, 35, 40, 30])\nassert     [1, 1, 1, 0]         == compare(game=[50, 30, 20, 10], guess=[30, 30, 20, 40])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert compare(\n        game = [3, 6, 7, 10],\n        guess = [3, 6, 8, 10]\n    ) == [0, 0, 1, 0], 'incorrect result'\n    assert compare(\n        game = [5, 8, 9, 11],\n        guess = [5, 8, 9, 10]\n    ) == [0, 0, 2, 2], 'incorrect result'\n    assert compare(\n        game = [2, 3, 6, 7],\n        guess = [2, 5, 6, 7]\n    ) == [0, 2, 1, 3], 'incorrect result'"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     compare(game=[1,2,3,4,5,6,7,8], guess=[1,2,3,4,5,6,7,8]) == [0,0,0,0,0,0,0,0], 'incorrect'\nassert     compare(game=[1,3,2,4,2], guess=[2,1,2,3,2]) == [1,1,0,1,1], 'incorrect'\nassert     compare(game=[1,5,2,3,4], guess=[1,2,3,4,5]) == [1,0,1,0,1], 'incorrect'\nassert     compare(game=[1,2,3,4,5], guess=[1,2,3,4,5]) == [0,0,0,0,0], 'incorrect'\n\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     compare( [14, 15, 16, 17], [15, 16, 17, 20]) == [1, 1, 1, 2]\nassert     compare( [5, 7, 6, 8], [6, 7, 8, 9]) == [0, 1, 2, 3]\nassert     compare( [15, 17, 18, 19, 20, 21, 22], [21, 22, 23, 24, 25, 26, 27]) == [0, 1, 2, 3, 4, 5, 6]\n\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     compare([12, 11, 13, 14, 15], [11, 12, 12, 14, 11]) == [1, 1, 0, 2, 1]\nassert     compare([12, 11, 13, 14, 15], [11, 13, 12, 14, 15]) == [0, 1, 0, 2, 0]\nassert     compare([12, 11, 13, 14, 15], [13, 12, 12, 14, 15]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare([3, 7, 1], [1, 3, 3]) == [0, 0, 1]\nassert     compare([5, 2, 6], [1, 5, 6]) == [0, 1, 1]\nassert     compare([0, 0, 0], [1, 0, 0]) == [0, 0, 0]\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(compare([3, 3, 3, 2, 2, 2, 1, 1, 1], [3, 3, 3, 3, 2, 2, 2, 1, 1]))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    "
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Bacon']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Bacon', 'Bacon']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Bacon', 'Bacon', 'Bacon']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'StuFfed', 'Bacon', 'Bacon', 'Bacon', 'Bacon']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     Strongest_Extension(\"Avenger\", [\"Armth\", \"Avenger\", \"AvengerLegs\", \"AvengerMan\"]) == \"Avenger.AvengerMan\"\nassert     Strongest_Extension(\"Avenger\", [\"Avenger\", \"AvengerLegs\", \"AvengerMan\", \"Armth\"]) == \"Avenger.AvengerMan\"\nassert     Strongest_Extension(\"Avenger\", [\"Armth\", \"Avenger\", \"AvengerLegs\", \"AvengerMan\"]) == \"Avenger.AvengerMan\"\nassert     Strongest_Extension(\"Avenger\", [\"Avenger\", \"AvengerLegs\", \"AvengerMan\", \"Armth\"]) == \"Avenger.AvengerMan\"\nassert     Strongest_Extension(\"Avenger\", [\"Armth\", \"Avenger\", \"AvengerLegs\", \"AvengerMan\"]) == \"Avenger.AvengerMan\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"Slices\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"1st example\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"2nd example\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"3rd example\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Sharks', ['Tuna', 'Shark', 'Trip', 'Stephan']) == 'Sharks.Shark'\nassert     Strongest_Extension('CATS', ['Cat', 'CAT']) == 'CATS.CAT'\nassert     Strongest_Extension('Dogs', ['Dog', 'DOG']) == 'Dogs.DOG'\n\n\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Slices']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'Slices']) == 'Slices.Slices'\nassert     Strongest_Extension('Slices', ['Cheese', 'Slices', 'Slices']) == 'Slices.Slices'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Lettuce\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Lettuce\", \"Sarogate\"]) == \"Slices.Lettuce\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Lettuce\", \"Sarogate\", \"Grill\"]) == \"Slices.Sarogate\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Lettuce\", \"Sarogate\", \"Grill\", \"Vinegar\"]) == \"Slices.Grill\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed', 'StuFfed', 'StuFfed', 'StuFfed', 'StuFfed', 'StuFfed', 'StuFfed', 'StuFfed']) == 'Slices.StuFfed'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert         Strongest_Extension('ToDoList', ['ToDo', 'ToDO', 'Done']) == 'ToDoList.ToDo'\nassert         Strongest_Extension('Pragmatic', ['Urgent', 'Critical']) == 'Pragmatic.Urgent'\nassert         Strongest_Extension('Slices', ['Cheese', 'Chesse', 'SsCheese', 'CheeseSs']) == 'Slices.Chesse'\nassert         Strongest_Extension('Python', ['Py', 'on', 'Thon', 'Yo']) == 'Python.Py'\nassert         Strongest_Extension('Quick', ['Quick', 'QuIcK']) == 'Quick.QuIcK'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'Slices']) == 'Slices.Slices'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'StuFfed', 'Cheese']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     cycpattern_check('abcd', 'cdab') == True\nassert     cycpattern_check('abcd', 'abcd') == True\nassert     cycpattern_check('abc', 'abcd') == False\nassert     cycpattern_check('abcd', 'abc') == False\nassert     cycpattern_check('abcd', 'acb') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"abcdefg\", \"bcde\") == True \nassert     cycpattern_check(\"abcdefg\", \"cdefg\") == True\nassert     cycpattern_check(\"abcdefg\", \"bcdefg\") == True\nassert     cycpattern_check(\"abcdefg\", \"bcdef\") == False\nassert     cycpattern_check(\"abcdefg\", \"cdef\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"akdwpkasfjqfkfdsf\", \"kfdsf\") == True\nassert     cycpattern_check(\"akdwpkasfjqfkfdsf\", \"akdwpkasfjqfkfdsf\") == False\nassert     cycpattern_check(\"akdwpkasfjqfkfdsf\", \"kjfdsf\") == True\nassert     cycpattern_check(\"akdwpkasfjqfkfdsf\", \"awpkasfjqfkfdsf\") == True\nassert     cycpattern_check(\"akdwpkasfjqfkfdsf\", \"dwpkasfjqfkfdsf\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"abcd\", \"bc\") == True, \"Wrong output\"\nassert     cycpattern_check(\"abcdefg\", \"bcde\") == True, \"Wrong output\"\nassert     cycpattern_check(\"abcdefg\", \"bcdef\") == True, \"Wrong output\"\nassert     cycpattern_check(\"abcdefg\", \"bcdf\") == False, \"Wrong output\"\nassert     cycpattern_check(\"abcdefg\", \"bd\") == False, \"Wrong output\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"abcd\",\"abcd\") == True, \"1st example\"\nassert     cycpattern_check(\"abcd\",\"abc\") == False, \"2nd example\"\nassert     cycpattern_check(\"123\",\"1\") == True, \"3rd example\"\nassert     cycpattern_check(\"123\",\"12\") == True, \"4th example\"\nassert     cycpattern_check(\"123\",\"13\") == False, \"5th example\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"ABCD\", \"CDABC\")     == True\nassert     cycpattern_check(\"ABCD\", \"D\")     == True\nassert     cycpattern_check(\"ABCD\", \"BCDABCD\")     == False\nassert     cycpattern_check(\"ABCD\", \"\")     == False\nassert     cycpattern_check(\"ABCD\", \"CBAD\")     == False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (even_odd_count(23) == (1,2)), \"wrong result\"\nassert     (even_odd_count(24) == (0,3)), \"wrong result\"\n\ndef positive_negative_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of positive and negative digits respectively.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     even_odd_count(5) == (1, 4)\nassert     even_odd_count(12) == (2, 5)\nassert     even_odd_count(101) == (4, 5)\nassert     even_odd_count(12345) == (3, 5)\nassert     even_odd_count(23456) == (5, 3)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_count(123) == (1,2), \"Wrong output for even_odd_count(123)\"\nassert     even_odd_count(1000) == (0,1), \"Wrong output for even_odd_count(1000)\"\nassert     even_odd_count(101010) == (1,0), \"Wrong output for even_odd_count(101010)\"\nassert     even_odd_count(125125) == (0,3), \"Wrong output for even_odd_count(125125)\"\nassert     even_odd_count(6) == (0,1), \"Wrong output for even_odd_count(6)\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    even_odd_count(2345) == (5, 4)\n    even_odd_count(8989) == (5, 5)\n    even_odd_count(54321) == (4, 5)\n    even_odd_count(54321) == (4, 5)\n    even_odd_count(123456789) == (9, 1)\n    even_odd_count(321) == (3, 2)\n\n\ndef str_del_count(inp_str):\n    \"\"\" Given an input string, return the number of characters that were deleted from the string by deleting the same character twice (if they are present). \n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     even_odd_count(12) == (2, 0)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(3) == (0, 1)\nassert     even_odd_count(59) == (3, 2)\n\n\ndef reverse_int(num):\n    \"\"\"Given an integer. return the integer reversed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     even_odd_count(123) == (3,6)\nassert     even_odd_count(456) == (4,5)\nassert     even_odd_count(123456) == (6,4)\nassert     even_odd_count(99) == (1,9)\nassert     even_odd_count(90) == (0,10)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\nassert     int_to_mini_roman(9) == 'IX'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = int(input('int_to_mini_roman: '))\n    assert (0 < n <= 1000)\n    print(int_to_mini_roman(n))"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(3) == 'iii'\nassert int_to_mini_roman(4) == 'iv'\nassert int_to_mini_roman(9) == 'ix'\nassert int_to_mini_roman(58) == 'LVIII'\nassert int_to_mini_roman(1994) == 'MCMXCIV'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert int_to_mini_roman(4) == 'iv'\nassert int_to_mini_roman(5) == 'v'\nassert int_to_mini_roman(10) == 'x'\nassert int_to_mini_roman(21) == 'xxi'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(6) == 'VI'\nassert     int_to_mini_roman(8) == 'VIII'\nassert     int_to_mini_roman(18) == 'XVIII'\nassert     int_to_mini_roman(10) == 'X'\nassert     int_to_mini_roman(16) == 'XVI'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(2) == \"ii\"\nassert     int_to_mini_roman(3) == \"iii\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\nassert     int_to_mini_roman(8) == 'VIII'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(2) == 'II'\nassert int_to_mini_roman(3) == 'III'\nassert int_to_mini_roman(5) == 'V'\nassert int_to_mini_roman(12) == 'XII'\nassert int_to_mini_roman(13) == 'XIII'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    number = int(input(\"Enter number: \"))\n    print(\"Roman numeral representation is:\", int_to_mini_roman(number))\n    print(\"Pass\" if int_to_mini_roman(number) == \"MMMCCC\" else \"Fail\")"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    a, b, c = 2, 4, 6\n    print(right_angle_triangle(a, b, c))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(4, 4, 4) == True\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(3, 4, 7) == True\nassert     right_angle_triangle(3, 4, 5.9) == False\nassert     right_angle_triangle(3, 4, 10) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(5, 4, 3) == True\nassert     right_angle_triangle(10, 4, 3) == False\nassert     right_angle_triangle(5, 3, 4) == False\nassert     right_angle_triangle(5, 10, 3) == False\nassert     right_angle_triangle(5, 5, 10) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(4, 5, 6) == True\nassert     right_angle_triangle(6, 4, 5) == False\nassert     right_angle_triangle(7, 9, 12) == True\nassert     right_angle_triangle(12, 9, 7) == False\nassert     right_angle_triangle(4, 8, 9) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, \"This should be True\"\nassert     right_angle_triangle(12, 5, 13) == False, \"This should be False\"\nassert     right_angle_triangle(5, 12, 13) == True, \"This should be True\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(5, 4, 3) == True, \"Shortest side is the hypotenuse.\"\nassert     right_angle_triangle(2, 2, 2) == True, \"Equilateral triangle\"\nassert     right_angle_triangle(1, 2, 3) == False, \"Not right-angled.\"\nassert     right_angle_triangle(2, 3, 4) == False, \"Two sides don't form a right angle.\"\nassert     right_angle_triangle(3, 4, 5) == False, \"No side is equal to the sum of the other two.\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(4, 4, 4)\nassert     right_angle_triangle(3, 4, 5)\nassert     not right_angle_triangle(4, 4, 3)\nassert     not right_angle_triangle(10, 4, 5)\nassert     not right_angle_triangle(1, 1, 10)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'chair'\nassert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'hello'\nassert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'rainbow'\nassert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'world'\nassert     find_max(['rainbow', 'chair', 'hello', 'world']) == 'rainbow'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_max(['at','apple','bat']) == 'bat'\nassert     find_max(['at','ab','apple','bat']) == 'bat'\nassert     find_max(['at','apple','bat','at']) == 'bat'\nassert     find_max(['at','ab','apple','bat','at']) == 'bat'\nassert     find_max(['a','ab','apple','bat','at']) == 'a'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_max(['a', 'ab', 'abc', 'bc']) == 'bc'\nassert     find_max(['aaa', 'bbbb', 'b', 'ccc', 'dddd']) == 'aaaa'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']) == 'j'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'z'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_max(['Hello', 'He', 'Hel', 'Hell', 'Hello']) == 'Hello'\nassert     find_max(['abc', 'abcd', 'abcde', 'ab', 'a', 'aa']) == 'abcde'\nassert     find_max(['hello', '', 'hello', 'goodbye']) == 'hello'\nassert     find_max([]) == None\nassert     find_max(['hello', 'world', 'zoo', '', 'a', 'hello', 'goodbye']) == 'hello'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_max([\"papa\", \"mama\", \"baba\", \"dada\"]) == \"dada\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"f\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\"]) == \"d\"\nassert     find_max([\"a\", \"b\", \"c\"]) == \"a\"\nassert     find_max([\"b\", \"b\", \"b\", \"b\"]) == \"b\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_max(['hello', 'world', 'python', 'learn', 'python']) == 'python'\nassert     find_max(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'e', 'f']) == 'e'\nassert     find_max(['a', 'a', 'b', 'c', 'd', 'd', 'e']) == 'd'\nassert     find_max(['x', 'y', 'z']) == 'x'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_max(['abcdef', 'abcdabcd', 'abcd', '1234', 'abcd', '1234']) == '1234'\nassert     find_max(['abcdef', 'abcdabcd', 'abcd', '1234', 'abcd', '1234', 'abcdef', '1234']) == 'abcdef'\nassert     find_max(['abcd', '1234', 'abcd', '1234']) == '1234'\nassert     find_max(['abcdef', 'abcdabcd', 'abcd', '1234', 'abcd', '1234', 'abcdef', '1234', 'abcd']) == 'abcd'\nassert     find_max(['abcdef', 'abcdabcd', 'abcd', '1234', 'abcd', '1234', 'abcdef', '1234', 'abcd', 'abcd']) == 'abcd'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     eat(10, 20, 30) == [20, 0]\nassert     eat(0, 20, 10) == [20, 0]\nassert     eat(0, 0, 10) == [0, 10]\nassert     eat(0, 20, 0) == [0, 0]\nassert     eat(10, 20, 10) == [20, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     eat(0, 2, 3) == [ 2, 0 ]\nassert     eat(1, 2, 3) == [ 2, 1 ]\nassert     eat(2, 2, 3) == [ 2, 2 ]\nassert     eat(3, 2, 3) == [ 2, 1 ]\nassert     eat(4, 2, 3) == [ 2, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     eat(0, 5, 0) == [5, 0]\nassert     eat(3, 5, 2) == [8, 1]\nassert     eat(6, 5, 3) == [10, 2]\nassert     eat(5, 5, 5) == [10, 0]\nassert     eat(8, 5, 10) == [15, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     eat(10, 11, 10) == [10, 0]\nassert     eat(10, 2, 10) == [10, 8]\nassert     eat(10, 11, 10) == [10, 0]\nassert     eat(10, 11, 10) == [10, 0]\nassert     eat(10, 11, 10) == [10, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     eat(5, 8, 10) == [ 8, 2 ]\nassert     eat(7, 6, 7) == [ 6, 1 ]\nassert     eat(8, 6, 7) == [ 6, 0 ]\nassert     eat(8, 8, 8) == [ 8, 0 ]\nassert     eat(9, 8, 8) == [ 8, 1 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     eat(4, 5, 10) == [9, 5]\nassert     eat(4, 5, 10) == [9, 5]\nassert     eat(4, 5, 10) == [9, 5]\n\nassert     eat(4, 5, 10) == [9, 5]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     eat(3, 10, 10) == [3, 10], \"Case 1\"\nassert     eat(4, 5, 2) == [5, 2], \"Case 2\"\nassert     eat(2, 8, 10) == [10, 0], \"Case 3\"\nassert     eat(0, 1, 2) == [1, 2], \"Case 4\"\nassert     eat(2, 4, 5) == [4, 0], \"Case 5\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     do_algebra([add, mul], [1, 2, 3]) == 6\nassert     do_algebra([mul], [3, 4, 5]) == 60\nassert     do_algebra([mul, sub, sub], [1, 2, 3, 4, 5, 6]) == -44\nassert     do_algebra([mul, sub, add], [1, 2, 3, 4, 5, 6]) == 42\n\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     do_algebra(['+', '+'], [1, 2])         ==     3\nassert     do_algebra(['+', '+', '+'], [1, 2, 3])     ==     6\nassert     do_algebra(['+', '+', '+', '+'], [1, 2, 3, 4])     ==     10\nassert     do_algebra(['+', '*'], [1, 2])         ==     3\nassert     do_algebra(['*'], [2])                 ==     2\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     do_algebra(['+'], [1,2,3]) == 6\nassert     do_algebra(['+','-', '+'], [2,2,3]) == 5\nassert     do_algebra(['*', '*', '+'], [1,2,3]) == 7\nassert     do_algebra(['*', '*', '*'], [1,2,3]) == 24\nassert     do_algebra(['//'], [5,2,3]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     do_algebra(['+', '+'], [1, 2]) == 3\nassert     do_algebra(['+', '+', '+'], [1, 2, 3]) == 6\nassert     do_algebra(['+', '+', '+', '+'], [1, 2, 3, 4]) == 10\nassert     do_algebra(['+', '+', '+', '+', '+'], [1, 2, 3, 4, 5]) == 15\nassert     do_algebra(['+', '+', '+', '+', '+', '+'], [1, 2, 3, 4, 5, 6]) == 21\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     do_algebra([\"+\", \"+\"], [1, 2, 3]) == 6\nassert     do_algebra([\"+\", \"+\"], [1, 2, 3, 4]) == 10\nassert     do_algebra([\"-\", \"+\"], [1, 2, 3, 4]) == 3\nassert     do_algebra([\"-\", \"+\"], [1, 2, 3, 4, 5]) == 3\nassert     do_algebra([\"*\", \"+\"], [1, 2, 3, 4]) == 20\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     do_algebra([1, 2, 3, 4, 5], [3, 7, 8, 9, 10]) == 36\nassert     do_algebra([1, 2, 3, 4, 5], [3, 7, 8, 9, 10, 2]) == 42\nassert     do_algebra([1, 2, 3, 4, 5], [3, 7, 8, 9, 10, 2, 1]) == 31\nassert     do_algebra([1, 2, 3, 4, 5], [3, 7, 8, 9, 10, 2, 1, 2]) == 13\nassert     do_algebra([1, 2, 3, 4, 5], [3, 7, 8, 9, 10, 2, 1, 2, 3]) == 9\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     do_algebra(['+'], [3, 1]) == 4\nassert     do_algebra(['+'], [9, 0]) == 9\nassert     do_algebra(['+', '*'], [9, 0]) == 9\nassert     do_algebra(['+', '*'], [9, 2]) == 13\nassert     do_algebra(['+', '*', '+', '*'], [9, 2, 3, 4]) == 58\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     do_algebra([], []) == None\nassert     do_algebra([\"+\"], []) == None\nassert     do_algebra([\"+\", \"+\"], []) == None\nassert     do_algebra([], [1]) == None\nassert     do_algebra([\"+\"], [1]) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     do_algebra([\"+\", \"+\"], [1, 2, 3]) == 6\nassert     do_algebra([\"-\", \"-\", \"+\"], [5, -2, 3]) == 2\nassert     do_algebra([\"-\", \"*\"], [3, 2, 1]) == 4\nassert     do_algebra([\"/\", \"+\"], [1, 1, 1]) == 3\nassert     do_algebra([\"**\", \"*\"], [2, 3, 2]) == 12\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     solve(\"The quick brown fox jumps over the lazy dog\") == \"tHE QuiCk BrOwN fOx jUmps OvEr tHe laZy DoG\"\nassert     solve(\"That is a silly thing to do\") == \"tHAT Is A Silly THing tO Do\"\nassert     solve(\"\") == \""
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solve('AaBbCc') == 'aaBBbcc', 'case #1 incorrect'\nassert     solve('aBcDeFg') == 'ABcdefg', 'case #2 incorrect'\nassert     solve('12345') == '12345', 'case #3 incorrect'\nassert     solve('  ') == '', 'case #4 incorrect'\nassert     solve('Ilove Python') == 'vOePtHnolI', 'case #5 incorrect'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solve('UsWErRE') == 'uSsWwERe'\nassert     solve('1234') == '1234'\nassert     solve('123456789') == '123456789'\nassert     solve('135790') == '123456789'\nassert     solve('hello') == 'hELLO'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solve(\"python\") == \"PYTHON\"\nassert     solve(\"sWoRd\") == \"swORd\"\nassert     solve(\"\") == \"\"\nassert     solve(\" \") == \" \"\n\n\ndef main():\n    s = input()\n    result = solve(s)\n    print(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solve('hello World') == 'HELLO world'\nassert     solve('to be or not to be') == 'TBOTTB ERETNOOT'\nassert     solve('there is no free lunch') == 'ERET NOHT TB FRE ELS NOWEL'\nassert     solve('aA bB cC dD Ee fF gG hH iI jJ kK lL mM nN oO pP qQ rR sS tT uU vV wW xX yY zZ') == 'aA bB cC dD Ee fF gG hH iI jJ kK lL mM nN oO pP qQ rR sS tT uU vV wW xX yY zZ"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solve(\"The Quick Brown Fox\") == \"tHE qUicK BrOwN fOX\"\nassert     solve(\"aBcD efG\") == \"AbCd EfG\"\nassert     solve(\"the quick brown fox\") == \"tHe QuIcK BrOwN fOx\"\nassert     solve(\"\") == \"ReTuRn\"\nassert     solve(\"a\") == \"a\"\nprint(\"PASSED!!!\")\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (solve(\"P@na N$aM\") == \"p@nA m@n\"), \"Case #1 answer is wrong\"\nassert     (solve(\"123456789\") == \"123456789\"), \"Case #2 answer is wrong\"\nassert     (solve(\"\") == \"\"), \"Case #3 answer is wrong\"\nassert     (solve(\"`~!@#$%^&*()-_=+[]{}|;:',<.>/?\") == \"`~!@#$%^&*()-_=+[]{}|;:',<.>/?\"), \"Case #4 answer is wrong\"\nassert     (solve(\"@%^&*()\") == \"@%^&*()\"), \"Case #5 answer is wrong\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(solve('HackerRank.com presents \"Pythonist 2\"') == 'hACKERrANK.COM PRESENTS \"pYTHONIST 2\"')\n\n\n\"\"\"\nPython Tutorial: Strings - Begginers\n\"\""
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     solve(\" \") == \" \"\nassert     solve(\"ABC\") == \"abc\"\nassert     solve(\"aBcDeFg\") == \"AbCdEfG\"\nassert     solve(\"ABCD\") == \"ABCD\"\nassert     solve(\"aBCD\") == \"aBCD\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solve(\"This is a test\") == \"tISH iS a taTEST\"\nassert     solve(\"AbCd EfGh\") == \"bAD CeFgH\"\nassert     solve(\"aBcDe fgHi\") == \"ABdEgHi\"\nassert     solve(\"123\") == \"321\"\nprint(\"Tests passed.\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef md5_to_string(hash):\n    \"\"\"\n    Given an md5 hash, return its hex representation.\n    If 'hash' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('abc') == None\nassert     string_to_md5('abc') == None\nassert     string_to_md5(string_to_md5('abc')) == None\nassert     string_to_md5(string_to_md5('abc')) == None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     generate_integers(0, 10) == [0, 2, 4, 6, 8]\nassert     generate_integers(10, 20) == [10, 12, 14, 16, 18]\nassert     generate_integers(10, 23) == [10, 12, 14, 16, 18, 20]\nassert     generate_integers(20, 30) == [20, 22, 24, 26, 28]\nassert     generate_integers(10, 50) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef test_generate_integers():\n    assert generate_integers(4, 9) == [4, 6, 8]\n    assert generate_integers(1, 5) == [2, 4]\n    assert generate_integers(9, 17) == [10, 12, 14, 16]\n    "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef main():\n    print(generate_integers(6, 9))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     generate_integers(4, 8) == [4, 6, 8]\nassert     generate_integers(8, 8) == [8]\nassert     generate_integers(8, 8) == [8]\nassert     generate_integers(1, 16) == [2, 4, 8, 16]\nassert     generate_integers(7, 2) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     generate_integers(23, 57) == [24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56]\nassert     generate_integers(1, 2) == []\nassert     generate_integers(2, 2) == [2]\nassert     generate_integers(2, 1) == [2]\n"
    }
]