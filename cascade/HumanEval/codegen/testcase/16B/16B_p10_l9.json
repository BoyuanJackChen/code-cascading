[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 0.1) == True\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 0.2) == False\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 0.8) == True\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 0.9) == False\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7], 1.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     has_close_elements([1,2,3], 1) == True\nassert     has_close_elements([1,2,3], 2) == True\nassert     has_close_elements([1,2,3], 3) == False\nassert     has_close_elements([1,2,3,4], 2) == False\nassert     has_close_elements([1,2,3,4,5], 3) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 0.3) == False\nassert     has_close_elements([1, 2, 3, 4], 0.5) == True\nassert     has_close_elements([1, 2, 3, 4], 0.7) == True\n\ndef has_close_elements_in_list(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Same as has_close_elements, but takes in list of numbers instead of just a single\n    number.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 3], 0.1) == False\nassert     has_close_elements([1, 2, 3], 0.01) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.01) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     has_close_elements([1, 1.1, 1.2], 0.5) == True\nassert     has_close_elements([1, 1.1, 1.2], 0.1) == False\nassert     has_close_elements([1, 1.1, 1.2], 0.9) == True\nassert     has_close_elements([1, 1.1, 1.2], 0.3) == False\nassert     has_close_elements([1, 1.1, 1.2], 0.7) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 2) == True\nassert     has_close_elements([1, 2, 3, 4], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8], 4) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8], 5) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8], 6) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0], threshold=0.0) == False\nassert     has_close_elements([0.1, 0.2, 0.3], threshold=0.0) == False\nassert     has_close_elements([0.2, 0.1, 0.3], threshold=0.0) == True\nassert     has_close_elements([0.0, 0.0, 0.0], threshold=0.0) == False\nassert     has_close_elements([0.1, 0.2, 0.3], threshold=0.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     has_close_elements([1.1, 2.2, 3.3], 0.2) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4], 0.2) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 0.2) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 0.3) == False\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 0.2) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 2) == False, \"Wrong answer for [1, 2, 3, 4] with 2\"\nassert     has_close_elements([1, 2, 3, 4], 0.5) == True, \"Wrong answer for [1, 2, 3, 4] with 0.5\"\nassert     has_close_elements([1, 2, 3, 4], 3) == True, \"Wrong answer for [1, 2, 3, 4] with 3\"\nassert     has_close_elements([1, 2, 3, 4], 4) == False, \"Wrong answer for [1, 2, 3, 4] with 4\"\nassert     has_close_elements([0, 2, 3, 4], 3) == False, \"Wrong answer for [0, 2, 3, 4] with 3\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     has_close_elements([], 0.1) == False\nassert     has_close_elements([1], 0.1) == False\nassert     has_close_elements([1, 1], 0.1) == False\nassert     has_close_elements([1, 1, 1], 0.1) == False\nassert     has_close_elements([1, 1, 1, 1], 0.1) == False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('(1) or (2) or 3') == ['1', '2', '3']\nassert     separate_paren_groups('(1) or (2) or (3)') == ['1', '2', '3']\nassert     separate_paren_groups('((1))') == ['1']\nassert     separate_paren_groups('(1) or (2) or (3)') == ['1', '2', '3']\nassert     separate_paren_groups('(1) or (2) or (3) and ((5) or (6))') == ['1', '2', '3', '5', '6']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     separate_paren_groups('(()())') == ['(())', '(())']\nassert     separate_paren_groups('(())(())') == ['(())', '(())']\nassert     separate_paren_groups('((()))') == ['((()))']\nassert     separate_paren_groups('())(') == ['()', '(']\n\n\ndef is_matched(expression: str) -> bool:\n    \"\"\"\n    Input to this function is a string representing a mathematical expression in the format defined above.\n    Your goal is to determine whether the expression is \"matched\" or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('(((((())())()()))())') == ['(((((())())()()))())', '(()())', '()', '()', '()', '()']\nassert     separate_paren_groups('((())()())') == ['((())())()', '(())', '()', '()', '()']\nassert     separate_paren_groups('())') == ['()', '()']\nassert     separate_paren_groups('()') == ['', '()']\nassert     separate_paren_groups('(())') == ['(())', '()']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(())()\") == [\"(())()\", \"()\"]\nassert     separate_paren_groups(\"(((())))()\") == [\"(((())())\", \"()\"]\nassert     separate_paren_groups(\"((())\") == [\"((()))\"]\n\n\ndef multiply_even_numbers(numbers: List[int]) -> int:\n    \"\"\" Multiply together the even numbers from a list of numbers. Ignore any 0 values.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(())()\") == [\"()\", \"()\"]\nassert     separate_paren_groups(\"()()\") == [\"\", \"\"]\nassert     separate_paren_groups(\"(()(()))\") == [\"(()(()))\"]\nassert     separate_paren_groups(\"((())())\") == [\"((())())\", \"(())\"]\nassert     separate_paren_groups(\"(()())(()())\") == [\"(()())(()())\", \"()()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(4-1)\") == [\"(4-1)\"]\nassert     separate_paren_groups(\"(4-1))\") == [\"(4-1)\"]\nassert     separate_paren_groups(\"(4-1) (3-2)\") == [\"(4-1)\", \"(3-2)\"]\nassert     separate_paren_groups(\"(4-1) (3-2) (5-6)\") == [\"(4-1)\", \"(3-2)\", \"(5-6)\"]\nassert     separate_paren_groups(\"(1-1) (2-2) (3-3) (4-4) (5-5)\") == [\"(1-1)\", \"(2-2)\", \"(3-3)\", \"(4-4)\", \"(5-5)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(())()()\") == ['(())()', '(())', '()']\nassert     separate_paren_groups(\"((()))\") == ['((()))']\nassert     separate_paren_groups(\"(()\") == ['(())']\nassert     separate_paren_groups(\"(()(()(())())())\") == ['(()(()(())())())', '(()(())())', '()']\nassert     separate_paren_groups(\"\") == []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"((()())(())()()(()))\") == \\\n
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     separate_paren_groups('') == ['']\nassert     separate_paren_groups('()') == ['()']\nassert     separate_paren_groups('(((())))') == ['(((())))']\nassert     separate_paren_groups('(())') == ['(())']\nassert     separate_paren_groups('(()(()))') == ['(()(()))']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"(()())\", \"\", \"\", \"\", \"\"]\nassert     separate_paren_groups(\"(()()) (()()())\") == [\"(()())\", \"(()())\", \"\", \"\", \"\", \"\"]\nassert     separate_paren_groups(\"())\") == [\"\", \"\")\nassert     separate_paren_groups(\"((()))\") == [\"((()))\", \"\"]\nassert     separate_paren_groups(\"(((())))\") == [\"(((())))\", \"\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     truncate_number(4.2) == 0.2\nassert     truncate_number(4.1) == 0\nassert     truncate_number(4.0) == 0\n\ndef calc_factor_multiplier(number: float) -> float:\n    \"\"\" Given a positive floating point number, return the factor multiplier,\n    corresponding to the biggest integer smaller than the given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     truncate_number(2.12) == 0.12\nassert     truncate_number(-0.12) == -0.12\nassert     truncate_number(1.12) == 0.12\nassert     truncate_number(2.33) == 0.33\nassert     truncate_number(2.999) == 0.99\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     truncate_number(10.3) == 0.3\nassert     truncate_number(0.5)     == 0.5\nassert     truncate_number(-1.5) == -1\nassert     truncate_number(0.9)     == 0\nassert     truncate_number(0.8)     == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     truncate_number(9.1235) == 0\nassert     truncate_number(9.1235) == 0\nassert     truncate_number(9.1235) == 0\nassert     truncate_number(9.1235) == 0\nassert     truncate_number(9.1235) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     truncate_number(123.4567) == 0.4567\nassert     truncate_number(345.67) == 0.67\nassert     truncate_number(-345.67) == -0.67\nassert     truncate_number(0.0) == 0.0\nassert     truncate_number(1.0) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef get_exponent(number: float) -> int:\n    \"\"\" Given a floating point number, it can be decomposed into a mantissa and\n    exponent.\n\n    Return the exponent of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     truncate_number(0.32) == 0\nassert     truncate_number(1.32) == 1\nassert     truncate_number(1.20) == 1\nassert     truncate_number(0.32 + 0.1 + 0.2) == 0.3\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     truncate_number(1.1234) == 0.1234\nassert     truncate_number(0.1234) == 0\nassert     truncate_number(0.1234, 1) == 0.1\nassert     truncate_number(0.1234, 2) == 0.12\nassert     truncate_number(0.1234, 3) == 0.123\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -20, -30, -40, -50]) == True\nassert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]) == False\nassert     below_zero([1, 2, 3, 4, 5, -3, -2, -1, 0, 9]) == True\nassert     below_zero([1, 2, 3, 4, 5, -3, -2, -1, 0, 9, -5]) == True\nassert     below_zero([1, 2, 3, 4, 5, -3, -2, -1, 0, 9, -5, -4, -3, -2, -1, -1, 0, 9, -5, -4, -3, -2, -1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_zero([5, 5, 4, 4, -1, 6, 5, 4, -1, 7, 8, 9, -1, 8, 9, -1, 7, -5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -4, -1, 3, -4, -1, -3, -3, -3, 3, -4, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, 3, 3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, -3, -3, -4, -4, -3, -4, -1, -3, -1, "
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_zero([5, 5, 4, -7, -4]) == True\nassert     below_zero([5, 5, 4, -7, -4, -10]) == True\nassert     below_zero([5, 5, 4, -7, -4, -10, -8]) == True\nassert     below_zero([5, 5, 4, -7, -4, -10, -8, -4]) == True\nassert     below_zero([5, 5, 4, -7, -4, -10, -8, -4, -2]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == False\nassert below_zero([1,2,3,4,-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert below_zero([1,2,-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert below_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == True\nassert below_zero([1,2,3,4,-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, -3]) == True\nassert     below_zero([1, -2, 3]) == False\nassert     below_zero([1, -2, -3]) == True\nassert     below_zero([-1, 2, -3]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, -3, 4, 5]) == True\nassert     below_zero([1, 2, -5, 4, 5]) == True\nassert     below_zero([1, 2, -5, 4, 5]) == True\nassert     below_zero([1, 2, -5, 4, 5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, -1, -2, 3, 4, 5]) == True\nassert     below_zero([-1, -2, -3, -4, -5]) == True\nassert     below_zero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == True\nassert     below_zero([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, 3, 4, 5]) == True\nassert     below_zero([1, 2, 3, 4, -5]) == False\nassert     below_zero([1, 2, 3, 4, -5, 6]) == True\nassert     below_zero([1, 2, 3, 4, -5, 6, 7, 8, -9]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_zero([5, 2, -1, 6, -3, 7, 8, 3, -5, 2]) == True\nassert     below_zero([5, 2, -1, 6, -3, 7, 8, 3, -5, 2, -3, -3]) == True\nassert     below_zero([5, 2, -1, 6, -3, 7, 8, 3, -5, 2, -3, -3, 2]) == False\nassert     below_zero([5, 2, -1, 6, -3, 7, 8, 3, -5, 2, -3, -3, 2, -3]) == False\nassert     below_zero([5, 2, -1, 6, -3, 7, 8, 3, -5, 2, -3, -3, 2, -3, 4]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, 5, 6, -6, -5, -4, -3, -2]) == True\nassert     below_zero([1, 2, 3, 4, 5, -6, -5, -4, -3, -2]) == True\n\n\ndef three_sum(nums: List[int]) -> bool:\n    \"\"\" Given an integer array nums, return true if any value appears at least twice in the array, and\n    return false if every element is distinct.\n\n    Example 1:\n    Input: nums = [1,2,3,1]\n    Output: true\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([3,5,3,3,2,4]) == 2.25\nassert     mean_absolute_deviation([5,3,4,3,2]) == 2.25\nassert     mean_absolute_deviation([5,3,4,5,2,3]) == 2.25\nassert     mean_absolute_deviation([3,5,3,3,2,4,1]) == 2.25\nassert     mean_absolute_deviation([1,1,1,1,1,1,1]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     abs(mean_absolute_deviation([0, 3, 4, 3, 3, 2, 5, 5, 6]) - 3.36) < 0.01\nassert     abs(mean_absolute_deviation([1, 5, 2, 3, 4, 6]) - 2.0) < 0.01\nassert     abs(mean_absolute_deviation([-0.5, -0.5, -0.5, 0, 1, 2, 3]) - 1.0) < 0.01\nassert     abs(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) - 1.5) < 0.01\nassert     abs(mean_absolute_deviation([0, 0, 0, 0, 0, 0]) - 0.0) < 0.01\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 1, 1]) == 0\nassert     mean_absolute_deviation([1, 2, 3]) == 1\nassert     mean_absolute_deviation([1, 4, 1]) == 2\nassert     mean_absolute_deviation([1, -2, 3]) == 3\nassert     mean_absolute_deviation([1, 3, 1]) == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (mean_absolute_deviation([1, 2, 3, 4, 5, 6]) ==     \n        mean_absolute_deviation([-1, -2, -3, -4, -5, -6])) == 2\nassert     (mean_absolute_deviation([-1, -2, 3, 4, 5, 6]) ==     \n        mean_absolute_deviation([1, 2, 3, 4, 5, 6])) == 2\nassert     (mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) ==     \n        mean_absolute_deviation([-1, -2, 3, 4, 5, 6, 7])) == 4\nassert     (mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) ==     \n        mean_absolute_deviation([-1, -2, 3, 4, 5, 6, 7, 8])) == 4\nassert     (mean_absolute_deviation([]) == mean_absolute_deviation([1])) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([-1, 0, 1]) == 0.25\nassert mean_absolute_deviation([0, 1, 2]) == 0.5\nassert mean_absolute_deviation([0, 2, 4]) == 0.5\nassert mean_absolute_deviation([0, 2]) == 1\n\ndef mean_squared_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Square Deviation\n    around the mean of this dataset.\n    Mean Square Deviation is the average squared difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1,2,3,4,5]) == 2.5\nassert     mean_absolute_deviation([1,2,3,4,1]) == 2.0\nassert     mean_absolute_deviation([1,2,3,4,1]) == 2.0\nassert     mean_absolute_deviation([5,10,15,20,25]) == 10.0\nassert     mean_absolute_deviation([5,10,15,20,25]) == 10.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     abs(mean_absolute_deviation([0, 1, 2, 3, 4]) - 1.5) < 0.01\nassert     abs(mean_absolute_deviation([0, 1, 2, 3, 4, 5]) - 1.5) < 0.01\nassert     abs(mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6]) - 1.5) < 0.01\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \\\n          3.7499999999999995\nassert mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == \\\n       0.0\nassert mean_absolute_deviation([1, 1, 1, 2, 2, 3, 4, 5, 6, 7]) == \\\n       3.4499999999999994\nassert mean_absolute_deviation([1, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \\\n       4.5999999999999955\n\nif __name__ == '__main__':\n    numbers = [1, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(mean_absolute_deviation(numbers)"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     abs(mean_absolute_deviation([0, 0, 1, 2, 4, 5, 6]) - 1.0) < 0.01\nassert     abs(mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6]) - 1.5) < 0.01\nassert     abs(mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) - 3.0) < 0.01\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    assert intersperse([0, 1, 2, 3, 4], 2) == [0, 2, 1, 3, 4]\n    assert intersperse([0, 1, 2, 3, 4], 1) == [0, 1, 1, 2, 3, 4]\n    assert intersperse([0, 1, 2, 3, 4], 5) == [0, 5, 1, 2, 3, 4]\n    assert intersperse([0, 1, 2, 3, 4], 0) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersperse([1,2,3,4,5,6], 4) == [1,4,2,5,3,6]\nassert     intersperse([1,2,3,4,5,6], 7) == [1,7,2,8,3,9,4,10,5,11,6,12]\nassert     intersperse([1,2,3,4,5,6,7,8,9,10], 4) == [1,4,2,5,3,6,7,8,9,10]\nassert     intersperse([1,2,3,4,5,6,7,8,9,10], 11) == [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20]\nassert     intersperse([1,2,3,4,5,6,7,8,9,10,11,12,13,14], 4) == [1,4,2,5,3,6,7,8,9,10,11,12,13,14]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    pass\n\nassert intersperse([], delimeter = 1) == []\nassert intersperse([1], delimeter = 2) == [1]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersperse([], 10) == []\nassert     intersperse([1, 2, 3], 10) == [1, 10, 2, 10, 3, 10]\nassert     intersperse([1, 10, 2, 10, 3, 10], 1) == [1, 1, 10, 2, 10, 3, 10]\nassert     intersperse([1, 10, 2, 10, 3, 10], 10) == [1, 10, 2, 10, 3, 10]\nassert     intersperse([1, 10, 2, 10, 3, 10], 100) == [1, 10, 2, 10, 3, 10]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    numbers = [1, 2, 3, 4, 5]\n    intersperse(numbers, delimeter=10)\n    \n    [1, 2, 10, 3, 10, 4, 10, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nintersperse([1, 2, 3, 4, 5], 10) == [10, 1, 10, 2, 10, 3, 10, 4, 10, 5]\n\ndef as_list(iterable):\n    \"\"\" Convert iterable to list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     intersperse([], 1) == []\nassert     intersperse([1, 2, 3, 4], 10) == [1, 10, 2, 10, 3, 10, 4, 10]\nassert     intersperse([1, 2, 3, 4], 1) == [1, 1, 2, 1, 3, 1, 4, 1]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5, 1]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 1, 2, 3, 1, 2, 4, 1, 2, 5, 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersperse([1, 2, 3], delimeter=0) == [1, 0, 2, 0, 3]\nassert     intersperse([1, 2, 3], delimeter=2) == [1, 2, 0, 2, 3]\nassert     intersperse([1, 2, 3], delimeter=3) == [1, 2, 3, 0, 0, 0]\nassert     intersperse([1, 2, 3], delimeter=4) == [1, 2, 3, 0, 0, 0, 0, 0]\nassert     intersperse([1, 2, 3], delimeter=5) == [1, 2, 3, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_nested_parens('(()())') == [1, 1]\nassert     parse_nested_parens('(())') == [1, 1]\nassert     parse_nested_parens('())') == [1, 1]\nassert     parse_nested_parens('((()))') == [3]\nassert     parse_nested_parens('((()))') == [3]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"((()))\") == [0, 0, 0, 0]\nassert     parse_nested_parens(\"(()())\") == [0, 0, 0, 1]\nassert     parse_nested_parens(\"()((()()))\") == [0, 0, 1, 1, 1, 0]\nassert     parse_nested_parens(\"(()()(())()))((()()())((()())()))\") == [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0]\nassert     parse_nested_parens(\"(((((((((())()()())))))())())())\") == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(())(()())(())\") == [2, 2, 1, 2]\nassert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"(())\") == [1]\nassert     parse_nested_parens(\"(()))\") == [1]\nassert     parse_nested_parens(\"((()())(())())\") == [3, 3, 2, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_nested_parens('(()())') == [2]\nassert     parse_nested_parens('((()))') == [3]\nassert     parse_nested_parens('(((())())())') == [5]\nassert     parse_nested_parens('(()((())()()())()())') == [6]\nassert     parse_nested_parens('()()((())()()())') == [5]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('') == []\nassert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('()()') == [0,0]\nassert     parse_nested_parens('(()())') == [0,0,0]\nassert     parse_nested_parens('((()()))') == [0,0,0,0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"(((x+y))*(x+y))\") ==     [1, 2, 3, 2], \"example\"\nassert     parse_nested_parens(\"(((x+y))*(x+y))\") ==     [1, 2, 3, 2], \"example\"\nassert     parse_nested_parens(\"(((x+y))*(x+y))\") ==     [1, 2, 3, 2], \"example\"\nassert     parse_nested_parens(\"(((x+y))*(x+y))\") ==     [1, 2, 3, 2], \"example\"\nassert     parse_nested_parens(\"(((x+y))*(x+y))\") ==     [1, 2, 3, 2], \"example\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('(()())') == [0, 1]\nassert     parse_nested_parens('((()))') == [0, 1, 0]\nassert     parse_nested_parens('(((())))') == [0, 1, 1, 0]\nassert     parse_nested_parens('(((())())') == [0, 1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [1, 2, 3, 4, 5, 6], \\\n        \"parse_nested_parens is not correct\"\nassert     parse_nested_parens(\"(1)\") == [1], \\\n        \"parse_nested_parens is not correct\"\nassert     parse_nested_parens(\"(1 + 2 * 3 + 4 * (5 + 6))\") == [1, 2, 3, 4, 5, 6], \\\n        \"parse_nested_parens is not correct\"\nassert     parse_nested_parens(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [1, 2, 3, 4, 5, 6], \\\n        \"parse_nested_parens is not correct\"\nassert     parse_nested_parens(\"((1 + 2) * 3) + (4 * (5 + 6))\") == [1, 2, 3, 4, 5, 6], \\\n        \"parse_nested_parens is not correct\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_nested_parens('(((((((())()())))))') == [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, "
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"cane\", \"canine\", \"care\"], \"re\") == \\\n        [ \"canine\", \"care\" ]\n\nassert     filter_by_substring([\"cane\", \"canine\", \"care\"], \"\") == \\\n        [ \"cane\", \"canine\", \"care\" ]\n\nassert     filter_by_substring([\"cane\", \"canine\", \"care\"], \"can\") == \\\n        [ \"canine\", \"care\" ]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'cat') == ['cat']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'catt') == []\nassert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'catgnome') == ['catgnome']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'gnome') == ['gnome']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'gate', 'gnome'], 'pam') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"abc\", \"xyz\", \"def\", \"ghi\"], \"\") == [\"abc\", \"def\", \"ghi\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"def\", \"ghi\"], \"abcd\") == []\nassert     filter_by_substring([\"abc\", \"xyz\", \"def\", \"ghi\"], \"xyz\") == [\"xyz\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"def\", \"ghi\"], \"def\") == [\"def\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"def\", \"ghi\"], \"ab\") == [\"abc\", \"def\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"aba\", \"aa\", \"abaaba\", \"bab\", \"bac\"], \"aba\") == [\"aba\", \"abaaba\"]\nassert     filter_by_substring([\"aba\", \"aa\", \"abaaba\", \"bab\", \"bac\"], \"aa\") == [\"aa\"]\nassert     filter_by_substring([\"aba\", \"aa\", \"abaaba\", \"bab\", \"bac\"], \"bab\") == [\"bab\"]\nassert     filter_by_substring([\"aba\", \"aa\", \"abaaba\", \"bab\", \"bac\"], \"bac\") == [\"bac\"]\nassert     filter_by_substring([\"aba\", \"aa\", \"abaaba\", \"bab\", \"bac\"], \"\") == [\"aba\", \"aa\", \"abaaba\", \"bab\", \"bac\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['hello', 'world', 'test'], 'el') == ['hello', 'world']\nassert     filter_by_substring(['hello', 'world', 'test'], 'e') == ['hello', 'world', 'test']\nassert     filter_by_substring(['hello', 'world', 'test'], '') == ['hello', 'world', 'test']\n\ndef filter_by_substring_alt(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_substring(['Hello', 'Hello World', 'Hi', '', 'a', 'b', 'c'], 'Hello') == ['Hello', 'Hello World']\nassert     filter_by_substring(['Hello', 'Hello World', 'Hi', '', 'a', 'b', 'c'], 'Hello World') == ['Hello World']\nassert     filter_by_substring(['Hello', 'Hello World', 'Hi', '', 'a', 'b', 'c'], 'Hi') == ['Hi']\nassert     filter_by_substring(['Hello', 'Hello World', 'Hi', '', 'a', 'b', 'c'], '') == ['Hello', 'Hello World', 'Hi', '', 'a', 'b', 'c']\nassert     filter_by_substring(['Hello', 'Hello World', 'Hi', '', 'a', 'b', 'c'], 'i') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['foo', 'bar', 'baz'], 'ar') == ['bar', 'baz']\nassert     filter_by_substring(['foo', 'bar', 'baz', 'foo'], 'foo') == ['foo', 'foo']\nassert     filter_by_substring(['foo', 'bar', 'baz', 'foo', 'bar'], 'ar') == ['bar', 'bar']\nassert     filter_by_substring(['foo', 'bar', 'baz', 'foo', 'bar'], 'foo') == ['foo', 'foo', 'foo']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"abcdef\", \"abcd\", \"abce\", \"def\", \"defg\"], \"def\") == ['def', 'defg']\nassert     filter_by_substring([\"abcdef\", \"abcd\", \"abce\", \"def\", \"defg\"], \"defg\") == ['defg']\nassert     filter_by_substring([\"abcdef\", \"abcd\", \"abce\", \"def\", \"defg\"], \"def\") == ['def', 'defg']\n\n\ndef filter_by_start_end_substring(strings: List[str], substring: str, start: int, end: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring in a specific position of the string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"elephant\", \"ant\", \"cat\", \"bee\"], \"ant\") == [\"ant\"]\nassert     filter_by_substring([\"elephant\", \"ant\", \"cat\", \"bee\"], \"zoo\") == []\nassert     filter_by_substring([\"elephant\", \"ant\", \"cat\", \"bee\"], \"\") == []\nassert     filter_by_substring([\"elephant\", \"ant\", \"cat\", \"bee\"], \"b\") == []\nassert     filter_by_substring([\"elephant\", \"ant\", \"cat\", \"bee\"], \"a\") == [\"ant\", \"bee\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"cat\", \"dog\", \"zebra\"], \"zebr\") == [\"zebra\"], \"Check the test case\"\nassert filter_by_substring([\"cat\", \"dog\", \"zebra\"], \"zebra\") == [\"zebra\"], \"Check the test case\"\nassert filter_by_substring([\"cat\", \"dog\", \"zebra\"], \"cat\") == [\"cat\"], \"Check the test case\"\nassert filter_by_substring([\"cat\", \"dog\", \"zebra\"], \"cat\") == [\"cat\"], \"Check the test case\"\nassert filter_by_substring([\"cat\", \"dog\", \"zebra\"], \"zebra\") == [\"zebra\"], \"Check the test case\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_product([2, 2]) == (4, 4), \"Should be (4, 4)\"\nassert     sum_product([2, 2, 1]) == (5, 2), \"Should be (5, 2)\"\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (21, 360), \"Should be (21, 360)\"\n\n\n\ndef sum_of_integers(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the sum of all the integers in the list.\n    Empty sum should be equal to 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 0)\nassert     sum_product([0, 1]) == (0, 0)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([0, 2, 3, 4, 5]) == (10, 20)\nassert     sum_product([0, 2, 3, 4]) == (10, 8)\nassert     sum_product([1, 2]) == (2, 2)\nassert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (150, 6000)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    In the input list, the first item will be the sum and the last will be the product.\n    \"\"\"\n    pass\n\n\ndef convert_base(number: int, b1: int, b2: int) -> int:\n    \"\"\"\n    Convert the given number from base1 to base2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_product([3, 2, 1]) == (6, 6)\nassert     sum_product([1, 1, 1, 1]) == (4, 4)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (21, 720)\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    print(sum_product([3, 5, 6, 7, 8]))"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n\n\ndef maximum_sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a maximum sum and a maximum product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef random_numbers(amount: int, min_value: int, max_value: int) -> List[int]:\n    \"\"\" Given integers < min_value, min_value + 1,..., max_value - 1, max_value > and an amount of integers\n    to be returned, return list of integers of given amount.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert\n\ndef magic_square_product(square: List[List[int]]) -> int:\n    \"\"\" Calculates the product of the sum of the row, column, and diagonal elements of a square.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 5, 2, 3, 4]) == [1, 5, 5, 5, 5]\nassert     rolling_max([1, 5, 2, 3, 4, 6]) == [1, 5, 5, 5, 5, 6]\nassert     rolling_max([1, 5, 2, 3, 4, 6, 7]) == [1, 5, 5, 5, 5, 6, 7]\nassert     rolling_max([1, 5, 2, 3, 4, 6, 7, 2]) == [1, 5, 5, 5, 5, 6, 7, 7]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     rolling_max([1, 2, 3, 2, 3, 5, 6]) == [1, 2, 3, 3, 3, 5, 6]\nassert     rolling_max([-1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \nassert\nassert\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([1,2,3,4,5,4,5,6,7,8,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,4,5,6,7,8,9,8,7,6,5,4,3,2,1]\n\n\ndef climbing_stairs(n: int) -> int:\n    \"\"\" Compute the number of possible ways to reachn'th step.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([3, 1, 2, 4, 5]) == [3, 3, 3, 4, 5]\nassert     rolling_max([3, 2, 1, 4, 5]) == [3, 3, 3, 4, 5]\nassert     rolling_max([3, 2, 1, 4, 5, 6]) == [3, 3, 3, 4, 5, 6]\nassert     rolling_max([3, 2, 1, 4, 5, 6, 7]) == [3, 3, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rolling_max([0, 1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [2, 3, 4, 5, 6, 7, 7]\nassert     rolling_max([2, 3, 4, 5, 6, 7]) == [3, 4, 5, 6, 7, 7]\nassert     rolling_max([3, 4, 5, 6, 7]) == [4, 5, 6, 7, 7]\nassert     rolling_max([4, 5, 6, 7]) == [5, 6, 7, 7]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"aba\"\nassert     make_palindrome(\"abba\") == \"abba\"\nassert     make_palindrome(\"abc\") == \"abcba\"\nassert     make_palindrome(\"\") == \"a\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_palindrome('asdasd') == 'asdasdasdasdasdasdasd'\nassert     make_palindrome('qw') == 'qwqw'\nassert     make_palindrome('qwq') == 'qwqwqwq'\nassert     make_palindrome('qqq') == 'qqqqqqqqq'\n\n\ndef has_palindrome(string: str) -> bool:\n    \"\"\" Test if given string has a palindrome substring \"\"\"\n    return any(is_palindrome(s) for s in string.split(' '))\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     make_palindrome(\"racecar\") == \"carracecar\"\nassert     make_palindrome(\"abcd\") == \"dcba\"\nassert     make_palindrome(\"abac\") == \"cbaac\"\nassert     make_palindrome(\"ababa\") == \"baababa\"\nassert     make_palindrome(\"abb\") == \"bb\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('cbb') == 'babbc'\nassert     make_palindrome('acb') == 'abcba'\nassert     make_palindrome('abb') == 'abab'\nassert     make_palindrome('aab') == 'baab'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     make_palindrome(\"aabb\") == \"abba\"\nassert     make_palindrome(\"aab\") == \"abba\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aa\") == \"abba\"\nassert     make_palindrome(\"ab\") == \"abba\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    strings = [\n        \"asdf\", \"fdsa\", \"aninmna\", \"asdfdsa\", \"revanar\", \"sajfdsaklfj\", \"ana\", \"anan\", \"anana\", \"ananan\"\n    ]\n    for string in strings:\n        print(f\"{string}: {is_palindrome(string)}\""
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_xor('11', '1') == '010'\nassert     string_xor('10101010', '10111010') == '10101010'\nassert     string_xor('101010', '10111010') == '10101010'\nassert     string_xor('10101010', '10101010') == '10101010'\nassert     string_xor('1111', '1111') == '1111'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_xor(a='101010', b='101010') == '0'\nassert     string_xor(a='101010', b='1010110') == '101010'\nassert     string_xor(a='11111111', b='1010110') == '11111111'\nassert     string_xor(a='10101010', b='1010110') == '10101010'\nassert     string_xor(a='101010', b='10101010') == '101010'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"0\", \"1\") == \"1\"\nassert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"111111\", \"111011\") == \"101010\"\nassert     string_xor(\"111011\", \"111111\") == \"101010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_xor('11', '1') == '10'\nassert     string_xor('101010', '101101') == '101010'\nassert     string_xor('101010', '101101') == '101010'\nassert     string_xor('11', '1') == '10'\nassert     string_xor('1', '1') == '0'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_xor('11', '11') == '10'\nassert     string_xor('10', '10') == '00'\nassert     string_xor('1111', '1111') == '1100'\nassert     string_xor('101010', '101010') == '101010'\nassert     string_xor('101010', '101010') == '101010'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_xor('11', '1') == '10'\nassert     string_xor('10111', '10101') == '101010'\nassert     string_xor('10111', '11111') == '10101'\nassert     string_xor('10111', '11010') == '10101'\nassert     string_xor('10111', '11010') == '101010'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_xor(\"101010\", \"101010\") == \"101010\"\nassert     string_xor(\"101010\", \"101101\") == \"110110\"\nassert     string_xor(\"1111111111111111111111111111111111111111111111111111111111111111\", \"01101110110110010110110110111101111111011111111111111111111111\") == \"1011111111111111111111111111111111111111111111111111111111111111111\"\nassert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_xor(\"1111\", \"1100\") == \"1101\"\nassert     string_xor(\"1101\", \"1100\") == \"1110\"\nassert     string_xor(\"1010\", \"1010\") == \"1010\"\nassert     string_xor(\"1010\", \"1011\") == \"1011\"\nassert     string_xor(\"1010\", \"101101110\") == \"10111110\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_xor('10101', '10111') == '10101'\nassert     string_xor('10111', '10101') == '10111'\nassert     string_xor('1010', '10111') == '1011'\nassert     string_xor('10111', '1011') == '1010'\nassert     string_xor('11101010', '11101011') == '10101010'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_xor('10110', '10110') == '10110'\nassert     string_xor('100010', '111110') == '110110'\nassert     string_xor('100010', '110110') == '111110'\nassert     string_xor('100010', '110110') == '110110'\nassert     string_xor('10110', '110110') == '10111'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     longest([\"abc\", \"eeee\", \"abcd\", \"dcd\"]) == \"eeee\"\nassert     longest([\"a\", \"bb\", \"ccc\", \"dddddd\", \"eeee\"]) == \"eeee\"\nassert     longest([\"a\", \"aa\", \"aaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]) == \"aaaaaaaaa\"\nassert     longest([\"abc\", \"eeee\", \"abcd\", \"dcd\", \"abcde\"]) == \"eeee\"\nassert     longest([\"abc\", \"eeee\", \"abcd\", \"dcd\", \"abcde\", \"eeeeee\"]) == \"eeeeee\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     longest(['a', 'abc', 'ab']    ) == 'abc'\nassert     longest(['ab', 'abc', 'a']    ) == 'abc'\nassert     longest(['a', 'b', 'c']    ) == 'a'\nassert     longest(['ab', 'a']    ) == 'ab'\nassert     longest(['abc', 'a']    ) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == \"abcde\"\nassert     longest([\"abc\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]) == \"abcdefg\"\nassert     longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]) == \"abcdefgh\"\nassert     longest([]) == None\n\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"aaa\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"aaaaa\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"aaaaaa\", \"aaaaaab\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"aaaaaa\", \"aaaaaab\", \"aaaaaac\", \"aaaaaad\", \"aaaaaae\", \"aaaaaaf\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"aaaaaa\", \"aaaaaab\", \"aaaaaac\", \"aaaaaad\", \"aaaaaae\", \"aaaaaaf\", \"aaaaaag\", \"aaaaaah\", \"aaaaaai\", \"aaaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"aaaaa\", \"aaaaaab\", \"aaaaaac\", \"aaaaaad\", \"aaaaaae\", \"aaaaaaf\", \"aaaaaag\", \"aaaaaah\", \"aaaaaai\", \"aaaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\", \"aaaaaka\", \"aaaaakb\", \"aaaaakc\", \"aaaaakd\", \"aaaaake\", \"aaaaaf\", \"aaaaag\", \"aaaaah\", \"aaaaai\", \"aaaaaj\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef longest_v1(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for i in range(1, len(strings)):\n        if len(longest_str) < len(strings[i]):\n            longest_str = strings[i]\n\n    return longest_str\n\n\ndef longest_v2(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     longest([\"a\"]) == None\nassert     longest([\"a\",\"b\"]) == \"a\"\nassert     longest([\"a\",\"b\",\"c\"]) == \"b\"\nassert     longest([\"a\",\"ab\",\"bc\"]) == \"ab\"\nassert     longest([\"a\",\"abc\",\"abcd\"]) == \"abc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef longest_str(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n\nassert longest([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"b\"]) == \"ab\"\nassert longest([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]) == \"aaaaaaaa\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    longest(['b', 'a', 'a', 'b']) == 'b'\n    longest(['a', 'a', 'b', 'a']) == 'a'\n    longest(['a', 'a', 'b', 'a', 'a', 'b']) == 'b'\n    longest(['a', 'a', 'b', 'a', 'a', 'b', 'a', 'a', 'b']) == 'b'\n    longest(['a', 'a', 'b', 'a', 'a', 'b', 'a', 'a', 'b', 'a', 'a', 'b']) == 'b'\n\nassert\n    longest(['a', 'a', 'b']) == 'a'\n    longest(['a', 'a', 'b', 'a']) == 'a'\n    longest(['a', 'a', 'b', 'a', 'a', 'b']) == 'a'\n\nassert\n    longest(['a', 'a', 'a', 'b']) == 'a'\n    longest(['a', 'a', 'a', 'b', 'a']) == 'a'\n    longest(['a', 'a', 'a', 'b', 'a', 'a', 'b']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     longest([\"xyz\", \"zxy\", \"zzy\", \"yy\", \"xzzzzz\", \"\"]) == \"zzzzzzz\"\nassert     longest([\"x\", \"\"]) == \"x\"\nassert     longest([\"\", \"\"]) == None\nassert     longest([\"\"]) == None\nassert     longest([]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     longest(['w', 'l', 'l', 'o', 'w', 'e']) == 'w'\nassert     longest(['a', 'b', 'c']) == 'c'\nassert     longest([]) is None\nassert     longest(['abc', 'd', 'ef']) == 'abc'\nassert     longest(['abc', 'ab', 'de', 'ff']) == 'ff'\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(2, 6) == 2\nassert     greatest_common_divisor(2, 7) == 1\nassert     greatest_common_divisor(10, 7) == 1\nassert     greatest_common_divisor(6, 3) == 2\nassert     greatest_common_divisor(3, 9) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(0, 2) == 2\nassert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(3, 9) == 3\nassert     greatest_common_divisor(9, 3) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(8, 12) == 4\nassert     greatest_common_divisor(17, 12) == 1\nassert     greatest_common_divisor(5, 12) == 5\nassert     greatest_common_divisor(0, 3) == 0\nassert     greatest_common_divisor(-3, 0) == 0\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(5, 4) == 1\nassert     greatest_common_divisor(20, 10) == 10\nassert     greatest_common_divisor(7, 17) == 1\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(3, 7) == 1\nassert     greatest_common_divisor(2, 5) == 1\nassert     greatest_common_divisor(12, 9) == 3\nprint(\"greatest_common_divisor(12, 8) == 4 is OK\")\nassert     greatest_common_divisor(9, 12) == 3\nprint(\"greatest_common_divisor(9, 12) == 3 is OK\")\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef ex_gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\n\ndef main():\n    # ex_gcd(1024, 2048)\n    print(ex_gcd(10, 12))\n\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(3, 6) == 3\nassert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(9, 12) == 3\nassert     greatest_common_divisor(1, 6) == 1\nassert     greatest_common_divisor(2, 8) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(7, 2) == 1, '7, 2'\nassert     greatest_common_divisor(2, 7) == 1, '2, 7'\nassert     greatest_common_divisor(1, 7) == 1, '1, 7'\nassert     greatest_common_divisor(1, 2) == 1, '1, 2'\nassert     greatest_common_divisor(3, 5) == 1, '3, 5'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"ab\") == [\"\", \"a\", \"ab\"]\nassert     all_prefixes(\"a\") == [\"\", \"a\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     all_prefixes('') == ['']\nassert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('abcde') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde']\nassert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abc\u00e9', 'abcdef']\nassert     all_prefixes('abcdefghi') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abc\u00e9', 'abcdef', 'abcfde', 'abcdefg', 'abcdefgh', 'abcdefghi']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"abcd\") == [\"\", \"a\", \"b\", \"c\", \"d\"]\nassert     all_prefixes(\"abc\") == [\"\", \"a\", \"b\", \"c\"]\nassert     all_prefixes(\"ab\") == [\"\", \"a\", \"b\"]\nassert     all_prefixes(\"\") == [\"\"]\nassert     all_prefixes(\"\") == [\"\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     all_prefixes('banana') == ['b', 'ba', 'ban', 'banan', 'banana']\nassert     all_prefixes('apple') == ['a', 'app', 'appl', 'applee', 'apple']\nassert     all_prefixes('orange') == ['o', 'or', 'oran', 'orang', 'orange']\n\n\ndef first_letter(string: str) -> str:\n    \"\"\" Return the first character from the input string\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"python\") == [\"py\", \"pyth\", \"ytho\", \"thon\", \"hon\", \"on\", \"n\"]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     all_prefixes('abracadabra') == [\n        '', 'a', 'ab', 'abr', 'abra', 'abrac', 'abracad', 'abracadab', 'abracadabra']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     all_prefixes(    \"abracadabra\") == [\n    \"a\",\n    \"ab\",\n    \"abr\",\n    \"abra\",\n    \"abrac\",\n    \"abracad\",\n    \"abracadab\",\n    \"abracadabra\",\n]\n\nassert     all_prefixes(    \"\") == []\n\nassert     all_prefixes(    \"c\") == [\"c\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     all_prefixes('banana') == ['ban', 'ban', 'ana', 'an', 'an', 'na', 'na', 'an', 'n', 'n']\nassert all_prefixes('pineapple') == ['pin', 'pin', 'ine', 'in', 'in', 'i', 'i', 'in', 'ni', 'ni', 'i']\nassert all_prefixes('car') == ['car', 'car', 'ca', 'c', 'c']\nassert all_prefixes('cab') == ['cab', 'cab', 'ca', 'c', 'c']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"abc\") == [\"\"]\nassert     all_prefixes(\"abcdef\") == [\"\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"b\"]\nassert     all_prefixes(\"abcdefg\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdeg\", \"abcdefg\"]\nassert     all_prefixes(\"abcdefgh\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdeg\", \"abcdefg\", \"abcdh\", \"abcdefgh\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0 1'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(string_sequence(0))\n    print(string_sequence(1))\n    print(string_sequence(2))\n    print(string_sequence(5))\n    print(string_sequence(10))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_sequence(0) == '0'\nassert string_sequence(1) == '0 1'\nassert string_sequence(2) == '0 1 2'\nassert string_sequence(3) == '0 1 2 3'\nassert string_sequence(4) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\n\ndef string_sequence_opt(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('aa') == 2\nassert     count_distinct_characters('bb') == 2\nassert     count_distinct_characters('aab') == 3\nassert     count_distinct_characters('aaba') == 3\nassert     count_distinct_characters('abc') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"abcDdEeFfGgHhIiJj\") == 11\nassert     count_distinct_characters(\"abcdefg\") == 7\nassert     count_distinct_characters(\"abcdefg\") == 7\nassert     count_distinct_characters(\"aabbcdeffgghi\") == 8\n\ndef find_most_frequent_character(string: str) -> str:\n    \"\"\" Find the most frequent character in a given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nprint(count_distinct_characters('') == 1)\nassert count_distinct_characters('aa') == 1\nassert count_distinct_characters('abc') == 3\nassert count_distinct_characters('ABC') == 3\nassert count_distinct_characters('AaBbCc') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"abcc\") == 3\nassert     count_distinct_characters(\"abcC\") == 3\nassert     count_distinct_characters(\"aBcD\") == 4\nassert     count_distinct_characters(\"aBcD1\") == 4\nassert     count_distinct_characters(\"aBcD11\") == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"abC\") == 3\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"ABCcde\") == 4\nassert     count_distinct_characters(\"abcDEEF\") == 4\n\ndef count_distinct_characters_alt(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"string\") == 6, \"Something is wrong with count_distinct_characters()\"\nassert     count_distinct_characters(\"String\") == 6, \"Something is wrong with count_distinct_characters()\"\nassert     count_distinct_characters(\"\") == 0, \"Something is wrong with count_distinct_characters()\"\nassert     count_distinct_characters(\"--//---\") == 3, \"Something is wrong with count_distinct_characters()\"\nassert     count_distinct_characters(\"$%#$%&%\") == 4, \"Something is wrong with count_distinct_characters()\"\nprint(\"count_distinct_characters() success\")\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_distinct_characters('abcABC') == 3\nassert     count_distinct_characters('aBcDeF') == 6\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aa\") == 1\nassert     count_distinct_characters(\"ab\") == 2\nassert     count_distinct_characters(\"aab\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\nassert     count_distinct_characters(\"aBcDeF\") == 6\nassert     count_distinct_characters(\"AbCdEf\") == 6\nassert     count_distinct_characters(\"abc\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('aA1') == 3\nassert     count_distinct_characters('aB1c') == 3\nassert     count_distinct_characters('1') == 1\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_music('.|.|.|.|') == [4, 2, 1, 2, 1, 4]\nassert     parse_music('o|.o|.o|.o| o|.o|.o|.o|') == [4, 1, 4, 1, 4, 1, 4, 1]\nassert     parse_music('o| o|.o|.o|.o|.o|.o|.o|') == [8, 4, 1, 4, 1, 4, 1, 4]\nassert     parse_music('.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|."
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_music('.| |o|..o| |o|..o| |o|') == [4, 2, 4, 2, 2, 1]\nassert parse_music('o| |o|o| |o| |o|..o| |o|..o| |o|') == [4, 2, 4, 4, 4, 2, 4, 2, 2, 1]\nassert parse_music('o| |o|o| |o| |o|..o| |o|..o| |o|') == [4, 2, 4, 4, 4, 2, 4, 2, 2, 1]\nassert parse_music('o|o| |o| |o| |o|..o| |o|..o| |o|') == [4, 2, 4, 4, 4, 2, 4, 2, 2, 1]\nassert parse_music('o|o|o|o| |o|o| |o| |o| |o| |o| |o| |o| |o|') == [4, 2, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_music('o|.') == [4, 2]\nassert parse_music('oo') == [4, 4]\nassert parse_music('oo|o') == [4, 2, 4, 4]\nassert parse_music('oo.') == [4, 4, 2]\nassert parse_music('oo|.|o') == [4, 4, 2, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_music('') == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_music('1234567') == [4, 2, 1, 4, 1, 2, 4, 1, 4, 1]\nassert     parse_music('o|o|.o|o') == [2, 1, 1, 2, 1, 1, 1, 1, 2, 1]\nassert     parse_music('..o|o|o|o|.|.|.o|o|o') == [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]\nassert     parse_music('o|o|.o|o|o') == [1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_music('.|.') == [1, 1, 1, 1]\nassert     parse_music('..|o|..') == [1, 1, 2, 1, 1, 1, 1, 1]\nassert     parse_music('o|o|o|o|o|o|o|o|.') == [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o|.') == [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.|.') == [1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_music('o|.') == [4, 2, 1]\nassert     parse_music('oo') == [4, 4, 4, 4]\nassert     parse_music('oo|') == [4, 2, 4, 2]\nassert     parse_music('o|o|.') == [4, 2, 1, 2, 1, 2, 1]\nassert     parse_music('o|o|o|.') == [4, 2, 1, 2, 1, 2, 1, 2, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_music('.o|.') == [4, 2, 1, 1, 1, 1]\nassert     parse_music('...o|o...') == [4, 2, 1, 2, 1, 4]\nassert     parse_music('o.o|o|o.o|.') == [4, 2, 1, 2, 1, 2, 1, 1, 1, 1]\nassert     parse_music('|.o|.o|o|o|o|') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.|.o|.') == [4, 2, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_music(\"o o o o o o o o | | | |.. | |o o o o o o o o | | | | |o o o o o o o o | | | | | o o o o o o o o| | | | | o o o o o o o o| | | | | o o o o o o o o| |. | | | o o o o o o o o| | | | | o o o o o o o o| | | | | o o o o o o o o| | | | | | o o o o o o o o| | |. | | | o o o o o o o o| | |. | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | o o o o o o o o| | | | | | | o o o o o o o o| | | |. | | | o o o o o o o o| | |. | | | | o o o o o o o o| |.. | | | | o o o o o o o o| | | |. | | | o o o o o o o o| | | | | | | o o o o o o o o| | | |.. | | | o o o o o o o o| | | | | | | o o o o o o o o|... | |... | | | o o o o o o o o|... | |... | | | o o o o o o o o|... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o o|... | |... | |... | | | o o o o o o o "
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_music(\"oooo\") == [4, 4, 4, 4, 4]\nassert     parse_music(\"o|o|o|o|o|o|o|o|o\") == [8, 2, 8, 2, 8, 2, 8, 2]\nassert     parse_music(\"oo|oo|oo\") == [4, 4, 4, 2, 4, 4, 4]\nassert     parse_music(\"|.|.|.|.|\") == [1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"o|oo|oo|.|oo\") == [4, 4, 4, 2, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_music(\"..o|..o|...o|.o|..o|...o|..o|.o\") == [1, 1, 2, 1, 1, 2, 1]\nassert     parse_music(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\") == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music(\"..|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     how_many_times('python', 'o') == 2, 'X'\nassert     how_many_times('python', 'on') == 1, 'X'\nassert     how_many_times('python', 'py') == 5, 'X'\n\nprint(\"All tests passed!\")\n\n'''"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     how_many_times('aaaaa', 'aaa') == 1\nassert     how_many_times('aaaaa', 'aa') == 2\nassert     how_many_times('aaaaa', 'aaaa') == 1\nassert     how_many_times('aaaaa', '') == 1\nassert     how_many_times('aaaaa', 'b') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     how_many_times(\"lorem ipsum, dolor sit amet, consectetur adipiscing elit\", \"dolor\") == 2\nassert how_many_times(\"lorem ipsum, dolor sit amet, consectetur adipiscing elit\", \"dolorit\") == 0\nassert how_many_times(\"lorem ipsum, dolor sit amet, consectetur adipiscing elit\", \"dolor\") == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     how_many_times(\"abcd\", \"bc\") == 2\nassert     how_many_times(\"abcd\", \"bc\") == 2\nassert     how_many_times(\"abcd\", \"cd\") == 1\nassert     how_many_times(\"abcd\", \"ef\") == 0\nassert     how_many_times(\"abcd\", \"\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     how_many_times('atest', 'a') == 3\nassert     how_many_times('atest', 'test') == 2\nassert     how_many_times('atest', 't') == 2\nassert     how_many_times('atest','s') == 1\nassert     how_many_times('atest', 'a') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef what_is_the_difference(string_1: str, string_2: str) -> str:\n    \"\"\" Return a string that is the difference between the two strings.\n        The result must be a string, even if the difference is an empty string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    string = 'aabababaab'\n    substring = 'ab'\n    print(how_many_times(string, substring))"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     how_many_times('aaaaa', 'a') == 1\nassert     how_many_times('aaaaa', 'aa') == 1\nassert     how_many_times('aaaaa', 'b') == 0\nassert     how_many_times('aaaaa', '') == 1\nassert     how_many_times('aaaaa', 'aaaaa') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_numbers('five one nine two three four') == 'one nine five two three four'\nassert     sort_numbers('three five two one nine four') == 'one two three four five nine'\nassert     sort_numbers('eight four seven three six five') == 'three five six seven eight'\nassert     sort_numbers('eight nine seven six five four') == 'four five six seven eight nine'\nassert     sort_numbers('three five eight two one nine seven') == 'one two three five seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('one two') == 'one two'\nassert     sort_numbers('three four one two') == 'one two three four'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef is_sorted(numbers: str) -> bool:\n    \"\"\" Input is a string of numbers from 'zero' to 'nine'.\n    Returns true if the numbers are in ascending order (from smallest to largest)\n    \"\"\"\n    pass\n\n\ndef is_anagram(first: str, second: str) -> bool:\n    \"\"\" Two strings are anagrams of each other if the letters of one string can be rearranged to form the other string\n    i.e. 'listen' and'silent' are anagrams, but 'listen' and'silentee' are not\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"nine nine one two three five six seven eight\") == 'one nine two three five six seven eight nine'\nassert     sort_numbers(\"eight nine twelve one three four five six\") == 'one three four five six eight nine twelve'\nassert     sort_numbers(\"one one six seven eight nine twelve twelve\") == 'one six seven eight nine twelve twelve one'\nassert     sort_numbers(\"six seven eight nine ten eleven twelve\") =='six seven eight nine ten eleven twelve'\n\n\ndef is_leap_year(year: int) -> bool:\n    \"\"\" Return True if the given year is a leap year.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"one three two four five six\") == \"one two three four five six\"\nassert     sort_numbers(\"eight nine three two one four\") == \"one two three four eight nine\"\nassert     sort_numbers(\"six seven three two eight nine\") == \"two three six seven eight nine\"\nassert     sort_numbers(\"six seven three two one nine\") == \"one two three six seven nine\"\nassert     sort_numbers(\"six nine three two seven one\") == \"one two three six seven nine\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_numbers('one two three four five') == 'one two three four five'\nassert     sort_numbers('five four three two one') == 'one two three four five'\nassert     sort_numbers('eight nine seven six five four') == 'one two three four five six seven eight nine'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('two five eight three six nine one four') == 'one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint(sort_numbers('one nine one two three four five six seven eight nine'))\nassert \nprint(sort_numbers('nine nine nine three three three three two two two one zero zero zero'))\nassert \nprint(sort_numbers('zero one zero one two'))\n\n\ndef find_alphabet_occurrence_array(string: str) -> List[int]:\n    \"\"\"\n    Given an alphanumeric string, count the occurrences of each character.\n    The output should be in the form of an array with the characters in the order of their occurrences.\n    Ignore case.\n    :param string: str\n    :return: List[int]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_numbers('zero nine one two three five four') == 'zero one two three four five'\nassert     sort_numbers('nine one three two five four seven eight zero') == 'zero one two three four five seven eight'\nassert     sort_numbers('three nine one five four two seven eight zero') == 'zero one two three four five seven eight'\nassert     sort_numbers('seven two three four five six nine one') == 'one two three four five six seven'\nassert     sort_numbers('eight nine seven six five four three two one') == 'one two three four five six seven eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one nine two eight seven six five four'\nassert     sort_numbers('nine eight one six seven two three four') == 'one two three four six seven eight nine'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('eight nine three seven two one') == 'one two three seven eight nine'\n\n\ndef remove_leading_trailing_spaces(s: str) -> str:\n    \"\"\"\n    Return the string with leading and trailing spaces removed\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_numbers('532  2 567 345 1 3 0') == '0134523567  2 5 3'\nassert     sort_numbers('0 8 1 5 2 4') == '014523  2 5'\nassert     sort_numbers('542 3 583 4 8 1') == '54234583  4 8 1'\nassert     sort_numbers('9 8 7 6 5 4') == '98765  4 5 6 7'\nassert     sort_numbers('567  89 8 9 4 0') == '567  89  0 4 9 8'\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)\nassert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)\nassert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)\nassert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)\nassert     find_closest_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_closest_elements([3, 4, 5, 6, 9, 10]) == (4, 6)\nassert     find_closest_elements([4, 6, 7, 10, 11, 12]) == (4, 6)\nassert     find_closest_elements([1, 2, 3, 4, 6, 8]) == (2, 4)\nassert     find_closest_elements([1, 2, 3, 4, 6, 8, 10]) == (1, 2)\nassert     find_closest_elements([0, 1, 3, 4, 6, 9]) == (0, 4)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_closest_elements([1.0, 1.0, 2.0, 3.0]) == (1.0, 3.0)\nassert     find_closest_elements([1.0, 1.0, 1.0, 2.0, 3.0, 3.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 1.0, 1.0, 2.0, 3.0, 3.0, 2.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0]) == (1.0, 2.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    find_closest_elements([1, 2, 3]) == (1, 3)\n    find_closest_elements([0, 0, 0]) == (0, 0)\n    find_closest_elements([-10, -12, 0, 99, 102]) == (-12, 102)\n\nassert\n    find_closest_elements([0.1, 0.2, 0.3]) == (0.1, 0.3)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4]) == (0.1, 0.4)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1]) == (0.1, 0.3)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2]) == (0.1, 0.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.5]) == (0.1, 0.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.5, 0.9]) == (0.1, 0.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.5, 0.9, 1.1]) == (0.1, 1.1)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.5, 0.9, 1.1, 1.2]) == (0.1, 1.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.5, 0.9, 1.1, 1.2, 2.1]) == (0.1, 1.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.5, 0.9, 1.1, 1.2, 2.1, 5.1]) == (0.1, 1.2)\n\nassert\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.9, 1.1, 1.2]) == (0.1, 1.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.9, 1.1, 1.2, 2.1]) == (0.1, 1.2)\n    find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.9, 1.1, 1.2, 2.1, 5.1]) == (0.1, 1.2)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef add_two_hundred_thousand(numbers: List[int]) -> int:\n    \"\"\" \n    Given a list of numbers add two hundred thousand to each of them and return the result\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_closest_elements([5, -3, 12, 9, -25]) == (-3, 9)\nassert     find_closest_elements([5, -3, 12, 9, -25, 2]) == (-25, 2)\nassert     find_closest_elements([5, -3, 12, 9, -25, 2, 2]) == (-25, 2)\nassert     find_closest_elements([]) == ()\nassert     find_closest_elements([0]) == (0, 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_closest_elements([5, 4, 3]) == (3, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (2, 4)\nassert     find_closest_elements([6, 2, 10, 5, 1, 3]) == (2, 5)\n\nprint(\"find_closest_elements is correct\")\n\ndef swap_min_max(numbers: List[float]) -> None:\n    \"\"\" Sort the numbers list in-place (modifying the list) so that the minimum number appears first and the maximum\n    number appears last. Use a single swap or a linear scan of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_closest_elements([-14.8, -1.2, -1.1, -1.6, 0, 2.0, -2.0]) == (-1.1, 2.0)\nassert     find_closest_elements([0, -2.0, -2.0, 0.0, 2.0, -2.0]) == (-2.0, 2.0)\nassert     find_closest_elements([0, 0, 0.0, 0, 0, 0, 0]) == (0.0, 0.0)\nassert     find_closest_elements([0, 0, 0, 0, 0, 0, 0]) == (0, 0)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (2, 4)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_closest_elements([10,20,30,40,50,80]) == (10,80), \"Answer is wrong\"\nassert     find_closest_elements([10,20,30,40,50,60]) == (10,60), \"Answer is wrong\"\nassert     find_closest_elements([10,20,30,40,50,70]) == (10,70), \"Answer is wrong\"\nassert     find_closest_elements([10,20,30,40,50,60,80]) == (10,80), \"Answer is wrong\"\nassert     find_closest_elements([10,20,30,40,50,60,70,80]) == (10,70), \"Answer is wrong\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 6)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (1, 12)\n\n\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1, 2]) == [0, 1]\nassert     rescale_to_unit([1, 2, 3]) == [0, 1, 2]\nassert     rescale_to_unit([1, 2, 3, 5]) == [0, 1, 2, 3]\nassert     rescale_to_unit([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     rescale_to_unit([0.5, 0.4, 0.3, 0.2, 0.1]) == [0.5, 0.4, 0.3, 0.2, 0.1]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [0.5, 1, 1.5] == rescale_to_unit([0.5, 1, 1.5])\nassert     [0.5, 1, 1.5] == rescale_to_unit([2.5, 3, 4])\nassert     [0.25, 0.5, 0.75] == rescale_to_unit([1, 2, 3])\n\ndef rescale_to_unit_by_divide_largest_by(numbers: List[float], divide: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([2, 4, 8]) == [0.25, 0.5, 1]\nassert     rescale_to_unit([2, 4, 6]) == [0.25, 0.5, 0.75]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 0.1, 0.2, 0.3, 0.4, 0.5]\nassert     rescale_to_unit([-1, 0, 2, 3, 4, 5, 6]) == [-1, 0, 0.2, 0.4, 0.6, 1, 1]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7]) == [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\nassert     rescale_to_unit([-1, 0, 2, 3, 4, 5, 6, 7]) == [-1, 0, 0.2, 0.4, 0.6, 0.8, 1, 1]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8]) == [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [0, 1] == rescale_to_unit([3, 4])\nassert     [0, 1] == rescale_to_unit([3, 6])\nassert     [0, 1] == rescale_to_unit([1, 3])\nassert     [0, 1] == rescale_to_unit([1, 4])\nassert     [0, 0.5] == rescale_to_unit([1, 2])\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1]) == [0.0]\nassert     rescale_to_unit([1, 2]) == [0.0, 1.0]\nassert     rescale_to_unit([1, 2, 3]) == [0.0, 0.5, 1.0]\nassert     rescale_to_unit([1, 2, 3, 4]) == [0.0, 0.25, 0.5, 0.75]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([-10, -12.5, 0, 2.5, 6.0, 10]) == [0, 0, 0, 0.5, 0.75, 1]\nassert     rescale_to_unit([-10, -12.5, 0, 2.5, 6.0, 10, 12.5]) == [0, 0, 0, 0.5, 0.75, 1, 0.25]\nassert     rescale_to_unit([-10, -12.5, 0, 2.5, 6.0, 10, 12.5, 20, 100]) == [0, 0, 0, 0.5, 0.75, 1, 0.25, 0, 0]\nassert     rescale_to_unit([-10, -12.5, 0, 2.5, 6.0, 10, 12.5, 20, 100, 0]) == [0, 0, 0, 0.5, 0.75, 1, 0.25, 0, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef rescale_to_unit_test():\n    test_cases = [\n        [0, 0, 0],\n        [1, 1, 1],\n        [2, 2, 2],\n        [3, 3, 3],\n        [4, 4, 4],\n        [5, 5, 5],\n        [6, 6, 6],\n        [7, 7, 7],\n        [8, 8, 8],\n        [9, 9, 9],\n        [10, 10, 10],\n        [11, 11, 11],\n        [12, 12, 12],\n        [13, 13, 13],\n        [14, 14, 14],\n        [15, 15, 15],\n        [16, 16, 16],\n        [17, 17, 17],\n        [18, 18, 18],\n        [19, 19, 19],\n        [20, 20, 20],\n        [21, 21, 21],\n        [22, 22, 22],\n        [23, 23, 23],\n        [24, 24, 24],\n        [25, 25, 25],\n        [26, 26, 26],\n        [27, 27, 27],\n        [28, 28, 28],\n        [29, 29, 29],\n        [30, 30, 30],\n        [31, 31, 31],\n        [32, 32, 32],\n        [33, 33, 33],\n        [34, 34, 34],\n        [35, 35, 35],\n        [36, 36, 36],\n        [37, 37, 37],\n        [38, 38, 38],\n        [39, 39, 39],\n        [40, 40, 40],\n        [41, 41, 41],\n        [42, 42, 42],\n        [43, 43, 43],\n        [44, 44, 44],\n        [45, 45, 45],\n        [46, 46, 46],\n        [47, 47, 47],\n        [48, 48, 48],\n        [49, 49, 49],\n        [50, 50, 50],\n        [51, 51, 51],\n        [52, 52, 52],\n        [53, 53, 53],\n        [54, 54, 54],\n        [55, 55, 55],\n        [56, 56, 56],\n        [57, 57, 57],\n        [58, 58, 58],\n        [59, 59, 59],\n        [60, 60, 60],\n        [61, 61, 61],\n        [62, 62, 62],\n        [63, 63, 63],\n        [64, 64, 64],\n        [65, 65, 65],\n        [66, 66, 66],\n        [67, 67, 67],\n        [68, 68, 68],\n        [69, 69, 69],\n        [70, 70, 70],\n        [71, 71, 71],\n        [72, 72, 72],\n        [73, 73, 73],\n        [74, 74, 74],\n        [75, 75, 75],\n        [76, 76, 76],\n        [77, 77, 77],\n        [78, 78, 78],\n        [79, 79, 79],\n        [80, 80, 80],\n        [81, 81, 81],\n        [82, 82, 82],\n        [83, 83, 83],\n        [84, 84, 84],\n        [85, 85, 85],\n        [86, 86, 86],\n        [87, 87, 87],\n        [88, 88, 88],\n        [89, 89, 89],\n        [90, 90, 90],\n        [91, 91, 91],\n        [92, 92, 92],\n        [93, 93, 93],\n        [94, 94, 94],\n        [95, 95, 95],\n        [96, 96, 96],\n        [97, 97, 97],\n        [98, 98, 98],\n        [99, 99, 99],\n        [100, 100, 100],\n        [101, 101, 101],\n        [102, 102, 102],\n        [103, 103, 103],\n        [104, 104, 104],\n        [105, 105, 105],\n        [106, 106, 106],\n        [107, 107, 107],\n        [108, 108, 108],\n        [109, 109, 109],\n        [110, 110, 110],\n        [111, 11"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0, 0.5, 0.75, 1]\nassert     rescale_to_unit([0.1, 0.2, 0.3, 0.4]) == [0, 0.1, 0.2, 0.3]\nassert     rescale_to_unit([0.1, 0.2, 0.3]) == [0, 0.1, 0.2]\nassert     rescale_to_unit([0.1, 0.2]) == [0, 0.1]\nassert     rescale_to_unit([0.1]) == [0, 0.1]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\", 1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"]) == [1, 2, 3]\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3.0\"]) == []\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3.0\", \"f\"]) == []\n\nprint(\"All tests passed!\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_integers([2, 4, 1, 'a', 3, 'c', 4, 6, 'd', 7, 'e', 'f']) == [2, 4, 1, 3, 6, 7]\nassert     filter_integers([2, 4, 1, 'a', 3, 'c', 4, 6, 'd', 7, 'e', 'f']) == [2, 4, 1, 3, 6, 7]\nassert     filter_integers(['a', 'b', 'c', 'd', 'e', 'f']) == []\nassert     filter_integers([2, 4, 1, 'a', 3, 'c', 4, 'd', 7, 'e', 'f']) == [2, 4, 1, 3, 7]\nassert     filter_integers([2, 4, 1, 'a', 3, 'c', 4, 'd', 7, 'e', 'f']) == [2, 4, 1, 3, 7]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1,2,3]) == [1,2,3]\nassert     filter_integers([1,2,3.1,4.2,5]) == [1,2,3]\nassert     filter_integers([1,2,3,'4',5]) == [1,2,3]\nassert     filter_integers([1,2,3,'4',5.1,6.2]) == [1,2,3]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([0, 1, 2, 3, 4]) == [0, 1, 2, 3]\nassert     filter_integers([1, 2, 3, 4,'string']) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, 4.1,'string']) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, 4,'string']) == [1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_integers([1, 1.3, '1', 1+1j, True, False, [], {}]) == [1, 1, 1+1j, 1]\nassert     filter_integers([1, 2, '3', 4, '5', True, False, [], {}, None]) == [1, 2, 4, 5]\nassert     filter_integers([1, 2, '3', 4, '5', True, True, [], {}, None]) == [1, 2, 4, 5, True, True]\nassert     filter_integers([1, 2, '3', 4, '5', True, False, [], {}, None]) == [1, 2, 4, 5, True]\nassert     filter_integers([1, 2, '3', 4, '5', True, False, [], {}, None]) == [1, 2, 4, 5, True]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([1, 2, 3.0, 4, 5]) == [1, 2, 3]\nassert     filter_integers([True, False, 3.0, True, False, 4, 5]) == [3, 4]\nassert     filter_integers([1, 2, 3, True, 4, 5]) == [1, 2, 3, 4]\nassert     filter_integers([1, 2, 3, False, 4, 5]) == [1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3, '4']) == []\nassert     filter_integers([1, '2', 3, '4', 5, '6', 7, 8]) == []\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     filter_integers([1, 2, 3, 4, 5, 6, '7', 8]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], 'filter_integers([1, 2, 3, 4, 5, 6]) failed'\nassert     filter_integers([1.5, 2, 3, 4, 5, 6]) == [], 'filter_integers([1.5, 2, 3, 4, 5, 6]) failed'\nassert     filter_integers(['1', 2, 3, 4, 5, 6]) == [], 'filter_integers([\"1\", 2, 3, 4, 5, 6]) failed'\nassert     filter_integers([None, 2, 3, 4, 5, 6]) == [], 'filter_integers([None, 2, 3, 4, 5, 6]) failed'\n\n\ndef filter_integers_while(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    result = []\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_integers([5, 9, 2, 0, 4]) == [5, 9, 2, 4], \"Error in filter_integers\"\nassert     filter_integers([1, 'a', 0, 'b', 3]) == [1, 0, 3], \"Error in filter_integers\"\n\n\ndef add_integer(values: List[int]) -> int:\n    \"\"\" Add all numbers in the list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nstrlen(\"Hello, world!\") == 13\nstrlen(\"\") == 0\n\ndef substr(string: str, start: int, stop: int) -> str:\n    \"\"\" Return substring starting at the given start index and ending at the given stop index\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('goodbye') == 8\nassert     strlen('') == 0\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef reverse(string: str) -> str:\n    \"\"\" Reverse the given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"1\") == 1\nassert     strlen(\"11\") == 2\nassert     strlen(\"111\") == 3\nassert     strlen(\"1111\") == 4\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef substr(string: str, start: int, length: int) -> str:\n    \"\"\" Return substring of given length starting at given position\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef strlen2(string: str) -> int:\n    \"\"\" Return length of given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strlen(\"c\") == 1\nassert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abc\\n\") == 3\nassert     strlen(\"abcd\\nefgh\") == 8\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     strlen('Hello') == 5\nassert     strlen('Hi') == 2\nassert     strlen('H') == 1\nassert     strlen('') == 0\nassert     strlen('!') == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    assert strlen(\"abc\") == 3\n    assert strlen(\"abcde\") == 5\n\ndef strstr(string: str, sub_string: str) -> int:\n    \"\"\" Return index of first occurence of given substring in given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_divisor(5) == 5\nassert     largest_divisor(8) == 4\nassert     largest_divisor(1) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(15) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"You are currently running largest_divisor.py\")\n    number = int(input(\"Enter a positive integer: \"))\n    print(largest_divisor(number))\nelse:\n    print(\"You are importing largest_divisor.py\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_divisor(8) == 2\nassert     largest_divisor(12) == 6\nassert     largest_divisor(13) == 13\n\ndef count_string(s: str) -> int:\n    \"\"\" Given a string s, count all possible substring that start and end with the same letter\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_divisor(10) == 5, \"Wrong answer for largest_divisor(10)\"\nassert     largest_divisor(123456) == 123456, \"Wrong answer for largest_divisor(123456)\"\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of the divisors of n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_divisor(20) == 5, \"Incorrect result for 20\"\nassert     largest_divisor(15) == 3, \"Incorrect result for 15\"\nassert     largest_divisor(9) == 3, \"Incorrect result for 9\"\nassert     largest_divisor(7) == 7, \"Incorrect result for 7\"\nassert     largest_divisor(4) == 2, \"Incorrect result for 4\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of its divisors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_divisor(2) == 2\nassert     largest_divisor(8) == 2\nassert     largest_divisor(9) == 3\nassert     largest_divisor(24) == 2\nassert     largest_divisor(40) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef get_length(s: str) -> int:\n    \"\"\" Return the length of a string s.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [2, 3, 5, 7] == factorize(105)\nassert     [2, 3, 5, 7] == factorize(435)\nassert     [31, 37, 43, 47, 53, 59, 61] == factorize(8675309)\nassert     [2, 3, 5, 7] == factorize(88)\nassert     [2, 3, 5, 7, 11, 13, 17, 19] == factorize(4058577)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [3, 3, 3] == factorize(27)\nassert     [2, 3] == factorize(6)\nassert     [] == factorize(6*3)\nassert     [2, 2, 3, 3] == factorize(6*3*2)\nassert     [2, 3, 3, 2, 2, 2] == factorize(6*3*2*2*2)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     factorize(36) == [2, 2, 3, 3]\nassert     factorize(1) == [1]\nassert     factorize(36) == [2, 2, 3, 3]\nassert     factorize(5) == [5]\nassert     factorize(6) == [2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [2, 5, 5] == factorize(25)\nassert     [2, 2, 5] == factorize(10)\nassert     [3, 3] == factorize(9)\nassert     [2, 3, 3, 3] == factorize(27)\nassert     [2, 2, 2, 3, 3] == factorize(36)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    factorize(2) == [2]\n    factorize(4) == [2, 2]\n    factorize(5) == [5]\n    factorize(10) == [2, 5]\n    factorize(20) == [2, 2, 5]\n    factorize(0) == []\n    factorize(1) == []\n    factorize(6) == [2, 3]\n    factorize(36) == [2, 2, 3, 3, 3, 5]\n    factorize(64) == [2, 2, 2, 2, 2, 2]\n    factorize(1024) == [2, 2, 2, 2, 2, 2, 2, 2]\n    factorize(3000) == [2, 2, 2, 3, 5, 11]\n    factorize(3000*3000) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    factorize(4*10**100) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [2, 2, 2] == factorize(8)\nassert     [] == factorize(1)\nassert     [3, 3] == factorize(9)\nassert     [2, 3, 3] == factorize(27)\nassert     [2, 2, 3, 3] == factorize(54)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [2,2,2,5,5] == factorize(25)\nassert     [2,2,13] == factorize(49)\nassert     [3,5,7,11] == factorize(123456789)\n\ndef find_all_duplicates(arr: List[int]) -> List[int]:\n    \"\"\" Find all duplicates in the given list in the order they first appear in the list.\n    (i.e. duplicates will not be listed after all elements they were compared with).\n    It should work for the arrays of any length and take less than O(n) time.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (factorize(24) == [2, 2, 2, 3])\nassert     (factorize(120) == [2, 2, 3, 5])\nassert     (factorize(7776) == [2, 2, 2, 2, 2, 2, 2])\nassert     (factorize(999) == [3, 3, 3])\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True is given number is prime and False otherwise \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(6) == [1, 2, 3]\nassert     factorize(24) == [2, 2, 2, 3]\nassert     factorize(120) == [2, 2, 2, 3, 5]\nassert     factorize(720) == [2, 2, 2, 2, 2, 3, 3, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4], \"case1\"\nassert     remove_duplicates([1, 2, 3, 4, 3]) == [1, 2, 3, 4], \"case2\"\nassert     remove_duplicates([1, 2, 3, 4, 3, 4]) == [1, 2, 3, 4], \"case3\"\n\ndef remove_duplicates_inplace(numbers: List[int]) -> None:\n    \"\"\"\n    Remove all elements that occur more than once from a list of integers in place.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5]\n\n\ndef search_list(numbers: List[int], value: int) -> int:\n    \"\"\" Find and return the index of value in numbers.\n    Return -1 if value is not in numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2]) == [1, 1, 2, 2]\nassert     remove_duplicates([1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\ndef merge_two_sorted_lists(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\" From 2 sorted lists, return a list containing all elements that\n    occur in either list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [1, 2, 3, 3, 4, 5, 5, 5] == remove_duplicates([1, 2, 3, 3, 4, 5, 5, 5])\nassert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nprint(\"remove_duplicates passed all tests\")\n\ndef remove_duplicates_v1(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result: List[int] = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 3, 5, 5, 7, 7]) == [1, 2, 3, 5, 7]\nassert     remove_duplicates([1, 1, 1, 2, 3, 3, 4, 5, 5, 7]) == [1, 2, 3, 4, 5, 7]\nassert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 3, 3, 5])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 2, 3, 3, 4, 4, 4, 4])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\nassert remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1]\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1,2,2,2] == remove_duplicates([1, 2, 2, 2])\nassert     [1,2,3] == remove_duplicates([1, 2, 2, 3])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 2, 2, 3, 3, 4, 2, 2])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 1, 2, 2, 3, 3, 4, 2, 2])\n\n\ndef sum_of_two_integers(a: int, b: int) -> int:\n    \"\"\"\n    Given a non-negative integer c, return the sum of the two integers\n    that have the smallest absolute difference of any two integers.\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 2]) == [1, 2]\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     flip_case(\"HELlO\") == \"hEllO\"\nassert flip_case(\"1234!_\") == \"1234!_\"\nassert flip_case(\"shEllo\") == \"sHEllO\"\nassert flip_case(\"sHeeLLo\") == \"sHeLLo\"\nassert flip_case(\"!sHeeLLo\") == \"!SHeLLO\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     flip_case(\u201cmacdonald\u201d) == \u201cMACDONALD\u201d, \u201cincorrect for: macdonald\u201d\nassert     flip_case(\u201cBigMac\u201d) == \u201cBIGMAC\u201d, \u201cincorrect for: BigMac\u201d\nassert     flip_case(\u201cMACdonald\u201d) == \u201cMACDONALD\u201d, \u201cincorrect for: MACdonald\u201d\nassert     flip_case(\u201cmacdonald\u201d) == \u201cMACDONALD\u201d, \u201cincorrect for: macdonald\u201d\nassert     flip_case(\u201cBig mac\u201d) == \u201cBIGMAC\u201d, \u201cincorrect for: Big mac\u201d\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     flip_case('a') == 'A'\nassert     flip_case('A') == 'a'\nassert     flip_case('z') == 'Z'\nassert     flip_case('Z') == 'z'\nassert     flip_case('hello') == 'HELLO'\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     flip_case(\"Programming\") == \"PROGRAMMiNG\"\nassert flip_case(\"Python\") == \"pYTHON\"\nassert flip_case(\"camelCase\") == \"camelCASE\"\nassert flip_case(\"Snake_case\") == \"SNAKE_CASE\"\nassert flip_case(\"Whiskey_Sour\") == \"WHISKEY_SOUR\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     flip_case(\"python\") == \"pYTHON\"\nassert     flip_case(\"PyThon\") == \"pYTHON\"\nassert     flip_case(\"pythonic\") == \"pYTHONiC\"\n\ndef string_both_ends(string: str) -> str:\n    \"\"\" Return a string made of its first and last characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     flip_case(\"Hello\") == \"hELLO\"\nassert     flip_case(\"What a beautiful day\") == \"whaT a BeauTiful dyE\"\nassert     flip_case(\"This is a sentence\") == \"thI s iS a sENTENCE\"\n\nprint(\"Exercise 2.2 is correct.\")\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     flip_case(\"HELLO\") == \"hELLO\"\nassert     flip_case(\"hello\") == \"hELLO\"\nassert     flip_case(\"Hi\") == \"iH\"\nassert     flip_case(\"hi\") == \"iH\"\nassert     flip_case(\"HellO\") == \"hEllO\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"aBc\") == \"AbC\"\nassert     flip_case(\"AbC\") == \"aBc\"\nassert     flip_case(\"aBcDe\") == \"AbCde\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     flip_case(\"HackerRank.com presents \" +\n                \"YouCompleteMe.\") == \"hACKERrANK.COM PRESENTS \" +\n                \"YouCompleteMe.\"\nassert     flip_case(\"HackerRank.com presents \" +\n                \"YouCompleteMe.\") == \"hACKERrANK.COM PRESENTS \" +\n                \"yOUcOMPLETEm.\"\n\nif __name__ == '__main__':\n    print('Example:')\n    print(flip_case(\"HackerRank.com presents \" +\n                \"YouCompleteMe.\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert flip_case(\"HackerRank.com presents \" +\n                \"YouCompleteMe.\") == \"hACKERrANK.COM PRESENTS \" +\n                \"yOUcOMPLETEm.\"\n    "
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     flip_case('HeLlO') == 'hEllO'\nassert     flip_case('sWoRlD') =='sWoRlD'\nassert     flip_case('YoUr FoR MaN') == 'yOu FoR mAiN'\nassert     flip_case('WoRlD') == 'WoRlD'\n\nprint('all tests passed')\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     concatenate(['ab', 'cd', 'ef']) == 'abcdef'\nassert     concatenate(['abc', 'def', 'ghi']) == 'abcdefghi'\nassert     concatenate(['jkl','mno', 'pqr','stu', 'vwx']) == 'jklmnoqrstuvwx'\n\ndef join(characters: List[str], separator: str = \"\") -> str:\n    \"\"\" Join list of strings into a single string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef find_min_letter(word: str, c: str) -> str:\n    \"\"\" Find the minimum letter of the given word, that appears in the word more than once.\n    \n    >>> find_min_letter('aaabaaaa', 'a')\n    'b'\n    >>> find_min_letter('abcd', 'z')\n    ''\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"\"]) == \"abcdefghi\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"\", \"jkl\"]) == \"abcdefghijkl\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"\", \"jkl\", \"\"]) == \"abcdefghijkl\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"\", \"jkl\", \"\", \"\"]) == \"abcdefghijkl\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     concatenate([\"Hello\"]) == \"Hello\"\nassert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\", \"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     concatenate(['a', 'b', 'c']) == 'abc'\nassert     concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'abcdefg'\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == 'abcdefgh'\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == 'abcdefghi'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     concatenate(['a']) == 'a'\nassert     concatenate(['a', 'b']) == 'ab'\nassert     concatenate(['a', 'b', 'c']) == 'abc'\nassert     concatenate(['a', 'b', 'c', 'd']) == 'abcd'\nassert     concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     concatenate(['hello', 'world', 'how', 'are', 'you']) == 'hello world how are you'\nassert concatenate(['foo', 'bar']) == 'foobar'\n\n\ndef concat_join(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string using join() method\n    \"\"\"\n    pass\n\n\nassert concat_join(['hello', 'world', 'how', 'are', 'you']) == 'hello world how are you'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     concatenate([\"apple\", \"berry\", \"cherry\"]) == \"appleberrycherry\"\nassert     concatenate([\"\", \"berry\", \"\"]) == \"berry\"\nassert     concatenate([\"apple\", \"\"]) == \"apple\"\nassert     concatenate([]) == \"\"\nassert     concatenate([None]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"\"]) == \"abcdefghi\"\nassert     concatenate([\"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"\", \"\", \"abc\", \"def\", \"ghi\", \"\"]) == \"abcdefghi\"\nassert     concatenate([\"\", \"\", \"\", \"abc\", \"def\", \"ghi\", \"\"]) == \"abcdefghi\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"apple\", \"banana\", \"cat\"], \"a\") == ['apple', 'cat']\nassert     filter_by_prefix([\"apple\", \"banana\", \"cat\"], \"ba\") == ['banana']\nassert     filter_by_prefix([\"apple\", \"banana\", \"cat\"], \"\") == ['apple', 'banana', 'cat']\nassert     filter_by_prefix([], \"ba\") == []\nassert     filter_by_prefix([\"apple\", \"banana\", \"cat\"], \"ab\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"qu\") == [\"qux\"]\nassert filter_by_prefix([\"baz\", \"bar\", \"foo\", \"qux\"], \"qu\") == []\nassert filter_by_prefix([\"baz\", \"bar\", \"foo\", \"qux\"], \"ba\") == [\"bar\", \"baz\"]\nassert filter_by_prefix([\"baz\", \"bar\", \"foo\", \"qux\"], \"ba\") == [\"bar\", \"baz\"]\nassert filter_by_prefix([\"baz\", \"bar\", \"foo\", \"qux\"], \"fo\") == [\"foo\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['Apple', 'Ball', 'Cat', 'Dog', 'Elephant'], 'A') == ['Apple', 'Ball', 'Elephant']\nassert filter_by_prefix(['Apple', 'Ball', 'Cat', 'Dog', 'Elephant'], 'a') == ['Apple', 'Ball', 'Elephant']\nassert filter_by_prefix(['Apple', 'Ball', 'Cat', 'Dog', 'Elephant'], 'B') == ['Ball', 'Elephant']\nassert filter_by_prefix(['Apple', 'Ball', 'Cat', 'Dog', 'Elephant'], 'C') == ['Cat', 'Elephant']\nassert filter_by_prefix(['Apple', 'Ball', 'Cat', 'Dog', 'Elephant'], 'E') == ['Elephant']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert\n\nif __name__ == '__main__':\n    strings = [\"abz\", \"rst\", \"zzz\", \"abc\", \"123\"]\n    prefix = 'abc'\n    expected = [\"abc\", \"abc\"]\n    assert filter_by_prefix(strings, prefix) == expected\n\n    strings = [\"abz\", \"rst\", \"zzz\", \"abc\", \"123\"]\n    prefix = 'zzz'\n    expected = [\"zzz\"]\n    "
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_prefix(['aaa', 'aab', 'abbc', 'aac', 'abbb', 'a', 'ab'], 'ab') == ['a', 'ab', 'aac', 'abbb']\nassert     filter_by_prefix(['', 'aab', 'a', 'a', 'aab', 'ab'], 'a') == ['', 'aab', 'a', 'a', 'aab', 'ab']\nassert     filter_by_prefix(['aaa', 'aab', 'abbc', 'aac', 'abbb', 'a', 'ab'], 'b') == ['aaa', 'aab', 'abbb', 'aac', 'abbb', 'ab']\nassert     filter_by_prefix(['aaa', 'aab', 'abbc', 'aac', 'abbb', 'a', 'ab'], '') == ['aaa', 'aab', 'abbc', 'aac', 'abbb', 'a', 'ab']\nassert     filter_by_prefix([], 'a') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"a\", \"b\", \"abc\", \"d\"], \"ab\") == [\"abc\", \"abc\"]\nassert     filter_by_prefix([\"ab\", \"bc\", \"abc\"], \"ab\") == [\"ab\", \"abc\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"ab\") == []\nassert     filter_by_prefix([\"ab\", \"a\"], \"ab\") == [\"ab\", \"ab\"]\nassert     filter_by_prefix([\"\", \"a\", \"b\"], \"ab\") == [\"\", \"ab\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"python\", \"c\", \"c++\"], \"c\") == [\"c\", \"c++\"]\nassert     filter_by_prefix([\"c\", \"c++\", \"c#\", \"go\"], \"c\") == [\"c\", \"c++\", \"c#\"]\nassert     filter_by_prefix([\"haskell\", \"c#\", \"erlang\", \"python\"], \"c#\") == [\"c#\"]\nassert     filter_by_prefix([\"noc\", \"noc++\", \"haskell\"], \"noc\") == [\"noc\", \"noc++\"]\nassert     filter_by_prefix([\"haskell\", \"noc\", \"noc++\", \"erlang\"], \"noc\") == [\"noc\", \"noc++\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1, 2, 3, 4, 5] == get_positive([-1, 0, 1, 2, 3, 4, 5, 6])\nassert     [] == get_positive([-1, -2, -3])\n\ndef get_positive_list(l: list):\n    \"\"\"Return only positive numbers from the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     get_positive([-1, -2, -3, -4, -5, -6, -7, -8]) == [-1, -2, -3, -4, -5, -6, -7, -8]\nassert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     get_positive([-1, -2, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_positive([1, -1, 0, -2, 3, 4, 5]) == [1, 3, 4, 5]\nassert     get_positive([]) == []\nassert     get_positive([2, -1, -1, 0, -2, 3, 4, 5]) == [2, 3, 4, 5]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_positive([-5, -3, -1, 0, 1, 3, 6, 10]) == [1, 3, 6, 10]\nassert     get_positive([-5, -3, -1, 0, 1, 3, 6, 10, -10]) == [1, 3, 6, 10]\nassert     get_positive([0, -5, -3, -1, 0, 1, 3, 6, 10, -10]) == [1, 3, 6, 10]\nassert     get_positive([0]) == [0]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_positive([-1, 2, 3, 4, -5, -6]) == [2, 3, 4]\nassert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     get_positive([-2, -4, -6]) == []\n\ndef get_length(l: list):\n    \"\"\"Return the length of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]\nassert     get_positive([1,2,3,4,-1]) == [1,2,3,4]\nassert     get_positive([1,2,3,4,0]) == [1,2,3,4]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_positive([1, -5, -4, 3, 0]) == [1, 3, 0]\nassert     get_positive([-4, 3, -7]) == []\nassert     get_positive([0, 0, -1, 1]) == [0, 1]\nassert     get_positive([0]) == [0]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_positive([1, -2, 3, 4, -5]) == [1, 3, 4]\nassert     get_positive([1, -2, 3, 4, -5, -6]) == [1, 3, 4]\nassert     get_positive([]) == []\n\ndef add_positive(l: list):\n    \"\"\"Add 100 to every positive element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_positive([2, 5, 1, 4, -3, 4]) == [2, 5, 4]\nassert     get_positive([-3, -5, 1, -4, 5, -2]) == [1, 5, -2]\nassert     get_positive([5, 1, -3, -6, 9, 4]) == [5, 1, 9, 4]\nassert     get_positive([]) == []\n\ndef get_unique_elements(l: list):\n    \"\"\"Return only unique elements of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_prime(2) == True,     2    \nassert     is_prime(8) == False,    8\nassert     is_prime(1) == False,    1\nassert     is_prime(4) == False,    4\nassert     is_prime(5) == True,     5\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert ____ is ____, 'The answer for the prime number, 2, is correct.'\nassert ____ is ____, 'The answer for the prime number, 3, is correct.'\nassert ____ is ____, 'The answer for the prime number, 5, is correct.'\nassert ____ is ____, 'The answer for the prime number, 7, is correct.'\nassert ____ is ____, 'The answer for the prime number, 9, is correct.'\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(9) == False\nassert     is_prime(29) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(5) == True\nassert     is_prime(7) == True\nassert     is_prime(29) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_prime(0)         == False\nassert     is_prime(1)         == False\nassert     is_prime(2)         == True\nassert     is_prime(3)         == True\nassert     is_prime(4)         == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (is_prime(5) == True)\nassert     (is_prime(6) == False)\nassert     (is_prime(13) == True)\nassert     (is_prime(27) == False)\n\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_prime(17) == True\nassert     is_prime(6) == False\nassert     is_prime(13) == True\nassert     is_prime(1) == False\n\ndef is_prime_via_brute_force(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 3:\n        return n > 1\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_prime(11) == True\nassert     is_prime(12) == False\nassert     is_prime(13) == True\nassert     is_prime(15) == False\nassert     is_prime(22) == True\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     poly([1, 2, 3], 0.5) == 5.0\nassert     poly([1, 2, 3, 4], 2.0) == 2.0\nassert     poly([1, 2, 3, 4, 5], 2.0) == 2.0\nassert     poly([1, 2, 3, 4, 5, 6], 2.0) == 4.0\nassert     poly([1, 2, 3, 4, 5, 6, 7], 2.0) == 6.0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_zero([1, 2, 3]) == 2.0\nassert     find_zero([-2, 3, 3, 1]) == 1.0\nassert     find_zero([1, 3, 2, 1]) == 2.0\nassert     find_zero([1, 2, 3, 1]) == 2.0\nassert     find_zero([-1, 2, 3, 1]) == 1.0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     poly([2, 3, 4], 0.3) == 2.3\nassert     poly([2, 3, 4], 0) == -2.0\nassert     poly([-2, 3, 4], 0) == 2.0\nassert     poly([-2, 3, 4], 0.3) == -2.3\nassert     poly([1, 2, 3], -0.1) == -0.1\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_zero([2, 1, 0, 0]) == [1]\nassert     find_zero([1, -2, 2]) == [-2, 2]\nassert     find_zero([1, -2, 2, 0, 0, 0, 0]) == [-2, 2]\nassert     find_zero([1, 0, 0, 0, 0, 0, 0]) == [0]\nassert     find_zero([1, 2, -2]) == [-2, 1]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     poly([1,0,0], 1) == 0\nassert     poly([0,1,0,0], 1) == 0\nassert     poly([0,0,1,0], 1) == 0\nassert     poly([1,1,0,0,0,0], 1) == 0\nassert     poly([1,0,1,0,0,0,0], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_zero([1, 2, 4, 0, 0]) == 2\nassert     find_zero([1, 2, 4]) == 2\nassert     find_zero([1, 2, 4, -5, 0]) == -3\nassert     find_zero([1, 0, 1, 1]) == -1\nassert     find_zero([1, 1, 1, 1, 1]) == -1\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     poly([0, 1], 0) == 0\nassert     poly([1, -1], 0) == 0\nassert     poly([1, 2, 3], 0) == 0\nassert     poly([1, 2, 3, -4], 0) == 0\nassert     poly([0, 1, 2, 3], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     poly([1, 1, 1], 2) == 1\nassert     poly([2, -1, -1], 3) == 2\nassert     poly([1, 1, 1, 1], 2) == 1\nassert     poly([2, -1, -1, 1], 3) == 2\nassert     poly([2, -1, -1, 1], 4) == 2\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_zero([0]) == 0\nassert     find_zero([1]) == 0\nassert     find_zero([1, 1]) == 0\nassert     find_zero([1, 1, 1]) == 0\nassert     find_zero([2, 1]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     poly([1, 2, 0, -1], 1) == 1\nassert     poly([1, 2, 0, -1], 2) == 2\nassert     poly([1, 2, 0, -1], 3) == 0\nassert     poly([1, 2, 0, -1], 4) == -1\nassert     poly([1, 2, 0, -1], 5) == -2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_third([3, 6, 2, 12, 15, 18]) == [2, 3, 6, 12, 15, 18]\nassert     sort_third([7, 6, 3, 2, 12, 15, 18]) == [2, 3, 6, 7, 12, 15, 18]\nassert     sort_third([7, 6, 3, 2, 12, 15, 18, 2, 3, 6, 7, 12, 15, 18]) == [2, 2, 2, 3, 3, 6, 6, 7, 7, 12, 12, 15, 15, 18, 18]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_third([]) == []\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef sort_third2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nprint(\"Correct!\")\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_third([4,1,3,2,5,7,6,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_third([4,1,3,2,5,7,6,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_third([5,4,3,2,1,7,6,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"The list [1, 2, 3, 4, 5] should be sorted to [1, 2, 3, 4, 5]\"\nassert     sort_third([4, 6, 7, 1, 2, 3]) == [1, 2, 3, 4, 6, 7], \"The list [4, 6, 7, 1, 2, 3] should be sorted to [1, 2, 3, 4, 6, 7]\"\nassert     sort_third([2, 1, 3, 5, 4, 0, -3, -2, -1]) == [-3, -2, -1, 2, 1, 1, 3, 4, 5], \"The list [-3, -2, -1, 2, 1, 1, 3, 4, 5] should be sorted to [-3, -2, -1, 2, 1, 1, 3, 4, 5]\"\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"The list [1, 2, 3, 4, 5, 6, 7, 8] should be sorted to [1, 2, 3, 4, 5, 6, 7, 8]\"\n\ndef delete_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are removed\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([6, 4, 3, 1, 2, 7, 8, 5, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([1, 6, 3, 4, 5, 7, 8, 9]) == [1, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([]) == []\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_third([9, 7, 8, 7, 9, 7, 3, 1, 4, 4, 3]) == [9, 7, 8, 7, 9, 7, 3, 1, 4, 4, 3], 'incorrect'\nassert     sort_third([1, 2, 3, 4, 4, 3, 2, 1]) == [1, 2, 3, 4, 4, 3, 2, 1], 'incorrect'\nassert     sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [9, 8, 7, 6, 5, 4, 3, 2, 1], 'incorrect'\nassert     sort_third([1, 2, 3, 4, 4, 3, 2, 1, 1]) == [1, 2, 3, 4, 4, 3, 2, 1, 1], 'incorrect'\nassert     sort_third([3, 2, 1, 1, 4, 4, 2, 3]) == [3, 2, 1, 1, 4, 4, 2, 3], 'incorrect'\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_third([1, 3, 5, 2, 0]) == [1, 2, 3, 5, 0], \"Failed. Your function returned an incorrect value\"\nassert     sort_third([1, 3, 5, 2]) == [1, 2, 3, 5], \"Failed. Your function returned an incorrect value\"\nprint(\"Passed\")\n\nprint(\"\\n\")\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == [1,2,3,6,5,4]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == \\\n        [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     sort_third([100,100,100,100,200,200,200,200,200,300,300,300,300,400,400,400,400,400,500,500,500,500,600,600,600,600,600,700,700,700,700,800,800,800,800,800,900,900,900,900,900,1000,1000,1000,1000,1000] \\\n        == [100,100,100,100,100,200,200,200,200,200,200,300,300,300,300,300,300,300,300,400,400,400,400,400,400,400,400,400,400,500,500,500,500,500,500,500,500,500,500,500,500,600,600,600,600,600,600,600,600,600,600,600,600,600,600,700,700,700,700,700,700,800,800,800,800,800,800,800,800,800,800,800,800,900,900,900,900,900,900,900,900,900,900,900,1000,1000,1000,1000,1000]\nprint(\"Problem 3.1 is correct.\")\nprint(\"------------------------------------\")\nprint(\"\")\n\ndef sort_forth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     unique([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert unique([1, 2, 3, 4, 5, 4]) == [1, 2, 3, 4, 5]\nassert unique([1, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([1, 1, 1, 1, 2, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef rotate(l: list, n: int):\n    \"\"\"Return rotated list by n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1,2]) == [1, 2]\nassert     unique([1,1,1]) == [1]\nassert     unique([1,2,3]) == [1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef product(nums: list):\n    \"\"\"Return the product of the numbers in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8, 1, 2]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nif __name__ == \"__main__\":\n    print(unique([1, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique(['t','s', 't', 't','s','s', 'w']) == ['s', 't', 'w']\nassert     unique([]) == []\nassert     unique([0, 1, 1, 2, 3]) == [0, 1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique([1,2,3,4,2,1]) == [1,2,3,4]\nassert     unique([2,2,1,2,3,1,2,4]) == [2,1,3,4]\nassert     unique([2,2,1,2,3,1,2,4]) == [2,1,3,4]\nassert     unique([2,2,1,2,3,1,2,4]) == [2,1,3,4]\nassert     unique([2,2,1,2,3,1,2,4]) == [2,1,3,4]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique([1, 1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 2, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert     unique([]) == []\nassert     unique([1, 2, 3, 4, 5, 6, 7, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef find(l: list, elem: int):\n    \"\"\"Find the index of the first occurence of elem in l\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [1,2,3] == unique([1,2,1,2,3])\nassert     [] == unique([])\nassert     [1] == unique([1])\nassert     [1,2,3] == unique([1,2,1])\nassert     [1,2,3] == unique([1,1,2,2,3,3])\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_element(l=[1, 2, 3, 4, 5]) == 5\nassert     max_element(l=[1, 2, 3, 4, 5, 6]) == 6\nassert     max_element(l=[1, 2, 3, 4, 5, 6, 7]) == 7\nassert     max_element(l=[1, 2, 3, 4, 5, 6, 7, 8]) == 8\nassert     max_element(l=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([1, 2, 3, 2]) == 3\nassert     max_element([-1, -2, -3, -4]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     max_element([0, -1, 0, -2, 0]) == 0\nassert     max_element([1, -2, 1, -2, 1]) == 1\nassert     max_element([0, 1, -2, 0]) == 1\nassert     max_element([0, 0, 1, -2, 0]) == 0\nassert     max_element([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, 4, 5, -1]) == 5\nassert     max_element([1]) == 1\nassert     max_element([-1]) == -1\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_element([]) == None\nassert     max_element([3, 4, 5]) == 5\nassert     max_element([2, 4, 5, 10]) == 10\nassert     max_element([-2, -5, -3]) == -2\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_element([]) == None\nassert max_element([7, -3, 6, 1, -8]) == 7\nassert max_element([0, 2, 6, 9, 3]) == 9\nassert max_element([-1, 0, -100, -3, -101]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint(\"max_element(1,2,3) should be 3, max_element(3,2,1) should be 3\")\nprint(\"OK\\n\")\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     max_element([1, 2, 3, -5, 8, 9, 9]) == 9\nassert     max_element([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert     max_element([1, 2, 3, 4, 5, 6, 7, -1, 9, 10]) == 10\nassert     max_element([1, 2, 3, -5, 8, 9, 9, 0]) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fizz_buzz(100) == 2, fizz_buzz(100)\nassert     fizz_buzz(105) == 3, fizz_buzz(105)\nassert     fizz_buzz(110) == 2, fizz_buzz(110)\nassert     fizz_buzz(1214) == 2, fizz_buzz(1214)\nassert     fizz_buzz(1340) == 2, fizz_buzz(1340)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fizz_buzz(6) == 0\nassert     fizz_buzz(100) == 2\nassert     fizz_buzz(11) == 2\nassert     fizz_buzz(13) == 1\nassert     fizz_buzz(112) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef main():\n    import sys\n    n = int(sys.argv[1])\n    fizz_buzz(n)\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fizz_buzz(11) == 3\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(21) == 2\nassert     fizz_buzz(102) == 5\nassert     fizz_buzz(1001) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fizz_buzz(2) == 0\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(11) == 1\nassert     fizz_buzz(13) == 0\nassert     fizz_buzz(22) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fizz_buzz(13) == 0\nassert     fizz_buzz(51) == 0\nassert     fizz_buzz(91) == 1\nassert     fizz_buzz(79) == 1\nassert     fizz_buzz(35) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fizz_buzz(11) == 2\nassert     fizz_buzz(13) == 1\nassert     fizz_buzz(101) == 1\nassert     fizz_buzz(29) == 0\nassert     fizz_buzz(984) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef fizz_buzz_list(n):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    fizz_buzz(10) == 0\n    fizz_buzz(20) == 1\n    fizz_buzz(30) == 0\n    fizz_buzz(41) == 2\n    fizz_buzz(133) == 2\n    fizz_buzz(2211) == 2\n    fizz_buzz(3033) == 1\n    fizz_buzz(1303) == 0\n    fizz_buzz(1034) == 0\n    fizz_buzz(1033) == 2\n    fizz_buzz(2073) == 0\n    fizz_buzz(4333) == 0\n    fizz_buzz(9913) == 1\n    fizz_buzz(991321) == 1\n    fizz_buzz(991322) == 2\n    fizz_buzz(991323) == 2\n    fizz_buzz(991324) == 0\n    fizz_buzz(991325) == 1\n    fizz_buzz(991326) == 2\n    fizz_buzz(991327) == 2\n    fizz_buzz(991328) == 0\n    fizz_buzz(991329) == 1\n    fizz_buzz(991330) == 2\n    fizz_buzz(991331) == 0\n    fizz_buzz(991332) == 1\n    fizz_buzz(991333) == 2\n    fizz_buzz(991334) == 2\n    fizz_buzz(991335) == 1\n    fizz_buzz(991336) == 0\n    fizz_buzz(991337) == 1\n    fizz_buzz(991338) == 2\n    fizz_buzz(991339) == 0\n    fizz_buzz(991340) == 1\n    fizz_buzz(991341) == 2\n    fizz_buzz(991342) == 2\n    fizz_buzz(991343) == 0\n    fizz_buzz(991344) == 1\n    fizz_buzz(991345) == 2\n    fizz_buzz(991346) == 2\n    fizz_buzz(991347) == 2\n    fizz_buzz(991348) == 2\n    fizz_buzz(991349) == 1\n    fizz_buzz(991350) == 0\n    fizz_buzz(991351) == 1\n    fizz_buzz(991352) == 2\n    fizz_buzz(991353) == 2\n    fizz_buzz(991354) == 2\n    fizz_buzz(991355) == 0\n    fizz_buzz(991356) == 1\n    fizz_buzz(991357) == 2\n    fizz_buzz(991358) == 0\n    fizz_buzz(991359) == 1\n    fizz_buzz(991360) == 2\n    fizz_buzz(991361) == 2\n    fizz_buzz(991362) == 2\n    fizz_buzz(991363) == 2\n    fizz_buzz(991364) == 0\n    fizz_buzz(991365) == 1\n    fizz_buzz(991366) == 2\n    fizz_buzz(991367) == 2\n    fizz_buzz(991368) == 0\n    fizz_buzz(991369) == 1\n    fizz_buzz(991370) == 2\n    fizz_buzz(991371) == 2\n    fizz_buzz(991372) == 0\n    fizz_buzz(991373) == 1\n    fizz_buzz(991374) == 2\n    fizz_buzz(991375) == 2\n    fizz_buzz(991376) == 2\n    fizz_buzz(991377) == 0\n    fizz_buzz(991378) == 1\n    fizz_buzz(991379) == 2\n    fizz_buzz(991380) == 2\n    fizz_buzz(991381) == 2\n    fizz_"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef even_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' has the same even indicies as l, but with the odd indicies of l\n    replaced by its values in reverse order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_even([3, 5, 7, 9, 11, 13, 19, 21]) == [3, 3, 5, 7, 9, 11, 13, 19]\nassert     sort_even([3, 5, 7, 9, 11, 13, 19, 21, 2]) == [3, 3, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 19, 19, 21, 21]\nassert     sort_even([3, 5, 7, 9, 11, 13, 19, 21, -1]) == [-1, 3, 3, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 19, 19, 21]\nassert     sort_even([]) == []"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [1,2,4,5,6,7] == sort_even([5,4,3,2,1,7])\nassert     [3,2,4,1,5,6] == sort_even([5,1,4,2,3,6])\nassert     [2,4,3,1,5,6] == sort_even([6,1,3,2,5,4])\nassert     [2,3,4,5,6,7] == sort_even([7,6,5,4,3,2])\nassert     [2,4,5,6,7,8] == sort_even([8,7,6,5,4,3,2])\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_even([1,3,2,4,5,6]) == [1,3,2,6,4,5], \"sort_even([1,3,2,4,5,6])\"\nassert     sort_even([1,3,2,4,5,6,7]) == [1,3,2,6,4,5,7], \"sort_even([1,3,2,4,5,6,7])\"\nassert     sort_even([1,3,5,2,4,6,7]) == [1,3,5,2,4,6,7], \"sort_even([1,3,5,2,4,6,7])\"\nassert     sort_even([1,3,5,7,2,4,6,8]) == [1,3,5,7,2,4,6,8], \"sort_even([1,3,5,7,2,4,6,8])\"\nassert     sort_even([5,3,1,7,2,4,6,8]) == [5,3,1,7,2,4,6,8], \"sort_even([5,3,1,7,2,4,6,8])\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef sum_odd(l: list):\n    \"\"\"This function takes a list l and returns the sum of all the odd values in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    sort_even([2, 1, 7, 3, 5, 4, 2, 9, 10, 0])\n    ==\n    [2, 1, 2, 3, 4, 5, 7, 9, 10, 0]\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_even([2, 4, 6, 8, 10, 3, 1, 5, 7, 9, 0, 11]) == [4, 8, 10, 0, 2, 6, 10, 8, 4, 2, 0, 6]\nassert     sort_even([2, 2, 6, 4, 5, 9, 10, 0, 7, 6, 7]) == [4, 2, 2, 6, 6, 9, 9, 10, 0, 7, 7]\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_even([1, 3, 5, 4, 2]) == [1, 3, 2, 4, 5]\nassert     sort_even([1, 5, 6, 7, 8]) == [1, 5, 6, 7, 8]\nassert     sort_even([2, 1, 3, 5, 4]) == [1, 2, 3, 4, 5]\nassert     sort_even([2, 3, 6, 4, 1]) == [2, 3, 4, 1, 6]\nassert     sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"lpmoxhzrty\") == \"lpmonhxhazrty\"\nassert     decode_cyclic(\"bakuubxqr\") == \"bakubxqr\"\nassert     decode_cyclic(\"mqnthzrty\") == \"mqnthzrty\"\nassert     decode_cyclic(\"zayzmgxqr\") == \"zayzmgxqr\"\nassert     decode_cyclic(\"yqrzbxqm\") == \"yqrzbxqm\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"Hello\")) == \"Hello\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"abc123\")) == \"abc123\"\nassert     decode_cyclic(encode_cyclic(\"123abc\")) == \"123abc\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic(A)) == A\nassert     decode_cyclic(encode_cyclic(B)) == B\nassert     decode_cyclic(encode_cyclic(C)) == C\nassert     decode_cyclic(encode_cyclic(D)) == D\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"heloworle\")) == \"hello worle\"\nassert     decode_cyclic(encode_cyclic(\"google\")) == \"google\"\nassert     decode_cyclic(encode_cyclic(\"abcef\")) == \"abcdef\"\nassert     decode_cyclic(encode_cyclic(\"helloworld\")) == \"helloworld\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decode_cyclic(encode_cyclic(\"cabcd\")) == \"abcde\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert     decode_cyclic(encode_cyclic(\"abcde\")) == \"abcde\"\nassert     decode_cyclic(encode_cyclic(\"abcdefg\")) == \"abcdefg\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decode_cyclic(encode_cyclic(\"PAYPALISHIRING\")) == \"PAHNAPLSIIGYIR\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"xyz\")) == \"xyz\"\nassert     decode_cyclic(encode_cyclic(\"abcxyz\")) == \"abcxyz\"\nassert     decode_cyclic(encode_cyclic(\"abccxyz\")) == \"abccxyz\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\ndef encode_diff(s: str):\n    \"\"\"\n    returns encoded string by replacing all pairs of the same characters with a single character.\n    \"\"\"\n    pass\n\ndef decode_diff(s: str):\n    \"\"\"\n    takes as input encoded string with encode_diff function. Returns decoded string.\n    \"\"\"\n    pass\n\n\ndef encode_anagram(s: str):\n    \"\"\"\n    returns encoded string by replacing all characters in the string that occur in the same positions in a different word with a single character.\n    \"\"\"\n    pass\n\ndef decode_anagram(s: str):\n    \"\"\"\n    takes as input encoded string with encode_anagram function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(prime_fib(0))\nprint(prime_fib(2))\nprint(prime_fib(3))\nprint(prime_fib(6))\nprint(prime_fib(8))\nprint(prime_fib(10))\nprint(prime_fib(11))\nprint(prime_fib(100))\nprint(prime_fib(1000))\nprint(prime_fib(10000))\nprint(prime_fib(100000))"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef fibonacci_modulo(n: int, m: int):\n    \"\"\"\n    fibonacci_modulo returns the n-th Fibonacci number modulo m.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prime_fib(1) == 3\nassert     prime_fib(2) == 5\nassert     prime_fib(4) == 5\nassert     prime_fib(5) == 9\nassert     prime_fib(6) == 13\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_fib(2) == 4\nassert     prime_fib(3) == 7\nassert     prime_fib(4) == 13\nassert     prime_fib(5) == 19\nassert     prime_fib(6) == 43\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prime_fib(10) == 34\nassert     prime_fib(20) == 6765\nassert     prime_fib(30) == 102334155\nassert     prime_fib(40) == 102334155235987676349562\n\nprint(prime_fib(100))\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_fib(2) == [2, 3, 5, 7]\nassert     prime_fib(3) == [3, 5, 7, 11]\nassert     prime_fib(4) == [5, 7, 11, 13]\nassert     prime_fib(5) == [7, 11, 13, 17]\nassert     prime_fib(6) == [11, 13, 17, 19, 23]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    \n    "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_fib(3) == (5, 5), 'Not a Fibonacci number.'\nassert     prime_fib(7) == (13, 13), 'Not a Fibonacci number.'\nassert     prime_fib(8) == (21, 21), 'Not a Fibonacci number.'\nassert     prime_fib(9) == (31, 31), 'Not a Fibonacci number.'\n\nprint('CHECK: All tests passed!')"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert not \nassert \nassert\nassert\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-3,0,1,2,4,6])\nassert not triples_sum_to_zero([2,0,1,2,4,6])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n    triples_sum_to_zero([1, -2, 1, 0, 5]) == True\n    triples_sum_to_zero([-1, 0, 2, 2, 2]) == False\n    triples_sum_to_zero([-1, 1, 1, 2]) == False\n    triples_sum_to_zero([0, 0, 0, 0]) == True\n    triples_sum_to_zero([-4, -5, -2, -4, 1, 2, -4]) == True\n    triples_sum_to_zero([1, 1, -2, 1, 0, 5]) == False\n    triples_sum_to_zero([0, 2, 2, -4]) == False\n    triples_sum_to_zero([-1, -1, 1, 1, 1]) == True\n    triples_sum_to_zero([0, 0, 0, 0]) == True\n\ndef three_sums(l: list):\n    \"\"\"\n    three_sums takes a list of integers as an input.\n    it returns a list of all three distinct elements in the list that \n    sum to zero, if there is one.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([1, 2, 3]) == False, \"Empty list\"\nassert     triples_sum_to_zero([1, 2, 3, 4]) == False, \"List with elements in it\"\nassert     triples_sum_to_zero([0, 2, 3]) == False, \"List with two zeroes\"\nassert     triples_sum_to_zero([1, -2, 3]) == False, \"Negative numbers\"\nassert     triples_sum_to_zero([1, 2, 3]) == False, \"Empty list\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-1,2,3,1,-1]) == False\nassert     triples_sum_to_zero([2,0,2,0]) == False\nassert     triples_sum_to_zero([0,0,0]) == False\nassert     triples_sum_to_zero([3,-1,1,2,0]) == False\nassert     triples_sum_to_zero([1,2,3,1,1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1]) == True\nassert     triples_sum_to_zero([0, -1, 2, 3, 1]) == False\nassert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\n\nprint('all tests passed'"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([-3, -1, 1, 2]) == True\nassert     triples_sum_to_zero([0, 1, 2]) == False\nassert     triples_sum_to_zero([0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([0, 1, 1, 1]) == False\nassert     triples_sum_to_zero([]) == False\nprint(\"passed\")\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1]) == True\nassert triples_sum_to_zero([0, -1, 2, 3, 1]) == False\n\ndef triplet_sum_to_zero_opt(l: list):\n    \"\"\"\n    triplet_sum_to_zero_opt takes a list of integers as an input.\n    it returns a tuple of the form (flag, triplet) where:\n        flag: True if there are three distinct elements in the list that\n              sum to zero, and False otherwise.\n        triplet: a triplet of three distinct elements of the list that\n               sum to zero.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     car_race_collision(1) == 0, \"Wrong answer for n = 1\"\nassert     car_race_collision(2) == 0, \"Wrong answer for n = 2\"\nassert     car_race_collision(3) == 0, \"Wrong answer for n = 3\"\nassert     car_race_collision(4) == 0, \"Wrong answer for n = 4\"\nassert     car_race_collision(5) == 1, \"Wrong answer for n = 5\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0, \"Wrong answer for car_race_collision(1)\"\nassert     car_race_collision(2) == 0, \"Wrong answer for car_race_collision(2)\"\nassert     car_race_collision(3) == 0, \"Wrong answer for car_race_collision(3)\"\nassert     car_race_collision(4) == 1, \"Wrong answer for car_race_collision(4)\"\nassert     car_race_collision(5) == 1, \"Wrong answer for car_race_collision(5)\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     car_race_collision(5) == 0\nassert car_race_collision(8) == 0\nassert car_race_collision(10) == 0\nassert car_race_collision(11) == 1\nassert car_race_collision(50) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     car_race_collision(3) == 3, \"wrong result\"\nassert     car_race_collision(5) == 2, \"wrong result\"\nassert     car_race_collision(1) == 0, \"wrong result\"\nassert     car_race_collision(1) == 0, \"wrong result\"\nassert     car_race_collision(2) == 0, \"wrong result\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     car_race_collision(4) == 9\nassert     car_race_collision(5) == 9\nassert     car_race_collision(7) == 5\n\ndef random_number(start: int, end: int, seed: int):\n    \"\"\"\n    This function generates a random number between start and end.\n\n    Hint:\n    1. How would you use the random function in Python?\n    2. What is the maximum and minimum value of a 64-bit integer?\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef swap(lst: list, i: int, j: int) -> None:\n    \"\"\"\n    Swap the ith and jth element of the list.\n    \n    >>> list = [1, 2, 3, 4]\n    >>> swap(list, 1, 2)\n    >>> list\n    [1, 3, 2, 4]\n    >>>\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     car_race_collision(2) == 0, \"Your code does not work for n = 2\"\nassert     car_race_collision(4) == 0, \"Your code does not work for n = 4\"\nassert     car_race_collision(7) == 1, \"Your code does not work for n = 7\"\nassert     car_race_collision(10) == 2, \"Your code does not work for n = 10\"\nassert     car_race_collision(12) == 3, \"Your code does not work for n = 12\"\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(incr_list([1, 2, 3, 4]))\n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef str_cmp(a: str, b: str):\n    \"\"\"Return True if a == b, else return False.\n    \"\"\"\n    pass\n\ndef str_join(delim: str, l: list):\n    \"\"\"Return a string with all elements in l concatenated.\n    \"\"\"\n    pass\n\ndef str_split(delim: str, s: str):\n    \"\"\"Return a list of substrings.\n    \"\"\"\n    pass\n\ndef str_strip(s: str):\n    \"\"\"Return a string with leading and trailing whitespace removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint('All tests passed!')\n\n\"\"\"\n>>> incr_list([1,2,3])\n[2, 3, 4]\n\"\"\"\n\ndef factorial(n: int):\n    \"\"\"Return the factorial of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (incr_list([1, 2, 3]) == [2, 3, 4])\nassert     (incr_list([0, 9, 7]) == [1, 10, 8])\nassert     (incr_list([]) == [])\nassert     (incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \n\ndef incr_dict(d: dict):\n    \"\"\"Return dictionary with values incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     incr_list([0]) == [1]\nassert     incr_list([1]) == [2]\nassert     incr_list([2]) == [3]\nassert     incr_list([3]) == [4]\nassert     incr_list([4]) == [5]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     incr_list([1,2,3,4,5,6]) == [2,3,4,5,6,7]\nassert     incr_list([]) ==     []\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,8]\nassert     incr_list([10]) == [11]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1,0,-1,2,-2,3]) == True\nassert     pairs_sum_to_zero([1,0,-1,2,2,3]) == False\nassert     pairs_sum_to_zero([0,2,-2,0,2,3]) == True\nassert     pairs_sum_to_zero([-1,0,3,0,2,3]) == False\nassert     pairs_sum_to_zero([]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3]) == False\nassert     pairs_sum_to_zero([1, 0, 2, -1]) == True\nassert     pairs_sum_to_zero([0, -1, 2, 3]) == False\nassert     pairs_sum_to_zero([0, 1, 2, 3]) == False\nassert     pairs_sum_to_zero([]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([1, -1, 2, 3]) == False\nassert     pairs_sum_to_zero([1, -1, 2, 2]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -1]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 0]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, -1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3]) == False, \\\n        \"incorrect\"\nassert     pairs_sum_to_zero([0, -1, 1]) == True, \\\n        \"incorrect\"\nassert     pairs_sum_to_zero([1, 2, 3, 4, -2]) == True, \\\n        \"incorrect\"\nassert     pairs_sum_to_zero([1, -2, 1]) == False, \\\n        \"incorrect\"\nassert     pairs_sum_to_zero([1, 2, 3, -1]) == False, \\\n        \"incorrect\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1, -1, 2, -2]) == True\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3]) == False\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, 0]) == True\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, 5]) == False\nassert     pairs_sum_to_zero([1, -1, 2, -2, 3, -3]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False, \"False negative\"\nassert     pairs_sum_to_zero([0, 2, 3, 4, 5]) == True, \"False positive\"\nassert     pairs_sum_to_zero([1, 2, 3, 4, -5]) == False, \"False positive\"\nprint(\"Correctness check finished\")\n\ndef pairs_sum_to_zero_hash(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1, 3, 6, -3, 1, 1, 6]) == True, \"Wrong result for [1, 3, 6, -3, 1, 1, 6]\"\nassert pairs_sum_to_zero([1, 5, 7, -1, 1]) == False, \"Wrong result for [1, 5, 7, -1, 1]\"\nassert pairs_sum_to_zero([0, -2, 1, 2, 3]) == False, \"Wrong result for [0, -2, 1, 2, 3]\"\nassert pairs_sum_to_zero([5, 6, -7, 8, 9, 10]) == False, \"Wrong result for [5, 6, -7, 8, 9, 10]\"\nassert pairs_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == False, \"Wrong result for [-3, -2, -1, 0, 1, 2, 3]\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([1, -2, 4, 0, -5, 7]) == True\nassert pairs_sum_to_zero([0, 2, 4, -1, 1, 1, 3]) == True\nassert pairs_sum_to_zero([1,2,3]) == False\nassert pairs_sum_to_zero([]) == False\nassert pairs_sum_to_zero([1, 0]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     pairs_sum_to_zero([1, 2, 3, -4]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 0, 5]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 0, -5]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 0, 1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1, 0, 3, 2, -2, 1, -1]) == True\nassert     pairs_sum_to_zero([0, 2, 3]) == False\nassert     pairs_sum_to_zero([0, 1, 2]) == False\nassert     pairs_sum_to_zero([1, 1, 2]) == False\nassert     pairs_sum_to_zero([1, 2, 3]) == False\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     change_base(10, 2) == \"1010\"\nassert     change_base(10, 16) == \"A\"\nassert     change_base(10, 32) == \"100000\"\nassert     change_base(10, 36) == \"Z\"\nassert     change_base(10, 43) == \"C\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     change_base(111, 2) == \"1011\"\nassert     change_base(111, 3) == \"111\"\nassert     change_base(111, 4) == \"1411\"\nassert     change_base(111, 5) == \"1211\"\nassert     change_base(111, 6) == \"1114\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     change_base(21, 2) == '101101'\nassert     change_base(21, 4) == '13211'\nassert     change_base(21, 8) == '215'\nassert     change_base(21, 16) == '3E'"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     change_base(1234, 10) == \"1234\"\nassert     change_base(1234, 2) == \"101010\"\nassert     change_base(1234, 5) == \"1234\"\nassert     change_base(1234, 8) == \"14\"\nassert     change_base(1234, 16) == \"a\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     change_base(40, 2) == '101010'\nassert     change_base(40, 3) == '202'\nassert     change_base(40, 4) == '63'\nassert     change_base(40, 5) == '202'\nassert     change_base(40, 6) == '202'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 3) == '10'\nassert     change_base(10, 10) == '10'\nassert     change_base(10, 16) == 'A'\nassert     change_base(10, 7) == '10'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     change_base(1234, 10) == '1234'\nassert     change_base(1234, 2) == '10010011010010'\nassert     change_base(1234, 16) == '4D2'\nassert     change_base(1234, 3) == '1A3'\nassert     change_base(1234, 8) == '11'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     change_base(5, 4) == \"101\"\nassert     change_base(6, 3) == \"110\"\nassert     change_base(8, 2) == \"1000\"\nassert     change_base(9, 2) == \"1001\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n\n\ndef convert_to_num(base10str: str, base: int):\n    \"\"\"Convert a string into a number.\n    the number is in base10\n    the string is in base 1-10\n    the input is in base 10\n    the output is in base 1-10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triangle_area(1, 1) == 0.5\nassert     triangle_area(2, 2) == 4\nassert     triangle_area(5, 2) == 25\nassert     triangle_area(10, 2) == 50\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (triangle_area(3, 4) == 3.0), \"Area of a triangle with sides 3, 4 is 3.0\"\nassert     (triangle_area(5.4, 6.6) == 12.6), \"Area of a triangle with sides 5.4, 6.6 is 12.6\"\nassert     (triangle_area(6.0, 6.0) == 4), \"Area of a triangle with sides 6.0, 6.0 is 4\"\n\ndef is_even(number):\n    \"\"\"\n    Write an assertion that checks whether the given number is even.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triangle_area(1,1) == 0.5\nassert     triangle_area(3,4) == 10.5\n\ndef shape_area(shape_list):\n    \"\"\"Given a list of shape calculate the area of shape.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (triangle_area(3, 5) - 6) < 0.01, 'incorrect'\nassert     (triangle_area(3, 6) - 7.5) < 0.01, 'incorrect'\nassert     (triangle_area(5, 3) - 7.5) < 0.01, 'incorrect'\n\ndef rectangle_perimeter(l, w):\n    \"\"\"Given length and width of a rectangle return its perimeter.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(3, 5) == 12.5\nassert     triangle_area(4, 8) == 16\nassert     triangle_area(3.2, 3.3) == 12.2\n\ndef is_right(a, b, c):\n    \"\"\"Given 3 sides of a triangle determine if the triangle is right or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triangle_area(1, 1) == 0.5, \"triangle_area(1, 1) failed\"\nassert     triangle_area(1, 2) == 1.0, \"triangle_area(1, 2) failed\"\nassert     triangle_area(1, 3) == 0.4330127018922193, \"triangle_area(1, 3) failed\"\n\ndef circle_area(r):\n    \"\"\"Given radius of a circle return its area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triangle_area(5, 2) == 10, 'check 1'\nassert     triangle_area(7, 4) == 14, 'check 2'\nprint('tests passed')\n\ndef circle_circumference(r):\n    \"\"\"Given radius r return circumference of a circle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given lengths of sides of a triangle return perimeter.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(6) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fib4(3) == 2\nassert     fib4(7) == 13\nassert     fib4(10) == 55\n\ndef fast_fib(n: int):\n    \"\"\"The Fibonacci number sequence is a sequence of numbers such that each number is the sum of the two preceding numbers.  For example, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55...\n    Given an n, return the nth Fibonacci number, F(n).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef is_prime(n: int) -> bool:\n    \"\"\"check whether n is prime\"\"\"\n    pass\n\ndef hanming(a: int, b: int) -> int:\n    \"\"\"Compute the Hamming distance between a and b, which is the number of differing bits in a and b.\"\"\"\n    pass\n\ndef modInverse(x: int, p: int) -> int:\n    \"\"\"Compute the modular inverse of x under mod p.\"\"\"\n    pass\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Check whether s is a palindrome.\"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef fib(n: int):\n    \"\"\"The Fibonacci sequence is defined as follows:\n    fib(0) -> 0\n    fib(1) -> 0\n    fib(2) -> 1\n    fib(3) -> 1\n    fib(4) -> 2\n    fib(5) -> 3\n    fib(n) -> fib(n-1) + fib(n-2)\n    Please write a function to efficiently compute the n-th element of the fib number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     median([1, 2, 3, 4, 5, 6]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4.5\n\ndef mode(l: list):\n    \"\"\"Return the most common value in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef get_kth_smallest(l: list, k: int):\n    \"\"\"Return the kth smallest element in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     median([1, 2, 3]) == 2\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([2, 2, 3, 4, 2, 3, 4]) == 3.0\nassert     median([2, 2, 3, 4, 2, 3, 4, 1]) == 2.5\nassert     median([2, 2, 3, 4, 2, 3, 4, 1, 4, 3, 2]) == 3.0\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 4.5\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     median([1,3,2]) == 2, \"wrong\"\nassert     median([2,4,6]) == 4, \"wrong\"\nassert     median([2,4,6]) == 4, \"wrong\"\nassert     median([2,4,6,8,10]) == 6, \"wrong\"\nassert     median([2,4,6,8,10,12,14]) == 7, \"wrong\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     median([]) == None\nassert     median([1]) == 1\nassert     median([1,2]) == 1.5\nassert     median([1,3,4]) == 2\nassert     median([2,1,3,4]) == 2.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     median([1,2,3,4]) == 2, \"median of [1,2,3,4] is not 2\"\nassert     median([1,2,3,4,5]) == 3, \"median of [1,2,3,4,5] is not 3\"\nassert     median([1,2,3,4,5,6]) == 3, \"median of [1,2,3,4,5,6] is not 3\"\nassert     median([1,2,3,4,5,6,7]) == 3, \"median of [1,2,3,4,5,6,7] is not 3\"\nassert     median([1,2,3,4,5,6,7,8]) == 3, \"median of [1,2,3,4,5,6,7,8] is not 3\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (1 == median([1,2,3,4,5,6,7]))\nassert (2.5 == median([1,2,3,4,5,6,7,8,9,10]))\nassert (2 == median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nassert (5 == median([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nassert (7 == median([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"abbb\")\nassert not is_palindrome(\"ababa\")\nassert is_palindrome(\"abba\")\nassert not is_palindrome(\"aa\")\nassert not is_palindrome(\"abc\")\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"aba\")\nassert     is_palindrome(\"abba\")\nassert not     is_palindrome(\"abab\")\nassert     is_palindrome(\"abbba\")\nassert     is_palindrome(\"abcba\")\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_palindrome('qwertytrewq'), \"is_palindrome(\\\"qwertytrewq\\\")\"\nassert     is_palindrome('qwertyrewq'), \"is_palindrome(\\\"qwertyrewq\\\")\"\nassert     not is_palindrome('asdfghjkl'), \"is_palindrome(\\\"asdfghjkl\\\")\"\nassert     not is_palindrome('asdfghjklqwerty'), \"is_palindrome(\\\"asdfghjklqwerty\\\")\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_palindrome('') == False, 'Empty string'\nassert     is_palindrome('a') == True, 'a'\nassert     is_palindrome('aba') == True, 'aba'\nassert     is_palindrome('abb') == False, 'abb'\nassert     is_palindrome('abbb') == True, 'abbb'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if text == '' or text == None:\n        return True\n    text = text.lower()\n    \n    # reverse string\n    text = text[::-1]\n    \n    # check if text is equal to the reversed text\n    return text == text\n\n\n\ndef longest_palindrome(text: str):\n    \"\"\"\n    Finds the longest palindromic substring in given text\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"radar\") == False\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"hannah\") == False\nassert     is_palindrome(\"already\") == False\nassert     is_palindrome(\"abc\") == False\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     modp(2, 3) == 2\nassert     modp(1234, 3) == 1234\nassert     modp(5, 10) == 5\n\ndef setn(n: int, x: int, n: int):\n    \"\"\"Set n-th element to x.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return p^-1 modulo n (be aware of numerics).\n    \"\"\"\n    pass\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return p^-1 modulo n (be aware of numerics).\n    \"\"\"\n    pass\n\ndef _check_modp_inv(n: int, p: int):\n    \"\"\"check if p^-1 modulo n (be aware of numerics).\n    \"\"\"\n    pass\n\ndef _check_modp_inv(n: int, p: int):\n    \"\"\"check if p^-1 modulo n (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef euler(m: int):\n    \"\"\"Compute the Euler totient function of m.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef rem(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (2 ** 3) % 6 == 2\nassert     (2 ** 5) % 6 == 2\nassert     (2 ** 15) % 6 == 2\nassert     (2 ** 16) % 6 == 2\nassert     (2 ** 17) % 6 == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef mpow(x, n, p):\n    \"\"\"Computes x^n mod p using the exponentiation by squaring algorithm.\n    \"\"\"\n    pass\n\ndef gen_base(n, base, p):\n    \"\"\"Generates the base.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     modp(1,5) == 2\nassert     modp(0,5) == 1\nassert     modp(2,5) == 2\nassert     modp(3,5) == 2\nassert     modp(4,5) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n\ndef modp_inverse(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef binp(n: int):\n    \"\"\"Return the nth binary digit (0 or 1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     modp(0, 1) == 0\nassert     modp(0, 3) == 0\nassert     modp(1, 3) == 2\nassert     modp(2, 3) == 4\nassert     modp(3, 3) == 6\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"a\")) == \"a\"\nassert     decode_shift(encode_shift(\"z\")) == \"z\"\nassert     decode_shift(encode_shift(\"b\")) == \"b\"\nassert     decode_shift(encode_shift(\"B\")) == \"B\"\nassert     decode_shift(encode_shift(\"c\")) == \"c\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decode_shift(encode_shift(\"if you can read this, you can do anything.\")) == \"if you can read this, you can do anything."
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"right on\")) == \"right on\"\nassert     decode_shift(encode_shift(\"almost ready\")) == \"almost ready\"\nassert     decode_shift(encode_shift(\"upper class\")) == \"upper class\"\nassert     decode_shift(encode_shift(\"pretty please\")) == \"pretty please\"\nassert     decode_shift(encode_shift(\"the finest\")) == \"the finest\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert\n\n\ndef encode_vigenere(s: str, keyword: str):\n    \"\"\"\n    returns encoded string by using Vigenere cipher method with keyword.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + ord(keyword[i % len(keyword)]) - ord(\"a\")) % 26) + ord(\"a\"))\n            for i, ch in enumerate(s)])\n\ndef decode_vigenere(s: str, keyword: str):\n    \"\"\"\n    takes as input string encoded with encode_vigenere function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"Python3\")) == \"Python3\"\nassert     decode_shift(encode_shift(\"coding\")) == \"coding\"\nassert     decode_shift(encode_shift(\"edabit\")) == \"edabit\"\nassert     decode_shift(encode_shift(\"gotta\")) == \"gotta\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"abcd\")) == \"abcd\"\nassert     decode_shift(encode_shift(\"saber\")) == \"aber\"\nassert     decode_shift(encode_shift(\"sab\")) == \"ab\"\nassert     decode_shift(encode_shift(\"sabri\")) == \"ri\"\nassert     decode_shift(encode_shift(\"salam\")) == \"amla\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decode_shift(encode_shift(\"ABC\")) == \"ABC\"\nassert     decode_shift(encode_shift(\"DOG\")) == \"DOG\"\n\ndef hamming_distance(s1: str, s2: str):\n    \"\"\"\n    returns hamming distance between strings s1 and s2\n    \"\"\"\n    return sum(ch1!= ch2 for ch1, ch2 in zip(s1, s2))\n\ndef crack_by_mismatch(s: str, k: int, d: int):\n    \"\"\"\n    tries to crack given encrypted string, by finding all possible strings of length k\n    that can be found from s, with at most d mismatches\n    \"\"\"\n    pass\n\ndef test_crack_by_mismatch():\n    "
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decode_shift(\"zabcdefghijklmnopqrstuvwxy\") == \"abcdefghijklmnopqrstuvwxy\"\nassert     decode_shift(\"ghijklmnopqrstuvwxyzabcdef\") == \"abcdefghijklmnopqrstuvwxyzabcdef\"\nassert     decode_shift(\"uotqzjlxjn\") == \"uotqzjlxjn\"\nassert     decode_shift(\"znqxpsrzp\") == \"znqxpsrzp\"\n\n\ndef encode_vigenere(s: str, keyword: str):\n    \"\"\"\n    takes string and keyword, returns encoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) + (ord(keyword[i % len(keyword)]) - ord(\"a\")) % 26) + ord(\"a\")) for i, ch in enumerate(s)])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     'abracadabra' == remove_vowels('abracadabra'),'remove_vowels error'\nassert     'Shubham' == remove_vowels('Shubham'),'remove_vowels error'\nassert     '719' == remove_vowels('719'),'remove_vowels error'\n\n\ndef get_even_letters(text):\n    \"\"\"\n    get_even_letters is a function that takes string and returns list of even index letters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"Python\") == \"ythn\"\nassert     remove_vowels(\"Java\") == \"vw\"\nassert     remove_vowels(\"rithm\") == \"m\"\nassert     remove_vowels(\"programming\") == \"grmmng\"\nassert     remove_vowels(\"aA\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"Hello\") == \"Helo\"\nassert     remove_vowels(\"All\") == \"Al\"\nassert     remove_vowels(\"on\") == \"n\"\nassert     remove_vowels(\"Eyes\") == \"yS\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef test_remove_vowels():\n    \"\"\"\n    test_remove_vowels is a function that test if the remove_vowels function removes all vowels.\n    \"\"\"\n    assert "
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"bye\") == \"b\"\nassert     remove_vowels(\"haha\") == \"hah\"\nassert     remove_vowels(\"hahaha\") == \"ha\"\nassert     remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"This website is for losers LOL!\") == \"Ths wbst s fr lsrs LL!\"\nassert     remove_vowels(\"Happy Birthday!\") == \"Hppy Bdy!\"\nassert     remove_vowels(\"aeiou\") == \"\"\n\n\ndef double_letters(text):\n    \"\"\"\n    double_letters is a function that takes string and returns string that doubles letters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    text = \"I love playing with cats\"\n    print(remove_vowels(text))\n    print(remove_vowels(text))\n    \nmain()\n    \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_threshold([1,2,3], 0) == True\nassert     below_threshold([2,3,1], 0) == True\nassert     below_threshold([1,2,3], 3) == True\nassert     below_threshold([1,2,3], 1) == True\nassert     below_threshold([1,2,3], 4) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef test_below_threshold():\n    \"\"\" Test the below_threshold function\n    \"\"\"\n    # check on empty list\n    assert below_threshold([], 5)\n    # check on one item\n    assert below_threshold([5], 5)\n    # check on three items\n    assert below_threshold([5, 3, 2], 5)\n    # check on all negative\n    "
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == False\nassert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == False\nassert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 100) == True\nassert     below_threshold([], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_threshold([1,2,3,4], 5) == True, \"Wrong answer for below_threshold\"\nassert     below_threshold([1,2,3,4], 4) == False, \"Wrong answer for below_threshold\"\nassert     below_threshold([1,2,3,4], 1) == False, \"Wrong answer for below_threshold\"\nassert     below_threshold([1,2,3,4], 0) == True, \"Wrong answer for below_threshold\"\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5], 2) == True\nassert     below_threshold([1, 2, 3, 4, 5], 6) == False\n\ndef find_missing(l: list):\n    \"\"\"Return the smallest number missing from the list l\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_threshold([1,2,3,4], 10) == False\nassert     below_threshold([1,2,3,4], 8) == True\nassert     below_threshold([1,2,3,4], 100) == False\nassert     below_threshold([1,2,3,4], 4) == True\nprint(\"Question 1 is correct.\")\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_threshold([1, 2, 3], 3) == False\nassert     below_threshold([-1, -2, -3], 1) == True\nassert     below_threshold([1, 2, 3], 4) == True\nassert     below_threshold([5, -1, 7, 10], 1) == False\nassert     below_threshold([-10, 5, -7, 1, 4], -3) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3, 4], 5) == True\nassert     below_threshold([1, 2, 3, 4], 0) == False\nassert     below_threshold([1, 2, 3, 4], -1) == False\nassert     below_threshold([1, 2, 3, 4], -5) == True\nassert     below_threshold([1, 2, 3, 4], -6) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_threshold([1, 3, 5, 7, 9], 4) == False\nassert     below_threshold([1, 3, 5, 7, 9], 9) == True\nassert     below_threshold([1, 3, 5, 7, 9], 0) == True\nassert     below_threshold([], 9) == True\nassert     below_threshold([1, 3, 5, 7, 9], -1) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_threshold([2, 2, 2], 2) == True\nassert     below_threshold([2, 3, 2], 2) == False\nassert     below_threshold([2, 2, 2, 2, 2, 2], 2) == True\nassert     below_threshold([2, 2, 2, 2, 2, 2], 1) == False\nassert     below_threshold([2, 2, 2, 2, 2, 2, 2], 2) == True\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add(5, 3) == 8\nassert     add(3, 5) == 8\nassert     add(7, 3) == 10\nassert     add(0, 3) == 3\nassert     add(2, 0) == 2\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nprint(add(1,2))\nprint(add(1,2))\nprint(add(1,2))\n\n\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add(3,5) == 8\nassert     add(-3,5) == 2\nassert     add(-3,5) == 2\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef add_from_file(file: str):\n    \"\"\"Read the content of file and add the content\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     same_chars(\"abc\", \"def\") == False, \"Wrong Answer\"\nassert     same_chars(\"abc\", \"abc\") == True, \"Wrong Answer\"\nassert     same_chars(\"aaa\", \"abc\") == False, \"Wrong Answer\"\nassert     same_chars(\"abc\", \"abc\") == True, \"Wrong Answer\"\nassert     same_chars(\"\", \"\") == True, \"Wrong Answer\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     same_chars('hello', 'hell')\nassert     same_chars('hello', 'helloo')\nassert     same_chars('he', 'heee')\nassert     same_chars('h', 'h')\nassert     same_chars('', 'h')\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     same_chars('hello', 'hehe') == True\nassert     same_chars('hello', 'hell') == False\nassert     same_chars('hehe', 'hello') == True\nassert     same_chars('hehe', 'hell') == False\n\ndef same_char_in_list(s0: str, ls: list):\n    \"\"\"\n    Check if one word has the same character as the characters in a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     same_chars(\"aacaa\", \"aabb\") == False\nassert     same_chars(\"abcdefg\", \"aabbccddeeffgg\") == True\nassert     same_chars(\"aaaaa\", \"aaaaa\") == True\nassert     same_chars(\"aaaabbc\", \"aaaaaaa\") == False\nassert     same_chars(\"aaaaaaaaaa\", \"aaaaaaaaaa\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     same_chars('','') == True\nassert     same_chars('a','a') == True\nassert     same_chars('abc','abc') == True\nassert     same_chars('a','bc') == False\nassert     same_chars('','bc') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     same_chars(\"hello\", \"helo\") == False, \"helo\"\nassert     same_chars(\"hello\", \"hell\") == False, \"hell\"\nassert     same_chars(\"\", \"\") == True, \"empty string\"\nassert     same_chars(\"aaaaa\", \"aaaaa\") == True, \"same chars\"\nassert     same_chars(\"abc\", \"def\") == False, \"different chars\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     same_chars('dog', 'cog') == False, 'wrong result'\nassert     same_chars('foo', 'bar') == False, 'wrong result'\nassert     same_chars('foo', 'foofoo') == True, 'wrong result'\nassert     same_chars('foo', 'foobar') == False, 'wrong result'\nassert     same_chars('foofoo', 'foobar') == True, 'wrong result'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     same_chars('aba', 'aba') == True\nassert     same_chars('abc', 'aba') == False\nassert     same_chars('abc', 'bcd') == False\nassert     same_chars('abce', 'bcd') == False\nassert     same_chars('abc', 'bc') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef is_valid_word(dct: dict, word: str):\n    \"\"\"\n    Check if a word is a valid word in the dictionary.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     same_chars(\"hello\", \"hxllo\")\nassert     same_chars(\"hello\", \"hxlld\")\nassert     not same_chars(\"hello\", \"hxlle\")\n\ndef is_one_edit(s0: str, s1: str):\n    \"\"\"\n    Check if two words have one replacement, one insertion, one deletion or no difference\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert ____\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fib(1) == 1, \"Fibonacci(1) should be 1\"\nassert     fib(2) == 1, \"Fibonacci(2) should be 1\"\nassert     fib(7) == 13, \"Fibonacci(7) should be 13\"\n\ndef main():\n    print(fib(7))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fib(0) == 0,         \"Incorrect Fibonacci\"\nassert     fib(1) == 1,         \"Incorrect Fibonacci\"\nassert     fib(2) == 1,         \"Incorrect Fibonacci\"\nassert     fib(3) == 2,         \"Incorrect Fibonacci\"\nassert     fib(4) == 3,         \"Incorrect Fibonacci\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \n\ndef fib_range(n: int):\n    \"\"\"Return list of n Fibonacci numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert _____\nassert _____\nassert _____\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    \"\"\"Use and memoize to optimize fib.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing('<><>')\nassert     correct_bracketing('<(>)<>')\nassert     not correct_bracketing('<')\nassert     not correct_bracketing('<')\nassert     not correct_bracketing('')\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<<>><>\")\nassert     not correct_bracketing(\"<<<<>>>\")\nassert     not correct_bracketing(\"<\")\nassert     not correct_bracketing(\">\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing('<><><>') == True\nassert     correct_bracketing('<><>') == False\nassert     correct_bracketing('<><><') == False\n\ndef not_sum_to_x(L: list, x: int):\n    \"\"\" list L is a list of integers,\n    returns True if no two numbers in L sum to x.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     correct_bracketing('<') == False, \"1st test failed\"\nassert     correct_bracketing('<><') == False, \"2nd test failed\"\nassert     correct_bracketing('<><>') == True, \"3rd test failed\"\nassert     correct_bracketing('<><>') == True, \"4th test failed\"\nassert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing('<>') == True\nassert     correct_bracketing('<') == False\nassert     correct_bracketing('<>') == True\nassert     correct_bracketing('<><') == False\nassert     correct_bracketing('><') == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<ok>\") == True, \"cannot detect opening and closing bracket correctly\"\nassert     correct_bracketing(\"<><>>\") == True, \"cannot detect opening and closing bracket correctly\"\nassert     correct_bracketing(\"<><>\") == False, \"cannot detect opening and closing bracket correctly\"\n\ndef balanced_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if brackets is balanced.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<abc><def><ghi>\") == True\nassert     correct_bracketing(\"<abc><def><ghi<>\") == False\nassert     correct_bracketing(\"<abc><def>ghi>\") == False\nassert     correct_bracketing(\"<abc><def>ghi>\") == False\nassert     correct_bracketing(\"<abc><def><ghi>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<[][]><>\") == True\nassert     correct_bracketing(\"<[][]><\") == False\nassert     correct_bracketing(\">\") == False\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"\") == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     monotonic([1,2,3]) == True\nassert     monotonic([1,2,1]) == False\nassert     monotonic([3,2,1]) == False\nassert     monotonic([1,2,3,4]) == True\nassert     monotonic([1,2,3,2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     monotonic([1,2,3,4,5]) == False\nassert     monotonic([5,4,3,2,1]) == False\nassert     monotonic([1,2,3,3,5]) == True\nassert     monotonic([5,1,2,3,4]) == True\nassert     monotonic([3,3,3,3,5]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n\ndef max_min_indices(l: list):\n    \"\"\"Return a tuple of the indices of the max and min elements of l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef is_sum_of_squares(n: int):\n    \"\"\"Return True if n can be written as the sum of two squares.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     monotonic([1, 3, 5, 4, 6])     == True\nassert     monotonic([-1, -3, -5, -4, -6])     == True\nassert     monotonic([1, 2, 3, 4, 5])     == False\nassert     monotonic([5, 4, 3, 2, 1])     == False\nassert     monotonic([5, 4, 3, 2])     == False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test1_l1 = [1, 2, 3, 5]\n    test1_l2 = [1, 2, 4, 5]\n    print(common(test1_l1, test1_l2))\n    \n    test2_l1 = [1, 2, 3, 4, 5]\n    test2_l2 = [1, 2, 3]\n    print(common(test2_l1, test2_l2))\n    \n    test3_l1 = [1, 2, 3, 4, 5]\n    test3_l2 = [1, 2, 3]\n    print(common(test3_l1, test3_l2))"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     common(list(\"hello\"), list(\"world\")) == list(\"\")\nassert     common(list(\"hello\"), list(\"hello\")) == list(\"hello\")\nassert     common(list(\"one\"), list(\"two\")) == list(\"\")\nassert     common(list(\"one\"), list(\"on\")) == list(\"on\")\nassert     common(list(\"one\"), list(\"two\")) == list(\"\")\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     common(list(range(1, 6)), list(range(5, 11))) == [5, 6]\nassert     common(list(range(1, 6)), list(range(5, 11))) == []\nassert     common(list(range(1, 6)), list(range(1, 6))) == [1, 2, 3, 4, 5]\nassert     common(list(range(1, 6)), [1]) == [1]\nassert     common(list(range(1, 6)), [5]) == [5]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     common([], []) == []\nassert     common([], [1]) == []\nassert     common([1], []) == []\nassert     common([1], [1]) == [1]\nassert     common([1, 2], [1]) == [1]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4] == common([1, 2, 3], [3, 4, 5])\nassert     [1, 2, 3] == common([1, 2, 3], [3, 2, 1])\nassert     [1] == common([1, 2, 3], [3])\nassert     [1] == common([1], [3])\nassert     [] == common([], [3])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1, 3, 4] == common(l1=[1, 2, 3, 4], l2=[3, 4, 5])\nassert     [1, 4] == common(l1=[1, 2, 3, 4], l2=[2, 4, 5])\nassert     [1, 4] == common(l1=[1, 2, 3, 4], l2=[1, 4, 5])\nassert     [1, 4] == common(l1=[1, 2, 3, 4], l2=[1, 2, 4])\nassert     [1] == common(l1=[1, 2, 3, 4], l2=[1, 2, 3, 4])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     common(['A','B','C','D'], ['A','B','E']) == ['A','B']\nassert     common(['A','B','C','D'], ['B','E','F']) == ['B']\nassert     common(['A','B','C','D'], ['B','E']) == ['B']\nassert     common(['A','B','C','D'], ['F']) == []\n\ndef common_uniq(l1: list, l2: list):\n    \"\"\"Return common elements with all duplicates removed from the resulting list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(13195 * 13195) == 29\n\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest multiple of n > 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest multiple of n > 1 that is evenly divisible by all \n    of the numbers from 1 to 20.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(37) == 37\nassert     largest_prime_factor(85) == 85\nassert     largest_prime_factor(90) == 9\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(19) == 19\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(7) == 7\n\nprint('OK')"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(26) == 2\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(2) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(97) == 97\nassert     largest_prime_factor(92) == 11\n\n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(4) == 2\nassert largest_prime_factor(10) == 5\nassert largest_prime_factor(23) == 23\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(2)     == 2\nassert     largest_prime_factor(3)     == 3\nassert     largest_prime_factor(15)     == 3\nassert     largest_prime_factor(13)     == 13\nassert     largest_prime_factor(15)     == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1,     \"it does not work for 1\"\nassert     sum_to_n(10) == 55,     \"it does not work for 10\"\nassert     sum_to_n(100) == 5050,     \"it does not work for 100\"\nassert     sum_to_n(400) == 328350,     \"it does not work for 400\"\n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert _____\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    sum_of_n = 0\n    for i in range(1, n+1):\n        sum_of_n += i\n    return sum_of_n\n\nassert sum_to_n(1) == 1\nassert sum_to_n(3) == 6\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert _____, \"sum_to_n() wrong!\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") is True\nassert     correct_bracketing(\"(()())\") is True\nassert     correct_bracketing(\"(()())\") is True\nassert     correct_bracketing(\"())(()\") is False\nassert     correct_bracketing(\"())\") is False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing('((()))')\nassert     correct_bracketing('(())')\nassert     not correct_bracketing('())')\nassert     not correct_bracketing('((()))')\nassert     not correct_bracketing('((())')\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(()()())\") == True\nassert     correct_bracketing(\"((()())((())))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \ncorrect_bracketing(\"(())\")\nassert correct_bracketing(\"(()())\")\nassert correct_bracketing(\"(())((()))\")\nassert not correct_bracketing(\")(\")\nassert not correct_bracketing(\"())(\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(()))\")\nassert not correct_bracketing(\"(()))((()\")\nassert not correct_bracketing(\"(()))(\")\nassert not correct_bracketing(\"((()()())(((()))))))\")\n\ndef parse_brackets(brackets: str) -> list:\n    \"\"\" returns a list of strings of the content in the brackets \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing('((()))')\nassert     correct_bracketing('(())')\nassert     not correct_bracketing('()()')\nassert     not correct_bracketing('())')\nassert     not correct_bracketing('((()))')\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef check_par_bracket(brackets: str):\n    \"\"\"Check the correctness of brackets\n    brackets is a string of \"(\" and \")\"\n    return a list of opening brackets that don't have a closing one\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"(())()\")\nassert     correct_bracketing(\"())(\")\nassert not correct_bracketing(\"(()\")\nassert not correct_bracketing(\")(()\")\nassert not correct_bracketing(\"((()\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef correct_bracketing_no_closures(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(([))\") == False\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\")(\") == False\nassert     correct_bracketing(\"\") == True\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     derivative([1, 2, 3, 4]) == [1, 2, 6]\nassert     derivative([1, 2, 3]) == [2, 4]\nassert     derivative([0, 1]) == [0]\nassert     derivative([0]) == [0]\nassert     derivative([]) == []\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     derivative([1, 2]) == [2, 1]\nassert     derivative([3, 2, 1]) == [2, 1, 0]\nassert     derivative([2, 1, 0]) == [2, 1, 0]\nassert     derivative([4, 3, 2, 1]) == [3, 2, 1, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     derivative([1,2,3]) == [2,4,6]\nassert     derivative([1,2,3,4,5,6,7,8]) == [8,24,48,80,120,160,224,288]\nassert     derivative([1,2,3,4,5,6,7,8,9]) == [9,36,84,144,240,360,480,576]\n\n\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef lagrange(xs: list, ys: list):\n    \"\"\" xs and ys are lists of equal size.\n    xs represents polynomial coefficients of a polynomial.\n    ys represents corresponding y values for these coefficients.\n    Return a list of coefficients corresponding to xs that represent the polynomial defined by these points.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     derivative([1,2,3]) == [2,6,12]\nassert     derivative([3,0,4,-2,1]) == [12,8,0,0,0]\n\ndef newton_method(xs: list, x0: int, eps: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    eps is a stopping criterion.\n    Return value of x for which f(x) = 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     derivative([1, 2, 3, 4, 5]) == [2, 4, 6, 4, 5]\nassert     derivative([1, 0, 1, 0, 1]) == [0, 2, 0, 2, 0]\nassert     derivative([1, 0, 1, 0, 1, 0]) == [0, 2, 0, 4, 0, 2]\nassert     derivative([1, 0, 1, 0, 1, 0, 1]) == [0, 2, 0, 4, 0, 2, 4]\n\ndef find_derivative(xs: list, accuracy: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     derivative([1, 2, 3]) == [2, 3, 6]\nassert     derivative([1, 1, 1]) == [2, 2, 2]\nassert     derivative([1, 0, 1]) == [2, 1, 2]\nassert     derivative([0, 1, 1]) == [1, 1, 2]\nassert     derivative([0, 0, 1]) == [1, 1, 2]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef roots(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return all roots of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef test_fibfib(n=15):\n    assert fibfib(n) == 35422484817926191507"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = int(input())\n    fibfib(n)\n    print(fibfib(n))\n\n'''\n\uc608\uc81c \uc785\ub825 2 \n10\n\uc608\uc81c \ucd9c\ub825 2 \n55\n''"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef fibfib_2(n: int):\n    \"\"\"\n    Iteratively compute the n-th FibFib number.\n    \"\"\"\n    if n <= 1:\n        return n\n    previous, current, nxt = 0, 1, 0\n    for _ in range(n - 1):\n        nxt = previous + current\n        previous, current = current, nxt\n    return current\n\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef fibfib_test(n: int):\n    assert fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return True\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef fibfib_fast(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    pass\n\n\ndef fibfib_fast_fast(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    n = int(input())\n    ans = fibfib(n)\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     vowels_count('abba') == 3, \"abba\"\nassert     vowels_count('nope') == 0, \"nope\"\nassert     vowels_count('yay') == 2, \"yay\"\nassert     vowels_count('yayay') == 3, \"yayay\"\nassert     vowels_count('yayayy') == 3, \"yayayy\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     vowels_count(\"konstantinos\") == 2\nassert     vowels_count(\"skateboarder\") == 2\nassert     vowels_count(\"ground\") == 3\nassert     vowels_count(\"bookkeeper\") == 3\nassert     vowels_count(\"koper\") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     vowels_count('happy') == 4\nassert     vowels_count('python') == 4\nassert     vowels_count('apple') == 3\nassert     vowels_count('sangam') == 0\nassert     vowels_count('zoo') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     vowels_count(\"cheeku\") == 2\nassert     vowels_count(\"karate\") == 3\nassert     vowels_count(\"melon\") == 3\nassert     vowels_count(\"notification\") == 4\nassert     vowels_count(\"thef\") == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     vowels_count(\"awesome\") == 4\nassert     vowels_count(\"pink\") == 3\nassert     vowels_count(\"a\") == 1\nassert     vowels_count(\"\") == 0\nassert     vowels_count(\"o\") == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     vowels_count(\"banana\") == 4\nassert     vowels_count(\"apple\") == 3\nassert     vowels_count(\"lemon\") == 5\nassert     vowels_count(\"zebra\") == 0\nassert     vowels_count(\"moose\") == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     vowels_count(\"abracadabra\") == 7, \"Abra\"\nassert     vowels_count(\"loves\")          == 2, \"Loves\"\nassert     vowels_count(\"coding\")          == 5, \"Coding\"\nassert     vowels_count(\"pinky\")          == 3, \"Pinky\"\nassert     vowels_count(\"mikey\")          == 3, \"Mikey\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     vowels_count('') == 0, \"Case 1\"\nassert     vowels_count('a') == 1, \"Case 2\"\nassert     vowels_count('foo') == 3, \"Case 3\"\nassert     vowels_count('bar') == 2, \"Case 4\"\nassert     vowels_count('foobar') == 3, \"Case 5\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     vowels_count('donut')         == 4\nassert     vowels_count('yippee')         == 5\nassert     vowels_count('apple')         == 5\nassert     vowels_count('pie')         == 3\nassert     vowels_count('')             == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (circular_shift(0b101010, 1) == '101010')\nassert     (circular_shift(0b101010, 2) == '1011010')\nassert     (circular_shift(0b101010, 3) == '10110110')\nassert     (circular_shift(0b101010, 4) == '101101110')\nassert     (circular_shift(0b101010, 5) == '10110111110')\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     circular_shift(1234, 5) == '4321'\nassert     circular_shift(1234, -5) == '1234'\nassert     circular_shift(1234, 5) == '4321'\nassert     circular_shift(1234, 0) == '1234'\nassert     circular_shift(1234, 100) == '4321'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     circular_shift(10, 1) == \"10\"\nassert     circular_shift(10, 2) == \"5\"\nassert     circular_shift(10, 3) == \"4\"\nassert     circular_shift(10, 4) == \"3\"\nassert     circular_shift(10, 5) == \"2\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     str(circular_shift(34,1)) == '4'\nassert     str(circular_shift(34,2)) == '3'\nassert     str(circular_shift(34,3)) == '2'\nassert     str(circular_shift(34,4)) == '1'\nassert     str(circular_shift(34,5)) == '0'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     circular_shift(\"1234\", 3) == \"4321\"\nassert     circular_shift(\"1234\", 4) == \"1432\"\nassert     circular_shift(\"1234\", 0) == \"1234\"\nassert     circular_shift(\"1234\", -1) == \"4321\"\nassert     circular_shift(\"1234\", -4) == \"4321\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     circular_shift(\"1234\", 1) == \"4321\"\nassert     circular_shift(\"1234\", 2) == \"2341\"\nassert     circular_shift(\"1234\", 3) == \"3412\"\nassert     circular_shift(\"1234\", 4) == \"1423\"\nassert     circular_shift(\"1234\", 0) == \"1234\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     circular_shift(42, 1) == '0', '42 is shifted one to the right'\nassert     circular_shift(21, 2) == '0', '21 is shifted two to the right'\nassert     circular_shift(0, 2) == '0', '0 is shifted two to the right'\nassert     circular_shift(42, 10) == '42', '42 is shifted ten to the right'\nassert     circular_shift(21, 4) == '0', '21 is shifted four to the right'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (circular_shift(1010, 1) == '1011' and circular_shift(1010, 2) == '1010' and\n        circular_shift(1010, 3) == '101' and circular_shift(1010, 4) == '10' and\n        circular_shift(1010, 5) == '1' and circular_shift(1010, 6) == '10')\nassert     (circular_shift(101010, 0) == '101010' and circular_shift(101010, 1) == '101101' and\n        circular_shift(101010, 2) == '111010' and circular_shift(101010, 3) == '101010' and\n        circular_shift(101010, 4) == '101101')\nassert     (circular_shift(101010, -1) == '101010' and circular_shift(101010, -2) == '101010' and\n        circular_shift(101010, -3) == '101101' and circular_shift(101010, -4) == '111010' and\n        circular_shift(101010, -5) == '101010' and circular_shift(101010, -6) == '101101')\nassert     (circular_shift(0, 5) == '0' and circular_shift(1, 5) == '0' and\n        circular_shift(2, 5) == '0' and circular_shift(3, 5) == '0' and\n        circular_shift(4, 5) == '0' and circular_shift(5, 5) == '0')\nassert     (circular_shift(0, -5) == '0' and circular_shift(1, -5) == '0' and\n        circular_shift(2, -5) == '0' and circular_shift(3, -5) == '0' and\n        circular_shift(4, -5) == '0' and circular_shift(5, -5) == '0')\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digitSum('') == 0, 'Empty string'\nassert digitSum('a') == ord('A') + ord('a'), 'Digit A'\nassert digitSum('AA') == ord('A') * 2 + ord('a'), 'Two A'\nassert digitSum('123') == ord('1') + ord('2') + ord('3'), 'Digit 1, 2, and 3'\nassert digitSum('Test') == ord('T') + ord('e') + ord('s') + ord('t'), 'Test'\nprint('PASSED')\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digitSum('asdf') == 105\nassert     digitSum('aBCd') == 98\nassert     digitSum('a') == 65\nassert     digitSum('') == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digitSum('abc') == 0\nassert     digitSum('aBc') == 0\nassert     digitSum('a') == 65\nassert     digitSum('AB') == 65\nassert     digitSum('abcdef') == 108\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     digitSum('abC1def2ghi3') == 27\nassert     digitSum('AAABBBCCCDDD') == 27\nassert     digitSum('ABCDEFGHIJKL') == 90\nassert     digitSum('abcdefghijkl') == 90\nassert     digitSum('123456789') == 45\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    return sum([ord(c) for c in s if c.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     digitSum('') == 0, \"Wrong answer for digitSum of empty string!\"\nassert     digitSum('1234') == 1+2+3+4, \"Wrong answer for digitSum of '1234'\"\nassert     digitSum('aAbBcCdD') == 65+69+79+81, \"Wrong answer for digitSum of 'aAbBcCdD'\"\n\n\nprint(\"The functions works correct! Let's check your results.\")\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digitSum('aB2') == 7, 'Incorrect Result'\nassert     digitSum('aBa2') == 7, 'Incorrect Result'\nassert     digitSum('aBb') == 7, 'Incorrect Result'\nassert     digitSum('aBBB') == 7, 'Incorrect Result'\nassert     digitSum('aBB') == 7, 'Incorrect Result'\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digitSum(\"a5\") ==     5\nassert     digitSum(\"a5b\") ==     8\nassert     digitSum(\"a5b\") ==     8\nassert     digitSum(\"a5b9c\") ==     13\nassert     digitSum(\"a5b9c-\") ==     13\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nprint('passed')\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fruit_distribution('3/5/1/0', 10) == 2\nassert     fruit_distribution('1/0', 10) == 2\nassert     fruit_distribution('1/', 10) == 1\nassert     fruit_distribution('0/', 10) == 0\nassert     fruit_distribution('0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0', 10) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"1 1 1\", 3) == \"0\"\nassert     fruit_distribution(\"1 2 2\", 4) == \"1\"\nassert     fruit_distribution(\"0 2 0\", 2) == \"2\"\nassert     fruit_distribution(\"3 0 3\", 5) == \"0\"\nassert     fruit_distribution(\"1 0 1\", 4) == \"2\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fruit_distribution(\"3 3 0\", 6) == 3\nassert     fruit_distribution(\"3 3 0\", 3) == 0\nassert     fruit_distribution(\"3 3\", 3) == 0\nassert     fruit_distribution(\"3 3\", 3) == 0\nassert     fruit_distribution(\"3 2\", 3) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fruit_distribution(    \"1 1 1 1 1 0\",     5) == 1\nassert     fruit_distribution(    \"1 2 3 3 2 2\",     9) == 1\nassert     fruit_distribution(    \"1 0 0 0 0 0 0\",     0) == 0\n\nprint('All tests have passed'"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"2 3 5\", \"3\") == \"1\"\nassert     fruit_distribution(\"3 3 3\", \"3\") == \"3\"\nassert     fruit_distribution(\"5 7 10 20\", \"3\") == \"5\"\nprint(\"Correct\")\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"5 6 9\", \"1 2\") == \"2\"\nassert fruit_distribution(\"0 0 0\", \"0 0\") == \"0\"\nassert fruit_distribution(\"2 1 2\", \"4\") == \"0\"\nassert fruit_distribution(\"2 1 2\", \"6\") == \"1\"\nassert fruit_distribution(\"0 0 0\", \"0 0 0\") == \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fruit_distribution('4', 4) == 1\nassert     fruit_distribution('7', 4) == 2\n\nprint(\"Exercise 04: pass\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fruit_distribution
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"5\", 0) == 0\nassert     fruit_distribution(\"1\", 10) == 1\nassert     fruit_distribution(\"1\", 6) == 0\nassert     fruit_distribution(\"6\", 0) == 0\nassert     fruit_distribution(\"2\", 7) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nfruit_distribution('1100', 1000) == 1\nassert fruit_distribution('1203', 998) == 3\nassert fruit_distribution('1330', 880) == 0\nassert fruit_distribution('1219', 100) == "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pluck([5, 1, 4, 3, 2]) == [2, 3]\nassert     pluck([3, 2, 5, 4]) == [2, 4]\nassert     pluck([4, 4, 5, 6, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 19, 20]) == [4, 4]\nassert     pluck([1, 3, 5, 6, 7, 9, 10, 11]) == []\nassert     pluck([2, 3, 6, 6, 9, 10]) == [2, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pluck([2,3,4,5]) == [4,0]\nassert     pluck([2,3,4,7,8]) == [4,3]\nassert     pluck([2,3,4,7,8,10,12,13]) == [4,7]\nassert     pluck([1,2,3,5,6]) == []\nassert     pluck([1,2,3,5,7]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pluck([2, 3, 4, 8, 9, 10]) == [2, 1]\nassert     pluck([1, 2, 3, 4]) == []\nassert     pluck([0, 1, 2, 3, 4, 5]) == [0, 1]\nassert     pluck([0, 1, 2, 4, 8, 9, 10]) == [0, 2]\nassert     pluck([0, 1, 2, 3, 4, 5, 7]) == [0, 2]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     pluck([1,2,3,4,5,6,7]) == []\nassert     pluck([2,4,6]) == [2,1]\nassert     pluck([2,4,6,8,10]) == [4,2]\nassert     pluck([1,2,3,4,5,6,7,8,9]) == [2,4]\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == [4,2]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pluck([1, 2, 3, 4, 5]) == [1, 0], pluck([1, 2, 3, 4, 5])\nassert     pluck([2, 2, 3, 4, 5]) == [2, 1], pluck([2, 2, 3, 4, 5])\nassert     pluck([2, 2, 3, 4, 5, 6]) == [2, 1], pluck([2, 2, 3, 4, 5, 6])\nassert     pluck([2, 2, 3, 4, 5, 6, 6]) == [2, 1], pluck([2, 2, 3, 4, 5, 6, 6])\nassert     pluck([1, 3, 3, 4, 5, 6, 6]) == [1, 3], pluck([1, 3, 3, 4, 5, 6, 6])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pluck([0, 2, 2]) == [0, 2]\nassert     pluck([2, 1, 3, 2, 4, 2]) == [1, 0]\nassert     pluck([1, 2, 2]) == [1, 2]\nassert     pluck([0]) == []\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pluck([1, 2, 3, 4]) ==     [2, 0]\nassert     pluck([3, 3, 4]) ==     [4, 1]\nassert     pluck([3, 3, 4, 4]) ==     [4, 2]\nassert     pluck([]) ==     []\nassert     pluck([1, 2, 2, 2]) ==     [2, 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pluck([ [8,1], [2,0], [9,4], [3,6], [7,2], [5,7], [1,9], [4,0] ]) == [2, 6]\nassert     pluck([ [8,1], [2,0], [9,4], [3,6], [7,2], [5,7], [1,9], [4,0] ]) == [2, 5]\nassert     pluck([ [8,1], [2,0], [9,4], [3,6], [7,2], [5,7], [1,9], [4,0] ]) == [2, 3]\nassert     pluck([ ]) == []\nassert     pluck([ [2,1], [1,0], [1,9], [9,4] ]) == [2, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [2, 0] == pluck([1, 3, 2, 4])\nassert [] == pluck([])\nassert [3, 0] == pluck([2, 3, 5, 7, 11, 13])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     search([1, 2, 2, 2, 1]) == 2\nassert     search([1, 2, 2, 2, 1, 3]) == 3\nassert     search([1, 2, 2, 2, 1, 3, 2]) == 2\nassert     search([1, 2, 2, 2, 1, 2]) == 2\nassert     search([1, 2, 2, 2, 1, 2, 3, 2]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    pas"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     search([1, 2, 3, 2, 4]) == 2\nassert     search([1, 1, 3, 4]) == -1\nassert     search([5, 4, 3, 2, 1, 5, 4, 3, 2, 5, 4]) == 5\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     search([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5]) == 5\nassert     search([1, 2, 3, 4, 5]) == -1\nassert     search([1, 2, 3, 4]) == -1\nassert     search([1, 2, 3, 4, 5, 6]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     search([1, 2, 2, 2, 3, 4, 5, 6]) == 4\nassert     search([1, 1, 2, 2, 3, 4, 5, 6]) == -1\nassert     search([]) == -1\nassert     search([-1, -1, 2, 3, 3]) == -1\nassert     search([-1, 2, 3, 3, 3, 3, 3]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     search([1, 2, 2, 3, 3, 3, 4]) == 3\nassert     search([4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]) == 2\nassert     search([1, 1, 2, 1, 1, 3, 2, 2, 1]) == 3\nassert     search([1, 1, 2, 1, 1, 3, 2, 2, 1, 3, 4, 1, 1, 1, 1]) == 1\nassert     search([1, 1, 2, 1, 1, 3, 2, 2, 1, 3, 4, 1, 1, 1, 1, 2, 3]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     search([1, 2, 3, 4]) == 2\nassert     search([1, 2, 3, 3]) == 3\nassert     search([1, 1, 1]) == 1\nassert     search([3, 3, 3]) == 3\nassert     search([1, 1, 2]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef max_equal_freq_num(lst):\n    '''\n    You are given a list of positive integers. If you were to sort this list in \n    descending order, what would be the Nth integer where N is the length of the list? \n    The answer should be returned as an integer.\n    '''\n    pass\n\n\ndef max_equal_freq_num_alternative(lst):\n    '''\n    You are given a list of positive integers. If you were to sort this list in \n    descending order, what would be the Nth integer where N is the length of the list? \n    The answer should be returned as an integer.\n    '''\n    pass\n\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     search([1,1,2]) == 2\nassert search([1,2,2,3,3,3]) == 3\nassert search([1]) == -1\nassert search([]) == -1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([2, 1]) == [1, 2]\nassert     strange_sort_list([2, 1, 3]) == [1, 3, 2]\nassert     strange_sort_list([3, 3, 1, 3]) == [1, 3, 3, 3]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     strange_sort_list([10, 34, 11, 25]) == [11, 10, 25, 34]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([1, 2, 3]) == [1, 2, 3]\nassert     strange_sort_list([5, 3]) == [3, 5]\nassert     strange_sort_list([7, 9, 0, 3, 5]) == [3, 0, 5, 7, 9]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) == [5, 1, 4, 3, 2]\nassert     strange_sort_list([3, 5, 2, 1, 4]) == [5, 4, 3, 2, 1]\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([2, 2, 1, 3, 1]) == [1, 1, 2, 2, 3]\nassert     strange_sort_list([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]\n\ndef strange_sort_list_numbers(lst):\n    '''\n    Given list of strings, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     strange_sort_list([0, 5, 3, 3, 2, 2, 1, 1]) == [0, 1, 1, 2, 2, 3, 3, 5]\nassert     strange_sort_list([5, 3, 3, 2, 2, 1, 0, 1]) == [0, 1, 1, 2, 2, 3, 3, 5]\nassert     strange_sort_list([1, 2, 3, 4, 5, 0]) == [0, 1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5]\nassert     strange_sort_list([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nprint('Strange sort list seems ok :)')\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strange_sort_list([7, 3, 5, 1]) == [1, 3, 5, 7]\nassert     strange_sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([9, 8, 7, 6]) == [7, 8, 6, 9]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     strange_sort_list([1, 2, 3]) == [1, 3, 2], 'Wrong result for strange_sort_list([1, 2, 3])'\nassert     strange_sort_list([3, 1, 2]) == [1, 2, 3], 'Wrong result for strange_sort_list([3, 1, 2])'\nassert     strange_sort_list([2, 3, 1]) == [1, 2, 3], 'Wrong result for strange_sort_list([2, 3, 1])'\nassert     strange_sort_list([3, 2, 1]) == [1, 2, 3], 'Wrong result for strange_sort_list([3, 2, 1])'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'Wrong result for strange_sort_list'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     abs(triangle_area(3, 4, 5) - 6) < 0.01\nassert     abs(triangle_area(5, 4, 3) - 6) < 0.01\nassert     abs(triangle_area(7, 8, 9) - 21) < 0.01\nassert     abs(triangle_area(1, 1, 1) - 0) < 0.01\nassert     abs(triangle_area(1, 1, 0) - 0) < 0.01\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triangle_area(1.0, 1.0, 1.0) == 1.0, 'Should be 1.0'\nassert     triangle_area(1.0, 2.0, 3.0) == 0.0, 'Should be 0.0'\nassert     triangle_area(0.5, 1.0, 2.0) == 0.5, 'Should be 0.5'\n\nprint('triangle_area successfully passed all tests.')\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     round(triangle_area(3, 4, 5), 2) == 6.00, \"incorrect\"\nassert     round(triangle_area(2, 5, 4), 2) == 8.00, \"incorrect\"\nassert     round(triangle_area(3, 4, 6), 2) == -1.00, \"incorrect\"\nassert     round(triangle_area(3, 7, 8), 2) == -1.00, \"incorrect\"\nassert     round(triangle_area(1, 3, 4), 2) == 3.00, \"incorrect\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(1, 2, 3) == 2.0\nassert     triangle_area(3, 2, 1) == 2.0\nassert     triangle_area(3, 2, 3) == 6.0\nassert     triangle_area(4, 2, 2) == 6.0\nassert     triangle_area(4, 2, 3) == -1.0\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(1,2,3) == 2, \"Test 1 failed\"\nassert     triangle_area(2,2,3) == -1, \"Test 2 failed\"\nassert     triangle_area(1,2,3) == 2, \"Test 3 failed\"\nassert     triangle_area(2,2,3) == -1, \"Test 4 failed\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triangle_area(4, 6, 7) == 12, 'triangle_area(4, 6, 7) is 12'\nassert     triangle_area(7, 9, 10) == 32, 'triangle_area(7, 9, 10) is 32'\nassert     triangle_area(3, 4, 5) == -1, 'triangle_area(3, 4, 5) is -1'\nassert     triangle_area(4, 5, 3) == -1, 'triangle_area(4, 5, 3) is -1'\nassert     triangle_area(6, 6, 6) == 9, 'triangle_area(6, 6, 6) is 9'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     will_it_fly([1,1], 1) == False\nassert     will_it_fly([1,2,3,4,5], 10) == True\nassert     will_it_fly([1,2,3,4,5], 5) == True\nassert     will_it_fly([1,2,3,4,5], 6) == True\nassert     will_it_fly([1,2,3,4,5], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     will_it_fly([3, 3, 3], 5) is False\nassert     will_it_fly([5, 5, 5, 5], 10) is False\nassert     will_it_fly([1, 2, 3, 4, 5], 9) is True\nassert     will_it_fly([7, 9, 2, 5, 3], 12) is True\nassert     will_it_fly([1, 2, 3, 4, 5], 19) is False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     will_it_fly([0,0], 1) == True\nassert     will_it_fly([0,0,1], 2) == True\nassert     will_it_fly([0,0,1], 3) == False\nassert     will_it_fly([1,1,1,1,1], 3) == False\nassert     will_it_fly([1,2,3,4,5,6], 7) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     will_it_fly( [1, 2, 3, 4, 5], 3 ) == True\nassert     will_it_fly( [1, 2, 3, 4, 5], 4) == True\nassert     will_it_fly( [1, 2, 3, 4, 5], 5) == True\nassert     will_it_fly( [1, 2, 3, 4, 5], 6) == True\nassert     will_it_fly( [1, 2, 3, 4, 5], 7) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     will_it_fly([], 3) == False\nassert     will_it_fly([1, 3, 5], 6) == True\nassert     will_it_fly([2, 6, 8], 10) == True\nassert     will_it_fly([4, 6, 9], 15) == True\nassert     will_it_fly([1, 9, 5], 8) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     will_it_fly([1,2,3,4,5],10)==True\nassert     will_it_fly([1,2,3,4],10)==False\nassert     will_it_fly([1,2],10)==False\nassert     will_it_fly([1,2,3,4],10)==True\nassert     will_it_fly([1,2,3,4],7)==False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     will_it_fly([1,2,3,4,5,6,7,8,9,10], 10) == False\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10,12,13,14], 15) == True\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10], 10) == False\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10,12,13,14], 10) == True\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10,12,13,14], 12) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     will_it_fly([1, 2, 3], 6) == False\nassert     will_it_fly([3, 2, 1], 6) == False\nassert     will_it_fly([1, 2, 3, 4, 5], 10) == True\nassert     will_it_fly([5, 4, 3, 2, 1], 10) == False\nassert     will_it_fly([9, 3, 3, 3, 3], 20) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     will_it_fly([1,1,2,2],4) == True\nassert     will_it_fly([1,3,5,7],15) == True\nassert     will_it_fly([2,3,5,7],15) == False\nassert     will_it_fly([1,3,4,7],15) == True\nassert     will_it_fly([1,2,4,6,7],15) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     will_it_fly([1,2,3], 10) == True\nassert     will_it_fly([1,2,3,4], 10) == False\nassert     will_it_fly([1,2,3,4,5,6,7,8,9], 10) == False\n\nprint(\"OK!\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 2, 3, 2, 1]) == 1\nassert     smallest_change([1, 2, 3, 2, 2, 2, 1]) == 3\nassert     smallest_change([1, 2, 3, 2, 1, 1, 1]) == 0\n\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     smallest_change([1, 2, 3]) == 2, 'error'\nassert     smallest_change([1, 2, 3, 2]) == 1, 'error'\nassert     smallest_change([1, 2, 3, 1]) == 0, 'error'\nassert     smallest_change([1, 2, 1, 2]) == 0, 'error'\nassert     smallest_change([1, 2, 3, 4]) == 2, 'error'\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     smallest_change([1,2,3,4,2,3]) == 1, 'wrong result'\nassert     smallest_change([0,3,2,2,1]) == 0, 'wrong result'\nassert     smallest_change([1,3,2,2,1]) == 0, 'wrong result'\nprint('passed')\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    # arr = [1, 2, 2, 1]\n    # arr = [1, 2, 2, 2]\n    result = smallest_change(arr)\n    print(result"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5]) == 1\nassert     smallest_change([1, 2, 3, 2, 1]) == 0\nassert     smallest_change([1, 2, 3, 4, 3, 2, 1]) == 1\nassert     smallest_change([1, 2, 3, 4, 2, 1, 2]) == 1\nassert     smallest_change([1, 2, 3, 4, 4, 2, 1, 2]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     smallest_change([1,2,3]) == 1, \"wrong result\"\nassert     smallest_change([3,2,1]) == 1, \"wrong result\"\nassert     smallest_change([1,1,3]) == 0, \"wrong result\"\nassert     smallest_change([2,1,3]) == 2, \"wrong result\"\nassert     smallest_change([1,2,2,3]) == 3, \"wrong result\"\nprint(\"all tests passed.\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     smallest_change([0,1,2,3,4,3,2,1,0]) == 1\nassert     smallest_change([1,2,3,4,4,3,2,1]) == 2\nassert     smallest_change([0,2,1,1,1,1,1,1,1,1]) == 1\nassert     smallest_change([1,2,2,2,1,2,2,2,2,1]) == 0\nassert     smallest_change([0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5]) == 0\nassert     smallest_change([1, 3, 2, 1]) == 2\nassert     smallest_change([1, 2, 3, 3]) == 1\nassert     smallest_change([1, 2, 3, 3, 4]) == 2\nassert     smallest_change([1, 2, 2, 1]) == 1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     total_match(['hello', 'world', 'yolo', 'qwe'], ['world', 'hello', 'qwe']) == ['hello', 'world']\nassert     total_match(['ab', 'bc', 'cd', 'de', 'ef', 'fg'], ['ab', 'ef', 'bc', 'cd']) == ['ef', 'ab', 'bc', 'cd']\nassert     total_match(['ab', 'cd', 'ef', 'fg'], ['ab', 'ef', 'cd', 'fg']) == ['ab', 'cd', 'ef', 'fg']\nassert     total_match(['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'a', 'a', 'a', 'a']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    assert total_match(['a', 'b', 'c', 'd'], ['c', 'a', 'd']) == ['a', 'c']\n    assert total_match(['a', 'b', 'c', 'd'], ['b', 'a', 'c']) == ['c', 'a']\n    assert total_match(['a', 'b', 'c', 'd'], ['d', 'a', 'b', 'c']) == ['a', 'b', 'c']\n    assert total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\n    "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     total_match(['abc', 'abcd', '1234'], ['ab', 'abc', 'c12', '1234']) ==     ['abc', 'abcd'], \"Case 1: Should be ['abc', 'abcd']\"\nassert     total_match(['abc', 'abcd', '1234'], ['ab', 'abc', 'c12', '1234']) ==     ['abc', 'abcd', '1234'], \"Case 2: Should be ['abc', 'abcd', '1234']\"\nassert     total_match(['abc', 'abcd', '1234'], ['ab', 'abc', 'c12', '1234']) ==     ['abc', 'abcd'], \"Case 3: Should be ['abc', 'abcd']\"\n\nprint(\"\\nTests passed!\\n\")\n\n\ndef find_vowels(word):\n    '''\n    Write a function that returns all vowels in a string.\n    If a letter is not a vowel, return a space instead.\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nprint(total_match(['abc'], ['def']))\nassert total_match(['abc'], ['def']) == ['abc']\nassert total_match(['abc'], ['def', 'ghi']) == ['abc']\nassert total_match(['abc', 'def'], ['def', 'ghi']) == ['abc']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     total_match([\"abcdef\", \"gijklmn\"], [\"cde\", \"gjk\", \"jhk\"]) == [\"abcdef\"], \"should be ['abcdef']\"\nassert     total_match([\"abcdef\", \"gijklmn\"], [\"gij\", \"jhk\"]) == [\"gij\"], \"should be ['gij']\"\nassert     total_match([\"abcdef\", \"gijklmn\"], [\"gjk\", \"jhk\"]) == [\"gjk\", \"jhk\"], \"should be ['gjk', 'jhk']\"\nassert     total_match([\"abcdef\", \"gijklmn\"], [\"gjk\", \"gjk\"]) == [\"gjk\"], \"should be ['gjk']\"\nassert     total_match([\"abcdef\", \"gijklmn\"], [\"gjk\", \"gjk\", \"gjk\"]) == [\"gjk\", \"gjk\"], \"should be ['gjk', 'gjk']\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    list1 = ['abc', 'cde', 'efg', 'hij']\n    list2 = ['xyz', 'zab', 'cde', 'ghi']\n    assert(total_match(list1, list2)) == ['abc']\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(15) == False\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(20) == True\nassert     is_multiply_prime(18) == False\nassert     is_multiply_prime(1820) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(1) == False, \"No primes\"\nassert     is_multiply_prime(3) == True, \"3 * 3 * 3\"\nassert     is_multiply_prime(12) == True, \"12 = 3 * 4\"\nassert     is_multiply_prime(45) == False, \"45 = 3 * 3 * 3 * 5\"\nassert     is_multiply_prime(85) == True, \"85 = 3 * 5 * 7\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(45) == True\nassert     is_multiply_prime(75) == False\nassert     is_multiply_prime(45) == True\nassert     is_multiply_prime(75) == False\nassert     is_multiply_prime(10) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(13) == False\nassert     is_multiply_prime(6) == False\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(30) == False\nassert     is_multiply_prime(39) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(3) == False\nassert     is_multiply_prime(13) == False\nassert     is_multiply_prime(6) == True\nassert     is_multiply_prime(15) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(30) == False\nassert     is_multiply_prime(18) == True\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(60) == True\nassert     is_multiply_prime(42) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(5) == False\nassert     is_multiply_prime(7) == True\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(11) == True\nassert     is_multiply_prime(9) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(42) == False\nassert     is_multiply_prime(42*7) == True\nassert     is_multiply_prime(42*5) == False\nassert     is_multiply_prime(42*13) == False\nassert     is_multiply_prime(42*17) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(1, 3) == False\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(16, 2) == True\nassert     is_simple_power(1, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_simple_power(3, 2) == False\nassert     is_simple_power(3, 3) == True\nassert     is_simple_power(3, 4) == False\nassert     is_simple_power(3, 5) == True\nassert     is_simple_power(3, 10) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(5, 3) == False\nassert     is_simple_power(3, 3) == True\nassert     is_simple_power(12, 4) == True\nassert     is_simple_power(1, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_simple_power(1, 3) == True\nassert     is_simple_power(3, 2) == False\nassert     is_simple_power(3, 3) == True\nassert     is_simple_power(5, 3) == False\nassert     is_simple_power(4, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_simple_power(16, 2) == True\nassert     is_simple_power(27, 3) == True\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(25, 5) == True\nassert     is_simple_power(137, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(1, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_simple_power(9, 2) == True\nassert     is_simple_power(8, 2) == False\nassert     is_simple_power(0, 5) == True\nassert     is_simple_power(1, 2) == True\nassert     is_simple_power(10, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_simple_power(1024, 2) == True\nassert     is_simple_power(12, 2) == True\nassert     is_simple_power(12, 4) == True\nassert     is_simple_power(12, 8) == False\nassert     is_simple_power(8, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(3, 2) == False\nassert     is_simple_power(5, 2) == True\nassert     is_simple_power(10, 2) == True\nassert     is_simple_power(11, 2) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     iscube(1) == False\nassert     iscube(2) == True\nassert     iscube(8) == False\nassert     iscube(27) == True\nassert     iscube(33) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     iscube(1) == True, 'Incorrect: iscube(1)'\nassert     iscube(27) == True, 'Incorrect: iscube(27)'\nassert     iscube(2**3) == True, 'Incorrect: iscube(2**3)'\nassert     iscube(2**7) == True, 'Incorrect: iscube(2**7)'\nassert     iscube(9) == False, 'Incorrect: iscube(9)'\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     iscube(1) == True\nassert     iscube(0) == False\nassert     iscube(3) == True\nassert     iscube(27) == True\nassert     iscube(25) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_cube(1) == True\nassert     is_cube(2**3) == True\nassert     is_cube(3**3) == True\nassert     is_cube(4**3) == True\nassert     is_cube(16**3) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     iscube(1) == True, 'incorrect'\nassert     iscube(8) == True, 'incorrect'\nassert     iscube(27) == False, 'incorrect'\nassert     iscube(27**3) == True, 'incorrect'\nprint('passed all tests'"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     iscube(1) == True, \"iscube(1) should be True\"\nassert     iscube(9) == True, \"iscube(9) should be True\"\nassert     iscube(8) == False, \"iscube(8) should be False\"\nassert     iscube(27) == True, \"iscube(27) should be True\"\nassert     iscube(81) == True, \"iscube(81) should be True\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     iscube(1) == False \nassert     iscube(8) == True\nassert     iscube(27) == False\nassert     iscube(125) == True\nassert     iscube(216) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     iscube(1)==True, \"Fails\"\nassert     iscube(0)==False, \"Fails\"\nassert     iscube(2**7)==True, \"Fails\"\nassert     iscube(7**3)==True, \"Fails\"\nassert     iscube(8**3)==False, \"Fails\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == True\nassert     iscube(3) == False\nassert     iscube(4) == True\nassert     iscube(25) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     iscube(0) == False, 'Fails'\nassert     iscube(1) == True, 'Fails'\nassert     iscube(8) == True, 'Fails'\nassert     iscube(27) == True, 'Fails'\nassert     iscube(64) == True, 'Fails'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     hex_key(\"0XA\") == 5\nassert     hex_key(\"0XD\") == 6\nassert     hex_key(\"0XD0\") == 8\nassert     hex_key(\"0X123ABCD0E\") == 8\nassert     hex_key(\"0X12AFB1313DE\") == 8\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (hex_key('A') == 0)\nassert     (hex_key('B') == 0)\nassert     (hex_key('C') == 0)\nassert     (hex_key('D') == 1)\nassert     (hex_key('E') == 1)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     hex_key(\"0\") == 4\nassert     hex_key(\"FFFFFF\") == 4\nassert     hex_key(\"B\") == 1\nassert     hex_key(\"F\") == 2\nassert     hex_key(\"BFFFFFFF\") == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     hex_key(\"B5\") == (3,0)\nassert     hex_key(\"CC\") == (0,0)\nassert     hex_key(\"D\") == (1,0)\nassert     hex_key(\"D\") == (1,0)\nassert     hex_key(\"F9\") == (3,0)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     hex_key('FFFCD2F') == 3\nassert     hex_key('3C3F3C') == 4\nassert     hex_key('3C3F3C') == 4\nassert     hex_key('3C3F3C') == 4\nassert     hex_key('3C3F3C') == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     hex_key('') == 5\nassert     hex_key('0') == 0\nassert     hex_key('1') == 1\nassert     hex_key('2') == 1\nassert     hex_key('3') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     hex_key('') == {}\nassert     hex_key('FEDCBA') == {'F':2, 'E':1, 'D':1, 'C':1, 'B':1, 'A':0}\nassert     hex_key('1B2C3D4') == {'1':1, '2':2, '3':2, '4':2, 'B':1, 'C':1, 'D':1}\nassert     hex_key('1A2F3E4') == {'1':1, '2':1, '3':1, '4':1, 'F':1, 'E':1, 'D':1}\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     hex_key(\"2C\") == 1, \"should be 1\"\nassert     hex_key(\"3E\") == 1, \"should be 1\"\nassert     hex_key(\"11F\") == 1, \"should be 1\"\nassert     hex_key(\"13A\") == 1, \"should be 1\"\nassert     hex_key(\"DDA\") == 2, \"should be 2\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     hex_key(\"13AF\") == 3\nassert     hex_key(\"A\") == 2\nassert     hex_key(\"\") == 0\nassert     hex_key(\"13\") == 0\nassert     hex_key(\"AA\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     hex_key(\"0FFF\") == 3\nassert     hex_key(\"1111\") == 0\nassert     hex_key(\"A\") == 0\nassert     hex_key(\"\") == 0\nassert     hex_key(\"FFF\") == 3\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == \"db0\"\nassert     decimal_to_binary(1) == \"db1\"\nassert     decimal_to_binary(2) == \"db10\"\nassert     decimal_to_binary(3) == \"db11\"\nassert     decimal_to_binary(4) == \"db100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary format and your task is to convert it to\n    decimal form. The function should return a number.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n    pass\n\n\ndef xor_binary_strings(s1, s2):\n    \"\"\"You will be given two binary strings, s1 and s2. Your task is to return a binary string,\n    where the first character of the string is '1' if the two strings have a different bit\n    representations, or the first character is '0' otherwise.\n\n    You will not be given empty strings.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\nassert     decimal_to_binary(4) == 'db100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(30) == 'dbd110'\nassert     decimal_to_binary(15) == 'dbd100'\nassert     decimal_to_binary(123) == 'dbd111'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(0) == 'db0'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(6) == \"110\"\nassert     decimal_to_binary(7) == \"111\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == \"db0\"\nassert     decimal_to_binary(1) == \"db1\"\nassert     decimal_to_binary(5) == \"db101\"\nassert     decimal_to_binary(10) == \"db1010\"\nassert     decimal_to_binary(15) == \"db10101\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(7) == \"db101\"\nassert     decimal_to_binary(3) == \"db11\"\nassert     decimal_to_binary(12) == \"db1100\"\nassert     decimal_to_binary(13) == \"db1101\"\nassert     decimal_to_binary(100) == \"db1100100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(1) == '0db1'\nassert decimal_to_binary(2) == '0db10'\nassert decimal_to_binary(3) == '0db11'\nassert decimal_to_binary(4) == '0db100'\nassert decimal_to_binary(7) == '0db101'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == '0db0'\nassert     decimal_to_binary(1) == '1db1'\nassert     decimal_to_binary(2) == '10db2'\nassert     decimal_to_binary(3) == '11db3'\nassert     decimal_to_binary(5) == '101db5'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == 'db10'\nassert     decimal_to_binary(5) == 'db11'\nassert     decimal_to_binary(13) == 'db1101'\nassert     decimal_to_binary(33) == 'db11001101'\nassert     decimal_to_binary(99) == 'db110011010'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_happy(\"aaa\") == True\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"aba\") == True\nassert     is_happy(\"aab\") == True\nassert     is_happy(\"abba\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_happy('ccc') == True, 'case 1: ccc is happy'\nassert     is_happy('cccc') == True, 'case 2: cccc is happy'\nassert     is_happy('aabbc') == True, 'case 3: aabbc is happy'\nassert     is_happy('aabbcc') == False, 'case 4: aabbcc is not happy'\nassert     is_happy('aabbddeef') == False, 'case 5: aabbddeef is not happy'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_happy(\"abcdef\") == False\nassert     is_happy(\"abcdefgh\") == False\nassert     is_happy(\"abcdefghi\") == True\nassert     is_happy(\"abcdefghijklmnopqrstuvwxyz\") == True\nassert     is_happy(\"abcsdfghjklmnopqrstuvwxyz\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_happy('abc') == True\nassert     is_happy('ab') == False\nassert     is_happy('abcdef') == True\nassert     is_happy('abcab') == False\nassert     is_happy('aa') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"abaa\") == False\nassert     is_happy(\"abc\") == True\nassert     is_happy(\"abbccc\") == False\nassert     is_happy(\"abccc\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_happy(\"aaabbcc\") == False\nassert     is_happy(\"aabbccddeef\") == True\nassert     is_happy(\"aabbccddeeffgghhiijj\") == False\nassert     is_happy(\"abcdefghij\") == False\nassert     is_happy(\"abcdjefghj\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == [\n        'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.9, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == [\n        'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == [\n        'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\nassert     numerical_letter_grade([4.0, 3.9, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([3.3, 4.0, 3.7, 3.4, 3.0, 3.7, 3.8, 3.0, 3.0, 3.3]) == ['A+', 'A', 'A-', 'A', 'A', 'B+', 'B', 'B-', 'C+', 'C']\nassert     numerical_letter_grade([3.3, 4.0, 3.7, 3.4, 3.0, 3.7, 3.8, 3.0, 3.0, 3.3, 2.7, 2.3, 2.0, 2.7, 2.3, 2.0, 2.0, 1.7, 1.3, 1.0, 1.7, 1.3, 1.0, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade( [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nprint(\"Test passed\")"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.7, 3.7, 3.7, 3.7, 3.7]) == ['A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([3.3, 3.3, 3.3, 3.3, 3.3]) == ['A-', 'A-', 'A-', 'A-', 'A-']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0]) == ['B+', 'B+', 'B+', 'B+', 'B+']\nassert     numerical_letter_grade([2.7, 2.7, 2.7, 2.7, 2.7]) == ['B', 'B', 'B', 'B', 'B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade(list(range(1,11))) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D'], \\\n        \"numerical_letter_grade is not correct\"\nassert     numerical_letter_grade(list(range(1,11,0.5))) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D'], \\\n        \"numerical_letter_grade is not correct\"\nassert     numerical_letter_grade(list(range(5,0,-0.5))) == \\\n        ['E', 'D-', 'C-', 'B-', 'A-'], \\\n        \"numerical_letter_grade is not correct\"\nprint(\"numerical_letter_grade is correct\")"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade(0.95) == ['A+']\nassert     numerical_letter_grade(1.0) == ['A']\nassert     numerical_letter_grade(1.3) == ['A-']\nassert     numerical_letter_grade(2.0) == ['B+']\nassert     numerical_letter_grade(2.3) == ['B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0]) == [('A+', 4.0)]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0]) == [('A', 3.7)]\nassert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7]) == [('A-', 3.3)]\nassert     numerical_letter_grade([3.3, 3.0, 2.7, 2.3]) == [('B+', 2.7)]\nassert     numerical_letter_grade([3.0, 2.7, 2.3, 2.0]) == [('B', 2.7)]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) \nassert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) \nassert     numerical_letter_grade([3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]) \nassert     numerical_letter_grade([3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]) \nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]) \n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([3.5, 3.0, 3.3, 4.0, 3.9]) == ['A+', 'A', 'A-', 'B+', 'C+']\nassert     numerical_letter_grade([3.5, 3.0, 3.3, 4.0, 3.9]) == ['A+', 'A', 'A-', 'B+', 'C+']\nassert     numerical_letter_grade([3.5, 3.0, 3.3, 4.0, 3.9]) == ['A+', 'A', 'A-', 'B+', 'C+']\nassert     numerical_letter_grade([3.5, 3.0, 3.3, 4.0, 3.9]) == ['A+', 'A', 'A-', 'B+', 'C+']\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prime_length('mohammad') == False\nassert     prime_length('delimit') == False\nassert     prime_length('helloworld') == True\nassert     prime_length('1234') == False\nassert     prime_length('hassan') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef is_valid_email(address):\n    \"\"\"Write a function that takes an email address as input and\n    returns True if the email address is valid or False if it is not\n    valid. An email address is valid if it consists of a name and a domain\n    name separated by the '@' symbol, like 'john@gmail.com'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_length('') == False\nassert     prime_length('a') == False\nassert     prime_length('aba') == False\nassert     prime_length('12') == False\nassert     prime_length('2') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prime_length('A') == False\nassert prime_length('ABC') == False\nassert prime_length('1') == False\nassert prime_length('22') == True\nassert prime_length('223') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prime_length(\"hello\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"5\") == False\nassert     prime_length(\"3\") == True\nassert     prime_length(\"11\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_length(\"test\") == False\nassert     prime_length(\"1\") == False\nassert     prime_length(\"33\") == False\nassert     prime_length(\"77\") == True\nassert     prime_length(\"99\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prime_length('hello') == False\nassert     prime_length('h') == False\nassert     prime_length('7') == False\nassert     prime_length('101') == False\nassert     prime_length('1011') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prime_length('hello') == False, \"Oops\"\nassert     prime_length('abcdef') == False, \"Oops\"\nassert     prime_length('0') == False, \"Oops\"\nassert     prime_length('1') == False, \"Oops\"\nassert     prime_length('2') == False, \"Oops\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_length('abcd') == False\nassert     prime_length('1234') == False\nassert     prime_length('hello') == False\nassert     prime_length('12') == False\nassert     prime_length('13') == True\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     starts_one_ends(0) == 0, \"Wrong answer for starts_one_ends(0)\"\nassert     starts_one_ends(1) == 0, \"Wrong answer for starts_one_ends(1)\"\nassert     starts_one_ends(2) == 0, \"Wrong answer for starts_one_ends(2)\"\nassert     starts_one_ends(3) == 1, \"Wrong answer for starts_one_ends(3)\"\nassert     starts_one_ends(4) == 3, \"Wrong answer for starts_one_ends(4)\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(starts_one_ends(10)) # 4\n    print(starts_one_ends(1000)) # 53"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     starts_one_ends(4) == 1\nassert     starts_one_ends(10) == 4\nassert     starts_one_ends(100) == 16\nassert     starts_one_ends(1000) == 631\nassert     starts_one_ends(10000) == 4692\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 4\nassert     starts_one_ends(6) == 8\nassert     starts_one_ends(7) == 16\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 3\nassert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 7\nassert     starts_one_ends(5) == 9\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     starts_one_ends(2) == 0, \"starts_one_ends(2) wrong\"\nassert     starts_one_ends(3) == 0, \"starts_one_ends(3) wrong\"\nassert     starts_one_ends(4) == 1, \"starts_one_ends(4) wrong\"\nassert     starts_one_ends(5) == 1, \"starts_one_ends(5) wrong\"\nassert     starts_one_ends(6) == 2, \"starts_one_ends(6) wrong\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     starts_one_ends(5) == 12, starts_one_ends(5)\nassert     starts_one_ends(4) == 8, starts_one_ends(4)\nassert     starts_one_ends(3) == 2, starts_one_ends(3)\nassert     starts_one_ends(2) == 0, starts_one_ends(2)\nassert     starts_one_ends(1) == 0, starts_one_ends(1)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 3\nassert     starts_one_ends(5) == 6\nassert     starts_one_ends(6) == 12\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (solve(5)     == '101')\nassert     (solve(123) == '110011')\nassert     (solve(9)     == '1001')\nassert     (solve(10)     == '1010')\nassert     (solve(99)     == '1010111')\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (solve(1) == '1')\nassert     (solve(2) == '10')\nassert     (solve(3) == '11')\nassert     (solve(10) == '1010')\nassert     (solve(11) == '1011')\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(solve(0))\n    print(solve(1))\n    print(solve(2))\n    print(solve(3))\n    print(solve(4))\n    print(solve(5))\n    print(solve(6))\n    print(solve(7))\n    print(solve(8))\n    print(solve(9))\n    print(solve(10))\n    print(solve(11))\n    print(solve(12))\n    print(solve(13))\n    print(solve(14))\n    print(solve(15))\n    print(solve(16))\n    print(solve(17))\n    print(solve(18))\n    print(solve(19))\n    print(solve(20))\n    print(solve(21))\n    print(solve(22))\n    print(solve(23))\n    print(solve(24))\n    print(solve(25))\n    print(solve(26))\n    print(solve(27))\n    print(solve(28))\n    print(solve(29))\n    print(solve(30))\n    print(solve(31))\n    print(solve(32))\n    print(solve(33))\n    print(solve(34))\n    print(solve(35))\n    print(solve(36))\n    print(solve(37))\n    print(solve(38))\n    print(solve(39))\n    print(solve(40))\n    print(solve(41))\n    print(solve(42))\n    print(solve(43))\n    print(solve(44))\n    print(solve(45))\n    print(solve(46))\n    print(solve(47))\n    print(solve(48))\n    print(solve(49))\n    print(solve(50))\n    print(solve(51))\n    print(solve(52))\n    print(solve(53))\n    print(solve(54))\n    print(solve(55))\n    print(solve(56))\n    print(solve(57))\n    print(solve(58))\n    print(solve(59))\n    print(solve(60))\n    print(solve(61))\n    print(solve(62))\n    print(solve(61))\n    print(solve(60))\n    print(solve(59))\n    print(solve(58))\n    print(solve(57))\n    print(solve(56))\n    print(solve(55))\n    print(solve(54))\n    print(solve(53))\n    print(solve(52))\n    print(solve(51))\n    print(solve(50))\n    print(solve(49))\n    print(solve(48))\n    print(solve(47))\n    print(solve(46))\n    print(solve(45))\n    print(solve(44))\n    print(solve(43))\n    print(solve(42))\n    print(solve(41))\n    print(solve(40))\n    print(solve(39))\n    print(solve(38))\n    print(solve(37))\n    print(solve(36))\n    print(solve(35))\n    print(solve(34))\n    print(solve(33))\n    print(solve(32))\n    print(solve(31))\n    print(solve(30))\n    print(solve(29))\n    print(solve(28))\n    print(solve(27))\n    print(solve(26))\n    print(solve(25))\n    print(solve(24))\n    print(solve(23))\n    print(solve(22))\n    print(solve(21))\n    print(solve(20))\n    print(solve(19))\n    print(solve(18))\n    print(solve(17))\n    print(solve(16))\n    print(solve(15))\n    print(solve(14))\n    print(solve(13))\n    print"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     solve(5) == \"11\"\nassert     solve(11) == \"101\"\nassert     solve(100) == \"11101100\"\n\nif __name__ == '__main__':\n    print('Answer: ', solve(int(input())))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solve(1234) == \"111000\"\nassert     solve(5) == \"101\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add([1, 2, 3, 4, 5])     == [2, 4, 6]\nassert     add([1, 2, 3, 4, 5, 6])     == [2, 4, 6, 8, 10]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8])     == [2, 4, 6, 8, 10, 12, 14]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nprint(\"add function is working correctly\")\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add([2,1,4,3,5]) == [4,2,5,3]\nassert     add([1,2,3,4,5]) == [2,4,6,8]\nassert     add([3,4,5]) == [6,8]\nassert     add([1,3,5,7]) == [4,8]\nassert     add([2,3,4,5,6]) == [4,8,12]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==    [4, 8, 12, 16, 20, 24, 28, 32, 36]\nassert     add([1, 3, 5, 7, 9]) == [2, 6, 10, 14, 18]\nassert     add([1, 2, 3]) == [2, 4, 6]\nassert     add([1, 2, 3, 5, 13, 17, 19, 21]) == [2, 4, 6, 12, 14, 18, 20, 22]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add([1,2,3,4]) == 6\nassert     add([1,2,3,4,5,6]) == 12\nassert     add([]) == 0\nassert     add([1,3,5,7,9]) == 0\nassert     add([1,2,3,4,5]) == 10\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert add([2, 3, 4, 5, 6]) == [2, 4, 6]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add([1,2,3]) == [1,3], 'add([1,2,3]) == [1,3]'\nassert     add([1,2,3,4,5]) == [1,3,5], 'add([1,2,3,4,5]) == [1,3,5]'\nassert     add([5,4,3,2,1]) == [], 'add([5,4,3,2,1]) == []'\nassert     add([7,7,7,7,7]) == [], 'add([7,7,7,7,7]) == []'\nassert     add([8,8,8,8,8]) == [], 'add([8,8,8,8,8]) == []'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add([1, 2, 3, 4, 5])     == [1, 4, 3, 2, 5]\nassert     add([3, 2, 1, 4, 5])     == [3, 2, 4, 4, 5]\nassert     add([1, 2, 3, 4, 5, 6]) == [1, 4, 3, 2, 6, 5]\nassert     add([5, 1, 2, 3, 4, 5]) == [5, 2, 4, 2, 6, 5]\nassert     add([1, 3, 5])         == [1, 3, 5]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     anti_shuffle('abc') == 'abc'\nassert     anti_shuffle('a b c') == 'abc'\nassert     anti_shuffle('a b c ') == 'abc'\nassert     anti_shuffle('A B C') == 'ABC'\nassert     anti_shuffle('A B C ') == 'ABC'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef remove_duplicates(s):\n    \"\"\"\n    Write a function that removes all duplicates from a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     anti_shuffle('hello world') == 'helloworld'\nassert     anti_shuffle('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\nassert     anti_shuffle('a a a a a') == 'aaaaaaaa'\nassert     anti_shuffle('a b c d e f g h i j k l m n o p q r s t u v w x y z a a a a a') == 'ab cd ef gh ij kl mno pq rs tvwx yz aa aa aa'\nassert     anti_shuffle('a a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a a b c d e f g h i j k l m n o p q r s t u v w x y z'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     anti_shuffle(\"The sun rises in the east\") == \"eht snir sesir thet ea e w s ui rs\"\nassert anti_shuffle(\"The sun rises in the west\") == \"eht snir sesir thet w s ui rs\"\nassert anti_shuffle(\"The sun rises in the east and sets in the west\") == \"eht snir sesir thet ea e w s ui rs\"\nassert anti_shuffle(\"The sun sets in the east and rises in the west\") == \"eht snir sesir thet w s ui rs\"\nassert anti_shuffle(\"The sun sets in the east and sets in the west\") == \"eht snir sesir thet ea e w s ui rs\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     anti_shuffle('Hello my name is python') == 'hnmt ynam aoput llel'\nassert     anti_shuffle('The quick brown fox jumps over the lazy dog') == 'hheeykcquicw fxjzs evrzoy dgddon'\nassert     anti_shuffle('one two three four five') == 'enof tretw tyer foff ive'\nassert     anti_shuffle('') == ''\nassert     anti_shuffle(' ') ==''\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     \"This is a test of anti_shuffle\" == anti_shuffle(\"This is a test of anti_shuffle\"), \"Error\"\nassert     \"A test  of anti_shuffle\" == anti_shuffle(\"A test  of anti_shuffle\"), \"Error\"\nassert     \"Z, a, r, t, i, s, ,, d, of, anti_shuffle, s, a, n, t\" == anti_shuffle(\"Z, a, r, t, i, s, ,, d, of, anti_shuffle, s, a, n, t\"), \"Error\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     anti_shuffle('this is a test sentence') == 'a tsetn si siht'\nassert     anti_shuffle('this is another test sentence') == 'niesi astn otni tsetn'\nassert     anti_shuffle('this is a very very very long sentence') == 'vreeeay is nooit tsetn si a ees vreeeay'\nassert     anti_shuffle('this is a very very very long sentence') == 'vreeeay is nooit tsetn si a ees vreeeay'\nassert     anti_shuffle('shuffled sentence') =='sentenc ees hufni ef shufle'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     anti_shuffle('foobar baz') == 'foobaz bar'\nassert     anti_shuffle('foobar baz') == 'foobaz bar'\nassert     anti_shuffle('foobar baz') == 'foobaz bar'\nassert     anti_shuffle('foobar baz') == 'foobaz bar'\nassert     anti_shuffle('foobar baz') == 'foobaz bar'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\"Hello, my name is Jurgen!\") == \\\n            \"Hello my name is Jurgen!\"\nassert     anti_shuffle(\"     \") == \"     \"\nassert     anti_shuffle(\"The sun shines over the lake!\") == \\\n            \"THe sUn shiS dOw nd OVEr tHe laKe!\"\nassert     anti_shuffle(\"You and I both like apples!\") == \\\n            \"YoUr nd IeLk AbOuT yOu aLk AppLe!\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"Hello how are you I am fine\") == \"Hellow how aree I am fine\", \"Error\"\nassert     anti_shuffle(\"\") == \"\", \"Error\"\nassert     anti_shuffle(\"a\") == \"a\", \"Error\"\nassert     anti_shuffle(\"abc\") == \"abc\", \"Error\"\nassert     anti_shuffle(\"abc def\") == \"abc d ef\", \"Error\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_row([[5,6,7,8],[2,4,9,1],[3,6,5,1]], 5) == [(0, 0), (1, 2), (2, 1)]\nassert     get_row([[5,6,7,8],[2,4,9,1],[3,6,5,1]], 2) == [(0, 1), (1, 3), (2, 2)]\nassert     get_row([[5,6,7,8],[2,4,9,1],[3,6,5,1]], 1) == [(0, 2), (1, 4), (2, 0)]\nassert     get_row([[5,6,7,8],[2,4,9,1],[3,6,5,1]], 4) == [(2, 0)]\nassert     get_row([[5,6,7,8],[2,4,9,1],[3,6,5,1]], 9) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_row([(1, 3, 2), (2, 4, 1)], 1) == [(1, 2)]\nassert     get_row([(1, 3, 2), (2, 4, 1)], 2) == [(2, 1)]\nassert     get_row([(1, 3, 2), (2, 4, 1)], 3) == [(3, 1)]\nassert     get_row([(1, 3, 2), (2, 4, 1)], 4) == []\nprint(\"get_row passes test\")\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [\n        (0, 3), (0, 2), (0, 1), (1, 3), (1, 2), (1, 1), (2, 3), (2, 2), (2, 1)], \"Example\"\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8]], 4) == [\n        (0, 2), (0, 1), (1, 2), (1, 1)], \"Simple\"\nassert     get_row([[1, 2, 3], [4, 5, 6]], 4) == [\n        (0, 2), (0, 1), (1, 2), (1, 1)], \"Simple 2\"\nassert     get_row([[1, 2], [4, 5]], 4) == [\n        (0, 1), (0, 1), (1, 1), (1, 1)], \"Simple 3\"\nassert     get_row([[1], [4]], 4) == [\n        (0, 0), (0, 0), (1, 0), (1, 0)], \"Simple 4\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 2) ==     [(1,2), (1,3), (2,2), (2,3), (3,2), (3,3)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 1) ==     [(1,3), (2,3), (3,3)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 8) ==     [(1,0), (1,1), (1,2), (1,3), (2,0), (2,1), (2,2), (2,3), (3,0), (3,1), (3,2), (3,3)]\nassert     get_row([[1,2,3]], 2) ==         [(1,0)]\nassert     get_row([[1,2,3], [4,5,6]], 2) ==     [(1,0), (1,1), (2,0), (2,1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_row([[5, 1, 3], [6, 6], [7, 4]], 2) == [\n        [1, 3], [6, 6], [7, 4]]\nassert get_row([[5], [6], [7]], 2) == [[5], [6], [7]]\nassert get_row([[5], [6, 5], [7, 6]], 2) == [[5], [6, 5], [7, 6]]\nassert get_row([[5, 1, 3], [6, 6], [7, 4, 7]], 2) == [\n        [1, 3], [6, 6], [7, 4, 7]]\nassert get_row([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [\n        [3, 4, 5]]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_row([[1,2,3],[1,2,3],[1,2,3]], 1) == [(0,1), (0,2), (0,3)]\nassert     get_row([[1,2,3],[1,2,3],[1,2,3]], 2) == [(1,3), (1,2), (1,1)]\nassert     get_row([[1,2,3],[1,2,3],[1,2,3]], 3) == [(2,1), (2,2), (2,3)]\nassert     get_row([[1,2,3],[1,2,3],[1,2,3]], 4) == []\nassert     get_row([[1,2,3],[1,2,3],[1,2,3]], 1) == [(0,1), (0,2), (0,3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_row([[1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5]], 1) == [(0, 4), (1, 3), (2, 2)]\nassert     get_row([[1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5]], 2) == [(0, 5), (1, 4), (2, 3)]\nassert     get_row([[1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5]], 3) == [(0, 5)]\nassert     get_row([[1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5]], 4) == []\nassert     get_row([[1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5]], 5) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(2, 2), (1, 0), (0, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []\nassert     get_row([], 0) == []\n\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, rows), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [(1, 5), (1, 4), (1, 3), (2, 4), (3, 3)] == get_row(lst, 1)\nassert     [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)] == get_row(lst, 0)\nassert     [(2, 3), (2, 2), (3, 3), (3, 2), (4, 3)] == get_row(lst, 2)\n\nassert     [(1, 3), (1, 2), (1, 1)] == get_row(lst, 1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_array([1, 2, 3]) == [1, 2, 3], \"Should be [1, 2, 3]\"\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4], \"Should be [1, 2, 3, 4]\"\nassert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"Should be [1, 2, 3, 4, 5, 6]\"\nassert     sort_array([0, 4, 5, 2, 4, 5, 1, 4]) == [0, 1, 2, 4, 4, 4, 5, 5], \"Should be [0, 1, 2, 4, 4, 4, 5, 5]\"\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"Should be [1, 2, 3, 4, 5, 6, 7, 8, 9]\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_array([0, 3, 2, 4]) == [0, 2, 3, 4], \"Wrong output!\"\nassert     sort_array([0, 3, 2, 4, 1]) == [0, 1, 2, 3, 4], \"Wrong output!\"\nassert     sort_array([0, 0, 0, 0]) == [0, 0, 0, 0], \"Wrong output!\"\nassert     sort_array([0, 0, 0, 0, 1]) == [0, 0, 0, 0, 1], \"Wrong output!\"\nassert     sort_array([0, 0, 0, 0, 1, 1]) == [0, 0, 0, 0, 1, 1], \"Wrong output!\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_array(\n        [0,1,3,2,4,5]) == [0,1,2,3,4,5], 'Should be [0,1,2,3,4,5]'\nassert     sort_array(\n        [3,4,5,1,2]) == [1,2,3,4,5], 'Should be [1,2,3,4,5]'\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 3, 2, 8, 1, 4, 9, 3, 5, 6, 7]) == [1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]\nassert     sort_array([5, 3, 2, 8, 1, 4, 9, 3, 5, 6, 7, 0]) == [0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]\n\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, sort the array in ascending order by modifying the input array in-place.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nprint(sort_array(arr))\nassert \nprint(sort_array(arr2))\nassert \nprint(sort_array(arr3))\nassert \nprint(sort_array(arr4))\nassert \nprint(sort_array(arr5))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8], 'incorrect'\nassert     sort_array([5, 3, 1, 8, 0]) == [1, 3, 5, 8, 0], 'incorrect'\nassert     sort_array([5, 3, 2, 8, 1]) == [5, 2, 3, 8, 1], 'incorrect'\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'incorrect'\nassert     sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0], 'incorrect'\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([3, 4, 2, 3, 1]) == [3, 4, 3, 2, 1]\nassert     sort_array([4, 2, 0, 1, 2]) == [0, 1, 2, 2, 4]\nassert     sort_array([1, 1, 2, 2, 3, 4]) == [1, 1, 2, 2, 3, 4]"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef test_sort_array():\n    arr = [5, 3, 1, 2, 4]\n    expected = [1, 2, 3, 4, 5]\n    assert sort_array(arr) == expected\n\n    arr = [5, 3, 1, 2, 4]\n    expected = [5, 4, 3, 2, 1]\n    assert sort_array(arr) == expected\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 8, 5, 4], 'incorrect'\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], 'incorrect'\nassert     sort_array([3, 6, 8, 1, 5, 7, 2, 4]) == [1, 2, 3, 4, 5, 6, 7, 8], 'incorrect'\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], 'incorrect'\nassert     sort_array([4, 6, 2, 9, 3]) == [2, 3, 4, 6, 9], 'incorrect'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert encrypt(fruits[0]) == 'jhtd', 'encrypt should shift by two places to the left'\nassert encrypt(fruits[1]) == 'hglt', 'encrypt should shift by two places to the left'\nassert encrypt(fruits[2]) == 'hfld', 'encrypt should shift by two places to the left'\nassert encrypt(fruits[3]) == 'fglt', 'encrypt should shift by two places to the left'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encrypt('a') == 'c'\nassert     encrypt('b') == 'e'\nassert     encrypt('c') == 'f'\nassert     encrypt('d') == 'g'\nassert     encrypt('e') == 'h'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encrypt('abc') == 'def'\nassert encrypt('def') == 'abc'\nassert encrypt('xyz') == 'zab'\nassert encrypt('xyz') == 'zab'\nassert encrypt('xyz') == 'zab'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encrypt('abc') == 'def'\nassert     encrypt('bcdef') == 'ghij'\nassert     encrypt('cdegh') == 'ijklm'\nassert     encrypt('zxy') == 'zyx'\nassert     encrypt('abcc') == 'defg'\nprint('OK')\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     encrypt('abcd') == 'bcd'\nassert encrypt('abcd') == 'bcda'\nassert encrypt('abcd') == 'cdea'\nassert encrypt('abcd') == 'cead'\nassert encrypt('abcd') == 'cdea'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encrypt('Hello world') == 'Huo ohk jdw'\nassert     encrypt('a') == 'c'\nassert     encrypt('z') == 'a'\nassert     encrypt('1') == '3'\nassert     encrypt('!') == '!'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (encrypt(\"a\")) == 'h'\nassert     (encrypt(\"b\")) == 'k'\nassert     (encrypt(\"c\")) == 'l'\nassert     (encrypt(\"d\")) =='m'\nassert     (encrypt(\"e\")) == 'n'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     encrypt(\"b\") == \"d\"\nassert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"z\") == \"a\"\nassert     encrypt(\" \") == \" \"\nassert     encrypt(\"A\") == \"C\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == 1\nassert     next_smallest([1, 2, 3, 4, 6]) == None\nassert     next_smallest([5, 5, 5, 5, 5]) == None\nassert     next_smallest([5, 6, 7, 8, 9]) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == None\nassert     next_smallest([5, 4, 4, 4, 4]) == None\nassert     next_smallest([1, 1, 1, 1, 1]) == None\nassert     next_smallest([1, 1, 2, 1, 2]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([7, 2, 10, 9, 1, 3]) == 1\nassert     next_smallest([1, 1, 1, 1]) == None\nassert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 6, 7, 8, 9, 10]) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == None\nassert     next_smallest([5, 4, 3, 2, 1, 0]) == 2\nassert     next_smallest([5, 5, 3, 2, 1]) == None\nassert     next_smallest([5, 5, 5, 2, 1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     next_smallest([2, -1, 4, 0, 1]) == -1\nassert     next_smallest([2, -1, 4, 0, 1, 5, 3]) == -1\nassert     next_smallest([2, -1, 4, 0, 1, 5, 3, 7, 8, 1, -2]) == 1\nassert     next_smallest([]) == None\nassert     next_smallest([1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     next_smallest([0,1,2,3,4]) == 2\nassert     next_smallest([2,3,5,5,5,6]) == 3\nassert     next_smallest([5,5,5,6,7,7,7,7,7,8]) == None\n\ndef next_smallest2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest2() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == None\nassert     next_smallest([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == None\nassert     next_smallest([1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     next_smallest([3, 2, 1]) == 1\nassert     next_smallest([1, 2, 3, 4, 5, 0]) == 0\nassert     next_smallest([1]) == None\nassert     next_smallest([5, 4, 3, 2, 1]) == None\nprint('All tests passed.'"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == 1\nassert     next_smallest([1, 2, 3, 4, 5, 6]) is None\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == None\nassert     next_smallest([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_bored('') == 0, 'Empty string'\nassert     is_bored('I am not bored') == 0, 'No I'\nassert     is_bored('I am bored.') == 1, 'One I'\nassert     is_bored('I am not bored. I am not very bored.') == 0, 'Multiple I'\nassert     is_bored('I am not very bored') == 0, 'One I, not very'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_bored(\"I am playing chess. I love chess.\") == 3\nassert     is_bored(\"I am playing chess. I am playing chess.\") == 3\nassert     is_bored(\"I am playing chess. I am playing chess. I am playing chess. I am playing chess. I am playing chess.\") == 3\nassert     is_bored(\"I am playing chess. I am playing chess. I am playing chess.\") == 3\nassert     is_bored(\"I am playing chess. I am playing chess. I am playing chess. I am playing chess. I am playing chess.\") == 3\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_bored(\"I love you\") == 1, \"Wrong result for 'I love you'\"\nassert     is_bored(\"Why you love me?\") == 1, \"Wrong result for 'Why you love me?'\"\nassert     is_bored(\"I love you. I love you.\") == 1, \"Wrong result for 'I love you. I love you.'\"\nassert     is_bored(\"I love you. I love you.\") == 1, \"Wrong result for 'I love you. I love you.'\"\nassert     is_bored(\"Why you love me? I love you.\") == 2, \"Wrong result for 'Why you love me? I love you.'\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_bored(\"I am not bored. I am not bored. This article is not boring.\") == 3, \\\n        \"error in is_bored\"\nassert     is_bored(\"I am not boring. I am not bored. This article is not boring.\") == 3, \\\n        \"error in is_bored\"\nassert     is_bored(\"I am not bored.\") == 0, \\\n        \"error in is_bored\"\nassert     is_bored(\"I am not bored. I am not boring.\") == 0, \\\n        \"error in is_bored\"\nassert     is_bored(\"I am not boring.\") == 0, \\\n        \"error in is_bored\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_bored(\"I feel bored\") == 1, \"wrong result\"\nassert     is_bored(\"I am not bored\") == 0, \"wrong result\"\nassert     is_bored(\"I am not bored! I am good. I am good.\") == 2, \"wrong result\"\n\nprint(\"Correct!\")\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_bored(\"I can see the fire\") == 0\nassert     is_bored(\"I can see the fire! I can see the fire\") == 2\nassert     is_bored(\"I can see the fire? I can see the fire\") == 1\nassert     is_bored(\"I can see the fire? I can see the fire! I can see the fire\") == 3\nassert     is_bored(\"I can see the fire. I can see the fire. I can see the fire!\") == 3\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_bored('I am a boomer.') == 1\nassert     is_bored('I am a boomer? I am not boomer.') == 1\nassert     is_bored('I am a boomer.') == 0\nassert     is_bored('I am a boomer!') == 0\nassert     is_bored('I am a boomer? I am not a boomer.') == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_bored(\"I am home. And I am Dad. I'm a dad. I am Dad. I am Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. I'm a Dad. "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_bored('I do not believe that the Earth will ever be \"perfect\". It is very rocky, you know.') == 0, 'wrong result'\nassert     is_bored('I do not believe that the Earth will ever be perfect. It is very rocky, you know?') == 1, 'wrong result'\nassert     is_bored('I do not believe that the Earth will ever be perfect.') == 1, 'wrong result'\nassert     is_bored('I do not believe that the Earth will ever be perfect!') == 0, 'wrong result'\nassert     is_bored('I do not believe that the Earth will ever be perfect. I do not believe that the Earth will ever be perfect!') == 0, 'wrong result'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_bored('I am very happy!') == 0, \"wrong result\"\nassert     is_bored('I am so happy today!') == 1, \"wrong result\"\nassert     is_bored('I am so so happy today!') == 2, \"wrong result\"\nassert     is_bored('I am very so happy today!') == 3, \"wrong result\"\nassert     is_bored('How do you feel about this?') == 2, \"wrong result\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == False, \"Wrong answer\"\nassert     any_int(3, 4, 7) == True, \"Wrong answer\"\nassert     any_int(5, 6, 7) == True, \"Wrong answer\"\nassert     any_int(7, 8, 9) == False, \"Wrong answer\"\nprint(\"Correct!\")\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     any_int(1,2,3) == False\nassert     any_int(1,2,4) == False\nassert     any_int(1,2,5) == True\nassert     any_int(1,2,1) == True\nassert     any_int(1,2,6) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     any_int(5, 1, 2) == False, '#5 fail'\nassert     any_int(1, 2, 3) == False, '#6 fail'\nassert     any_int(1.2, 2.3, 3.4) == False, '#7 fail'\nassert     any_int(1.2, 2.3, 3) == False, '#8 fail'\nassert     any_int(1.2, 2.3, 4.5) == True, '#9 fail'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 1) == False\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 1, 3) == True\nassert     any_int(1, 1, 2) == False\nassert     any_int(2, 1, 2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     any_int(1, 1, 1) == False, 'False'\nassert     any_int(1, 2, 3) == False, 'False'\nassert     any_int(1, 2, 2) == True, 'False'\nassert     any_int(0, 0, 1) == True, 'False'\nassert     any_int(-1, 1, -1) == True, 'False'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     any_int(1, 2, 3) == False,'should be False'\nassert     any_int(1, 0, 3) == True,'should be True'\nassert     any_int(1, -1, 1) == True,'should be True'\nassert     any_int(1, 2, 0) == False,'should be False'\nassert     any_int(1, 2, 3) == False,'should be False'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 3.1) == False\nassert     any_int(1, 2.1, 3) == False\nassert     any_int(1.1, 2, 3) == False\nassert     any_int(1, 2, 3.9) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     any_int(1, 3, 2) == False, 'Check the function, sum is 3'\nassert     any_int(1, 2, 3) == True, 'Check the function, sum is 3'\nassert     any_int(1, 2, 1) == False, 'Check the function, sum is 3'\nassert     any_int(1, 2, 2) == True, 'Check the function, sum is 3'\nassert     any_int(1, 2, -1) == False, 'Check the function, sum is 3'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     any_int(1, 2, 1) == True\nassert     any_int(2, 4, 6) == True\nassert     any_int(3, 3, 9) == False\nassert     any_int(5, 3, 2) == False\nassert     any_int(2, 5, 4) == True\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it \n    by swapping the case of every letter, replacing every letter \n    that appears twice with the letter that appears 2 places behind \n    that letter in the english alphabet.\n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nencode('babble') == 'babblee'\nassert \nencode('a') == 'a'\nassert \nencode('all') == 'alll'\nassert \nencode('aeiou') == 'aeeiou'\nassert \nencode('ABC') == 'AbC'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encode(\"this is a test\") == \"hsi  sASi tist\"\nassert     encode(\"This is a test\") == \"hSi  sASi tist\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it according to \n    the rules of the encoding above. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encode('HELLO WORLD') == 'ehllo wrld'\nassert     encode('tHIS IS A TEST') == 'THs iS a TeSt'\nassert     encode('This is a test message') == 'tHs iS a TeSt mesage'\nprint('PASSED')\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it by \n    swapping case of all letters, replacing all the letters \n    that were encoded using the above function. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef test_encode():\n    message = \"a\"\n    encoded = encode(message)\n    assert encoded == \"A\"\n\ndef test_encode_lower():\n    message = \"A\"\n    encoded = encode(message)\n    assert encoded == \"a\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Testing encode\n    print(encode(\"HELp\"))\n    print(encode(\"\"))\n    print(encode(\"xyz\"))\n    print(encode(\"aaaa\"))\n    print(encode(\"caaar\"))\n    print(encode(\"aAaAaAa\"))\n\n    # Testing decode\n    print(decode(\"helP\"))\n    print(decode(\"\"))\n    print(decode(\"xyz\"))\n    print(decode(\"aaaa\"))\n    print(decode(\"caaar\"))\n    print(decode(\"aAaAaAa\"))"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     encode(\"HELLO\") == \"hEllO\"\nassert     encode(\"hello\") == \"hEllO\"\nassert     encode(\"hEllo\") == \"hEllO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     \"Hello world\" == encode(\"hELLo WOrld\")\nassert     \"Foo bar\" == encode(\"fOO bAr\")\nassert     \"Zoo boo\" == encode(\"zOO bOO\")\nassert     \"Baz zoo\" == encode(\"baz zoo\")\nassert     \"Moo boo\" == encode(\"mOO bOO\")\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \nprint(encode(\"AAbbcd\"))\nassert \nassert \nprint(encode(\"AAbbcd\"))\nassert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     skjkasdkd([]) == 0\nassert     skjkasdkd([1,2,3]) == 3\nassert     skjkasdkd([4,6,8]) == 7\nassert     skjkasdkd([1,2,3,5,6]) == 4\nassert     skjkasdkd([6,8,14,28]) == 11\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     skjkasdkd([1, 3, 2, 7, 4, 8, 5, 4, 6]) == 9\nassert     skjkasdkd([1, 1, 2, 4, 5, 7, 4, 8, 6]) == 13\nassert     skjkasdkd([1, 3, 2, 7, 4, 8, 5, 4, 6]) == 9\nassert     skjkasdkd([1, 3, 2, 7, 4, 8, 5, 4, 6]) == 9\nassert     skjkasdkd([1, 3, 2, 7, 4, 8, 5, 4, 6]) == 9\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     skjkasdkd([1,2,3,4,5,6,7,8,9,11,12,13]) == 3\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9]) == 3\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,11]) == 3\nassert     skjkasdkd([11,22,33,44,55,66,77,88,99,110]) == 5\nassert     skjkasdkd([111,222,333,444,555,666,777,888,999,1100]) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nprint(skjkasdkd([]))\nassert \n\nprint(skjkasdkd([1,2,3]))\nassert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     skjkasdkd([1, 5, 25, 39, 1, 6]) ==     28\nassert     skjkasdkd([3, 5, 6, 7, 9, 10]) ==     13\nassert     skjkasdkd([5, 8, 10, 15, 17, 18]) ==     18\nassert     skjkasdkd([10, 20, 18, 22, 27, 21]) ==     23\nassert     skjkasdkd([17, 24, 21, 15, 17, 23]) ==     22\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     skjkasdkd([]) == 0\nassert     skjkasdkd([7, 5, 2]) == 7\nassert     skjkasdkd([5, 6, 9, 2, 7]) == 7\nassert     skjkasdkd([5, 6, 9, 2, 7]) == 7\nassert     skjkasdkd([5, 6, 9, 2, 7]) == 7\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     skjkasdkd([-1,-2,3,4]) == 7\nassert     skjkasdkd([-1,-2,3,4,1]) == 3\nassert     skjkasdkd([-1,-2,-3,4]) == -2\nassert     skjkasdkd([1,2,3,4]) == 5\nassert     skjkasdkd([-1,2,3,4]) == 7\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     skjkasdkd([11, 2, 3, 4, 5]) == 7\nassert     skjkasdkd([2, 3, 4, 11, 5]) == 3\nassert     skjkasdkd([2, 3, 5, 11, 5]) == 5\nassert     skjkasdkd([2, 3, 5, 5, 11]) == 3\nassert     skjkasdkd([2, 3, 5, 3, 11]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_dict_case({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == True\nassert     check_dict_case({'A':1, 'B':2, 'C':3, 'D':4, 'E':5}) == True\nassert     check_dict_case({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == True\nassert     check_dict_case({'A':1, 'B':2, 'C':3, 'D':4, 'E':5}) == True\nassert     check_dict_case({}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False, \"incorrect\"\nassert check_dict_case({\"lower_case\": True, \"UPPER_CASE\": True}) == False, \"incorrect\"\nassert check_dict_case({\"lower_case\": True, \"lower_case\": True}) == True, \"incorrect\"\nassert check_dict_case({\"upper_case\": True, \"lower_case\": True}) == True, \"incorrect\"\nassert check_dict_case({\"upper_case\": True, \"upper_case\": True}) == True, \"incorrect\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_dict_case({\"lower_case\": \"yes\", \"UPPER_CASE\": \"no\"}) == True, \"Wrong result for check_dict_case\"\nassert     check_dict_case({\"lower_case\": \"no\", \"UPPER_CASE\": \"yes\"}) == True, \"Wrong result for check_dict_case\"\nassert     check_dict_case({\"lower_case\": \"no\", \"UPPER_CASE\": \"no\"}) == False, \"Wrong result for check_dict_case\"\nassert     check_dict_case({}) == False, \"Wrong result for check_dict_case\"\nassert     check_dict_case({1:2, 3:4}) == False, \"Wrong result for check_dict_case\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_dict_case({'a':1,'b':2,'c':3,'d':4}) == False\nassert     check_dict_case({'A':1,'B':2,'C':3,'D':4}) == True\nassert     check_dict_case({}) == False\nprint(\"Exercise 21: check_dict_case\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == True, \\\n        \"check_dict_case({'a':1, 'b':2, 'c':3}) should return True\"\nassert     check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3}) == True, \\\n        \"check_dict_case({'A':1, 'B':2, 'C':3}) should return True\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == True, \\\n        \"check_dict_case({'a':1, 'b':2, 'c':3}) should return True\"\nassert     check_dict_case({1: 'a', 2: 'b', 3: 'c'}) == True, \\\n        \"check_dict_case({1:'a', 2:'b', 3:'c'}) should return True\"\nassert     check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3}) == False, \\\n        \"check_dict_case({'A':1, 'B':2, 'C':3}) should return False\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, \"empty dict\"\nassert     check_dict_case({\"key1\":\"value1\"}) == False, \"non-string key\"\nassert     check_dict_case({\"KEY1\":\"value1\"}) == False, \"non-string key\"\nassert     check_dict_case({\"key1\":\"value1\",\"KEY1\":\"value1\"}) == False, \"two same-case keys\"\nassert     check_dict_case({\"key1\":\"value1\",\"key1\":\"value1\"}) == False, \"two same-case keys\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3})\nassert not check_dict_case({})\nassert check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3})\nassert check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3})\n\n\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_dict_case({'d':1, 'b':2, 'c':3}) == False, \"Dictionary with upper case key\"\nassert     check_dict_case({'D':1, 'B':2, 'C':3}) == True, \"Dictionary with lower case key\"\nassert     check_dict_case({}) == False, \"Empty dictionary\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_dict_case({\"ab\": 1, \"cC\": 2}) == True\nassert     check_dict_case({\"Ab\": 1, \"cC\": 2}) == True\nassert     check_dict_case({\"aB\": 1, \"cC\": 2}) == False\nassert     check_dict_case({\"aB\": 1, \"cC\": 2, \"dD\": 3, \"eE\": 4}) == False\nassert     check_dict_case({\"aB\": 1, \"cC\": 2, \"dD\": 3, \"eE\": 4}) == False\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_up_to(5) == [2, 3, 5], 'error'\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13, 17], 'error'\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13, 17], 'error'\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], 'error'\n\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_up_to(5) == [2,3,5]\nassert     count_up_to(7) == [2,3,5,7]\nassert     count_up_to(10) == [2,3,5,7,11]\n\n\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_up_to(10) == [2,3,5,7]\nassert     count_up_to(25) == [2,3,5,7,11,13,17,19,23]\nprint('count_up_to passes!')\n\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_up_to(5) == [2, 3, 5], \"wrong result for count_up_to(5)\"\nassert     count_up_to(10) == [2, 3, 5, 7], \"wrong result for count_up_to(10)\"\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], \"wrong result for count_up_to(20)\"\nprint(\"correctness of count_up_to function: PASSED\")\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     multiply(3, 7) == 3,     'Incorrect output'\nassert     multiply(2, 10) == 2,     'Incorrect output'\nassert     multiply(2, 99999) == 4,     'Incorrect output'\nassert     multiply(1, 678) == 1,     'Incorrect output'\nprint('PASSED')\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     multiply(9, 9) == 1\nassert     multiply(12, 10) == 2\nassert     multiply(912, 90) == 12\nassert     multiply(345, 345) == 9\nassert     multiply(1234, 1234) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     multiply(12345, 54321) == 12\nassert multiply(12345, 54321) == 12\nassert multiply(12345, 54321) == 12\nassert multiply(12345, 54321) == 12\nassert multiply(12345, 54321) == 12\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (\n        multiply(2, 3) == 6\n    )\nassert     (\n        multiply(16, 23) == 16\n    )\nassert     (\n        multiply(16, 20) == 20\n    )\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     multiply(123, 345) == 1\nassert     multiply(0, 0) == 0\nassert     multiply(43, 10) == 4\nassert     multiply(12, 0) == 0\nassert     multiply(43, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (multiply(10, 3) == 3)\nassert     (multiply(0, 3) == 0)\nassert     (multiply(10, 0) == 0)\nassert     (multiply(0, 0) == 0)\nassert     (multiply(10, 5) == 5)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (multiply(9, 10) == 1)\nassert     (multiply(45, 8) == 1)\nassert     (multiply(13, 21) == 2)\nassert     (multiply(24, 18) == 2)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    a, b = [int(x) for x in input().split()]\n    result = multiply(a, b)\n    print(result"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     multiply(12, 5) == 5\nassert     multiply(12, 8) == 4\nassert     multiply(21, 5) == 5\nassert     multiply(21, 8) == 2\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     multiply(1234, 5678) == 2\nassert     multiply(1234, 1234) == 1\nassert     multiply(1002, 24) == "
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(count_upper(''))\n    print(count_upper('aeiou'))\n    print(count_upper('AEIOU'))\n    print(count_upper('aeiouAEIOU'))\n    print(count_upper('AEIOUaeiou'))\n    print(count_upper('AEIOUaeiouAEIOU'))\n    print(count_upper('AEIOUaeiouAEIOUx'))\n    print(count_upper('AEIOUaeiouAEIOUxX')"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_upper('ImSoLaRt') == 2\nassert     count_upper('abracadabra') == 4\nassert     count_upper('Abracadabra') == 5\nassert     count_upper('AAabrAcAdBrA') == 2\nassert     count_upper('A') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_upper('abracadabra') == 3\nassert     count_upper('receive') == 3\nassert     count_upper('aeiou') == 6\nassert     count_upper('LOVELY') == 0\nassert     count_upper('coding') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_upper('HeLlo') == 0\nassert     count_upper('Heeeello') == 1\nassert     count_upper('Heeeello') == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     closest_integer('15') == 15\nassert     closest_integer('14.5') == 15\nassert     closest_integer('-14.5') == -15\nassert     closest_integer('15.6') == 16\nassert     closest_integer('14.567') == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.532\") == 15\nassert     closest_integer(\"-14.532\") == -15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-14\") == -14\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     closest_integer(-15) == -15\nassert    closest_integer(-14.5) == -14\nassert    closest_integer(0.5) == 0\nassert    closest_integer(14.5) == 15\nassert    closest_integer(15) == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     closest_integer(5.3) == 5\nassert closest_integer(-5.3) == -5\nassert closest_integer(0) == 0\nassert closest_integer(-0.0) == -0\nassert closest_integer(-0.5) == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-14\") == -14\nassert     closest_integer(\"-14.7\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5456\") == 15\nassert     closest_integer(\"14.5456\") == 15\nassert     closest_integer(\"14.545612\") == 16\nassert     closest_integer(\"14.54561212\") == 16\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.6\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.4\") == 14\nassert     closest_integer(\"14.6\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"-2.6\") == -3\nassert closest_integer(\"-0.5\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     closest_integer('-14.5') == -15, \"WA\"\nassert     closest_integer('14.5') == 15, \"WA\"\nassert     closest_integer('0.5') == 0, \"WA\"\nassert     closest_integer('15.5') == 16, \"WA\"\nassert     closest_integer('-15.5') == -16, \"WA\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     make_a_pile(2) == [2, 2]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(6) == [6, 4, 2, 1]\nassert     make_a_pile(8) == [8, 6, 4, 2, 1]\nassert     make_a_pile(10) == [10, 8, 6, 4, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_a_pile(5) == [5, 3, 1]\nassert     make_a_pile(10) == [10, 6, 4]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(4) == [4,2,2,1]\nassert     make_a_pile(5) == [5,3,2,2,1]\nassert     make_a_pile(6) == [6,4,2,2,2,1]\nassert     make_a_pile(7) == [7,5,3,2,2,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [3,1]\nassert     make_a_pile(3) == [7,3,1]\nassert     make_a_pile(4) == [15,7,3,1]\nassert     make_a_pile(5) == [31,15,7,3,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 3]\nassert     make_a_pile(3) == [2, 4, 6]\nassert     make_a_pile(4) == [4, 8, 12]\nassert     make_a_pile(5) == [8, 16, 24]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [3, 1]\nassert     make_a_pile(3) == [4, 4, 2, 1]\nassert     make_a_pile(4) == [5, 6, 6, 3, 1]\nassert     make_a_pile(5) == [7, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(2) == [2,1]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(0) == []\nassert     make_a_pile(10) == [10,8,6,4,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_string(\"This is a string\") == \\\n        [    \"This\", \"is\", \"a\", \"string\"]\nassert     words_string(\"\") == []\nassert     words_string(\"a, b, c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\" a, b, c \") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a, b, c,  d\") == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (words_string('Hi, my name is John') == \n        ['Hi','my', 'name', 'is', 'John'])\nassert     (words_string('Hello, my name is John') == \n        ['Hello','my', 'name', 'is', 'John'])\nassert     (words_string('Hello, my name is') == \n        ['Hello','my', 'name', 'is'])\nassert     (words_string('Hello, my name is John, and') == \n        ['Hello','my', 'name', 'is', 'John', 'and'])\n\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_string('hello,world') == ['hello', 'world'], 'case1 failed'\nassert     words_string('hello world') == ['hello', 'world'], 'case2 failed'\nassert     words_string('hello,world,hi') == ['hello', 'world', 'hi'], 'case3 failed'\nassert     words_string('hello,world, hi') == ['hello', 'world', 'hi'], 'case4 failed'\nassert     words_string('hello,   world,hi') == ['hello', 'world', 'hi'], 'case5 failed'\nprint('words_string success')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_string(\"Hello world, welcome to my world\") == [\"Hello\", \"world\", \"welcome\", \"to\", \"my\", \"world\"]\nassert     words_string(\"I am going on a trip, I am going to visit this place.\") == [\"I\", \"am\", \"going\", \"on\", \"a\", \"trip\", \"I\", \"am\", \"going\", \"to\", \"visit\", \"this\", \"place\"]\nassert     words_string(\"Hello, world, welcome to my world.\") == [\"Hello\", \"world\", \"welcome\", \"to\", \"my\", \"world\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_string(\"Hi, my name is Peter\") == ['Hi','my', 'name', 'is', 'Peter']\nassert     words_string(\"Hi my name is Peter\") == ['Hi','my', 'name', 'is', 'Peter']\nassert     words_string(\"Hi, my name is Peter\") == ['Hi','my', 'name', 'is', 'Peter']\nassert     words_string(\"Hi my name is Peter\") == ['Hi','my', 'name', 'is', 'Peter']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_string('The quick brown fox jumped over the lazy dog.') == \\\n        [\n            'The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.'\n        ], words_string('The quick brown fox jumped over the lazy dog.')\nassert     words_string('The//quick//brown//fox//jumped//over//the//lazy//dog.') == \\\n        [\n            'The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.'\n        ], words_string('The//quick//brown//fox//jumped//over//the//lazy//dog.')\nassert     words_string('//The//quick//brown//fox//jumped//over//the//lazy//dog.') == \\\n        [\n            'The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.'\n        ], words_string('//The//quick//brown//fox//jumped//over//the//lazy//dog.')\nassert     words_string('//') == [], words_string('//')\nassert     words_string('//x//') == ['x'], words_string('//x//')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_string('') == []\nassert     words_string('the quick brown fox') == ['the', 'quick', 'brown', 'fox']\nassert     words_string('the,quick,brown,fox') == ['the', 'quick', 'brown', 'fox']\nassert     words_string('the  quick  brown  fox') == ['the', 'quick', 'brown', 'fox']\nassert     words_string('the   quick   brown   fox') == ['the', 'quick', 'brown', 'fox']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_string(\"The quick brown fox jumps over the lazy dog.\") == \\\n        [ \"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\" ]\nassert     words_string(\"Double  spaced  words\") == \\\n        [ \"Double\", \"spaced\", \"words\" ]\nassert     words_string(\"Commas, please!\") == \\\n        [ \"Commas\", \"please\" ]\nassert     words_string(\"123.4.5.6, abc.def\") == \\\n        [ \"123.4.5.6\", \"abc.def\" ]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_string('This is a sentence') == ['This', 'is', 'a','sentence']\nassert     words_string('This   is a sentence') == ['This', 'is', 'a','sentence']\nassert     words_string('This, is a sentence') == ['This', 'is', 'a','sentence']\nassert     words_string('This,   is a sentence') == ['This', 'is', 'a','sentence']\nassert     words_string('This,   is   a sentence') == ['This', 'is', 'a','sentence']\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     choose_num(2, 4) ==     2\nassert     choose_num(5, 5) ==     4\nassert     choose_num(9, 20) ==     -1\nassert     choose_num(100, 200) ==     -1\n\n\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     choose_num(2, 4) == -1, \"choose_num(2, 4)!= -1\"\nassert     choose_num(5, 9) == 8, \"choose_num(5, 9)!= 8\"\nassert     choose_num(0, 1) == -1, \"choose_num(0, 1)!= -1\"\nassert     choose_num(8, 9) == 8, \"choose_num(8, 9)!= 8\"\nassert     choose_num(4, 6) == -1, \"choose_num(4, 6)!= -1\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     choose_num(3, 7) == 4\nassert     choose_num(1, 10) == 8\nassert     choose_num(100, 200) == -1\nassert     choose_num(-5, -1) == -1\nassert     choose_num(0, 4) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     choose_num(4, 4) == 4\nassert     choose_num(4, 6) == -1\nassert     choose_num(4, 5) == 4\nassert     choose_num(6, 9) == 6\nassert     choose_num(10, 20) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     choose_num(2, 4) == 4, \"choose_num(2, 4) should return 4.\"\nassert     choose_num(7, 5) == -1, \"choose_num(7, 5) should return -1.\"\n\nprint(\"choose_num() is correct!\")\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     choose_num(1, 5) == 4\nassert     choose_num(5, 1) == 4\nassert     choose_num(1, 4) == -1\nassert     choose_num(3, 6) == -1\nassert     choose_num(7, 9) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     choose_num(1, 10) == -1, 'choose_num(1, 10) should return -1'\nassert     choose_num(1, 100) == 6, 'choose_num(1, 100) should return 6'\nassert     choose_num(1, 50) == -1, 'choose_num(1, 50) should return -1'\nassert     choose_num(9, 31) == 20, 'choose_num(9, 31) should return 20'\nassert     choose_num(1, 10) == -1, 'choose_num(1, 10) should return -1'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     choose_num(0, 0) == -1\nassert     choose_num(0, 4) == -1\nassert     choose_num(0, 5) == -1\nassert     choose_num(0, 10) == -1\nassert     choose_num(0, -1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     choose_num(-1, -2) == -1\nassert choose_num(-5, -5) == -1\nassert choose_num(-2, 0) == -1\nassert choose_num(0, 0) == 0\nassert choose_num(0, 1) == 0\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rounded_avg(2, 5) == 4\nassert     rounded_avg(5, 2) == 4\nassert     rounded_avg(5, 5) == 4\nassert     rounded_avg(4, 5) == 4\nassert     rounded_avg(2, 5) == 4\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rounded_avg(1, 5) == \"0.11\", \"the result is incorrect\"\nassert     rounded_avg(2, 5) == \"0.22\", \"the result is incorrect\"\nassert     rounded_avg(5, 5) == \"1.00\", \"the result is incorrect\"\nassert     rounded_avg(7, 5) == \"0.27\", \"the result is incorrect\"\nassert     rounded_avg(1, 5) == \"0.11\", \"the result is incorrect\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rounded_avg(1,1) == 1\nassert     rounded_avg(1,2) == 1.5\nassert     rounded_avg(1,3) == 2\nassert     rounded_avg(2,3) == 2.0\nassert     rounded_avg(2,4) == 2.25\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rounded_avg(3, 5) == '1111'\nassert     rounded_avg(2, 3) == '110'\nassert     rounded_avg(9, 11) == '10101'\nassert     rounded_avg(1, 1) == '101010'\nassert     rounded_avg(3, 1) == '101'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     rounded_avg(1, 2) == 1.5\nassert     rounded_avg(3, 4) == 3\nassert     rounded_avg(100, 4) == -1\nassert     rounded_avg(100, 10000) == -1\n\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rounded_avg(1, 2) == 0b11, \"rounded_avg(1, 2) = 0b11\"\nassert     rounded_avg(7, 8) == 0b1111, \"rounded_avg(7, 8) = 0b1111\"\nassert     rounded_avg(13, 9) == 0b111111, \"rounded_avg(13, 9) = 0b111111\"\nassert     rounded_avg(10, 3) == 0b11, \"rounded_avg(10, 3) = 0b11\"\nassert     rounded_avg(2, 8) == 0b11, \"rounded_avg(2, 8) = 0b11\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rounded_avg(0, 0) == '0.0'\nassert     rounded_avg(1, 3) == '0.0'\nassert     rounded_avg(1, 4) == '0.5'\nassert     rounded_avg(3, 6) == '0.0'\nassert     rounded_avg(4, 10) == '0.5'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rounded_avg(1,10) == [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     rounded_avg(1,20) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rounded_avg(1,25) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rounded_avg(1,26) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rounded_avg(1,27) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nassert \n\nprint(rounded_avg(1, 2))  # expected output: 1\nassert rounded_avg(1, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rounded_avg(1, 5) == '0.5'\nassert     rounded_avg(5, 1) == '0.5'\nassert     rounded_avg(6, 9) == '0.7'\nassert     rounded_avg(1, 9) == '0.0'\nassert     rounded_avg(1, 1) == '1.0'\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     unique_digits([123,45,321]) == [45,321]\nassert     unique_digits([123,45,123,321]) == [45,123,321]\nassert     unique_digits([123,45,321,123,45,321]) == [45,123,321]\n\n\ndef delete_nth(d, n):\n    \"\"\"Given a list d and a integer n. Return a list which has \n    the first n elements of list d removed.\n    \n    Example:\n    >>> delete_nth([1,2,3,4,5,6,7,8,9],3)\n    [1, 2, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 5]) == [1, 2, 3, 5]\nassert     unique_digits([1, 2, 3, 5, 6, 7]) == [1, 2, 3, 5, 6, 7]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 5, 6, 7]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 5, 6, 7, 8, 9]\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique_digits([1234,5678,9012,5678]) == [1234,5678,9012,5678,9]\nassert     unique_digits([]) == []\nassert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,2,3,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n\n\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [1, 3, 7, 8, 9, 0]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 7, 8, 9, 10]\nassert     unique_digits([]) == []\nassert     unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique_digits([1,2,3,4]) == [1,2,4]\nassert     unique_digits([4,2,3,1,5,6]) == [1,2,3,5,6]\nassert     unique_digits([2,5,3,2,9]) == [2,3,5,9]\nassert     unique_digits([]) == []\nassert     unique_digits([5,3,2,4]) == [2,4,5]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique_digits([12, 23, 45, 32, 22]) == [23, 45, 32]\nassert     unique_digits([32, 19, 42, 42, 22]) == [32, 42, 19]\nassert     unique_digits([42, 22, 32, 32, 42]) == [22, 42]\nassert     unique_digits([32, 42, 33, 22, 32, 32, 42, 22]) == [32, 33, 42, 22]\nassert     unique_digits([22, 32, 22, 32, 42, 33]) == [32, 33, 42]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine\"\nassert     by_length([7, 8, 9]) == \"Eight Nine\"\nassert     by_length([2, 1, 7, 8, 6, 9, 5, 4, 3, 0]) == \"Two One Seven Eight Six Nine Five Four Three Two Zero\"\nassert     by_length([1, 5, 2, 8, 3, 9]) == \"One Five Two Three Nine Eight\"\nassert     by_length([5, 6, 4, 1, 9, 3, 2, 7, 8, 0]) == \"Five Six Four One Two Three Seven Nine Eight Zero\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     [1, 3, 4, 5, 6, 7, 8, 9, 2] == by_length([1, 3, 2, 4, 5, 6, 7, 8, 9])\nassert     [2, 5, 4, 6, 8, 7, 3, 1, 9] == by_length([2, 5, 4, 6, 8, 7, 3, 1, 9])\nassert     [3, 6, 8, 5, 7, 9, 2, 4, 1] == by_length([3, 6, 8, 5, 7, 9, 2, 4, 1])\nassert     [7, 9, 6, 8, 5, 4, 3, 2, 1] == by_length([7, 9, 6, 8, 5, 4, 3, 2, 1])\nassert     [8, 7, 6, 9, 5, 4, 3, 2, 1] == by_length([8, 7, 6, 9, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     by_length([1, 5, 4, 9, 2, 3, 6, 7, 8, 0]) == ['Eight', 'Three', 'Five', 'Seven', 'Six', 'Two', 'Four', 'One', 'Nine', 'Zero']\nassert     by_length([9, 9, 9, 9, 1, 1, 1, 7, 3]) == ['Nine', 'Nine', 'Nine', 'Nine', 'One', 'One', 'One', 'Seven', 'Three']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 1, 1, 1]) == ['One', 'One', 'One', 'One']\nassert     by_length([0, 0, 0, 0]) == ['Zero', 'Zero', 'Zero', 'Zero']\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     by_length(list(range(1, 10))) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length(list(range(0, 10))) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3]) == ['One', 'Two', 'Three']\nassert     by_length([4, 5, 6]) == ['Four', 'Five', 'Six']\nassert     by_length([7, 8, 9]) == ['Seven', 'Eight', 'Nine']\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef to_string(arr):\n    \"\"\"\n    Given a string containing digits, return the corresponding number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([1,3,4,5,6,7,8,9,10]) == ['Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([9,8,7,6,5,4,3,2,1]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([]) == ["
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     by_length([3, 1, 9, 5, 7, 8, 9, 6]) == ['One', 'Three', 'Nine', 'Five', 'Seven', 'Eight', 'Six', 'Two']\nassert     by_length([2, 5, 8, 1, 5, 7, 9, 3]) == ['Two', 'Five', 'Nine', 'One', 'Six', 'Seven', 'Three', 'Eight']\nassert     by_length([1, 3, 5, 7, 2, 9, 4, 6]) == ['One', 'Three', 'Five', 'Seven', 'Two', 'Six', 'Four', 'Nine']\nassert     by_length([7, 2, 1, 4, 9, 3, 6, 8]) == ['Seven', 'Two', 'Nine', 'Six', 'Four', 'Three', 'One', 'Eight']\nassert     by_length([5, 8, 4, 1, 9, 7, 2, 6]) == ['Five', 'Eight', 'Four', 'Nine', 'Two', 'Six', 'Seven', 'Three']\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the i+1 if i is odd\n    or the product of numbers from i to 1 if i is even.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     f(5) == [1, 2, 6, 24, 120], 'incorrect output'\nassert     f(10) == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880], 'incorrect output'\nassert     f(20) == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000, 15511210043330985984000000, 403291461126605635584000000], 'incorrect output'\nassert     f(1) == [1], 'incorrect output'\n\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef f_tests():\n    # helper function to test functions\n    a = [i for i in range(10)]\n    a_even_factorial = [i for i in range(10) if i % 2 == 0]\n    a_odd_sum = [i for i in range(1, 10) if i % 2!= 0]\n\n    assert f(10) == [0, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n    assert f(10) == [0, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n    "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 1]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (0, 9)\nassert     even_odd_palindrome(100) == (9, 0)\nassert     even_odd_palindrome(1000) == (841, 999)\n\n\ndef sum_digit_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return the sum of all the integer palindromes that fall\n    within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^4\n        2. returned sum is the sum of all integer palindromes within the range (1, n)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (0, 2)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 4)\nassert     even_odd_palindrome(5) == (2, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(10) == (1, 1)\nassert     even_odd_palindrome(11) == (1, 2)\nassert     even_odd_palindrome(12) == (0, 2)\nassert     even_odd_palindrome(13) == (0, 2)\nassert     even_odd_palindrome(14) == (0, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(5) == (1, 4)\nassert     even_odd_palindrome(10) == (7, 4)\nassert     even_odd_palindrome(100) == (14, 49)\nassert     even_odd_palindrome(99) == (38, 15)\nassert     even_odd_palindrome(999) == (700, 1215)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    print('f(6) =', even_odd_palindrome(6))\n    print('f(8) =', even_odd_palindrome(8))\n    print('f(10) =', even_odd_palindrome(10))\n    print('f(12) =', even_odd_palindrome(12))\n    print('f(14) =', even_odd_palindrome(14))\n    print('f(16) =', even_odd_palindrome(16))\n    print('f(18) =', even_odd_palindrome(18))\n    print('f(20) =', even_odd_palindrome(20))"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (even_odd_palindrome(10) == (9, 1))\nassert     (even_odd_palindrome(12) == (8, 2))\nassert     (even_odd_palindrome(13) == (8, 2))\nassert     (even_odd_palindrome(14) == (7, 3))\nassert     (even_odd_palindrome(101) == (99, 1))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_nums([1, 2, 3]) == 0, \"case #1: positive numbers\"\nassert count_nums([1, -2, 3]) == 1, \"case #2: negative numbers\"\nassert count_nums([0, 0, 0]) == 0, \"case #3: all zeros\"\nassert count_nums([-1, 2, 3]) == 0, \"case #4: negative number and positive numbers\"\nassert count_nums([1, -1, -2, -3]) == 1, \"case #5: negative and positive numbers\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_nums([])             == 0, \"empty\"\nassert     count_nums([0, -1234])     == 1, \"one\"\nassert     count_nums([0, -1, -1234]) == 2, \"two\"\nassert     count_nums([0, -1, 1234])     == 2, \"two\"\nassert     count_nums([0, -1, -1, 1234])     == 3, \"three\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 0\nassert     count_nums([1, 2]) == 0\nassert     count_nums([-2, 0, -1, 1]) == 1\nassert     count_nums([0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_nums([1, 2, 3, -4, -5]) == 2\nassert     count_nums([12, -5, -7, 8]) == 0\nassert     count_nums([12, -5, -7, -8]) == 1\nassert     count_nums([1, 2, 3, -4, -5, -6, 7]) == 4\nassert     count_nums([0, -1, -2, 3, 4, -5, -6, 7]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1, 2, 3]) == 0\nassert     count_nums([1, -2, 3, 4]) == 1\nassert     count_nums([-1, -2, -3, 4]) == 1\nassert     count_nums([-1, 0, 1, 2, 3]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_nums([]) == 0, \"error\"\nassert     count_nums([0]) == 0, \"error\"\nassert     count_nums([-1]) == 0, \"error\"\nassert     count_nums([1]) == 0, \"error\"\nassert     count_nums([-1, -2, -3]) == 0, \"error\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_nums([12, -121, 0]) == 2\nassert     count_nums([-121, 0, 12]) == 2\nassert     count_nums([0, -121, 12]) == 2\nassert     count_nums([0, 121, -12]) == 2\nassert     count_nums([12, -121, -12]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_nums([]) == 0, 'incorrect'\nassert     count_nums([1, 2, 3]) == 0, 'incorrect'\nassert     count_nums([1, -2, 3]) == 1, 'incorrect'\nassert     count_nums([0, 1, 2, 3]) == 1, 'incorrect'\nassert     count_nums([1, -2, 3, 0]) == 2, 'incorrect'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_nums([]) == 0, 'case1: empty array'\nassert     count_nums([1, 2, 3, 4]) == 0, 'case2: array of 4 positive numbers'\nassert     count_nums([-1, -2, -3, -4]) == 0, 'case3: array of 4 negative numbers'\nassert     count_nums([0, 0, 0, 0]) == 0, 'case4: array of 4 zeros'\nassert     count_nums([1, 2, 3, 4, -1, -2, -3, -4]) == 4, 'case5: array with positive and negative number'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nprint(count_nums([1, 2, 3]))  # 1\nassert \nprint(count_nums([-1, -2, -3]))  # 0\nassert \nprint(count_nums([0, 0]))  # 0\nassert \nprint(count_nums([12, 8, 10, -12, -8, 0]))  # 3\nassert \nprint(count_nums([12, -8, 10, 0]))  # 3\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     move_one_ball([3, 2, 1, 4])\nassert not move_one_ball([3, 2, 1, 5])\nassert not move_one_ball([])\nassert move_one_ball([3])\n\ndef move_one_ball_1(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     move_one_ball([5, 4, 3, 2, 1]) == True\nassert     move_one_ball([5, 4, 3, 2]) == True\nassert     move_one_ball([5, 4, 3, 2, 1, 1]) == True\nassert     move_one_ball([5, 4, 3, 2, 1, 2]) == True\nassert     move_one_ball([5, 4, 3, 2, 1, 1, 1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (move_one_ball([3,4,2,1]) == False)\nassert     (move_one_ball([3,2,1]) == False)\nassert     (move_one_ball([3,4,1,2]) == True)\nassert     (move_one_ball([1,2,3,4]) == True)\nassert     (move_one_ball([]) == True)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 3, 2, 4, 5]) == False\nassert     move_one_ball([1, 3, 2, 4, 5, 6]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6]) == True, \\\n        \"wrong result for [1, 2, 3, 4, 5, 6]\"\nassert     move_one_ball([1, 2, 3, 4, 5]) == True, \\\n        \"wrong result for [1, 2, 3, 4, 5]\"\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == False, \\\n        \"wrong result for [1, 2, 3, 4, 5, 6, 7]\"\nassert     move_one_ball([]) == True, \\\n        \"wrong result for []\"\nassert     move_one_ball([1, 2, 3]) == True, \\\n        \"wrong result for [1, 2, 3]\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     exchange([1,2,3,4,5,6], [5,6,7,8,9,10,11]) == \"NO\"\nassert     exchange([1,3,5,7], [2,4,6,8]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [5,6,7,8,9,10,11,12]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [1,3,5,7,9,11,13,15]) == \"NO\"\nassert     exchange([1,3,5,7], [2,4,6,8,10,12,14,16]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     exchange([3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 'YES'\nassert     exchange([3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 10]) == 'YES'\nassert     exchange([3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 9, 10]) == 'YES'\nassert     exchange([3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 9, 10]) == 'YES'\nassert     exchange([3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 10]) == 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     exchange([3,5,7,9], [2,4,6,8]) == \"YES\"\nassert     exchange([3,5,7,9], [2,4,6,8,1]) == \"NO\"\nassert     exchange([3,5,7,9], [2,4,6,8,1,10]) == \"NO\"\nassert     exchange([3,5,7,9], [2,4,6,8,1,10,11]) == \"YES\"\nassert     exchange([5,7,9], [2,4,6,8]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     exchange([1, 3, 5, 7], [2, 4, 6, 8]) == 'YES'\nassert     exchange([4, 5, 6], [1, 3, 7]) == 'YES'\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [10, 11, 12, 13, 14, 15, 16, 17]) == 'NO'\nassert     exchange([], [1, 2, 3, 4, 5, 6, 7, 8]) == 'NO'\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     exchange([1,2,3,4],[2,4,6,8]) == \"YES\"\nassert     exchange([1,2,3,4],[2,3,4,5]) == \"YES\"\nassert     exchange([1,2,3,4],[2,3,5,6]) == \"NO\"\nassert     exchange([1,2,3,4],[2,4,5,6]) == \"YES\"\nassert     exchange([1,2,3,4],[2,4,6,7]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     exchange([1], [1]) == \"NO\"\nassert     exchange([2], [2]) == \"YES\"\nassert     exchange([2, 4], [3, 2]) == \"NO\"\nassert     exchange([2, 3], [2, 2]) == \"YES\"\nassert     exchange([2, 3], [2, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     exchange([1, 5, 2, 3, 6], [7, 2, 4, 1, 5]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [1, 3, 5, 7]) == \"YES\"\nassert     exchange([1], [5, 2, 3, 4]) == \"NO\"\nassert     exchange([2, 3, 4], [1, 5, 3, 7]) == \"YES\"\nassert     exchange([], [1, 2, 3, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     exchange([], []) == \"YES\"\nassert     exchange([1], []) == \"NO\"\nassert     exchange([2, 1], [2, 1]) == \"YES\"\nassert     exchange([2, 1], [1, 2]) == \"NO\"\nassert     exchange([4, 2, 5, 6], [4, 6, 2, 5]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     exchange([], []) == \"NO\"\nassert     exchange([], [2]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6], [5, 6, 1, 2, 3, 4]) == \"YES\"\nassert     exchange([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [16, 18, 10, 12, 8, 4, 2, 20, 14, 16]) == \"YES\"\nassert     exchange([2, 3, 4, 5, 6], [2, 3, 5, 6, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     exchange([1], [2, 3, 4]) == 'NO'\nassert     exchange([2, 4, 6], [2, 3, 4]) == 'YES'\nassert     exchange([2, 4, 6], [2, 3, 5]) == 'NO'\nassert     exchange([1, 2, 4, 6], [2, 3, 4]) == 'YES'\nassert     exchange([1, 3, 5, 7], [2, 4, 6]) == 'NO'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     histogram('hello') == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\nassert     histogram('hello hello') == {'h': 2, 'e': 2, 'l': 2, 'o': 2}\nassert     histogram('aaa z') == {'a': 3, 'z': 1}\nassert     histogram('z') == {'z': 1}\nassert     histogram('a b c d e f g h i j') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     histogram('abcbax') == {'c': 3, 'b': 2, 'a': 1}\nassert     histogram('eheh') == {'e': 3, 'h': 2}\nassert     histogram('abcbaxb') == {'c': 3, 'b': 2, 'a': 1}\nassert     histogram('abcdea') == {'e': 3, 'a': 2, 'd': 1}\nassert     histogram('abcdefgabcbax') == {'e': 3, 'f': 1, 'g': 1, 'a': 3, 'b': 2, 'c': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef histogram_2(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     histogram(\"a abc abc bcd\") == {\n        'a': 3, 'b': 2, 'c': 1, 'd': 1\n    }\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     histogram('aabcd') == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert histogram('abacdeffghh') == {'a': 2, 'b': 1, 'c': 2, 'd': 1, 'e': 2, 'f': 1, 'g': 1, 'h': 2}\n\n\ndef histogram_two(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     histogram(\"aaabbc\") == {'a': 3, 'b': 2, 'c': 1}\nassert     histogram(\"abcdabcdab\") == {'a': 4, 'b': 2, 'c': 2, 'd': 2}\nassert     histogram(\"abcabc\") == {'a': 3, 'b': 3, 'c': 3}\nassert     histogram(\"a\") == {'a': 1}\nassert     histogram(\"\") == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     reverse_delete(\"\", \"a\") == (\"\", False)\nassert     reverse_delete(\"abc\", \"\") == (\"abc\", False)\nassert     reverse_delete(\"abc\", \"cba\") == (\"abc\", False)\nassert     reverse_delete(\"abc\", \"c\") == (\"bca\", True)\nassert     reverse_delete(\"abc\", \"\") == (\"bca\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     reverse_delete('abcdefgh','ace')==('abcdefgh','True')\nassert     reverse_delete('aabccddeeff','dd')==('aabccddeeff','True')\nassert     reverse_delete('aabccddeeff','ee')==('aabccdddeff','True')\nassert     reverse_delete('aabccddeeff','ff')==('aabccdddeef','True')\nassert     reverse_delete('aabccddeeff','dd')==('aabccddeeff','False')\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     reverse_delete('geeksforgeeks', 'geeks') == ('geesforrgeks', True), 'Test 1 failed'\nassert     reverse_delete('geeksforgeeks', 'rgeeks') == ('geeksforgsek', True), 'Test 2 failed'\nassert     reverse_delete('geeksforgeeks', 'eegsek') == ('geeksforgeeks', True), 'Test 3 failed'\nassert     reverse_delete('geeksforgeeks', 'geeksfoeg') == ('geeksgeeks', False), 'Test 4 failed'\nassert     reverse_delete('geeksforgeeks', '') == ('geeksforgeeks', True), 'Test 5 failed'\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"abcdefg\",\"c\") == (\"abdefg\",True)\nassert     reverse_delete(\"abcdefg\",\"cdef\") == (\"abcdefg\",True)\nassert     reverse_delete(\"abcdefg\",\"ab\") == (\"efg\",False)\nassert     reverse_delete(\"abcdefg\",\"\") == (\"abcdefg\",False)\nassert     reverse_delete(\"abcdefg\",\"cbc\") == (\"abcdefg\",False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     reverse_delete('1k8i5g7', '5i7gk8') == ('', False), \"case 1. string not changed\"\nassert     reverse_delete('1k8i5g7', '5i7k8') == ('1k8i5g7', True), \"case 2. palindrome\"\nassert     reverse_delete('1k8i5g7', '5k8i7g') == ('1k8i5g7', True), \"case 3. palindrome\"\nassert     reverse_delete('1k8i5g7', '5g7i8k') == ('1k8i5g7', True), \"case 4. palindrome\"\nassert     reverse_delete('1k8i5g7', '5g8i7k') == ('1k8i5g7', True), \"case 5. palindrome\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     reverse_delete('hello world', 'w') == ('hello orl', True)\nassert     reverse_delete('hello world', 'h') == ('ello worl', True)\nassert     reverse_delete('hello world', 'l') == ('hello wor', False)\nassert     reverse_delete('hello world', 'q') == ('hello world', False)\nassert     reverse_delete('hello world', 'z') == ('hello wor', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     reverse_delete('bo', 'o') == ('b', True)\nassert     reverse_delete('boo', 'o') == ('b', True)\nassert     reverse_delete('booo', 'o') == ('b', True)\nassert     reverse_delete('boooo', 'o') == ('b', True)\nassert     reverse_delete('booooo', 'o') == ('b', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"cc\", \"b\") == (\"cb\", True)\nassert     reverse_delete(\"a\", \"\") == (\"\", True)\nassert     reverse_delete(\"a\", \"a\") == (\"\", False)\nassert     reverse_delete(\"a\", \"z\") == (\"\", False)\nassert     reverse_delete(\"cb\", \"bc\") == (\"cb\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     reverse_delete('abcde', '') == ('', True)\nassert     reverse_delete('abcde', 'a') == ('bcde', True)\nassert     reverse_delete('abcde', 'bc') == ('ade', True)\nassert     reverse_delete('abcde', 'c') == ('abde', True)\nassert     reverse_delete('abcde', 'ab') == ('de', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     reverse_delete('','') == ('',True)\nassert     reverse_delete('abcd','cd') == ('abcd',True)\nassert     reverse_delete('abcddcba','c') == ('abcddcba',True)\nassert     reverse_delete('abcddcba','c') == ('abcddcba',True)\nassert     reverse_delete('abcddcba','cb') == ('abcddcb',False)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n    "
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     odd_count([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     odd_count([\"111\", \"121\", \"0\", \"2\", \"22\", \"0\", \"3\", \"0\"]) == [4, 2, 0, 1, 2, 0, 3, 0]\nassert     odd_count([\"3\", \"4\", \"5\", \"1\", \"0\", \"2\", \"7\", \"1\", \"9\", \"0\"]) == [2, 3, 1, 0, 0, 2, 1, 3, 2, 1]\nassert     odd_count([\"2\", \"4\", \"8\", \"0\"]) == [1, 0, 0, 0]\nassert     odd_count([\"2\", \"0\"]) == [1, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     odd_count(['11', '22', '33', '44', '55'])         == [0, 0, 1, 0, 0]\nassert     odd_count(['22', '33', '44', '55', '66'])         == [0, 1, 0, 1, 0]\nassert     odd_count(['22', '33', '44', '55', '66', '77', '88'])    == [0, 1, 0, 1, 0, 2, 0]\nassert     odd_count(['222', '333', '444', '555', '666', '777', '888'])    == [0, 2, 0, 2, 0, 2, 0]\nassert     odd_count(['0', '2', '22', '34', '44', '55', '66', '77', '88'])    == [1, 1, 1, 0, 0, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     odd_count([\"111222\", \"333444\", \"555555\"]) == [1,2,3]\nassert     odd_count([\"9\", \"11111111111111111111\", \"111111111111111111111111\"]) == [1,1,0]\nassert     odd_count([\"11111111111111111111\", \"111222\", \"11122222222222222222222222\"]) == [1,0,1,2]\nassert     odd_count([\"9\", \"11122222222222222222222222\", \"1112222222222222222222222222\"]) == [1,0,1,0,0]\nprint(\"check done\")\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     odd_count([\"2\", \"3\", \"4\", \"5\", \"7\", \"9\"]) == [0, 1, 0, 1, 0, 1]\nassert     odd_count([\"2\", \"3\", \"4\", \"5\", \"7\", \"9\", \"a\"]) == [0, 1, 0, 1, 0, 1, 1]\nassert     odd_count([\"2\", \"3\", \"4\", \"5\", \"7\", \"9\", \"a\", \"1\"]) == [0, 1, 0, 1, 0, 1, 1, 1]\nassert     odd_count([\"2\", \"3\", \"4\", \"5\", \"7\", \"9\", \"a\", \"1\", \"a\"]) == [0, 1, 0, 1, 0, 1, 1, 1, 2]\nassert     odd_count([\"2\", \"3\", \"4\", \"5\", \"7\", \"9\", \"a\", \"1\", \"a\", \"a\"]) == [0, 1, 0, 1, 0, 1, 1, 1, 2, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     odd_count(['1234', '12', '1122']) == [4, 3, 2]\nassert     odd_count(['10', '10x10', '10x10x10', '10x10x10x10x10']) == [4, 1, 1, 1]\nassert     odd_count(['1', '12', '1234', '12x12x12', '12x12x12x12x12']) == [1, 0, 3, 1, 2]\nassert     odd_count([]) == []\nassert     odd_count(['123456789', '1234']) == [4, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     odd_count(['45555', '4135', '09', '3', '45']) == ['2', '3', '0', '2', '2']\nassert     odd_count(['45555', '42345', '0']) == ['2', '3', '2']\nassert     odd_count(['', '42345', '0']) == ['0', '3', '2']\nassert     odd_count(['12345', '1234']) == ['0', '0']\n\n\ndef count_matches(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of strings in the input\n    that contain i instances of the digit d where d is the i'th element of\n    the input.\" where all the i's and d's should be replaced by the number of\n    strings in the input that contain the corresponding i'th digit and\n    d'th digit, respectively.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     odd_count([\"23\", \"564\", \"912\"]) == [3, 2, 3]\nassert     odd_count([\"1\", \"7\", \"12\", \"67\", \"34\", \"90\"]) == [0, 1, 2, 0, 0, 0]\nassert     odd_count([\"12\", \"23\"]) == [2, 1]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1, 2, 3, 4, 5]) == 9\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 12\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 16\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 16\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 19\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 2, 3, 1, 2, 4, 3]) == 3\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, -1]) == 4\nassert     minSubArraySum([-2, 3, 1, 2, 4, 3, -1]) == 1\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, -1, -1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     minSubArraySum([2,3,1,2,4,3]) == 9\nassert     minSubArraySum([2,1,3,4,2,2]) == 5\nassert     minSubArraySum([4,2,1,5,6]) == 8\nassert     minSubArraySum([1,2,3,4,5,6,7]) == 8\nassert     minSubArraySum([1,2,3,4,5,6,7,8]) == 9\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef canJump(nums):\n    \"\"\"\n    Given an array of non-negative integers, you are initially positioned at the\n    first index of the array. Each element in the array represents your maximum\n    jump length at that position. Determine if you are able to reach the last index.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([7, 1, 5, 3, 6, 4]) == 12\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1, 2]) == 3\nassert     minSubArraySum([5, 1, 2, 3, 4]) == 9\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert minSubArraySum([1, 2, 3, 4, 5]) == 9\nassert minSubArraySum([1, 2, 3]) == 4\nassert minSubArraySum([1, 2, 3, 4, 5]) == 9\nassert minSubArraySum([1, 2, 3, 4, 5, 6]) == 12\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([7, 1, 5, 8, 4, 3, 4]) == 5\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([]) == 0\nassert     minSubArraySum([2,3,1,2,4,3,2]) == 6\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([5, 1, 2, 3, 4]) == 6\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 1\nassert     minSubArraySum([1, 2, 3, 4, 5, 5, 3, 4, 1]) == 4\nassert     minSubArraySum([3, 1, 1, 3, 1, 2, 1, 2, 2]) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_fill([[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]], 2) == 3\nassert     max_fill([[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]], 3) == 4\nassert     max_fill([[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]], 4) == 5\nassert     max_fill([[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]], 5) == 5\nassert     max_fill([[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]], 6) == 6\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_fill([[1, 0],\n                    [0, 0]], 1) == 2\nassert     max_fill([[0, 1],\n                    [0, 0]], 1) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_fill([[0, 0, 0],\n            [0, 1, 0],\n            [0, 0, 0]], 1) == 1\nassert     max_fill([[1, 0, 1],\n            [1, 1, 1],\n            [1, 1, 1]], 1) == 2\nassert     max_fill([[0, 1, 0],\n            [0, 0, 1],\n            [1, 1, 1]], 0) == 0\nassert     max_fill([[0, 1, 0],\n            [0, 1, 1],\n            [0, 1, 0]], 1) == 2\nassert     max_fill([[0, 1, 0],\n            [1, 0, 1],\n            [1, 1, 1]], 1) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\n\ndef get_neighbours(x, y):\n    \"\"\"\n    Finds the list of coordinates of neighbouring cells\n\n    Args:\n        x (int): horizontal position of the cell\n        y (int): vertical position of the cell\n\n    Returns:\n        List of coordinates of neighbouring cells\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 0, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0]], 1) == 1\nassert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 0, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0]], 1) == 2\nassert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 0, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0]], 2) == 3\nassert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 0, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 1, 1, 1],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1, 1, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0]], 2) == 4\n\ndef max_fill_bfs(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"should sort\"\nassert     sort_array([8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8], \"should sort\"\nassert     sort_array([8,8,8,8,8,8,8,8,8]) == [8,8,8,8,8,8,8,8,8], \"should sort\"\nassert     sort_array([8,1,3,5,4,6,7,0,9,2,10,12,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,43"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([10,15,3,7,18]) == [3, 10, 15, 18, 7]\nassert     sort_array([10,15,3,7,18,1]) == [1, 3, 10, 15, 18, 7]\nassert     sort_array([10,15,3,7,18,1,8]) == [1, 3, 5, 7, 8, 10, 15]\nassert     sort_array([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     sort_array([10,15,3,7,18,0,1,0]) == [0, 1, 3, 10, 15, 18, 7, 2]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_array([17, 8, 2, 3, 5, 6, 4]) == [17, 8, 2, 3, 5, 6, 4]\nassert     sort_array([7, 9, 9, 7]) == [9, 9, 9, 7]\nassert     sort_array([12, 16, 17, 15, 13, 10]) == [13, 16, 17, 15, 12, 10]\nassert     sort_array([7, 3, 11, 3, 5, 9, 6, 2, 1, 5, 6, 3, 6, 9, 11, 9, 2, 3, 3, 8, 4, 2, 1, 2, 8, 5, 9, 7, 6, 4, 11, 9, 5, 8, 0, 1, 11, 2, 1, 4, 3, 9, 8, 0, 7, 7, 4, 6, 5, 1, 3, 8, 11, 10, 7, 6, 2, 5, 1, 9, 2, 11, 8, 4, 0, 5, 1, 0, 10, 11, 3, 7, 10, 9, 12, 5, 6, 9, 5, 8, 9, 9, 3, 0, 3, 2, 0, 1, 4, 5, 3, 8, 6, 1, 5, 10, 0, 11, 2, 5, 7, 2, 9, 7, 3, 0, 3, 8, 9, 4, 8, 7, 0, 2, 2, 7, 9, 1, 8, 8, 1, 0, 9, 7, 2, 11, 7, 11, 7, 5, 9, 10, 6, 9, 4, 7, 8, 0, 0, 1, 10, 5, 2, 5, 9, 4, 3, 7, 0, 0, 6, 5, 5, 4, 1, 6, 2, 0, 1, 7, 2, 2, 7, 9, 8, 9, 0, 2, 2, 9, 9, 2, 8, 0, 0, 0, 1, 1, 4, 0, 1, 9, 2, 9, 0, 3, 9, 3, 0, 0, 0, 7, 1, 3, 1, 10, 9, 3, 10, 9, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([0,1,2,3]) == [0,1,2,3]\nassert     sort_array([0,1,2,3,4]) == [0,1,2,4,3]\nassert     sort_array([15,13,12,14]) == [14,13,12,15"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_array([0,1,2,10,4,11,6]) == [0,1,4,6,2,10,11]\nassert     sort_array([0,1,2,10,4,11,6]) == [0,1,4,6,2,10,11]\nassert     sort_array([0,0,0,0,0,0,1]) == [0,0,0,0,0,1]\nassert     sort_array([1,1,0,0,1,0]) == [0,0,1,1,0,1]\n\ndef sort_array_alg(arr):\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7]\nassert     sort_array([0,20,31,42,100,33,52,11,23,55,59,31,31,28,60]) == [0,1,20,31,31,32,42,55,60,52,28,59,33,31,100]\nassert     sort_array([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [0,1,2,4,8,3,5,6,7,10,12,14,11,9,13]\nassert     sort_array([5,7,9,11,13,17,19,31,33,35,37,49,51,53,57]) == [5,7,9,11,13,17,19,31,33,35,37,49,51,53,57]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     select_words(\"abracadabra\", 5) == ['abracadabra']\nassert     select_words(\"abracadabra\", 6) == ['abracadabra']\nassert     select_words(\"abracadabra\", 5) == ['abracadabra']\nassert     select_words(\"abracadabra\", 3) == ['abracadabra']\nassert     select_words(\"abracadabra\", 4) == ['abracadabra']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     select_words(\"eee eee\", 2) == []\nassert     select_words(\"a\", 1) == [\"a\"]\nassert     select_words(\"eee eee\", 0) == [\"eee\", \"eee\"]\nassert     select_words(\"\", 1) == []\nassert     select_words(\"eee eee eee\", 1) == [\"eee\", \"eee\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     select_words(\"the quick brown fox jumps over the lazy dog\", 7) == \\\n    ['fox', 'the', 'quick', 'brown', 'the', 'jumps', 'the']\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 0) == \\\n    []\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 16) == \\\n    ['fox', 'the', 'quick', 'brown', 'jumps', 'the']\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 8) == \\\n    ['the', 'quick', 'brown', 'jumps', 'the']\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 19) == \\\n    ['the', 'quick', 'brown', 'jumps', 'the']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     select_words(\"abed\", 3) == ['abed']\nassert     select_words(\"bed\", 2) == ['bed']\nassert     select_words(\"bedbathandbeyond\", 5) == ['bedbath', 'beyond']\nassert     select_words(\"\", 0) == []\nassert     select_words(\"\", 1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     select_words(\"purple alice purple abracadabra\", 4) == ['purp', 'alice']\nassert     select_words(\"purple alice purple abracadabra\", 5) == ['purp', 'alice']\nassert     select_words(\"purple alice purple abracadabra\", 0) == []\nassert     select_words(\"purple alice purple abracadabra\", 1) == ['purp', 'alice', 'purp', 'alice']\nassert     select_words(\"purple alice purple abracadabra\", 2) == ['purp', 'alice', 'purp', 'alice']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     select_words(\"banana\", 3) == [\"banana\", \"nana\", \"ana\"]\nassert     select_words(\"a cat in the hat\", 4) == [\"cat\", \"hat\", \"a cat\", \"it\"]\nassert     select_words(\"cat in the hat\", 4) == [\"cat\", \"hat\", \"a cat\", \"it\"]\nassert     select_words(\"123\", 3) == []\nassert     select_words(\"hello there\", 4) == [\"hello\", \"the\", \"there\", \"hell\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     select_words(\"abc de fgh\", 2) == [\"de fgh\"]\nassert     select_words(\"abc de fgh\", 1) == []\nassert     select_words(\"abc de fgh\", 5) == [\"fgh\"]\nassert     select_words(\"abc de fgh\", 0) == []\nassert     select_words(\"\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     select_words('pneumonoultramicroscopicsilicovolcanoconiosis', 5) ==     \\\n        ['pneumonoultrami', 'volcanoconiosis']    \nassert     select_words('pneumonoultramicroscopicsilicovolcanoconiosis', 6) ==     \\\n        ['pneumonoultramicroscopicsilicovolcanoconiosis']    \nassert     select_words('pneumonoultramicroscopicsilicovolcanoconiosis', 7) ==     \\\n        []    \nassert     select_words('pneumonoultramicroscopicsilicovolcanoconiosis', 2) ==     \\\n        ['pneumonoultrami', 'volcanoconiosis']    \nassert     select_words('pneumonoultramicroscopicsilicovolcanoconiosis', 3) ==     \\\n        ['pneumonoultramicroscopicsilicovolcanoconiosis']    \n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     select_words(\"\", 4)     == []\nassert     select_words(\"bob marley\", 4)     == []\nassert     select_words(\"bob marley\", 0)     == []\nassert     select_words(\"Bob Marley\", 4)     == []\nassert     select_words(\"bob marley\", 5)     == []\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('') == ''\nassert get_closest_vowel('hello') == ''\nassert get_closest_vowel('bff') == ''\nassert get_closest_vowel('leetcode') == ''\nassert get_closest_vowel('leet') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"oppels\") == \"u\"\nassert     get_closest_vowel(\"gleem\") == \"e\"\nassert     get_closest_vowel(\"abcdef\") == \"\"\nassert     get_closest_vowel(\"oh\") == \"o\"\nassert     get_closest_vowel(\"ne\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('word') == 'u'\nassert     get_closest_vowel('Python') == 'e'\nassert     get_closest_vowel('Python') == 'e'\nassert     get_closest_vowel('Python') == 'e'\nassert     get_closest_vowel('Python') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"vomit\") == \"i\", \"case 1\"\nassert     get_closest_vowel(\"aa\") == \"\", \"case 2\"\nassert     get_closest_vowel(\"somethingverylong\") == \"u\", \"case 3\"\nassert     get_closest_vowel(\"boring\") == \"\", \"case 4\"\nassert     get_closest_vowel(\"bad\") == \"\", \"case 5\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('hello') == 'h'\nassert     get_closest_vowel('a') == 'a'\nassert     get_closest_vowel('The') == 'e'\nassert     get_closest_vowel('Hem') == ''\nassert     get_closest_vowel('he') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('apple') == 'e'\nassert     get_closest_vowel('cookbook') == 'o'\nassert     get_closest_vowel('aiohn') == 'e'\nassert     get_closest_vowel('bb') == ''\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel('apple'))\n    print(get_closest_vowel('cookbook'))\n    print(get_closest_vowel('aiohn'))\n    print(get_closest_vowel('bb'))"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('abracadabra') == 'a'\nassert     get_closest_vowel('aaaaaaaa') == ''\nassert     get_closest_vowel('aaabcaab') == 'a'\nassert     get_closest_vowel('abcd') == ''\n\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"deed\")     == \"e\"\nassert     get_closest_vowel(\"deeded\")     == \"\"\nassert     get_closest_vowel(\"deedeeded\")     == \"e\"\nassert     get_closest_vowel(\"decoded\")     == \"e\"\nassert     get_closest_vowel(\"python\")     == \"a\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"lattice\")     == \"e\"\nassert     get_closest_vowel(\"hooping\")     == \"o\"\nassert     get_closest_vowel(\"apple\")     == \"e\"\nassert     get_closest_vowel(\"apples\")     == \"e\"\nassert     get_closest_vowel(\"timing\")     == \"e\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     match_parens(['(()())', '()()()']) == 'Yes', \\\n        'You returned {0} instead of \\'Yes\\''\nassert     match_parens(['(())', '(()())']) == 'Yes', \\\n        'You returned {0} instead of \\'Yes\\''\nassert     match_parens(['(())', '(())()']) == 'Yes', \\\n        'You returned {0} instead of \\'Yes\\''\nassert     match_parens(['(()()', '()()()']) == 'Yes', \\\n        'You returned {0} instead of \\'Yes\\''\nassert     match_parens(['((()))', '((()()']) == 'No', \\\n        'You returned {0} instead of \\'No\\''\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['(()', ')()']) == 'No'\nassert     match_parens(['(())', '(())']) == 'Yes'\nassert     match_parens(['((()))', '(()())']) == 'Yes'\nassert     match_parens(['(()', ')()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     match_parens(['(()())', '(())']) == 'Yes'\nassert     match_parens(['(()', ')()']) == 'No'\nassert     match_parens(['(()())', '(()())']) == 'Yes'\nassert     match_parens(['(())', '()(())']) == 'Yes'\nassert     match_parens(['((()))', '()(())()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     match_parens(['(', ')', ')', ')', '(', '(']) == \"No\"\nassert     match_parens(['(', ')', '(', ')', '()']) == \"Yes\"\nassert     match_parens(['(', '(', ')']) == \"Yes\"\nassert     match_parens(['(', ')', '(']) == \"No\"\nassert     match_parens(['(', '(', ')', ')', ')', '(', ')']) == \"No\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     match_parens(['(', ')', ')', '(', ')']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')']) == 'No'\nassert     match_parens(['(', ')']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['((()', '()()']) == 'No'\nassert     match_parens(['((())', '()()']) == 'Yes'\nassert     match_parens(['((())', '()()']) == 'Yes'\nassert     match_parens(['((())', '()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     match_parens(['(', ')']) == 'Yes', 'check #1'\nassert     match_parens(['(', '(', ')']) == 'Yes', 'check #2'\nassert     match_parens(['(', ')', ')', '(']) == 'No', 'check #3'\nassert     match_parens(['(', ')', ')', '(']) == 'No', 'check #4'\nassert     match_parens(['(', ')', ')', '(']) == 'No', 'check #5'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [('(())', 'Yes'), \n            ('()()', 'Yes'), \n            ('(())', 'No'), \n            ('())', 'No')]\n    for t in lst:\n        print(match_parens(t[0])"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     match_parens([\"(\", \")\"]) == \"Yes\"\nassert     match_parens([\"()\", \"()\"]) == \"Yes\"\nassert     match_parens([\"(\", \")\"]) == \"Yes\"\nassert     match_parens([\"()\", \")\"]) == \"No\"\nassert     match_parens([\"(()\", \")\"]) == \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [3,2,1]\n    k = 2\n    print(maximum(arr, k))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1,2,3] == maximum([10, 4, 2, 3, 1], 2)\nassert     [2,3,4] == maximum([4,2,3,1,5], 3)\n\nprint('maximum test: OK')\n\n\n\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sorted(maximum([1, 2, 3, 4, 5], 3)) == [4, 5, 5]\nassert     sorted(maximum([1, 2, 3, 4, 5], 5)) == [1, 2, 3, 4, 5]\nassert     sorted(maximum([1, 2, 3, 4, 5], 1)) == [1, 2, 3, 4, 5]\nassert     sorted(maximum([1, 2, 3, 4, 5], 7)) == [1, 2, 3, 4, 5]\nassert     sorted(maximum([1, 2, 3, 4, 5], 0)) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     maximum([7, 8, 3, 5, 6, 4, 10], 2) == [7, 8] or maximum([7, 8, 3, 5, 6, 4, 10], 2) == [8, 7]\nassert     maximum([7, 8, 3, 5, 6, 4, 10], 3) == [8, 7, 6] or maximum([7, 8, 3, 5, 6, 4, 10], 3) == [9, 7, 6]\n\nassert     maximum([7, 8, 3, 5, 6, 4, 10], 4) == [8, 7, 6, 4] or maximum([7, 8, 3, 5, 6, 4, 10], 4) == [9, 7, 6, 4]\n\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4] == maximum([1, 3, 2, 2], 2)\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == maximum([1, 3, 2, 2, 4, 5, 6, 7, 8, 9], 5)\nassert     [4, 5, 6, 7, 8, 9] == maximum([1, 3, 2, 2, 4, 5, 6, 7, 8, 9], 2"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     maximum([3, 2, 1, 5, 2, 3], 3) == [5, 5, 5]\nassert     maximum([10, 5, 2, 20, 30], 2) == [30, 30]\nassert     maximum([10, 5, 2, 20, 30], 4) == [10, 10, 20, 20]\nassert     maximum([1, 2, 3, 4, 5, 6], 4) == [6, 6, 6, 6]\nassert     maximum([1, 2, 3, 4, 5, 6], 10) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [3,2,1] == maximum([2,3,1,5,4,6], 3)\nassert     [3,2,1] == maximum([1,2,3,4,5], 3)\nassert     [5,4,3,2,1] == maximum([7,4,1,6,5], 5)\nassert     [5,4,3,2,1] == maximum([5,5,5,5,5,5], 5)\nassert     [1,2,3,4,5] == maximum([1,2,3,4,5], 5)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [5, 6, 7, 8, 9]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [6, 7, 8, 9, 1, 2, 3, 4, 5]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [9, 1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 6\nassert     solution([3, 7, 1, 0, 5, 8]) == 3\nassert     solution([0, 0, 2, 5, 7, 8, 9, 2, 1, 3]) == 10"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solution([2, 3, 4, 5, 6, 7, 8, 9]) == 13\nassert     solution([2, 4, 6, 8]) == 0\nassert     solution([2, 6, 3]) == 2\nassert     solution([2, 2, 2]) == 0\nassert     solution([2, 4, 6, 8, 6, 3]) == 1"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solution([5, 2, 6, 2, 7, 8, 2]) == 7\nassert     solution([1, 3, 5]) == 0\nassert     solution([5, 2, 6, 2, 7, 8, 2, 1, 0]) == 8\nassert     solution([9, 8, 7, 6, 1, 1, 1, 1, 1, 1]) == 3\nassert     solution([9, 8, 7, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pas"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     solution([1,2,3,4,5,6,7,8]) == 8\nassert     solution([1,3,3,4,5,6,7,8]) == 12\nassert     solution([1,2,3,5,6,7,8]) == 4\nassert     solution([1,2,4,5,6,7,8]) == 4"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 9\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 5) == 36\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4) == 34\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1) == 15\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 10) == 36\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add_elements([10, 0, 1], 4) == 10 + 1 + 0 + 0\nassert     add_elements([10, 100, 1], 4) == 10 + 100 + 1 + 0\nassert     add_elements([100, 1, 0, 100], 4) == 100 + 100 + 1 + 0\nassert     add_elements([1, 1, 1], 4) == 1 + 1 + 1 + 1\nassert     add_elements([1, 9, 9, 9], 4) == 1 + 9 + 9 + 9\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 9\nassert     add_elements([1, 2, 3, 4, 5], 3) == 7\nassert     add_elements([1, 2, 3, 4, 5], 4) == 10\nassert     add_elements([1, 2, 3, 4, 5], 5) == 13\nassert     add_elements([1, 2, 3, 4, 5], 6) == 1"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add_elements([5], 1) == 5\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 36\nassert     add_elements([5, 6, 7], 3) == 0\nassert     add_elements([5], 2) == 0\nassert     add_elements([9], 1) == 9\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,0,1], 1) == 2, \"Case 1 failed\"\nassert     add_elements([2,1,4,3,6,5,8,7,9,0], 3) == 36, \"Case 2 failed\"\nassert     add_elements([0,0,0,0], 4) == 0, \"Case 3 failed\"\nassert     add_elements([], 5) == 0, \"Case 4 failed\"\nassert     add_elements([1,2,3,4,5,6,7,8,9,0,1], 10) == 0, \"Case 5 failed\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    # correct output should be 13\n    assert add_elements(arr, k) == 1"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add_elements([45, 22, 5, 37, 36, 89, 56, 78, 123, 656], 3) == 475\nassert     add_elements([123, 456, 789, 656, 11, 434, 123], 3) == 2235\nassert     add_elements([11, 34, 44, 56, 3, 2, 456], 3) == 563\nassert     add_elements([14, 5, 656, 24, 8, 123, 13], 6) == 452\nassert     add_elements([1, 7, 8, 12, 34, 5, 9], 5) == 8\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add_elements([9, 9], 2) == 18\nassert     add_elements([1, 2, 3, 4, 5], 2) == 9\nassert     add_elements([0, 0, 0, 0], 2) == 0\nassert     add_elements([9, 9, 9, 9, 9, 9, 9, 9, 9, 9], 1) == 99\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef get_top_values(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return the k\n    largest integers in arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 10**5\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == []\nassert     get_odd_collatz(3) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(4) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(5) == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(4) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(9) == [9, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(13) == [13, 40, 20, 10, 5, 16, 8, 4, 2, 1], \"test failed\"\nassert     get_odd_collatz(21) == [21, 35, 21, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1], \"test failed\"\nassert     get_odd_collatz(98) == [98, 55, 35, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1], \"test failed\"\n\n\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1], 'incorrect result'\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1], 'incorrect result'\nassert     get_odd_collatz(18) == [18, 36, 19, 38, 17, 20, 37, 18, 17, 20, 37, \n                                        17, 20, 37, 18, 17, 20, 37, 18, 17, 20, 37, \n                                        18, 17, 20, 37, 18, 17, 20, 37, 18, 17, 20, \n                                        37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20, 37, 18, 17, 20, 37, 18, 17, \n                                        20, 37, 18, 17, 20"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(9) == [9,    36,    20,    10,    5,    16,    8,    4,    2,    1]\nassert     get_odd_collatz(23) == [23, 110, 89, 44, 22, 11,    34,    17,    52,    26,    13,    40,    20,    10,    5,    16,    8,    4,    2,    1]\nassert     get_odd_collatz(28) == [28,    126,    94,    55,    22,    11,    34,    17,    52,    26,    13,    40,    20,    10,    5,    16,    8,    4,    2,    1]\nassert     get_odd_collatz(71) == [71,    226,    137,    71,    34,    17,    52,    26,    13,    40,    20,    10,    5,    16,    8,    4,    2,    1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1)             == [1]\nassert     get_odd_collatz(2)             == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(3)             == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(4)             == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(5)             == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(2) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n                                    211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nassert     get_odd_collatz(5) == [5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875, 11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875,\n                                    11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875, 11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875,\n                                    11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875, 11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875,\n                                    11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875, 11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875,\n                                    11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875, 11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875,\n                                    11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 390625, 1953125, 953125, 456875, 23046875, 11625, 4665625, 2328125, 106435625, 4665625, 3125, 15625, 78125, 39062"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(13) == [13, 40, 20, 10, 5, 16, 8, 4, 2, 1], \"Error\"\nassert     get_odd_collatz(17) == [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1], \"Error\"\nassert     get_odd_collatz(7)  == [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1], \"Error\"\n\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     valid_date('04-04-1970') == False, 'Invalid date'\nassert     valid_date('12-04-2050') == False, 'Invalid date'\nassert     valid_date('04-22-2050') == False, 'Invalid date'\nassert     valid_date('01-02-2050') == True, 'Invalid date'\nassert     valid_date('04-03-2050') == True, 'Invalid date'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     valid_date(\"3-2-2012\") == True\nassert     valid_date(\"9-12-2010\") == False\nassert     valid_date(\"6-7-2020\") == False\nassert     valid_date(\"12-11-2019\") == True\nassert     valid_date(\"1-1-2010\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     valid_date(\"12-31-2019\") == True\nassert     valid_date(\"12-32-2019\") == False\nassert     valid_date(\"01-31-2019\") == False\nassert     valid_date(\"01-29-2019\") == True\nassert     valid_date(\"02-29-2019\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     valid_date('3-4-2019') == False, 'Expected output is False'\nassert     valid_date('12-30-2019') == False, 'Expected output is False'\nassert     valid_date('02-29-2019') == False, 'Expected output is False'\nassert     valid_date('03-31-2019') == False, 'Expected output is False'\nassert     valid_date('12-31-2019') == False, 'Expected output is False'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     valid_date('12-01-2021') == True\nassert     valid_date('12-34-2021') == False\nassert     valid_date('12-03-2021') == False\nassert     valid_date('12-03-2020') == True\nassert     valid_date('12-02-2020') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     valid_date('10-01-2020') == True, \"Wrong result for date 1\"\nassert     valid_date('12-32-2020') == False, \"Wrong result for date 2\"\nassert     valid_date('02-29-2020') == False, \"Wrong result for date 3\"\nassert     valid_date('11-00-2020') == False, \"Wrong result for date 4\"\nassert     valid_date('13-01-2020') == False, \"Wrong result for date 5\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     valid_date('05-15-2020') == True\nassert     valid_date('05-15-2025') == False\nassert     valid_date('02-29-2020') == False\nassert     valid_date('11-29-2020') == False\nassert     valid_date('11-29-2101') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     valid_date(\"01-02-2018\") == True, \"February should have 29 days in 2018\"\nassert     valid_date(\"02-29-2018\") == False, \"February should have 28 days in 2018\"\nassert     valid_date(\"02-28-2018\") == True, \"February should have 28 days in 2018\"\nassert     valid_date(\"02-29-2019\") == False, \"February should have 28 days in 2019\"\nassert     valid_date(\"03-31-2018\") == True, \"March should have 31 days in 2018\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     split_words('') == []\nassert     split_words('test') == ['test']\nassert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('hello,world') == ['hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     split_words(\"hello there, how are you today?\") == [\"hello\", \"there,\", \"how\", \"are\", \"you\", \"today\", \"?\"]\nassert     split_words(\"break, break it, break it\") == [\"break\", \"break\", \"break\", \"it\"]\nassert     split_words(\"we don't need no education\") == [\"we\", \"don't\", \"need\", \"no\", \"education\"]\nassert     split_words(\"I'm your father!\") == [\"I\", \"m\", \"your\", \"father\", \"!\"]\nassert     split_words(\"The cow jumped over the moon!\") == [\"The\", \"cow\", \"jumped\", \"over\", \"the\", \"moon\", \"!\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     split_words(\"My name is John\") == ['My', 'name', 'is', 'John']\nassert     split_words(\"My name is John\") == ['My', 'name', 'is', 'John']\nassert     split_words(\"My, name, is, John\") == ['My', 'name', 'is', 'John']\nassert     split_words(\"My, name, is, John\") == ['My', 'name', 'is', 'John']\nassert     split_words(\"My, name, is, John\") == ['My', 'name', 'is', 'John']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     split_words('aa bb,c, cc,d ee, fff') == ['aa', 'bb', 'c', 'cc', 'd', 'ee', 'fff']\nassert     split_words('abc,bac,cba') == [1, 3, 3]\nassert     split_words('abacaba') == [1, 2, 1, 3, 2, 1, 2, 1]\nassert     split_words('abc') == [1, 2, 3]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     split_words('Hello, World!') == ['Hello', 'World!'], 'Not quite there yet.'\nassert     split_words('This is a test of the emergency broadcast system.') == ['This', 'is', 'a', 'test', 'of', 'the', 'emergency', 'broadcast','system.'], 'Not quite there yet.'\nassert     split_words('The,quick,brown,fox,jumps,over,the,lazy,dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog'], 'Not quite there yet.'\n\nassert     split_words('One, Two, Three') == ['One', 'Two', 'Three'], 'Not quite there yet.'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     split_words('This is a test') == ['This', 'is', 'a', 'test']\nassert     split_words('This, is. a. test') == ['This', 'is.', 'a.', 'test']\nassert     split_words('1, 2, 3, 4') == ['1', '2', '3', '4']\nassert     split_words('This, is. a. test') == ['This', 'is.', 'a.', 'test']\nassert     split_words('1, 2, 3, 4') == ['1', '2', '3', '4']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     split_words('hello there') == ['hello', 'there']\nassert     split_words('hello there, max') == ['hello', 'there','max']\nassert     split_words('max,hello there') == ['max', 'hello', 'there']\nassert     split_words('hello there, max, food') == ['hello', 'there','max', 'food']\nassert     split_words(',,,,,,,,max,,,hello,,,there,,,max,,,food,,,,,,') == ['max', 'hello', 'there', 'food']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     split_words('') == []\nassert     split_words('the cat') == ['the', 'cat']\nassert     split_words('the, cat') == ['the', 'cat']\nassert     split_words('the, cat.') == ['the', 'cat']\nassert     split_words('the cat.') == ['the', 'cat']\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 3, 5, 7, 8, 9]) == True\nassert     is_sorted([5, 6, -4, 3, 1, 2]) == True\nassert     is_sorted([5, 6, 7, -4, 3, 1, 2]) == False\nassert     is_sorted([1, 1, 1, 1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef is_anagram(string1, string2):\n    '''\n    Given two strings, return whether or not they are anagrams.\n    Anagrams are strings made of the same characters.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_sorted([1,2,3,4,5,6,7,8]) == True\nassert     is_sorted([2,4,7,9,3,5,6,8,1]) == True\nassert     is_sorted([1,3,5,6,7,8,9,2,4]) == False\nassert     is_sorted([1,1,1,1,1,1,1]) == False\nassert     is_sorted([5,6,5,5,6]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_sorted([])     == True\nassert     is_sorted([1])     == True\nassert     is_sorted([1,1])     == False\nassert     is_sorted([1,2,3])     == True\nassert     is_sorted([1,2,2,3])     == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True, \"should return True\"\nassert     is_sorted([5,4,3,2,1]) == True, \"should return True\"\nassert     is_sorted([1,1,1,2,3]) == True, \"should return True\"\nassert     is_sorted([1,2,1]) == False, \"should return False\"\nassert     is_sorted([1,2,3,1]) == False, \"should return False\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_sorted([0, 1, 2, 3, 4, 5]) is True\nassert     is_sorted([0, 1, 2, 3, 5, 4]) is True\nassert     is_sorted([0, 2, 4, 5, 1]) is False\nassert     is_sorted([5, 4, 3, 2, 1]) is False\nassert     is_sorted([5, 5, 5, 5, 5]) is False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([3]) == True\nassert     is_sorted([3,3]) == True\nassert     is_sorted([3,4]) == True\nassert     is_sorted([3,5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\", \"Wrong result for (1, 3), (2, 4)\"\nassert     intersection((1, 3), (4, 6)) == \"NO\", \"Wrong result for (1, 3), (4, 6)\"\nassert     intersection((0, 5), (4, 6)) == \"YES\", \"Wrong result for (0, 5), (4, 6)\"\nassert     intersection((2, 3), (4, 6)) == \"NO\", \"Wrong result for (2, 3), (4, 6)\"\nassert     intersection((-5, -3), (-5, 0)) == \"YES\", \"Wrong result for (-5, -3), (-5, 0)\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (intersection((1, 3), (2, 4)) == \"NO\")\nassert     (intersection((1, 3), (3, 4)) == \"YES\")\nassert     (intersection((1, 3), (2, 2)) == \"YES\")\nassert     (intersection((1, 2), (3, 4)) == \"NO\")\nassert     (intersection((3, 4), (1, 2)) == \"NO\")\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersection((0, 10), (2, 5)) == \"NO\"\nassert     intersection((0, 10), (2, 3)) == \"NO\"\nassert     intersection((0, 10), (2, 2)) == \"YES\"\nassert     intersection((0, 10), (5, 7)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (2, 2)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\n\nassert     intersection((1, 3), (2, 2)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     intersection((1, 2), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((0, 3), (3, 5)) == \"YES\"\nassert     intersection((-5, 2), (2, 4)) == \"YES\"\nassert     intersection((-5, 0), (0, 2)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((2, 4), (1, 3)) == \"NO\"\nassert     intersection((1, 3), (3, 4)) == \"YES\"\nassert     intersection((3, 4), (1, 3)) == \"YES\"\nassert     intersection((0, 2), (3, 4)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (3, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 2)) == \"NO\"\n\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (intersection(interval1=(1, 5), interval2=(2, 3)) == \"NO\")\nassert     (intersection(interval1=(1, 5), interval2=(2, 4)) == \"YES\")\nassert     (intersection(interval1=(1, 5), interval2=(5, 6)) == \"NO\")\nassert     (intersection(interval1=(2, 3), interval2=(2, 3)) == \"YES\")\nassert     (intersection(interval1=(2, 3), interval2=(3, 3)) == \"NO\")\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (4, 6)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 2)) == \"YES\"\nassert     intersection((1, 3), (3, 3)) == \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prod_signs([]) == None, \"Empty input\"\nassert     prod_signs([0, 0, 0, 0]) == None, \"All zeros\"\nassert     prod_signs([0, -1, 1, -1]) == None, \"Some zeros\"\nassert     prod_signs([0, 1, 0, 1]) == 1, \"All zeros\"\nassert     prod_signs([1, -1, 1, 1]) == 2, \"Some zeros\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (prod_signs([1,2,3,4]) == 2*1*1*1)\nassert     (prod_signs([-3,-2,-1,0,1,2,3]) == 2*-1*1*1)\nassert     (prod_signs([]) == None)\nprint('Success'"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prod_signs([1,2,3])     ==    6 \nassert     prod_signs([1,2,3,0,4])     ==    24\nassert     prod_signs([1,2,3,0])     ==    12 \nassert     prod_signs([-1,-2,3])     ==    12\nassert     prod_signs([-1,-2,3,-4])     ==    12\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prod_signs([]) is None\nassert     prod_signs([1, 2, 3]) == (6*1 + 1*3 + 1*1)\nassert     prod_signs([-1, 1, -1, 1]) == (-2 + 2*(-1) + 1)\nassert     prod_signs([1, 2, 1, -1]) == (2 + 2 + 1 + -1)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prod_signs([1, -2, 3, 4, 5]) == 30\nassert     prod_signs([]) == None\nassert     prod_signs([1, -2, 3, 4, 5, -3, 5, -3, -5, -3, 5]) == -40\nassert     prod_signs([1, -2, 3, 4, 5, -3, 5, -3, -5, -3, 5, 3, -3, 3, 3, 3, -3, -3, -3, -3, 5, 3, -3]) == -90\nprint('Hooray!')\n\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prod_signs([1, 2, 3]) == 15\nassert     prod_signs([1, -2, 3]) == 12\nassert     prod_signs([-1, -2, -3]) == 9\nassert     prod_signs([]) == None\nassert     prod_signs([-1, -2, -3]) == 9\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prod_signs([1, 2, 3]) == -4\nassert     prod_signs([-1, 2, -3]) == 6\nassert     prod_signs([]) == None\nassert     prod_signs([1]) == None\nassert     prod_signs([1, -1]) == 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\nassert     [1, 2, 3, 4] == minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 4)\nassert     [1, 3, 4] == minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3)\nassert     [1, 3, 4] == minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3)\nassert     [1, 2, 3, 4] == minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minPath([[1, 2], [3, 4]], 2) == [2, 1, 3, 4]\nassert     minPath([[1, 2, 3], [4, 5, 6]], 3) == [1, 2, 3, 4, 5, 6]\nassert     minPath([[1, 2], [3, 4]], 3) == [1, 2, 3, 4]\nassert     minPath([[1, 2], [3, 4]], 1) == [1]\nassert     minPath([[1, 2], [3, 4]], 4) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 4, 7]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 6]\nassert     minPath([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]], 2) == [1, 4, 7, 10]\nassert     minPath([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]], 3) == [1, 2, 4, 5, 6, 7, 10]\nassert     minPath([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]], 4) == [1, 2, 3, 4, 7, 8, 9, 10]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [2, 1, 1, 1] == minPath(grid = [[2, 1, 1], [1, 1, 1], [1, 1, 2]],\n                                k = 3)\nassert     [2, 2, 1, 1, 1] == minPath(grid = [[2, 2, 1], [2, 1, 1], [1, 1, 1], [1, 2, 1], [1, 1, 2]],\n                                k = 5)\nassert     [1, 1, 1, 1, 1] == minPath(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],\n                                k = 4)\nassert     [1, 1, 1, 1, 1] == minPath(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],\n                                k = 3)\nassert     [1, 1, 1, 1, 1] == minPath(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],\n                                k = 2)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (minPath([[1, 2, 3], [2, 4, 5], [3, 6, 7]], 3) == [1, 2, 3])\nassert     (minPath([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], 4) == [1, 2, 3, 4])\nassert     (minPath([[2, 3, 4], [4, 5, 6], [6, 7, 8]], 4) == [2, 3, 4])\nassert     (minPath([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], 4) == [2, 3, 4])\nassert     (minPath([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], 5) == [2, 3, 4])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \ngrid = [[1, 3, 1],\n        [1, 5, 1],\n        [4, 2, 1]]\nk = 1\nprint(minPath(grid, k)"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minPath([[1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]], 3) == [1, 2, 3]\n\nassert     minPath([[1, 3, 2],\n                [4, 6, 5],\n                [7, 8, 9]], 3) == [3, 2, 1]\n\nassert     minPath([[1, 3, 3],\n                [4, 6, 5],\n                [7, 8, 9]], 3) == [3, 2, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     minPath(\n                [\n                    [1, 3, 1],\n                    [1, 5, 1],\n                    [4, 2, 1]\n                ], 3\n            ) == [1, 1, 2, 1, 3, 4, 2]\nassert     minPath(\n                [\n                    [1, 2, 3],\n                    [2, 4, 6],\n                    [8, 3, 4]\n                ], 4\n            ) == [2, 3, 4, 3]\nassert     minPath(\n                [\n                    [1, 4, 1],\n                    [1, 5, 1],\n                    [4, 2, 1]\n                ], 3\n            ) == [1, 4, 1, 2, 1, 4]\nassert     minPath(\n                [\n                    [1, 4, 1, 5],\n                    [2, 3, 6, 3],\n                    [3, 2, 1, 5],\n                    [4, 2, 1, 3]\n                ], 4\n            ) == [2, 4, 1, 2, 1, 4]\nassert     minPath(\n                [\n                    [1, 2, 3, 1],\n                    [1, 5, 1, 1],\n                    [4, 2, 1, 1]\n                ], 3\n            ) == [1, 2, 3, 2, 1, 5, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minPath(\n            [[1,2,3],[4,5,6],[7,8,9]],\n            2\n        ) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath(\n            [[1,3,5],[2,4,6],[7,9,8]],\n            3\n        ) == [1, 2, 3, 4, 5, 6, 7, 9, 8]\nassert     minPath(\n            [[1,4,6,7],[8,9,3,4],[2,5,1,2]],\n            4\n        ) == [1, 2, 3, 4, 6, 7, 8, 9]\nassert     minPath(\n            [[1,2,3,4,5,6,7,8,9],[5,4,3,2,1,7,9,8,1],[8,7,6,5,4,2,1,3,5],[7,1,4,9,3,8,5,2,4],[6,2,3,8,7,1,9,5,3],[1,3,2,7,9,4,5,6,1],[2,8,7,9,6,1,4,3,2],[5,3,1,4,2,9,7,6,5],[4,6,2,3,5,8,1,7,9]],\n            6\n        ) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (minPath([[1, 2], [3, 4]], 1) == [1, 2, 3, 4])\nassert     (minPath([[2, 3], [4, 5]], 2) == [2, 3, 4, 5])\nassert     (minPath([[1, 2, 3], [4, 5, 6]], 2) == [1, 2, 4, 5, 6])\nassert     (minPath([[1, 2, 3, 4], [5, 6, 7, 8]], 3) == [1, 2, 5, 6, 7, 8])\nassert     (minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 4) ==\n            [1, 2, 6, 7, 11, 12, 13, 14, 15])\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 2\nassert     tri(4) == 8\nassert     tri(3) == 8\nassert     tri(5) == 19\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef trib(n):\n    \"\"\"You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     tri(1) == [1]\nassert     tri(2) == [1, 1]\nassert     tri(3) == [1, 1, 2]\nassert     tri(4) == [1, 1, 2, 4]\nassert     tri(5) == [1, 1, 2, 4, 8]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     tri(3) ==     [1, 3, 8], \"not working yet\"\nassert     tri(2) ==     [1, 3, 8], \"not working yet\"\nassert     tri(5) ==     [1, 3, 8, 13, 24], \"not working yet\"\nassert     tri(1) ==     [1, 3, 8], \"not working yet\"\nassert     tri(4) ==     [1, 3, 8], \"not working yet\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     tri(1) == [3]\nassert     tri(2) == [2, 8]\nassert     tri(3) == [3, 8, 18]\nassert     tri(4) == [3, 8, 18, 34]\nassert     tri(5) == [3, 8, 18, 34, 55]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(n):\n    \"\"\"Given a positive integer n, return True if it is a palindrome and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digits(105) == 3\nassert     digits(1258) == 4\nassert     digits(111) == 1\nassert     digits(3456) == 0\nassert     digits(9999) == 9\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digits(101) == 0\nassert     digits(49) == 0\nassert     digits(818) == 0\nassert     digits(123) == 6\nassert     digits(1230) == 6\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert digits(1) == 0\nassert digits(2) == 0\nassert digits(3) == 2\nassert digits(4) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     digits(13) == 0\nassert     digits(21) == 3\nassert     digits(0) == 0\nassert     digits(17) == 0\nassert     digits(937) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(3) == 1\nassert     digits(4) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digits(2345) == 6\nassert     digits(1234) == 0\nassert     digits(9012) == 0\nassert     digits(3) == 3\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return true if n is prime and false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digits(101) == 1\nassert     digits(5) == 0\nassert     digits(15) == 3\nassert     digits(25) == 4\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_nested('') == False, 'Empty string'\nassert     is_nested('[][]') == True, 'Double nested'\nassert     is_nested('[][[[]]]') == True, 'Double nested'\nassert     is_nested('[][[[]') == False, 'Not nested'\nassert     is_nested('[(])]') == False, 'No nested'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_nested(\"[()]{}\") == True, \"error\"\nassert     is_nested(\"([)])\") == False, \"error\"\nassert     is_nested(\"[()]{}()\") == True, \"error\"\nassert     is_nested(\"[{()]()\") == True, \"error\"\nassert     is_nested(\"(()){}[)(]\") == True, \"error\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_nested('[()]') == True, \"failed test 1\"\nassert     is_nested('()()') == True, \"failed test 2\"\nassert     is_nested('()(()[]{})') == True, \"failed test 3\"\nassert     is_nested('((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_nested('[()]') == True\nassert     is_nested('[]()') == True\nassert     is_nested('[()][{}()]') == True\nassert     is_nested('[()]') == True\nassert     is_nested('[()]()') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_nested('[())') == False, \"False sample\"\nassert     is_nested('()()[][]') == True, \"True sample\"\nassert     is_nested('(()[()]') == False, \"False sample\"\nassert     is_nested('[([])]()') == True, \"True sample\"\n\ndef is_nested_v1(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_nested(\"[[([])])]\") == True, \"error\"\nassert     is_nested(\"[([])((([[]]])[]()(())))](()())\") == True, \"error\"\nassert     is_nested(\"()(()[()]\") == False, \"error\"\nassert     is_nested(\"[])\") == False, \"error\"\nassert     is_nested(\"[()]\") == True, \"error\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_nested(\"[()]\") == True\nassert     is_nested(\"[(]\") == False\nassert     is_nested(\"[(])\") == False\nassert     is_nested(\"[[]]\") == True\nassert     is_nested(\"[[]()]\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 30\nassert     sum_squares([-1, -2, -3, -4]) == 30\nassert     sum_squares([0, 1, 2, 3, 4]) == 20\nassert     sum_squares([0.1, 1.2, 2.3, 3.4, 4.5]) == 20.0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5,6]) == 25\nassert     sum_squares([0]) == 0\nassert     sum_squares([2,3,4,5]) == 51\nassert     sum_squares([-1,-2,-3,0,0,0,0]) == 0\nassert     sum_squares([-1,-2,-3,-4,-5,-6]) == 0\nprint(\"OK\")\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3]) == 14, \"Test 1\"\nassert     sum_squares([1, 2, 3, 4]) == 55, \"Test 2\"\nassert     sum_squares([1, 2, 3, 4, 5]) == 170, \"Test 3\"\n\nprint(\"Well done! Passed all tests!\""
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 5, 3]) == 3*(1 + 5 + 3)**2\nassert     sum_squares([6, 8, -1]) == (6**2 + 8**2 + (-1)**2)**2\nassert     sum_squares([2, 4, 8]) == (2**2 + 4**2 + 8**2)**2\nassert     sum_squares([2]) == (2**2)**2\nprint('sum_squares() passed.')\n\ndef sum_cubes(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of cubes of the numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_squares([4, 1, 2, 3, 5]) == 225, \"Wrong answer\"\nassert     sum_squares([0]) == 0, \"Wrong answer\"\nassert     sum_squares([]) == 0, \"Wrong answer\"\nassert     sum_squares([2, 2]) == 4, \"Wrong answer\"\nprint(\"Success\")"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 385\nassert     sum_squares([0,-1,2,3,4]) == 47\nassert     sum_squares([-1,-2,-3,-4,-5]) == 385\nassert     sum_squares([]) == 0\nassert     sum_squares([3,4,5,6,7,8,9]) == 6895\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_squares([2, 3, 4]) == 38\nassert     sum_squares([-3, -2, -1, 0, 1, 2, 3]) == 0\nassert     sum_squares([0]) == 0\n\ndef has_palindromic(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return True if the given list contains\n    a palindromic element.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sum_squares([5, 15, 10, 20, 8, 7]) == 679\nassert     sum_squares([3, 4, 5, 6, 7, 8]) == 65\nassert     sum_squares([]) == 0\nassert     sum_squares([3, 2, 1]) == 10\nassert     sum_squares([2, 3, 4, 5]) == 25\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 4+9+16+25\nassert     sum_squares([]) == 0\nassert     sum_squares([1, -2, 3, -4, 5]) == 1+4+9+16+25\nassert     sum_squares([1.1, -2.2, 3.3, -4.4, 5.5]) == 1.1+4.4+9.9+16.4+25.5\nassert     sum_squares([1.1, -2.2, 3.3, -4.4, 5.5]) == 1.1+4.4+9.9+16.4+25.5\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\"string\") == False, \"incorrect\"\nassert     check_if_last_char_is_a_letter(\" \") == False, \"incorrect\"\nassert     check_if_last_char_is_a_letter(\"hello world\") == True, \"incorrect\"\nassert     check_if_last_char_is_a_letter(\"h\") == False, \"incorrect\"\nassert     check_if_last_char_is_a_letter(\"A\") == False, \"incorrect\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == False, \"Last char is alpha\"\nassert     check_if_last_char_is_a_letter('abc abc') == False, \"Last char is alpha\"\nassert     check_if_last_char_is_a_letter('ab abc') == False, \"Last char is alpha\"\nassert     check_if_last_char_is_a_letter('ab abc ab') == False, \"Last char is alpha\"\nassert     check_if_last_char_is_a_letter('abc ab abc ab') == True, \"Last char is alpha\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(txt=\"Reverse this string\") == True\nassert     check_if_last_char_is_a_letter(txt=\"String. Reverse this.\") == False\nassert     check_if_last_char_is_a_letter(txt=\"String. Reverse this.\") == False\n\nprint('check_if_last_char_is_a_letter is OK')\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True, \"Wrong result for 'a'\"\nassert     check_if_last_char_is_a_letter('internationalization') == False, \"Wrong result for 'internationalization'\"\nassert     check_if_last_char_is_a_letter('characters') == False, \"Wrong result for 'characters'\"\nassert     check_if_last_char_is_a_letter(' ') == False, \"Wrong result for''\"\nassert     check_if_last_char_is_a_letter('A') == True, \"Wrong result for 'A'\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello World\") == False\nassert     check_if_last_char_is_a_letter(\"A B 123\") == True\nassert     check_if_last_char_is_a_letter(\"A B 1234\") == False\nassert     check_if_last_char_is_a_letter(\"My last char is Z\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"I like Python!\") == False, \"Wrong result: check_if_last_char_is_a_letter('I like Python!)'\"\nassert     check_if_last_char_is_a_letter(\"I like Python.\") == True, \"Wrong result: check_if_last_char_is_a_letter('I like Python.')\"\nassert     check_if_last_char_is_a_letter(\"I like Pytho!n\") == False, \"Wrong result: check_if_last_char_is_a_letter('I like Pytho!n')\"\nassert     check_if_last_char_is_a_letter(\"I like pthon.\") == True, \"Wrong result: check_if_last_char_is_a_letter('I like pthon.')\"\n\nprint(\"Test passed successfully\")\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter(\"string\") == True, \"Last character is a letter\"\nassert     check_if_last_char_is_a_letter(\"strint\") == False, \"Last character is a letter\"\nassert     check_if_last_char_is_a_letter(\"hello\") == True, \"Last character is a letter\"\nassert     check_if_last_char_is_a_letter(\"word\") == False, \"Last character is a letter\"\nassert     check_if_last_char_is_a_letter(\"word \") == False, \"Last character is a letter\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"sally has a cat\") == True\nassert     check_if_last_char_is_a_letter(\"sally has\") == True\nassert     check_if_last_char_is_a_letter(\"sally has sally\") == True\nassert     check_if_last_char_is_a_letter(\"sally has Sally\") == False\nassert     check_if_last_char_is_a_letter(\"sally-sally has Sally\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"a sentence\") == False, \"Error\"\nassert     check_if_last_char_is_a_letter(\"a word\") == True, \"Error\"\nassert     check_if_last_char_is_a_letter(\"apple\") == True, \"Error\"\nassert     check_if_last_char_is_a_letter(\"hello\") == False, \"Error\"\nassert     check_if_last_char_is_a_letter(\"\") == False, \"Error\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('Hello world!') == False, \"Wrong result: check_if_last_char_is_a_letter('Hello world!)'\"\nassert check_if_last_char_is_a_letter('apple') == True, \"Wrong result: check_if_last_char_is_a_letter('apple')\"\nassert check_if_last_char_is_a_letter('1a2B3c4d!') == False, \"Wrong result: check_if_last_char_is_a_letter('1a2B3c4d!)'\"\n\ndef check_if_only_alphabetical_characters(txt):\n    '''\n    Create a function that returns True if a given string is\n    only a sequence of alphabetical characters and False otherwise.\n    Note: \"alphabetical\" is defined by all the characters that\n    have the Unicode value between the values: 32 and 122\n    inclusive.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1, 'Error'\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 8, 'Error'\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 8]) == 8, 'Error'\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1, 'Error'\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 8, 9]) == -1, 'Error'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     can_arrange([10, 4, 3, 2, 8, 1]) == 3\nassert     can_arrange([1, 2, 4, 8, 16, 32, 64, 128, 256]) == 8\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([0, 1, 2, 3, 4]) == -1\nassert     can_arrange([]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     can_arrange([5, 4, 3]) == 1\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([1, 2, 3, 4]) == 2\nassert     can_arrange([2, 3, 4]) == 2\nassert     can_arrange([1, 2, 3, 4, 6]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 3\nassert     can_arrange([5, 4, 3, 2, 1]) == -1\nassert     can_arrange([5, 4, 1, 2, 3]) == 3\n\ndef can_arrange_all(arr):\n    \"\"\"Create a function which returns a list of indices, where each index is the\n    largest index of an element which is not greater than or equal to the element\n    immediately preceding it. If no such element exists then return -1. The given\n    array will not contain duplicate values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     can_arrange([1, 2, 3]) == 2\nassert     can_arrange([3, 2, 1]) == -1\nassert     can_arrange([1, 2, 3, 4]) == 3\nassert     can_arrange([1, 2, 3, 4, 5]) == 4\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 4, 'wrong result'\nassert     can_arrange([5, 4, 3, 2, 1]) == -1, 'wrong result'\nassert     can_arrange([1, 2, 2, 3, 4]) == 2, 'wrong result'\nassert     can_arrange([1, 1, 1, 1]) == -1, 'wrong result'\nassert     can_arrange([1, 3, 5, 7, 9]) == 3, 'wrong result'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     can_arrange([1,2,3,3,4]) == 3\nassert     can_arrange([4,5,6,7]) == -1\nassert     can_arrange([1,2,3,4]) == -1\nassert     can_arrange([1,2,3,4,5]) == -1\nassert     can_arrange([1,2,3,4,5,6]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     can_arrange([3, 4, 1, 6]) == 3\nassert     can_arrange([1, 1, 1]) == -1\nassert     can_arrange([1, 1, 1, 1]) == -1\nassert     can_arrange([1, 1, 1, 2]) == 2\nassert     can_arrange([1, 1, 1, 2, 2]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     can_arrange([1, 3, 4, 5]) == 3\nassert     can_arrange([4, 2, 1, 3]) == -1\nassert     can_arrange([2, 3, 4, 1]) == -1\nassert     can_arrange([1, 2, 3, 4]) == -1\nassert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (None, None)\nassert     largest_smallest_integers([-1, -2, -3, -4]) == (-4, 1)\nassert     largest_smallest_integers([1, 2, 3, -4]) == (3, -4)\n\nprint(\"All tests passed.\""
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (largest_smallest_integers([-3, -2, -1, 0, 1, 1, 2, 3]) == (-1, 1))\nassert     (largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3]) == (-5, 1))\nassert     (largest_smallest_integers([-2, -3, 0, 1, 2, 3, 3, 4, -5]) == (-2, 3))\nassert     (largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (None, 11))\nassert     (largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11]) == (None, -10))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([1, 3, 4, -1, -5]) == (None, 1)\nassert largest_smallest_integers([1, 3, 4, -1, -5, -5]) == (-1, 5)\nassert largest_smallest_integers([-1, -1, -5, -5]) == (-1, -1)\nassert largest_smallest_integers([0, 0, -1, -5]) == (-1, 0)\nprint('Correct!')"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([3, 4, 1, 2]) == (None, 1)\nassert     largest_smallest_integers([3, -4, 1, 2]) == (-4, 1)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (-4, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4]) == (-4, 1)\nassert     largest_smallest_integers([5, 6, 7, 8]) == (None, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-5, -1, -7, -3, -4]) == (-1, 4)\nassert     largest_smallest_integers([-7, -3, -4, 5, -1]) == (-1, 5)\nassert     largest_smallest_integers([-1, -3, -4, 5, -7]) == (-7, 1)\nassert     largest_smallest_integers([-7, -1, -3, -4, 5]) == (-7, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([-12, -10, -1, 0, 2, 3, 3, 4, 5]) == (None, 2)\nassert     largest_smallest_integers([-12, -10, -1, 0, 2, 3, 3, 4, 5, -5]) == (-5, 2)\nassert     largest_smallest_integers([0, 2, 3, 3, 4, 5]) == (0, 1)\nassert     largest_smallest_integers([0, 2, 3, 3, 4, 5, -5]) == (-5, 1)\nassert     largest_smallest_integers([-12, -10, -1, 0, 2, 3, 3, 4, 5, 5]) == (-1, 5)\nprint(\"Exercise 42 is correct.\")\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(largest_smallest_integers([1, 2, 3, 4, -10, -20, -3]))\nassert \nprint(largest_smallest_integers([0, 0, 0, 0, 0]))\nassert\nprint(largest_smallest_integers([-1, -2, -3]))\nassert\nprint(largest_smallest_integers([]))"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-3, -5, -7, -1, 0, 3, 5, 7, 1, 9]) == (-1, 9)\nassert     largest_smallest_integers([-3, -5, -7, -1, 0, 3, 5, 7, 1, -9]) == (-9, 7)\nassert     largest_smallest_integers([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, 0)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-10, -2, -9, 0, 1, 2, 3]) == (None, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (1, 5)\nassert     largest_smallest_integers([2, 3, 4, 5, 6]) == (2, 6)\nassert     largest_smallest_integers([2, 3, 4, -5, 6]) == (-5, 6)\nassert     largest_smallest_integers([2, -3, 4, -5, 6]) == (-5, 6)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     compare_one(1, 1) == None\nassert     compare_one(1.5, 1.5) == None\nassert     compare_one(1.5, 1) == 1\nassert     compare_one('1.5', 1) == 1\nassert     compare_one('1', 1) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     compare_one(2, 2.0)     == 2.0\nassert     compare_one(0, -0.0)     == -0.0\nassert     compare_one('1', '1.0') == 1.0\nassert     compare_one('1', '1') == '1'\nassert     compare_one('1', '2') == '2'\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     compare_one(5, 5) == None\nassert     compare_one(5, 6) == 6\nassert     compare_one(5, '5') == 6\nassert     compare_one(5.5, 5) == 5.5\nassert     compare_one(5.5, 6) == 6\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef compare(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     compare_one(1, 1.0) == 1.0\nassert     compare_one(1.0, 1) == 1.0\nassert     compare_one('1', 1) == None\nassert     compare_one(1, '1') == None\nassert     compare_one('1', '1') == '1'\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (compare_one(5, 6) == 6)\nassert     (compare_one(4, 5.4) == 5.4)\nassert     (compare_one('5.4', '5') == 5.4)\nassert     (compare_one('5', 5) == 5)\nassert     (compare_one(5, 5) == 5)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     compare_one(1,2) == 2, \"Test Fail\"\nassert     compare_one(2.3,2) == 2.3, \"Test Fail\"\nassert     compare_one(\"1.3\", \"1.2\") == 1.3, \"Test Fail\"\nassert     compare_one(\"1.2\", \"1.2\") == 1.2, \"Test Fail\"\nassert     compare_one(1.2, 2.3) == 2.3, \"Test Fail\"\nprint(\"compare_one(1, 2) returns 2: Passed\")\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     compare_one(5, 6) == 6, \"Wrong output!\"\nassert     compare_one(5, 5.6) == 5.6, \"Wrong output!\"\nassert     compare_one(5, \"5.7\") == \"5.7\", \"Wrong output!\"\nassert     compare_one(5.6, 5) == 5.6, \"Wrong output!\"\nassert     compare_one(\"5.6\", 5.6) == \"5.6\", \"Wrong output!\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare_one(0,0) == None, \"0,0\"\nassert     compare_one(1,0) == None, \"1,0\"\nassert     compare_one(1.1,0) == None, \"1.1,0\"\nassert     compare_one(0,1.1) == None, \"0,1.1\"\nassert     compare_one(1,1) == 1, \"1,1\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(100) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(42) == False\nassert     is_equal_to_sum_even(44) == True\nassert     is_equal_to_sum_even(46) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(8) == False\nassert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(200) == True\nassert     is_equal_to_sum_even(24) == False\nassert     is_equal_to_sum_even(14) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(10) == False, \"TEST FAILED: check is_equal_to_sum_even\"\nassert     is_equal_to_sum_even(10) == False, \"TEST FAILED: check is_equal_to_sum_even\"\nassert     is_equal_to_sum_even(16) == True, \"TEST FAILED: check is_equal_to_sum_even\"\nassert     is_equal_to_sum_even(28) == True, \"TEST FAILED: check is_equal_to_sum_even\"\nassert     is_equal_to_sum_even(10) == False, \"TEST FAILED: check is_equal_to_sum_even\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(16) == False\nassert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(6) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nprint(\"is_equal_to_sum_even()\")\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(12) == True, '12 is divisible by 3 and 4'\nassert     is_equal_to_sum_even(13) == False, '13 is not divisible by 3 or 4'\nassert     is_equal_to_sum_even(24) == True, '24 is divisible by 6 and 8'\nassert     is_equal_to_sum_even(25) == False, '25 is not divisible by 6 or 8'\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert ____.____, 'O resultado est\u00e1 incorreto'\nprint('Os resultados est\u00e3o corretos!')"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef sum_of_positive_integers(n):\n    \"\"\"The sum of positive integers from 1 to n is calculated using the following\n    formula:\n    sum_of_positive_integers(n) = n(n+1)/2\n\n    The function will receive an integer as input and should return the sum of\n    all positive integers up to and including that number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert special_factorial(1) == 1\nassert \nassert special_factorial(2) == 2\nassert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nprint(\"{} factorial is {}.\".format(3, special_factorial(3)))\n\nassert \n\nprint(\"{} factorial is {}.\".format(7, special_factorial(7)))\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"hello world\") == \"hello_world\", \"fix_spaces returns incorrect output\"\nassert     fix_spaces(\"hello  world\") == \"hello_-world\", \"fix_spaces returns incorrect output\"\nassert     fix_spaces(\"hello   world\") == \"hello_-world\", \"fix_spaces returns incorrect output\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fix_spaces(' xyz  ') == 'x___y__z', 'x is not y'\nassert     fix_spaces(' xyz  ') == 'x___y__z', 'x is not y'\nassert     fix_spaces(' x    y  z') == 'x-y-z', 'x is not -'\nassert     fix_spaces('x    y   z') == 'x-y-z', 'x is not -'\n\ndef get_player_name(player):\n    \"\"\"\n    Given the player with id player,\n    return the player's name\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\")\n\nassert \n\ndef fix_spaces(text):\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef fix_spaces_ex(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n\ndef fix_spaces_ex2(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n\ndef split_and_join(line):\n    \"\"\"\n    Given a string, return a new string where the string \n    has been split across the spaces, and each word is \n    replaced with its length. \n    \"\"\"\n    pass\n\ndef split_and_join_ex(line):\n    \"\"\"\n    Given a string, return a new string where the string \n    has been split across the spaces, and each word is \n    replaced with its length. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\"\"\"\nWrite a function:\n\ndef solution(S)\n\nthat, given a string S of length at most 1000 characters, \nreturns the string with all lowercase letters from string S \nreplaced by numbers from the English alphabet, \nso that each number is followed by its corresponding letter (for example, 1 would become \"a\", 2 would become \"b\" etc.). \nIf a string is empty or contains only spaces, then it should become \"0\".\n\nFor example, given string S = \"a1c1e1\" the function should return \"0a1b1c1e1\".\nGiven string S = \"222222222222\" the function should return \"2-2-2-2-2\".\n\"\"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nprint(fix_spaces('This is a test  of fix_spaces'))\nassert \n\nassert\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fix_spaces('   bob   ') == 'bob','should remove 1 space'\nassert     fix_spaces('     bob   ') == 'bob','should remove 1 space'\nassert     fix_spaces('hello  world') == 'hello-world','should replace 2 spaces'\nassert     fix_spaces('     hello world     ') == 'hello-world','should replace 2 spaces'\nassert     fix_spaces('  hello   world   ') == 'hello-world','should replace 2 spaces'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     file_name_check('0-010_example.txt') == 'No', \\\n        \"file_name_check('0-010_example.txt') should return 'No'\"\nassert     file_name_check('some.exe') == 'Yes', \\\n        \"file_name_check('some.exe') should return 'Yes'\"\nassert     file_name_check('some.dll') == 'No', \\\n        \"file_name_check('some.dll') should return 'No'\"\nassert     file_name_check('some.xz') == 'No', \\\n        \"file_name_check('some.xz') should return 'No'\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     file_name_check('a.txt') == 'Yes'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.dll') == 'No'\nassert     file_name_check('abcdefg.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     file_name_check(\"task1.py\") == \"Yes\"\nassert file_name_check(\"task1\") == \"No\"\nassert file_name_check(\"task1.\") == \"No\"\nassert file_name_check(\"task1.txt\") == \"Yes\"\nassert file_name_check(\"task1.exe\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     file_name_check('1.txt') == 'No', 'Incorrect output'\nassert     file_name_check('1.txt.exe') == 'Yes', 'Incorrect output'\nassert     file_name_check('a.exe') == 'No', 'Incorrect output'\nassert     file_name_check('a.txt.exe') == 'No', 'Incorrect output'\nassert     file_name_check('a..txt') == 'No', 'Incorrect output'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     file_name_check('1.txt') == 'Yes'\nassert     file_name_check('1.TXT') == 'Yes'\nassert     file_name_check('file.TXT') == 'Yes'\nassert     file_name_check('file.exe') == 'Yes'\nassert     file_name_check('file.exe.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     file_name_check(\"abc.txt\") == \"Yes\", \"Wrong answer\"\nassert     file_name_check(\"abcdefghijklmnop.abc\") == \"Yes\", \"Wrong answer\"\nassert     file_name_check(\"abcdefghijklmnop.txt\") == \"Yes\", \"Wrong answer\"\nassert     file_name_check(\"abcdefghijklmnop.exe\") == \"Yes\", \"Wrong answer\"\nassert     file_name_check(\"abcdefghijklmnop.dll\") == \"Yes\", \"Wrong answer\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     file_name_check(\"1aa.txt\") == \"Yes\"\nassert     file_name_check(\"a.exe\") == \"Yes\"\nassert     file_name_check(\"a.dll\") == \"Yes\"\nassert     file_name_check(\"a.txt\") == \"No\"\nassert     file_name_check(\"ab.txt\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     file_name_check('1.txt') == 'No'\nassert     file_name_check('123.dll') == 'No'\nassert     file_name_check('somefile.txt') == 'Yes'\nassert     file_name_check('some.exe') == 'Yes'\nassert     file_name_check('some.chocolate') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     file_name_check('2.txt') == 'No'\nassert     file_name_check('2.txt.') == 'No'\nassert     file_name_check('2.txt.txt') == 'No'\nassert     file_name_check('2.txt.exe') == 'No'\nassert     file_name_check('2.txt.dll') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_squares([3, 4, 5, 2, 9, 8, 10, 11]) == 77\nassert     sum_squares([1, 2, 3, 4, 5]) == 30\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 1214\nassert     sum_squares([-1, -2, -3, -4, -5]) == -15\nassert     sum_squares([0]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5, 6]) == 49\nassert     sum_squares([0, 0, 0]) == 0\nassert     sum_squares([0, 1, 2, 3, 4, 5, 6, 7]) == 84\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 676\nassert     sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 665\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([0, 3, 4, 5]) == 35\nassert     sum_squares([3, 5, 6, 8]) == 66\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5050\nassert     sum_squares([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5050\n\nprint(sum_squares([0, 3, 4, 5]))\nprint(sum_squares([3, 5, 6, 8]))\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sum_squares([-1, 2, 3, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(sum_squares([0, 1, 2, 3, 4, 5]))"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_in_sentence('') == ''\nassert     words_in_sentence('Hello world!') == 'Hello world'\nassert     words_in_sentence('Hello world! ') == 'Hello world'\nassert     words_in_sentence('Hello world! You') == 'Hello world You'\nassert     words_in_sentence('Hello world! Hello!') == 'Hello world Hello'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"world war ii\") == \"world war ii\", \"world war ii\"\nassert     words_in_sentence(\"my birthday is on may 12th\") == \"my birthday is on may 12th\", \"my birthday is on may 12th\"\nassert     words_in_sentence(\"hello there i am here\") == \"hello there i am here\", \"hello there i am here\"\nassert     words_in_sentence(\"world war i\") == \"world war i\", \"world war i\"\nassert     words_in_sentence(\"\") == \"\", \"empty string\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"Prime numbers are numbers that are only evenly divisible by itself and 1. They are used in number theory, combinatorics, cryptography, algebra, geometry, statistics, and networks.\") == \"Prime numbers are numbers that are only evenly divisible by itself and 1. They are used in number theory, combinatorics, cryptography, algebra, geometry, statistics, and networks.\"\nassert     words_in_sentence(\"what is the temperature in the park?\") == \"what is the temperature in the park?\"\nassert     words_in_sentence(\"what is the temperature in the park?\") == \"what is the temperature in the park?\"\nassert     words_in_sentence(\"what is the temperature in the park?\") == \"what is the temperature in the park?\"\nassert     words_in_sentence(\"what is the temperature in the park?\") == \"what is the temperature in the park?\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"We are happy\") == \"Happy\"\nassert     words_in_sentence(\"A friend in need is a friend indeed\") == \"Friend indeed\"\nassert     words_in_sentence(\"A friend in need is a friend indeed. I say this only once.\") == \"Friend indeed. Once.\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"One two  thrree\") == \"One two thrree\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"I really enjoy these books\") == \"books\", \"error\"\nassert     words_in_sentence(\"I really enjoy these books and these books are very interesting\") == \"books\", \"error\"\nassert     words_in_sentence(\"I really enjoy these books and these books are very interesting and also very enjoyable\") == \"books\", \"error\"\nassert     words_in_sentence(\"I really enjoy these books and these books are very interesting and also very entertaining\") == \"books\", \"error\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_in_sentence('a b c d') == 'a b c'\nassert     words_in_sentence('a a a a') == 'a'\nassert     words_in_sentence('c c c c') == 'c c c c'\nassert     words_in_sentence('1 2 3 4') == ''\nassert     words_in_sentence('z2 z z') == 'z z"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"hello world\") == \"hello world\"\nassert     words_in_sentence(\"hello world hi\") == \"hello\"\nassert     words_in_sentence(\"hello world hi\") == \"world\"\nassert     words_in_sentence(\"hello world hi im here\") == \"hello world\"\nassert     words_in_sentence(\"hello world hi im here\") == \"world\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_in_sentence('') == ''\nassert     words_in_sentence('hello') == ''\nassert     words_in_sentence('hello there') == ''\nassert     words_in_sentence('hello there cruel world') == ''\nassert     words_in_sentence('hello there cruel world ') == ''\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\n        \"naveen went to school to read a book\",\n    ) == \"naveen went to school to read a book\"\nassert     words_in_sentence(\n        \"book to read a book\",\n    ) == \"book to read\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     simplify('2/4', '3/4') == False\nassert     simplify('2/4', '3/4') == False\nassert     simplify('2/4', '2/3') == True\nassert     simplify('2/4', '2/5') == True\nassert     simplify('2/4', '1/4') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     simplify('1/3', '4') == False, 'Error'\nassert     simplify('1/3', '6') == True, 'Error'\nassert     simplify('1/3', '0') == False, 'Error'\nassert     simplify('3/4', '1') == False, 'Error'\nassert     simplify('3/4', '2') == True, 'Error'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     simplify('1/2', '1/4') == False\nassert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '3/4') == True\nassert     simplify('1/2', '3/4') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     simplify(\"3/4\", \"1/2\") == False\nassert     simplify(\"7/6\", \"3/2\") == True\nassert     simplify(\"5/6\", \"1/2\") == False\n\nprint(\"All test cases passed!\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     simplify(\"1/2\", \"2\") == False\nassert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/4\") == True\n\nassert     simplify(\"1/2\", \"1/3\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     simplify('4/5', '2/5') == '2/5'\nassert     simplify('4/5', '3/5') == '1/5'\nassert     simplify('4/5', '1/5') == '1/5'\nassert     simplify('4/5', '4/5') == '1/1'\nassert     simplify('5/4', '2/4') == '5/4'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1, 2, 3]) == [1, 3, 2]\nassert     order_by_points([21, 22, 23]) == [2, 3, 21]\nassert     order_by_points([1, 5, 9, 7, 3, 2]) == [2, 1, 7, 3, 9, 5]\nassert     order_by_points([10, 100, 1000, 0]) == [0, 10, 100, 1000]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     order_by_points([5, 2, 0, 3, 7]) == [0, 2, 5, 3, 7]\nassert     order_by_points([0, 2, 3, 4, 5]) == [0, 2, 3, 4, 5]\nassert     order_by_points([7, 2, 0, 3, 9]) == [0, 2, 7, 3, 9]\nassert     order_by_points([0, 9, 3, 2, 1]) == [0, 9, 3, 2, 1]\nassert     order_by_points([0, 2, 3, 9, 5]) == [0, 2, 3, 9, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef order_by_points2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef test_order_by_points():\n    \"\"\"\n    >>> test_order_by_points()\n    OK\n    \"\"\"\n    assert order_by_points([0, 5, 17, 34, 12, 22]) == [0, 12, 17, 22, 34, 5]\n    assert order_by_points([]) == []\n\n\nif __name__ == \"__main__\":\n    order_by_points([0, 5, 17, 34, 12, 22])\n    order_by_points([0])\n    order_by_points([])\n    print(\"Everything ok\")"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # add any code that will be used to test your solution here\n    pas"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \\\n        == [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) \\\n        == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) \\\n        == [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     order_by_points([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) \\\n        == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) \\\n        == [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     order_by_points([65, 15, 21]) == [15, 21, 65]\nassert     order_by_points([55, 32, 4]) == [4, 32, 55]\nassert     order_by_points([87, 96, 41]) == [41, 96, 87]\nassert     order_by_points([0, 98, 8, 22]) == [8, 22, 0, 98]\nprint('All tests passed.')\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     specialFilter([23, 36, 14, 7, 9, 2]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 2, 5]) == 2\nassert     specialFilter([1, 3, 5, 7, 9, 2, 7]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 2, 7, 11, 11, 15, 17, 19]) == 4\nassert     specialFilter([1, 3, 5, 7, 9, 2, 7, 13, 13, 11, 15, 17, 19]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     specialFilter([17, 9, 5, 2, 3]) == 2\nassert     specialFilter([5, 10, 3, 2, 5]) == 3\nassert     specialFilter([2, 3, 4, 5, 6, 7]) == 4\nassert     specialFilter([3, 2, 5, 7, 8]) == 2\nassert     specialFilter([11, 15, 16, 17, 19, 20, 21]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6,'specialFilter incorrect'\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10,'specialFilter incorrect'\nassert     specialFilter([1, 3, 5, 7, 9]) == 5,'specialFilter incorrect'\nassert     specialFilter([1, 3, 5, 7, 11, 13, 15, 17, 19, 21]) == 8,'specialFilter incorrect'\nassert     specialFilter([1, 3, 5, 7, 11, 13, 15, 17, 19, 21]) == 8,'specialFilter incorrect'\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     specialFilter([1,2,3,4,5,6]) == 4, \"Error\"\nassert     specialFilter([5,12,12,6,6]) == 2, \"Error\"\nassert     specialFilter([1,5,7,9,10,11]) == 5, \"Error\"\nassert     specialFilter([1,2,3,4,5,6]) == 4, \"Error\"\nassert     specialFilter([1,2,3,4,5,7]) == 3, \"Error\"\nprint(\"Exercise 3 is correct.\")\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5]) == 3\nassert     specialFilter([1, 2, 3, 5, 7]) == 3\nassert     specialFilter([1, 2, 3, 5, 9]) == 3\nassert     specialFilter([1, 2, 3, 7, 9]) == 3\nassert     specialFilter([1, 2, 3, 7, 19]) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_max_triples(3) == 2\nassert     get_max_triples(10) == 4\nassert     get_max_triples(100) == 37\nassert     get_max_triples(1000) == 1623\nassert     get_max_triples(10000) == 4533\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_max_triples(5) == 6\nassert     get_max_triples(6) == 7\nassert     get_max_triples(7) == 8\nassert     get_max_triples(8) == 9\nassert     get_max_triples(9) == 10\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 4\nassert     get_max_triples(5) == 6\nassert     get_max_triples(6) == 8\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_max_triples(1) == 0, 'test failure'\nassert     get_max_triples(2) == 1, 'test failure'\nassert     get_max_triples(3) == 1, 'test failure'\nassert     get_max_triples(4) == 0, 'test failure'\nassert     get_max_triples(5) == 1, 'test failure'\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 5\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus',)\nassert     bf('Mercury', 'Earth') == ('Venus', 'Earth')\nassert     bf('Earth', 'Jupiter') == ('Earth', 'Jupiter')\nassert     bf('Earth', 'Neptune') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     bf('Neptune', 'Earth') == ('Earth', 'Neptune'), 'incorrect'\nassert     bf('Jupiter', 'Neptune') == (), 'incorrect'\nassert     bf('Venus', 'Mercury') == ('Mercury', 'Venus'), 'incorrect'\nassert     bf('Earth', 'Mercury') == ('Mercury', 'Earth'), 'incorrect'\nassert     bf('Mercury', 'Venus') == ('Venus', 'Mercury'), 'incorrect'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     bf('Earth','Mars') == ('Mars',), 'bf returns Mars!'\nassert     bf('Earth','Jupiter') == ('Jupiter',), 'bf returns Jupiter!'\nassert     bf('Earth','Uranus') == ('Uranus',), 'bf returns Uranus!'\nassert     bf('Earth','Venus') == ('Venus',), 'bf returns Venus!'\nassert     bf('Earth','Neptune') == ('Neptune',), 'bf returns Neptune!'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Uranus') ==     (('Venus', 'Earth', 'Mars'), \n                                        ('Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     bf('Earth', 'Neptune') ==     (('Jupiter', 'Saturn', 'Uranus', 'Neptune'),)\nassert     bf('Earth', 'Venus') ==     ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Mars') == ('Mercury', 'Venus')\nassert     bf('Mars', 'Jupiter') == ('Mars', 'Mercury', 'The Sun')\nassert     bf('Earth', 'The Moon') == ('Earth', 'The Moon', 'Mercury', 'Venus')\nassert     bf('The Moon', 'Earth') == ('The Moon', 'Earth', 'Mercury', 'Venus')\nassert     bf('Neptune', 'Earth') == ('Neptune', 'The Moon', 'Mercury', 'Venus')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Uranus') == ('Uranus', 'Venus')\nassert     bf('Earth', 'Uranus') == ('Uranus', 'Venus', 'Earth')\nassert     bf('Earth', 'Mercury') == ('Mercury',)\nassert     bf('Mercury', 'Neptune') == ('Neptune', 'Venus')\nassert     bf('Earth', 'Earth') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Jupiter', 'Neptune')\nassert     bf('Earth', 'Jupiter') == ('Mars', 'Venus')\nassert     bf('Mercury', 'Neptune') == ('Venus', 'Earth')\nassert     bf('Mercury', 'Venus') == ('Earth',)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     bf('Earth', 'Mars') == ('Venus', 'Jupiter', 'Uranus', 'Neptune'), 'incorrect'\nassert     bf('Earth', 'Mercury') == ('Venus', 'Jupiter', 'Uranus', 'Neptune'), 'incorrect'\nassert     bf('Earth', 'Uranus') == ('Venus', 'Jupiter', 'Mars', 'Neptune'), 'incorrect'\nassert     bf('Earth', 'Neptune') == ('Venus', 'Jupiter', 'Mars', 'Uranus'), 'incorrect'\nassert     bf('Mercury', 'Jupiter') == ('Venus', 'Earth', 'Mars', 'Uranus', 'Neptune'), 'incorrect'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sorted_list_sum([\"python\", \"is\", \"a\", \"programming\", \"language\"]) \\\n        == ['a', 'is', 'programming']\nassert sorted_list_sum([\"python\", \"is\", \"a\", \"programming\", \"language\", \"is\"]) \\\n        == ['a', 'is', 'is']\nassert sorted_list_sum([\"python\", \"is\", \"a\", \"programming\", \"language\", \"is\", \"python\"]) \\\n        == ['is', 'is', 'programming']\nassert sorted_list_sum([\"python\", \"is\", \"a\", \"programming\", \"language\", \"is\", \"python\", \"python\"]) \\\n        == ['a', 'is', 'is', 'programming']\nassert sorted_list_sum([\"python\", \"is\", \"a\", \"programming\", \"language\", \"is\", \"python\", \"python\", \"python\"]) \\\n        == ['a', 'is', 'is', 'is', 'programming']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\"abc\", \"def\", \"ghi\", \"abcdefg\"]) == \\\n        [\"abcdefg\"]\nassert     sorted_list_sum([\"abc\", \"def\", \"abcdefg\"]) == \\\n        [\"abc\", \"def\", \"abcdefg\"]\nassert     sorted_list_sum([\"abc\", \"def\", \"abcdefg\", \"ab\"]) == \\\n        [\"abc\", \"def\", \"abcdefg\", \"ab\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == \\\n        [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]) == \\\n        [\"a\", \"ab\", \"abc\", \"abcd\", \"abcdef\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted_list_sum([\"bitcoin\", \"btc\", \"apple\", \"bitcoin\", \"apple\", \"apple\"]) == ['apple', 'apple', 'bitcoin']\nassert     sorted_list_sum([\"bitcoin\", \"btc\", \"apple\", \"bitcoin\", \"apple\", \"apple\", \"bitcoin\", \"btc\"]) == ['apple', 'apple', 'bitcoin', 'bitcoin']\n\ndef is_palindrome(s):\n    \"\"\"Write a function that accepts a string and returns True\n    if the string is a palindrome and False otherwise.\n    Assume that only letters are allowed and the string is all lower case.\n    \"\"\"\n    pass\n\ndef is_palindrome(s):\n    \"\"\"Write a function that accepts a string and returns True\n    if the string is a palindrome and False otherwise.\n    Assume that only letters are allowed and the string is all lower case.\n    \"\"\"\n    return s == s[::-1]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([\"abc\", \"defg\", \"agh\", \"akl\", \"\", \"cba\"]) == \\\n        [\"cba\", \"abc\", \"defg\", \"agh\", \"\", \"akl\"], \\\n        \"Should be ['cba', 'abc', 'defg', 'agh', '', 'akl']\"\nassert     sorted_list_sum([\"abc\", \"defg\", \"agh\", \"akl\", \"\"]) == \\\n        [\"abc\", \"defg\", \"agh\", \"akl\", \"\"], \\\n        \"Should be ['abc', 'defg', 'agh', 'akl', '']\"\nassert     sorted_list_sum([\"abc\", \"defg\", \"agh\", \"akl\"]) == \\\n        [\"abc\", \"defg\", \"agh\", \"akl\"], \\\n        \"Should be ['abc', 'defg', 'agh', 'akl']\"\nassert     sorted_list_sum([\"abc\", \"defg\", \"agh\", \"akl\", \"\", \"\"]) == \\\n        [\"abc\", \"defg\", \"agh\", \"akl\", \"\", \"\"], \\\n        \"Should be ['abc', 'defg', 'agh', 'akl', '', '']\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\"Hello\", \"Goodbye\", \"Adios\"]) == [\"Hello\", \"Goodbye\"], 'incorrect'\nassert     sorted_list_sum([\"Hello\", \"Goodbye\", \"Adios\", \"xyz\", \"elk\", \"zara\", \"lolo\"]) == [\"Hello\", \"Goodbye\", \"Adios\", \"lolo\"], 'incorrect'\nassert     sorted_list_sum([\"Hello\", \"xyz\", \"Goodbye\", \"Adios\", \"elk\", \"zara\", \"lolo\"]) == [\"Hello\", \"Goodbye\", \"Adios\", \"lolo\"], 'incorrect'\nassert     sorted_list_sum([]) == [], 'incorrect'\nassert     sorted_list_sum([\"zara\", \"lolo\", \"Goodbye\", \"Adios\"]) == [\"Goodbye\", \"Adios\", \"zara\", \"lolo\"], 'incorrect'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sorted_list_sum([\"hello\", \"apple\", \"everybody\", \"irish\", \"car\", \"dog\", \"cat\"]) ==\\\n            [\"apple\", \"car\", \"everybody\", \"hello\", \"irish\", \"dog\", \"cat\"]\nassert     sorted_list_sum([\"hello\", \"apple\", \"everybody\", \"irish\", \"car\", \"dog\", \"cat\", \"odd\"]) ==\\\n            [\"apple\", \"car\", \"everybody\", \"hello\", \"irish\", \"odd\", \"dog\", \"cat\"]\nassert     sorted_list_sum([\"hello\", \"apple\", \"everybody\", \"irish\", \"car\", \"odd\", \"dog\", \"cat\"]) ==\\\n            [\"apple\", \"car\", \"everybody\", \"hello\", \"irish\", \"odd\", \"dog\", \"cat\"]\nassert     sorted_list_sum([\"hello\", \"apple\", \"everybody\", \"irish\", \"car\", \"odd\", \"dog\"]) ==\\\n            [\"apple\", \"car\", \"everybody\", \"hello\", \"irish\", \"odd\", \"dog\"]\nassert     sorted_list_sum([\"hello\", \"apple\", \"everybody\", \"irish\", \"car\", \"odd\"]) ==\\\n            [\"apple\", \"car\", \"everybody\", \"hello\", \"irish\", \"odd\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"lily\", \"sam\", \"C\", \"Andy\", \"Eel\"]) == [\"C\", \"Andy\", \"Eel\"], \"Wrong output\"\nassert     sorted_list_sum([\"willy\", \"danny\", \"ann\", \"ed\", \"willy\", \"willy\"]) == [\"danny\", \"willy\"], \"Wrong output\"\nassert     sorted_list_sum([\"a\", \"to\", \"lly\", \"bella\"]) == [\"a\", \"bella\", \"to\"], \"Wrong output\"\nassert     sorted_list_sum([\"C\", \"aaaa\", \"Sam\", \"ae\", \"\", \"\", \"\", \"a\"]) == [\"C\", \"ae\", \"Sam\", \"a\"], \"Wrong output\"\nassert     sorted_list_sum([]) == [], \"Wrong output\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert xt(7, 10, 20) == 10\nassert xt(3, 5, 6) == 5\nassert xt(4, 10, 20) == 20\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     x_or_y(1, 1, 1) == 1\nassert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 2\nassert     x_or_y(5, 1, 1) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert xtx_or_y(1, 1, 1)\nassert xtx_or_y(10, 10, 2)\nassert xtx_or_y(7, 1, 2)\nassert not xtx_or_y(2, 1, 2)\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     x_or_y(0, 1, 2) == 1, \"Not implemented correctly\"\nassert     x_or_y(1, 1, 2) == 1, \"Not implemented correctly\"\nassert     x_or_y(2, 1, 2) == 2, \"Not implemented correctly\"\nassert     x_or_y(3, 1, 2) == 2, \"Not implemented correctly\"\n\n\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     x_or_y(1, 0, 1) == 0\nassert     x_or_y(2, 0, 1) == 1\nassert     x_or_y(3, 0, 1) == 1\nassert     x_or_y(4, 0, 1) == 0\nassert     x_or_y(5, 0, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     x_or_y(3, 1, 2) == 1\nassert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(7, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     x_or_y(5, 10, 5) == 10\nassert     x_or_y(3, 5, 3) == 5\nassert     x_or_y(7, 3, 7) == 3\nassert     x_or_y(23, 5, 7) == 7\nassert     x_or_y(0, 7, 9) == 9\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     double_the_difference([1, -5, 2, 3]) == 36\nassert     double_the_difference([2]) == 0\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1.2, 3.4, -5.6]) == 0\nassert     double_the_difference([1, 2, 3]) == 1\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     double_the_difference([3, 1, 4, 1, 5, 9]) == 125\nassert     double_the_difference([3, 1, 4, -1, 5, 9]) == 125\nassert     double_the_difference([3, 1, 4, -1, 5, 9, 2]) == 153\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 8\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, -3, -5, -9, -8]) == 0\nassert     double_the_difference([1, 2, 3, 4]) == 8\nassert     double_the_difference([1, 2, 3, 4, 5]) == 4\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5])     == 58\nassert     double_the_difference([1, 2, 3, 4, 5, -7, 10, -1])     == 140\nassert     double_the_difference([0, 1, 2, 3, 4, 5])     == 0\nassert     double_the_difference([-1, 2, 3, 4, 5, -7, 10, -1])     == 40\nassert     double_the_difference([])     == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \ndouble_the_difference([1,2,3]) == 0\nassert double_the_difference([1,2,3,4,5]) == 17\nassert double_the_difference([0,2,3]) == 8\nassert double_the_difference([]) == 0\nassert double_the_difference([1,3,5,7,9]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 48\nassert     double_the_difference([0, 2, 3, 4]) == 16\nassert     double_the_difference([-1, 2, 3, 4]) == 0\nassert     double_the_difference([]) == 0\nprint(\"Passed!\")\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 58\nassert     double_the_difference([1, 3, 5, 6, 7]) == 0\nassert     double_the_difference([]) == 0\n\nprint(\"all tests passed.\")\n\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, -2, 3, 4]) == 0\nassert     double_the_difference([-5, 0, 1, -1, 2, 3]) == 9\nassert     double_the_difference([1, 2, 3]) == 0\nassert     double_the_difference([1, 2, 3, 4]) == 30\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, -2, 3, 4, 5]) == 18\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 0\nassert     double_the_difference([1, -2, 3, 4, -5]) == 1\nassert     double_the_difference([1, 2, 3, 4, 5]) == 0\nassert     double_the_difference([1, 2, 3, -4, 5]) == 1\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     double_the_difference([]) == 0\nassert double_the_difference([1, 3, 6]) == 0\nassert double_the_difference([2, 4]) == 16\nassert double_the_difference([2]) == 4\nassert double_the_difference([2.1, 4]) == 16.25\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (compare([0, 2], [0, 1]) == [0, 1]) == True\nassert     (compare([0, 2], [0, 1, 3]) == [0, 1, 3]) == True\nassert     (compare([0, 2, 3], [0, 1]) == [0, 1, 2]) == True\nassert     (compare([0, 2, 3], [0, 1, 3]) == [0, 1, 2]) == True\nassert     (compare([0, 2, 3], [0, 1, 3, 5]) == [0, 1, 2, 4]) == True\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     compare(['10', '20', '30', '40'], ['50', '40', '30', '20']) == [0, 0, 0, 0], 'incorrect'\nassert     compare(['10', '20', '30', '40'], ['20', '30', '40', '50']) == [0, 1, 1, 1], 'incorrect'\nassert     compare(['10', '20', '30', '40'], ['30', '40', '50', '60']) == [1, 1, 1, 1], 'incorrect'\nassert     compare(['10', '20', '30', '40'], ['40', '50', '60', '70']) == [1, 1, 1, 1], 'incorrect'\nassert     compare(['10', '20', '30', '40'], ['50', '40', '30', '20']) == [2, 1, 1, 1], 'incorrect'\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (    (compare(['10','20','30'],['10','20','30']) == [0,0,0]),\n            (compare(['10','20','30'],['10','30','20']) == [0,0,10]),\n            (compare(['10','20','30'],['10','30','50']) == [0,10,0]),\n            (compare(['10','20','30'],['50','30','20']) == [50,0,10])\n        )\n\nprint(compare(['10','20','30'],['10','20','30']))\nprint(compare(['10','20','30'],['10','30','20']))\nprint(compare(['10','20','30'],['50','30','20'])"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     compare( [50, 70, 100, 120, 150, 125, 150, 110], [50, 70, 110, 120, 150, 125, 150, 150]) == [0,1,1,1,2,1,1,1]\nassert     compare( [50, 70, 100, 120, 150, 125, 150, 110], [100, 150, 125, 150, 110, 150, 100, 150]) == [0,1,1,1,1,1,1,1]\nassert     compare( [50, 70, 100, 120, 150, 125, 150, 110], [50, 70, 120, 150, 110, 150, 100, 150]) == [0,0,2,1,1,1,1,1]\nassert     compare( [50, 70, 100, 120, 150, 125, 150, 110], [50, 120, 150, 150, 110, 150, 100, 150]) == [1,1,2,1,1,1,1,1]\nassert     compare( [50, 70, 100, 120, 150, 125, 150, 110], [50, 70, 120, 150, 125, 150, 150, 150]) == [0,1,1,1,2,2,2,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     compare(game=[2, 3, 4, 5], guess=[3, 5, 6, 4]) == [1, 0, 1, 0]\nassert     compare(game=[1, 2, 4, 8], guess=[1, 4, 7, 8]) == [0, 1, 0, 1]\nassert     compare(game=[4, 5, 8, 9], guess=[5, 8, 8, 9]) == [1, 0, 1, 0]\n\nprint('Success'"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     compare([1,2,3], [2,3,1]) == [0,0,0], \"should return [0,0,0]\"\nassert     compare([1,2,3], [1,3,2]) == [0,0,1], \"should return [0,0,1]\"\nassert     compare([1,2,3], [3,1,2]) == [1,0,0], \"should return [1,0,0]\"\nassert     compare([1,2,3], [1,2,3]) == [0,0,0], \"should return [0,0,0]\"\n\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'error'\nassert     Strongest_Extension('Date', ['BnEoK_DAtE', 'BnEoK_Na_DAtE', 'FoR_DAtE', 'Goog_L_Goog_Le']) == 'Date.Goog_L_Goog_Le', 'error'\nassert     Strongest_Extension('HTTPResponse', ['Cheese', 'StuFfed']) == 'HTTPResponse.StuFfed', 'error'\nassert     Strongest_Extension('Olympics', ['Cheese', 'StuFfed']) == 'Olympics.StuFfed', 'error'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'error'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Rice', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Rice.SErviNGSliCes'\nassert     Strongest_Extension('Chees', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Zuoc', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Zuoc.StuFfed'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Class1', ['Extension1', 'Extension2']) == 'Class1.Extension1', 'error'\nassert     Strongest_Extension('Class2', ['Extension1', 'Extension2', 'Extension3']) == 'Class2.Extension2', 'error'\nassert     Strongest_Extension('Class3', ['Extension1', 'Extension2', 'Extension3', 'Extension4']) == 'Class3.Extension2', 'error'\nassert     Strongest_Extension('Class4', ['Extension1', 'Extension2', 'Extension3', 'Extension4']) == 'Class4.Extension4', 'error'\nassert     Strongest_Extension('Class5', ['Extension1', 'Extension2', 'Extension3', 'Extension4']) == 'Class5.Extension1', 'error'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed', 'Cheese', 'Slices']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'Cheese', 'Slices']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'Cheese', 'Slices', 'Slices']) == 'Slices.Cheese'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"Cheese\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"Slices\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"Cheese\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Cheese.Cheese\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"Cheese\", \"Cheese\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Cheese.Cheese\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"Cheese\", \"Cheese\", \"Cheese\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Cheese.Cheese\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'Slices', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'Slices']) == 'Cheese'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'incorrect output'\nassert     Strongest_Extension('Slices', ['Slices', 'Cheese', 'StuFfed']) == 'Slices.Slices', 'incorrect output'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese', 'incorrect output'\nassert     Strongest_Extension('Slices', ['Slices', 'Cheese']) == 'Slices.Slices', 'incorrect output'\nassert     Strongest_Extension('Slices', ['Cheese']) == 'Slices.Cheese', 'incorrect output'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Pizza', ['Pizaaa', 'Cheese', 'StuFfed']) == 'Pizza.Pizaaa'\nassert     Strongest_Extension('A', ['A', 'B', 'C']) == 'A.A'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"waterbottle\", \"erbottlewat\") == True\nassert     cycpattern_check(\"waterbottle\", \"erbottlew\") == False\nassert     cycpattern_check(\"waterbottle\", \"erbottlewatwat\") == True\nassert     cycpattern_check(\"waterbottle\", \"erbottle\") == False\nassert     cycpattern_check(\"waterbottle\", \"waterbottlebottle\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"abcd\", \"cdab\") == True\nassert     cycpattern_check(\"abcd\", \"dabc\") == True\nassert     cycpattern_check(\"abcd\", \"abcd\") == True\nassert     cycpattern_check(\"abcd\", \"abcdab\") == True\nassert     cycpattern_check(\"abcd\", \"acbd\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     cycpattern_check(\"a\", \"aa\")\nassert     cycpattern_check(\"a\", \"ab\")\nassert not cycpattern_check(\"ab\", \"a\")\nassert     cycpattern_check(\"banana\", \"na\")\nassert not cycpattern_check(\"app\", \"apple\")\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"abcd\", \"abcd\") == True\nassert     cycpattern_check(\"abcd\", \"abc\") == True\nassert     cycpattern_check(\"abcd\", \"abcde\") == True\nassert     cycpattern_check(\"abcd\", \"acd\") == True\nassert     cycpattern_check(\"abcd\", \"c\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\n        'jesslookedjustliketimherbrother',\n        'brother'\n    ) is True\nassert     cycpattern_check(\n        'jesslookedjustliketimherbrother',\n        'brothers'\n    ) is False\nassert     cycpattern_check(\n        'jesslookedjustliketimherbrother',\n        'jesslookedjustliketimherbrother'\n    ) is True\nassert     cycpattern_check(\n        'jesslookedjustliketimherbrother',\n        'jesslookedjustliketimherbrothers'\n    ) is True\nassert     cycpattern_check(\n        'jesslookedjustliketimherbrother',\n        'jesslookedjustliketimherbrothers'\n    ) is True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     cycpattern_check(    \"THIS IS A TEST STRING\",\"TEST STRING\") == True\nassert     cycpattern_check(    \"THIS IS A TEST STRING\",\"IS A TEST STRING\") == True\nassert     cycpattern_check(    \"THIS IS A TEST STRING\",\"STRING\") == True\nassert     cycpattern_check(    \"THIS IS A TEST STRING\",\"TEST\") == True\nassert     cycpattern_check(    \"THIS IS A TEST STRING\",\"TESTING\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"abcdxyzabcde\",\"xyzabcde\") == True\nassert     cycpattern_check(\"xyzabcdxyzabcde\",\"xyzabcde\") == False\nassert     cycpattern_check(\"xyzabcdxyzabcde\",\"abcde\") == True\nassert     cycpattern_check(\"xyzabcdxyzabcde\",\"abcdxyzabcd\") == True\nassert     cycpattern_check(\"xyzabcdxyzabcde\",\"abcdxyzabc\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"ab\", \"ab\") == True\nassert     cycpattern_check(\"ab\", \"cd\") == False\nassert     cycpattern_check(\"cab\", \"ab\") == True\nassert     cycpattern_check(\"cab\", \"acb\") == True\nassert     cycpattern_check(\"cab\", \"cb\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"abd\", \"abcde\")         == True\nassert     cycpattern_check(\"abcde\", \"abcde\")     == True\nassert     cycpattern_check(\"dabc\", \"abcde\")     == False\nassert     cycpattern_check(\"hello\", \"lloeh\")     == True\nassert     cycpattern_check(\"helloo\", \"lloeh\")     == False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint(even_odd_count(23))\nprint(even_odd_count(5050))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     even_odd_count(34) == (4, 2), \"Wrong answer\"\nassert     even_odd_count(2) == (1, 1), \"Wrong answer\"\nassert     even_odd_count(4) == (2, 2), \"Wrong answer\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_count(123) == (2, 3)\nassert     even_odd_count(12345) == (4, 5)\nassert     even_odd_count(12131415) == (0, 3)\nassert     even_odd_count(1111111111111111111111111) == (0, 11)\nassert     even_odd_count(1223232425252523232323232323) == (2, 5)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (even_odd_count(253) == (3,2)), \"Wrong result\"\nassert     (even_odd_count(252) == (4,1)), \"Wrong result\"\nassert     (even_odd_count(23456) == (4,4)), \"Wrong result\"\nprint(\"Correctness of even_odd_count function\")\n\ndef nth_prime(n):\n    \"\"\"\n    Given an integer n. Find the nth prime number. The first prime number is 2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint(even_odd_count(1111111111111111)) # (0,1)\nassert\nprint(even_odd_count(2222222222222222)) # (2,2)\nassert\nprint(even_odd_count(3333333333333333)) # (3,3)\nassert\nprint(even_odd_count(4444444444444444)) # (4,4)\nassert\nprint(even_odd_count(5555555555555555)) # (5,5)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     even_odd_count(123) == (2, 3)\nassert     even_odd_count(123213) == (1, 1)\nassert     even_odd_count(2234) == (3, 2)\nassert     even_odd_count(2234234) == (0, 3)\nassert     even_odd_count(12345) == (2, 4)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nprint(even_odd_count(234))\nprint(even_odd_count(12))\nprint(even_odd_count(2468))\n\n\n\ndef get_lowest_number(num):\n    \"\"\"Given a list of numbers, return the lowest number in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    \"\"\"Call the above functions in this main for testing.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(2) == \"ii\"\nassert     int_to_mini_roman(3) == \"iii\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(3) == \"iii\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(9) == \"ix\"\nassert     int_to_mini_roman(58) == \"LVIII\"\nassert     int_to_mini_roman(1994) == \"MCMXCIV"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\nassert     int_to_mini_roman(10) == 'x'\nassert     int_to_mini_roman(20) == 'xx'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\nassert     int_to_mini_roman(9) == 'ix'\nassert     int_to_mini_roman(10) == 'x'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(3) == 'III'\nassert int_to_mini_roman(4) == 'IV'\nassert int_to_mini_roman(10) == 'X'\nassert int_to_mini_roman(30) == 'XXX'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(4, 4, 4) == True, \"This is not a right angled triangle\"\nassert right_angle_triangle(3, 4, 5) == False, \"This is a right angled triangle\"\nassert right_angle_triangle(4, 5, 6) == True, \"This is not a right angled triangle\"\nassert right_angle_triangle(5, 4, 3) == True, \"This is not a right angled triangle\"\nprint(\"Test passed!\""
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(4,4,4)\nassert not     right_angle_triangle(4,4,3)\nassert     right_angle_triangle(4,5,5)\nassert     right_angle_triangle(5,4,5)\nassert     right_angle_triangle(5,5,4)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, \"3, 4, 5 is a right angle triangle\"\nassert not right_angle_triangle(6, 4, 5) == True, \"6, 4, 5 is not a right angle triangle\"\nassert not right_angle_triangle(3, 6, 5) == True, \"3, 6, 5 is not a right angle triangle\"\nassert not right_angle_triangle(3, 4, 8) == True, \"3, 4, 8 is not a right angle triangle\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False\nassert right_angle_triangle(2, 3, 4) == False\nassert right_angle_triangle(4, 3, 2) == False\nassert right_angle_triangle(2, 2, 2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 2, 4) == True\nassert     right_angle_triangle(1, 2, 3) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_max(['abc', 'def', 'ghi']) == 'abc'\nassert     find_max(['def', 'abc', 'ghi']) == 'def'\nassert     find_max(['abc', 'def', 'ghi']) == 'def'\nassert     find_max(['abc', 'def', 'ghi', 'aaa', 'aaa']) == 'aaa'\nassert     find_max(['abc', 'def', 'aaa']) == 'def'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_max([\"111111\", \"222222\", \"aabbcc\", \"111111\", \"222222\", \"333333\"]) == \"222222\"\nassert     find_max([\"aabbcc\", \"111111\", \"222222\", \"333333\", \"aabbcc\", \"111111\"]) == \"aabbcc\"\nassert     find_max([\"a\", \"z\", \"a\", \"z\", \"z\", \"a\", \"z\"]) == \"z\"\nassert     find_max([\"z\", \"z\", \"z\"]) == \"z\"\nassert     find_max([\"z\", \"z\", \"a\", \"z\"]) == \"z\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_max(['hello', 'hey', 'goodbye']) == 'hello'\nassert     find_max(['hi', 'bye', 'hello']) == 'bye'\nassert     find_max(['hey', 'goodbye', 'hiiii']) == 'hiiii'\nassert     find_max(['123', 'b', 'bc', 'asdf']) == 'b'\nassert     find_max(['123', 'asdf', 'b', 'bc']) == 'asdf'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_max([\"plasma\", \"mango\", \"valve\"]) == \"valve\"\nassert     find_max([\"harambe\", \"shanaya\", \"mango\"]) == \"shanaya\"\nassert     find_max([\"mirror\", \"arc\"]) == \"arc\"\nassert     find_max([\"clipper\", \"cartoon\", \"tunnel\"]) == \"cartoon\"\nassert     find_max([\"t\", \"l\", \"k\", \"i\", \"r\", \"b\"]) == \"r\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_max([\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]) == 'jumps'\nassert     find_max([\"over\", \"the\", \"quick\", \"brown\", \"dog\"]) == 'over'\nassert     find_max([\"quick\", \"brown\", \"the\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]) == 'jumps'\nassert     find_max([\"over\", \"brown\", \"the\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]) == 'jumps'\nassert     find_max([\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]) == 'the'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_max([\"abc\", \"abc\", \"abcd\", \"def\", \"abcdef\", \"abdef\"]) == \"abcdef\", \"All tests passed\"\nassert     find_max([\"xabc\", \"abc\", \"abcd\", \"def\", \"abcdef\", \"abdef\"]) == \"abcdef\", \"All tests passed\"\n\ndef find_max(words):\n    return max(words, key=len)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (find_max(['aaa', 'bbb', 'ccc', 'ddd']) == 'ccc' or\n        find_max(['aaa', 'bbb', 'ccc', 'ddd']) == 'ddd'), \\\n        'Incorrect result'\nprint('All tests passed')\n\ndef f(x):\n    if (x < 0):\n        return 0\n    return x\n\ndef first_word(words):\n    \"\"\"Returns the first word in words.\n\n    If words is empty, returns None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_max([\"ab\", \"aaa\", \"bbbb\", \"cccc\"]) == \"ab\"\nassert     find_max([\"ab\", \"aab\", \"aaa\", \"bbbb\", \"cccc\"]) == \"aab\"\nassert     find_max([\"cccc\", \"ab\", \"bbbb\", \"aaa\", \"aaaa\", \"cccc\"]) == \"aaaa\"\n\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_max([\"leetcode\", \"et\", \"code\"]) == \"et\"\nassert     find_max([\"hello\", \"world\", \"leetcode\"]) == \"world\"\nassert     find_max([\"a\", \"world\", \"leetcode\"]) == \"world\"\nassert     find_max([\"this\", \"is\", \"a\", \"world\", \"leetcode\"]) == \"world\"\nassert     find_max([\"this\", \"is\", \"a\", \"world\", \"leetcode\", \"hello\"]) == \"world\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     eat(0, 5, 10) == [5, 5]\nassert     eat(2, 4, 10) == [6, 2]\nassert     eat(0, 5, 5) == [5, 0]\nassert     eat(2, 4, 6) == [4, 0]\nassert     eat(1, 3, 2) == [3, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 0, 1) == [0, 0]\nassert     eat(0, 0, 2) == [0, 2]\nassert     eat(0, 0, 3) == [0, 3]\nassert     eat(0, 1, 1) == [1, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     eat(5, 7, 10) == [ 7, 3 ]\nassert     eat(3, 5, 4) == [ 5, 0 ]\nassert     eat(7, 5, 4) == [ 10, 0 ]\nassert     eat(3, 3, 2) == [ 3, 1 ]\nassert     eat(1, 2, 4) == [ 2, 2 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     eat(0, 1, 3) == [ 0, 3 ], \"should be [ 0, 3 ]\"\nassert     eat(1, 3, 3) == [ 1, 3 ], \"should be [ 1, 3 ]\"\nassert     eat(1, 10, 10) == [ 1, 0 ], \"should be [ 1, 0 ]\"\nassert     eat(1, 11, 11) == [ 1, 0 ], \"should be [ 1, 0 ]\"\nassert     eat(1, 12, 11) == [ 1, 1 ], \"should be [ 1, 1 ]\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     eat(3, 5, 2) == [6, 0]\nassert     eat(7, 2, 3) == [10, 1]\nassert     eat(10, 6, 5) == [20, 0]\nassert     eat(9, 10, 3) == [18, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(1, 1, 2) == [2, 1]\nassert     eat(5, 3, 6) == [13, 2]\nassert     eat(10, 5, 15) == [25, 0]\nassert     eat(10, 0, 20) == [20, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     eat(0, 0, 10) == [10, 0]\nassert     eat(1, 1, 10) == [9, 0]\nassert     eat(10, 2, 10) == [12, 0]\nassert     eat(10, 10, 10) == [0, 0]\nassert     eat(1, 10, 10) == [0, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     eat(0, 0, 10) == [0, 10]\nassert     eat(2, 5, 10) == [2, 5]\nassert     eat(4, 5, 10) == [4, 0]\nassert     eat(5, 6, 10) == [5, 0]\nassert     eat(6, 7, 10) == [6, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     eat(0, 0, 2) == [ 0, 2 ]\nassert     eat(0, 1, 2) == [ 1, 0 ]\nassert     eat(1, 1, 2) == [ 2, 0 ]\nassert     eat(2, 1, 2) == [ 3, 0 ]\nassert     eat(2, 2, 2) == [ 4, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     eat(6, 10, 20) == [10, 10]\nassert     eat(7, 11, 30) == [18, 3]\nassert     eat(0, 10, 30) == [10, 30]\nassert     eat(0, 10, 20) == [10, 0]\nassert     eat(4, 10, 20) == [10, 10]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\"], [1, 2, 3, 4]) == 7\nassert     do_algebra([\"+\", \"*\"], [1, 2, 3, 4, 5]) == 15\nassert     do_algebra([\"+\", \"*\", \"//\", \"^\"], [1, 2, 3, 4, 5]) == 2\nassert     do_algebra([\"+\", \"*\", \"//\", \"^\", \"-\"], [1, 2, 3, 4, 5]) == -1\nassert     do_algebra([\"+\", \"*\", \"//\", \"^\", \"-\"], [1, 2, 3, 4, 5, 6, 7]) == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     do_algebra([\"+\", \"+\", \"+\", \"-\"], [1, 2, 3, 4])     == -10\nassert     do_algebra([\"*\", \"*\", \"-\"], [1, 2, 3])     == -6\nassert     do_algebra([\"//\", \"+\", \"*\", \"-\"], [1, 2, 3, 4])     == -4\nassert     do_algebra([\"**\", \"*\", \"-\"], [1, 2, 3, 4])     == -24\nassert     do_algebra([\"//\", \"**\", \"*\", \"-\"], [1, 2, 3, 4])     == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     do_algebra([\"+\", \"+\"], [1, 2, 3, 4]) == 7\nassert     do_algebra([\"+\", \"+\", \"*\", \"//\"], [1, 2, 3, 4]) == 7\nassert     do_algebra([\"+\", \"+\", \"*\", \"//\", \"*\"], [1, 2, 3, 4, 5]) == 15\nassert     do_algebra([\"+\", \"+\", \"*\", \"//\", \"*\", \"*\"], [1, 2, 3, 4, 5, 6]) == 15\nassert     do_algebra([\"+\", \"+\", \"*\", \"//\", \"*\", \"*\", \"*\"], [1, 2, 3, 4, 5, 6, 7]) == 21\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     do_algebra(['+', '+', '-'], [5, 2, 2, 4, 6]) == 13\nassert     do_algebra(['+', '*', '-'], [1, 2, 2, 4, 6]) == 14\nassert     do_algebra(['+', '*', '-'], [2, 2, 2, 4, 6]) == 4\nassert     do_algebra(['+', '*', '-'], [5, 2, 2, 2, 2]) == 2\nassert     do_algebra(['+', '*', '-'], [3, 2, 2, 2, 2]) == 3\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     do_algebra(['+', '+'], [1, 2, 3, 4]) == 7\nassert     do_algebra(['+'], [1, 2, 3, 4, 5]) == 11\nassert     do_algebra(['*'], [1, 2, 3, 4, 5]) == 60\nassert     do_algebra(['*', '*'], [1, 2, 3, 4, 5]) == 120\nassert     do_algebra(['*', '*', '*'], [1, 2, 3, 4, 5]) == 720\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     do_algebra(['+', '-'], [1, 2])         == 3, 'wrong result for + and -'\nassert     do_algebra(['*', '+'], [1, 2])         == 3, 'wrong result for * and +'\nassert     do_algebra(['*', '-'], [1, 2])         == -1, 'wrong result for * and -'\nassert     do_algebra(['//', '+'], [1, 2])         == 2, 'wrong result for // and +'\nassert     do_algebra(['//', '-'], [1, 2])         == -1, 'wrong result for // and -'\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     do_algebra(['+', '-'], [1, 2]) == 3\nassert     do_algebra(['+', '*'], [1, 2]) == 5\nassert     do_algebra(['*', '//', '+'], [1, 2, 3]) == 5\nassert     do_algebra(['*', '//', '+'], [1, 2, 3]) == 3\nassert     do_algebra(['*', '//', '+', '-'], [1, 2, 3]) == 3\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     do_algebra(['+', '*', '+', '*', '-'], [3, 5, 4, 7, 4]) == 26, '3+5*4-7*4'\nassert     do_algebra(['+', '+', '+', '*', '-'], [3, 5, 4, 7, 4]) == 20, '3+5+4*7-4'\nassert     do_algebra(['+', '+', '*', '-', '-'], [3, 5, 4, 7, 4]) == 16, '3+5+4*7-4'\nassert     do_algebra(['+', '-', '+', '*', '-'], [3, 5, 4, 7, 4]) == 4, '3+5-4*7+4'\nassert     do_algebra(['*', '*', '*', '*', '-'], [3, 5, 4, 7, 4]) == 3, '3*5*4*7*4'\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     do_algebra(['+', '-', '*', '/', '**'], [1, 2, 3, 4, 5]) == 15\nassert     do_algebra(['+', '-', '*', '/', '**'], [1, 2, 3, 4]) == None\nassert     do_algebra(['+', '-', '*', '**'], [1, 2, 3, 4, 5]) == None\nassert     do_algebra([], []) == None\nassert     do_algebra([], [1]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     solve('') == ''\nassert     solve('a') == 'A'\nassert     solve('AbC') == 'abC'\nassert     solve('aBc') == 'AbC'\nassert     solve('aBC') == 'AbC'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solve(\"a8Aa\") == \"A8Aa\"\nassert solve(\"A8Aa\") == \"a8a\"\nassert solve(\"Aa\") == \"aA\"\nassert solve(\"\") == \"\"\nassert solve(\"Bb\") == \"bB"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (solve('') == '')\nassert     (solve('a') == 'A')\nassert     (solve('ab') == 'Ab')\nassert     (solve('Ab') == 'ab')\nassert     (solve('aBc') == 'AbC')\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solve(\"THIS IS TOO\") == \"tOOI stIS\"\nassert     solve(\"this is TOO\") == \"tOOI sT IS\"\nassert     solve(\"this is toO\") == \"tOOI sT is\"\nassert     solve(\"thIs iS TOO\") == \"TOOI sT is\"\nassert     solve(\"123\") == \"123\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solve(\"I'm a leetcode\") == \"iM a eeLgIcEtOdE\"\nassert     solve(\"This is a test case\") == \"tHIS IS A tset CASE"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solve(\"\") == \"\", \"the empty string was expected\"\nassert     solve(\"a\") == \"a\", \"a was expected\"\nassert     solve(\"sSs\") == \"SsS\", \"sSs was expected\"\nassert     solve(\"aZ\") == \"aZ\", \"aZ was expected\"\nassert     solve(\"a sSs\") == \"a sSs\", \"a sSs was expected\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     solve('a') == 'a'\nassert     solve('A') == 'A'\nassert     solve('d a  dA') == 'D a  dA'\nassert     solve('D a  dA') == 'd a  DA'\nassert     solve(' d a dA  ') =='d a dA  '\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     solve('STRING') == 'STRING'\nassert     solve('string') == 'STRING'\nassert     solve('sTRING') == 'STRING'\nassert     solve('stRiNg') == 'STRING'\nassert     solve('SttRiNg') == 'STRING'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     solve('string') == 'gnirts'\nassert     solve('Hello') == 'hELLO'\nassert     solve('STRING') == 'gnIRts'\nassert     solve('N') == 'N'\nassert     solve('123') == '321'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert solve(\"\") == \"\"\n    assert solve(\"abcd\") == \"dcba\"\n    assert solve(\"abcd ef\") == \"dcba ef\"\n    "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash'md5_hash', return its string equivalent.\n    If'md5_hash' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"\") == None\nassert string_to_md5(\"foo\") == \"4c8c15dcbe0b9bc5517b3e5e7b9f6bcd\"\nassert string_to_md5(\"foobar\") == \"bc974e8c6d3f842d63b8c3c7c9f4a39b\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef string_to_md5_2(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    Test function for the module string_to_md5.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash of a string'md5', return the string equivalent.\n    If'md5' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     generate_integers(100, 200) == [98, 96, 94]\nassert     generate_integers(100, 300) == [98, 96, 94]\nassert     generate_integers(200, 100) == []\nassert     generate_integers(200, 300) == [98, 96, 94]\nassert     generate_integers(300, 100) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     generate_integers(14, 27) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(9, 19) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     generate_integers(20, 37) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\nassert     generate_integers(45, 99) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44]\nassert     generate_integers(1, 3) == [2, 4]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     generate_integers(12, 17) == [12, 14, 16]\nassert     generate_integers(12, 17)!= [16, 14, 12]\nassert     generate_integers(13, 34) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\nassert     generate_integers(13, 32) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\nassert     generate_integers(25, 78) == [32, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     generate_integers(0, 9) == [0, 2, 4, 6, 8]\nassert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert     generate_integers(19, 100) == [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\ndef check_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, check if a is an even digit of b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18]\nassert     generate_integers(19, 22) == [20, 22]\nassert     generate_integers(1, 9) == [2, 4, 6, 8]\nassert     generate_integers(1, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 12) == [2, 4, 6, 8, 10, 12]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert generate_integers(0, 0) == []\nassert generate_integers(2, 3) == [2, 4]\nassert generate_integers(4, 10) == [4, 6, 8, 10]\nassert generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     generate_integers(2, 4) == [2, 4]\nassert     generate_integers(3, 7) == [4, 6]\nassert     generate_integers(12, 15) == [4, 8, 12]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     generate_integers(4, 9) == [4, 6, 8]\nassert     generate_integers(10, 15) == [10, 12, 14]\nassert     generate_integers(22, 37) == [22, 24, 26, 28, 30, 32, 34, 36]\n"
    }
]