[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     has_close_elements([2, 7, 1, 2], 1) == True\nassert     has_close_elements([1, 2, 5, 5], 0) == False\nassert     has_close_elements([0.5, 0.5, 0.6, 0.6], 0.15) == True\n\n\ndef closest_numbers(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Return a list of two closest numbers from given list, that are closest to each other\n    than given threshold.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_list = [1, 2, 3]\n    assert has_close_elements(test_list, 1) == False\n\n    test_list = [1, 2, 3, 4]\n    assert has_close_elements(test_list, 1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3], 0.1) == False\nassert     has_close_elements([1, 2, 3], 0.9) == False\nassert     has_close_elements([1, 2, 3], 1) == False\nassert     has_close_elements([1, 2, 3], 2) == False\nassert     has_close_elements([1, 2, 3], 3) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     has_close_elements([1.0, 1.0, 1.0], 1.0) == True\nassert     has_close_elements([1.0, 1.0, 1.0], 0.01) == False\nassert     has_close_elements([1.0, 1.0, 1.0], 0.001) == True\nassert     has_close_elements([1.0, 1.0, 1.0], 1e-10) == True\nassert     has_close_elements([1.0, 1.0, 1.0], 1e-15) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.1, 2.2, 3.3], threshold=0.1) == False\nassert has_close_elements([0.5, 1.5, 2.5], threshold=0.1) == False\nassert has_close_elements([1.0, 2.0, 3.0], threshold=0.1) == True\nassert has_close_elements([0.1, 0.2, 0.3], threshold=0.1) == True\nassert has_close_elements([0.5, 1.5, 2.5], threshold=0.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 3.5) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 100) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 4) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert has_close_elements([], 1.0) is False\n    assert has_close_elements([1.0], 1.0) is False\n    assert has_close_elements([1.0, 2.0, 3.0], 1.0) is False\n    "
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert         has_close_elements([0,1,2], 2) == False\nassert         has_close_elements([0,1,2], 0) == False\nassert         has_close_elements([0,1,2], 1) == False\nassert         has_close_elements([0,1,2], 3) == False\nassert         has_close_elements([0,1,2], 2.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert         has_close_elements([1.0, 2.1, 3.2], 0.1) == False\nassert         has_close_elements([1.0, 2.1, 3.2, 4.0], 1.0) == False\nassert         has_close_elements([1.0, 2.1, 3.2, 4.0], 0.5) == True\nassert         has_close_elements([1.0, 2.1, 3.2, 4.0], 0.3) == True\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('(8)') == ['(8)']\nassert     separate_paren_groups('(8(6(2)))') == ['(8(6(2)))']\nassert     separate_paren_groups('(8(6(2)))(4(5(7(9))))') == ['(8(6(2)))', '(4(5(7(9))))']\nassert     separate_paren_groups('(8(6(2)))(4(5(7(9)(11)))'\n                                ')') == ['(8(6(2)))', '(4(5(7(9)(11)))', ')']\nassert     separate_paren_groups('(8(6(2))(4(5(7(9)(11)))))') == ['(8(6(2))(4(5(7(9)(11))))']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"(g) (())\"\n                                \"() (() ())\") == ['(g)',\n                                                 '(()',\n                                                 '()',\n                                                 '(() ())']\nassert     separate_paren_groups(\"(g() (z)) ((a) b) c)\") == ['(g() (z))',\n                                                           '((a) b)',\n                                                           'c']\nassert     separate_paren_groups(\"(g (() z)) ((a) b) c)\") == ['(g (() z))',\n                                                           '((a) b)',\n                                                           'c']\nassert     separate_paren_groups(\"(g (z)) ((a) b) c)\") == ['(g (z))',\n                                                           '((a) b)',\n                                                           'c']\nassert     separate_paren_groups(\"((a) b) c)\") == ['((a) b)',\n                                                       'c']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"(()()\") == [\"()()\", \"(()())\"]\nassert     separate_paren_groups(\"(()((()()())())\") == [\"(()((()()())())\", \"(()())(()(()))\"]\nassert     separate_paren_groups
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     separate_paren_groups('(())') == ['()'], \"Test 1\"\nassert     separate_paren_groups('((()))') == ['((()))'], \"Test 2\"\nassert     separate_paren_groups('()') == ['', '()'], \"Test 3\"\nassert     separate_paren_groups('((()))') == ['((()))'], \"Test 4\"\nassert     separate_paren_groups('(()())') == ['(()())', '()()'], \"Test 5\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     separate_paren_groups('(()())') == ['(())', '()']\nassert     separate_paren_groups('(()(())()(()))') == ['(())', '()', '()', '()']\nassert     separate_paren_groups('(()()()()())') == ['(())', '()', '()', '()', '()']\nassert     separate_paren_groups('((())()(()()))') == ['((())())', '()', '()', '()', '()', '()']\n\n\ndef count_surrounding_parens(paren_string: str, char: str) -> int:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to count\n    the number of parentheses that are in the same group. Note that they are balanced within each group.\n    Ignore any spaces in the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     separate_paren_groups('({} {[()]})') == ['({} {[()]})']\nassert     separate_paren_groups('({} {[()]})') == ['({} {[()]})']\nassert     separate_paren_groups('({} {[(]})') == ['({} {[(]})']\nassert     separate_paren_groups('({} {[(])})') == ['({} {[(])})']\nassert     separate_paren_groups('( {[(]})') == ['( {[(]})']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('(())()') == ['(())', '()']\nassert     separate_paren_groups(')(') == ['', '']\nassert     separate_paren_groups('()') == ['', '']\nassert     separate_paren_groups('(()') == ['(', '()']\nassert     separate_paren_groups('()(())') == ['', '()', '()']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"()())()\") == [\"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"(())(()())\") == [\"(())(\", \"()\", \"())\"]\nassert     separate_paren_groups(\"(()())((()))\") == [\"(()())(\", \"(()\", \")\"]\nassert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"()()(()(())()(()()))\") == [\"(()())(\", \"(()\", \")\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\n            \"{}()()()()(){}{[()()](){}}{[({}[))()]}\") == [\n                \"{}(){}\",\n                \"{}(){}\",\n                \"{}(){}\",\n                \"{}(){}\",\n                \"{}({}[]\",\n                \"{}({}[]\",\n                \"{}({}[))\",\n                \"{}({}[))\"\n                ]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     truncate_number(0) == 0\nassert     truncate_number(1) == 1\nassert     truncate_number(2) == 0\nassert     truncate_number(3) == 0\nassert     truncate_number(4) == 0.5\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef compare_number(x: float, y: float) -> int:\n    \"\"\" Compare two positive floating point numbers.\n\n    Return 1 if x is greater, -1 if y is greater, and 0 if they are the same.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     truncate_number(1.23456789) == 0.23456789\nassert     truncate_number(1.234567891234) == 0.23456789123\nassert     truncate_number(1.2345678912345) == 0.234567891234\nassert     truncate_number(1.23456789123456) == 0.234567891235\nassert     truncate_number(1.234567891234567) == 0.2345678912356\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     truncate_number(10.42) == 0.42\nassert     truncate_number(1.2345) == 1.23\nassert     truncate_number(5.0) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     truncate_number(3.14) == 0.14\nassert     truncate_number(3.14159265359) == 0.0\nassert     truncate_number(3.14159265359) == 0.0\nassert     truncate_number(3.14159265359) == 0.0\nassert     truncate_number(3.14159265359) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef truncate_number_test():\n    assert(truncate_number(10.5) == 1)\n    assert(truncate_number(5.5) == 0.5)\n    assert(truncate_number(1) == 1)\n    "
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     truncate_number(1.23) == 0.23\nassert     truncate_number(10.23) == 0.23\nassert     truncate_number(0.123) == 0.123\nassert     truncate_number(0.0) == 0.0\n\ndef sum_digits(number: float) -> int:\n    \"\"\" Given a floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1). Return the sum of the digits\n    in the decimals.\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     truncate_number(0) == 0\nassert     truncate_number(1.1) == 0\nassert     truncate_number(1) == 1\nassert     truncate_number(0.1) == 0.1\nassert     truncate_number(5) == 5\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     truncate_number(12.345) == 0.345\nassert     truncate_number(123.456) == 0.456\nassert     truncate_number(0.123) == 0.0\nassert     truncate_number(1.123) == 0.123\nassert     truncate_number(12.99) == 0.99\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_zero([10, 50, -20, 40, -10, 30, -5]) == False\nassert     below_zero([10, 50, -20, 40, -10, 30, 5]) == True\n\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert below_zero([1, 2, 3, 4, 5, 6, -5]) == True\n\n\ndef monotonic(integers: List[int]) -> bool:\n    \"\"\" Write a function that takes a list of integers and returns True if the list is monotonic and\n    False if it's not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_zero([1, 2, 3, 4]) == False, \"Wrong answer\"\nassert     below_zero([1, 1, 1, 1]) == False, \"Wrong answer\"\nassert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1]) == True, \"Wrong answer\"\nassert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, 5, 6, -5, 4]) == True\nassert     below_zero([1, 2, 3, 4, 5, -5, 4]) == True\n\n\ndef sum_squared(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to return True if the final balance of account is not zero, or it is\n    zero (final balance can be zero only if it was initially zero). Otherwise function should return False.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nassert below_zero([0, 1, -1, 2, -2]) == True\nassert below_zero([0, 1, -1, 2, -2, 3]) == False\nassert below_zero([1, -1, 2, -2, 3]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_zero([1,2,-3,4,5]) == True\nassert     below_zero([1,2,3,4,5]) == False\nassert     below_zero([1,-2,3,4,5]) == True\nassert     below_zero([1,-2,3,-4,5]) == False\nassert     below_zero([1,-2,-3,4,5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, -3, 4, 5]) == True\nassert     below_zero([-1, 2, 3, 4, -5]) == True\nassert     below_zero([1, 2, -3, 4, -5]) == False\nassert     below_zero([1, 2, -3, 4, -5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, 3, 4, 5]) == True\nassert     below_zero([1, 2, 3, 4, 5, -4]) == True\nassert     below_zero([1, 2, 3, 4, 5, -5]) == True\nassert     below_zero([1, 2, 3, 4, 5, -6]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_zero([1,2,3,4,5]) == False\nassert     below_zero([1,2,-3,4,5]) == True\nassert     below_zero([1,2,3,-4,5]) == True\nassert     below_zero([1,-2,3,4,5]) == True\nassert     below_zero([1,2,3,4,5]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\ndef covariance(numbers_x: List[float], numbers_y: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Covariance of these numbers.\n    Covariance is the average of product between each element of two different\n    lists:\n    Covariance = mean(x_i * y_i)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4]) == 1.0, \"Should be 1.0\"\nassert     mean_absolute_deviation([0, 1, 2, 3, 4, 5]) == 1.0, \"Should be 1.0\"\nassert     mean_absolute_deviation([-3, -2, -1, 0, 1, 2, 3]) == 1.0, \"Should be 1.0\"\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.0, \"Should be 5.0\"\n\nprint(mean_absolute_deviation([0, 1, 2, 3, 4, 5]))\nprint(mean_absolute_deviation([-3, -2, -1, 0, 1, 2, 3]))\nprint(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 1.0\nassert     mean_absolute_deviation([-1, 2, 4]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([2, 3, 4, 5, 6]) == 2.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 1.0\nassert     mean_absolute_deviation([1, 2, 4]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.0\nassert mean_absolute_deviation([1, -2, -3, -4, -5]) == 0.0\nassert mean_absolute_deviation([-1, -2, -3, -4, -5]) == -1.0\nassert mean_absolute_deviation([1, 3, 3, -3, 1]) == 2.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the median of this dataset.\n    Median is the value in the center of the dataset.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     abs(mean_absolute_deviation([1.0, 1.0]) - 0.0) < 10e-15\nassert     abs(mean_absolute_deviation([1.0, -1.0]) - 0.5) < 10e-15\nassert     abs(mean_absolute_deviation([1.0, 1.0, 3.0, 4.0]) - 1.0) < 10e-15\nassert     abs(mean_absolute_deviation([1.0, 1.0, 3.0, 4.0, -1.0]) - 1.0) < 10e-15\nassert     abs(mean_absolute_deviation([1.0, 1.0, 3.0, 4.0, -1.0, 2.0]) - 1.5) < 10e-15\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation(list(range(-3, 4))) == 1.5\nassert     mean_absolute_deviation(list(range(-4, 4))) == 0\nassert     mean_absolute_deviation(list(range(-5, 4))) == 0.5\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, return the median of this dataset.\n    If the list has an even number of elements, return the mean of the two\n    middle elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0, \"mad([1, 2, 3, 4]) == 1.0\"\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 0.8, \"mad([1, 2, 3, 4, 5, 6, 7]) == 0.8\"\nassert     mean_absolute_deviation([0, 1, 2, 3]) == 0.6, \"mad([0, 1, 2, 3]) == 0.6\"\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of the positive integer `n'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersperse([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 2, 3, 4, 5, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 3) == [1, 3, 2, 3, 4, 5, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 4) == [1, 4, 2, 3, 4, 5, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 5) == [1, 5, 2, 3, 4, 5, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 6) == [1, 6, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3], 10) == [1, 10, 2, 10, 3, 10]\nassert     intersperse([1, 2, 3], 100) == [1, 100, 2, 100, 3, 100]\nassert     intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3, 0]\nassert     intersperse([1], 10) == [1, 10]\nassert     intersperse([], 10) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 6) == [1, 6, 2, 6, 3, 6, 4, 6, 5, 6]\nassert     intersperse([1, 2, 3, 4, 5], 7) == [1, 7, 2, 7, 3, 7, 4, 7, 5, 7]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0]\nassert     intersperse([], 1) == []\n\nprint('PASSED')\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     intersperse([], 0) == []\nassert     intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 1) == [1, 1, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 3) == [1, 3, 3, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 5) == [1, 5, 3, 5, 2, 0, 3, 0, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersperse([1, 2, 3], 100) == [1, 100, 2, 100, 3, 100], \"Fails\"\nassert     intersperse([1, 2, 3], 1) == [1, 1, 2, 1, 3, 1], \"Fails\"\nassert     intersperse([], 1) == [], \"Fails\"\nassert     intersperse([1], 2) == [1, 2], \"Fails\"\nprint(\"passed\")\n\ndef intersperse_original(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nnumbers = [1,2,3,4]\ndelimeter = 10\nassert intersperse(numbers, delimeter) == [1,10,2,10,3,10,4,10]\nassert intersperse([1,2,3,4], 5) == [1,5,2,5,3,5,4,5]\nassert intersperse([], 10) == [10]\n\ndef intersperse2(numbers: List[int], delimeter: int) -> List[int]:\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]\nassert     intersperse([1, 2, 3], 1) == [1, 1, 0, 2, 1, 0, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 4, 0, 2, 4, 0, 3]\nassert     intersperse([1, 2, 3], -1) == [1, -1, 0, 2, -1, 0, 3]\n\n\ndef remove_every_other(list1: List[int]) -> List[int]:\n    \"\"\" Remove every other element of input list `list1'.\n        Note that in Python, indexing starts at 0, so list1[0] is the first element of list1,\n        list1[1] is the second element, and so on.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef merge(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\" Merge two sorted lists\n    \"\"\"\n    pass\n\n\ndef merge_sort(nums: List[int]) -> List[int]:\n    \"\"\" Merge sort\n    \"\"\"\n    pass\n\n\ndef quick_sort(nums: List[int]) -> List[int]:\n    \"\"\" Quick sort\n    \"\"\"\n    pass\n\n\ndef binary_search(nums: List[int], target: int) -> int:\n    \"\"\" Binary search\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersperse([0, 2, 4, 6, 8, 10, 12], 1) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"\nassert     intersperse([0, 2, 4, 6, 8, 10, 12], 2) == [0, 2, 4, 6, 8, 10, 12], \"should be [0, 2, 4, 6, 8, 10, 12]\"\nassert     intersperse([0, 2, 4, 6, 8, 10, 12], 3) == [0, 3, 6, 8, 10, 12], \"should be [0, 3, 6, 8, 10, 12]\"\nassert     intersperse([0, 2, 4, 6, 8, 10, 12], 12) == [0, 12], \"should be [0, 12]\"\nassert     intersperse([0, 2, 4, 6, 8, 10, 12], 13) == [0, 2, 4, 6, 8, 10, 12], \"should be [0, 2, 4, 6, 8, 10, 12]\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(())((()())())\") == [2, 1, 2, 0, 0, 0, 1, 1, 2, 2, 0, 1, 0, 0, 0, 0, 0]\nassert     parse_nested_parens(\"(()())()\") == [2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]\nassert     parse_nested_parens(\"((()())((())))\") == [3, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2]\nassert     parse_nested_parens(\"((()())(()))\") == [3, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2]\n\nprint(\"parse_nested_parens passed all tests\")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_nested_parens('((())())') == [3, 2, 1, 1]\nassert     parse_nested_parens('((()))') == [3, 2, 1, 1]\nassert     parse_nested_parens('(())()()()()') == [2, 2, 2, 2, 2, 1, 1, 1]\nassert     parse_nested_parens('((()(())())())') == [5, 4, 3, 2, 2, 1, 1]\nassert     parse_nested_parens('((()()(()())())())') == [6, 5, 4, 3, 2, 2, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('(()())') == [2, 2, 1, 1, 1, 1, 1]\nassert     parse_nested_parens('((()))') == [3, 2, 1, 1, 1]\nassert     parse_nested_parens('(()(()()))') == [5, 4, 3, 3, 3, 2, 2, 2]\nassert     parse_nested_parens('(((()(()())))') == [7, 6, 5, 5, 5, 4, 4, 4]\nassert     parse_nested_parens('((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))') == [13, 12, 11, 10, 9, 8, 7, 7, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_nested_parens('(())')                 == [0]\nassert     parse_nested_parens('((()))')         == [3]\nassert     parse_nested_parens('((())')         == [2]\nassert     parse_nested_parens('(((()())))')     == [4]\nassert     parse_nested_parens('((((((())))))')     == [7]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(())\") == [0]\nassert     parse_nested_parens(\"((()))\") == [3]\nassert     parse_nested_parens(\"(((())())\") == [3]\nassert     parse_nested_parens(\"(((())()())()\") == [3, 2, 1, 0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(())\") ==     [0]\nassert     parse_nested_parens(\"()\") ==     [0]\nassert     parse_nested_parens(\"((()))\") ==     [0, 1]\nassert     parse_nested_parens(\"(((()()))())\") ==     [0, 1, 2, 1, 0]\nassert     parse_nested_parens(\"()(((()()()))())\") ==     [0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"((((()))))\") == [3, 3, 2, 1, 0]\nassert     parse_nested_parens(\"(()())\") == [2, 2, 1, 0]\nassert     parse_nested_parens(\"((()())(())()())\") == [3, 3, 2, 2, 1, 1, 1, 0]\nassert     parse_nested_parens(\"(((((())))()()())((())))\") == [3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0]\nassert     parse_nested_parens(\"(((((((((((())))()()()()()()()()()()((()()()()((()))))))())()()()(())())())())())()())())\") == [6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(((((())))))\") == [0,0,0,0,0,0,0,0,0,0]\nassert     parse_nested_parens(\"(((())))\") == [1,1,1,1,1,1,1,1]\nassert     parse_nested_parens(\"(((())))\") == [2,2,2,2,2,2,2,2]\nassert     parse_nested_parens(\"(((()))\") == [3,3,3,3,3,3,3,3]\nassert     parse_nested_parens(\"(((()))\") == [4,4,4,4,4,4,4,4]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(()())\") == [0, 0, 0]\nassert     parse_nested_parens(\"((()()))\") == [0, 1, 2]\nassert     parse_nested_parens(\"(((()()))\") == [0, 1, 2, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"(()(())())\") == [2, 2, 1]\nassert     parse_nested_parens(\"(()(()(()()))((()())((()()(((()(()()))((())))((())))((()((((()())(((()()(((((()))()(()(((((()((((((()((((()(()()))(()(()(()()(()()(()(()))))))))))()()((((((((((((((((((((()(((((((((((((((((((((((((((((()(())(())()()(((()((()(()(()()(()(())))))))))))()(()(()(()))(()))((()))()))()(()(((()((()()()(()(((((((((((((((((((((((())))))))))))))(())(()(()(()((()(()(()))()()()((((())((()(((((((((()(()(((((((()))(()(())()(((()(())()()(((()(()(()()(((((((((())))(()(()(()(((((((((((((((((((((((((()))(()(((((((((()()(((((((())(()(((((((((((((((((((((((((((((((((((((((((((((((((((()((())(()))(((((()(()))(((((()))(((((()))()())())()(((((())(())()(((()))()()(()((()()(()(((((((((((((((((((((((((((((((((((((((((((((((((())))))()((()(()))()((((())((()()((()((()(((()(((((()(((()(((((((()))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_substring(['This is a test', 'Is this a test'], 'a') == ['Is this a test']\nassert     filter_by_substring(['This is a test', 'Is this a test'], 't') == ['Is this a test']\nassert     filter_by_substring(['This is a test', 'Is this a test'], 'test') == ['This is a test', 'Is this a test']\nassert     filter_by_substring(['This is a test', 'Is this a test'], 'testa') == []\nassert     filter_by_substring(['This is a test', 'Is this a test'], 'testa') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_substring(['abc', 'ade', 'abcd', 'aab'], 'ab') == ['abc', 'abcd']\nassert     filter_by_substring(['aab', 'aac', 'abd'], 'ab') == ['aab', 'abd']\nassert     filter_by_substring(['xab', 'xac', 'xb', 'abc', 'xad'], 'x') == ['xab', 'xac', 'xad']\nassert     filter_by_substring(['xab', 'xac', 'xb', 'abc', 'xad'], 'xac') == ['xac']\n\n\ndef filter_by_substring_v2(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"word\", \"banana\", \"ocean\", \"anana\"], \"anana\") == \\\n        [\"anana\"]\nassert filter_by_substring([\"word\", \"banana\", \"ocean\", \"anana\"], \"an\") == \\\n        [\"banana\", \"anana\"]\nassert filter_by_substring([\"word\", \"banana\", \"ocean\", \"anana\"], \"wa\") == \\\n        [\"word\", \"banana\"]\n\n\ndef split_by_delimiter(s: str, delimiter: str) -> List[str]:\n    \"\"\" Split a string into a list of words using a delimiter.\n    \"\"\"\n    pass\n\n\ndef is_all_caps(s: str) -> bool:\n    \"\"\" Check if a string is all uppercase characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_substring(['ab', 'abc', 'abd', 'abf'], 'ab') == \\\n        ['ab', 'abd', 'abf']\nassert     filter_by_substring(['ab', 'abc', 'abd', 'abf'], 'abc') == \\\n        ['ab', 'abd', 'abf']\nassert     filter_by_substring(['ab', 'abc', 'abd', 'abf'], 'c') == \\\n        ['abd', 'abf']\nassert     filter_by_substring(['ab', 'abc', 'abd', 'abf'], 'bb') == \\\n        []\nassert     filter_by_substring(['ab', 'abc', 'abd', 'abf'], 'ef') == \\\n        ['ab', 'abf']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"hell\", \"world\", \"hello\", \"welcome\"], \"hell\") == \\\n        [\"hell\", \"world\"]\nassert     filter_by_substring([\"hell\", \"world\", \"hello\", \"welcome\"], \"ello\") == \\\n        [\"hello\", \"welcome\"]\nassert     filter_by_substring([\"hell\", \"world\", \"hello\", \"welcome\"], \"ello\") == []\nassert     filter_by_substring([\"hell\", \"world\", \"hello\", \"welcome\"], \"e\") == \\\n        [\"hell\", \"world\", \"hello\", \"welcome\"]\nassert     filter_by_substring([\"hell\", \"world\", \"hello\", \"welcome\"], \"\") == \\\n        [\"hell\", \"world\", \"hello\", \"welcome\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"aa\", \"bbb\", \"bbbb\", \"cc\", \"dd\", \"bb\"], \"bb\") == [\"bbb\", \"bbbb\"]\nassert     filter_by_substring([\"aa\", \"bbb\", \"bbbb\", \"cc\", \"dd\", \"bb\"], \"bbb\") == [\"bbb\", \"bbbb\"]\nassert     filter_by_substring([\"aa\", \"bbb\", \"bbbb\", \"cc\", \"dd\", \"bb\"], \"bbb\") == [\"bbb\", \"bbbb\"]\nassert     filter_by_substring([\"aa\", \"bbb\", \"bbbb\", \"cc\", \"dd\", \"bb\"], \"bbbb\") == [\"bbbb\"]\nassert     filter_by_substring([\"aa\", \"bbb\", \"bbbb\", \"cc\", \"dd\", \"bb\"], \"bbbbb\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"as\", \"b\", \"c\", \"d\"], \"a\") == [\"as\", \"b\"]\nassert     filter_by_substring([\"as\", \"b\", \"c\", \"d\"], \"f\") == []\nassert     filter_by_substring([\"as\", \"b\", \"c\", \"d\"], \"as\") == [\"as\", \"as\"]\nassert     filter_by_substring([\"as\", \"b\", \"c\", \"d\"], \"asdf\") == [\"as\", \"as\"]\nassert     filter_by_substring([\"as\", \"b\", \"c\", \"d\"], \"\") == [\"as\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"hello\", \"world\", \"123\", \"hello world\"], \"hello\") == [\"hello\", \"hello world\"], \\\n        \"Not correct! Write new assert to pass the test\"\nassert     filter_by_substring([\"world\", \"hello\", \"hello world\"], \"hello\") == [\"hello\", \"hello world\"], \\\n        \"Not correct! Write new assert to pass the test\"\nassert     filter_by_substring([\"1234\", \"hello\", \"world\", \"hello world\"], \"hello\") == [\"hello\", \"hello world\"], \\\n        \"Not correct! Write new assert to pass the test\"\nassert     filter_by_substring([\"world\", \"hello\", \"hello world\"], \"world\") == [], \\\n        \"Not correct! Write new assert to pass the test\"\nassert     filter_by_substring([\"hello\", \"world\", \"hello world\"], \"world\") == [\"world\"], \\\n        \"Not correct! Write new assert to pass the test\"\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"hello\", \"world\", \"\", \"Python\", \"how\", \"are\", \"you\", \"?\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], '?') == [\"?\", \"?\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert     filter_by_substring([\"hello\", \"world\", \"\", \"Python\", \"how\", \"are\", \"you\", \"?\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], 'ee') == []\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1,2,3,4,5]) == (15, 120)\nassert     sum_product([-1,-2,-3,-4,-5]) == (-15, -120)\nassert     sum_product([-1,1,1,1,1,1,1,1,1,1,1,1,1]) == (0, -120)\nassert     sum_product([1,-1,1,1,1,1,1,1,1,1,1,1,1]) == (0, 0)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 60)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\n\ndef sum_recursive(numbers: List[int]) -> int:\n    \"\"\" Return a sum of given list of integers using recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef sum_product2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n\nassert \n\ndef longest_consecutive_sequence(numbers: List[int]) -> int:\n    \"\"\" For a given list of integers, return the length of the longest consecutive sequence.\n    Empty sequence should have length of 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (30, 360)\nassert     sum_product([1, -2, 3, -4, 5, -6]) == (-26, -48)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_product([3, 2, 1]) == (6, 6), \"check the example\"\nassert     sum_product([]) == (0, 1), \"check the empty list\"\nassert     sum_product([0]) == (0, 1), \"check the single number\"\nassert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (50, 3628800), \"check the example\"\n\nprint(\"All tests passed successfully!\")"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-1, -2, -3, -4, -5]) == (-15, -120)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 0]) == (15, 0)\nassert     sum_product([-1, -2, -3, -4, -0]) == (-15, 0)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_product([1, 2, 3, 4, 5]) == (15, 120), \"Fifth\"\n    assert sum_product([1, -1, 1, -1]) == (0, -2), \"First\"\n    "
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 3, 4, 5, 6, 7, 8, 8]\n\ndef rolling_max_strict(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n\n\ndef rolling_avg(numbers: List[int]) -> List[float]:\n    \"\"\" From a given list of integers, generate a list of rolling mean element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n\n\ndef rolling_range(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling range element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Actual: \" + str(rolling_max([1, 2, 3, 4, 5]))\nassert     rolling_max([3, 4, 5, 1, 2]) == [3, 4, 5, 5, 5], \"Actual: \" + str(rolling_max([3, 4, 5, 1, 2]))\nassert     rolling_max([3, 4, 5, 1, 2, 6, 7, 8, 9]) == [3, 4, 5, 5, 5, 6, 7, 7, 8], \"Actual: \" + str(rolling_max([3, 4, 5, 1, 2, 6, 7, 8, 9]))\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], \"Actual: \" + str(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nassert     rolling_max([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5], \"Actual: \" + str(rolling_max([-1, -2, -3, -4, -5]))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Should return an array containing the numbers\"\nassert     rolling_max([1, 2, 3, 3, 3, 3]) == [1, 2, 3, 3, 3, 3], \"Should return an array containing the numbers\"\nassert     rolling_max([3, 4, 5, 6, 7, 2, 1, 7, 8, 2, 1, 7, 8]) == [3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 8, 8], \"Should return an array containing the numbers\"\nassert     rolling_max([3, 4, 5, 6, 7, 2, 1, 7, 8, 2, 1, 7, 8, 8, 8, 8]) == [3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8], \"Should return an array containing the numbers\"\n\ndef rolling_max_sum(numbers: List[int]) -> Tuple[List[int], int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n    Also generate a sum of all elements in this list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef partition(array: List[int], left: int, right: int) -> int:\n    \"\"\" Partition the given list of integers in a way that all the elements in the left partition are less\n    than the current element and all the elements in the right partition are greater than the current element.\n    \"\"\"\n    pass\n\n\ndef partition_with_pivot(array: List[int], left: int, right: int) -> int:\n    \"\"\" Partition the given list of integers in a way that all the elements in the left partition are less\n    than the current element and all the elements in the right partition are greater than the current element.\n    \"\"\"\n    pass\n\n\ndef insertion_sort(array: List[int]) -> None:\n    \"\"\" Sort the given list of integers using the insertion sort algorithm.\n    \"\"\"\n    pass\n\n\ndef selection_sort(array: List[int]) -> None:\n    \"\"\" Sort the given list of integers using the selection sort algorithm.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum until given moment in the sequence.\n    \"\"\"\n    pass\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n\n\ndef rolling_avg(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling average element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n\n\ndef rolling_sliding_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of sliding maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef rolling_max2(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([2, 2, 3, 2, 4]) == [2, 3, 4, 4, 4]\nassert     rolling_max([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([3, 4, 2, 1]) == [3, 4, 2, 1]\nassert     rolling_max([5, 1, 3, 4]) == [5, 5, 4, 4]\n\nassert     rolling_max([5, 1, 3, 4, 3, 2, 1]) == [5, 5, 5, 4, 3, 3, 3]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [4,    5,    6,    3,    4,    2] == rolling_max([4, 5, 6, 3, 4, 2])\nassert     [4,    5,    6,    3,    4,    2] == rolling_max([4,    5,    6,    3,    4,    2])\nassert     [5,    6,    5,    6,    5,    6] == rolling_max([5,    6,    5,    6,    5,    6])\nassert     [6,    6,    6,    6,    6,    6] == rolling_max([6,    6,    6,    6,    6,    6])\nassert     [5,    5,    5,    5,    5,    5] == rolling_max([5,    5,    5,    5,    5,    5])\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_palindrome('a') == 'aa'\nassert     make_palindrome('ac') == 'acac'\nassert     make_palindrome('aab') == 'abaaba'\nassert     make_palindrome('aac') == 'aacaca'\nassert     make_palindrome('abb') == 'abbba'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \n\nif __name__ == '__main__':\n    assert is_palindrome('aa') == True\n    assert is_palindrome('bb') == True\n    "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_palindrome('hello') == 'hello'\nassert     make_palindrome('abbbab') == 'abbbab'\nassert     make_palindrome('racecar') == 'racecar'\nassert     make_palindrome('raceca') == 'racecar'\nassert     make_palindrome('alooalu') == 'alooalu'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef longest_palindrome(string: str) -> str:\n    \"\"\" Find the longest palindrome that is a prefix of the supplied string.\n    Algorithm idea is simple:\n    - Find the longest prefix of the supplied string that is a palindrome.\n    - Return it concatenated with the supplied string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"aba\"\nassert     make_palindrome(\"abba\") == \"abba\"\nassert     make_palindrome(\"abcba\") == \"abcba\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     make_palindrome(\"abc\") == \"abcba\"\nassert     make_palindrome(\"abcdef\") == \"abcdefcba\"\nassert     make_palindrome(\"abcdefg\") == \"abcdefgba\"\nassert     make_palindrome(\"abcdcba\") == \"abcdcba\"\nassert     make_palindrome(\"abcdeba\") == \"abcdeba\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef string_xor_2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_xor(\"1010\", \"1011\") == \"10101\"\nassert     string_xor(\"11110\", \"01110\") == \"11100\"\n\n\ndef string_xor_arrays(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two arrays a and b of integers consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as an array.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_xor('101010', '101101') == '100100'\nassert     string_xor('101010', '101110') == '101010'\nassert     string_xor('101010', '101110') == '101010'\nassert     string_xor('111111', '111011') == '101010'\nassert     string_xor('111111', '111011') == '111111'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_xor(\"1\", \"1\") == \"0\"\nassert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"0\", \"1\") == \"1\"\nassert     string_xor(\"1\", \"0\") == \"1\"\n\ndef rot_n(s: str, n: int, a: str = 'a', b: str = 'b') -> str:\n    \"\"\" Rotate by n characters.\n    The function can be called with one or two arguments.\n    If called with one argument, the argument is considered to be the number of characters to rotate by,\n    and the rotation is done from the right.\n    If called with two arguments, the first is the number of characters to rotate by, and the rotation is done from the left.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_xor(\"01\", \"01\") == \"0\"\nassert     string_xor(\"110\", \"11110\") == \"101\"\nassert     string_xor(\"101010\", \"101010\") == \"101010\"\nassert     string_xor(\"101010\", \"101101010\") == \"101101010\"\nassert     string_xor(\"101010\", \"101101010\") == \"101101010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_xor('10110', '10101') == '10101', 'Should be 10101'\nassert     string_xor('10110', '10111') == '10110', 'Should be 10110'\nassert     string_xor('10110', '11101') == '10001', 'Should be 10001'\nassert     string_xor('10110', '11111') == '10110', 'Should be 10110'\nassert     string_xor('10110', '11101') == '10110', 'Should be 10110'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_xor('1', '1') == '0'\nassert     string_xor('1', '0') == '1'\nassert     string_xor('0', '1') == '1'\nassert     string_xor('0', '0') == '0'\n\ndef string_to_int(string: str) -> int:\n    \"\"\" Convert string to int. \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_xor(\"101010\", \"1011010\") == \"10101010\"\nassert     string_xor(\"101010\", \"101101101010\") == \"101101010\"\nassert     string_xor(\"101010\", \"101101101010\") == \"101101010\"\nassert     string_xor(\"101010\", \"101101101010\") == \"101101010\"\nassert     string_xor(\"101010\", \"101101101010\") == \"101101010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef byte_xor(a: bytes, b: bytes) -> bytes:\n    \"\"\" Input are two bytes arrays a and b of the same length.\n    Perform binary XOR on these inputs and return result also as a bytes array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_xor('11', '1') == '10', \"XOR(1, 1)!= 10\"\nassert     string_xor('10101', '10101') == '0', \"XOR(a, a)!= 0\"\nassert     string_xor('101010', '101010') == '10101010', \"XOR(a, a)!= a\"\nassert     string_xor('101010', '101101') == '101101', \"XOR(a, a)!= a\"\nassert     string_xor('101010', '101010') == '101010', \"XOR(a, a)!= a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     longest([\"dog\", \"cat\", \"bird\"]) == \"dog\"\nassert     longest([\"dog\", \"cat\", \"bird\", \"horse\"]) == \"horse\"\nassert     longest([\"dog\", \"cat\", \"bird\", \"horse\"]) == \"dog\"\nassert     longest([\"dog\", \"cat\", \"bird\", \"horse\", \"goose\"]) == \"goose\"\nassert     longest([\"dog\", \"cat\", \"bird\", \"horse\", \"goose\", \"fox\"]) == \"fox\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     longest([\"a\", \"asdf\", \"asdfasdfasdf\"]) == \"asdfasdfasdf\"\nassert     longest([\"a\", \"asdf\"]) == \"asdf\"\nassert     longest([\"\", \"\"]) == \"asdf\"\nassert     longest([\"a\", \"asdf\"]) == \"asdf\"\nassert     longest([]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     longest([\"abc\", \"cba\", \"daf\", \"abf\"]) == \"abc\"\nassert     longest([\"cba\", \"daf\", \"abf\"]) == \"cba\"\nassert     longest([\"daf\", \"abf\"]) == \"daf\"\nassert     longest([\"abc\", \"daf\", \"abf\"]) == \"abf\"\nassert     longest([\"cba\", \"daf\", \"abf\", \"abc\", \"daf\", \"abf\"]) == \"abf\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     longest([\"hi\", \"hallo\", \"world\"]) == \"hallo\", \"incorrect result for case #1\"\nassert     longest([\"hello\", \"world\", \"spam\", \"eggs\"]) == \"hello\", \"incorrect result for case #2\"\nassert     longest([\"I\", \"like\", \"apples\", \"bananas\", \"you\", \"like\", \"bananas\"]) == \"bananas\", \"incorrect result for case #3\"\nassert     longest([\"apples\", \"bananas\", \"you\", \"like\", \"bananas\"]) == \"apples\", \"incorrect result for case #4\"\nassert     longest([\"sport\", \"stop\", \"the\", \"world\", \"sport\", \"is\", \"fun\"]) == \"sport\", \"incorrect result for case #5\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nassert longest(['aa', 'bb', 'ab', 'ba']) == 'ba'\nassert longest(['ac', 'bd', 'aa']) == 'aa'\nassert longest(['a', 'b']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     longest([\"a\", \"abc\", \"abcd\", \"abcde\"]) == \"abcde\"\nassert     longest([\"a\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]) == \"abcdefghij\"\nassert     longest([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"ab\"]) == \"ab\"\nassert     longest([\"ab\", \"a\"]) == \"a\"\nassert     longest([\"ab\", \"a\", \"\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef longest_length(strings: List[str]) -> Optional[int]:\n    \"\"\" Return the length of the longest string in the input list, or None if the list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     longest([\"11\", \"22\", \"33\", \"55\", \"44\"]) == \"11\"\nassert     longest([\"a\", \"abc\", \"abd\", \"aa\"]) == \"abc\"\nassert     longest([\"1\", \"\", \"\"]) == \"1\"\nassert     longest([]) is None\nassert     longest([\"\", \"a\", \"\"]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     longest([\"hi\", \"hell\", \"hello\"]) == \"hell\"\nassert     longest([\"hi\", \"hello\"]) == \"hello\"\nassert     longest([\"hello\"]) == \"hello\"\nassert     longest([\"\"]) == None\nassert     longest([\"\", \"\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     longest([\"abcd\", \"efgh\", \"ijkl\"]) == \"efgh\"\nassert     longest([\"abc\", \"efgh\", \"ijkl\"]) == \"abc\"\nassert     longest([\"abc\", \"efgh\", \"ijkl\", \"\"]) == \"efgh\"\nassert     longest([\"\"]) == None\nassert     longest([]) == None\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \ngreatest_common_divisor(12, 6) == 6\ngreatest_common_divisor(10, 3) == 1\ngreatest_common_divisor(15, 10) == 5\ngreatest_common_divisor(16, 16) == 16\ngreatest_common_divisor(16, 4) == 4\ngreatest_common_divisor(15, 15) == 15\ngreatest_common_divisor(32, 5) == 32\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \ngreatest_common_divisor(10, 5) == 5\ngreatest_common_divisor(2, 5) == 1\ngreatest_common_divisor(4, 9) == 1\ngreatest_common_divisor(5, 5) == 5\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(10, 15) == 5\ngreatest_common_divisor(10, 7) == 1\ngreatest_common_divisor(1, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(1, 3) == 1\ngreatest_common_divisor(100, 50) == 10\ngreatest_common_divisor(100, 44) == 4\ngreatest_common_divisor(10, 20) == 10\ngreatest_common_divisor(10, 30) == 10\ngreatest_common_divisor(100, 200) == 10\ngreatest_common_divisor(100, 300) == 10\ngreatest_common_divisor(100, 400) == 10\ngreatest_common_divisor(100, 500) == 10\ngreatest_common_divisor(100, 600) == 10\ngreatest_common_divisor(100, 700) == 10\ngreatest_common_divisor(100, 800) == 10\ngreatest_common_divisor(100, 900) == 10\ngreatest_common_divisor(100, 1000) == 10\ngreatest_common_divisor(100, 2000) == 10\ngreatest_common_divisor(100, 3000) == 10\ngreatest_common_divisor(101, 301) == 101\ngreatest_common_divisor(102, 301) == 101\ngreatest_common_divisor(103, 301) == 101\ngreatest_common_divisor(104, 301) == 101\ngreatest_common_divisor(105, 301) == 101\ngreatest_common_divisor(106, 301) == 101\ngreatest_common_divisor(107, 301) == 101\ngreatest_common_divisor(108, 301) == 101\ngreatest_common_divisor(109, 301) == 101\ngreatest_common_divisor(110, 301) == 101\ngreatest_common_divisor(111, 301) == 101\ngreatest_common_divisor(112, 301) == 101\ngreatest_common_divisor(113, 301) == 101\ngreatest_common_divisor(114, 301) == 101\ngreatest_common_divisor(115, 301) == 101\ngreatest_common_divisor(116, 301) == 101\ngreatest_common_divisor(117, 301) == 101\ngreatest_common_divisor(118, 301) == 101\ngreatest_common_divisor(119, 301) == 101\ngreatest_common_divisor(120, 301) == 101\ngreatest_common_divisor(121, 301) == 101\ngreatest_common_divisor(122, 301) == 101\ngreatest_common_divisor(123, 301) == 101\ngreatest_common_divisor(124, 301) == 101\ngreatest_common_divisor(125, 301) == 101\ngreatest_common_divisor(126, 301) == 101\ngreatest_common_divisor(127, 301) == 101\ngreatest_common_divisor(128, 301) == 101\ngreatest_common_divisor(129, 301) == 101\ngreatest_common_divisor(130, 301) == 101\ngreatest_common_divisor(131, 301) == 101\ngreatest_common_divisor(132, 301) == 101\ngreatest_common_divisor(133, 301) == 101\ngreatest_common_divisor(134, 301) == 101\ngreatest_common_divisor(135, 301) == 101\ngreatest_common_divisor(136, 301) == 101\ngreatest_common_divisor(137, 301) == 101\ngreatest_common_divisor(138, 301) == 10"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(1, 2) == 1\nassert greatest_common_divisor(3, 7) == 1\nassert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(5, 7) == 1\nassert greatest_common_divisor(0, 0) == 0\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(3, 7) == 1\nassert     greatest_common_divisor(7, 3) == 1\nassert     greatest_common_divisor(3, 9) == 3\nassert     greatest_common_divisor(5, 9) == 1\nassert     greatest_common_divisor(5, 5) == 5\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(7, 7) == 7\nassert     greatest_common_divisor(6, 6) == 6\nassert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(6, 12) == 6\nassert     greatest_common_divisor(9, 12) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(8, 8) == 8\nassert     greatest_common_divisor(24, 8) == 8\nassert     greatest_common_divisor(12, 4) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \ngreatest_common_divisor(18, 12) == 6\ngreatest_common_divisor(20, 12) == 4\ngreatest_common_divisor(20, 7) == 1\ngreatest_common_divisor(24, 10) == 2\ngreatest_common_divisor(22, 10) == 2\ngreatest_common_divisor(9, 6) == 3\ngreatest_common_divisor(21, 6) == 3\ngreatest_common_divisor(21, 10) == 1\ngreatest_common_divisor(12, 10) == 2\ngreatest_common_divisor(18, 10) == 2\ngreatest_common_divisor(18, 19) == 1\ngreatest_common_divisor(20, 19) == 1\ngreatest_common_divisor(20, 15) == 5\ngreatest_common_divisor(20, 16) == 4\ngreatest_common_divisor(20, 17) == 1\ngreatest_common_divisor(20, 18) == 2\ngreatest_common_divisor(24, 18) == 6\ngreatest_common_divisor(24, 15) == 5\ngreatest_common_divisor(24, 16) == 6\ngreatest_common_divisor(24, 17) == 1\ngreatest_common_divisor(24, 18) == 2\ngreatest_common_divisor(24, 19) == 1\ngreatest_common_divisor(24, 20) == 2\ngreatest_common_divisor(24, 21) == 2\ngreatest_common_divisor(24, 22) == 2\ngreatest_common_divisor(24, 23) == 1\ngreatest_common_divisor(24, 24) == 1\ngreatest_common_divisor(24, 25) == 1\ngreatest_common_divisor(24, 26) == 2\ngreatest_common_divisor(24, 27) == 1\ngreatest_common_divisor(24, 28) == 2\ngreatest_common_divisor(24, 29) == 1\ngreatest_common_divisor(24, 30) == 2\ngreatest_common_divisor(24, 31) == 1\ngreatest_common_divisor(24, 32) == 2\ngreatest_common_divisor(24, 33) == 1\ngreatest_common_divisor(24, 34) == 2\ngreatest_common_divisor(24, 35) == 1\ngreatest_common_divisor(24, 36) == 2\ngreatest_common_divisor(24, 37) == 1\ngreatest_common_divisor(24, 38) == 2\ngreatest_common_divisor(24, 39) == 1\ngreatest_common_divisor(24, 40) == 2\ngreatest_common_divisor(24, 41) == 1\ngreatest_common_divisor(24, 42) == 2\ngreatest_common_divisor(24, 43) == 1\ngreatest_common_divisor(24, 44) == 2\ngreatest_common_divisor(24, 45) == 1\ngreatest_common_divisor(24, 46) == 2\ngreatest_common_divisor(24, 47) == 1\ngreatest_common_divisor(24, 48) == 2\ngreatest_common_divisor(24, 49) == 1\ngreatest_common_divisor(24, 50) == 2\ngreatest_common_divisor(24, 51) == 1\ngreatest_common_divisor(24, 52) == 2\ngreatest_common_divisor(24, 53) == 1\ngreatest_common_divisor(24, 54) == 2\ngreatest_common_divisor(24, 55) == 1\ngreatest_common_divisor(24, 56) == 2\ngreatest_common_divisor(24, 57) == 1\ngreatest_common_divisor(24, 58) == 2\ngreatest_common_divisor(24, 59) == 1\ngreatest_common_divisor(24, 60) == 2\ngreatest_common_divisor(24, 61) == "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(7, 2) == 1, \"7, 2\"\nassert     greatest_common_divisor(3, 6) == 3, \"3, 6\"\nassert     greatest_common_divisor(3, 7) == 1, \"3, 7\"\nassert     greatest_common_divisor(3, 9) == 3, \"3, 9\"\nassert     greatest_common_divisor(3, 12) == 3, \"3, 12\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"\") == [\"\"]\nassert     all_prefixes(\"abc\") == [\"\"]\nassert     all_prefixes(\"abcdef\") == [\"\"]\nassert     all_prefixes(\"abcdefg\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]\nassert     all_prefixes(\"abcdefgh\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"ababc\") == [\"\", \"a\", \"ab\", \"abc\", \"abab\", \"ababc\", \"ababab\", \"abababc\", \"abababab\", \"ababababc\"]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"a\") == [\"\"]\nassert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcde\") == [\"\", \"a\", \"ab\", \"abc\", \"abde\", \"abcde\"]\nassert     all_prefixes(\"abcdef\") == [\"\", \"a\", \"ab\", \"abc\", \"abde\", \"abcde\", \"abdef\", \"abcdef\"]\nassert     all_prefixes(\"abcdefg\") == [\"\", \"a\", \"ab\", \"abc\", \"abde\", \"abcde\", \"abdef\", \"abcdef\", \"abdefg\", \"abcdefg\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     all_prefixes('') == ['']\nassert     all_prefixes('a') == ['', 'a']\nassert     all_prefixes('ab') == ['', 'a', 'ab', 'a', 'b', 'ab']\nassert     all_prefixes('abc') == ['', 'a', 'ab', 'a', 'b', 'ac', 'ab', 'abc', 'a', 'bc', 'abc', 'ab', 'b', 'c', 'abc', 'ab', 'bc', 'abc', 'a', 'bc', 'abc', 'ab', 'b', 'c', 'abc', 'ab', 'bc', 'abc']\nassert     all_prefixes('abcde') == ['', 'a', 'ab', 'a', 'ab', 'abc', 'ab', 'abde', 'a', 'abde', 'ab', 'abcde', 'abde', 'ab', 'abc', 'abde', 'abc', 'abde', 'abcde', 'ab', 'abc', 'abde', 'abde', 'abce', 'abc', 'abce', 'abde', 'abce', 'abcde', 'ab', 'abce', 'abcde', 'abce', 'abde', 'abce', 'abcde', 'ab', 'abce', 'abcde', 'abde', 'abce', 'abcde', 'abce', 'abde', 'abce', 'abcde']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"banana\") == [\"ban\", \"ban\", \"ban\", \"ban\", \"ana\"]\nassert     all_prefixes(\"pineapple\") == [\"pin\", \"pina\", \"pine\", \"pine\", \"an\", \"na\", \"na\", \"na\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abde\", \"abcde\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef longest_prefix(string: str) -> str:\n    \"\"\" Return longest prefix from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     all_prefixes('') == []\nassert     all_prefixes('a') == ['a']\nassert     all_prefixes('ab') == ['ab']\nassert     all_prefixes('abc') == ['ab', 'abc']\nassert     all_prefixes('abcd') == ['ab', 'abc', 'abcd']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"abcdef\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]\nassert     all_prefixes(\"xyz\") == [\"\", \"x\", \"xy\", \"xyz\"]\nassert     all_prefixes(\"aaa\") == [\"\", \"a\", \"aa\", \"aaa\"]\nassert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcdefghijklm\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('ababab') == ['a', 'ab', 'aba', 'abab', 'ababab', 'abababab', 'ababababa', 'ababababab', 'abababababab', 'ababababababab', 'abababababababab', 'ababababababababab', 'abababababababababab', 'ababababababababababab']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('abab') == ['', 'a', 'ab', 'aba', 'abab']\nassert     all_prefixes('abacab') == ['', 'a', 'ab', 'aba', 'abac', 'abaca', 'abacab', 'abacabca', 'abacabcaab', 'abacabcaaba', 'abacabcaabac', 'abacabcaabaca', 'abacabcaabacab', 'abacabcaabacaba', 'abacabcaabacabac', 'abacabcaabacabaca', 'abacabcaabacabacab', 'abacabcaabacabacabca', 'abacabcaabacabacabcaa', 'abacabcaabacabacabcaab', 'abacabcaabacabacabcaaba', 'abacabcaabacabacabcaabac', 'abacabcaabacabacabcaabaca', 'abacabcaabacabacabcaabacab', 'abacabcaabacabacabcaabacaba', 'abacabcaabacabacabcaabacabac', 'abacabcaabacabacabcaabacabaca', 'abacabcaabacabacabcaabacabacab']\n\ndef find_prefix_count(string: str, prefixes: List[str]) -> List[int]:\n    \"\"\" Return list of counts of all prefixes in the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert         string_sequence(0) == \"0\"\nassert         string_sequence(1) == \"0 1\"\nassert         string_sequence(2) == \"0 1 2\"\nassert         string_sequence(3) == \"0 1 2 3\"\nassert         string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(0) == ''\nassert     string_sequence(1.2) == '0'\n\ndef word_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited words starting from \"a\" upto n words inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nstring_sequence(0) == \"0\"\nassert string_sequence(1) == \"0 1\"\nassert string_sequence(5) == \"0 1 2 3 4\"\n\ndef binary_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited binary numbers starting from 0 upto n exclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return''.join(str(i) for i in range(0, n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_sequence(3) == '0 1 2'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(0) == ''\nassert     string_sequence(-1) == ''\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    string_sequence(0) == ''\nassert \n    string_sequence(1) == '0'\nassert \n    string_sequence(2) == '0 1'\nassert \n    string_sequence(3) == '0 1 2'\nassert \n    string_sequence(5) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \nassert \n\ndef number_of_times_repeated(string: str) -> int:\n    \"\"\" Count the number of times a space-delimited number appears in the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"AAaa\") == 2\n\n\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_distinct_characters('AaBbCcDdEeFfGgHhIi') == 12\nassert     count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     count_distinct_characters('abcDEFghijklmnopqrstuvwxyz') == 26\nassert     count_distinct_characters('abcDefGHijklmnopqrstuvwxyz') == 26\nassert     count_distinct_characters('') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"aA\") == 2\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"aAaaaa\") == 2\nassert     count_distinct_characters(\"abcbbbb\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"\") == 0, \"Empty string\"\nassert     count_distinct_characters(\"a\") == 1, \"One character\"\nassert     count_distinct_characters(\"abcde\") == 5, \"5 characters\"\nassert     count_distinct_characters(\"ABbAaAaAa\") == 4, \"4 distinct characters\"\nassert     count_distinct_characters(\"aA11\") == 3, \"3 distinct characters\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"abcA\") == 3\nassert     count_distinct_characters(\"AbcdA\") == 4\nassert     count_distinct_characters(\"abcDE\") == 5\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"111111\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_distinct_characters('aabBc') == 3\nassert     count_distinct_characters('aabbbccc') == 4\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('') == 0\n\ndef count_distinct_characters_using_hash_table(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('aAa') == 3\nassert     count_distinct_characters('aAAbbb') == 5\nassert     count_distinct_characters('aAAbbbccc') == 6\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert count_distinct_characters(\"abc\") == 3\nassert count_distinct_characters(\"abcAbc\") == 3\nassert count_distinct_characters(\"abcAaBbCc\") == 3\nassert count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef rotate_word(string: str, shift: int) -> str:\n    \"\"\" Given a string, rotate each character by shift positions, in alphabetical order\n        e.g. rotate_word('abcd', 2) returns 'cabd'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_music('..|..|o.|..|..|.o|o|o|..|.o|o|o|o|.o|.o|.o|o|.|..|o..|o|.o|o..') == [1, 2, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1]\nassert     parse_music('o|..|..|.o|o|o|..|.o|o|o|o|.o|.o|.o|o|.|..|o..|o|.o|o..') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1]\nassert     parse_music('o|..|o|.|..|.o|o|o|..|.o|o|o|o|.o|.o|.o|o|.|..|o..|o|.o|o..') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4]\nassert     parse_music('o|..|o|.|..|.o|o|o|..|.o|o|o|o|.o|.o|.o|o|.|..|o..|o|.o|o..') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\ndef parse_chords(chords_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing chord notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each chord last.\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_music(\"o|...\") == [2, 1, 0.5, 0.5, 0.5, 0.5]\nassert     parse_music(\".|..|.o|.|.o|\") == [0.5, 0.5, 0.25, 0.25, 0.25, 0.25]\nassert     parse_music(\".o|.o|.o|.o|.\") == [0.25, 0.25, 0.25, 0.25, 1.0]\nassert     parse_music(\"|.o|.o|.o|.o|.\") == [1.0]\nassert     parse_music(\".|.o|.o|.o|.o|.\") == [1.0]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_music('o|o|o|o|o|o|o|o|o|.|.') == [1, 2, 2, 2, 1]\nassert     parse_music('oo|...|o|..|o|.') == [2, 2, 4, 2, 1]\nassert     parse_music('oo|...|o|..|o|..|o|.') == [2, 2, 4, 2, 1, 2, 2, 2, 1]\nassert     parse_music('o|..|o|..|o|..|o|..|o|o|o|.|.') == [1, 1, 1, 1, 1, 1, 1, 4, 2, 2, 2, 2, 2, 2]\nassert     parse_music('oo|oo|...|o|...|o|...|o|..|o|...|o') == [4, 2, 2, 2, 2, 4, 2, 2, 2, 4, 4, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_music(\"o|o|o|o|o|o|o|o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_music(\"o3o|.o|o3o|o3o|.o|o3o|o3o|.o|o3o|.o|o3o|o3o|.o|o3o|o3o|o3o|o3o|.o|o3o|.o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o3o|o"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_music(\"o|o|o|o|oo\") == [4, 2, 4, 2, 4, 1, 4, 1, 1, 1, 4, 2, 4]\nassert     parse_music(\"oo.\") == [4, 2, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\".o|o|o|oo\") == [1, 4, 2, 4, 2, 4, 4, 1, 1, 1, 1, 4, 2, 4]\nassert     parse_music(\"..oo\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"oo..\") == [4, 2, 4, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_music('o|.|o|o|o|') == [4, 2, 4, 4, 4]\nassert     parse_music('.|..|..|') == [1, 1, 1, 1, 1]\nassert     parse_music('|..|..|.|') == [1, 1, 1, 1, 1]\n\n\ndef is_int(str: str) -> bool:\n    \"\"\" Return True iff str can be converted to an integer \"\"\"\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n\n\ndef parse_string(s: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_music('o o|.|.|.| o| o o|..| o| o o|..| o|..|..|..|..| o o|..|..|..| o o| o o|..| o| o|..|..|..| o o| o o|..| o|..|..|..| o o|..|..|..|..| o o|..|..|..|..| o o| o o|..|..|..|..|..| o o| o o|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|."
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_music('.o|.o|o.') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.o|.o|o.|o|o|o|o.') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_music(\"o o o o o o o o|o|.|..|..|. o|... o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o..|..|. o|... o o o o o o o o o o o o o o o o o..|..|..|. o|... o o o o o o o o o o o o o o o o o."
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef how_many_times_v2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     how_many_times('aa', 'aa') == 1\nassert     how_many_times('aa', 'a') == 2\nassert     how_many_times('abab', 'a') == 4\nassert     how_many_times('abab', 'ab') == 2\nassert     how_many_times('aaaaaaaaaa', 'a') == 26\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef find_position_of_first(string: str, sub_str: str) -> int:\n    \"\"\" Find the position of the first occurrence of the sub_str in the string.\n        Return -1 if the sub_str is not found\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     how_many_times(string='string', substring='ring') == 2\nassert     how_many_times(string='string', substring='ring') == 2\nassert     how_many_times(string='string', substring='ring') == 2\nassert     how_many_times(string='string', substring='string') == 1\nassert     how_many_times(string='string', substring='string') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     how_many_times('substringsubstring','substring') == 2, 'bug in how_many_times'\nassert     how_many_times('','substring') == 0, 'bug in how_many_times'\nassert     how_many_times('substring', '') == 0, 'bug in how_many_times'\nassert     how_many_times('', '') == 0, 'bug in how_many_times'\n\ndef compute_occurence(string: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef is_unique(string: str) -> bool:\n    \"\"\"Check if the given string has all unique characters\n    \"\"\"\n    pass\n\ndef shift_left(string: str, n: int) -> str:\n    \"\"\" Shift the string n times to the left\n    \"\"\"\n    pass\n\ndef shift_right(string: str, n: int) -> str:\n    \"\"\" Shift the string n times to the right\n    \"\"\"\n    pass\n\ndef remove_chars(string: str, chars: str) -> str:\n    \"\"\" Remove all characters in chars from the string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     how_many_times('AAAAA', 'AAAA') == 1\nassert     how_many_times('AAAAA', 'AA') == 1\nassert     how_many_times('AAAAA', 'AAA') == 2\nassert     how_many_times('AAAAA', 'AAAB') == 1\nassert     how_many_times('AAAAA', 'A') == 5\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     how_many_times(\"qwqweqe\", \"q\") == 5\nassert     how_many_times(\"qwqweqe\", \"qqq\") == 0\nassert     how_many_times(\"qwqweqe\", \"we\") == 2\nassert     how_many_times(\"qwqweqe\", \"wq\") == 1\nassert     how_many_times(\"qwqweqe\", \"ewq\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef are_equal(\n    set_one: typing.Set[typing.Any],\n    set_two: typing.Set[typing.Any]\n) -> bool:\n    \"\"\" Are both sets equal\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     how_many_times('hello', 'lo') == 1, \\\n        'Expected `how_many_times` to return 1, but it is:'+ str(how_many_times('hello', 'lo'))\nassert     how_many_times('aaaa', 'a') == 4, \\\n        'Expected `how_many_times` to return 4, but it is:'+ str(how_many_times('aaaa', 'a'))\nassert     how_many_times('aaaa', 'b') == 0, \\\n        'Expected `how_many_times` to return 0, but it is:'+ str(how_many_times('aaaa', 'b'))\n\ndef replace_all(string: str, character_to_replace: str, replacement_character: str) -> str:\n    \"\"\" Replace all occurences of a character in the original string with a replacement character\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_numbers('zero nine one four three two') == 'zero one two three four'\nassert     sort_numbers('four three two one zero') == 'zero one two three four'\nassert     sort_numbers('seven two five three four six') == 'zero one two three four five six seven'\nassert     sort_numbers('three five four two seven six nine one') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('nine seven eight six five four three two') == 'zero one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"one two three four five\") == \"one two five four three\"\nassert     sort_numbers(\"nine eight seven six five four\") == \"five four eight seven six nine\"\nassert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"eight one seven two three five six\") == \"one two three five six seven eight\"\nassert     sort_numbers(\"five five\") == \"five five\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"five one zero two three seven eight four six\") == \"01234568\"\nassert sort_numbers(\"three five eight one seven two eleven four\") == \"01245679\"\nassert     sort_numbers(\"eight five nineteen eighty four zero nineteen eighty three\") == \"0984019\"\nassert sort_numbers(\"eleven twelve zero thirteen fourteen fifteen sixteen seventeen eighteen nineteen\") == \"0123456789\"\nassert sort_numbers(\"two five six seven eight nine ten eleven twelve\") == \"01245678910\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_numbers('one nine three five two') == 'one two three five nine'\nassert     sort_numbers('three nine one two five') == 'one two three five nine'\nassert     sort_numbers('one five two three four') == 'one two three four five'\nassert     sort_numbers('six one five two three') == 'one two three five six'\nassert     sort_numbers('two five six seven three one') == 'one two three five six seven'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"three nine one two\") == \"one two three nine\"\nassert     sort_numbers(\"nine three two one\") == \"one two three nine\"\nassert     sort_numbers(\"two three one nine\") == \"one two three nine\"\nassert     sort_numbers(\"two one three nine\") == \"one two three nine\"\nassert     sort_numbers(\"one three two nine\") == \"one two three nine\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_numbers(\"one nine three eight two seven six five four\") == \"one nine two seven three eight five six four\"\nassert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"four five three two\") == \"two three four five\"\nassert     sort_numbers(\"six seven eight nine\") == \"nine eight seven six\"\nassert     sort_numbers(\"ten eleven twelve\") == \"twelve eleven ten\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_numbers(\"five nine three two one four\") == \"one two three four five\"\nassert     sort_numbers(\"nine three two five four eight seven six\") == \"two three four five six seven eight\"\nassert     sort_numbers(\"zero nine three five six seven eight\") == \"zero three five six seven eight nine\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_numbers('zero nine one two three four') == 'one two three four zero nine', 'Check the empty case'\nassert     sort_numbers('three three three') == 'three three three', 'Check the repeated case'\nassert     sort_numbers('six three eight four five') == 'three five four six eight', 'Check the normal case'\nassert     sort_numbers('nine nine nine') == 'nine nine nine', 'Check the same case'\nassert     sort_numbers('three nine three') == 'three three three', 'Check the abnormal case'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_numbers(\"2 4 3 5 6 7\") == \"2 3 4 5 6 7\"\nassert     sort_numbers(\"0 1 9 2 8 3 7\") == \"0 1 2 3 7 8 9\"\nassert     sort_numbers(\"6 3 5 4 2 9 8\") == \"2 3 4 5 6 8 9\"\nassert     sort_numbers(\"3 8 5 4 7 9 2\") == \"2 3 4 5 6 7 8 9\"\nassert     sort_numbers(\"9 2 3 8 7 5 4 1\") == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_numbers('three four one five six seven eight two nine') == 'one two three four five six seven eight'\nassert     sort_numbers('eight four six three five two seven nine ten eleven twelve') == 'three five two seven four six eleven twelve ten'\nassert     sort_numbers('eleven twelve ten eleven seven eight five four three') == 'three five four eleven eight seven twelve ten'\nassert     sort_numbers('ten eleven twelve eight seven six five four three') == 'three five four seven eight eleven twelve ten'\nassert     sort_numbers('three five four') == 'three five four'\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (find_closest_elements([1, 1, 2, 3]) == (1, 1)), \"error\"\nassert     (find_closest_elements([1, 1, 2, 3, 5, 7]) == (1, 7)), \"error\"\nassert     (find_closest_elements([5, 7, 1, 3]) == (3, 5)), \"error\"\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 10)), \"error\"\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (2, 11)), \"error\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 2, 3, 4, 5, 10]) == (2, 10)\nassert     find_closest_elements([1, 2, 3, 4, 5, 10, 100]) == (1, 100)\nassert     find_closest_elements([1, 2, 3, 4, 5, 10, 100, 1000]) == (5, 1000)\nassert     find_closest_elements([1, 2, 3, 4, 5, 10, 100, 1000, 10000]) == (5, 10000)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (find_closest_elements([1, 2, 3, 4, 5]) == (3, 4))\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6]) == (3, 6))\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (3, 6))\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (3, 6))\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (3, 6))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5]) == (1.1, 4.4)\nassert     find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 1.1]) == (1.1, 1.1)\nassert     find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 10.1]) == (2.2, 5.5)\n\n\n\ndef best_grades(student_grades: List[List[int]]) -> List[int]:\n    \"\"\" Given a list of lists of student grades, return the student with the best average grade.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_closest_elements([0, 1, 2, 3, 4, 6]) == (0, 4)\nassert     find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (0, 9)\nassert     find_closest_elements([-0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5]) == (-0.4, 0.5)\nassert     find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (0, 9)\nassert     find_closest_elements([0, 0.1, 0.2, 0.3, 0.4, 0.5]) == (0, 0.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [0.99, 0.98, 1.02, 1.01] == find_closest_elements([0.9, 0.99, 1.02, 1.03, 1.01])\nassert [0.98, 1.02] == find_closest_elements([0.98, 0.99, 1.02, 1.03, 1.01])\nassert [0.98, 1.02, 1.03] == find_closest_elements([0.98, 0.99, 1.02, 1.03, 1.04])\nassert [0.98, 1.02, 1.03] == find_closest_elements([0.98, 0.99, 1.02, 1.03, 1.04])\nassert [1.02, 1.03] == find_closest_elements([0.98, 0.99, 1.02, 1.03, 1.04])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    find_closest_elements([12, 32, 3, -432, 1, -1, 300, 11, 55, -999, -0.01]) == (-0.01, 11)\nassert \n    find_closest_elements([1.101, 2.1, 1.1, 3, 4, 5.5, 6.5, 7.5, 8.5, 9.5]) == (8.5, 9.5)\nassert \n    find_closest_elements([1.101, 2.1, 1.1, 3, 4, 5.5, 6.5, 7.5, 8.5, 9.5]) == (8.5, 9.5)\nassert \n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (4, 9)\nassert \n    find_closest_elements([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, -6)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1, 2, 3, 4]) == (1, 4)\nassert     find_closest_elements([1, 1, 1, 1]) == (1, 1)\nassert     find_closest_elements([1, 2, 3]) == (1, 3)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 6)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_closest_elements([0.1, 0.9, 1.0, 1.5]) == (0.1, 1.0)\nassert     find_closest_elements([1.0, 1.9, 3.0, 4.5]) == (1.0, 3.0)\nassert     find_closest_elements([0.5, 1.5, 2.0]) == (0.5, 2.0)\nassert     find_closest_elements([0.5, 0.9, 1.0]) == (0.5, 0.9)\nassert     find_closest_elements([0.5, 0.6, 1.0, 1.9]) == (0.5, 0.6)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef merge_sort(numbers: List[float]) -> List[float]:\n    \"\"\" Sort a supplied list of numbers using the merge sort algorithm\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [ 0, 3, 12 ] == rescale_to_unit( [3, 12, 15] )\nassert     [ 0, 3, 12 ] == rescale_to_unit( [3, 12, 15, 20, 30] )\nassert     [ 1, 4, 11 ] == rescale_to_unit( [-3, 12, 15, 20, 30] )\n\n\ndef rescale_to_unit_v2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([1,2,3]) == [0,0.5,1]\nassert rescale_to_unit([1,2,3,3]) == [0,0.5,1,0.5]\nassert rescale_to_unit([3,2,1]) == [1,0.5,0]\n\ndef rescale_to_unit_2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    numbers.sort()\n    return [ (x - numbers[0]) / (numbers[-1] - numbers[0]) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef log_transform(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a logarithmic transformation to that list,\n    such that the largest number will become 0 and the smallest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([-1, 2, 3, 4]) == [-0.5, 0.5, 0.75, 1.0]\nassert     rescale_to_unit([-0.5, 0.5, 0.75, 1.0]) == [-1, 2, 3, 4]\nassert     rescale_to_unit([0.5, 1.0, 1.5, 2.0]) == [-1, 2, 3, 4]\nassert     rescale_to_unit([0.5, 0.75, 1.0, 1.5, 2.0]) == [-1, 2, 3, 4]\nassert     rescale_to_unit([0.75, 1.0, 1.5, 2.0]) == [-1, 2, 3, 4]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([10, 20, 30]) == [0.1, 0.2, 0.3], \"Rescale to unit\"\nassert     rescale_to_unit([-10, -20, -30]) == [-0.1, -0.2, -0.3], \"Rescale to unit\"\nassert     rescale_to_unit([1, 2, 3]) == [0.1, 0.2, 0.3], \"Rescale to unit\"\nassert     rescale_to_unit([-1, -2, -3]) == [-0.1, -0.2, -0.3], \"Rescale to unit\"\n\nprint(rescale_to_unit([10, 20, 30]))\nprint(rescale_to_unit([-10, -20, -30]))\nprint(rescale_to_unit([1, 2, 3]))\nprint(rescale_to_unit([-1, -2, -3]))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [0, 0.7, 0.9, 1, 1.1, 1.2, 1.3, 1.4] == rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8])\n\ndef rescale_to_unit_no_numpy(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    numbers.sort()\n    minimum = numbers[0]\n    maximum = numbers[-1]\n\n    for i in range(len(numbers)):\n        numbers[i] -= minimum\n        numbers[i] /= maximum - minimum\n\n    return numbers\n\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([100, 1, 2, 3, 4]) == [0.01, 0.25, 0.5, 0.75, 1]\nassert     rescale_to_unit([0.1, 0.2, 0.3, 0.4, 0.5]) == [0.05, 0.1, 0.15, 0.2, 0.25]\nassert     rescale_to_unit([1, 0.1, 1, 1, 1]) == [0.1, 0.1, 0.1, 0.1, 0.1]\nassert     rescale_to_unit([0.5, 0.5, 0.5, 0.5, 0.5, 0.5]) == [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.5, 0.75, 0.875, 1.0]\nassert     rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]) == [0.2, 0.3, 0.4, 0.5, 0.6]\nassert     rescale_to_unit([4.0, 3.0, 2.0, 1.0]) == [0.25, 0.5, 0.75, 1.0]\n\ndef rescale_to_unit_v2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    return [num - min(numbers) for num in numbers]\n\n\ndef unit_scale(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    return [num / max(numbers) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([-1, 2, 3]) == [0, -0.5, 1]\nassert     rescale_to_unit([1, -2, 3]) == [-0.5, 0, 1]\nassert     rescale_to_unit([1, 2, -3]) == [-0.5, 0.5, 0]\nassert     rescale_to_unit([-1, -2, -3]) == [0, 0.5, 0]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_integers([10, 20, 30, '20', '40', '50', '60']) == [10, 20, 30, 40, 50, 60], \"Wrong result for filter_integers\"\nassert     filter_integers(['10', 20, 30, '20', '40', '50', '60']) == [], \"filter_integers must return an empty list if no integers in the list\"\n\ndef filter_odd_integers(values: List[int]) -> List[int]:\n    \"\"\" Filter list of integers and return only integers with odd value\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([3.14, 2.17, -4, 0, 10]) == [3.14, 2.17, -4, 0, 10]\nassert     filter_integers([]) == []\nassert     filter_integers([3, None, 2, 1]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([3, 1, 2]) == [3, 1, 2]\nassert     filter_integers([-5, 8, 2, 3, 1]) == [-5, 2, 1]\nassert     filter_integers([4.5, 8, 2, 3, 1]) == [4.5, 2, 1]\nassert     filter_integers([]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_integers([\n        3,\n        'a',\n        True,\n        4.5,\n        {'key1': 1, 'key2': 2},\n        None,\n        [],\n    ]) == [3, 4, 5, {'key1': 1, 'key2': 2}, None]\n\n\ndef merge_and_sort(left: List[Any], right: List[Any]) -> List[Any]:\n    \"\"\" Merge and sort given lists of any python values\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_integers( [1, 2, 3, 4.0, 5] ) == [1, 2, 3, 5], \"One test failed\"\nassert     filter_integers( [1, 2, \"a\", 4.0, 5] ) == [1, 2, 5], \"One test failed\"\nassert     filter_integers( [1, 2, \"a\", 4, 5] ) == [1, 2, 5], \"One test failed\"\nassert     filter_integers( [1, 2, 3, 4.0, \"5\"] ) == [1, 2, 3, 5], \"One test failed\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(filter_integers([1, 2, 3, 'apple', None, [1.5, 1.8], [2, 'banana'], {'12': 123}]))\n    print(filter_integers([1.5, 1.8, 1.7, [12.3, 2.2], 1, 2, 3])"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [0, 1, 2, 3, 4] == filter_integers(['0', '1', '2', '3', '4'])\nassert     [] == filter_integers([])\nassert     [] == filter_integers([0, '1', '2', '3', '4'])\nassert     [1, 3, 5] == filter_integers([0, 1, 2, 3, 4, 5, 6, '1', '3', '5'])\nassert     [-1, 0, 1, 2, 3, 4, 5] == filter_integers([-1.0, 0, 1, 2, 3, 4, 5, '1', '3', '5'])\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_integers([\"abc\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1, \"abc\", \"xyz\", 3, \"4\", \"5\", \"6\"]) == [1, 3, 5, 6]\nassert     filter_integers([1, 2, \"abc\", \"xyz\", 3, \"4\", \"5\", 6]) == [1, 2, 3, 6]\n\ndef map_integers(values: List[int]) -> List[int]:\n    \"\"\" Convert list of any python values only for integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 'a', True, 4, 1.1]) == [1, 1, 1, 1, 4, 1], 'check 1'\nassert     filter_integers([1, 2, 'a', True, 4, 1.1, 'abc']) == [1, 1, 1, 1, 4, 1], 'check 2'\nassert     filter_integers(['a', 1, '2', None, True, 4, 1.1]) == [1, 1, 1, 1, 4, 1], 'check 3'\nassert     filter_integers([1, 2, 'a', True, None, 4, 1.1, 'abc']) == [1, 1, 1, 1, 4, 1], 'check 4'\nassert     filter_integers([]) == [], 'empty'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_integers([1, 2, 3, 'a', '2', 'b','some string', 2.3, None]) == [1, 2, 2, 2, 3]\nassert filter_integers([1, 2, 3, 'a', '2', 'b','some string', 2.3, None]) == [1, 2, 2, 2, 3]\n\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     strlen(\"hello world\") == 11\nassert     strlen(\"a\") == 1\nassert     strlen(\"\") == 0\nassert     strlen(\"a \") == 2\nassert     strlen(\"a \") == 2\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef substr(string: str, pos: int, length: int) -> str:\n    \"\"\" Return sub-string of given length\n    \"\"\"\n    pass\n\ndef strcmp(str1: str, str2: str) -> int:\n    \"\"\" Compare two strings\n    \"\"\"\n    pass\n\ndef strcoll(string1: str, string2: str) -> int:\n    \"\"\" Return a comparison between two strings\n    \"\"\"\n    pass\n\ndef strcpy(destination: str, source: str) -> None:\n    \"\"\" Copy a string to destination\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 1 if the strings are the same, 0 otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert strlen('') == 0\nassert strlen('a') == 1\nassert strlen('aa') == 2\nassert strlen('abc') == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     strlen(\"123\") == 3\nassert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\n\ndef split(string: str) -> list:\n    \"\"\" Return a list of words of a given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('hello') == strlen('world')\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 0 if two strings match, otherwise return -1 or 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nstrlen(\"\") == 0\nstrlen(\"1\") == 1\nstrlen(\"12\") == 2\nstrlen(\"123\") == 3\nstrlen(\"12345\") == 5\nstrlen(\"1234567\") == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strlen('a') == 1\nassert     strlen('ab') == 2\nassert     strlen('') == 0\nassert     strlen('a'*20 + 'b') == 2\nassert     strlen('b'*20 + 'a') == 2\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('ab')     == 1\nassert     strlen('')     == 0\nassert     strlen(' ')     == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef substr(string: str, start_idx: int, len: int) -> str:\n    \"\"\" Return string between start_idx and start_idx + len\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    # read data from the file\n    \n    # iterate through the elements in the list and call the function with those elements\n    \n    # print the final result\n    \n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_divisor(6) == 3\nassert     largest_divisor(10) == 5\nassert     largest_divisor(15) == 3\nassert     largest_divisor(9) == 3\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Find the least common multiple of two given numbers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_divisor(13) == 13\nassert     largest_divisor(13) == 13\nassert     largest_divisor(13) == 13\nassert     largest_divisor(14) == 14\nassert     largest_divisor(32) == 32\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(4) == 1\nassert     largest_divisor(12) == 2\nassert     largest_divisor(24) == 2\nassert     largest_divisor(36) == 6\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_divisor(3) == 3\nassert     largest_divisor(6) == 2\nassert     largest_divisor(1) == 1\nassert     largest_divisor(10) == 5\nassert     largest_divisor(2 * 3 * 5 * 7) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_divisor(10) == 1, \"Not implemented correctly\"\nassert     largest_divisor(3) == 1, \"Not implemented correctly\"\nassert     largest_divisor(25) == 5, \"Not implemented correctly\"\nassert     largest_divisor(7) == 7, \"Not implemented correctly\"\n\n\ndef round_scores(student_scores: List[int]) -> List[int]:\n    \"\"\" Rounds each score in the list of scores and returns a new list of scores\n    \"\"\"\n    return None\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_divisor(15) == 3\nassert     largest_divisor(16) == 4\nassert     largest_divisor(17) == 4\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, return True if it is prime, and False otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (largest_divisor(5) == 5)\nassert     (largest_divisor(6) == 2)\nassert     (largest_divisor(7) == 1)\nassert     (largest_divisor(8) == 2)\nassert     (largest_divisor(9) == 3)\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n    assert factorize(1) == [1]\n    assert factorize(2) == [2]\n    assert factorize(4) == [2,2]\n    assert factorize(5) == [5]\n    "
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     factorize(18) == [2, 2, 2, 3]\nassert     factorize(64) == [2, 2, 2, 2, 2, 2, 2, 2]\nassert     factorize(1) == [1]\nassert     factorize(0) == []\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if given integer is a prime number. False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     [2,2,2,5,5] == factorize(10)\nassert     [2,3] == factorize(6)\nassert     [] == factorize(1)\n\ndef find_subsets(nums: List[int]) -> List[List[int]]:\n    \"\"\" Return list of subsets of a given list of numbers in the order of occurrence.\n    Each subset should be listed in the increasing order of subset's size.\n    However, subsets with the same size should be ordered in increasing order of their elements' values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    assert factorize(4) == [2, 2]\n    assert factorize(14) == [2, 7]\n    assert factorize(1) == [1]\n    assert factorize(60) == [2, 2, 3, 5]\n    "
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef multiplicity(factors: List[int], num: int) -> List[int]:\n    \"\"\" Return number of times each of the factor of the given integer in the given factorization\n    should be listed number of times corresponding to how many times it appeares in factorization.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     factorize(1) == []\nassert     factorize(6) == [2, 3]\nassert     factorize(27) == [3, 3, 3]\nassert     factorize(77) == [7, 11]\nassert     factorize(1024) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [1, 2, 3, 2, 3] == factorize(3 ** 2 * 2 ** 3)\nassert     [1, 2, 3, 2, 2, 2, 3] == factorize(3 ** 2 * 2 ** 3 * 2)\n\n\ndef get_factors(n: int) -> List[int]:\n    \"\"\"\n    Return a list of all the factors of the given number.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     assert factorize(1) == []\nassert     assert factorize(2) == [2]\nassert     "
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nassert factorize(60) == [2, 2, 3, 5]\nassert factorize(0) == [0]\nassert factorize(3) == [3]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if given number is prime, False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 1, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 1, 2, 2, 3, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 1, 2, 2, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     remove_duplicates([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20] ) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\ndef find_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Return list of elements that appear more than once in a list of integers.\n    The order of elements in the output list should be the same as in the input list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1,2,2,2,3]) == [1, 2, 3]\nassert     remove_duplicates([1,1,1,1,1,1,1,1,1,1,1]) == [1]\nassert     remove_duplicates([1,1,2,2,3,3,3,3,3,3,3,3]) == [1, 2, 3]\nassert     remove_duplicates([1,2,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1, 2, 3]\n\n\ndef remove_element(numbers: List[int], value: int) -> int:\n    \"\"\" Remove the first occurrence of a given element in a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [1, 2, 2, 3, 3, 4, 4, 4, 5, 5] == remove_duplicates([1, 2, 2, 3, 3, 4, 4, 4, 5, 5])\nassert     [1, 2, 2, 3, 3, 4, 4, 5] == remove_duplicates([1, 2, 2, 3, 3, 4, 4, 5])\nassert     [] == remove_duplicates([])\nassert     [1] == remove_duplicates([1, 1])\nassert     [1, 2, 2] == remove_duplicates([1, 2, 2, 1])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1,1]) == [1]\nassert     remove_duplicates([1,1,2,3,3,4,5,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [1,2,2,3,3,4] == remove_duplicates([1,1,2,2,3,3,4,4,4,5])\nassert     [0,1,2,3,4,5] == remove_duplicates([0,1,2,2,3,3,4,4,4,5])\nassert     [1,2,3,4,5] == remove_duplicates([1,1,1,2,3,4,5])\n\ndef count_occurrences(numbers: List[int], k: int) -> int:\n    \"\"\" From a list of integers, count the number of occurrences of k\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1, 1, 1, 2, 3, 5, 7, 9, 9]) == [1, 2, 3, 5, 7, 9]\nassert     remove_duplicates([1, 1, 2, 3, 5, 7, 9, 9]) == [1, 2, 3, 5, 7, 9]\nassert     remove_duplicates([1, 1, 1, 2, 3, 5, 7, 9]) == [1, 2, 3, 5, 7, 9]\nassert     remove_duplicates([1, 1, 1, 2, 3, 5, 7, 9, 9, 8]) == [1, 2, 3, 5, 7, 9, 8]\nassert     remove_duplicates([1, 1, 1, 2, 3, 5, 7, 9, 9, 10]) == [1, 2, 3, 5, 7, 9, 10]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 2]) == [1, 2]\nassert     remove_duplicates([1, 1, 2, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 2, 3, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1,2,2,3,3,3,4,5]) == [1,2,3,4,5]\nassert     remove_duplicates([1,2,3,4]) == [1,2,3,4]\nassert     remove_duplicates([1,1,2,3,3,3,4,5]) == [1,2,3,4,5]\nassert     remove_duplicates([1,2,3,3,3,4,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint(flip_case('HackerRank.com presents \"Pythonist 2\".'))\n\ndef capitalize(string: str) -> str:\n    \"\"\" For a given string, capitalize the first letter of each word.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     flip_case(\"aBcDeFgHiJkLm\") == \"AbCdEfGhijKlm\"\nassert     flip_case(\"abcdefghijklmn\") == \"AbCdEfGhijKlmN\"\nassert     flip_case(\"ABCDEFGHIJKLM\") == \"AbCdEfGhijKlm\"\nassert     flip_case(\"AbCdEfGhijKlm\") == \"aBcDeFgHiJkLm\"\n\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (flip_case(\"Hello\") == \"hELLO\"\n         and flip_case(\"CamelCase\") == \"cAMELCASE\"\n         and flip_case(\"MoreThanOnE\") == \"mORETHANOFE\"\n         and flip_case(\"reverseMe\") == \"sREVERME\"\n         and flip_case(\"AB_CdEfGh\") == \"aB_cDeFgHi\")\n\nprint(\"All tests passed.\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    flip_case(\"dog\") == \"DOG\"\n    flip_case(\"dOg\") == \"doG\"\n    flip_case(\"DoG\") == \"Dog\"\n    flip_case(\"dOg\") == \"DoG\"\n    flip_case(\"Dog\") == \"dog\"\n\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Vowels Finder\n  Filename: \n    vowels.py\n  Problem Statement:\n    Remove all the vowels from the list of states  \n  Hint: \n    Use nested for loops and while\n  Input:\n    state_name = [ 'Alabama', 'California', 'Oklahoma', 'Florida']\n  Output:\n    ['lbm', 'clfrn', 'klhm', 'flrd']\n    \n\"\"\"\n\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Pattern Builder\n  Filename: \n    pattern.py\n  Problem Statement:\n    Write a Python program to construct the following pattern. \n    Take input from User.  \n  Input: \n    5\n  Output:\n    Below is the output of execution of this program.\n      * \n      * * \n      * * * \n      * * * * \n      * * * * * \n      * * * * \n      * * * \n      * * \n      * \n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     flip_case(string) == \"thisIsAString\"\nassert     flip_case(\"ThIs iS a strInG\") == \"THISISSTRING\"\nassert     flip_case(\"ThIs iS a strInG\") == \"THISISSTRING\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"s\") == \"S\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     flip_case('HELLO') == 'hELLO'\nassert     flip_case('HELlO') == 'hELLO'\nassert     flip_case('H-eLl-o') == 'h-eLl-o'\nassert     flip_case('H-eLl-o') == 'h-eLl-o'\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     flip_case(\"Python\") == \"pYTHON\"\nassert flip_case(\"FLIP\") == \"fliP\"\nassert flip_case(\"camelCaseString\") == \"cAMELcasEStrING\"\nassert flip_case(\"snake_case_string\") == \"snake_Case_String\"\nprint(\"Exercise 1: All tests passed\")\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"s\") == \"S\"\nassert     flip_case(\"S\") == \"s\"\nassert     flip_case(\"b\") == \"B\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     concatenate(['hello', 'world', 'in', 'a', 'frame']) == \"hello world in a frame\"\nassert     concatenate(['hello', 'world', 'in', 'a', 'frame', 'and', 'a','mouse']) == \"hello world in a frame and a mouse\"\nassert     concatenate(['hello', 'world', 'in', 'a', 'frame'])!= \"hello world in a frame and a mouse\"\n\nprint('[Passed]')\nprint('[Check] concatenate')\n\n\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     concatenate([\"abc\", \"def\"]) == \"abcdef\"\nassert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"x\", \"y\"]) == \"xy\"\nassert     concatenate([\"abc\", \"def\", \"xy\"]) == \"abcdefxy\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     concatenate([\"Hi\", \"I\", \"am\", \"Austin\"]) == \"HiIamAustin\"\nassert     concatenate([\"H\", \"i\", \"I\", \"a\", \"m\", \"A\", \"s\", \"t\", \"A\", \"s\"]) == \"HiiiIamAsatA\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([\"\", \"\", \"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\", \"Fall 2016\"\nassert     concatenate([\"My\", \"name\", \"is\", \"Kyle\"]) == \"MynameisKyle\", \"Fall 2016\"\nassert     concatenate([\"\", \"Empty\", \"List\", \"Empty\", \"List\", \"Empty\", \"List\"]) == \"EmptyEmptyEmptyEmptyEmptyEmptyEmptyEmptyEmptyEmptyList\", \"Fall 2016\"\nassert     concatenate([]) == \"\", \"Fall 2016\"\n\ndef reverse(string: str) -> str:\n    \"\"\" Reverse string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     concatenate(['abc', 'def']) == 'abcdef'\nassert     concatenate(['abc', 'def', 'ghi']) == 'abcdefghi'\nassert     concatenate(['abc', 'def', 'ghi', 'jkl']) == 'abcdefghijkl'\nassert     concatenate(['abc', 'def', 'ghi', 'jkl','mno', 'pqr']) == 'abcdefghijklmnoqr'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nconcatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert \nconcatenate([\"aaa\"]) == \"aaa\"\nassert \nconcatenate([\"aaa\", \"b\"]) == \"abaaa\"\nassert \nconcatenate([\"aaa\", \"b\", \"c\"]) == \"abc\"\nassert \nconcatenate([\"aaa\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     concatenate([\"one\", \"two\"]) == \"onetwo\"\nassert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\"\nassert     concatenate([\"one\", \"two\", \"three\", \"four\"]) == \"onetwothreefour\"\nassert     concatenate([\"one\", \"two\", \"three\", \"four\", \"five\"]) == \"onetwothreesfourfive\"\nassert     concatenate([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"onetwothreesfourfive\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\", \"this is\"]) == \"hello world this is\"\nassert     concatenate([\"hello\", \"world\", \"this is\", \"another\"]) == \"hello world this is another\"\nassert     concatenate([\"1\", \"2\", \"3\"]) == \"123\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     concatenate([\"Hello\", \"world\"]) == \"Hello world\"\nassert concatenate([\"A\", \"B\", \"C\"]) == \"ABC\"\nassert concatenate([\"A\", \"B\", \"C\", \"D\"]) == \"ABCD\"\n\nprint(concatenate([\"Hello\", \"world\"]))\nprint(concatenate([\"A\", \"B\", \"C\"]))\nprint(concatenate([\"A\", \"B\", \"C\", \"D\"]))\n\ndef lexicographical(strings: List[str]) -> List[str]:\n    \"\"\" Create a lexicographical order of a list of strings\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     concatenate([\"Hello \", \"world\"]) == \"Hello world\"\nassert     concatenate([\"You \", \"are \", \"my \", \"friend.\"]) == \"You are my friend.\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nfilter_by_prefix([\"abab\", \"abcd\", \"abcdab\", \"abcde\"], \"ab\")\n    # => [\"abab\", \"abcd\", \"abcdab\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_prefix(['python', 'java', 'c#'], 'py') == ['python']\nassert     filter_by_prefix(['python', 'java', 'c#'], 'c') == ['c#']\nassert     filter_by_prefix(['python', 'java', 'c#'], 'js') == []\nassert     filter_by_prefix(['python', 'java', 'c#'], 'cz') == []\nassert     filter_by_prefix(['python', 'java', 'c#'], 'pz') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\", \"a\"], \"One not matching\"\nassert filter_by_prefix([\"a\", \"b\", \"c\"], \"z\") == [], \"No matches\"\nassert filter_by_prefix([\"a\", \"a\", \"a\", \"b\"], \"a\") == [\"a\", \"a\", \"a\"], \"Duplicates removed\"\nassert filter_by_prefix([\"a\", \"a\", \"b\", \"a\"], \"a\") == [\"a\", \"a\", \"a\"], \"Duplicates not removed\"\nassert filter_by_prefix([\"x\", \"y\", \"z\"], \"x\") == [\"x\", \"x\"], \"Random strings\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"dates\"], \"a\") == [\"apple\", \"banana\"]\nassert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"dates\"], \"b\") == []\nassert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"dates\"], \"c\") == []\nassert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"dates\"], \"d\") == [\"dates\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"how\", \"do\", \"you\", \"do\"], \"do\") == [\"do\", \"do\", \"you\"]\nassert     filter_by_prefix([\"how\", \"do\", \"you\", \"do\"], \"how\") == []\nassert     filter_by_prefix([\"how\", \"do\", \"you\", \"do\"], \"\") == [\"how\", \"do\", \"you\", \"do\"]\nassert     filter_by_prefix([\"how\", \"do\", \"you\", \"do\"], \"help\") == []\n\nprint(\"tests passed\")"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"abcd\", \"abce\", \"abde\", \"abc\"], \"ab\") == [\"abcd\", \"abce\"]\nassert     filter_by_prefix([\"abcd\", \"abce\", \"abde\", \"abc\"], \"abc\") == [\"abcd\", \"abce\", \"abde\"]\nassert     filter_by_prefix([\"abcd\", \"abce\", \"abde\", \"abc\"], \"abcd\") == [\"abcd\"]\nassert     filter_by_prefix([\"abcd\", \"abce\", \"abde\", \"abc\"], \"abcc\") == []\nassert     filter_by_prefix([\"abcd\", \"abce\", \"abde\", \"abc\"], \"\") == [\"abcd\", \"abce\", \"abde\", \"abc\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef strip_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that don't have a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_prefix(['carrot', 'dog', 'cat', 'goldfish'], 'c') == ['carrot', 'cat']\nassert     filter_by_prefix(['carrot', 'dog', 'cat', 'goldfish'], 'dog') == ['dog']\nassert     filter_by_prefix(['carrot', 'dog', 'cat', 'goldfish'], 'gold') == ['goldfish']\nassert     filter_by_prefix(['carrot', 'dog', 'cat', 'goldfish'], 'g') == ['goldfish']\nassert     filter_by_prefix(['carrot', 'dog', 'cat', 'goldfish'], 'z') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"apple\", \"carrot\", \"banana\"], \"pa\") == [\"apple\", \"carrot\"], \\\n        \"Your function is not working as expected\"\nassert     filter_by_prefix([\"carrot\", \"potato\", \"apple\", \"pear\"], \"ap\") == [\"carrot\", \"apple\"], \\\n        \"Your function is not working as expected\"\nassert     filter_by_prefix([\"potato\", \"peas\", \"pear\", \"tomato\", \"plum\"], \"pl\") == [\"peas\", \"pear\"], \\\n        \"Your function is not working as expected\"\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_positive([-3, -2, 1, 2, 3]) == [1, 2, 3]\nassert     get_positive([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     get_positive([-2, -1, 0, 1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     get_positive([]) == []\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_positive([3, -2, 5, 8, 12]) == [3, 5, 8, 12], \\\n        \"Expected: [3, 5, 8, 12], Actual: \" + str(get_positive([3, -2, 5, 8, 12]))\n\nassert     get_positive([-3, -2, 5, 8, 12]) == [5, 8, 12], \\\n        \"Expected: [5, 8, 12], Actual: \" + str(get_positive([-3, -2, 5, 8, 12]))\n\nassert     get_positive([]) == [], \\\n        \"Expected: [], Actual: \" + str(get_positive([]))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\nassert     get_positive([1, -1, 2, -2, 3, -3, -4]) == [1, 2, 3]\nassert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4]) == []\nassert     get_positive([-1, -2, -3, -4]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_positive([-1, -2, -3, -4, 0, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     get_positive([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     get_positive([-1, -2, -3, -4, -5]) == []\nassert     get_positive([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nprint('get_positive passes tests.')\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [1, 2, 3, 4] == get_positive([-1, -2, -3, -4])\nassert     [1, 2, 3, 4] == get_positive([1, 2, 3, 4])\nassert     [] == get_positive([])\nassert     [] == get_positive([-5, -4, -3, -2, -1])\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_positive([1, -2, 3, -4, 5, -6, 7, -8, 9, -10, -11]) == [1, 3, 5, 7, 9]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([-1,-2,3,4]) == [3,4]\nassert     get_positive([1,2,3,4]) == [1,2,3,4]\nassert     get_positive([1,-2,3,-4]) == [1,3]\nassert     get_positive([-1,-2,3,0]) == [3]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     type(get_positive([1, -1, 2, 3, 4, 5])) == list\nassert     type(get_positive([0, 2, -3, 4, -5])) == list\nassert     type(get_positive([0, 1, 2, 3, 4])) == list\nassert     type(get_positive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])) == list\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_positive([1, -2, -3, 4]) == [1,4]\nassert     get_positive([1,2,3,4]) == [1,2,3,4]\nassert     get_positive([]) == []\nassert     get_positive([-1,0,-3,-5]) == []\nassert     get_positive([0]) == [0]\nprint('OK')\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(10) == False\nassert     is_prime(1) == False\nassert     is_prime(37) == True\nassert     is_prime(0) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(7) == True\nassert     is_prime(11) == True\nassert     is_prime(8) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_prime(2)         == True\nassert     is_prime(3)         == True\nassert     is_prime(5)         == True\nassert     is_prime(7)         == True\nassert     is_prime(11)     == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(12) == False\nassert     is_prime(1) == False\nassert     is_prime(5) == True\nassert     is_prime(13) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(9) == False\nassert     is_prime(1) == False\nassert     is_prime(5) == True\nassert     is_prime(103) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(7) == True\nassert     is_prime(11) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     poly([-2, 2, 1, 3], 0) == 3\nassert     poly([2, 0, -2, 3], 2) == 3\nassert     poly([1, 0, 0, 0, -2, 1], 2) == -2\nassert     poly([-3, 0, 0, -5, 0, 0], 0) == -5\nassert     poly([2, 0, 0, 0, 0, 0], -1) == 2\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     math.isclose(find_zero([0, 0]), 0)\nassert     math.isclose(find_zero([1, 0, 0]), 0)\nassert     math.isclose(find_zero([0, 1, 0, 0]), 0)\nassert     math.isclose(find_zero([1, 0, -1, 0, 0]), 0)\nassert     math.isclose(find_zero([1, 0, 2, 0, -3, 0, 0]), 0)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_zero([1, 2]) == []\nassert     find_zero([1, 2, 3]) == []\nassert     find_zero([1, 2, 3, 4]) == []\nassert     find_zero([1, 2, 3, 4, 5]) == []\nassert     find_zero([1, 0, 2, 0]) == [0]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    assert find_zero([1, 2, 3]) == 2.0\n\n\ndef polynomial_expansion(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    polynomial_expansion returns coefficients of polynomial\n    with the same degree as xs, but with coefficients of\n    xs and higher degree as zeros.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef find_root_using_polynomial(xs: list, initial_x: float):\n    \"\"\"\n    Finds a root of a polynomial using Newton\u2019s method.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     poly([1, 2, 3], 0) == 2\nassert     poly([1, 2, 3], 1) == 0\nassert     poly([1, 2, 3], 2) == 1\nassert     poly([1, 2, 3], 3) == 3\nassert     poly([1, 2, 3], 4) == 6\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [0, 0, 0, 0, 1] == find_zero([0, 0, 0, 0, 1])\nassert     [1, 0, 0, 0, 1] == find_zero([1, 0, 0, 0, 1])\nassert     [1, 1, 0, 0, 1] == find_zero([1, 1, 0, 0, 1])\nassert     [1, 1, 1, 0, 1] == find_zero([1, 1, 1, 0, 1])\nassert     [1, 1, 1, 1, 1] == find_zero([1, 1, 1, 1, 1])\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_zero([1, 2, 3, 4, 5, 6]) == 2\nassert     find_zero([-1, 0, 3, 4, 5, 6]) == -1\nassert     find_zero([1, 0, 3, 4, 0, 6]) == 3\nassert     find_zero([1, 2, 3, 4, 0, 6]) == 2\nassert     find_zero([1, 0, 3, 4, 5, 0]) == 3\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef find_zero_v2(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_v2 find x such that poly(x) = 0.\n    find_zero_v2 returns only only zero point, even if there are many.\n    Moreover, find_zero_v2 only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\ndef find_zero_v3(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_v3 find x such that poly(x) = 0.\n    find_zero_v3 returns only only zero point, even if there are many.\n    Moreover, find_zero_v3 only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\n\ndef find_all_zeros(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_all_zeros finds x such that poly(x) = 0.\n    find_all_zeros returns list of zero points, even if there are many.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n    \n\ndef print_third_value(l: list):\n    \"\"\"This function takes a list l and returns the value in l at the index whose value is not divisible by three\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 6, 5]\nassert     sort_third([1, 3, 6, 7, 5, 2]) == [1, 3, 6, 7, 5, 2]\nassert     sort_third([3, 1, 2, 6, 7, 5]) == [1, 2, 3, 5, 6, 7]\n\ndef is_even(n: int):\n    \"\"\"This function takes an integer n and returns true if n is even, otherwise it returns false\"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_third([1,2,3,4]) == [1,2,3,4], \\\n        \"Expected: [1,2,3,4] but got: \" + str([1,2,3,4])\nassert     sort_third([9,8,7,6,5,4,3,2,1]) == [9,8,7,6,5,4,3,2,1], \\\n        \"Expected: [9,8,7,6,5,4,3,2,1] but got: \" + str([9,8,7,6,5,4,3,2,1])\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \n\ndef reverse_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l except that every second element is in reversed order, while its values are the same as in l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_third([1, 2, 4, 5]) == [1, 2, 4, 5]\nassert     sort_third([1, 3, 2, 4, 5]) == [1, 3, 2, 4, 5]\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 6, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_third([1, 5, 2, 3, 8, 9, 6, 3, 5, 2, 1, 1, 2, 3, 5, 5, 2, 9, 3]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 5, 5, 5, 8, 9, 9, 6, 6, 7, 7]\nassert     sort_third([1, 5, 2, 3, 8, 9, 6, 3, 5, 2, 1, 1, 2, 3, 5, 5, 2, 9, 3, 0]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 5, 5, 5, 8, 9, 9, 6, 6, 7, 7, 0]\nassert     sort_third([1, 5, 2, 3, 8, 9, 6, 3, 5, 2, 1, 1, 2, 3, 5, 5, 2, 9, 3, 0, 0, 0, 0, 0, 0, 0]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 5, 5, 5, 8, 9, 9, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     sort_third([1, 5, 2, 3, 8, 9, 6, 3, 5, 2, 1, 1, 2, 3, 5, 5, 2, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_third([5, 6, 7, 8, 9, 10]) == [3, 6, 9, 12, 15, 18]\nassert     sort_third([5, 6, 7, 8, 9, 10, 11]) == [3, 6, 9, 12, 15, 18, 21]\nassert     sort_third([]) == []\nassert     sort_third([3, 6, 9, 12, 15, 18]) == [3, 6, 9, 12, 15, 18]\nassert     sort_third([3, 6, 9, 12, 15, 18, 21]) == [3, 6, 9, 12, 15, 18, 21]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     unique([1,2,3,4,5]) == [1,2,3,4,5], 'unique failure'\nassert unique([1,2,2,2,2,2,2]) == [1,2], 'unique failure'\nassert unique([1,3,5,7,2,2,2,2,3,5,7,9]) == [1,3,5,7,9], 'unique failure'\nassert unique([]) == [], 'unique failure'\nassert unique([1]) == [1], 'unique failure'\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1, 1]) == [1]\nassert     unique([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef kUnique(arr: list, k: int) -> int:\n    \"\"\"Return the number of unique elements in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,3,4,4,5]) == [1,2,3,4,5], \"Wrong unique\"\nassert     unique(['a', 'a', 'b', 'b']) == ['a', 'b'], \"Wrong unique\"\nassert     unique([]) == [], \"Wrong unique\"\nassert     unique([1,1,1,1,1]) == [1], \"Wrong unique\"\n\ndef reverse_string(string: str):\n    \"\"\"Return string in reversed order\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique([0,0,1,2,3]) == [0,1,2,3]\nassert     unique([0,1,2,3,3]) == [0,1,2,3]\nassert     unique([0,0,0,2,3]) == [0,2,3]\nassert     unique([0,0,0,0,0,1,2,3]) == [0,1,2,3]\nassert     unique([0,0,0,0,0,0,0]) == []\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique([1, 2, 3, 4, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     unique([1, 2, 3, 4, 4, 5, 6, 7, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8, 8, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return the intersection of two sorted lists\n\n    >>> intersection([1, 2, 3], [3, 4, 5])\n    [3]\n\n    >>> intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7])\n    [3, 4, 5]\n\n    >>> intersection([1, 2, 3, 4, 5], [6, 7])\n    []\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique([1,2,3,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,3,4,5,3,4]) == [1,2,3,4,5]\n\nassert     unique([1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     unique(['1', '2', '3', '4', '1', '2', '3', '4']) == [\n        '1', '2', '3', '4'], \"unique failed\"\nassert     unique(['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c']) == [\n        'a', 'b', 'c', 'd', 'e'], \"unique failed\"\nassert     unique([1, 2, 3, 1, 2, 3, 1, 2]) == [1, 2, 3], \"unique failed\"\nassert     unique([]) == [], \"unique failed\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 3, 5, 7, 1, 9]) == [1, 3, 5, 7, 9]\nassert     unique([1, 5, 3, 7, 9, 1, 2, 3]) == [1, 5, 3, 7, 9, 2, 3]\nassert     unique([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\n\ndef subsets(s: set):\n    \"\"\"Returns subsets of s\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_element([1, 4, 5, 2, 3, 4, 6]) == 6\nassert     max_element([1, 4, 5, 2, 3]) == 5\nassert     max_element([1, 4, 5, 2]) == 5\nassert     max_element([1, 4, 5]) == 5\nassert     max_element([1, 4]) == 4\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([1, 2, -3]) == 2\nassert     max_element([]) == None\nassert     max_element([-2, 1, -3]) == 1\nassert     max_element([5, 5, 5, 1, 2, 3]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef test_max_element():\n    assert max_element([1, 2, 3, 4, 5, 6]) == 6\n    assert max_element([10, 20, 30, 40, 50, 6]) == 50\n    assert max_element([1, 2, 3, 4, 5, -1]) == 5\n    "
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_element([]) == 0, 'Empty list!'\nassert     max_element([1]) == 1, 'Single element list'\nassert     max_element([1, 2, 3]) == 3, 'Longer list'\nassert     max_element([-2, -1, 0, 1, 2]) == 2, 'Negative numbers'\nassert     max_element([2, 1, 2, 3, 1]) == 3, 'Duplicates'\nprint('All tests passed!'"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_element([1, 2, 3]) == 3, \"Test 1 failed\"\nassert     max_element([-1, -2, -3]) == -1, \"Test 2 failed\"\nassert     max_element([]) == None, \"Test 3 failed\"\n\ndef reverse_string(l: list):\n    \"\"\"Reverse the elements in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_element([1, 2, 3]) == 3, \"Max is 3\"\nassert     max_element([1, 1, 1]) == 1, \"Max is 1\"\nassert     max_element([1, 2, 3, 4]) == 4, \"Max is 4\"\nassert     max_element([1, 1, 2, 4]) == 4, \"Max is 4\"\nassert     max_element([1, 2, 3, 4, 5]) == 5, \"Max is 5\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_element([1,2,3,4]) == 4, \"test 1 failed\"\nassert     max_element([1,2,3,2]) == 3, \"test 2 failed\"\nassert     max_element([1,2,3,2,3,4,5,6,4,7,8,9]) == 9, \"test 3 failed\"\n\ndef max_element_in_range(l: list, min_el, max_el):\n    \"\"\"Return maximum element in the list in the range.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef binary_search(l: list, e: int):\n    \"\"\"Return index of element `e` in the list `l`.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     max_element([1,2,3]) == 3, \"max_element([1,2,3]) == 3 failed\"\nassert     max_element([1,3,2]) == 3, \"max_element([1,3,2]) == 3 failed\"\nassert     max_element([-1,0,2]) == 2, \"max_element([-1,0,2]) == 2 failed\"\nassert     max_element([1]) == 1, \"max_element([1]) == 1 failed\"\nassert     max_element([]) == None, \"max_element([]) == None failed\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fizz_buzz(2) == 1\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(16) == 1\nassert     fizz_buzz(56) == 0\nassert     fizz_buzz(101) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nprint(fizz_buzz(10))\nprint(fizz_buzz(20))\nprint(fizz_buzz(30))\nprint(fizz_buzz(110))\nprint(fizz_buzz(1530))\nprint(fizz_buzz(2050))\nprint(fizz_buzz(4020))\nprint(fizz_buzz(50020))\nprint(fizz_buzz(60020))\nprint(fizz_buzz(70020))\nprint(fizz_buzz(80020))\nprint(fizz_buzz(90020))\nprint(fizz_buzz(10000000))"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fizz_buzz(10) == 1\nassert     fizz_buzz(20) == 1\nassert     fizz_buzz(38) == 0\nassert     fizz_buzz(100) == 3\nassert     fizz_buzz(112) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fizz_buzz(15) == 4\nassert     fizz_buzz(10000) == 16\nassert     fizz_buzz(13) == 2\nassert     fizz_buzz(101) == 3\nassert     fizz_buzz(123) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fizz_buzz(101) == 0\nassert     fizz_buzz(12) == 0\nassert     fizz_buzz(13) == 2\nassert     fizz_buzz(21) == 0\nassert     fizz_buzz(37) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fizz_buzz(11) == 0\nassert     fizz_buzz(123) == 0\nassert     fizz_buzz(14) == 1\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(16) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fizz_buzz(101) == 0\nassert     fizz_buzz(123) == 3\nassert     fizz_buzz(999) == 3\nassert     fizz_buzz(11) == 1\nassert     fizz_buzz(99) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef even_indices(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies,\n    while its values at the even indicies are equal to the values of the even indicies of l,\n    and sorted in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_even([5, 2, 6, 8, 1, 4]) == [2, 8, 6, 4, 1, 5], \"Check the first example of sort_even\"\nassert     sort_even([5, 2, 6, 8, 1, 4]) == [2, 8, 6, 4, 1, 5], \"Check the second example of sort_even\"\nassert     sort_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 1, 3, 5], \"Check the third example of sort_even\"\nassert     sort_even([1, 3, 2, 5, 4]) == [2, 4, 1, 3, 5], \"Check the fourth example of sort_even\"\nassert     sort_even([1, 3, 2, 5, 4, 6]) == [2, 4, 1, 3, 5, 6], \"Check the fifth example of sort_even\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_even([4, 1, 3, 2]) == [4, 2, 1, 3]\nassert     sort_even([1, 3, 2, 4]) == [1, 2, 3, 4]\nassert     sort_even([3, 2, 1, 4]) == [3, 2, 1, 4]\nassert     sort_even([3, 4, 2, 1]) == [3, 4, 2, 1]\nassert     sort_even([2, 1, 3, 4]) == [2, 1, 3, 4]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef sort_even2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     ([20,18,16,14,12,10,8,6,4,2,0] == sort_even([5,4,3,2,1,0,-1,10,8,6,4,2,0]))\nassert     ([20,18,16,14,12,10,8,6,4,2,0] == sort_even([5,4,3,2,1,0,-1,10,8,6,4,2,0]))\nassert     ([20,18,16,14,12,10,8,6,4,2,0] == sort_even([5,4,3,2,1,0,-1,10,8,6,4,2,0]))\nassert     ([18,16,14,12,10,8,6,4,2,0] == sort_even([5,4,3,2,1,0,-1,10,8,6,4,2,0]))\nassert     ([16,14,12,10,8,6,4,2,0] == sort_even([5,4,3,2,1,0,-1,10,8,6,4,2,0]))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (sort_even([5, 3, 2, 8, 1, 4]) == [5, 3, 2, 8, 1, 4])\nassert     (sort_even([5, 3, 2, 8, 1, 4, 2, 3, 4]) == [5, 3, 2, 8, 1, 4, 2, 3, 4])\nassert     (sort_even([5, 3, 2, 8, 1, 4, 4, 5]) == [5, 3, 2, 8, 1, 4, 4, 5])\nassert     (sort_even([5, 3, 2, 8, 1, 4, 3]) == [5, 3, 2, 8, 1, 4, 3])\nassert     (sort_even([1, 3, 2, 8, 1, 4, 3, 5]) == [1, 3, 2, 8, 1, 4, 3, 5])\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     ([4, 0, 5, 3, 2, 6, 9, 1] == sort_even([4, 0, 5, 3, 2, 6, 9, 1]))\nassert     ([1, 6, 3, 4, 9, 2, 5, 0] == sort_even([1, 6, 3, 4, 9, 2, 5, 0]))\nassert     ([9, 6, 5, 4, 3, 2, 1, 0] == sort_even([9, 6, 5, 4, 3, 2, 1, 0]))\nassert     ([9, 6, 5, 4, 3, 2, 1, 0] == sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))\nassert     ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == sort_even([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_even([2,4,0,2,5,0,2]) == [0,0,2,2,2,4,5]\nassert     sort_even([2,4,0,2,5,0,2]) == [0,0,2,2,2,4,5]\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     \"IPIKBPKP\" == decode_cyclic(\"IPKWKPIPKP\")\nassert     \"IKKKPI\" == decode_cyclic(\"IPKWKPIPKI\")\nassert     \"IPIKBPKP\" == decode_cyclic(\"IPKWKPIPKP\")\nassert     \"IPIKBPKP\" == decode_cyclic(\"IPKWKPIPKPI\")\nassert     \"IPIKBPKP\" == decode_cyclic(\"IPKWKPIPKPI\")\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decode_cyclic(\"ABC\") == \"ABC\"\nassert     decode_cyclic(\"ABQ\") == \"ABC\"\nassert     decode_cyclic(\"ABCD\") == \"ABC\"\nassert     decode_cyclic(\"ABCB\") == \"ABC\"\nassert     decode_cyclic(\"ABCC\") == \"ABC\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_cyclic(encode_cyclic(\"ABC\")) == \"ABC\"\nassert     decode_cyclic(encode_cyclic(\"ABCABCABCABC\")) == \"ABCABCABCABC\"\nassert     decode_cyclic(encode_cyclic(\"ABCABCABCABCABC\")) == \"ABCABCABCABCABC\"\nassert     decode_cyclic(encode_cyclic(\"ABCABCABCABCABC\")) == \"ABCABCABCABCABC\"\n\n\ndef encode_cyclic_expanded(s: str):\n    \"\"\"\n    returns encoded string by expanding string by adding zeros.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic('THe athens apples')) == 'THe athens apples'\n\ndef encode_dictionary(s: str):\n    \"\"\"\n    returns encoded string by mapping characters in s to numbers using a dictionary.\n    \"\"\"\n    return \"\".join([encode_cyclic(char) for char in s])\n\ndef decode_dictionary(s: str):\n    \"\"\"\n    takes as input encoded string and returns decoded string using the dictionary.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_cyclic(\"BWWWWWBBBW\") == \"BABB\"\nassert     decode_cyclic(\"WWWWBBBBBW\") == \"WWBBBBBBW\"\nassert     decode_cyclic(\"WWWWBBBBBW\") == \"WWBBBBBBW\"\n\n\ndef encode_cyclic_v2(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. If group has fewer elements than 3, last element is reused.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group + group[0] for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic_v2(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic_v2 function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"eqqgqgqgqg\") == \"abcde\"\nassert     decode_cyclic(\"fghijklmn\") == \"zabcdefghijk\"\nassert     decode_cyclic(\"abcdefghijklmn\") == \"zabcdefghijk\"\n\n\ndef encode_cyclic_k(k: int):\n    \"\"\"\n    returns encoded string by cycling groups of k characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    encodes string using vigenere cipher.\n    \"\"\"\n    pass\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    decodes string using vigenere cipher.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decode_cyclic(encode_cyclic(\"WE ARE DISCOVERED. WE ARE REMEMBERED. WE ARE FORGOTTEN.\")) == \"WE ARE DISCOVERED. WE ARE REMEMBERED. WE ARE FORGOTTEN.\"\n\ndef encode_two_step(s: str):\n    \"\"\"\n    encodes string using encode_cyclic twice.\n    \"\"\"\n    pass\n\ndef decode_two_step(s: str):\n    \"\"\"\n    takes as input encoded string.\n    decodes the string by first encoding it with encode_cyclic twice, and then using decode_cyclic.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\ndef encode_cyclic(s: str) -> str:\n    \"\"\"\n    encode_cyclic will return a string with the following property:\n    \n    Given a string of length n,\n    if its encoded with cyclic encoding,\n    then the resulting string can be reconstructed by taking the first character,\n    then the third, fourth, and so on.\n    \"\"\"\n    return s[1:] + s[0]\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    decode_cyclic will return the decoded string.\n    If the decoded string is invalid, then this function will return the empty string.\n    \"\"\"\n    decoded = []\n    for i in range(len(s)):\n        decoded.append(s[i])\n        if len(decoded) == 2:\n            if decoded[0] == decoded[1]:\n                return \"\"\n            else:\n                decoded.pop(0)\n    return \"\".join(decoded)\n\n\ndef test_decode_cyclic():\n    assert decode_cyclic(\"abc\") == \"abc\"\n    "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prime_fib(2) == [2, 3]\nassert     prime_fib(5) == [5, 8]\nassert     prime_fib(10) == [10, 12, 15, 20]\n\ndef prime_fib_i(n: int):\n    \"\"\"\n    prime_fib_i returns n-th Fibonacci number that is a prime number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prime_fib(0) == 0\nassert     prime_fib(1) == 1\nassert     prime_fib(2) == 1\nassert     prime_fib(3) == 2\nassert     prime_fib(4) == 3\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_fib(1) == [2]\nassert     prime_fib(5) == [3, 5, 7, 9, 11]\nassert     prime_fib(10) == [3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\nassert     prime_fib(20) == [3, 7, 13, 19, 31, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     prime_fib(50) == [3, 7, 13, 19, 31, 61, 67, 71, 73, 79, 83, 89, 97, \n                                                                                1129, 1193, 1249, 1297, 1341, 1373, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prime_fib(10) == 13\nassert     prime_fib(100) == 541\nassert     prime_fib(1000) == 7919\n\ndef prime_sum(n: int):\n    \"\"\"\n    prime_sum returns the sum of all prime numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prime_fib(2) == [1, 1]\nassert     prime_fib(3) == [1, 1, 1]\nassert     prime_fib(7) == [1, 1, 2, 3, 5, 8, 13]\nassert     prime_fib(15) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_fib(0) == (0, 0)\nassert     prime_fib(1) == (0, 1)\nassert     prime_fib(2) == (0, 1)\nassert     prime_fib(3) == (0, 1)\nassert     prime_fib(4) == (0, 1)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef find_anagram(s: str):\n    \"\"\"\n    find_anagram finds an anagram of a given word.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_fib(0) == 0\nassert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef test_triples_sum_to_zero():\n    l = [3, -4, 0, 1, 2, 2, 4]\n    assert triples_sum_to_zero(l) == True\n    assert triples_sum_to_zero([1, 2, 3]) == False\n    assert triples_sum_to_zero([1, 1, 1]) == True\n    "
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-2,1,2,3,-4]) == False\nassert     triples_sum_to_zero([1,2,3,4,5]) == False\nassert     triples_sum_to_zero([1,2,3,0,5]) == True\nassert     triples_sum_to_zero([0,2,3,1,5]) == True\nassert     triples_sum_to_zero([0,2,3,-1,5]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 5, -5, -4, -3, -2, 0, 1, 2]) == True\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == False\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == False\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, -5, -4, -3, -2, 0, 1, 2, 3, 4]) == True\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, -5, -4, -3, -2, 0, 1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([1, 1, 2, -2, 3]) == False\nassert     triples_sum_to_zero([1, 1, 2, 2, 3]) == True\nassert     triples_sum_to_zero([1, 1, 2, 1, 3]) == False\nassert     triples_sum_to_zero([1, 1, 1, 1, 1]) == True\nassert     triples_sum_to_zero([1, 1, 2, 1, -2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef triples_sum_to_zero_v2(l: list):\n    \"\"\"\n    triples_sum_to_zero_v2 takes a list of integers as an input.\n    it returns a list of three distinct elements in the list that\n    sum to zero. If there are no such elements, it returns None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1])\nassert not triples_sum_to_zero([0, 1, 2, 3])\nassert not triples_sum_to_zero([0])\nassert triples_sum_to_zero([-1, 0, 1])\n\ndef pairs_sum_to_zero(l: list):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-3, -4, 1, 0, 0, -2, 0]) == True\nassert     triples_sum_to_zero([-3, -4, 1, 0, 0, 0, -2]) == False\nassert     triples_sum_to_zero([1, 2, 3, -4, 0, 0, 5]) == False\nassert     triples_sum_to_zero([-3, 0, 1, 0, -2, 0, 3]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, 0, 0, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert         triples_sum_to_zero([0, -1, 2, -3, 1]) is False, \"Incorrect answer\"\nassert         triples_sum_to_zero([0, -1, 2, -2, 1]) is True, \"Incorrect answer\"\nassert         triples_sum_to_zero([0, -1, 2, -2, 1, 0]) is False, \"Incorrect answer\"\nassert         triples_sum_to_zero([0, -1, 2, -2, 1, 0, -3]) is True, \"Incorrect answer\"\nassert         triples_sum_to_zero([0, -1, 2, -2, 1, 0, -3, 3]) is False, \"Incorrect answer\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1]) == True\nassert     triples_sum_to_zero([0, -1, 2, -2, 1]) == False\nassert     triples_sum_to_zero([0, -1, 2, -3, 1, 0]) == True\nassert     triples_sum_to_zero([0, -1, 2, -3, 1, 0, 0]) == False\nassert     triples_sum_to_zero([0, -1, 2, -3, 1, 2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([1,0,3]) == False\nassert     triples_sum_to_zero([1,2,3,0]) == False\nassert     triples_sum_to_zero([1,2,3,4]) == False\nassert     triples_sum_to_zero([1,2,3,-2]) == True\nassert     triples_sum_to_zero([0,0,0]) == False\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     car_race_collision(3) == 2, 'car_race_collision(3) failed.'\nassert     car_race_collision(5) == 2, 'car_race_collision(5) failed.'\nassert     car_race_collision(10) == 2, 'car_race_collision(10) failed.'\nassert     car_race_collision(100) == 2, 'car_race_collision(100) failed.'\nassert     car_race_collision(1000) == 2, 'car_race_collision(1000) failed.'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     car_race_collision(4) == 5, \"Wrong answer\"\nassert     car_race_collision(5) == 15, \"Wrong answer\"\nassert     car_race_collision(6) == 30, \"Wrong answer\"\nassert     car_race_collision(7) == 62, \"Wrong answer\"\nassert     car_race_collision(8) == 125, \"Wrong answer\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0, 'incorrect for n = 1'\nassert     car_race_collision(2) == 0, 'incorrect for n = 2'\nassert     car_race_collision(3) == 1, 'incorrect for n = 3'\nassert     car_race_collision(4) == 1, 'incorrect for n = 4'\nassert     car_race_collision(5) == 2, 'incorrect for n = 5'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     car_race_collision(1) == 0, 'car_race_collision(1) wrong!'\nassert     car_race_collision(2) == 0, 'car_race_collision(2) wrong!'\nassert     car_race_collision(3) == 0, 'car_race_collision(3) wrong!'\nassert     car_race_collision(10) == 0, 'car_race_collision(10) wrong!'\nassert     car_race_collision(11) == 0, 'car_race_collision(11) wrong!'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 3\nassert     car_race_collision(5) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     car_race_collision(2) == 0, \"car_race_collision() does not work\"\nassert     car_race_collision(3) == 1, \"car_race_collision() does not work\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     car_race_collision(1) == 1\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     car_race_collision(5) == 4\nassert     car_race_collision(10) == 9\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     car_race_collision(1) == 0, \"incorrect for n=1\"\nassert     car_race_collision(2) == 0, \"incorrect for n=2\"\nassert     car_race_collision(3) == 1, \"incorrect for n=3\"\nassert     car_race_collision(4) == 2, \"incorrect for n=4\"\nassert     car_race_collision(5) == 3, \"incorrect for n=5\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     car_race_collision(3) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(1) == 0\nassert     car_race_collision(0) == 0\nassert     car_race_collision(12) == 0\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef count_words(s: str) -> int:\n    \"\"\"Return number of words in string s.\n    \"\"\"\n    pass\n\ndef main():\n    \"\"\"Do something.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nprint(\"SUCCESS\")\n\n\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef new_list_of_chars(s):\n    \"\"\"Return a list containing each char of the string s\n    \"\"\"\n    pass\n\ndef get_ch_at_index(s, i):\n    \"\"\"Return the character at index i of the string s.\n    \"\"\"\n    pass\n\ndef get_ch_at_index_or_default(s, i, default_char):\n    \"\"\"Return the character at index i of the string s, or the default_char if the i is out of bounds.\n    \"\"\"\n    pass\n\ndef split_string_into_list(s):\n    \"\"\"Return a list of characters that were obtained by splitting s using whitespace.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 6, 7, 8, 9, 10, 11]\n\n\n\ndef factorial(n: int) -> int:\n    \"\"\"Return n! (0! means 1).\"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef double_list(l: list):\n    \"\"\"Return list with every element doubled.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\nassert     incr_list([100, -3, 12, 3]) == [101, -2, 13, 4]\n\ndef incr_list_in_place(l: list):\n    \"\"\"Modify the list in-place to increase all elements by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     incr_list(list(range(0, 5))) == [0, 1, 2, 3, 4]\nassert     incr_list(list(range(0, -5, -1))) == [0, -1, -2, -3, -4]\nassert     incr_list(list(range(0, -10, -2))) == [0, -2, -4, -6, -8]\nassert     incr_list(list(range(0, -10, -3))) == [0, -3, -6, -9]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5,6]) == False\nassert     pairs_sum_to_zero([1,2,3,-4,5,6]) == True\nassert     pairs_sum_to_zero([0,2,3,4,5,6]) == False\nassert     pairs_sum_to_zero([0,0,0,0,0,0]) == False\nassert     pairs_sum_to_zero([0,1,0,1,0,0]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"testing pairs_sum_to_zero...\")\n    assert pairs_sum_to_zero([1, 2, 3, -4]) == True\n    assert pairs_sum_to_zero([1, 2, 3, -4, -5]) == False\n    print(\"Tests passed!\")\n    print(\"testing pairs_sum_to_zero...\")\n    assert pairs_sum_to_zero([1, 2, 3, -4]) == True\n    "
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    main runs the pairs_sum_to_zero function to compute \n    the pairs that sum to zero, and returns the number\n    of pairs.\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef test_pairs_sum_to_zero():\n    \"\"\"\n    test_pairs_sum_to_zero tests pairs_sum_to_zero.\n    \"\"\"\n    assert pairs_sum_to_zero([1, 2, 3, 0]) == False\n    assert pairs_sum_to_zero([1, 2, 3, -2]) == False\n    assert pairs_sum_to_zero([1, 2, 3, -2, 1]) == True\n    "
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([2, 3, -4, -2, -4, 6]) == True\nassert     pairs_sum_to_zero([2, 3, -4, -2, -4, 6, 0]) == False\nassert     pairs_sum_to_zero([2, 3, -4, -2, -4, 6, 0, 6]) == False\nassert     pairs_sum_to_zero([2, 3, -4, -2, -4, 6, 0, -6]) == True\nassert     pairs_sum_to_zero([2, 3, -4, -2, -4, 6, 0, 6, -6]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"Wrong output for []\"\nassert pairs_sum_to_zero([1]) == False, \"Wrong output for [1]\"\nassert pairs_sum_to_zero([1, -1]) == False, \"Wrong output for [1, -1]\"\nassert pairs_sum_to_zero([1, -1, 1]) == False, \"Wrong output for [1, -1, 1]\"\nassert pairs_sum_to_zero([1, 0]) == False, \"Wrong output for [1, 0]\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\nassert     pairs_sum_to_zero([-1,1]) == False\nassert     pairs_sum_to_zero([0,0,0]) == True\nassert     pairs_sum_to_zero([1,1,1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef pairs_sum_to_zero_test():\n    \"\"\"\n    pairs_sum_to_zero_test tests pairs_sum_to_zero\n    It tests pairs_sum_to_zero on a randomly generated list of integers\n    of size 10, with 5 distinct elements\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1, 3, 6, -3, 1, 1]) == True\nassert     pairs_sum_to_zero([1, 2, -2, 1]) == True\nassert     pairs_sum_to_zero([1, 3, 6, -3, 1, 1, 5]) == True\nassert     pairs_sum_to_zero([1, 3, 6, -3, 1, 5, 3]) == False\nassert     pairs_sum_to_zero([1, 2, -2, 1, 2]) == False\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     change_base(0, 2) == \"0\"\nassert     change_base(2, 2) == \"10\"\nassert     change_base(1, 2) == \"1\"\nassert     change_base(7, 2) == \"111\"\nassert     change_base(15, 2) == \"1111\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     change_base(0, 2) == '0'\nassert     change_base(5, 2) == '101'\nassert     change_base(7, 2) == '111'\nassert     change_base(9, 2) == '1001'\nassert     change_base(12, 2) == '1100'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     change_base(10, 2) == '1010', 'incorrect binary conversion'\nassert     change_base(10, 8) == '10', 'incorrect binary conversion'\nassert     change_base(10, 16) == 'a', 'incorrect hexadecimal conversion'\n\ndef reverse_num(x: int):\n    \"\"\"Reverse a integer\n    return string representation of the reversed number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(0, 2) == '0'\nassert     change_base(3, 8) == '11'\nassert     change_base(9, 9) == '1001'\nassert     change_base(0, 10) == '0'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     change_base(1234, 2) == \"1100110011001101010\"\nassert     change_base(1234, 16) == \"340\"\nassert     change_base(1234, 10) == \"1234\"\nassert     change_base(1234, 8) == \"11001100110011001100110011001100110011\"\nassert     change_base(1234, 2) == \"1100110011001101010\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     change_base(100, 10) == '1010'\nassert     change_base(10, 2) == '1010'\nassert     change_base(10, 10) == '1010'\nassert     change_base(10, 16) == 'A'\nassert     change_base(10, 26) == 'Z'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     change_base(100, 10) == '12'\nassert     change_base(10, 2) == '1010'\nassert     change_base(10, 16) == 'A'\nassert     change_base(10, 26) == 'z'\nassert     change_base(10, 36) == 'Z'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     change_base(5,2) == '101'\nassert     change_base(0,2) == '0'\nassert     change_base(0,3) == '0'\nassert     change_base(0,5) == '0'\nassert     change_base(0,7) == '0'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert _____ == change_base(10, 2)\nassert _____ == change_base(10, 8)\nassert _____ == change_base(10, 16)\n\ndef sum_digits(x: int):\n    \"\"\"Sum digits of the number x\n    return the sum\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef is_in_triangle(a, b, c, p):\n    \"\"\"Check if point p is inside the triangle with sides a,b,c.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (triangle_area(2, 3) == 3), \"Wrong area!\"\nassert     (triangle_area(3, 4) == 6), \"Wrong area!\"\nassert     (triangle_area(6, 2) == 15), \"Wrong area!\"\nassert     (triangle_area(6, 7) == 21), \"Wrong area!\"\nassert     (triangle_area(2, 7) == 10.5), \"Wrong area!\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triangle_area(1, 1) == 1, f\"triangle_area(1, 1) == 1 failed.\"\nassert     triangle_area(3, 4) == 4.5, f\"triangle_area(3, 4) == 4.5 failed.\"\nassert     triangle_area(5, 10) == 6, f\"triangle_area(5, 10) == 6 failed.\"\nprint(\"triangle_area() passed.\")\n\ndef right_triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a right triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(1, 2) == 1, 'triangle_area(1, 2) error'\nassert     triangle_area(1, 3) == 2, 'triangle_area(1, 3) error'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triangle_area(1,2) == 0.5\nassert     triangle_area(3,4) == 2.25\nassert     triangle_area(3,10) == 6.0\n\nprint(\"Solved triangle_area\")\n\ndef square_perimeter(a):\n    \"\"\"Given length of one side of square return perimeter.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(3,5) == 7.5\nassert     triangle_area(8,12) == 56\nassert     triangle_area(8,13) == 58.5\nassert     triangle_area(1,2) == 0.5\nassert     triangle_area(1,1) == 0\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triangle_area(3,5) == 6, 'Incorrect area'\nassert     triangle_area(5,3) == 6, 'Incorrect area'\nassert     triangle_area(5,6) == 12, 'Incorrect area'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef square_area(a):\n    \"\"\"Given length of a side return area for a square.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(10) == 55\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     median([]) == None\nassert     median([1]) == 1\nassert     median([2,1]) == 1.5\nassert     median([2,1,3]) == 2\nassert     median([3,2,1]) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     median([3,1,4,5,2]) == 3\nassert     median([3,1,4,5,2,6]) == 4\nassert     median([3,1,4,5,2,6,8]) == 5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     median([]) == None\nassert     median([1]) == 1\nassert     median([1, 2]) == 1.5\nassert     median([2, 1]) == 1\nassert     median([1, 2, 3]) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef find_top_k_medians(l, k):\n    \"\"\"Return the top k medians of the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef distance(p1: tuple, p2: tuple) -> float:\n    \"\"\"Return Euclidean distance of two points.\n    \"\"\"\n    pass\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    pass\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    pass\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (median([]) == None), \"median of empty list is None\"\nassert     (median([2]) == 2), \"median of list with single element is the element itself\"\nassert     (median([2, 2]) == 2), \"median of list with two identical elements is the element itself\"\nassert     (median([2, 3]) in [2, 3]), \"median of list with two different elements is the one larger than the other\"\nassert     (median([2, 3, 4]) in [2, 3, 4]), \"median of list with three different elements is the one larger than the two others\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     median([1, 2, 3, 4]) == 2\nassert     median([5, 4, 3, 2, 1]) == 3.5\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([5, 4, 3, 2, 1]) == 3\n\nif __name__ == \"__main__\":\n    print(\"You've run the wrong program!\""
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abacaba\") == True\nassert     is_palindrome(\"amanaplanacanalpanama\") == True\nassert     is_palindrome(\"abcdcba\") == True\nassert     is_palindrome(\"amanaplanacanalpandemonium\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"radar\") == True\nassert     is_palindrome(\"radix\") == False\nassert     is_palindrome(\"radar\") == True\nassert     is_palindrome(\"abbab\") == True\nassert     is_palindrome(\"ab\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_palindrome(\"Anna\") == False\nassert     is_palindrome(\"Anna\") == False\nassert     is_palindrome(\"Able was I ere I saw Elba\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"I think, therefore I am\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef palindrome_sentence(sentence: str) -> bool:\n    \"\"\"\n    Returns True if sentence is a palindrome, else False\n    \"\"\"\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_palindrome('aba') == True\nassert     is_palindrome('abacba') == True\nassert     is_palindrome('abb') == False\nassert     is_palindrome('abccba') == False\nassert     is_palindrome('') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"a\") == False, \"None\"\nassert     is_palindrome(\"ab\") == False, \"None\"\nassert     is_palindrome(\"aba\") == True, \"None\"\nassert     is_palindrome(\"abba\") == True, \"None\"\nassert     is_palindrome(\"abcba\") == True, \"None\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"anna\") == True, \"Anna\"\nassert     is_palindrome(\"anna1\") == False, \"Anna1\"\nassert     is_palindrome(\"anna1\") == False, \"Anna2\"\nassert     is_palindrome(\"anna\") == True, \"Anna3\"\nassert     is_palindrome(\"anna\") == True, \"Anna4\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"mom\") == True\nassert     is_palindrome(\"ok\") == False\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"aaa\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_palindrome('Kayak') == True\nassert     is_palindrome('Civic') == True\nassert     is_palindrome('John') == False\nassert     is_palindrome('a') == True\nassert     is_palindrome('') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_palindrome('mom') == True, 'is not palindrome'\nassert     is_palindrome('sassas') == False, 'is palindrome'\nassert     is_palindrome('dad') == True, 'is not palindrome'\nassert     is_palindrome('mom') == True, 'is not palindrome'\n\n\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the inverse of 2^n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     modp(1, 5) == 4\nassert     modp(2, 5) == 2\nassert     modp(3, 5) == 1\nassert     modp(0, 5) == 1\n\ndef modp_add(a: int, b: int, p: int):\n    \"\"\"Return (a + b) modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     modp(5, 101) == 4\nassert     modp(5, 113) == 1\nassert     modp(5, 257) == 1\nassert     modp(5, 65537) == 3\nassert     modp(5, 18446744073709551617) == 1"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef exp(n: int, p: int):\n    \"\"\"Return the exponent n^p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \n\ndef mod_mult_inv(x: int, m: int):\n    \"\"\"Return modular multiplicate inverse of x with modulo m.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     modp(0, 2) == 0\nassert     modp(1, 2) == 1\nassert     modp(2, 2) == 0\nassert     modp(3, 2) == 1\nassert     modp(4, 2) == 0\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"zebra\")) == \"zebra\", \"Test failed\"\nprint(\"Test passed!\")\n\n\ndef decode_caesar(s: str, n: int):\n    \"\"\"\n    takes as input string and the shift shift. Returns decoded string.\n    \"\"\"\n    assert n >= 0, \"Value must be greater than or equal to 0\"\n    assert len(s) >= 0, \"String must be non-empty\"\n    if n == 0:\n        return s\n    else:\n        return \"\".join([chr((ord(ch) - ord(\"a\") + n - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n\n\ndef encode_caesar(s: str, n: int):\n    \"\"\"\n    takes as input string and the shift shift. Returns encoded string.\n    \"\"\"\n    "
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decode_shift(encode_shift(\"xyz\")) == \"xyz\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"Hello\")) == \"Hello\"\nassert     decode_shift(encode_shift(\"Goodbye\")) == \"Goodbye\"\nassert     decode_shift(encode_shift(\"Python\")) == \"Python\"\nassert     decode_shift(encode_shift(\"Quiz\")) == \"Quiz\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_shift(encode_shift(\"acb\")) == \"abc\", \"Wrong!\"\nassert     decode_shift(encode_shift(\"zyx\")) == \"abc\", \"Wrong!\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\", \"Wrong!\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\", \"Wrong!\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\", \"Wrong!\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_shift(encode_shift(\"Hello world!\")) == \"Hello world!\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decode_shift(encode_shift(\"i am your friend\")) == \"am your friend\"\n\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"Hello\")) == \"Hello\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decode_shift(encode_shift(\"Hello\")) == \"Hello\"\nassert     decode_shift(encode_shift(\"World\")) == \"World\"\n\ndef encode_spoiler(s: str):\n    \"\"\"\n    returns string with first letter of every word in the string capitalized.\n    \"\"\"\n    return \" \".join([ch.capitalize() for ch in s.split(\" \")])\n\ndef decode_spoiler(s: str):\n    \"\"\"\n    takes as input string with first letter of every word in the string capitalized. \n    Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     \"how now brown cow\" == decode_shift(encode_shift(\"how now brown cow\"))"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"apple\") == \"pple\"\nassert     remove_vowels(\"peach\") == \"ch\"\nassert     remove_vowels(\"pea\") == \"e\"\nassert     remove_vowels(\"lovely\") == \"ly\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"Hi there\") == \"h threre\"\nassert     remove_vowels(\"Python is awesome\") == \"ythn s wzme\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"o\") == \"\"\nassert     remove_vowels(\"hello\") == \"hll\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_vowels(text) == 'qwrstuc'\nassert     remove_vowels(text[1:]) == 'ystuc'\nassert     remove_vowels(text[2:]) =='stuc'\nassert     remove_vowels(text[2:5]) =='suc'\nassert     remove_vowels(text[2:5:2]) =='sc'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"I am a boy!\") == \" m  yr b!\", \"remove_vowels('I am a boy!') =='m  yr b!'\"\nassert     remove_vowels(\"I love Python!\") == \" lv Pythn\", \"remove_vowels('I love Python!') == 'lv Pythn'\"\nassert     remove_vowels(\"I am a student\") == \" m  yr sntnt\", \"remove_vowels('I am a student') =='m  yr sntnt'\"\nassert     remove_vowels(\"I like Python\") == \" lk Pythn\", \"remove_vowels('I like Python') == 'lk Pythn'\"\nassert     remove_vowels(\"I have nothing to do\") == \" hv nthng t dd nt\", \"remove_vowels('I have nothing to do') == 'hv nthng t dd nt'\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_vowels('') == '', 'Empty string'\nassert     remove_vowels('Hello') == 'Hll', 'Hello'\nassert     remove_vowels('Heeololeo') == 'Hlll', 'Heeololeo'\nassert     remove_vowels('Heeololeo') == 'Hlll', 'Heeololeo'\nassert     remove_vowels('Heeololeo') == 'Hlll', 'Heeololeo'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"I have never seen a thin person drinking Diet Coke.\") ==\\\n        \" hv nvr sn  thn prsn drnkng Dt Ck.\"\nassert     remove_vowels(\"I have never seen a person drinking Diet Coke.\") ==\\\n        \" hv nvr sn  thn prsn drnkng Dt Ck.\"\nassert     remove_vowels(\"I have never seen a person drinking Diet Coke.\") ==\\\n        \" hv nvr sn  thn prsn drnkng Dt Ck.\"\nassert     remove_vowels(\"I have never seen a person drinking Diet Coke.\") ==\\\n        \" hv nvr sn  thn prsn drnkng Dt Ck.\"\nassert     remove_vowels(\"I have never seen a person drinking Diet Coke.\") ==\\\n        \" hv nvr sn  thn prsn drnkng Dt Ck.\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_vowels(\"The quick brown fox jumped over the lazy dog\") == \"Th qck brwn fx jmpd vr th lzy dg\", \"remove_vowels failure\"\nassert     remove_vowels(\"Python rules!\") == \"Pythn rlss!\", \"remove_vowels failure\"\nassert     remove_vowels(\"AEIOU\") == \"\", \"remove_vowels failure\"\nprint(\"remove_vowels success\")\n\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes string and returns boolean value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_vowels('skydiving') == 'diving','remove_vowels returns incorrect string.'\nassert     remove_vowels('programming') == 'rgmng','remove_vowels returns incorrect string.'\nassert     remove_vowels('coding') == 'odin','remove_vowels returns incorrect string.'\nassert     remove_vowels('nanjing') == 'njnng','remove_vowels returns incorrect string.'\nassert     remove_vowels('kayaking') == 'kajking','remove_vowels returns incorrect string.'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \n\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('Goodbye') == 'Bldy'\nassert     remove_vowels('Everything') == 'Thnks'\nassert     remove_vowels('Your place is a great place') == 'Yr Plce is Grt place'\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_threshold([1,2,3], 4) == False, \"Wrong output\"\nassert     below_threshold([1,2,3], 3) == True, \"Wrong output\"\nassert     below_threshold([1,2,3], 0) == True, \"Wrong output\"\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if any number in the list l is above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_threshold([1,2,3,4,5], 5) == True, \"Test 1\"\nassert     below_threshold([1,2,3,4,5], 2) == False, \"Test 2\"\n\nprint(\"all tests passed\")"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_threshold([1,2,3], 10) == False\nassert     below_threshold([1,2,3], 4) == False\nassert     below_threshold([1,2,3], 2) == True\n\n\ndef has_n_vowels(s: str, n: int):\n    \"\"\"Return True if string s has exactly n vowels.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_threshold([1,2,3], 4) == True\nassert     below_threshold([1,2,3], 3) == False\nassert     below_threshold([1,2,3], 2) == True\nassert     below_threshold([1,2,3], 1) == True\nassert     below_threshold([1,2,3], 0) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3], 0) == False\nassert     below_threshold([1, 2, 3], 1) == True\nassert     below_threshold([1, 2, 3], 2) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 10) == False\nassert     below_threshold([0, 0], 0) == True\nassert     below_threshold([0, 1, 2, 3, 4, 5], 0) == True\nassert     below_threshold([1, 2, 3, 4, 5], 5) == True\nassert     below_threshold([1, 2, 3, 4, 5], 7) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 5) == True\nassert     below_threshold([1, 2, 3, 4, 5], 6) == False\nassert     below_threshold([1, 2, 3, 4, 5], 0) == True\nassert     below_threshold([-1, -2, -3, -4, -5], -5) == True\nassert     below_threshold([-1, -2, -3, -4, -5], -6) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nprint('Test for the correctness of add is done!')\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add(1, 2) == 3\nassert     add(-1, 5) == 4\nassert     add(1.0, 5.0) == 6.0\nassert     add('1', '5') == '56'\n\ndef add2(x, y):\n    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add(1, 2) == 3\nassert     add(-1, 2) == 1\nassert     add(0, 2) == 2\nassert     add(1, 0) == 1\nassert     add(1, -1) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add(10, 20) == 30\nassert     add(-1, 1) == 0\nassert     add(-1, -1) == -2\n\ndef test_add():\n    \"\"\"This function is created to test add()\n    \"\"\"\n    try:\n        add(10, 20)\n    except:\n        print(\"Something is wrong\")\n    else:\n        print(\"Everything is fine\")\n\n\nif __name__ == \"__main__\":\n    test_add("
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef is_sub_str(s0: str, s1: str):\n    \"\"\"\n    Check if s0 is a sub-string of s1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     same_chars(\"ab\", \"ab\")\nassert not same_chars(\"ab\", \"ac\")\nassert not same_chars(\"abc\", \"abc\")\nassert same_chars(\"abcd\", \"abcd\")\nassert not same_chars(\"abcd\", \"abc\")\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     same_chars('fan', 'fond') == True\nassert     same_chars('abc', 'acb') == False\nassert     same_chars('fang', 'fant') == False\nassert     same_chars('', '') == True\n\nprint(same_chars('fan', 'fond'))\nprint(same_chars('abc', 'acb'))\nprint(same_chars('fang', 'fant'))\nprint(same_chars('', ''))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     same_chars('abc', 'abc') == True\nassert     same_chars('abc', 'abcd') == False\nassert     same_chars('', '') == True\nassert     same_chars('', 'abcd') == False\n\ndef same_chars_counter(s0: str, s1: str):\n    \"\"\"\n    Get the number of characters that match.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     same_chars('', 'a') == False\nassert     same_chars('a', 'a') == True\nassert     same_chars('aaa', 'a') == False\nassert     same_chars('aa', 'bb') == False\nassert     same_chars('aa', 'aa') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     same_chars(    \"apple\",\n                        \"banana\") == False, \"wrong result for 'apple'\"\nassert     same_chars(    \"apple\",\n                        \"apple\") == True, \"wrong result for 'apple'\"\nassert     same_chars(    \"apple\",\n                        \"ant\") == False, \"wrong result for 'ant'\"\nassert     same_chars(    \"apple\",\n                        \"\") == False, \"wrong result for ''\"\nassert     same_chars(    \"\",\n                        \"\") == True, \"wrong result for ''\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     same_chars(\"apple\", \"banana\") == False\nassert     same_chars(\"apple\", \"apple\") == True\nassert     same_chars(\"banana\", \"apple\") == False\nassert     same_chars(\"\", \"\") == True\nassert     same_chars(\"\", \"a\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     same_chars(\"Hello\", \"Helloy\") == True\nassert     same_chars(\"cat\", \"tac\") == True\nassert     same_chars(\"Race\", \"Care\") == True\nassert     same_chars(\"face\", \"paper\") == True\nassert     same_chars(\"lake\", \"laker\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     same_chars(\"aaab\",\"aaac\") == False\nassert     same_chars(\"aa\",\"aaa\") == False\nassert     same_chars(\"aaaa\",\"aaab\") == False\nassert     same_chars(\"aa\",\"aaa\") == True\nassert     same_chars(\"abc\",\"abc\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     same_chars('act', 'cat') == False, \"same_chars('act', 'cat')\"\nassert     same_chars('a', 'a') == True, \"same_chars('a', 'a')\"\nassert     same_chars('ab', 'a') == False, \"same_chars('ab', 'a')\"\nassert     same_chars('ab', 'ab') == True, \"same_chars('ab', 'ab')\"\nassert     same_chars('ab', 'abb') == False, \"same_chars('ab', 'abb')\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fib(0) == 1\nassert     fib(1) == 1\nassert     fib(2) == 2\nassert     fib(3) == 3\nassert     fib(4) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [fib(i) for i in range(10)] == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert fib(1) == 1\n    assert fib(2) == 1\n    assert fib(3) == 2\n    "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     0 == fib(0)\nassert     1 == fib(1)\nassert     1 == fib(2)\nassert     2 == fib(3)\nassert     3 == fib(4)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<html><body><h1>Title</h1></body></html>\")\nassert     correct_bracketing(\"<html><body><h1>Title</h1></body></html>\")\nassert     correct_bracketing(\"<body><h1>Title</h1></body>\")\nassert not correct_bracketing(\"<body>\")\nassert not correct_bracketing(\"<html>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<\") == False, \"One opening bracket without closing\"\nassert     correct_bracketing(\"<<\") == False, \"Two opening brackets without closing\"\nassert     correct_bracketing(\"<\") == False, \"One closing bracket without opening\"\nassert     correct_bracketing(\">>\") == False, \"Two closing brackets without opening\"\nassert     correct_bracketing(\"<><\") == False, \"Two opening brackets without closing\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\">(<())()(())()<(<()<>)\") == True\nassert     correct_bracketing(\"(>\") == False\nassert     correct_bracketing(\">(<(>)\") == False\nassert     correct_bracketing(\">(())((()()))\") == False\nassert     correct_bracketing(\">(())()\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<hello>\") == True\nassert     correct_bracketing(\"<i><g>\") == True\nassert     correct_bracketing(\"<i>\") == False\nassert     correct_bracketing(\"<i><g>\") == False\nassert     correct_bracketing(\"<i><g></i>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<foo>\") == True, \"One opening tag, one closing tag\"\nassert     correct_bracketing(\"<foo>bar\") == False, \"Two opening tags, but no closing tag\"\nassert     correct_bracketing(\"<foo>bar</foo>\") == True, \"Two opening tags, and closing tags in the right order\"\nassert     correct_bracketing(\"<foo>bar</bar>\") == False, \"Two opening tags, but closing tag of a different tag\"\nassert     correct_bracketing(\"<foo>bar</foo>baz\") == False, \"Multiple opening tags, but no closing tags\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing('<') == False, 'Failed on bracket: <'\nassert     correct_bracketing('<<>>') == True, 'Failed on bracket: <<>>'\nassert     correct_bracketing('<><') == False, 'Failed on bracket: <><'\nassert     correct_bracketing('<><<><') == False, 'Failed on bracket: <><<><'\nassert     correct_bracketing('<><<>') == True, 'Failed on bracket: <><<>'\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<><<><<><>\") == False\nassert     correct_bracketing(\"<><<><<>>\") == False\nassert     correct_bracketing(\"<><<><>>\") == True\n\nassert     correct_bracketing(\"<><<><<>>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing('') == True, ''\nassert     correct_bracketing('<') == False, ''\nassert     correct_bracketing('>') == False, ''\nassert     correct_bracketing('<>') == True, ''\nassert     correct_bracketing('<>>') == True, ''\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     monotonic([0, 1, 2, 3, 4]) == True\nassert     monotonic([3, 2, 1, 0, 4]) == True\nassert     monotonic([0, 1, 2, 4, 3]) == True\nassert     monotonic([0, 1, 2, 3, 4, 5]) == True\nassert     monotonic([5, 4, 3, 2, 1, 0]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \n\nif __name__ == '__main__':\n    print(monotonic([1,2,3,4]))\n    print(monotonic([1,2,3,4,5]))\n    print(monotonic([10,9,8,7,6]))\n    print(monotonic([3,2,1,1]))\n    print(monotonic([0,0,0,0]))\n    print(monotonic([0]))\n\n    print(monotonic([1,3,5,7,9]))\n    print(monotonic([1,3,5,7,9, 11]))\n    print(monotonic([1,3,5,7,9, 11, 13]))\n    print(monotonic([1,3,5,7,9, 11, 13, 15]))\n    print(monotonic([1,3,5,7,9, 11, 13, 15, 17]))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef is_unique(s: str):\n    \"\"\"Return True is str is unique, else False.\n    \"\"\"\n    pass\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return True if s1 is anagram of s2, else False.\n\n    Hint: Look at the built-in Python method sorted().\n    \"\"\"\n    pass\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is palindrome, else False.\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     monotonic([1,2,3,4,5]) == True\nassert     monotonic([5,4,3,2,1]) == True\nassert     monotonic([1,2,3,2,1]) == True\nassert     monotonic([1,2,1,1]) == True\nassert     monotonic([1,1,1,1,1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef sum_squared_deviation(l: list, n: int):\n    \"\"\"Return the sum of squared deviation.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1, 1]) == True\nassert     monotonic([1, 1, 1]) == True\nassert     monotonic([1, 2, 1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     monotonic([1,2,3,4,5])     == True\nassert     monotonic([5,4,3,2,1])     == True\nassert     monotonic([1,1,1,1,1])     == True\nassert     monotonic([1,2,1,2,1])     == False\nassert     monotonic([])     == True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     set(common([1, 2, 3], [1, 2, 4])) == set([1, 2])\nassert     set(common([1, 2, 3], [1, 2, 3])) == set([1, 2, 3])\nassert     set(common([1, 2, 3], [3, 4])) == set([1, 2, 3])\nassert     set(common([1, 2, 3], [])) == set([1, 2, 3])\nassert     set(common([], [1, 2, 3])) == set([1, 2, 3])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     common(['a', 'b', 'c', 'd', 'e'], ['a', 'e', 'b', 'd', 'z', 'f']) == ['a', 'e', 'b', 'd']\nassert     common(['a', 'b', 'c', 'd', 'e'], ['a', 'e', 'b', 'f']) == ['a', 'e']\nassert     common(['a', 'b', 'c', 'd', 'e'], ['b', 'c']) == ['b', 'c']\nassert     common(['a', 'b', 'c', 'd', 'e'], ['e', 'b', 'c', 'd']) == ['e', 'b', 'c', 'd']\nassert     common(['a', 'b', 'c', 'd', 'e'], ['b', 'c', 'd', 'e']) == ['b', 'c', 'd', 'e']\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     common([1, 2], [1, 2]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 5]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [5, 6, 7, 8]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (common([1, 2, 3, 4], [2, 4, 5]) == [2, 4])\nassert     (common([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3])\nassert     (common([1, 2, 3, 4], [2, 3]) == [])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     common(['a','b','c'], ['a','b','c']) == []\nassert     common(['a','b','c'], ['a','b','c','d']) == ['a','b','c']\nassert     common(['a','b','c'], ['a','b','d']) == ['a','b']\nassert     common(['a','b','c'], ['d','e']) == []\nassert     common(['a','a','b','c'], ['a','a','b','c','d']) == ['a','b','c']\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1, 2, 3] == common([1, 2, 3], [1, 2, 3])\nassert     [] == common([1, 2, 3], [1, 2, 3, 4])\nassert     [3, 4] == common([1, 2, 3], [1, 2, 4])\nassert     [4] == common([1, 2, 3], [1, 2, 4, 5])\nassert     [1, 2] == common([1, 2, 3, 4], [1, 2, 5, 6])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [2, 3] == common([1, 2, 3], [1, 2, 4])\nassert     [2, 4] == common([1, 2, 3], [2, 4, 6])\nassert     [2] == common([1, 2, 3], [2])\nassert     [] == common([1, 2, 3], [4, 5, 6])\nassert     [] == common([1, 2, 3], [])\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(101) == 101\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(77) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(0) == None\nassert     largest_prime_factor(1) == None\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(2)     == 2\nassert     largest_prime_factor(3)     == 3\nassert     largest_prime_factor(6)     == 3\nassert     largest_prime_factor(100)    == 5\nassert     largest_prime_factor(12)     == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(25) == 5\nassert     largest_prime_factor(10) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(42) == 6\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(13) == 13\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(19) == 3\nassert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(20) == 2\nassert     largest_prime_factor(16) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(100) == 97\nassert     largest_prime_factor(234) == 23\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(17) == 17\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(97) == 97\nassert     largest_prime_factor(1318) == 13\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(600851475143) == 6857\n\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest multiple of n that is a multiple of all of the\n    primes <= n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(600851475143) == 6857\nassert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(0) == 1\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(8) == 2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_to_n(10) == 55,         f\"expected 55 got {sum_to_n(10)}\"\nassert     sum_to_n(100) == 5050,     f\"expected 5050 got {sum_to_n(100)}\"\nassert     sum_to_n(200) == 17010,     f\"expected 17010 got {sum_to_n(200)}\"\nassert     sum_to_n(1000) == 500500,     f\"expected 500500 got {sum_to_n(1000)}\"\nassert     sum_to_n(1500) == 383838,     f\"expected 383838 got {sum_to_n(1500)}\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef main():\n    \"\"\"main is the test function\n    \"\"\"\n    # run the test function\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef print_numbers(n: int):\n    \"\"\"print_numbers is a function that prints numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(20) == 78\nassert     sum_to_n(30) == 156\nprint(\"sum_to_n works as expected.\")\n\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \nassert\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef sum_to_n_while(n: int):\n    \"\"\"sum_to_n_while is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(0) == 0\nassert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"(())((()())())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef get_top_k_idx(scores, k):\n    pass\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()()()\") == True\nassert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"((\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n\ndef correct_bracketing_3(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n\ndef split_on_uppercase(s: str, delimiter: str = \" \") -> List[str]:\n    \"\"\" Splits a string on uppercase letters, keeping the uppercase letters in\n    their own words.\n    >>> split_on_uppercase(\"ThIs Is A sPeLt\")\n    ['Th', 'Is', 'A','sPeLt']\n    >>> split_on_uppercase(\"ThIs-Is-A-sPeLt\")\n    ['Th', 'Is', 'A','sPeLt']\n    >>> split_on_uppercase(\"ThIs Is A sPeLt\", \"-\")\n    ['Th', 'Is', 'A','sPeLt']\n    >>> split_on_uppercase(\"ThIs is a sPeLt\")\n    ['Th', 'is', 'a','sPeLt']\n    >>> split_on_uppercase(\"ThIs Is A sPeLt!\", \"!\")\n    ['Th', 'Is', 'A','sPeLt!']\n    \"\"\"\n    pass\n\ndef split_on_uppercase_2(s: str, delimiter: str = \" \") -> List[str]:\n    \"\"\" Splits a string on uppercase letters, keeping the uppercase letters in\n    their own words.\n    >>> split_on_uppercase(\"ThIs Is A sPeLt\")\n    ['Th', 'Is', 'A','sPeLt']\n    >>> split_on_uppercase(\"ThIs-Is-A-sPeLt\")\n    ['Th', 'Is', 'A','sPeLt']\n    >>> split_on_uppercase(\"ThIs Is A sPeLt\", \"-\")\n    ['Th', 'Is', 'A','sPeLt']\n    >>> split_on_uppercase(\"ThIs is a sPeLt\")\n    ['Th', 'is', 'a','sPeLt']\n    >>> split_on_uppercase(\"ThIs Is A sPeLt!\", \"!\")\n    ['Th', 'Is', 'A','sPeLt!']\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing('()') == True\nassert     correct_bracketing('(())') == True\nassert     correct_bracketing('()()') == True\nassert     correct_bracketing('(()') == False\nassert     correct_bracketing('(())') == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\")\nassert     correct_bracketing(\"(())\")\nassert     correct_bracketing(\"())\")\nassert     correct_bracketing(\"(()\")\nassert     not correct_bracketing(\"())\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing('()()')     == True\nassert     correct_bracketing('()()(()(')     == False\nassert     correct_bracketing('())(')     == False\nassert     correct_bracketing('(()(((((')     == False\nassert     correct_bracketing('()(((((')     == False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"((()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\")()(\") == False\nassert     correct_bracketing(\"((()))\") == False\nassert     correct_bracketing(\"()()(\") == False\nassert     correct_bracketing(\"((())()\") == False\nassert     correct_bracketing(\"(())((()()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(((\") == False\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"(())((()())())\") == True\nassert     correct_bracketing(\"((()))(\") == False\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     derivative([0, 1])     == [0, 1]\nassert     derivative([1, 0])     == [1, 0]\nassert     derivative([1, 1])     == [0, 1]\nassert     derivative([1, 2])     == [1, 2]\nassert     derivative([1, 2, 3])     == [2, 3, 6]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef newton(xs: list, x0: float, epsilon: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     x0 is the initial guess\n    epsilon is the error to be minimized.\n    Return the root of the polynomial to within error epsilon.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     derivative([1, 2, 3, 4, 5]) == [5, 2, 6, 4, 1]\nassert     derivative([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     derivative([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     derivative([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\nassert     derivative([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     derivative([1,1]) == [1,2]\nassert     derivative([1,0,1]) == [1,1]\nassert     derivative([1,1,1]) == [2,3]\nassert     derivative([1,0,1,1]) == [1,1]\n\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     derivative([1, 2, 3]) == [2, 3, 6]\nassert     derivative([-1, 1, 0, 1]) == [0, -1, 1, 0]\nassert     derivative([1, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0]\nassert     derivative([0]) == [0]\nassert     derivative([0, 0]) == [0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n\n\ndef main():\n    \"\"\" Main function. \"\"\"\n    print(\"Main function\")\n    print(\"This module contains one class and one function.\")\n    print(\"There is no need to import it.\")\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     derivative([1]) == [1]\nassert     derivative([1, 1]) == [2]\nassert     derivative([1, 2, 1]) == [2, 2]\nassert     derivative([1, 2, 3, 1]) == [3, 3]\nassert     derivative([1, 2, 3, 4, 1]) == [5, 6, 3]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     derivative([2, 3]) == [3, 2]\nassert     derivative([2, 4]) == [4, 2]\nassert     derivative([0, 1]) == [0, 1]\nassert     derivative([-1, 3]) == [-3, -1]\nassert     derivative([-1, 2]) == [2, -1]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef get_fibfib(n: int) -> int:\n    \"\"\"\n    Get the nth FibFib number.\n    :param n:\n    :return:\n    \"\"\"\n    return \n\ndef test_fibfib():\n    assert \n    return \n\ndef main():\n    print('ok')\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef fibfib2(n: int):\n    \"\"\"Another way to compute the fibfib number sequence, using the same formula.\"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     vowels_count('lintcode')                 == 3\nassert     vowels_count('bbaeixou')                 == 6\nassert     vowels_count('hello')                     == 0\nassert     vowels_count('www.lintcode.com')         == 2\nassert     vowels_count('yxyz')                     == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     vowels_count(\"\") == 0, \"should be 0\"\nassert     vowels_count(\"abcde\") == 3, \"should be 3\"\nassert     vowels_count(\"abcdef\") == 3, \"should be 3\"\nassert     vowels_count(\"abcdefy\") == 2, \"should be 2\"\nassert     vowels_count(\"yabcdef\") == 2, \"should be 2\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     vowels_count('abcde') == 0\nassert     vowels_count('a') == 1\nassert     vowels_count('abcde') == 1\nassert     vowels_count('aBCde') == 1\nassert     vowels_count('ABcde') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     vowels_count('') == 0, \"Function returns incorrect result for empty string\"\nassert     vowels_count('abcde') == 0, \"Function returns incorrect result for non-vowels string\"\nassert     vowels_count('aeiou') == 5, \"Function returns incorrect result for string with vowels\"\nassert     vowels_count('xyz') == 0, \"Function returns incorrect result for string with non-vowels\"\nassert     vowels_count('xyzyz') == 1, \"Function returns incorrect result for string with non-vowels\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     vowels_count('sarasa') == 3\nassert     vowels_count('ipura') == 2\nassert     vowels_count('p.o.w.r.d') == 1\nassert     vowels_count('yamada') == 1\nassert     vowels_count('a') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     vowels_count(\"water\")     == 3,     \"1st Example\"\nassert     vowels_count(\"yay\")     == 2,     \"2nd Example\"\nassert     vowels_count(\"yaza\")     == 3,     \"3rd Example\"\nassert     vowels_count(\"moonmen\")     == 4,     \"4th Example\"\nassert     vowels_count(\"\")     == 0,     \"5th Example\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     vowels_count('abracadabra') == 5\nassert     vowels_count('acd') == 0\nassert     vowels_count('acd') == 0\nassert     vowels_count('a') == 1\nassert     vowels_count('aeiou') == 6\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef test_vowels_count():\n    \"\"\"Test cases for the vowels_count function.\"\"\"\n    # write more test cases\n\n\ndef main():\n    print(\"Checking for vowels...\")\n    try:\n        test_vowels_count()\n        print(\"Correct!\")\n    except AssertionError:\n        print(\"Wrong!\")\n        raise\n\n\nif __name__ == '__main__':\n    main()\n    \n\"\"\"\nChecking for vowels...\nCorrect!\n\"\""
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     vowels_count('test') == 5\nassert     vowels_count('yay') == 3\nassert     vowels_count('yayy') == 1\nassert     vowels_count('love') == 0\nassert     vowels_count('yay') == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     vowels_count('foobar') == 3\nassert     vowels_count('foo') == 1\nassert     vowels_count('foo yay') == 2\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (circular_shift(42, 1) == '2')\nassert (circular_shift(42, 2) == '0')\nassert (circular_shift(42, 3) == '4')\nassert (circular_shift(42, 4) == '2')\nassert (circular_shift(42, 42) == '0')\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     circular_shift(\"12345\", 1) == \"54321\"\nassert     circular_shift(\"12345\", 2) == \"34512\"\nassert     circular_shift(\"12345\", 3) == \"45123\"\nassert     circular_shift(\"12345\", 4) == \"1234\"\nassert     circular_shift(\"12345\", 5) == \"12345\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     circular_shift(12, 1) == \"21\"\nassert     circular_shift(12, 2) == \"12\"\nassert     circular_shift(12, 3) == \"123\"\nassert     circular_shift(12, 4) == \"1234\"\nassert     circular_shift(12, 5) == \"12345\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     str(circular_shift(42, 1)) == \"2,1\"\nassert     str(circular_shift(42, 2)) == \"1,4,2\"\nassert     str(circular_shift(42, 5)) == \"4,2,1\"\nassert     str(circular_shift(42, 6)) == \"2,1,4\"\nassert     str(circular_shift(42, 7)) == \"1,4,2,1,4\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     str(circular_shift(8, 2)) == \"1000\", \"Not a circular shift of 2\"\nassert     str(circular_shift(123, 4)) == \"3110\", \"Not a circular shift of 4\"\nassert     str(circular_shift(12, 7)) == \"12\", \"Not a circular shift of 7\"\nassert     str(circular_shift(0, 7)) == \"0\", \"Not a circular shift of 7\"\n\ndef mul_inv(a, b):\n    \"\"\"\n    Function that multiplies two numbers and returns the multiplicative inverse of a mod b,\n    where a*x = 1 (mod b) i.e., gcd(a, b) = 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     circular_shift('1234', 1) == '4321'\nassert     circular_shift('1234', 2) == '2341'\nassert     circular_shift('1234', 3) == '1432'\nassert     circular_shift('1234', 4) == '4321'\nassert     circular_shift('1234', 5) == '3412'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     circular_shift('1234', 1) == '2341'\nassert     circular_shift('1234', 2) == '3451'\nassert     circular_shift('1234', 3) == '41'\nassert     circular_shift('1234', 4) == '1234'\nassert     circular_shift('1234', 5) == '1423'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     '1234' == circular_shift(4321, 1)\nassert     '4321' == circular_shift(4321, 2)\nassert     '3456' == circular_shift(4321, 3)\nassert     '2134' == circular_shift(4321, 4)\nassert     '4321' == circular_shift(4321, 5)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     circular_shift(1234, 4) == \"4321\"\nassert     circular_shift(1234, -4) == \"4321\"\nassert     circular_shift(1234, 1) == \"3412\"\nassert     circular_shift(1234, 2) == \"234\"\nassert     circular_shift(1234, 3) == \"1\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     str(circular_shift(7, 1)) == '0111'\nassert     str(circular_shift(7, 2)) == '0121'\nassert     str(circular_shift(7, 3)) == '0112'\nassert     str(circular_shift(7, 4)) == '1234'\nassert     str(circular_shift(7, 5)) == '3214'\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     digitSum(\"asd\") == 37\nassert     digitSum(\"asddfsadf\") == 91\nassert     digitSum(\"asddfdsafsadf\") == 1470\n\ndef question2():\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of all the digits of the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digitSum('(IAMANU') == 25, \"WRONG\"\nassert     digitSum('(SADFSAF') == 0, \"WRONG\"\nassert     digitSum('123') == 6, \"WRONG\"\nassert     digitSum('(JKL;)') == 0, \"WRONG\"\nprint(\"TEST PASSED: digitSum()\")\n\n\ndef checkString(s):\n    \"\"\"Task\n    Write a function that checks if the given string contains the specified character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digitSum('aB2D3F4') == 17, \"Not the sum of upper chars in string\"\nassert digitSum('abCF2D3F4') == 16, \"Not the sum of upper chars in string\"\nassert digitSum('abCD1F3F4') == 16, \"Not the sum of upper chars in string\"\nassert digitSum('abCD1F3F4') == 16, \"Not the sum of upper chars in string\"\n\n\ndef baseConverter(n, base):\n    \"\"\"Task\n    Write a function that takes a number n and a base b as input, and returns the corresponding\n    string representation.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digitSum('ABC') == 0\nassert     digitSum('12345ABC') == 15\nassert     digitSum('12345ABCEFG') == 20\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     digitSum('ABCD') == 13\nassert     digitSum('AB') == 65\nassert     digitSum('ABcd') == 79\nassert     digitSum('aBcD') == 65\nassert     digitSum('aBcD') == 65\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     digitSum(\"AbcD1234F\") == 37\nassert     digitSum(\"aBcD1234F\") == 37\nassert     digitSum(\"ABCD1234F\") == 37\nassert     digitSum(\"abcd1234f\") == 37\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     digitSum('') == 0\nassert     digitSum('a') == 97\nassert     digitSum('aBcD3.4') == 205\nassert     digitSum('ABCD') == 16\n\nprint(\"Tests passed!\")"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digitSum(\"ABC\") == 123, \"Wrong output\"\nassert     digitSum(\"AAaAaaAA\") == 123, \"Wrong output\"\nassert     digitSum(\"ZaAaAaA\") == 65, \"Wrong output\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef digitSum1(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fruit_distribution(\"509952\", \"650433\") == \"2\"\nassert fruit_distribution(\"544051\", \"730863\") == \"1\"\nassert fruit_distribution(\"3499\", \"23\") == \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fruit_distribution('2 3 1 4', 6) == 3\nassert fruit_distribution('3 3 3 3', 10) == 3\nassert fruit_distribution('1 2 2', 4) == 2\nassert fruit_distribution('2 2 1', 5) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fruit_distribution('3',0)==0\nassert     fruit_distribution('3',3)==3\nassert     fruit_distribution('3',2)==0\nassert     fruit_distribution('2 2',2)==0\nassert     fruit_distribution('5 2 3',7)==2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nprint('Correct!')\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fruit_distribution('10 8 4 1', 7)     == 1\nassert     fruit_distribution('10 8 4 1', 2)     == 0\nassert     fruit_distribution('10 8 4 1', 3)     == 2\nassert     fruit_distribution('10 8 4 1', 4)     == 3\nassert     fruit_distribution('10 8 4 1', 5)     == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"7 4\",4) == \"2 1\"\nassert     fruit_distribution(\"10 2\",4) == \"2 2\"\nassert     fruit_distribution(\"1 1\",4) == \"0 0\"\nassert     fruit_distribution(\"10 10\",4) == \"1 0\"\nassert     fruit_distribution(\"0 0\",4) == \"0 0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"35 42\\n3\",    70) == 20, \"The number of mango fruits in the basket is incorrect\"\nassert     fruit_distribution(\"1 1\\n5\",    10) == 0, \"The number of mango fruits in the basket is incorrect\"\nassert     fruit_distribution(\"1 1\\n1\",    10) == 1, \"The number of mango fruits in the basket is incorrect\"\nprint(\"Exercise 52 is correct.\")\n\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fruit_distribution('mango orange', 'orange') == 1\nassert     fruit_distribution('mango orange','mango') == 0\nassert     fruit_distribution('mango orange', 'orange') == 1\nassert     fruit_distribution('mango orange','mango') == 1\nassert     fruit_distribution('mango orange','mango orange') == 2\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pluck([0]) == []\nassert     pluck([1,2,3,5,7,8,9]) == [2,2]\nassert     pluck([2,3,4,6,8,9,0,1]) == [0,3]\nassert     pluck([0,3,5,8,9,2,1]) == [2,0]\nassert     pluck([3,3,1,5,4,7,9]) == [3,0]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pluck(\n            [\n                {'value': 2, 'children': []},\n                {'value': 2, 'children': []},\n                {'value': 3, 'children': []},\n            ]\n        ) == [ 2, 0 ]\n\nassert     pluck(\n            [\n                {'value': 2, 'children': []},\n                {'value': 3, 'children': []},\n                {'value': 2, 'children': []},\n                {'value': 3, 'children': []},\n                {'value': 3, 'children': []},\n            ]\n        ) == [ 2, 0 ]\n\nassert     pluck(\n            [\n                {'value': 2, 'children': [{'value': 3, 'children': []}]},\n                {'value': 3, 'children': []},\n            ]\n        ) == [ 2, 0 ]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pluck([4,6,3,1,9]) == [6, 3]\nassert pluck([1,2,3,5]) == [1,3]\nassert pluck([8,3,1,6,5,2]) == [1,0]\nassert pluck([1,3,5,7]) == []\nassert pluck([4,8,9,5,3,2]) == [4,2]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [    4, 1    ] == pluck([3, 4, 3, None, None, 5])\nassert     [    0, 0    ] == pluck([0])\nassert     [    0, 0, 0, 0    ] == pluck([0, 0, None, None, None])\nassert     [] == pluck([None, None, None])\nassert     [] == pluck([None, None, None, None, None])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nprint(pluck([]))"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [2, 1] == pluck([2, 3, 6, 7, 1, 9, 15])\nassert     [1, 0] == pluck([3, 2, 6, 7, 1, 9, 15])\nassert     [] == pluck([])\nassert     [] == pluck([0])\nassert     [] == pluck([3])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [15, 0] == pluck([1, 3, 5, 7, 9, 11, 13, 15])\nassert     [2, 0] == pluck([2, 3, 6, 8, 9])\nassert     [4, 1] == pluck([4, 5, 6, 8, 9])\nassert     [2, 1] == pluck([2, 3, 6, 8, 9, 10])\nassert     [] == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pluck([1,3,5,2,4]) == [2,0]\nassert     pluck([2,1,3,5,6]) == [2,0]\nassert     pluck([3,2,1,5,6]) == [3,0]\nassert     pluck([3,3,2,1,6]) == [3,0]\nassert     pluck([2,3,1,5,6]) == [2,0]\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4\nassert     search([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2\nassert     search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     search([1, 2, 2, 3, 3, 3, 4]) == 3 \nassert     search([1, 1, 2, 2, 3, 3, 3, 4]) == -1 \nassert     search([1, 2, 1, 1]) == -1 \nassert     search([1, 2, 2, 3, 3, 3, 4, 4]) == 4 \nassert     search([1, 2, 2, 3, 3, 3, 4, 5]) == -1 \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     search([1,1,2]) == 1\nassert     search([2,3,3,4,5,5,5]) == -1\nassert     search([2,2,2,2,2]) == 2\nassert     search([5,5,6,6,6,6]) == 5\nassert     search([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     search([1, 2, 2, 1, 3, 2, 1, 4, 5]) == 2\nassert     search([1, 2, 3]) == -1\nassert     search([3, 2, 1, 2, 1, 3, 2, 3, 3, 2, 2]) == 3\nassert     search([1, 2, 3, 3, 1, 2, 1, 2, 1, 2]) == 2\nassert     search([1, 2, 2, 1, 2, 1, 2, 3, 3, 2, 2]) == 2\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     search([3, 4, -1, 1, 3, 3, 2, 2, -1, -1, 2, 3, 3, 3, 3]) == 4\nassert     search([1, 2, -1, 2, 1, 1, 2, 2, 1, 2, -1, -1, 2, 2, 2]) == -1\nassert     search([1, 2, 1, 2, 1, 2, 2, 3, 1, 1, 2, 2, 3, 2, 2, 2, 3, 2]) == 3\nassert     search([1, 2, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3]) == -1\nassert     search([-2, 1, 3, -2, -1, 3, 2, 3, -2, -1, 1, 2, 3, 3, -2, 3, -2, -1, -2, 1]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     search([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 7, 7, 8]) == 8\nassert     search([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 7, 7, 8]) == -1\nassert     search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == -1\nassert     search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6\nassert     search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 6\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     search([1, 2, 3, 4, 5, 6, 7, 8]) == 4\nassert     search([4, 5, 6, 7, 8, 2, 6, 6]) == 7\nassert     search([3, 6, 4, 2, 6, 5, 7, 3, 8, 9, 7]) == 6\nassert     search([4, 1, 3, 1, 5, 6, 7, 8, 9, 7]) == 4\nassert     search([1, 3, 3, 5, 6, 7, 8, 9, 1]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strange_sort_list([1, 3, 5, 7]) == [1, 3, 5, 7]\nassert     strange_sort_list([7, 3, 5, 1]) == [7, 5, 3, 1]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     strange_sort_list([5, 1, 4, 2, 3]) == [1, 3, 2, 4, 5]\nassert     strange_sort_list([2, 1, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 5, 4, 3, 2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 1, 4, 2, 3]) == [1, 3, 2, 4, 5]\n\nprint('all tests have passed!'"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     strange_sort_list([3, 4, 2, 1, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 1, 2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strange_sort_list([0, 5, 3, 3, 5]) == [0, 3, 3, 5, 5], \"Wrong answer\"\nassert     strange_sort_list([99, 1, 0, 0, 6]) == [0, 0, 1, 6, 99], \"Wrong answer\"\nassert     strange_sort_list([]) == [], \"Wrong answer\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     strange_sort_list([1, 3, 2, 4, 5]) == [1, 3, 5, 2, 4]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([1, 2, 3]) == [1, 2, 3]\nassert     strange_sort_list([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]\nassert     strange_sort_list([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\ndef run():\n    print(strange_sort([1,2,4,2,3,1,0]))\n\nif __name__ == '__main__':\n    run()"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4, 5) == 5.67, \"Area of a triangle (3, 4, 5) = %s\" % triangle_area(3, 4, 5)\nassert     triangle_area(3, 2, 5) == 5.03, \"Area of a triangle (3, 2, 5) = %s\" % triangle_area(3, 2, 5)\nassert     triangle_area(3, 5, 2) == 5.03, \"Area of a triangle (3, 5, 2) = %s\" % triangle_area(3, 5, 2)\nassert     triangle_area(1, 1, 5) == 2.62, \"Area of a triangle (1, 1, 5) = %s\" % triangle_area(1, 1, 5)\nassert     triangle_area(1, 6, 3) == -1, \"Area of a triangle (1, 6, 3) = %s\" % triangle_area(1, 6, 3)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triangle_area(3, 4, 5) == 5.0\nassert     triangle_area(3, 4, 10) == -1\nassert     triangle_area(3, 4, 3) == 1.0\nassert     triangle_area(10, 10, 10) == 5.0\nassert     triangle_area(4, 5, 4) == 1.0\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triangle_area(3,4,5) == 6\nassert     triangle_area(1,2,3) == -1\nassert     triangle_area(2,1,3) == -1\nassert     triangle_area(3,5,8) == -1\nassert     triangle_area(3,4,9) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     triangle_area(5, 12, 13) == 9.07\nassert     triangle_area(5, 12, 14) == -1\nassert     triangle_area(5, 12, 15) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef rectangle_area(a, b):\n    '''\n    Given the lengths of the two sides of a rectangle. Return the area of the\n    rectangle rounded to 2 decimal points if the two sides form a valid rectangle. \n    Otherwise return -1\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triangle_area(2, 5, 7) == 2.00\nassert     triangle_area(1, 1, 2) == 0.41\nassert     triangle_area(1, 3, 2) == -1\nassert     triangle_area(2, 2, 3) == 1.25\n\nprint(\"correct triangle_area...\")\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(1, 1, 2) == 1.41, 'triangle_area(1, 1, 2) == 1.41 failed'\nassert     triangle_area(2, 1, 3) == 2.88, 'triangle_area(2, 1, 3) == 2.88 failed'\nassert     triangle_area(2, 2, 3) == 0.66, 'triangle_area(2, 2, 3) == 0.66 failed'\nassert     triangle_area(4, 4, 3) == 0.24, 'triangle_area(4, 4, 3) == 0.24 failed'\nassert     triangle_area(6, 8, 10) == -1, 'triangle_area(6, 8, 10) == -1 failed'\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triangle_area(3, 5, 4) == 1.60\nassert     triangle_area(4, 2, 3) == 2.00\nassert     triangle_area(5, 1, 3) == -1\nassert     triangle_area(1, 3, 5) == -1\nassert     triangle_area(4, 3, 3) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert\nassert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     will_it_fly([1,2,3,4,5,6,7,8,9,10], 100) == False\nassert will_it_fly([1,2,3,4,5,6,7,8,9,10], 100) == False\nassert will_it_fly([1,2,3,4,5,6,7,8,9,10], 90) == True\nassert will_it_fly([1,2,3,4,5,6,7,8,9,10], 101) == False\nassert will_it_fly([1,2,3,4,5,6,7,8,9,10], 110) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     will_it_fly(['a', 'b', 'a'], 3) == False\nassert     will_it_fly([1, 2, 3, 4], 9) == True\nassert     will_it_fly([1, 2, 3, 4, 5], 10) == True\nassert     will_it_fly([1, 2, 3, 4, 5], 9) == False\nassert     will_it_fly([1, 2, 3, 4, 5, 6], 9) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     will_it_fly([], 3) == False\nassert     will_it_fly([1], 3) == True\nassert     will_it_fly([1,2], 3) == False\nassert     will_it_fly([1,2], 4) == True\nassert     will_it_fly([1,2,3], 4) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     will_it_fly([3,6,1,5], 10) == True, \"Wrong answer\"\nassert     will_it_fly([1,1], 1) == True, \"Wrong answer\"\nassert     will_it_fly([5,5], 10) == True, \"Wrong answer\"\nassert     will_it_fly([3,6,1,5], 11) == False, \"Wrong answer\"\nassert     will_it_fly([1,1], 1) == False, \"Wrong answer\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     will_it_fly([], 0) == False, 'Wrong result'\nassert     will_it_fly([1, 3], 7) == True, 'Wrong result'\nassert     will_it_fly([1, 2, 3, 4], 7) == False, 'Wrong result'\nassert     will_it_fly([1, 2, 3, 4], 10) == True, 'Wrong result'\nassert     will_it_fly([1, 2, 3, 4], 20) == False, 'Wrong result'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     will_it_fly([1,2,3,4], 5) == True\nassert     will_it_fly([1,2,3], 4) == False\nassert     will_it_fly([], 4) == True\nassert     will_it_fly([1,2,3,4,5,6,7,8,9], 10) == True\nassert     will_it_fly([1,2,3,4,5,6,7,8,9], 11) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     will_it_fly([],0) == False\nassert     will_it_fly([1],1) == True\nassert     will_it_fly([1,2],3) == False\nassert     will_it_fly([1,2,3],5) == True\nassert     will_it_fly([1,2,3,4,5],5) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     will_it_fly([1,1], 10) == True, \"Wrong answer\"\nassert     will_it_fly([1], 10) == True, \"Wrong answer\"\nassert     will_it_fly([1], 9) == False, \"Wrong answer\"\nassert     will_it_fly([], 10) == False, \"Wrong answer\"\nassert     will_it_fly([1,9], 10) == False, \"Wrong answer\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     will_it_fly([1, 2, 3], 5) == True\nassert     will_it_fly([1, 2, 3], 15) == False\nassert     will_it_fly([1, 2, 3], 4) == True\nassert     will_it_fly([1, 2, 3], 6) == True\nassert     will_it_fly([1, 2, 3], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     will_it_fly([1,1,1], 1)\nassert     will_it_fly([1,1,1], 2)\nassert     will_it_fly([1,1,1], 3)\nassert     not will_it_fly([1,1,1], 4)\nassert     will_it_fly([1,1,1,1], 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(smallest_change([]))\n    print(smallest_change([1]))\n    print(smallest_change([2]))\n    print(smallest_change([2,2]))\n    print(smallest_change([1,3,3]))\n    print(smallest_change([1,3,3,2]))\n    print(smallest_change([1,3,3,2,1]))\n    print(smallest_change([1,3,3,2,1,2]))"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     smallest_change([1,2,3,2,1]) == 2, \"error\"\nassert     smallest_change([1,1,5,6]) == 1, \"error\"\nassert     smallest_change([1,1,2,4,2,1]) == 2, \"error\"\nassert     smallest_change([1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]) == 3, \"error\"\nassert     smallest_change([1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]) == 3, \"error\"\nprint(\"smallest_change is correct\")\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     smallest_change([1,2,3,4]) == 1, 'error in smallest_change'\nassert     smallest_change([2,4,1,3]) == 1, 'error in smallest_change'\nassert     smallest_change([1,2,4,3]) == 0, 'error in smallest_change'\nassert     smallest_change([3,2,1,3]) == 2, 'error in smallest_change'\nassert     smallest_change([4,1,2,4,3]) == 2, 'error in smallest_change'\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     smallest_change([1, 2, 3, 1]) == 2\nassert     smallest_change([2, 3, 2, 1]) == 2\nassert     smallest_change([5, 2, 4, 3, 5, 4, 3, 2, 1, 6, 5, 3, 5, 4, 3, 2, 1]) == 5\nassert     smallest_change([4, 4, 3, 4, 5, 4, 3, 2, 1, 6, 5, 3, 5, 4, 3, 2, 1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     smallest_change([1,1,3]) == 1\nassert     smallest_change([2,5,1,0]) == 0\nassert     smallest_change([2,1,1]) == 1\nassert     smallest_change([1,1,5,1]) == 2\n\ndef largest_palindrome(arr):\n    \"\"\"\n    Given an array of integers arr, find the largest palindromic number that can be made with some\n    elements of arr. A palindrome number is defined as a number that reads the same backward and\n    forwards.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     smallest_change([1,2,3,4,1]) == 1\nassert     smallest_change([1,2,3,4,4,3,2,1]) == 0\nassert     smallest_change([1,2,3,4,1,5]) == 1\nassert     smallest_change([1,2,3,4,4,3,2,1,5,5]) == 0\n\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     smallest_change([1, 2, 4, 0, 3, 1]) == 3\nassert     smallest_change([1, 4, 2, 3, 5, 7, 9, 10, 6, 8]) == 2\nassert     smallest_change([1, 3, 2, 1, 4, 5, 2]) == 3\nassert     smallest_change([2, 2, 3, 3]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 4, 1, 3, 5, 1, 1]\n    print(smallest_change(arr))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     smallest_change([1, 2, 5, 6, 7, 8, 8, 10]) == 2, 'wrong result'\nassert     smallest_change([1, 2, 5, 6, 7, 8, 8, 10, 10]) == 1, 'wrong result'\nassert     smallest_change([1, 2, 5, 7, 8, 8, 10]) == 2, 'wrong result'\nassert     smallest_change([1, 2, 5, 7, 8, 8, 10, 10]) == 1, 'wrong result'\nassert     smallest_change([1, 2, 5, 7, 8, 8, 10, 2]) == 4, 'wrong result'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \ntotal_match(['abc', 'xyz', 'pqr'], ['abcde', 'xyz', 'pqrs']) == ['abc', 'xyz']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     total_match(['hello', 'hi', 'how are you', '', '', 'yes'], ['world', 'hi', 'how are you', '', 'yes'])     == ['hello', 'hi', 'how are you', 'yes']\nassert     total_match(['what', 'is', 'your', 'name'], ['what', 'is', 'your', 'name'])     == ['what', 'is', 'your', 'name']\nassert     total_match(['what', 'is', 'your', 'name'], ['you', 'what', 'is', 'your', 'name'])     == ['what', 'is', 'your', 'name']\nassert     total_match(['hello', 'hi', 'how are you', ''], ['hello', 'hi', 'how are you', 'yes'])     == ['hello', 'hi', 'how are you', 'yes']\nassert     total_match(['hello', 'hi', '', 'how are you', 'yes'], ['hello', 'hi', 'how are you'])     == ['hello', 'hi', 'how are you', 'yes']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     total_match(['abcdef', 'abcdef'], ['abcd', 'abcdef']) == ['abcdef']\nassert     total_match(['abcdef', 'abcdef'], ['abc', 'abcdef']) == ['abcdef']\nassert     total_match(['abcdef', 'abcdef'], ['abcd', 'abcdef']) == ['abcdef']\nassert     total_match(['abcdef', 'abcdef'], ['abcef', 'abcdef']) == ['abcdef']\nassert     total_match(['abcdef', 'abcdef'], ['abcd', 'abcd']) == ['abcdef']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     total_match(['hello', 'world', 'fortnight'], ['fortnight','moon', 'world']) == ['fortnight', 'world'], 'Incorrect'\nassert     total_match(['moon', 'world', 'fortnight'], ['fortnight','moon', 'world']) == ['moon', 'world'], 'Incorrect'\nassert     total_match(['fortnight','moon', 'world'], ['fortnight','moon', 'world']) == ['fortnight','moon', 'world'], 'Incorrect'\nassert     total_match(['moon', 'world', 'fortnight'], ['fortnight','moon', 'world']) == ['moon', 'world', 'fortnight'], 'Incorrect'\n\nprint('PASSED'"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     total_match(['abc','bca','qwe'], ['bac','cba']) == ['abc','bca']\nassert     total_match(['abc','bca','qwe'], ['acb','bca','qwe']) == ['bca','qwe']\nassert     total_match(['abc','bca','qwe'], ['acb','bca','qwe','qaz']) == ['bca','qwe']\nassert     total_match(['abc','bca','qwe'], ['acb','bca','qwe','qaz']) == ['bca','qwe']\nassert     total_match(['abc','bca','qwe'], ['acb','bca','qwe','qaz']) == ['bca','qwe']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     total_match(['abc', 'abcd', 'abcde', 'abcdef'], ['bac', 'bc', 'c']), ['abcde', 'abcdef']\nassert     total_match(['abc', 'abcd', 'abcde', 'abcdef'], ['bc', 'bac', 'c']), ['abc', 'abcd', 'abcde', 'abcdef']\nassert     total_match(['abc', 'abcd', 'abcde', 'abcdef'], ['bac', 'bc', 'c']), ['abc', 'abcd', 'abcde', 'abcdef']\nassert     total_match(['abc', 'abcd', 'abcde', 'abcdef'], ['bc', 'bac', 'c']), ['abc', 'abcd', 'abcde', 'abcdef']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     total_match(['abc', 'xyz', 'aba', '1221'], ['1221', 'xyz', '1221', '1221']) == ['1221', 'xyz', '1221', '1221'], 'incorrect'\nassert     total_match(['abc', 'xyz', 'aba', '1221'], ['1221', 'xyz', '1221', '1221']) == ['1221', 'xyz', '1221', '1221'], 'incorrect'\nassert     total_match(['xyz', 'xyz', 'xyz'], ['xyz', 'xyz', 'xyz']) == ['xyz', 'xyz', 'xyz'], 'incorrect'\nassert     total_match(['xyz', 'xyz', 'xyz'], ['xyz', 'xyz', 'xyz']) == ['xyz', 'xyz', 'xyz'], 'incorrect'\nassert     total_match(['xyz', 'xyz', 'xyz'], ['xyz', 'xyz', 'xyz']) == ['xyz', 'xyz', 'xyz'], 'incorrect'\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(4) == False\nassert     is_multiply_prime(15) == True\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(25) == False\nassert     is_multiply_prime(30) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(6) == True\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(60) == False\nassert     is_multiply_prime(12345) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(10) == True, \"a = 10 is multiply of 3 prime numbers\"\nassert     is_multiply_prime(3) == False, \"a = 3 is not multiply of 3 prime numbers\"\nassert     is_multiply_prime(5) == True, \"a = 5 is multiply of 3 prime numbers\"\nassert     is_multiply_prime(15) == True, \"a = 15 is multiply of 3 prime numbers\"\nassert     is_multiply_prime(2) == False, \"a = 2 is not multiply of 3 prime numbers\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(15) == True\nassert     is_multiply_prime(14) == False\nassert     is_multiply_prime(36) == False\nassert     is_multiply_prime(54) == True\nassert     is_multiply_prime(60) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(1) == False, \"Error\"\nassert     is_multiply_prime(13) == False, \"Error\"\nassert     is_multiply_prime(23) == False, \"Error\"\nassert     is_multiply_prime(41) == True, \"Error\"\nassert     is_multiply_prime(32) == False, \"Error\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(9, 3) == True\nassert     is_simple_power(27, 3) == False\nassert     is_simple_power(1, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_simple_power(25, 5)\nassert     is_simple_power(18, 2)\nassert     not is_simple_power(5, 5)\nassert     not is_simple_power(81, 3)\nassert     not is_simple_power(100, 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_simple_power(32, 2) == True, '32 is a simple power of 2'\nassert     is_simple_power(64, 2) == True, '64 is a simple power of 2'\nassert     is_simple_power(25, 5) == True, '25 is a simple power of 5'\nassert     is_simple_power(49, 7) == True, '49 is a simple power of 7'\nassert     is_simple_power(91, 9) == True, '91 is a simple power of 9'\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(12, 2) == True\nassert     is_simple_power(12, 3) == True\nassert     is_simple_power(14, 2) == False\nassert     is_simple_power(35, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(27, 3) == True\nassert     is_simple_power(27, 5) == True\nassert     is_simple_power(25, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_simple_power(3, 2) == True\nassert     is_simple_power(12, 3) == True\nassert     is_simple_power(0, 2) == False\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(8, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_simple_power(4, 2)==True, \"is_simple_power(4, 2)==True failed\"\nassert     is_simple_power(15, 3)==False, \"is_simple_power(15, 3)==False failed\"\nassert     is_simple_power(3, 3)==True, \"is_simple_power(3, 3)==True failed\"\nassert     is_simple_power(10, 5)==False, \"is_simple_power(10, 5)==False failed\"\nassert     is_simple_power(9, 3)==True, \"is_simple_power(9, 3)==True failed\"\nprint(\"is_simple_power passed all the tests!\")\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_simple_power(12, 2) == True\nassert     is_simple_power(8, 2) == True\nassert     is_simple_power(8, 3) == False\nassert     is_simple_power(8, 0) == True\nassert     is_simple_power(8, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_simple_power(8, 2) == True\nassert     is_simple_power(64, 2) == True\nassert     is_simple_power(64, 4) == False\nassert     is_simple_power(4, 4) == True\nassert     is_simple_power(1, 1) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     iscube(1) == True \nassert     iscube(8) == True\nassert     iscube(27) == True \nassert     iscube(3) == False\nassert     iscube(108) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     iscube(a=1)==True\nassert     iscube(a=0)==False\nassert     iscube(a=8)==False\nassert     iscube(a=9)==True\nassert     iscube(a=27)==True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n    "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     iscube(27) == True\nassert     iscube(2) == False\nassert     iscube(1) == False\nassert     iscube(0) == False\nassert     iscube(-1) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     iscube(a = 2) == True\nassert     iscube(a = 4) == True\nassert     iscube(a = 8) == True\nassert     iscube(a = 9) == False\nassert     iscube(a = 27) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     iscube(0) == False\nassert     iscube(1) == True\nassert     iscube(3) == False\nassert     iscube(27) == True\nassert     iscube(125) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == False\nassert     iscube(3) == False\nassert     iscube(4) == True\nassert     iscube(8) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     iscube(8) == True\nassert     iscube(27) == True\nassert     iscube(3) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     iscube(1)== True\nassert     iscube(3)== True\nassert     iscube(27)== True\nassert     iscube(125)== True\nassert     iscube(25)== False\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     hex_key(\"1F3\") == 2, \"Should be 2\"\nassert     hex_key(\"A9F\") == 3, \"Should be 3\"\nassert     hex_key(\"F2A\") == 3, \"Should be 3\"\nassert     hex_key(\"0AFF\") == 2, \"Should be 2\"\nassert     hex_key(\"F\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     hex_key('6D46D') ==     (6, 4, 6)\nassert     hex_key('6D46D8FF') ==     (6, 4, 6, 8, 9)\nassert     hex_key('6D46D8FFF') ==     (6, 4, 6, 8, 9, 15)\nassert     hex_key('') ==     (0,0,0)\nassert     hex_key('0F5F5F') ==     (0, 5, 5, 5)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     hex_key(\"11\") == 4\nassert     hex_key(\"16\") == 1\nassert     hex_key(\"FB\") == 2\nassert     hex_key(\"11FB\") == 1\nassert     hex_key(\"\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     hex_key(\"0\") == [2, 3, 5, 7, 11, 13, 17]\nassert     hex_key(\"A\") == [2, 3, 5, 7, 11, 13, 17]\nassert     hex_key(\"B\") == [2, 3, 5, 7, 11, 13, 17]\nassert     hex_key(\"C\") == [2, 3, 5, 7, 11, 13, 17]\nassert     hex_key(\"D\") == [2, 3, 5, 7, 11, 13, 17]\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     hex_key('11') == 2\nassert     hex_key('13') == 3\nassert     hex_key('11B') == 1\nassert     hex_key('12') == 0\nassert     hex_key('AB') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     hex_key(\"A5\") ==     {\n                \"2\":     1,\n                \"3\":     0,\n                \"5\":     1,\n                \"7\":     1,\n                \"B\":     1,\n                \"D\":     1\n            }\n\nassert     hex_key(\"A\") ==     {\n                \"2\":     1,\n                \"3\":     0,\n                \"5\":     0,\n                \"7\":     0,\n                \"B\":     0,\n                \"D\":     0\n            }\n\nassert     hex_key(\"\") ==     {\n                \"2\":     0,\n                \"3\":     0,\n                \"5\":     0,\n                \"7\":     0,\n                \"B\":     0,\n                \"D\":     0\n            }\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     hex_key(\"A\") == 3\nassert     hex_key(\"AB\") == 5\nassert     hex_key(\"ABC\") == 7\nassert     hex_key(\"ABCD\") == 11\nassert     hex_key(\"ABCDEF\") == 17\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     hex_key('0F') == 0\nassert     hex_key('ABC') == 0\nassert     hex_key('0A1B2C') == 1\nassert     hex_key('BBDD') == 2\nassert     hex_key('0D4E2F') == 2\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     hex_key(\"01F\") == (1, 2, 3, 5, 7, 11, 13)\nassert     hex_key(\"F5\")  == (5, 7, 11, 13)\nassert     hex_key(\"FFFFFFF\") == (1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)\nassert     hex_key(\"AA\") == (10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)\nassert     hex_key(\"00\") == (0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     hex_key('25') == 6\nassert     hex_key('A2') == 4\nassert     hex_key('F6') == 4\nassert     hex_key('2A2') == 6\nassert     hex_key('A6') == 3\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == 'db010db'\nassert     decimal_to_binary(1) == 'db1db'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\nassert     decimal_to_binary(4) == 'db100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(2) == \"db10\"\nassert     decimal_to_binary(3) == \"db11\"\nassert     decimal_to_binary(6) == \"db110\"\nassert     decimal_to_binary(13) == \"db1101\"\nassert     decimal_to_binary(21) == \"db11110\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(123) == \"1010111\"\nassert     decimal_to_binary(7) == \"111\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(1) == \"1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(-1) == '-db1'\nassert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(10) == '1010db'\nassert decimal_to_binary(1) == '1db'\nassert decimal_to_binary(2) == '10db'\nassert decimal_to_binary(0) == '0db'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    decimal format. The function should return a number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == \"db0db\"\nassert decimal_to_binary(1) == \"db1db\"\nassert decimal_to_binary(2) == \"db10db\"\nassert decimal_to_binary(3) == \"db11db\"\nassert decimal_to_binary(4) == \"db100db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == 'db01'\nassert     decimal_to_binary(1) == 'db10'\nassert     decimal_to_binary(2) == 'db11'\nassert     decimal_to_binary(10) == 'db1010'\nassert     decimal_to_binary(99) == 'db1111'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(5) == 'db101'\nassert decimal_to_binary(10) == 'db1010'\nassert decimal_to_binary(15) == 'db10101'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary format and your task is to convert it to\n    decimal form. The function should return an integer.\n\n    You need to treat the string as a number and check whether the binary number is a valid\n    binary number. You need to extract the value of the binary number in the string and\n    multiply each character by the power of 2 and add them up.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == \"db0db\"\nassert     decimal_to_binary(1) == \"db1db\"\nassert     decimal_to_binary(2) == \"db10db\"\nassert     decimal_to_binary(3) == \"db11db\"\nassert     decimal_to_binary(10) == \"db1010db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_happy('aa') == True\nassert     is_happy('abc') == True\nassert     is_happy('abca') == False\nassert     is_happy('aaaa') == True\nassert     is_happy('abba') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_happy(\"abcd\") == True\nassert     is_happy(\"abcbcd\") == False\nassert     is_happy(\"abc\") == True\nassert     is_happy(\"abcab\") == True\nassert     is_happy(\"abcdeeeee\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_happy('abc') == True\nassert     is_happy('abab') == False\nassert     is_happy('ababbc') == False\nassert     is_happy('aabcccccaaa') == True\nassert     is_happy('aabcccccaaa11') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_happy(\"abc\") == True\nassert     is_happy(\"abca\") == False\nassert     is_happy(\"aba\") == True\nassert     is_happy(\"abb\") == False\nassert     is_happy(\"abcb\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_happy('abc') is False, \"Check the first example\"\nassert     is_happy('aabbc') is True, \"Check the second example\"\nassert     is_happy('abac') is False, \"Check the third example\"\nassert     is_happy('abcdef') is True, \"Check the fourth example\"\nassert     is_happy('abcdea') is False, \"Check the fifth example\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_happy(\"xyzzaz\") == False, 'Failed'\nassert     is_happy(\"xxyxxy\") == False, 'Failed'\nassert     is_happy(\"xxxyyyy\") == True, 'Failed'\n\nassert     is_happy(\"x\") == True, 'Failed'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"abcba\") == False\nassert     is_happy(\"abcdefghijk\") == False\nassert     is_happy(\"abcdefghijklmnopqrstuvwxyz\") == True\nassert     is_happy(\"aaabaaaaa\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_happy('aba') == True\nassert     is_happy('abc') == False\nassert     is_happy('yoyo') == True\nassert     is_happy('xyz') == False\nassert     is_happy('aabbccddeeff') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"abca\") == False\nassert     is_happy(\"aabca\") == True\nassert     is_happy(\"abcd\") == False\nassert     is_happy(\"abcda\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"abcabcabc\") == False\nassert     is_happy(\"abccba\") == True\nassert     is_happy(\"abbcbccc\") == True\nassert     is_happy(\"aabbccddeeedcba\") == True\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+']\nassert     numerical_letter_grade([3.7, 3.7, 3.7, 3.7, 3.7]) == ['A']\nassert     numerical_letter_grade([3.3, 3.3, 3.3, 3.3, 3.3]) == ['A-']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0]) == ['B+']\nassert     numerical_letter_grade([2.7, 2.7, 2.7, 2.7, 2.7]) == ['B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.9, 3.8, 3.7, 3.6, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.9, 3.8, 3.7, 3.6, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.8, 3.7, 3.6, 3.5, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade( [4.0, 4.0, 4.0, 4.0, 4.0, 4.0] ) == [ \"A+\", \"A+\", \"A+\", \"A+\", \"A+\", \"A+\" ], 'incorrect result'\nassert     numerical_letter_grade( [3.7, 3.7, 3.7, 3.7, 3.7, 3.7] ) == [ \"A\", \"A\", \"A\", \"A\", \"A\", \"A\" ], 'incorrect result'\nassert     numerical_letter_grade( [3.3, 3.3, 3.3, 3.3, 3.3, 3.3] ) == [ \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\" ], 'incorrect result'\nassert     numerical_letter_grade( [3.0, 3.0, 3.0, 3.0, 3.0, 3.0] ) == [ \"B+\", \"B+\", \"B+\", \"B+\", \"B+\", \"B+\" ], 'incorrect result'\nassert     numerical_letter_grade( [2.7, 2.7, 2.7, 2.7, 2.7, 2.7] ) == [ \"B\", \"B\", \"B\", \"B\", \"B\", \"B\" ], 'incorrect result'\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [    'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert numerical_letter_grade([3.5, 3.1, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [    'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\ndef letter_grade_from_GPA(grade):\n    \"\"\"it is a function that can convert a GPA into a letter grade\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 3.7, 3.7, 3.7, 3.7, 3.3, 3.3, 3.3, 3.3, 3.0, 3.0, 3.0, 2.7, 2.7, 2.7, 2.7, 2.3, 2.3, 2.3, 2.3, 2.0, 2.0, 2.0, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.3, 1.3, 1.3, 1.3, 1.3, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([2.3, 2.3, 2.3, 2.3, 2.0, 2.0, 2.0, 2.0, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.3, 1.3, 1.3, 1.3, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) == ['A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3]) == ['A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-']\nassert     numerical_letter_grade([3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0]) == ['B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+']\nassert     numerical_letter_grade([2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7]) == ['B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+', 'B+']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade(\n        [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n        ) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0]) == ['A+']\nassert     numerical_letter_grade([3.7]) == ['A']\nassert     numerical_letter_grade([3.3]) == ['A-']\nassert     numerical_letter_grade([3.0]) == ['B+']\nassert     numerical_letter_grade([2.7]) == ['B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade(4.0) == 'A+'\nassert     numerical_letter_grade(3.7) == 'A'\nassert     numerical_letter_grade(3.3) == 'A-'\nassert     numerical_letter_grade(3.0) == 'B+'\nassert     numerical_letter_grade(2.7) == 'B'\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prime_length('m') == False\nassert     prime_length('n') == False\nassert     prime_length('o') == False\nassert     prime_length('p') == False\nassert     prime_length('q') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prime_length(\"hello\") == False\nassert     prime_length(\"h\") == False\nassert     prime_length(\"5\") == False\nassert     prime_length(\"5678\") == False\nassert     prime_length(\"25\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prime_length(1) == False\nassert prime_length(3) == True\nassert prime_length(2) == True\nassert prime_length(4) == False\nassert prime_length(5) == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_length(\"hello\") == False\nassert     prime_length(\"helo\") == False\nassert     prime_length(\"123\") == False\nassert     prime_length(\"10\") == False\nassert     prime_length(\"11\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prime_length(\"Hello world\") == False, \"string length is not prime\"\nassert     prime_length(\"47\") == True, \"string length is not prime\"\nassert     prime_length(\"1\") == False, \"string length is not prime\"\nassert     prime_length(\"947\") == False, \"string length is not prime\"\n\nprint(\"Great Success!\""
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_length(\"1\") is False\nassert     prime_length(\"100\") is False\nassert     prime_length(\"2\") is True\nassert     prime_length(\"101\") is False\nassert     prime_length(\"149\") is True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prime_length(\"hello\") == False\nassert     prime_length(\"oh what a day\") == False\nassert     prime_length(\"11\") == False\nassert     prime_length(\"77\") == True\nassert     prime_length(\"\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_length('abc') == False\nassert     prime_length('2') == True\nassert     prime_length('1') == False\nassert     prime_length('45') == False\nassert     prime_length('abcdef') == False\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 1\nassert     starts_one_ends(6) == 1\nassert     starts_one_ends(7) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     starts_one_ends(5) == 9\nassert     starts_one_ends(7) == 48\nassert     starts_one_ends(10) == 2538\nassert     starts_one_ends(15) == 8208\nassert     starts_one_ends(100) == 10110\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     starts_one_ends(4) == 0\nassert     starts_one_ends(5) == 1\nassert     starts_one_ends(6) == 1\nassert     starts_one_ends(7) == 2\nassert     starts_one_ends(8) == 3\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 3\nassert     starts_one_ends(2) == 6\nassert     starts_one_ends(3) == 8\nassert     starts_one_ends(4) == 12\nassert     starts_one_ends(5) == 12\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 91\nassert     starts_one_ends(3) == 694\nassert     starts_one_ends(4) == 14280\nassert     starts_one_ends(5) == 64419\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 7\nassert     starts_one_ends(5) == 12\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     starts_one_ends(0) == 0, \"The first argument must be positive\"\nassert     starts_one_ends(1) == 0, \"The first argument must be positive\"\nassert     starts_one_ends(2) == 1, \"The first argument must be positive\"\nassert     starts_one_ends(3) == 3, \"The first argument must be positive\"\nassert     starts_one_ends(4) == 4, \"The first argument must be positive\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     starts_one_ends(4) == 3\nassert     starts_one_ends(8) == 10\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(2) == 4\nassert     starts_one_ends(1) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     starts_one_ends(5) ==     7\nassert     starts_one_ends(10) ==     23\nassert     starts_one_ends(20) ==     62\nassert     starts_one_ends(50) ==     328\nassert     starts_one_ends(100) ==     5762\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 0\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (solve(0) == \"0\")\nassert     (solve(1) == \"1\")\nassert     (solve(2) == \"10\")\nassert     (solve(4) == \"100\")\nassert     (solve(5) == \"101\")\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solve(19) == '1101'\nassert     solve(21) == '10101'\nassert     solve(10) == '1010'\nassert     solve(9) == '1001'\nassert     solve(8) == '1000'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(10) == '1010'\nassert     solve(100) == '1100100'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solve(1234) == '111110110'\nassert     solve(45)      == '101101'\nassert     solve(13)      == '1101'\nassert     solve(0)      == '0'\nassert     solve(10)      == '1"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    assert solve(1) == \"10\"\n    assert solve(10) == \"1010\"\n    assert solve(100) == \"10100\"\n    "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (solve(10) == \"1010\"), 'wrong result'\nassert     (solve(15) == \"1111\"), 'wrong result'\n\n\nif __name__ == \"__main__\":\n    print(solve(int(input().strip())))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (solve(42) == '101010')\nassert     (solve(13) == '1101')\nassert     (solve(35) == '10111')\nassert     (solve(25) == '11101')\nassert     (solve(46) == '101101')\nprint('all tests passed.'"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(solve(10))\n    print(solve(100))\n    print(solve(1000))\n    print(solve(10000))\n    print(solve(5))\n    print(solve(100))\n    print(solve(1000))\n    print(solve(10000))"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add([1,3,5,7]) == 10\nassert     add([3,1,2,5]) == 8\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (add([0, 1, 2, 3, 4, 5]) == [] and \n        add([2, 1, 2, 3, 4, 5]) == [8, 8, 4, 4, 4, 4]), \"error in add\"\nprint(\"add function passed\")\n\ndef mult(lst):\n    \"\"\"Given a non-empty list of integers lst.multiply the even elements that are at odd indices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add([1,2,3,4,5]) == [6,8,10]\nassert     add([1,3,5]) == [4,6,8]\nassert     add([2,4,6,8]) == [0,0,0,0]\nassert     add([1,3,5,7,9]) == [0,0,0,0,0]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add([1,2,3,4,5,6])==12, \"Wrong output\"\nassert     add([1,3,5])==8, \"Wrong output\"\n\nprint(\"Passed all tests\")"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add([3, 1, 4, 1]) == [3, 4], \"add([3, 1, 4, 1]) is returning a wrong value.\"\nassert     add([1, 3, 5, 7]) == [1, 5, 7], \"add([1, 3, 5, 7]) is returning a wrong value.\"\nassert     add([5, 8, 7]) == [5, 8], \"add([5, 8, 7]) is returning a wrong value.\"\nprint(\"add() is correct.\")\n\ndef is_even(num):\n    \"\"\"Return True if num is even and False if not\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add([0, 1, 2, 3]) == [0, 2]\nassert     add([0, 1, 3]) == [0, 0]\nassert     add([0, 1, 3, 5]) == [0, 0, 0]\nassert     add([1]) == [0]\nassert     add([1, 2, 3, 5]) == [0, 0, 0, 0]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add([2,1,3,4,5,6,7,8,9,10]) == [12,6,9,24]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12]) == [60,12,18,36]\nassert     add([20,12,15,23,24,21,17,16,14,10]) == [120,60,60]\nassert     add([1,3,2,6,5,4,7,8,9,10,11]) == [180,24,60]\n\ndef delete_last(lst):\n    \"\"\"Given a list of numbers, remove the last element from the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add([3,1,2,4,5]) == 18\nassert     add([1,3,5]) == 13\nassert     add([2,4,6]) == 16\nassert     add([2,4,7]) == 18\nassert     add([4,6,7,8]) == 20\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add([1, 3, 4, 5, 6]) == [1, 6, 4]\nassert     add([1, 3, 4, 5, 6, 7]) == [1, 6, 4, 7]\nassert     add([1, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 6, 4, 8, 10]\n\nprint(\"All tests passed.\""
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef test_add():\n    \"\"\"test add\n    \"\"\"\n    lst = [5, 2, 6, 8, 10, 3, 20]\n    assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     anti_shuffle('kitten') == 'ktten'\nassert     anti_shuffle('A puppy in a pear tree') == 'a puppy in a pear tree'\nassert     anti_shuffle('one two three four five') == 'onetwothreefourfivesix'\nassert     anti_shuffle('Cats are smarter than dogs') == 'cAt s ar mAbO r i t han d o gs'\nassert     anti_shuffle('dog is animal') == 'goi s anAjidog'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef anti_shuffle2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"hElLo O\") == \"HELLO\"\nassert     anti_shuffle(\"hEllo WOrLd\") == \"HELLO WORLD\"\nassert     anti_shuffle(\"dAa bCc\") == \"ABC\"\nassert     anti_shuffle(\"dAa bCc\") == \"ABC\"\nassert     anti_shuffle(\"\") == \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"We are not what we should be! \\\n                    We are not what we need to be. But at least we are not what we used to be.\") == 'We are not what we should be! We are not what we need to be. But at least we are not what we used to be.'\nassert     anti_shuffle(\"Hello! It is me!\") == \"Hello! It is me!\"\nassert     anti_shuffle(\"hello, it is me!\") == \"hello, it is me!\"\nassert     anti_shuffle(\"This is a test. This is only a test. This is only a test.\") == \"This is only a test. This is only a test. This is a test.\"\nassert     anti_shuffle(\"What?  A Whale?  What? A Whale!?!?!!\") == \"What? A Whale? What? A Whale?!?!?!\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" == anti_shuffle(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\nassert    \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" == anti_shuffle(\"a b c d e f g h i j k l m n o p q r s t u v w x y z  \")\nassert    \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" == anti_shuffle(\"the quick brown fox jumps over the lazy dog\")\nassert    \"h g f s x l z u t n d q r b m w o y i k j l m p\" == anti_shuffle(\"h g f s x l z u t n d q r b m w o y i k j l m p\")\nassert    \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" == anti_shuffle(\"The quick brown fox jumps over the lazy dog.\")\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nprint(anti_shuffle('Hello World'))\n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     anti_shuffle('hello there') == 'hellothere'\nassert     anti_shuffle('hello there') == 'hello there'\nassert     anti_shuffle('hello there') == 'hello there'\nassert     anti_shuffle('hello there') == 'hello there'\nassert     anti_shuffle('hello there') == 'hello there'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\"Hello World\") == \"Ho Let Wld\"\nassert     anti_shuffle(\"Always put extra space after a period.\") == \"Aasllove pfe put raes poe.ecstspac\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"A big brown fox\") == \"a b A BIG BROWN FORK\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\" \") == \" \"\n\nprint(anti_shuffle(\"A big brown fox\"))\nprint(anti_shuffle(\"\"))\nprint(anti_shuffle(\" \"))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_row([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9],\n                  [0, 0, 0]], 2) == [ (0, 3), (1, 2), (2, 1), (3, 0) ]\nassert     get_row([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]], 3) == [ (0, 3), (1, 2), (2, 1) ]\nassert     get_row([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9],\n                  [0, 0, 0]], 4) == [ (0, 3), (1, 2), (2, 1), (3, 0) ]\n\nprint('get_row works fine')\n\n\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (rows, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the column in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [(1, 3), (2, 2), (3, 1)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 4) == [(1, 3), (2, 2), (3, 1)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [(1, 3), (2, 2), (3, 1)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8]], 4) == [(1, 3), (2, 2), (3, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 4) == [(1, 3), (2, 2), (3, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 1) == \\\n        [(0, 5), (1, 4), (1, 3)]\nassert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 2) == \\\n        [(0, 10), (1, 9), (1, 8)]\nassert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 3) == \\\n        [(0, 10), (1, 5), (1, 4)]\nassert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 4) == \\\n        [(0, 4), (1, 3)]\nassert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5) == \\\n        [(0, 2), (1, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_row([[1, 2, 3], [2, 4], [1, 1]], 1) == [(0, 0), (2, 0), (0, 1)]\nassert     get_row([[1, 2, 3], [2, 4], [1, 1]], 2) == [(1, 2), (0, 1), (2, 1)]\nassert     get_row([[1, 2, 3], [2, 4], [1, 1]], 3) == [(1, 3), (0, 2), (2, 2)]\nassert     get_row([[1, 2, 3], [2, 4], [1, 1]], 4) == [(1, 2), (0, 1), (2, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_row([[3, 5, 1], [2, 4, 2], [1, 2, 1]], 3) ==     [(3, 2), (1, 2), (2, 1)]\nassert     get_row([[1, 2, 3], [1, 2, 2], [3, 4, 1]], 3) ==     [(1, 3), (2, 3), (3, 1)]\nassert     get_row([[1, 2, 3], [2, 2, 4], [2, 1, 1], [1, 2, 1]], 1) ==     [(1, 2), (2, 3), (2, 1), (1, 2)]\nassert     get_row([[1, 2, 3], [2, 2, 4], [2, 1, 1], [1, 2, 1]], 5) ==     [(1, 2), (2, 3), (2, 1), (1, 2)]\nassert     get_row([[1, 2, 3], [2, 2, 4], [2, 1, 1], [1, 2, 1]], 0) ==     [(0, 2), (0, 1), (0, 2), (0, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [[1,2,3],\n            [4,5,6],\n            [7,8,9]]\n    x = 5\n    print(get_row(lst, x))"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_row(lst, 1) == [(0, 4), (0, 3), (0, 2)]\nassert     get_row(lst, 2) == [(1, 1), (1, 3)]\nassert     get_row(lst, 3) == [(2, 4), (2, 2)]\nassert     get_row(lst, 4) == []"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [[1, 2, 3], \n    [1, 2], \n    [1],\n    [1, 2], \n    [1, 2],\n    [1, 2],\n    [1, 2],\n    [1, 2]] == get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], 3)\nassert     [[0, 1], [0, 1]] == get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [(1,1), (2,0)] == get_row([[1, 2], [3, 4], [5, 6]], 1)\nassert     [(0,2), (0,1)] == get_row([[1, 2], [3, 4], [5, 6]], 2)\nassert     [(1,0), (1,1)] == get_row([[1, 2], [3, 4], [5, 6]], 3)\nassert     [] == get_row([[1, 2], [3, 4], [5, 6]], 5)\n\n\ndef get_row_two(lst, x):\n    \"\"\"\n    Given a 2D list of numbers, find a list of tuples,\n    such that each tuple is a row, and the row list contains\n    all integers in a list, x.\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (sort_array([1, 2, 3, 4, 5, 6]) == [1, 5, 2, 4, 3, 6]) \\\n    or (sort_array([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1])\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 5, 2, 4, 3, 6, 7, 8, 9]\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == \\\n    [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == \\\n    [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     sort_array([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == \\\n    [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]\nassert     sort_array([5, 3, 1, 2, 8, 1]) == [1, 1, 2, 3, 5, 8]\nassert     sort_array([4, 1, 1, 4, 2, 4, 3, 3]) == [1, 1, 1, 2, 3, 3, 3, 4]\nassert     sort_array([5, 4, 3, 2, 1, 0, 3, 3, 3]) == [0, 1, 2, 3, 3, 3, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1, 0, 3, 3, 3, -2]) == [-2, 0, 1, 2, 3, 3, 3, 3, 4, 5"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sort_array([5,4,3,2,1,2]) == [1,2,2,3,4,5]\nassert     sort_array([5,4,3,2,1,2,1]) == [1,1,2,2,3,4,5]\nassert     sort_array([5,4,3,2,1,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,1,1,2,2,2,3,3,3,4,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_array([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([0, 0, 0, 1, 2, 3]) == [0, 0, 0, 1, 2, 3]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [0,1,2,3,4] == sort_array([5,0,1,2,3,4])\nassert     [0,1,2,3,4] == sort_array([0,1,2,3,4])\nassert     [2,4,4,5,6] == sort_array([5,2,4,4,6])\nassert     [3,3,5,5,8,8] == sort_array([8,3,3,5,5,8])\nassert     [1,2,3,3,4,5] == sort_array([3,1,2,3,4,5])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 8, 5, 4]\nassert     sort_array([5, 3, 1, 8, 0]) == [1, 3, 5, 8, 0"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \\\n        'Sort Array is not correct'\nassert     sort_array([1, 2, 3, 4, 5, 6, 6, 6]) == [1, 2, 3, 4, 5, 6, 6, 6], \\\n        'Sort Array is not correct'\nassert     sort_array([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == [1, 2, 3, 4, 5, 6, 6, 6, 6, 6], \\\n        'Sort Array is not correct'\nassert     sort_array([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6]) == [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6], \\\n        'Sort Array is not correct'\nassert     sort_array([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) == \\\n        [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], \\\n        'Sort Array is not correct'\nprint('sort_array test passed.')\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(sort_array(array)"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     encrypt(\"cc\") == \"d\"\nassert     encrypt(\"b\") == \"a\"\nassert     encrypt(\"abc\") == \"abd\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encrypt(\"hello\") == \"hello\"\nassert     encrypt(\"aa\") == \"ba\"\nassert     encrypt(\"ab\") == \"bc\"\nassert     encrypt(\"abc\") == \"bcd\"\nassert     encrypt(\"abcd\") == \"cde\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encrypt(\"a\") == \"d\" \nassert encrypt(\"f\") == \"c\" \nassert encrypt(\"x\") == \"z\" \nassert encrypt(\"z\") == \"a\"\nassert encrypt(\"c\") == \"f\" \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encrypt(\"ABCD\") == \"BCDA\"\nassert     encrypt(\"abcd\") == \"bcda\"\nassert     encrypt(\"\") == \"\"\nassert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"a b c d\") == \"b d a c\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encrypt('abcd') == 'dcba'\nassert     encrypt('hello world') == 'olleh dlrow'\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (encrypt('a') == 'c')\nassert     (encrypt('w') == 'x')\nassert     (encrypt('d') == 'a')\nassert     (encrypt('z') == 'a')\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     encrypt(\"d\") == 'd'\nassert     encrypt(\"a\") == 'e'\nassert     encrypt(\"p\") == 'q'\nassert     encrypt(\"e\") == 'a'\nassert     encrypt(\"h\") == 'i'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encrypt('abc') == 'cde'\nassert     encrypt('x') == 'z'\nassert     encrypt('xy') == 'yw'\nassert     encrypt('z') == 'abc'\nassert     encrypt('zxy') == 'abc'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     encrypt(\"hello\") == \"ifmmp\"\nassert     encrypt(\"goodbye\") == \"uytpeq\"\nassert     encrypt(\"python\") == \"nzppth\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     encrypt(\"b\") == \"d\"\nassert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"z\") == \"a\"\nassert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"m\") == \"k\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([1, 1, 1, 1, 1]) == 1\nassert     next_smallest([1, 1, 1, 1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 1, 3, 2, 1]) == 3\nassert     next_smallest([1, 1, 3, 2, 1, 0, -1, -2, -3]) == -2\nassert     next_smallest([1, 1, 3, 2, 1, 0, -1, -2, -3, -4]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([1, 2, 1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     next_smallest([1,2,5]) == 2\nassert     next_smallest([2,2,2,2,2]) == None\nassert     next_smallest([]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([1,1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     next_smallest([1, 3, -1, -5, -2]) == -1\nassert     next_smallest([1, 3, 2, 4]) == 2\nassert     next_smallest([1, 3, 2, 4, -1, -2]) == -1\nassert     next_smallest([]) == None\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(next_smallest(list(map(int, input().split()))))"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     next_smallest([1,2,3]) == 2\nassert     next_smallest([7,8,5,1]) == 5\nassert     next_smallest([1,2,2,3]) == 2\nassert     next_smallest([1,2,2,3,4]) is None\nassert     next_smallest([1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     next_smallest([2, 3, 1, 5, 4, 6]) == 1\nassert     next_smallest([4, 3, 1, 5, 4, 6]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == None\nassert     next_smallest([1, 2, 3, 1, 5, 6]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     next_smallest([1,2,5,4]) == 2\nassert     next_smallest([1,2,3,4]) is None\nassert     next_smallest([2,3,4,1]) == 3\nassert     next_smallest([2,3,4,5,6,1]) == 3\nassert     next_smallest([1,2,2,3,4,5,6,7]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([1, 2, 3, 3]) == 3\nassert     next_smallest([1, 2, 3, 3, 3]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (next_smallest([1, 2, 3, 4, 5])) == 3\nassert     (next_smallest([1, 2, 4, 5, 5])) == None\nassert     (next_smallest([1, 2, 3, 4, 5, 0])) == 0\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == None\nassert     next_smallest([1, 2, 3, 3, 3]) == 2\nassert     next_smallest([3, 3, 3]) == None\nassert     next_smallest([3, 3, 3, 3]) == 3\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_bored('I have a pen.') == 0\nassert     is_bored('I have a pen. I have an apple. What do you have?') == 3\nassert     is_bored('I have a pen. I have an apple. I have a pencil.') == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_bored(\"I look forward to learning Python\") == 1\nassert     is_bored(\"I'm not very good at this\") == 2\nassert     is_bored(\"Are you very good at this\") == 0\nassert     is_bored(\"\") == 0\nassert     is_bored(\"I think this is interesting\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_bored(\"I am a program written in Python3, that counts the number of I's in the given sentence.\") == 0\nassert     is_bored(\"I am a program written in Java, that counts the number of I's in the given sentence.\") == 0\nassert     is_bored(\"I am a program written in C, that counts the number of I's in the given sentence.\") == 0\nassert     is_bored(\"I am a program, that counts the number of I's in the given sentence.\") == 0\nassert     is_bored(\"This program counts the number of I's in the given sentence.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_bored(\"I am not bored. I am good.\") == 2\nassert     is_bored(\"I am so so bored. I am so good.\") == 2\nassert     is_bored(\"I am so bored. I am good. I am not bad\") == 0\nassert     is_bored(\"I am not so good. I am so bad.\") == 0\nassert     is_bored(\"I am not so good. I am so bad. I am not bad either.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_bored(\"I am so bored\") == 1\nassert     is_bored(\"I am so bored. I feel so bored. I am so bored.\") == 3\nassert     is_bored(\"I am so bored! I'm so bored! I'm so bored\") == 3\nassert     is_bored(\"I am so bored. I am so bored. I am so bored. I'm so bored.\") == 3\nassert     is_bored(\"I am so bored? I'm so bored? I'm so bored? I'm so bored.\") == 3\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_bored('I am quite bored.') == 1, 'wrong result'\nassert     is_bored('I am so bored.') == 1, 'wrong result'\nassert     is_bored('I am so so bored.') == 2, 'wrong result'\nassert     is_bored('I am so very bored.') == 3, 'wrong result'\nassert     is_bored('I am so so very very bored.') == 5, 'wrong result'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_bored(\"I am a very talented programer. I am a very talented programmer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programmer.\") == 6\nassert     is_bored(\"I am a very talented programer. I am a very talented programer. I am a very talented programmer. I am a very talented programmer. I am a very talented programmer. I am a very talented programmer. I am a very talented programmer. I am a very talented programmer. I am a very talented programmer.\") == 0\nassert     is_bored(\"I am a very talented programer. I am a very talented programmer. I am a very talented programmer. I am a very talented programmer. I am a very talented programer. I am a very talented programmer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer.\") == 6\nassert     is_bored(\"I am a very talented programer. I am a very talented programmer. I am a very talented programer. I am a very talented programmer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programmer.\") == 6\nassert     is_bored(\"I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programer. I am a very talented programmer.\") == 6\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_bored('I am feeling bored. I have not had lunch for two days. I do not want to go to sleep. \\\nI want to go outside and play. Did you like this sentence?') == 9, 'incorrect'\nassert     is_bored('I am not in a good mood') == 4, 'incorrect'\nassert     is_bored('I am very happy to know that I am not bored') == 1, 'incorrect'\nassert     is_bored('I am very happy to know that I am not bored. This is so weird.') == 0, 'incorrect'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_bored('I am a good boy.') == 1\nassert     is_bored('I am a good girl.') == 1\nassert     is_bored('I am a good boy and a good girl.') == 2\nassert     is_bored('I am a good boy and a good girl? I do not know what to say.') == 1\nassert     is_bored('I am a good boy? I do not know what to say.') == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_bored(\"I am bored\") == True, \"Wrong result\"\nassert     is_bored(\"Are you bored?\") == False, \"Wrong result\"\nassert     is_bored(\"I am not bored\") == False, \"Wrong result\"\nassert     is_bored(\"I am not bored. I am good.\") == False, \"Wrong result\"\nassert     is_bored(\"\") == False, \"Wrong result\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 4) == True\nassert     any_int(1, 2, 9) == True\nassert     any_int(1, 2, 0) == False\nassert     any_int(-1, -2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     any_int(1,2,3) == False \nassert     any_int(1,1,3) == True \nassert     any_int(1,2,4) == True\nassert     any_int(1.2,2.3,3.4) == False\nassert     any_int(1.2,2.3,3.4) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == False     # a + b = c and a + c = b\nassert     any_int(1, 2, 2) == True     # a + b = c and b + c = a\nassert     any_int(1.1, 2.2, 3.3) == False     # a + b = c and a + c = b\nassert     any_int(1, 2.2, 3.3) == True     # a + b = c and b + c = a\nassert     any_int(1, 2.2, 3.2) == False     # a + b = c and a + c = b\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(3, 1, 2) == False\nassert     any_int(3, 2, 3) == True\nassert     any_int(1, 3, 2) == True\nassert     any_int(3, 2, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 3, 2) == True\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 1, 3) == True\nassert     any_int(1, 2, 4) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 1, 1) == True\nassert     any_int(1.0, 2.0, 3.0) == False\nassert     any_int(1, 1.0, 1) == True\nassert     any_int(1, 1, 1.0) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     any_int(1, 2, 3) == False     # 1 + 2 is not equal to 3\nassert     any_int(1, 2, 2) == True     # 1 + 2 == 2 + 2\nassert     any_int(0, 0, 0) == True     # 0 + 0 == 0 + 0\nassert     any_int(1, 2, 3.5) == False     # 1 + 2!= 3.5 + 3.5\nassert     any_int(1, 2, 3) == False     # 1 + 2!= 3 + 3\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     any_int(1,2,1) == True\nassert     any_int(3,2,1) == True\nassert     any_int(3,2,3) == False\nassert     any_int(1,2,3) == False\nassert     any_int(1,1,1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     any_int(2,1,1) == True\nassert     any_int(2,1,3) == False\nassert     any_int(0,3,1) == True\nassert     any_int(10,2,8) == True\nassert     any_int(2,10,8) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n\n\"\"\"\nUsing the function above, write a function called decode that can \ndecode a message that has been encoded with the swap case function.\n\"\"\"\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encode('Hello World') == 'hELLo wORLD'\nassert     encode('mama mia') == 'MmAmMa MiA'\nassert     encode('What a lovely day!') == 'hWhat A LOVELY day!P'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message that has been encoded with \n    encode above, and decodes it back into the original message. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encode('a') == 'A'\nassert     encode('b') == 'B'\nassert     encode('c') == 'C'\nassert     encode('d') == 'D'\nassert     encode('e') == 'E'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef decode(encoded_message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     encode('a') == 'A'\nassert     encode('n') == 'N'\nassert     encode('i') == 'I'\nassert     encode('o') == 'O'\nassert     encode('u') == 'U'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nencode('hELLO') == 'HELLO'\nassert\nencode('Cheer') == 'cHeEr'\nassert \nencode('a') == 'a'\nassert \nencode('THE') == 'TThE'\nassert \nencode('test') == 'TeSt'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     encode('the quick brown fox') == 'ThE QUIK bRoW nOw fOx'\nassert     encode('the zebra') == 'ThE zEbEra'\nassert     encode('go away and die') == 'Goo away and die'\nassert     encode('the') == 'ThE'\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(number):\n    \"\"\"\n    You need to write a function that checks whether a given number is prime or not.\n    The function should return True if the number is prime, and False if it is not.\n    \"\"\"\n    pass\n\ndef sum_digits(number):\n    \"\"\"\n    You need to write a function that returns the sum of the digits of the given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     skjkasdkd([19, 17, 14, 13, 11, 7, 5, 3, 2, 1]) == 19\nassert     skjkasdkd([11, 2, 4, 5]) == 5\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3\nassert     skjkasdkd([11, 2, 4, 5, 7, 9, 8, 10]) == 4\n\ndef isPrime(n):\n    \"\"\"You need to check if a number is a prime number or not\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef test_skjkasdkd():\n    assert \n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (skjkasdkd([2, 3, 5, 7, 11]) == 7)\nassert     (skjkasdkd([2, 3, 5, 7, 11, 9]) == 7)\nassert     (skjkasdkd([2, 3, 5, 7, 11, 20]) == 11)\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     skjkasdkd([-12, -14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 28\nassert     skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 13\nassert     skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 13\nassert     skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]) == 13\nassert     skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102]) == 13\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     skjkasdkd([10, 3, 11]) == 7\nassert     skjkasdkd([12, 5, 7]) == 6\nassert     skjkasdkd([18, 7, 19]) == 8\nassert     skjkasdkd([2, 21, 5]) == 7\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_dict_case({\"a\":1}) == True\nassert     check_dict_case({\"A\":1}) == False\nassert     check_dict_case({\"a\":1, \"B\":2}) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case({1:1}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_dict_case({\"a\":1}) == False, \"check_dict_case({'a':1}) == False, expected False\"\nassert     check_dict_case({\"A\":2}) == True, \"check_dict_case({'A':2}) == True, expected True\"\nassert     check_dict_case({}) == False, \"check_dict_case({}) == False, expected False\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_dict_case({'a':'apple','b':'banana','c':'cat'}) == True, \"all keys are strings in lower case\"\nassert     check_dict_case({'A':'apple','b':'banana','c':'cat'}) == False, \"all keys are strings in upper case\"\nassert     check_dict_case({}) == False, \"given dictionary is empty\"\n\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False, \"Empty dict\"\nassert     check_dict_case({'key1':'value1', 'Key2':'Value2'}) == False, \"Upper and lower case\"\nassert     check_dict_case({'KEY1':'Value1', 'Key2':'value2'}) == False, \"Upper and lower case\"\nassert     check_dict_case({'KEY1':'value1', 'key2':'value2'}) == True, \"No upper and lower case\"\nassert     check_dict_case({'KEY1':'value1', 'Key2':'value2'}) == True, \"No upper and lower case\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_dict_case({'foo': 'bar', 'baz': 'blah'}) == False, \"both keys are not in lower case\"\nassert     check_dict_case({'Foo': 'bar', 'baz': 'blah'}) == True, \"Foo is upper case\"\nassert     check_dict_case({'foo': 'bar', 'baz': 'blah', 'Foo':'bar'}) == False, \"Foo is upper case\"\nassert     check_dict_case({}) == False, \"dictionary is empty\"\nprint(\"check_dict_case passed\")\n\ndef check_dict_case_return(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2}) == False, \"Test 1 Failed\"\nassert     check_dict_case({'a': 1, 'b': 2}) == False, \"Test 2 Failed\"\nassert     check_dict_case({'A': 1, 'b': 2}) == True, \"Test 3 Failed\"\nassert     check_dict_case({'A': 1, 'B': 2}) == True, \"Test 4 Failed\"\nassert     check_dict_case({}) == False, \"Test 5 Failed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False, \"Error in check_dict_case\"\nassert     check_dict_case({\"A\": 1, 2: \"B\"}) == True, \"Error in check_dict_case\"\nassert     check_dict_case({\"a\": 1, \"b\": 2}) == False, \"Error in check_dict_case\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": \"lower\"}) == True, \"Error in check_dict_case\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": \"LOWER\"}) == False, \"Error in check_dict_case\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_dict_case({'a':1,'b':2,'c':3})\nassert     check_dict_case({'a':1,'b':2,'C':3})\nassert     check_dict_case({'a':1,'b':2,'c':3,'d':4,'e':5})\nassert     not check_dict_case({})\nassert     not check_dict_case({'a':1,'b':2,'C':3})\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprint('Passed.')\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n    count_up_to(2) == [2]\n    count_up_to(3) == [2,3]\n    count_up_to(5) == [2,3,5]\n    count_up_to(6) == [2,3,5,7]\n    count_up_to(20) == [2,3,5,7,11,13,17,19]\n    count_up_to(1) == []\n    count_up_to(0) == []\n\nprint(\"all tests passed.\""
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_up_to(5) == [2, 3, 5], \"count_up_to(5) should be [2, 3, 5], but was: \" + str(count_up_to(5))\nassert     count_up_to(8) == [2, 3, 5, 7], \"count_up_to(8) should be [2, 3, 5, 7], but was: \" + str(count_up_to(8))\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13], \"count_up_to(15) should be [2, 3, 5, 7, 11, 13], but was: \" + str(count_up_to(15))\nassert     count_up_to(12) == [2, 3, 5, 7, 11, 13, 17], \"count_up_to(12) should be [2, 3, 5, 7, 11, 13, 17], but was: \" + str(count_up_to(12))\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], \"count_up_to(20) should be [2, 3, 5, 7, 11, 13, 17, 19], but was: \" + str(count_up_to(20))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \ncount_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(1) == []\nassert count_up_to(2) == [2]\nassert count_up_to(3) == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2, 3]\nassert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13, 15]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_up_to(1) == [2]\nassert count_up_to(2) == [2,3]\nassert count_up_to(5) == [2,3,5]\nassert count_up_to(10) == [2,3,5,7]\n\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13]\nassert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_up_to(1) == []\nassert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2, 3]\nassert     count_up_to(4) == [2, 3]\nassert     count_up_to(5) == [2, 3, 5]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     multiply(10, 10) == 10, \"Should be 10\"\nassert     multiply(12, 3) == 6, \"Should be 6\"\nassert     multiply(1, 9999) == 1, \"Should be 1\"\nassert     multiply(234, 45) == 3, \"Should be 3\"\nassert     multiply(0, 1) == 0, \"Should be 0\"\nprint(\"All test passed\")"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (\n        multiply(1234, 786) == \n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) == \n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multiply_unit_digit(1234, 786) ==\n        multi"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     multiply(5, 2) == 10\nassert     multiply(20, 2) == 10\nassert     multiply(2, 20) == 10\nassert     multiply(10, 25) == 10\nassert     multiply(30, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     multiply(12, 77) == 3\nassert     multiply(5, 10) == 5\nassert     multiply(234, 56) == 42\nassert     multiply(62, 87) == 6\nassert     multiply(314, 741) == 44\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     multiply(5, 10) == 10\nassert     multiply(5, 56) == 20\nassert     multiply(10, 5) == 20\nassert     multiply(23, 1) == 23\nassert     multiply(1, 5) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     multiply(12, 24) == 2\nassert     multiply(12, 25) == 3\nassert     multiply(12, 26) == 4\nassert     multiply(12, 27) == 6\nassert     multiply(12, 28) == 5\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     multiply(12, 5) == 3\nassert     multiply(9, 15) == 7\nassert     multiply(1, 9) == 1\nassert     multiply(23, 12) == 6\nassert     multiply(123, 12) == 6\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     multiply(12, 4) == 4\nassert     multiply(45, 6) == 5\nassert     multiply(81, 2) == 9\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     multiply(123, 456) == 2\nassert     multiply(12, 45) == 1\nassert     multiply(1234, 45) == 2\nassert     multiply(12345, 567) == 3\nassert     multiply(123456, 567) == 6\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_upper('sam') == 1, \\\n        \"wrong result for count_upper('sam')\"\nassert     count_upper('Sam') == 2, \\\n        \"wrong result for count_upper('Sam')\"\nassert     count_upper('soM') == 3, \\\n        \"wrong result for count_upper('soM')\"\nassert     count_upper('SoM') == 3, \\\n        \"wrong result for count_upper('SoM')\"\nassert     count_upper('somm') == 0, \\\n        \"wrong result for count_upper('somm')\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_upper('aBcDeFgHiJk') == 2\nassert     count_upper('abcdefghijklmnopqrstuvwxyz') == 0\nassert     count_upper('abcdeeefghiijkkkllmmnnnnooppqqqqqqqqqq') == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 0\nassert     count_upper('A') == 1\nassert     count_upper('aa') == 0\nassert     count_upper('AA') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_upper(\"abcde\") == 0\nassert     count_upper(\"ABCde\") == 2\nassert     count_upper(\"aBcDe\") == 2\nassert     count_upper(\"123456\") == 0\nassert     count_upper(\"a123456\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_upper('abcde') == 0\nassert     count_upper('aBcDe') == 0\nassert     count_upper('abcD') == 0\nassert     count_upper('aBcDeF') == 1\nassert     count_upper('abcdef') == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_upper(\"Hello world\") == 1\nassert     count_upper(\"HOW ARE YOU?\") == 0\nassert     count_upper(\"HELp AND WELCOME TO OUR APPLICATION\") == 2\nassert     count_upper(\"\") == 0\nassert     count_upper(\"a\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_upper('abcABC') == 2\nassert     count_upper('abcabcABC') == 0\nassert     count_upper('ABCABCabc') == 2\nassert     count_upper('abcabccba') == 2\nassert     count_upper('CaCbCcC') == "
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('abcde') == 0\nassert     count_upper('aaBBAABCDEEFFGG') == 2\nassert     count_upper('ABCDEEFFGG') == 2\nassert     count_upper('AABBCCDDEEFFGG') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert count_upper('abracadabra') == 5\nassert count_upper('Uncle Engineer') == "
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     closest_integer(1.4) == 1\nassert     closest_integer(-1.4) == -2\nassert     closest_integer(-1.1) == -1\nassert     closest_integer(2.1) == 2\nassert     closest_integer(3.0) == 3\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.3\") == 14\nassert     closest_integer(\"-14.3\") == -14\nassert     closest_integer(\"14.0\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     closest_integer(17.25) == 17\nassert     closest_integer(2.5) == 2\nassert     closest_integer(2.4) == 3\nassert     closest_integer(-2.4) == -3\nassert     closest_integer(0) == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"0.4\") == 0\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"0\") == 0\nassert     closest_integer(\"0.5\") == 1\nassert     closest_integer(\"-0.5\") == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     closest_integer('11.5') == 11, 'incorrect for 11.5'\nassert     closest_integer('8.75') == 9, 'incorrect for 8.75'\nassert     closest_integer('0.25') == 1, 'incorrect for 0.25'\nassert     closest_integer('-0.25') == -1, 'incorrect for -0.25'\nassert     closest_integer('.2') == 0, 'incorrect for.2'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef solution_count(a, b):\n    '''\n    Create a function that takes two non-negative integers representing the\n    number of chickens and rabbits in two separate locations and returns the\n    number of the species that are in both locations.\n\n    Note:\n    The order of the return string should be:\n    rabbits, then chickens.\n    '''\n    pass\n\ndef solution_sum(a, b):\n    '''\n    Create a function that takes two non-negative integers representing the\n    number of chickens and rabbits in two separate locations and returns the\n    number of the species that are in both locations.\n\n    Note:\n    The order of the return string should be:\n    rabbits, then chickens.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.45\") == 14\nassert     closest_integer(\"-14.45\") == -14\nassert     closest_integer(\"14.4512345\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     closest_integer(\"13.5\") == 13\nassert     closest_integer(\"14.5\") == 14\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(4) == [4, 2, 1]\nassert     make_a_pile(5) == [5, 3, 1]\nassert     make_a_pile(6) == [6, 4, 2, 1]\nassert     make_a_pile(7) == [7, 5, 3, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     [0, 1, 2, 3, 4, 5] == make_a_pile(5)\nassert     [0, 3, 8, 15, 16, 19] == make_a_pile(7)\nassert     [0, 5, 10, 15, 20, 25] == make_a_pile(9)\nassert     [0, 7, 14, 21, 28, 35] == make_a_pile(11)\nassert     [0, 9, 18, 27, 36, 45] == make_a_pile(13)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,3]\nassert     make_a_pile(3) == [1,3,5]\nassert     make_a_pile(4) == [1,3,5,7]\nassert     make_a_pile(5) == [1,3,5,7,9]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     make_a_pile(5) == [5, 3, 1], \"n=5\"\nassert     make_a_pile(8) == [8, 6, 4, 2, 1], \"n=8\"\nassert     make_a_pile(10) == [10, 8, 6, 4, 2, 1], \"n=10\"\nassert     make_a_pile(13) == [13, 11, 9, 7, 5, 3, 1], \"n=13\"\n\ndef task_7_4():\n    \"\"\"\n    Given an integer n, return a string containing the characters\n    '+', '-' and '*' representing the calculations of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\nassert     make_a_pile(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_a_pile(3) == [3, 5, 7]\nassert     make_a_pile(7) == [7, 13, 19]\nassert     make_a_pile(7) == [7, 13, 19]\nassert     make_a_pile(3) == [3, 5, 7]\nassert     make_a_pile(1) == [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     make_a_pile(0) == [0]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,2]\nassert     make_a_pile(3) == [1,3]\nassert     make_a_pile(4) == [1,3,5]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(3) == [1, 3, 5]\nassert     make_a_pile(2) == [1, 3, 5]\nassert     make_a_pile(4) == [1, 3, 5, 7, 9, 11]\nassert     make_a_pile(10) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_string('') == []\nassert     words_string(' ') == []\nassert     words_string('a') == ['a']\nassert     words_string('a,b') == ['a', 'b']\nassert     words_string('a,b,c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_string(\"hello,world\") == [\"hello\",\"world\"]\nassert     words_string(\"hello,world,david\") == [\"hello\",\"world\",\"david\"]\nassert     words_string(\"hello,world,david, kyle\") == [\"hello\",\"world\",\"david\",\"kyle\"]\nassert     words_string(\"hello,world,david,kyle,dave,bob\") == [\"hello\",\"world\",\"david\",\"kyle\",\"dave\",\"bob\"]\nassert     words_string(\"hello,world,david, kyle, david, kyle\") == [\"hello\",\"world\",\"david\",\"kyle\",\"david\",\"kyle\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_string('Hello, world!') == ['Hello', 'world']\nassert     words_string('Hello,world!') == ['Hello', 'world']\nassert     words_string('Hello  world!') == ['Hello', 'world']\nassert     words_string('  Hello  world!  ') == ['Hello', 'world']\nassert     words_string('Hello,  world!') == ['Hello', 'world']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef is_all_upper(s):\n    \"\"\"\n    Given a string, return True if the string is made of only uppercase characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (type(words_string(\"Hi there, this is your second sentence\")) == list)\nassert     (words_string(\"Hi there, this is your second sentence\") == [\"Hi\", \"there\", \"your\", \"second\", \"sentence\"])\nassert     (words_string(\"Hi there, this is your second sentence\") == [\"Hi\", \"there\", \"your\", \"second\", \"sentence\"])\nassert     (words_string(\"Hi there, this is your second sentence\") == [\"Hi\", \"there\", \"your\", \"second\", \"sentence\"])\nassert     (words_string(\"Hi there, this is your second sentence\") == [\"Hi\", \"there\", \"your\", \"second\", \"sentence\"])\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_string(\"a, b, c, d\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     words_string(\"Hello, my name is John\") == [\"Hello\", \"my\", \"name\", \"is\", \"John\"]\nassert     words_string(\"Hello, Hello again, Hello one more time\") == [\"Hello\", \"Hello again\", \"Hello one more time\"]\nassert     words_string(\"\") == []\nassert     words_string(\"Hello, this is a string without punctuation\") == [\"Hello\", \"this\", \"is\", \"a\", \"string\", \"without\", \"punctuation\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_string('Hello, World!') == ['Hello', 'World!']\nassert     words_string('Hello,world!') == ['Hello', 'world!']\nassert     words_string('Hello,world') == ['Hello', 'world']\nassert     words_string('Hello,world,') == ['Hello', 'world', '']\nassert     words_string('Hello,world,') == ['Hello', 'world', '']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_string(\"Hello, World!\") == [\"Hello\", \"World!\"], \"1st\"\nassert     words_string(\"Hello, World!\") == [\"Hello\", \"World!\"], \"2nd\"\nassert     words_string(\"Hello, World!\") == [\"Hello\", \"World!\"], \"3rd\"\nassert     words_string(\"Hello, World!\") == [\"Hello\", \"World!\"], \"4th\"\nassert     words_string(\"Hello, World!\") == [\"Hello\", \"World!\"], \"5th\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     choose_num(0, 1) == 2\nassert     choose_num(1, 2) == -1\nassert     choose_num(100, 100) == 100\nassert     choose_num(100, 199) == 100\nassert     choose_num(300, 400) == 300\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     choose_num(1, 10) ==     8\nassert     choose_num(2, 20) ==     10\nassert     choose_num(10, 20) ==     10\nassert     choose_num(20, 20) ==     -1\nassert     choose_num(10, 30) ==     20\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     choose_num(0, 10) == 8\nassert     choose_num(0, 100) == 8\nassert     choose_num(0, 101) == -1\nassert     choose_num(10, 0) == 8\nassert     choose_num(10, 100) == 8\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     choose_num(1,2) == -1, \"choose_num(1,2) should return -1\"\nassert     choose_num(3,4) == 4, \"choose_num(3,4) should return 4\"\nassert     choose_num(4,6) == -1, \"choose_num(4,6) should return -1\"\nassert     choose_num(3,3) == -1, \"choose_num(3,3) should return -1\"\nassert     choose_num(8,15) == -1, \"choose_num(8,15) should return -1\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     choose_num(10, 20) == -1\nassert     choose_num(10, 10) == 10\nassert     choose_num(20, 10) == -1\nassert     choose_num(10, 10) == -1\nassert     choose_num(20, 30) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     choose_num(10, 20) == 20\nassert     choose_num(12, 20) == -1\nassert     choose_num(10, 20) == 20\nassert     choose_num(20, 20) == -1\nassert     choose_num(20, 20) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     choose_num(2, 9) == 6, choose_num(2, 9)\nassert     choose_num(5, 9) == -1, choose_num(5, 9)\nassert     choose_num(7, 9) == 8, choose_num(7, 9)\nassert     choose_num(7, 7) == -1, choose_num(7, 7)\nassert     choose_num(4, 10) == -1, choose_num(4, 10)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     choose_num(5,10) == 8\nassert     choose_num(10,5) == -1\nassert     choose_num(9,11) == -1\nassert     choose_num(0,0) == -1\nassert     choose_num(3,3) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     choose_num(0, 0) == -1\nassert     choose_num(0, 1) == -1\nassert     choose_num(1, 1) == 1\nassert     choose_num(2, 3) == 2\nassert     choose_num(3, 3) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rounded_avg(0, 2) == 0.5\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(4, 6) == 5\nassert     rounded_avg(6, 8) == 7\nassert     rounded_avg(8, 10) == 9\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (rounded_avg(3, 7) == 4)\nassert     (rounded_avg(6, 9) == 7)\nassert     (rounded_avg(10, 20) == 15)\nassert     (rounded_avg(8, 3) == 2)\nassert     (rounded_avg(3, 1) == 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef test_rounded_avg():\n    assert rounded_avg(1, 10) == [0,1]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rounded_avg(1, 5) == -1\nassert     rounded_avg(1, 10) == 4\nassert     rounded_avg(1, 20) == 7\nassert     rounded_avg(2, 5) == -1\nassert     rounded_avg(2, 10) == 6\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 4))\n    print(rounded_avg(0, 4))\n    print(rounded_avg(1, 0))"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 3, 5], \"Check numbers without any even digit.\"\nassert     unique_digits([2, 3, 4, 5]) == [2, 4, 5], \"Check numbers without any even digit.\"\nassert     unique_digits([3, 4, 6, 7]) == [3, 6, 7], \"Check numbers without any even digit.\"\nassert     unique_digits([5, 7, 11, 13]) == [5, 7, 13], \"Check numbers without any even digit.\"\n\n\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique_digits([1, 2, 3]) == [1, 3]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7, 9]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique_digits([1, 2, 3, 5]) == [1, 3, 5]\nassert     unique_digits([4, 3, 2, 1]) == [4, 2, 1]\nassert     unique_digits([8, 9, 2, 3, 9]) == [2, 3, 8, 9]\nassert     unique_digits([2, 0, 3, 4, 5]) == [0, 2, 3, 5]\nassert     unique_digits([9, 9, 9, 9]) == [9]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique_digits([4, 2, 3, 1, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert unique_digits([2, 5, 2, 6, 2, 9, 6]) == [2, 5, 6, 9]\nassert unique_digits([2, 5, 2, 6, 2, 9, 6, 5, 3, 5, 5]) == [2, 5, 6, 9, 3]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique_digits([12, 123, 1234, 567, 89]) == [12, 123, 567, 89]\nassert     unique_digits([12, 12, 23, 45, 67, 89, 94]) == [12, 23, 45, 67, 89, 94]\nassert     unique_digits([12, 12, 23, 45, 67, 89, 123, 134]) == [12, 23, 45, 67, 89, 123, 134]\nassert     unique_digits([]) == []\nassert     unique_digits([1, 1, 1, 1, 1]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique_digits([1, 2, 3, 4]) == [1, 2, 4]\nassert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 6]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique_digits([12, 23, 45, 67, 78]) == [12, 23, 45, 67, 78], \"wrong result for unique_digits([12, 23, 45, 67, 78])\"\nassert     unique_digits([12, 23, 45, 67, 8]) == [12, 23, 45, 67, 8], \"wrong result for unique_digits([12, 23, 45, 67, 8])\"\nassert     unique_digits([12, 23, 45, 67, 0]) == [12, 23, 45, 67, 0], \"wrong result for unique_digits([12, 23, 45, 67, 0])\"\nassert     unique_digits([12, 23, 45, 67, 100]) == [12, 23, 45, 67, 100], \"wrong result for unique_digits([12, 23, 45, 67, 100])\"\nassert     unique_digits([1, 12, 23, 45, 67, 100]) == [1, 12, 23, 45, 67, 100], \"wrong result for unique_digits([1, 12, 23, 45, 67, 100])\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 2, 3, 4]) == [1, 3, 4]\nassert     unique_digits([3, 4, 5, 6, 7]) == [3, 5, 7]\nassert     unique_digits([0, 0]) == [0]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 4, 5, 7, 8, 9]\n\nprint('E2: All tests passed')"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     unique_digits([0, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 2, 4, 5, 7, 9]\nassert     unique_digits([]) == []\nassert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1, 2, 4, 3, 9, 5, 6, 7, 8] == by_length([1, 3, 9, 5, 7, 2, 4, 6, 8])\n\ndef reverse_and_convert(arr):\n    \"\"\"\n    Given an array of integers as strings, return the array in reverse order as integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     by_length([4, 8, 1, 5, 8, 4, 9, 6, 9, 4, 6, 7]) == ['Nine', 'Eight', 'Five', 'Four', 'Six', 'Seven', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 5, 6, 7, 8]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Four', 'Five', 'Six', 'Seven', 'Eight']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([1, 1, 1, 1, 1, 1]) == ['One', 'One', 'One', 'One', 'One', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(by_length(arr))"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [5,4,2,8,1,7,3,6,9] == by_length([1, 3, 7, 4, 8, 5, 9, 6, 2])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [9,8,7,6,5,4,3,2,1] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\ndef by_type(arr):\n    \"\"\"\n    Given an array of numbers, sort the array into a new array of length 9 where\n    each element is the sum of all the numbers in the original array that has the same index\n    in the new array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     by_length([3,1,2]) == [\"Nine\",\"One\",\"Two\"]\nassert     by_length([5,4,3,2,1]) == [\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\nassert     by_length([1,9,3,4,5,2,7,8,6]) == [\"One\",\"Nine\",\"Three\",\"Four\",\"Five\",\"Two\",\"Seven\",\"Eight\",\"Six\"]\nassert     by_length([1,1,2]) == [\"One\",\"One\",\"Two\"]\nassert     by_length([1,2,3]) == [\"One\",\"Two\",\"Three\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     by_length([1, 2, 3, 4, 9]) == ['Nine', 'Four', 'Three', 'Two', 'One'], \"Wrong result for [1, 2, 3, 4, 9]\"\nassert     by_length([5, 6, 7, 8, 9]) == ['Five', 'Six', 'Seven', 'Eight', 'Nine'], \"Wrong result for [5, 6, 7, 8, 9]\"\nassert     by_length([2, 3, 4, 5, 6]) == ['Six', 'Five', 'Four', 'Three', 'Two'], \"Wrong result for [2, 3, 4, 5, 6]\"\nassert     by_length([7, 8, 9]) == ['Seven', 'Eight', 'Nine'], \"Wrong result for [7, 8, 9]\"\nassert     by_length([1, 3, 6, 9, 12]) == ['Nine', 'Six', 'Three', 'One', 'Two'], \"Wrong result for [1, 3, 6, 9, 12]\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     f(1) ==     [1]\nassert     f(2) ==     [1, 1]\nassert     f(3) ==     [1, 2, 6]\nassert     f(4) ==     [1, 2, 6, 24]\nassert     f(5) ==     [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     f(1) == [1]\nassert     f(5) == [1, 1, 2, 6, 24]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(3) == [1, 1, 2]\nassert     f(2) == [1, 1]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,1]\nassert     f(3) == [1,1,1]\nassert     f(4) == [1,1,1,1]\nassert     f(5) == [1,1,1,1,1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint('OK')"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(2) == (0, 2)\nassert     even_odd_palindrome(3) == (1, 2)\nassert     even_odd_palindrome(4) == (2, 1)\nassert     even_odd_palindrome(6) == (2, 3)\nassert     even_odd_palindrome(10) == (4, 5)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(6) == (2, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (even_odd_palindrome(100) == (4, 6))\nassert     (even_odd_palindrome(100) == (4, 6))\nassert     (even_odd_palindrome(1) == (0, 0))\nassert     (even_odd_palindrome(10) == (4, 5))\nassert     (even_odd_palindrome(11) == (4, 5))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(3) == (2, 1)\nassert     even_odd_palindrome(2) == (0, 0)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(5) == (0, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 1)\nassert     even_odd_palindrome(12) == (6, 1)\nassert     even_odd_palindrome(13) == (0, 2)\n\nprint('OK')"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     ((4, 2) == even_odd_palindrome(4) == even_odd_palindrome(5) == even_odd_palindrome(6))\nassert     ((3, 3) == even_odd_palindrome(10) == even_odd_palindrome(100))\nassert     ((1, 0) == even_odd_palindrome(2) == even_odd_palindrome(3))\nassert     ((4, 4) == even_odd_palindrome(7) == even_odd_palindrome(8) == even_odd_palindrome(9))\nassert     ((5, 5) == even_odd_palindrome(11) == even_odd_palindrome(12))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (0, 2)\nassert     even_odd_palindrome(3) == (0, 3)\nassert     even_odd_palindrome(4) == (0, 5)\nassert     even_odd_palindrome(5) == (0, 8)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (1, 0)\nassert     even_odd_palindrome(5) == (2, 1)\nassert     even_odd_palindrome(6) == (2, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(1) == (1,0)\nassert     even_odd_palindrome(2) == (0,1)\nassert     even_odd_palindrome(3) == (0,2)\nassert     even_odd_palindrome(4) == (1,1)\nassert     even_odd_palindrome(5) == (1,2)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_nums([]) == 0, \"0 digits in array = 0\"\nassert count_nums([1, 2, 3]) == 0, \"3 digits in array = 0\"\nassert count_nums([-1, 2, 3]) == 1, \"1 digit in array is negative\"\nassert count_nums([-1, -3]) == 1, \"1 digit in array is negative\"\nassert count_nums([1, -3]) == 1, \"1 digit in array is negative\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_nums([1,2,3,4,5]) == 0\nassert     count_nums([-1,2,-3,4,5]) == 3\nassert     count_nums([1,2,-3,4,5]) == 2\nassert     count_nums([-1,2,3,-4,5]) == 2\nassert     count_nums([-1,-2,3,-4,5]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_nums([1234, 2345, -1234, 5, 0]) == 3\nassert     count_nums([-1234, -2345, 0]) == 1\nassert     count_nums([0]) == 1\nassert     count_nums([0, 0]) == 2\nassert     count_nums([-0]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_nums([]) == 0, \"the result for an empty array is 0\"\nassert     count_nums([1]) == 0, \"the result for array of one element is 0\"\nassert     count_nums([2, 3, 4]) == 0, \"the result for array with all positive numbers is 0\"\nassert     count_nums([-1, -2, -3]) == 0, \"the result for array with all negative numbers is 0\"\nassert     count_nums([1, 2, 3]) == 1, \"the result for array with positive and negative numbers is 1\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_nums([123, 456, -123]) == 2\nassert     count_nums([12, 12, -12, -12]) == 4\nassert     count_nums([12, 12, -12, 0]) == 3\nassert     count_nums([1, 2, 3, 4, 5]) == 0\nassert     count_nums([-1, -2, -3, -4, -5]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_nums([]) == 0, \"1st example\"\nassert     count_nums([0]) == 0, \"2nd example\"\nassert     count_nums([1, 2, 3]) == 0, \"3rd example\"\nassert     count_nums([1234, -5, 0]) == 3, \"4th example\"\nassert     count_nums([-1234, -5, 0]) == 2, \"4th example\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1, 2, 3]) == 0\nassert     count_nums([-1, 0, 2, 3]) == 1\nassert     count_nums([1, -2, 3]) == 2\nassert     count_nums([-1, -2, 3]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1,2,3]) == 0\nassert     count_nums([-1,2,-3]) == 3\nassert     count_nums([0,1,2,3,4]) == 4\nassert     count_nums([-0,-1,-2,-3,-4]) == 5\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_nums([-1, -2, -3]) == 0\nassert     count_nums([0, 0, 0, 0]) == 0\nassert     count_nums([-1, -2, 3]) == 0\nassert     count_nums([1, 2, 3, 4]) == 1\nassert     count_nums([9, 9, 9, 9, 9]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nmove_one_ball([]) == True\nassert \nmove_one_ball([1, 2, 3]) == False\nassert \nmove_one_ball([4, 1, 2, 3]) == Tru"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     move_one_ball([3,4,2,1]) == True\nassert     move_one_ball([1,2,3,4]) == True\nassert     move_one_ball([2,1]) == False\nassert     move_one_ball([1,2,1]) == False\nassert     move_one_ball([3,2,3,1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (move_one_ball([1, 2, 3, 4]) == True), \"Test case 1 failed\"\nassert     (move_one_ball([3, 4, 2, 1]) == True), \"Test case 2 failed\"\nassert     (move_one_ball([1, 2, 3, 4, 6]) == True), \"Test case 3 failed\"\nassert     (move_one_ball([1, 3, 2, 4]) == True), \"Test case 4 failed\"\nassert     (move_one_ball([3, 2, 4, 1]) == True), \"Test case 5 failed\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 3, 2, 4, 5]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     move_one_ball([]) == True\nassert     move_one_ball([1,2,3]) == False\nassert     move_one_ball([3,1,2]) == True\nassert     move_one_ball([2,3,1]) == False\nassert     move_one_ball([3,3,3]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     move_one_ball([1,2,3]) == True\nassert     move_one_ball([1,3,2]) == True\nassert     move_one_ball([1,2,3,4]) == True\nassert     move_one_ball([4,1,2,3]) == True\nassert     move_one_ball([4,5,6,1,2,3]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     move_one_ball([1, 2, 3]) == True\nassert     move_one_ball([3, 1, 2]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True,     \"The result should be True\"\nassert     move_one_ball([1,2,3]) == True,         \"The result should be True\"\nassert     move_one_ball([1]) == True,             \"The result should be True\"\nassert     move_one_ball([]) == True,             \"The result should be True\"\nassert     move_one_ball([4,5,3,2,1]) == False,     \"The result should be False\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     exchange([5,4,3,2,1], [1,3,5,7,9]) == \"YES\"\nassert     exchange([5,4,3,2,1], [1,3,5,7,8]) == \"NO\"\nassert     exchange([5,4,3,2,1], [1,3,5,7,2]) == \"YES\"\nassert     exchange([5,4,3,2,1], [1,3,5,7,4]) == \"YES\"\nassert     exchange([5,4,3,2,1], [1,3,5,6,8]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     exchange([1], [1, 2, 3]) == \"NO\"\nassert     exchange([2], [1, 3, 5]) == \"NO\"\nassert     exchange([4], [1, 3, 5]) == \"NO\"\nassert     exchange([4, 6], [1, 3, 5]) == \"YES\"\nassert     exchange([4, 6, 8], [1, 3, 5]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     exchange([1, 2, 3, 4], [2, 4, 6, 8]) == 'YES'\nassert     exchange([1, 3, 5], [2, 4, 6, 8]) == 'NO'\nassert     exchange([2, 4, 6, 8], [1, 3, 5]) == 'YES'\nassert     exchange([1, 3, 5, 7], [2, 4, 6, 8]) == 'NO'\nassert     exchange([], [2, 4, 6, 8]) == 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     exchange([1,2], [3,4]) == \"NO\"\nassert     exchange([1], [3]) == \"YES\"\nassert     exchange([1,2,3,4,5], [6,7,8,9]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [2,3,4,5,6,7]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7], [3,4,5,6,7,8,9]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     exchange([1,2,3], [2,3,4]) == \"NO\", \"First example\"\nassert     exchange([1,2,3], [3,1,2]) == \"YES\", \"Second example\"\nassert     exchange([1,2,3], [1,3,2]) == \"NO\", \"Third example\"\nassert     exchange([1,2,3,4,5,6], [4,3,6,1,2,5]) == \"YES\", \"Fourth example\"\nassert     exchange([2,3,4], [1,3,2]) == \"NO\", \"Fifth example\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     exchange([1,2,3,4,5], [1,3,5]) == \"YES\"\nassert     exchange([1,2,3,4,5], [1,2,3,4,5]) == \"NO\"\nassert     exchange([1,3,5], [1,2,3,4,5]) == \"NO\"\nassert     exchange([1,3,5], [1,3,5,2,4,6]) == \"NO\"\nassert     exchange([1,3,5], [1,2,3,4,5,6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    # read input\n    lst1 = [int(n) for n in input().split()]\n    lst2 = [int(n) for n in input().split()]\n\n    # check whether there is an exchange\n    if not check_exchange(lst1, lst2):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     exchange([1,3,5,7], [2,4,6,8]) == \"YES\"\nassert     exchange([1,3,5,7], [2,4,6,8,9]) == \"NO\"\nassert     exchange([1,3,5,7], [2,4,6,8,9,10,11]) == \"NO\"\nassert     exchange([1,3,5,7,8], [2,4,6,8,9]) == \"YES\"\nassert     exchange([1,3,5,7,8], [2,4,6,8,9,10,11]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     exchange([1,3,5,7], [2,4,6,8]) == \"YES\"\nassert     exchange([1,3,5,7], [2,4,6,8, 9]) == \"NO\"\nassert     exchange([1,3,5,7,9], [2,4,6,8]) == \"NO\"\nassert     exchange([], []) == \"YES\"\nassert     exchange([1], [2]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     exchange([1,2,3], [2,4,6]) == \"YES\"\nassert     exchange([1,3,5], [2,4,6]) == \"NO\"\nassert     exchange([1,2,3,4,5], [2,4,6]) == \"NO\"\nassert     exchange([1,2,3,4], [2,4,6,8]) == \"YES\"\nassert     exchange([1,3,5], [2,4,6,8]) == \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     histogram(\"abbcccddd\") ==    {'c': 4, 'd': 1, 'b': 1, 'a': 2}\nassert     histogram(\"a bb cc dd ee\") ==    {'b': 3, 'd': 2, 'a': 1, 'e': 2}\nassert     histogram(\"a\") ==    {'a': 1}\nassert     histogram(\"\") ==    {}\nassert     histogram(\" \") ==    {}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     histogram(\"aaabcc\") == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram(\"abcabc\") == {'a': 2, 'b': 2, 'c': 2}\nassert     histogram(\"aabbc\") == {'a': 2, 'b': 1, 'c': 2}\nassert     histogram(\"aabbca\") == {'a': 2, 'b': 1, 'c': 2}\nassert     histogram(\"abcdef\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     histogram('c') ==     {'c': 1}, 'incorrect histogram()'\nassert     histogram('ccc') ==     {'c': 3}, 'incorrect histogram()'\nassert     histogram('aaabbbccc') ==     {'a': 3, 'b': 4, 'c': 5}, 'incorrect histogram()'\nassert     histogram('cad') ==     {'c': 2, 'd': 1}, 'incorrect histogram()'\nassert     histogram('abcabccc') ==     {'a': 2, 'b': 3, 'c': 4}, 'incorrect histogram()'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     histogram(\"abbbcd\") == {\"a\": 3, \"b\": 3, \"c\": 1, \"d\": 1}\nassert     histogram(\"abcd\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}\nassert     histogram(\"abcde\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1}\nassert     histogram(\"abcdea\") == {\"a\": 2, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1}\nassert     histogram(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\") == \\\n           {\"a\": 7, \"b\": 4, \"c\": 4, \"d\": 4, \"e\": 4, \"f\": 2, \"g\": 2, \"h\": 2, \"i\": 2, \"j\": 1, \"k\": 1,\n           \"l\": 1, \"m\": 1, \"n\": 1, \"o\": 1, \"p\": 2, \"q\": 2, \"r\": 2, \"s\": 2, \"t\": 2, \"u\": 3, \"v\": 2,\n           \"w\": 1, \"x\": 1, \"y\": 1, \"z\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     histogram('a b c a') == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram('a b b c') == {'a': 2, 'b': 2, 'c': 1}\nassert     histogram('a b b c c') == {'a': 2, 'b': 2, 'c': 2}\nassert     histogram('a b c a a b c') == {'a': 4, 'b': 2, 'c': 2}\nassert     histogram('a b c a a a b b b c c a a c c a') == {'a': 6, 'b': 3, 'c': 3}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     {'a': 2, 'c': 1, 'b': 1, 'd': 1} == histogram(\"abcd\")\nassert     {'a': 1, 'c': 1, 'b': 1, 'd': 1} == histogram(\"acbd\")\nassert     {'a': 3, 'c': 1, 'b': 1, 'd': 1} == histogram(\"acbdb\")\nassert     {'a': 4, 'c': 1, 'b': 1, 'd': 1} == histogram(\"acdba\")\nassert     {'a': 4, 'c': 1, 'b': 1, 'd': 1} == histogram(\"acdba\")\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     histogram(\"one two one one one one two one one one two\") == {'o': 2, 't': 2, 'e': 1, 'n': 2, 'w': 1, 'i': 2,'s': 2, 'p': 1, 'd': 1}\nassert     histogram(\"one two one one one one one one one one one one one one one one one one one one one\") == {'o': 11, 't': 4, 'e': 1, 'n': 1, 'w': 1, 'i': 1,'s': 1, 'p': 1, 'd': 1}\nassert     histogram(\"one two one one one one one one one one one one one one one one one one one one one\") == {'o': 11, 't': 4, 'e': 1, 'n': 1, 'w': 1, 'i': 1,'s': 1, 'p': 1, 'd': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef palindrome(test):\n    \"\"\"Given a string, check if the characters of the string are all palindromic.\n    Return a boolean value representing whether the string is palindromic.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     reverse_delete('abcdef','cef') == ('bacdf',True)\nassert     reverse_delete('abdc','c') == ('abdc',False)\nassert     reverse_delete('cbbd','bb') == ('c',False)\nassert     reverse_delete('aaacccddd','cc') == ('aaaaacddd',True)\nassert     reverse_delete('abcc','ab') == ('bc',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"hello\", \"ell\") == (\"hlelo\", True), \"Case1: not a palindrome\"\nassert     reverse_delete(\"\", \"\") == (\"\", True), \"Case2: empty string\"\nassert     reverse_delete(\"a\", \"a\") == (\"\", False), \"Case3: empty string\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"abba\", \"ab\") == (\"ba\",True)\nassert     reverse_delete(\"abbba\", \"ab\") == (\"bbb\",True)\nassert     reverse_delete(\"abba\",\"aa\") == (\"abba\",True)\nassert     reverse_delete(\"abcde\",\"ace\") == (\"abcde\",True)\nassert     reverse_delete(\"abcde\",\"xyz\") == (\"abcde\",False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"a\",\"a\") == (\"a\",True)\nassert     reverse_delete(\"a\", \"b\") == (\"\",True)\nassert     reverse_delete(\"abbc\", \"c\") == (\"bba\",True)\nassert     reverse_delete(\"abbc\", \"bbc\") == (\"bbc\",False)\nassert     reverse_delete(\"abbc\", \"bb\") == (\"bbc\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nprint(reverse_delete('', 'a'))\nassert\n\nprint(reverse_delete('aa', 'a'))\nassert\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     reverse_delete('racecar', 'ace') == ('racecar', True), \"wrong answer\"\nassert     reverse_delete('racescar', 'ace') == ('rac', False), \"wrong answer\"\nassert     reverse_delete('', 'ace') == ('', True), \"wrong answer\"\nassert     reverse_delete('', '') == ('', True), \"wrong answer\"\n\ndef test_reverse_delete():\n    "
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"abca\", \"abc\") == (\"abca\", True)\nassert     reverse_delete(\"abca\", \"a\") == (\"abca\", True)\nassert     reverse_delete(\"abc\", \"abcd\") == (\"\", False)\nassert     reverse_delete(\"abca\", \"\") == (\"abca\", True)\nassert     reverse_delete(\"\", \"abcd\") == (\"\", False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     reverse_delete('waterbottle', 'erbottlewat') == ('waterbttle', True)\nassert     reverse_delete('waterbottle', 'erbottlew') == ('waterbottle', True)\nassert     reverse_delete('waterbottle', 'erbottle') == ('waterbottle', True)\nassert     reverse_delete('waterbottle', 'erbott') == ('waterbottle', True)\nassert     reverse_delete('waterbottle', 'erbottlew') == ('waterbottle', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     reverse_delete('abcdef', '') == ('abcdef', True)\nassert     reverse_delete('', '') == ('', True)\nassert     reverse_delete('abcdef', 'abc') == ('def', False)\nassert     reverse_delete('abcdef', 'abcdef') == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     reverse_delete('abcdef', 'def') == ('abc', False), 'wrong result'\nassert     reverse_delete('abcdef', 'abc') == ('de', True), 'wrong result'\nassert     reverse_delete('abcdef', '') == ('abcdef', True), 'wrong result'\n\nprint('correct')\n\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4] == odd_count([\"1\", \"2\", \"3\", \"4\"])\nassert     [1, 2, 0, 0] == odd_count([\"5\", \"10\", \"11\", \"10\"])\nassert     [1, 2, 2, 3, 3] == odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\nassert     [1, 2, 2, 2, 3, 3, 3, 3] == odd_count([\"123\", \"456\", \"789\"])\nassert     [1, 0, 0, 0, 0] == odd_count([\"10\", \"1\", \"0\", \"100\", \"1000\"])\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     odd_count([\"7\", \"8\", \"5\", \"2\", \"3\", \"1\"]) == [1, 0, 1, 2, 2, 1]\nassert     odd_count([\"8\", \"5\", \"2\", \"3\", \"1\"]) == [0, 1, 2, 0, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     odd_count([\"test0\", \"222222\", \"test2\", \"1\"]) == [4, 3, 2]\nassert     odd_count([\"test1\", \"122222\", \"test2\", \"0\"]) == [2, 3, 2]\nassert     odd_count([\"test3\", \"122222\", \"test2\", \"1111\"]) == [4, 3, 3]\nassert     odd_count([\"test4\", \"122222\", \"test2\", \"111111\"]) == [4, 3, 4]\nassert     odd_count([\"test5\", \"122222\", \"test2\", \"111111111\"]) == [4, 3, 5]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     odd_count(['5', '134', '4', '6', '7', '5', '23', '123', '1', '2']) == [4, 5, 6, 3, 5, 3, 2, 4, 3, 3]\n\n\n\ndef str_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of times i occurs in the\n    input.\" where all the i's should be replaced by the number of times the\n    i'th element of the input occurs in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     odd_count([]) == []\nassert     odd_count([\"hi\", \"hello\", \"im\", \"4\", \"13\"]) == [4, 0, 4, 1, 2]\nassert     odd_count([\"7\", \"4\", \"1\"]) == [0, 1, 1]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [0, 0, 0, 1, 0, 1, 0, 0, 1]\nassert     odd_count([\"45\", \"9\", \"23\"]) == [0, 1, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     odd_count(['1','2','3','4','5']) == [0,2,3,3,0], \"The list is ['1','2','3','4','5']\"\nassert     odd_count(['123','345','234']) == [1,0,1], \"The list is ['123','345','234']\"\nassert     odd_count(['22','55','33']) == [1,1,0], \"The list is ['22','55','33']\"\nassert     odd_count(['23','234','35']) == [1,1,1], \"The list is ['23','234','35']\"\nassert     odd_count([]) == [], \"The list is []\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     odd_count([\"odd\", \"even\", \"even\", \"odd\"]) == [4, 0, 0, 1]\nassert     odd_count([\"odd\", \"even\", \"even\", \"even\"]) == [4, 0, 0, 4]\nassert     odd_count([\"even\", \"even\", \"even\", \"even\"]) == [0, 0, 0, 0]\n\ndef add_even_list(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, add the even numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     odd_count(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == [10]\nassert     odd_count(['2', '0', '0', '0', '0']) == [1, 1, 1, 1, 1]\nassert     odd_count(['1', '1', '3', '5', '2', '6', '7']) == [0, 1, 1, 0, 2, 2, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     odd_count([\"11\", \"abc\", \"22\", \"abc\"])     == [1, 0, 1, 0], \"Wrong\"\nassert     odd_count([\"0\", \"abc\", \"22\", \"abc\"])     == [0, 0, 0, 0], \"Wrong\"\nassert     odd_count([\"11\", \"21\", \"12\", \"210\"])     == [2, 2, 1, 4], \"Wrong\"\nassert     odd_count([\"121\", \"0\", \"21\", \"2\"])     == [1, 0, 1, 2], \"Wrong\"\nassert     odd_count([\"11\", \"111\", \"122221\"])     == [2, 3, 4], \"Wrong\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 1, 3, 4, 5, 6, 7]) == 7\nassert     minSubArraySum([2, 1, 3, 4, 5, 6, 7, 1]) == 7\nassert     minSubArraySum([2, 1, 3, 4, 5, 6, 7, 1, 1]) == 8\nassert     minSubArraySum([2, 1, 3, 4, 5, 6, 7, 1, 1, 2]) == 8\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, 1, 4]) == 6\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 1\nassert     minSubArraySum([4, 3, 2, 1, 5]) == 4\nassert     minSubArraySum([4, 4, 3, 2, 1, 5]) == 4\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, 2]) == 5\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, 2, 1, 2, 3]) == 4\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, 2, 1, 2, 3, 2, 1]) == 3\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, 2, 1, 2, 3, 2, 1, 2, 3]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any subarray where the\n    sum of all elements in the subarray is less than or equal to a given integer k.\n    \"\"\"\n    pass\n\ndef test_minSubArraySum():\n    nums = [2, 3, 1, 2, 4, 3]\n    print(minSubArraySum(nums))\n\nif __name__ == \"__main__\":\n    test_minSubArraySum("
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 3, 1, 2, 4, -3]) == 4\nassert     minSubArraySum([5, -3, 5]) == 0\nassert     minSubArraySum([5, -3]) == 5\nassert     minSubArraySum([5]) == 5\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_fill([[1, 1], [1, 1], [1, 1], [1, 1]], 2) == 2\nassert     max_fill([[1, 1], [1, 1], [1, 1], [1, 1]], 1) == 0\nassert     max_fill([[1, 1], [1, 1], [1, 1], [1, 1]], 2) == 2\nassert     max_fill([[1, 0], [1, 0], [1, 0], [1, 0]], 2) == 2\nassert     max_fill([[1, 1], [1, 1], [1, 1], [1, 1]], 2) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     max_fill([[1, 1, 1, 0], \n               [1, 1, 1, 0], \n               [0, 1, 0, 0]], 3) == 4\nassert max_fill([[1, 1, 1, 0], \n               [1, 1, 1, 0], \n               [1, 1, 1, 0]], 2) == 2\nassert max_fill([[1, 1, 1, 1], \n               [1, 1, 1, 1], \n               [1, 1, 1, 1], \n               [1, 1, 1, 1]], 3) == 0\nassert max_fill([[1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1]], 3) == 2\nassert max_fill([[1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1], \n               [1, 1, 1, 1, 1, 1]], 2) == 4\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_fill(\n    [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 0],\n        [0, 0, 0, 0, 0]\n    ],\n    5) == 7\nassert max_fill(\n    [\n        [1, 1, 1, 0, 0],\n        [1, 1, 0, 0, 0],\n        [1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0]\n    ],\n    2) == 5\n\ngrid = []\ncapacity = 1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_fill([[1,0,0,0,0],\n                  [0,1,0,1,0],\n                  [0,0,0,1,0]], 4) == 3, \"not correct\"\nassert     max_fill([[0,1,0,1,0],\n                  [0,0,0,1,0],\n                  [0,1,0,1,0]], 4) == 0, \"not correct\"\nassert     max_fill([[1,0,0,1,0],\n                  [0,0,0,0,0],\n                  [0,0,0,0,0]], 4) == 5, \"not correct\"\nassert     max_fill([[1,0,0,0,1],\n                  [0,1,0,0,0],\n                  [0,0,0,0,1]], 4) == 4, \"not correct\"\nassert     max_fill([[1,0,0,0,0],\n                  [1,0,0,1,0],\n                  [0,0,0,0,1]], 4) == 0, \"not correct\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_fill([[0,0,0],[0,0,0]], 0) == 0, \"Wrong answer\"\nassert     max_fill([[0,0,0],[0,0,0]], 1) == 0, \"Wrong answer\"\nassert     max_fill([[0,0,0],[0,0,0]], 2) == 3, \"Wrong answer\"\nassert     max_fill([[0,0,0],[0,0,0]], 3) == 6, \"Wrong answer\"\nassert     max_fill([[0,0,0,1],[0,0,0,0]], 0) == 3, \"Wrong answer\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert max_fill([[0, 0], [0, 0]], 1) == 0\nassert max_fill([[1, 1], [1, 1]], 2) == 1\nassert max_fill([[0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0]], 2) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_fill([[0,0], [1,1], [1,1], [1,1], [1,1]], 2) == 1\nassert     max_fill([[0,0], [0,1], [0,1], [1,1], [1,1]], 1) == 5\nassert     max_fill([[0,0], [0,1], [0,1], [1,1], [1,1]], 0) == 0\nassert     max_fill([[0,0], [0,0], [0,1], [1,1], [1,1]], 2) == 3\nassert     max_fill([[0,0], [0,1], [0,1], [0,0], [1,1]], 2) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     max_fill([[0,0],[0,0]], 2) == 2, 'wrong result'\nassert     max_fill([[1,1],[1,0]], 2) == 1, 'wrong result'\nassert     max_fill([[0,0],[0,0]], 1) == 0, 'wrong result'\nassert     max_fill([[1,1],[1,0]], 1) == 0, 'wrong result'\nassert     max_fill([[1,0,1],[1,0,0]], 2) == 3, 'wrong result'\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [0, 1, 2, 4, 8, 3, 5, 6, 9, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Incorrect\"\nassert     sort_array([8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8], \"Incorrect\"\nassert     sort_array([0,1,0,0,2,1,0,0,0]) == [0,0,0,0,0,1,1,0,2], \"Incorrect\"\nassert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"Incorrect\"\nassert     sort_array([8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8], \"Incorrect\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint('all the tests passed'"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sort_array([5,6,7,8]) == [5,6,7,8]\nassert     sort_array([0]) == [0]\nassert     sort_array([1,0,1,1,1,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 4, 8, 3, 5, 6, 7]\nassert     sort_array([8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [0, 1, 2, 4, 8, 3, 5, 6, 7, 9, 10, 11]\nassert     sort_array([0, 1, 1, 0, 1, 2, 1, 3, 4, 0, 4, 1]) == [0, 0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 4]\nassert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [0, 1, 2, 4, 8, 12, 16, 20, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_array(['11101110', '11101111', '11101110', '11101110', '11101110']) == ['11101110', '11101110', '11101110', '11101110', '11101111']\nassert     sort_array(['10', '1', '11101110', '11101110', '11101110']) == ['10', '1', '11101110', '11101110', '11101110']\nassert     sort_array(['11101110', '11101110', '11101110', '11101110', '11101110']) == ['11101110', '11101110', '11101110', '11101110', '11101110']"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     select_words('hello', 1) == ['hello']\nassert     select_words('hello', 2) == []\nassert     select_words('h', 1) == ['h']\nassert     select_words('hello', 4) == []\nassert     select_words('hello', 5) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     select_words('abc d efg h ij kl mn', 2) == ['efg', 'ij']\nassert     select_words('a b c', 3) == ['a', 'b', 'c']\nassert     select_words('abc d efg h ij kl mn', 1) == ['efg', 'ij', 'kl','mn']\nassert     select_words('abc d efg h ij kl mn', 5) == []\nassert     select_words('abc d efg h ij kl mn', 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     select_words('', 2) == []\nassert select_words('yabm', 3) == []\nassert select_words('sajgqwajvzcezs', 2) == ['sajgqwajvzcezs']\nassert select_words('efpfpnuf', 1) == ['efpfpnuf']\nassert select_words('gdqerqopcfr', 2) == ['gdqerqopcfr', 'qopcfr']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     select_words(\"cat bat mat cat bat mat cat\", 3) ==     [ \"cat\", \"mat\"]\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 4) == [ \"fox\", \"dog\", \"quick\", \"brown\"]\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 4) == [ \"fox\", \"dog\", \"quick\", \"brown\"]\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 2) == []\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     select_words(\"cat dog rat\", 3) == [\n        \"cat\", \"dog\", \"rat\"]\nassert     select_words(\"cat dog rat\", 2) == [\n        \"cat\", \"dog\", \"rat\"]\nassert     select_words(\"cat dog rat\", 1) == [\n        \"cat\", \"dog\", \"rat\"]\nassert     select_words(\"cat dog rat\", 5) == [\n        \"cat\", \"dog\", \"rat\"]\nassert     select_words(\"cat dog rat\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     select_words('abc de fg', 3) == ['de fg', 'de', 'fg']\nassert     select_words('abc de fg', 2) == ['de', 'fg']\nassert     select_words('abc de fg', 1) == ['de', 'fg']\nassert     select_words('', 1) == []\nassert     select_words('abcde fg', 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     select_words(\"ab cd\", 3) == ['ab', 'cd']\nassert     select_words(\"ab cd e f\", 2) == ['ab', 'cd']\nassert     select_words(\"ab cd e f g\", 2) == ['ab', 'cd', 'e', 'f']\nassert     select_words(\"ab cd e f g\", 1) == ['ab', 'cd']\nassert     select_words(\"\", 1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     select_words('The quick brown fox jumps over the lazy dog', 10) == ['over', 'jumps']\nassert     select_words('The quick brown fox jumps over the lazy dog', 15) == ['jumps']\nassert     select_words('The quick brown fox jumps over the lazy dog', 17) == []\nassert     select_words('', 10) == []\nassert     select_words('', 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     select_words(\"abc\", 1) == [], \"Test Failed: Should be []\"\nassert     select_words(\"a cat\", 2) == [], \"Test Failed: Should be []\"\nassert     select_words(\"a cat\", 3) == [\"a\"], \"Test Failed: Should be ['a']\"\nassert     select_words(\"tacocat\", 3) == [\"tacocat\"], \"Test Failed: Should be ['tacocat']\"\nassert     select_words(\"tacocat\", 1) == [\"taco\", \"tac\", \"cat\"], \"Test Failed: Should be ['taco', 'tac', 'cat']\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     select_words(\"abcc cde fghij\", 2) == [\"cde\", \"fghij\"]\nassert     select_words(\"abcc cde fghij\", 4) == [\"abcc\", \"cde\", \"fghij\"]\nassert     select_words(\"abcc cde fghij\", 0) == [\"abcc\", \"cde\", \"fghij\"]\nassert     select_words(\"abcc cde fghij\", 8) == [\"cde\", \"fghij\"]\nassert     select_words(\"abcc cde fghij\", 1) == []\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"surnam\") == \"m\"\nassert     get_closest_vowel(\"eyeriss\") == \"e\"\nassert     get_closest_vowel(\"goodtogo\") == \"\"\nassert     get_closest_vowel(\"outletter\") == \"\"\nassert     get_closest_vowel(\"dear\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(    'aardvark' ) == 'u', 'wrong result for get_closest_vowel(\"aardvark\")'\nassert     get_closest_vowel(    'hello' ) == '', 'wrong result for get_closest_vowel(\"hello\")'\nassert     get_closest_vowel(    'apple' ) == '', 'wrong result for get_closest_vowel(\"apple\")'\nassert     get_closest_vowel(    'qwe' ) == '', 'wrong result for get_closest_vowel(\"qwe\")'\nassert     get_closest_vowel(    'abcde' ) == '', 'wrong result for get_closest_vowel(\"abcde\")'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"x\") == \"\", \"First test\"\nassert     get_closest_vowel(\"hello\") == \"\", \"Second test\"\nassert     get_closest_vowel(\"bad\") == \"a\", \"Third test\"\nassert     get_closest_vowel(\"chicken\") == \"e\", \"Fourth test\"\nassert     get_closest_vowel(\"coding\") == \"o\", \"Fifth test\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('apple') == 'e', 'apple -> e'\nassert     get_closest_vowel('hello') == '', 'hello -> '\nassert     get_closest_vowel('x') == '', 'x -> '\n\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"foobar\")     == \"o\", \"example #1\"\nassert     get_closest_vowel(\"z\")     == \"\", \"example #2\"\nassert     get_closest_vowel(\"aa\")     == \"\", \"example #3\"\nassert     get_closest_vowel(\"poop\")     == \"\", \"example #4\"\nassert     get_closest_vowel(\"apple\")     == \"\", \"example #5\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"Aba\") == \"a\"\nassert     get_closest_vowel(\"zzz\") == \"\"\nassert     get_closest_vowel(\"Hello\") == \"\"\nassert     get_closest_vowel(\"ABABA\") == \"A\"\nassert     get_closest_vowel(\"aba\") == \"a\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"azcbobobegghakl\") == \"e\"\nassert     get_closest_vowel(\"abcdefghijk\") == \"\"\nassert     get_closest_vowel(\"abcbcdegjhk\") == \"\"\nassert     get_closest_vowel(\"bacdddfeghhj\") == \"\"\nassert     get_closest_vowel(\"bbcbcdegjhk\") == \"b\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_closest_vowel(\"babble\") == \"b\", \"get_closest_vowel('babble') == b failed\"\nassert     get_closest_vowel(\"aardvark\") == \"\", \"get_closest_vowel('aardvark') == a failed\"\nassert     get_closest_vowel(\"hostess\") == \"\", \"get_closest_vowel('hostess') == h failed\"\nassert     get_closest_vowel(\"foobar\") == \"\", \"get_closest_vowel('foobar') == f failed\"\nassert     get_closest_vowel(\"foobaz\") == \"\", \"get_closest_vowel('foobaz') == z failed\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"dammit\") == \"m\"\nassert     get_closest_vowel(\"yay\") == \"\"\nassert     get_closest_vowel(\"tumtum\") == \"m\"\nassert     get_closest_vowel(\"amazing\") == \"a\"\nassert     get_closest_vowel(\"jaja\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"bb\") == \"\", \"Should be an empty string\"\nassert     get_closest_vowel(\"abcde\") == \"\", \"Should be an empty string\"\nassert     get_closest_vowel(\"bcdef\") == \"\", \"Should be an empty string\"\nassert     get_closest_vowel(\"abcbc\") == \"\", \"Should be an empty string\"\nassert     get_closest_vowel(\"abcdefgh\") == \"\", \"Should be an empty string\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     match_parens(['(())', '(())']) == 'Yes'\nassert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['()(', ')()']) == 'No'\nassert     match_parens(['())', '()()']) == 'No'\nassert     match_parens(['((())', '()()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', ')']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', ')']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     match_parens(['(', ')', ')', '(', ')', '(']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', ')', '(']) == 'Yes'\nassert     match_parens([')', '(', '(', ')', ')', '(']) == 'Yes'\nassert     match_parens(['(', '(', '(', ')', ')', ')', '(', ')', ')']) == 'Yes'\nassert     match_parens(['(', '(', '(', ')', ')', ')', ')', '(', ')', '(']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     match_parens(['(()','()']) == 'Yes'\nassert     match_parens(['()','(()']) == 'No'\nassert     match_parens(['(()','())','(())']) == 'Yes'\nassert     match_parens(['())','()(']) == 'No'\nassert     match_parens(['((()','(())']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     match_parens([\n            '(()())',\n            '()())',\n        ]) == 'Yes', \"example 1\"\nassert     match_parens([\n            '(()())',\n            '(()())',\n        ]) == 'Yes', \"example 2\"\nassert     match_parens([\n            '(()())',\n            '()()())',\n        ]) == 'No', \"example 3\"\nassert     match_parens([\n            '(((())))',\n            '()()',\n        ]) == 'Yes', \"example 4\"\nassert     match_parens([\n            '(())',\n            '()()',\n        ]) == 'Yes', \"example 5\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (match_parens(['(())', '(())']) == 'Yes')\nassert     (match_parens(['())', '()()']) == 'Yes')\nassert     (match_parens(['(())', '()())']) == 'Yes')\nassert     (match_parens(['((()))', '()()()']) == 'Yes')\nassert     (match_parens(['((())', '(())()']) == 'Yes')\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     match_parens([')', ')', '(']) == 'No'\nassert match_parens(['(', ')', '(']) == 'No'\nassert match_parens(['(', ')', ')', '(']) == 'No'\nassert match_parens(['(', '(', ')', ')', '(']) == 'No'\nassert match_parens(['(', ')', '(', '(', ')', ')', '(', ')', ')']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     match_parens(['(', '(', ')', ')']) == 'Yes','solution is not correct'\nassert     match_parens(['(', ')', '(', ')']) == 'No','solution is not correct'\nassert     match_parens(['(', '(', ')']) == 'Yes','solution is not correct'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     match_parens(['(())', '(())']) == 'Yes'\nassert     match_parens(['(()', '()']) == 'Yes'\nassert     match_parens(['(()', '()()']) == 'Yes'\nassert     match_parens(['((()', '()())']) == 'Yes'\nassert     match_parens(['((()', '()()))']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     match_parens([\"(\", \")\"]) == \"Yes\"\nassert     match_parens([\"(\", \")\"]) == \"Yes\"\nassert     match_parens([\"(\", \")\"]) == \"No\"\nassert     match_parens([\"(\", \"()\"]) == \"Yes\"\nassert     match_parens([\"(\", \"()\", \")\", \")\"]) == \"No\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (maximum([1, 3, 5, 7, 9, 4, 6], 4) == [3, 4, 5, 6])\nassert     (maximum([1, 3, 5, 7, 9, 4, 6], 3) == [1, 3, 4])\nassert     (maximum([1, 3, 5, 7, 9, 4, 6], 7) == [1, 3, 4, 5, 6, 7])\nassert     (maximum([1, 3, 5, 7, 9, 4, 6], 0) == [])\nassert     (maximum([1, 3, 5, 7, 9, 4, 6], 6) == [1, 3, 4, 5, 6])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sorted(maximum([5, 3, -3, 1], 3)) == [5, 3, -3]\nassert     sorted(maximum([3, 5, 0, 4, 1], 3)) == [5, 5, 4, 3, 3]\nassert     sorted(maximum([4, 1, -2, 1], 3)) == [-2, -2, 4"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     maximum([1, 2, 3, 5, 8, 9, 12], 3) == [8, 9, 12]\nassert     maximum([7, 4, 3, 2, 5, 8, 9, 12], 3) == [7, 8, 9]\nassert     maximum([7, 4, 3, 2, 5, 8, 9, 12], 4) == [8, 9, 12, 7]\nassert     maximum([7, 4, 3, 2, 5, 8, 9, 12], 5) == [8, 9, 12, 7, 4]\nassert     maximum([7, 4, 3, 2, 5, 8, 9, 12], 6) == [8, 9, 12, 7, 4, 3]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     maximum([3, 5, 7, 9], 2) == [9, 7]\nassert     maximum([1, 4, 3, 6, 5], 2) == [4, 6]\nassert     maximum([1, 4, 3, 6, 5], 3) == [5, 4, 3]\nassert     maximum([1, 4, 3, 6, 5], 0) == []\nassert     maximum([3, 5, 7, 9], 2) == [9, 7]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [6, 6, 6, 6, 6, 6, 6] == maximum([6, 6, 6, 6, 6, 6, 6], 6)\nassert     [1, 2, 2, 2, 2, 2, 2] == maximum([1, 2, 2, 2, 2, 2, 2], 6)\nassert     [1, 2, 3, 3, 3, 3, 3] == maximum([1, 2, 3, 3, 3, 3, 3], 6)\nassert     [0, 0, 0, 1, 1, 1, 1] == maximum([0, 0, 0, 1, 1, 1, 1], 6)\nassert     [1, 2, 3, 4, 5, 5, 6] == maximum([1, 2, 3, 4, 5, 5, 6], 6)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 2) == [4, 5], \"incorrect\"\nassert     maximum([3, 2, 1, 5, 4], 2) == [5, 4], \"incorrect\"\nassert     maximum([1, 2, 3, 4, 5], 5) == [5, 5, 5, 5, 5], \"incorrect\"\nassert     maximum([3, 2, 1, 5, 4], 1) == [5], \"incorrect\"\nassert     maximum([3, 2, 1, 5, 4], 0) == [3, 2, 1, 5, 4], \"incorrect\"\nprint('maximum passed!')"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     maximum([5, 1, 1, 2, 2, 3, 4, 5], 4) == [5, 5, 5, 5]\nassert     maximum([5, 1, 1, 2, 2, 3, 4, 5], 2) == [5, 5]\nassert     maximum([5, 1, 1, 2, 2, 3, 4, 5], 10) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert     maximum([5, 1, 1, 2, 2, 3, 4, 5], 0) == []\nassert     maximum([5, 1, 1, 2, 2, 3, 4, 5], -5) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 2) == [5, 4]\nassert     maximum([1, 2, 3, 4, 5], 4) == [4, 4, 4, 4]\nassert     maximum([1, 2, 3, 4, 5], 6) == [5, 5, 5, 5, 5, 5]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8], 6) == [6, 6, 6, 6, 6, 6, 6, 6]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8], 7) == [7, 7, 7, 7, 7, 7, 7, 7]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     maximum([5, 5, 4, 4, 4, 3, 3, 3], 2) == [5, 5]\nassert     maximum([1, 1, 3, 4, 5], 1) == [5]\nassert     maximum([1, 1, 3, 4, 5], 1) == [5]\nassert     maximum([1, 1, 3, 4, 5], 3) == [4, 4, 5]\nassert     maximum([1, 1, 3, 4, 5], 4) == [1, 1, 3, 4, 5]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     set(maximum([5, 2, 8, 1, 3], 2)) == set([8, 5])\nassert     set(maximum([7, 6, 2, 1, 3], 2)) == set([7, 6])\nassert     set(maximum([7, 6, 2, 1, 3, 5, 4], 3)) == set([7, 6, 5])\nassert     set(maximum([4, 6, 7, 8, 9], 3)) == set([6, 7, 8])\nassert     set(maximum([3, 6, 7, 8, 9], 4)) == set([8, 9])\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     solution([3,1,2,4]) == 2\nassert     solution([3,3,2,4]) == 0\nassert     solution([3,1,2,4,5,8,7,6,6,9]) == 9\nassert     solution([5,8,9,6,2]) == 7\nassert     solution([3,1,2,4,5,8,7,6,6,9]) == 9\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef test():\n    pass"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solution([[1, 2, 3, 4, 5, 6, 7, 8], \n                   [20, 21, 22, 23, 24, 25, 26, 27],\n                   [38, 39, 40, 41, 42, 43, 44, 45],\n                   [19, 32, 33, 34, 35, 36, 37, 38],\n                   [12, 13, 14, 15, 16, 17, 18, 19]]) == 38\nassert     solution([[2, 4, 6, 8], \n                   [1, 3, 5, 7],\n                   [6, 8, 10, 12],\n                   [4, 8, 12, 16]]) == 32"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solution([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27]]) == 38\nassert     solution([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28],[29,30,31,32],[33,34,35,36]]) == 72"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solution([2,3,5,6,3,1]) == 12, \"case 1 failed\"\nassert     solution([5,7,0,4]) == 11, \"case 2 failed\"\nassert     solution([1,3,4,6,8,2,5,7]) == 17, \"case 3 failed\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 7\nassert     solution([2, 3, 4, 5, 7]) == 0"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint(solution(1,3,2)) # 3\nprint(solution(9,1,3,4,5,2)) # 2\nprint(solution(3,9,5,4,6,2,7,8,1)) # 0\nprint(solution(1,2,3,4,5,6)) # 0\nprint(solution(1,3,2,6,4,7,8,9,10)) # 9\nprint(solution(0,8,3,8,6,3,8,4,8,7,8,7)) # 3\nprint(solution(5,6,2,4,9,5,6,8,7,3,6,9)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19,20)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)) # 2\nprint(solution(5,6,3,4,9,5,6,8,7,3,6,9,10,11,12,13"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 3) == 13, \"Test 1 Failed\"\nassert     add_elements([9, 9, 9, 9, 9, 9, 9], 1) == 45, \"Test 2 Failed\"\nassert     add_elements([0, 0, 0, 0], 3) == 0, \"Test 3 Failed\"\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4) == 45, \"Test 4 Failed\"\nassert     add_elements([2, 3, 4, 5, 6, 7, 8, 9, 9, 9], 5) == 45, \"Test 5 Failed\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add_elements([90, 918, 885, 469, 832], 4) == 1090\nassert     add_elements([10, 16, 17, 9, 17, 5, 18, 6], 6) == 76\nassert     add_elements([1, 2, 3], 5) == 0\nassert     add_elements([1, 2, 3, 4, 5], 5) == 1"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add_elements([1, 2, 3, 4], 1) == 2\nassert     add_elements([1, 2, 3, 4], 2) == 3\nassert     add_elements([1, 2, 3, 4], 3) == 5\nassert     add_elements([1, 2, 3, 4], 4) == 7\nassert     add_elements([1, 2, 3, 4], 5) == 9\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add_elements([5], 1) == 0, add_elements([5], 1)\nassert     add_elements([1, 2, 3, 4, 5], 1) == 12, add_elements([1, 2, 3, 4, 5], 1)\nassert     add_elements([5, 6, 8, 9, 10], 1) == 26, add_elements([5, 6, 8, 9, 10], 1)\nassert     add_elements([5, 6, 8, 9, 10], 3) == 33, add_elements([5, 6, 8, 9, 10], 3)\nassert     add_elements([5, 6, 8, 9, 10], 4) == 44, add_elements([5, 6, 8, 9, 10], 4)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(add_elements([1, 2, 3], 2))\nassert \nprint(add_elements([1, 2, 3, 4, 5], 2))\nassert \nprint(add_elements([1, 2, 3, 4, 5], 1))\nassert \nprint(add_elements([1, 2, 3, 4, 5], 1))\nassert \nprint(add_elements([9, 9, 9, 9, 9, 9, 9, 9], 1))\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add_elements([1, 5, 9], 2) == 14\nassert     add_elements([1, 5, 9], 1) == 10\nassert     add_elements([1, 5, 9], 0) == 0\nassert     add_elements([1, 5, 9], 3) == 13\nassert     add_elements([1, 5, 9], 4) == 15\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add_elements([2, 3, 4, 5], 3) ==     9\nassert     add_elements([10, 9, 9], 3) ==     18\nassert     add_elements([1, 2, 3, 4, 5], 2) ==     9\nassert     add_elements([0, 0, 0], 3) ==     0\nassert     add_elements([3, 3, 3, 3, 3], 3) ==     13\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,3]\nassert     get_odd_collatz(3) == [1,3,10]\nassert     get_odd_collatz(4) == [1,3,10,5,16]\nassert     get_odd_collatz(5) == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(3) == [1, 3, 10]\nassert     get_odd_collatz(4) == [1, 3, 10, 5]\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1)     == [1], \\\n        \"wrong output for get_odd_collatz(1)\"\nassert     get_odd_collatz(2)     == [1,3,10,5,16,8,4,2,1], \\\n        \"wrong output for get_odd_collatz(2)\"\nassert     get_odd_collatz(3)     == [1,3,10,5,16,8,4,2,1], \\\n        \"wrong output for get_odd_collatz(3)\"\nassert     get_odd_collatz(4)     == [1,3,10,5,16,8,4,2,1], \\\n        \"wrong output for get_odd_collatz(4)\"\nassert     get_odd_collatz(5)     == [1,3,10,5,16,8,4,2,1], \\\n        \"wrong output for get_odd_collatz(5)\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (list(get_odd_collatz(10)) == [1, 3, 10, 5, 16, 8, 4, 2, 1])\nassert     (list(get_odd_collatz(2)) == [1, 3, 10, 5, 16, 8, 4, 2, 1])\nassert     (list(get_odd_collatz(1)) == [1])\n\nprint('Problem 9: passed all tests...')"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3, 10]\nassert     get_odd_collatz(5) == [1, 3, 10, 30, 90]\nassert     get_odd_collatz(20) == [1, 3, 10, 30, 90, 200, 302, 600, 900, 1200, 1800, 3600, 5400, 8100, 16200, 33100, 66000, 99000, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700, 66200, 99100, 16800, 32700"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef get_odd_collatz_simplified(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    pass\n\ndef get_odd_collatz_simplified_two(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef get_odd_collatz_v2(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     valid_date(\"12-01-2019\") == False\nassert     valid_date(\"12-31-2019\") == False\nassert     valid_date(\"04-31-2019\") == False\nassert     valid_date(\"02-29-2019\") == False\nassert     valid_date(\"03-31-2019\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     valid_date(\"9-10-1998\") == False, \"Wrong result for date = '9-10-1998'\"\nassert     valid_date(\"12-02-2004\") == False, \"Wrong result for date = '12-02-2004'\"\nassert     valid_date(\"1-31-2000\") == False, \"Wrong result for date = '1-31-2000'\"\nassert     valid_date(\"1-01-2000\") == True, \"Wrong result for date = '1-01-2000'\"\nassert     valid_date(\"12-01-2000\") == True, \"Wrong result for date = '12-01-2000'\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     valid_date(\"03-31-2019\") is False, \"error in case of 3-31-2019\"\nassert     valid_date(\"03-32-2019\") is False, \"error in case of 3-32-2019\"\nassert     valid_date(\"04-31-2019\") is False, \"error in case of 4-31-2019\"\nassert     valid_date(\"04-30-2019\") is True, \"error in case of 4-30-2019\"\nassert     valid_date(\"02-29-2019\") is False, \"error in case of 2-29-2019\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     valid_date(\"12-08-2020\") == True\nassert     valid_date(\"12-32-2020\") == False\nassert     valid_date(\"15-06-2020\") == False\nassert     valid_date(\"06-02-2020\") == False\nassert     valid_date(\"01-31-2020\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     valid_date('02-28-2020') == False\nassert     valid_date('01-02-2020') == False\nassert     valid_date('04-31-2020') == False\nassert     valid_date('01-02-2020') == False\nassert     valid_date('12-02-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     valid_date(\"12-25-2020\") == True, \"Incorrect output for '12-25-2020'\"\nassert     valid_date(\"1-12-2020\") == False, \"Incorrect output for '1-12-2020'\"\nassert     valid_date(\"1-1-2020\") == False, \"Incorrect output for '1-1-2020'\"\nassert     valid_date(\"1-31-2020\") == False, \"Incorrect output for '1-31-2020'\"\nassert     valid_date(\"13-32-2020\") == False, \"Incorrect output for '13-32-2020'\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     valid_date('02-01-2020') == False\nassert     valid_date('02-29-2020') == False\nassert     valid_date('04-29-2020') == False\nassert     valid_date('02-12-2020') == False\nassert     valid_date('12-02-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     valid_date(\"01-15-2016\") == True\nassert     valid_date(\"13-15-2016\") == False\nassert     valid_date(\"1-31-2016\") == False\nassert     valid_date(\"12-31-2016\") == False\nassert     valid_date(\"01-31-2016\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     valid_date('01-30-2020') == False\nassert     valid_date('12-31-2020') == False\nassert     valid_date('12-29-2020') == False\nassert     valid_date('01-31-2020') == False\nassert     valid_date('02-29-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nprint('Ok')"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     split_words('Hello, world.') == ['Hello', 'world']\nassert     split_words('My name is Leandro.') == ['My', 'name', 'is', 'Leandro']\nassert     split_words('The fox jumped over the lazy dog.') == ['The', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\nassert     split_words('We are searching for such a parrot.') == ['We', 'are','searching', 'for','such', 'a', 'parrot']\nassert     split_words('Split the words of this text by commas.') == ['Split', 'the', 'words', 'of', 'this', 'text', 'by', 'commas']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     split_words('') == [], \"no whitespace should split into a list of empty strings\"\nassert     split_words(\"hello there\") == ['hello', 'there'], \"no whitespace should split into a list of length 2\"\nassert     split_words(\"hello,there\") == ['hello', 'there'], \"whitespace should split into a list of length 2\"\nassert     split_words(\"hello,there,hi\") == ['hello', 'there', 'hi'], \"whitespace should split into a list of length 3\"\nassert     split_words(\"hi there how are you today\") == ['hi', 'there', 'how', 'are', 'you', 'today'], \"no commas should split into a list of length 6\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     split_words(\"good morning, how are you today? I hope everything is going well.\") == ['good','morning', 'how', 'are', 'you', 'today', 'I', 'hope', 'everything', 'is', 'going', 'well', '.'], \"Wrong result for split_words('good morning, how are you today? I hope everything is going well.')\"\nassert     split_words(\"I hope it is going well.\") == ['I', 'hope', 'it', 'is', 'going', 'well', '.'], \"Wrong result for split_words('I hope it is going well.')\"\nassert     split_words(\"bob\") == ['bob'], \"Wrong result for split_words('bob')\"\nassert     split_words(\"bob, bob\") == ['bob', 'bob'], \"Wrong result for split_words('bob, bob')\"\nassert     split_words(\"\") == [''], \"Wrong result for split_words('')\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     split_words(\"Hello, World!\") == [\"Hello\", \"World!\"], \"Hello, World!\"\nassert     split_words(\"Do Androids Dream of Electric Sheep?\") == [\"Do\", \"Androids\", \"Dream\", \"of\", \"Electric\", \"Sheep?\", \"?\"], \"Do Androids Dream of Electric Sheep?\"\nassert     split_words(\"One, Two, Red, Blue, Hello, World, Seven\") == [\"One\", \"Two\", \"Red\", \"Blue\", \"Hello\", \"World\", \"Seven\"], \"One, Two, Red, Blue, Hello, World, Seven\"\nassert     split_words(\"Why, I never did!\") == [\"Why\", \"I\", \"never\", \"did\"], \"Why, I never did!\"\nprint(\"split_words() passed!\")\n\ndef longest_words(txt):\n    '''\n    Given a string of words, return the longest word(s). If there are two longest words, you should return the first one alphabetically\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     split_words(\"Hello world\") == [\"Hello\", \"world\"]\nassert     split_words(\"Hello, world\") == [\"Hello\", \"world\"]\nassert     split_words(\"hello, world\") == [\"hello\", \"world\"]\nassert     split_words(\"He1lo, Wor1d\") == [\"He1lo\", \"Wor1d\"]\n\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     split_words('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox jumps over the lazy dog.') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox jumps over the lazy dog.') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox jumps over the lazy dog.') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\ndef permutations_of_length_n(lst, n):\n    '''\n    Given a list, lst, of items, where each item is a list of a fixed length, find all possible permutations of the\n    length of the lists. You will only be given a single list of lists in which the sublists have the same length.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     split_words('') == []\nassert     split_words('abc') == ['abc']\nassert     split_words('Abc') == ['Abc']\nassert     split_words('ab c') == ['ab', 'c']\nassert     split_words('ab  c') == ['ab', 'c']\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([3, 2, 1]) == True\nassert     is_sorted([1, 2, 1]) == False\nassert     is_sorted([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_sorted([1,2,3,4,5,6]) == True\nassert     is_sorted([1,3,2,6,4,5]) == True\nassert     is_sorted([1,5,2,4,3,6]) == True\nassert     is_sorted([1,6,2,4,3,5]) == True\nassert     is_sorted([1,2,3,4,5,6]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_sorted([0, 1, 2, 3]) == True\nassert     is_sorted([2, 1, 0, 3]) == True\nassert     is_sorted([2, 2, 0, 3]) == False\nassert     is_sorted([0, 1, 2, 3, 4]) == True\nassert     is_sorted([0, 1, 2, 3, 3]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 2, 3, 3, 3]) == False\nassert     is_sorted([1, 2, 3, 3, 3]) == False\nassert     is_sorted([3, 2, 1, 0, -1, -2]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([1,3,2]) == False\nassert     is_sorted([1,3,3]) == False\nassert     is_sorted([3,3,3]) == True\nassert     is_sorted([4,3,3]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_sorted([])\nassert     is_sorted([3])\nassert     is_sorted([1,1])\nassert     not is_sorted([1,2,3])\nassert     is_sorted([1,3,5,8])\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([-1]) == False\nassert     is_sorted([1,1]) == True\nassert     is_sorted([1,1,1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([3, 2, 1]) == True\nassert     is_sorted([1, 3, 2]) == False\nassert     is_sorted([1, 2, -1]) == False\nassert     is_sorted([1, 2, 1]) == False\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (5, 7)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersection((1,3), (2, 4)) == \"NO\"\nassert     intersection((1,3), (3, 5)) == \"YES\"\nassert     intersection((5, 7), (3, 6)) == \"YES\"\nassert     intersection((5, 7), (3, 4)) == \"NO\"\nassert     intersection((7, 9), (2, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersection((0, 3), (1, 4)) == 'YES', \"Case #1:\\n\" \\\n    + \"Expected: YES\\n\" \\\n    + \"Actual:   \" + intersection((0, 3), (1, 4))\nassert     intersection((0, 3), (2, 4)) == 'NO', \"Case #2:\\n\" \\\n    + \"Expected: NO\\n\" \\\n    + \"Actual:   \" + intersection((0, 3), (2, 4))\nassert     intersection((0, 4), (2, 4)) == 'YES', \"Case #3:\\n\" \\\n    + \"Expected: YES\\n\" \\\n    + \"Actual:   \" + intersection((0, 4), (2, 4))\nassert     intersection((0, 4), (2, 5)) == 'NO', \"Case #4:\\n\" \\\n    + \"Expected: NO\\n\" \\\n    + \"Actual:   \" + intersection((0, 4), (2, 5))\nassert     intersection((0, 5), (2, 4)) == 'NO', \"Case #5:\\n\" \\\n    + \"Expected: NO\\n\" \\\n    + \"Actual:   \" + intersection((0, 5), (2, 4))\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\", \"Wrong output\"\nassert     intersection((1, 3), (3, 4)) == \"YES\", \"Wrong output\"\nassert     intersection((1, 2), (1, 2)) == \"YES\", \"Wrong output\"\nassert     intersection((1, 2), (2, 4)) == \"NO\", \"Wrong output\"\nassert     intersection((1, 4), (2, 3)) == \"NO\", \"Wrong output\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (3, 4)) == \"NO\"\nassert     intersection((2, 3), (1, 4)) == \"YES\"\nassert     intersection((2, 3), (3, 4)) == \"NO\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert intersection((1, 3), (2, 2)) == \"YES\"\nassert intersection((1, 3), (5, 8)) == \"NO\"\nassert intersection((1, 3), (3, 5)) == \"YES\"\nassert intersection((3, 5), (1, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     intersection((1, 2), (2, 3)) == \"NO\"\nassert intersection((1, 3), (2, 4)) == \"YES\"\nassert intersection((1, 3), (1, 3)) == \"YES\"\nassert intersection((1, 3), (1, 2)) == \"YES\"\nassert intersection((1, 3), (4, 5)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersection((1, 2), (1, 3)) == \"NO\"\nassert intersection((1, 2), (2, 3)) == \"YES\"\nassert intersection((1, 2), (1, 3)) == \"YES\"\nassert intersection((1, 2), (3, 4)) == \"NO\"\nassert intersection((1, 2), (2, 4)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 2)) == \"YES\"\nassert     intersection((1, 5), (2, 3)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((0, 10), (3, 5)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (1, 2) == intersection((1, 3), (2, 4))\nassert     (1, 4) == intersection((1, 3), (2, 4))\nassert     (1, 2) == intersection((1, 3), (2, 2))\nassert     (1, 2) == intersection((1, 3), (2, 1))\nassert     (1, 2) == intersection((1, 2), (2, 3))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prod_signs([1, 2, 3]) == 6\nassert     prod_signs([-1, 2, -3, 4]) == 8\nassert     prod_signs([]) == None\nassert     prod_signs([1]) == 1\nassert     prod_signs([-1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prod_signs([1, 2, 3]) == 20\nassert     prod_signs([1, -2, 3]) == 20\nassert     prod_signs([-1, 2, 3]) == 20\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prod_signs([1,2,3]) == (-6)\nassert     prod_signs([1,0]) == 0\nassert     prod_signs([-1,-2,-3]) == (-6)\nassert     prod_signs([-1,2,3]) == (-6)\nassert     prod_signs([1,2,0]) == (3)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prod_signs([1, -1, 1, -1, 1, 1]) == -10\nassert     prod_signs([-1, 2, -3, 4, 5, -6, 7, 8, 9, 10, 11, -12, 13, 14, 15]) == 9\nassert     prod_signs([]) is None\nassert     prod_signs([1, -1, 1, -1, 1, 1]) is None\nassert     prod_signs([1, -1, 1, -1, 1, 1, -1, 1]) == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (prod_signs([1,2,3]) == \n            (-1 + 1 + -1 + -1) *\n            (-1 + 1 + 1 + -1) *\n            (-1 + -1 + 1 + 1)\n        )\nassert     (prod_signs([1,2,-3]) == \n            (-1 + 1 + -1 + -1) *\n            (-1 + 1 + -1 + 1) *\n            (-1 + 1 + 1 + 1)\n        )\nassert     (prod_signs([]) == None)\nassert     (prod_signs([1,-2,3]) == None)\nassert     (prod_signs([1,1,1,1]) == None)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prod_signs([1,2,3]) == 9\nassert     prod_signs([-1,-2,3]) == 9\nassert     prod_signs([1,2,3,4]) == 16\nassert     prod_signs([1]) == 1\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prod_signs([1, 1, 1]) == 6\nassert     prod_signs([1, 1, -1]) == -1\nassert     prod_signs([-1, -1, -1]) == -3\nassert     prod_signs([]) is None\nassert     prod_signs([1, -1, 1]) is None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prod_signs([1, 2, 3, -4, 5]) == 5 * (-1) ** 4 * 1 ** 3\nassert     prod_signs([1, -2, 3, -4, 5]) == 5 * (-1) ** 0 * 1 ** 3\nassert     prod_signs([0, 0, 0, 0, 0]) == 0\nassert     prod_signs([1, 2, 3, 4, 5]) == 1 * (-1) ** 0 * 1 ** 5\nassert     prod_signs([1, 2, 3]) == None\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     minPath([[1,3,2],[1,3,2]], 3) == [1,2,3]\nassert     minPath([[1,2,3,4],[1,3,2,4],[1,2,3,4]], 4) == [1,3,4]\nassert     minPath([[1,2,3,4],[1,3,2,4],[1,2,3,4]], 5) == [1,3,4]\nassert     minPath([[1,2,3,4],[1,3,2,4],[1,2,3,4]], 6) == [1,2,3,4]\n\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     set(minPath([[1, 2, 3],\n                      [4, 5, 6],\n                      [7, 8, 9]], 3)) == {1, 2, 3, 6, 9}\nassert     set(minPath([[1, 2, 3, 4, 5],\n                      [6, 7, 8, 9, 10],\n                      [11, 12, 13, 14, 15],\n                      [16, 17, 18, 19, 20],\n                      [21, 22, 23, 24, 25]], 5)) == {1, 2, 3, 4, 5, 16, 21, 25}\nassert     set(minPath(\n        [[1, 2, 3, 4],\n         [5, 6, 7, 8],\n         [9, 10, 11, 12],\n         [13, 14, 15, 16]], 4)) == {1, 2, 3, 4, 8, 12, 16, 15}\nassert     set(minPath(\n        [[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9]], 3)) == {1, 2, 3, 6, 9}\nassert     set(minPath(\n        [[1, 2, 3, 4, 5],\n         [6, 7, 8, 9, 10],\n         [11, 12, 13, 14, 15],\n         [16, 17, 18, 19, 20],\n         [21, 22, 23, 24, 25]], 5)) == {1, 2, 3, 4, 5, 16, 21, 25}\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minPath([[0, 1], [1, 0]], 2) == [1, 0, 0, 1]\nassert     minPath([[1, 2], [2, 1]], 3) == [2, 1, 1, 2]\nassert     minPath([[1, 2, 3], [2, 1, 2], [3, 1, 2]], 4) == [2, 1, 1, 2]\nassert     minPath([[1, 2, 3, 4], [2, 1, 2, 3], [3, 1, 2, 3], [4, 1, 2, 3]], 4) == [2, 1, 1, 2]\nassert     minPath([[1, 2, 3, 4, 5], [2, 1, 2, 3, 4], [3, 1, 2, 3, 4], [4, 1, 2, 3, 4], [5, 1, 2, 3, 4]], 5) == [2, 1, 1, 2, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     minPath(\n    [[1, 3, 2],\n     [6, 2, 3],\n     [7, 4, 5]],\n    3\n    ) == [2, 3]\n\nassert     minPath(\n    [[1, 3, 5],\n     [7, 4, 5],\n     [3, 4, 5]],\n    3\n    ) == [5, 4]\n\nassert     minPath(\n    [[1, 3, 2, 4],\n     [6, 2, 3, 5],\n     [7, 4, 5, 8],\n     [4, 3, 1, 4]],\n    3\n    ) == [2, 3]"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (minPath([[1,3,1],[1,5,1],[4,2,1]], 2) == [1, 1, 4])\nassert     (minPath([[1,2,3],[4,5,6]], 1) == [1, 2])\nassert     (minPath([[7,3,8,1],[9,5,1,2],[4,6,1,2]], 2) == [1, 1, 7])\nassert     (minPath([[5,1,9,7],[3,4,6,8]], 3) == [3, 3, 6])\nassert     (minPath([[7,1,7,1,7,1],[1,6,1,6,1,6],[1,5,1,5,1,5],[1,4,1,4,1,4],[1,3,1,3,1,3]], 4) == [1, 1, 1, 1, 3])"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (minPath(\n                [[1,1,1,2],\n                 [1,2,2,2],\n                 [1,2,2,2],\n                 [1,2,2,2]],\n              2) == [1, 2, 2, 2, 2, 2, 2, 2])\n\nassert     (minPath(\n                [[1,1,1,2],\n                 [1,2,2,2],\n                 [1,2,2,2],\n                 [1,2,2,2]],\n              3) == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\nassert     (minPath(\n                [[1,1,1,2],\n                 [1,2,2,2],\n                 [1,2,2,2],\n                 [1,2,2,2]],\n              4) == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 3) == [1,3,6,9,11]\nassert     minPath([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 4) == [1,3,5,7,23,34,50]\nassert     minPath([[3,7,2,5,8],[4,6,1,9,10],[11,12,14,15,16]], 4) == [3,7,2,5,8]\nassert     minPath([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21]], 7) == [1,2,3,4,5,6,7]\nassert     minPath([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21]], 6) == [1,2,3,4,6,7]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2) == [1, 2, 3]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], 4) == [1, 2, 3, 4, 5]\nassert     minPath([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]], 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     tri(1) ==     3\nassert     tri(2) ==     2\nassert     tri(3) ==     3\nassert     tri(4) ==     4\nassert     tri(5) ==     8\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     tri(1) == [3]\nassert     tri(2) == [2, 1]\nassert     tri(4) == [3, 1, 1]\nassert     tri(5) == [3, 1, 1, 1, 1]\nassert     tri(7) == [3, 1, 1, 1, 1, 2, 1]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(3) == 3\nassert     tri(4) == 3 + (1 / 2) + (3 / 2)\nassert     tri(5) == 3 + (1 / 2) + (5 / 2) + (3 / 2)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     tri(1) == [1]\nassert     tri(2) == [1, 2]\nassert     tri(3) == [1, 2, 3]\nassert     tri(4) == [1, 2, 3, 4]\nassert     tri(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 3\nassert     tri(3) == 4\nassert     tri(4) == 8\nassert     tri(5) == 13\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n    tri(1) == 3\n    tri(2) == 1 + (2 / 2) = 2\n    tri(4) == 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     tri(2) == 2\nassert tri(4) == 3\nassert tri(3) == 8\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     digits(1234) == 3\nassert     digits(1234321) == 6\nassert     digits(0) == 0\nassert     digits(387420) == 0\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digits(123) == 2 \nassert     digits(987) == 2\nassert     digits(54321) == 0\nassert     digits(23) == 2\nassert     digits(1234) == 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     digits(45) == 9 \nassert digits(0) == 0\nassert digits(999) == 0\nassert digits(9876) == 0\nassert digits(1357) == 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     digits(10) == 0\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(19) == 0\nassert digits(16) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digits(345) == 3 * digits(45)\nassert     digits(345) == 3 * digits(34)\nassert     digits(345) == 3 * digits(25)\nassert     digits(345) == 3 * digits(15)\nassert     digits(345) == 3 * digits(5)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digits(12345) == 32\nassert digits(987) == 7\nassert digits(11) == 1\nassert digits(94411) == 12\nassert digits(32) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_nested('') == True, 'Empty string is a valid nested string.'\nassert     is_nested('[()]') == True, 'A nested string.'\nassert     is_nested('([{}])') == True, 'A nested string.'\nassert     is_nested('([{}])') == True, 'A nested string.'\nassert     is_nested('[()]') == True, 'A nested string.'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_nested('[[]]') == True, \"Error on case [[]].\"\nassert     is_nested('[[{}]]') == True, \"Error on case [[{}]].\"\nassert     is_nested('[[{}]][]') == True, \"Error on case [[{}]][].\"\nassert     is_nested('[[{}]][]()') == True, \"Error on case [[{}]][]().\"\nassert     is_nested('[[{}]]') == True, \"Error on case [[{}]].\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_nested(\"\") == True\nassert     is_nested(\"[]\") == True\nassert     is_nested(\"[[]()()]\") == True\nassert     is_nested(\"[[]()(]]\") == False\nassert     is_nested(\"[(])\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_nested(\"[][[[]]\") == True\nassert     is_nested(\"[][][]\") == True\nassert     is_nested(\"[][]\") == False\nassert     is_nested(\"[][]{}\") == False\nassert     is_nested(\"[][]()\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_nested('[[]]') == True\nassert     is_nested('[[[]]]') == True\nassert     is_nested('[[[[[]]]]]') == True\nassert     is_nested('[[[[[]]]]]') == True\nassert     is_nested('[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_nested('[()[]]') == True, 'fails'\nassert     is_nested('[(])') == False, 'fails'\nassert     is_nested('[[]]') == True, 'fails'\nassert     is_nested('[[[]]]') == True, 'fails'\nassert     is_nested('[([])]') == True, 'fails'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[]()') == True\nassert     is_nested('()[]{}[]()') == True\nassert     is_nested('()[(])') == False\nassert     is_nested('{[]}') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_nested(\"{}[]\") == True, \"Incorrect result\"\nassert     is_nested(\"{[]}\") == True, \"Incorrect result\"\nassert     is_nested(\"{}\") == False, \"Incorrect result\"\nassert     is_nested(\"{[}\") == False, \"Incorrect result\"\nassert     is_nested(\"{[}[]\") == True, \"Incorrect result\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_nested('[()]') == True, 'False'\nassert     is_nested('()()[]') == True, 'False'\nassert     is_nested('()[]()') == False, 'False'\nassert     is_nested('[([])]') == False, 'False'\nassert     is_nested('[])') == False, 'False'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_nested(\"[()()]\") == True, \"brackets are nested\"\nassert     is_nested(\"[(])\") == False, \"brackets are not nested\"\nassert     is_nested(\"((()\") == False, \"brackets are not balanced\"\nassert     is_nested(\"(((()]\") == False, \"brackets are not balanced\"\nassert     is_nested(\"[[]]\") == True, \"brackets are nested\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 385\nassert     sum_squares([1.5,2.1,3.2,4.3,5.4]) == 115.4\nassert     sum_squares([1.5,1.9,1.1,2.8,1.0]) == 48.4\n\ndef sum_squares_fast(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_squares([]) == 0, \"empty\"\nassert     sum_squares([1, 2, 3, 4]) == 3, \"full\"\nassert     sum_squares([2, 2, 2, 2, 2]) == 16, \"full\"\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 36, \"full\"\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 4850, \"full\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1, 2]) == 9\nassert     sum_squares([4, 5]) == 30\nassert     sum_squares([1, 2, 3]) == 36\nassert     sum_squares([1, 2, 3, 4]) == 50\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3]) == 13\nassert     sum_squares([2, 2, 2]) == 14\nassert     sum_squares([-5, -2, -1, 0, 1, 2]) == 26\n\n\ndef sum_squares_quick(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum(map(lambda x: int(x**2), lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1]) == 1\nassert     sum_squares([2, 3, 4]) == 1+4+9\nassert     sum_squares([5, 6, 7, 8]) == 36\nassert     sum_squares([-3, -4, -5, -6]) == (1+16+49+81)\nprint('Done! Go ahead and Check it now!')"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 29\nassert     sum_squares([]) == 0\nassert     sum_squares([-1, -2, -3, -4]) == 33\nassert     sum_squares([-1, -2, -3, -4, -5]) == 96\nprint(\"Success\""
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 30\nassert     sum_squares([-1, -2, -3, -4, -5]) == 30\nassert     sum_squares([1.2, 2.3, 3.4, 4.5, 5.6]) == 30\nassert     sum_squares([-1.2, -2.3, -3.4, -4.5, -5.6]) == 30\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\u201ca\u201d) == True\nassert     check_if_last_char_is_a_letter(\u201c\u201d) == False\nassert     check_if_last_char_is_a_letter(\u201cp\u201d) == False\nassert     check_if_last_char_is_a_letter(\u201cword \") == True\nassert     check_if_last_char_is_a_letter(\u201cword\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('A B12') == False\nassert     check_if_last_char_is_a_letter('PQR 12') == True\nassert     check_if_last_char_is_a_letter('PQR12') == False\nassert     check_if_last_char_is_a_letter('P 12') == False\nassert     check_if_last_char_is_a_letter('P1 12') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"z\") == True\nassert     check_if_last_char_is_a_letter(\"Python\") == False\nassert     check_if_last_char_is_a_letter(\"Python 3.0\") == False\nassert     check_if_last_char_is_a_letter(\"hello world\") == False\nassert     check_if_last_char_is_a_letter(\"\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm123456789\") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"qwertyuiopasdfghjklzxcvbnm123456789\") == True, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm123456789 \") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm123456789 \") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm123456789 \") == False, \"Fails\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('apple') == False, 'Failed'\nassert     check_if_last_char_is_a_letter('banana') == True, 'Failed'\nassert     check_if_last_char_is_a_letter('apple ban') == False, 'Failed'\nassert     check_if_last_char_is_a_letter('apple 5') == False, 'Failed'\nassert     check_if_last_char_is_a_letter('apple banana') == True, 'Failed'\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == False, \"Incorrect output: check_if_last_char_is_a_letter('hello') == True\"\nassert     check_if_last_char_is_a_letter('world') == False, \"Incorrect output: check_if_last_char_is_a_letter('world') == True\"\nassert     check_if_last_char_is_a_letter('my') == True, \"Incorrect output: check_if_last_char_is_a_letter('my') == False\"\nassert     check_if_last_char_is_a_letter('name') == False, \"Incorrect output: check_if_last_char_is_a_letter('name') == False\"\nassert     check_if_last_char_is_a_letter('123') == False, \"Incorrect output: check_if_last_char_is_a_letter('123') == False\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"string\") == False\nassert     check_if_last_char_is_a_letter(\"example.com\") == False\nassert     check_if_last_char_is_a_letter(\"example.com \") == False\nassert     check_if_last_char_is_a_letter(\"xyz.example.com\") == False\nassert     check_if_last_char_is_a_letter(\"example.comxyz\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"apple\") == False, \"Incorrect output\"\nassert     check_if_last_char_is_a_letter(\"apple pie\") == True, \"Incorrect output\"\nassert     check_if_last_char_is_a_letter(\"apple pi e\") == False, \"Incorrect output\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"banana\") == False, \"Wrong output for 'banana'\"\nassert     check_if_last_char_is_a_letter(\"pineapple\") == True, \"Wrong output for 'pineapple'\"\nassert     check_if_last_char_is_a_letter(\"bandana\") == False, \"Wrong output for 'bandana'\"\nassert     check_if_last_char_is_a_letter(\"pineapplebandana\") == False, \"Wrong output for 'pineapplebandana'\"\nassert     check_if_last_char_is_a_letter(\" \") == False, \"Wrong output for''\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     can_arrange([2, 3, 9, 2, 5]) == 2\nassert     can_arrange([3, 5, 5, 2, 9]) == 3\nassert     can_arrange([2, 3, 9, 2, 5, 6]) == 3\nassert     can_arrange([3, 5, 5, 2, 9, 6]) == 3\nassert     can_arrange([2, 3, 9, 2, 5, 6, 3]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     can_arrange([1, 1, 1, 2, 3, 5, 8, 13, 21]) == 5\nassert     can_arrange([1, 1, 1, 2, 3, 5, 8, 13, 21, 21]) == 8\nassert     can_arrange([1, 1, 1, 2, 3, 5, 8, 13, 21, 21, 21]) == -1\n\nprint('Success'"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     can_arrange([3,4,2,1]) == 2\nassert     can_arrange([1,2,4,3]) == -1\nassert     can_arrange([1,4,2,3]) == 2\nassert     can_arrange([3,2,4,1]) == -1\nassert     can_arrange([3,1,2,4]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     can_arrange(arr=[1, 2, 3, 3, 4]) == 2\nassert     can_arrange(arr=[1, 2, 3, 4, 3]) == 3\nassert     can_arrange(arr=[1, 2, 3, 3, 3]) == -1\n\nprint('Success'"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     can_arrange([3,4,2,5,6,7,8]) == 3\nassert     can_arrange([3,4,2,5,6,7,8,4]) == 8\nassert     can_arrange([3,4,2,5,6,7,8,4,7]) == 8\nassert     can_arrange([3,4,2,5,6,7,8,4,7,8]) == -1\nassert     can_arrange([3,4,2,5,6,7,8,4,7,8,4]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     can_arrange(None) == -1, 'None input'\nassert     can_arrange(['1', '3', '5', '7']) == 2, 'wrong output'\nassert     can_arrange(['1', '3', '5', '7', '9']) == -1, 'wrong output'\nassert     can_arrange([]) == -1, 'wrong output'\nassert     can_arrange([1]) == 0, 'wrong output'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # check the correctness of can_arrange\n    assert can_arrange([5,1,3,2,5]) == 2\n    assert can_arrange([3,4,5,1,2]) == -1\n    assert can_arrange([1,2,3]) == -1\n    "
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == 7\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 9\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 12\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     can_arrange([1,2,3,4,5]) == 3\nassert     can_arrange([5,4,3,2,1]) == 0\nassert     can_arrange([2,4,6,8,10]) == -1\nassert     can_arrange([1,2,3,4,4]) == -1\nassert     can_arrange([5,5,5,5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 3\nassert     can_arrange([3, 2, 1, 4, 5]) == 3\nassert     can_arrange([5, 4, 3, 2, 1]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1]) == 0\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-1, 1, 2, 3, 4]) == (-1, 4)\nassert     largest_smallest_integers([-1, -2, -3, -4]) == (-4, 1)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (None, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (None, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([1,2,3,4]) == (None, None)\nassert     largest_smallest_integers([1,3,4,2]) == (-1, 4)\nassert     largest_smallest_integers([0,3,4,2]) == (-1, 4)\nassert     largest_smallest_integers([5,7,8,9,1,2,3,4]) == (5, 1)\nassert     largest_smallest_integers([5,7,-8,-9,-1,2,3,4]) == (-9, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([-1, -3, -4, -2, -1]) == (-1, 1)\nassert     largest_smallest_integers([-5, -1, 0, 2, 3]) == (-5, 3)\nassert     largest_smallest_integers([0, 5, 3, -1, -4]) == (0, 5)\nassert     largest_smallest_integers([0, -5, -3, 1, 2]) == (-5, 1)\nassert     largest_smallest_integers([-1, 2, 3, 4, 5]) == (-1, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, -10, -20, 100, -2]) == (-2, 2)\nassert     largest_smallest_integers([0, 0, -1, 2]) == (0, 2)\nassert     largest_smallest_integers([-4, -6, -1, 0]) == (-1, None)\nassert     largest_smallest_integers([-4, 0, -1, 0]) == (-4, 0)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([0]) == (None, None)\nassert     largest_smallest_integers([-1, 0, 5, 3, -6, 8, 2]) == (8, 2)\nassert     largest_smallest_integers([-1, 0, 5, 3, 6, 8, 2]) == (None, 2)\nassert     largest_smallest_integers([-1, 0, -5, -3, 6, 8, 2]) == (-1, 8)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-1]) == (None, None)\nassert     largest_smallest_integers([2, 3, -5]) == (None, 2)\nassert     largest_smallest_integers([-2, -3, -5]) == (-3, 2)\nassert     largest_smallest_integers([-2, 5, 1, 2, 3, -5]) == (-2, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3]) == (None, None)\nassert     largest_smallest_integers([-1, 2, 3]) == (None, None)\nassert     largest_smallest_integers([-1, -2, -3]) == (-3, 1)\nassert     largest_smallest_integers([-1, 2, 3, 4, 5, 6]) == (None, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([0, 1, 2, 3, -4, -5]) == (-5, 1)\nassert largest_smallest_integers([0, 1, 2, 3, 4, 5]) == (None, 5)\nassert largest_smallest_integers([0, 1, 2, 3, 4]) == (None, None)\nassert largest_smallest_integers([-1, -2, -3, -4]) == (-1, 4)\nassert largest_smallest_integers([1, 2, 3, 4, 5]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([0, 1, 2, 3]) == (0, 3)\nassert     largest_smallest_integers([-10, 15, 20, -2, 1]) == (15, 1)\nassert     largest_smallest_integers([0]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([0, 0, 0]) == (0, 0)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5]) == (1, 5)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, 0]) == (-1, 0)\nassert     largest_smallest_integers([0, -2, -3, -4, -5]) == (0, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 0]) == (1, 5)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     compare_one(3, 3) ==     3,'should be 3'\nassert     compare_one(3, 3.0) ==     3,'should be 3'\nassert     compare_one(3, '3') ==     3,'should be 3'\nassert     compare_one('3', 3) ==     3,'should be 3'\nassert     compare_one('3', 3.0) ==     3.0,'should be 3.0'\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (compare_one(12, -345) == 12)\nassert     (compare_one(-234, 2.0) == -234)\nassert     (compare_one(\"12\", -345) == -345)\nassert     (compare_one(-34, -12) == -12)\nassert     (compare_one(\"-34\", \"12\") == None)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     compare_one(5, 5.0) == 5,'string compare to float'\nassert     compare_one(5, '5.0') == 5,'string compare to float'\nassert     compare_one(5.0, 5) == 5, 'float compare to string'\nassert     compare_one(5.0, '5') == 5, 'float compare to string'\nassert     compare_one(5, 5) == 5, 'integers compare equal'\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef compare_two(a, b, c):\n    \"\"\"\n    Create a function that takes in integers, floats, strings, or strings\n    representing real numbers, and returns the largest variable in its\n    given variable type. Return None if all of the variables are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     compare_one(1, 2) == None, 'Expected: None'\nassert     compare_one(1, 1) == 1, 'Expected: 1'\nassert     compare_one(1, 2.0) == 2.0, 'Expected: 2.0'\nassert     compare_one(1, '1') == 1, 'Expected: 1'\nassert     compare_one('1', '2') == 2, 'Expected: 2'\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     None == compare_one(None, None), \\\n        \"Expected None but returned \" + str(compare_one(None, None))\nassert     None == compare_one(None, 4), \\\n        \"Expected None but returned \" + str(compare_one(None, 4))\nassert     None == compare_one(4, None), \\\n        \"Expected None but returned \" + str(compare_one(4, None))\nassert     None == compare_one(4, 4), \\\n        \"Expected None but returned \" + str(compare_one(4, 4))\nassert     None == compare_one(\"5\", 4), \\\n        \"Expected None but returned \" + str(compare_one(\"5\", 4))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1.5, 2.3) == 2.3\nassert     compare_one('1', '2') == 2\nassert     compare_one('1.5', '2.3') == 2.3\nassert     compare_one('1', '1') == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(12) == True, 'test failed for 12'\nassert     is_equal_to_sum_even(2) == False, 'test failed for 2'\nassert     is_equal_to_sum_even(3) == False, 'test failed for 3'\nassert     is_equal_to_sum_even(4) == False, 'test failed for 4'\nassert     is_equal_to_sum_even(5) == False, 'test failed for 5'\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(15) == False\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(14) == True\nassert     is_equal_to_sum_even(15) == False\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(1) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == False\nassert     is_equal_to_sum_even(9) == False\nassert     is_equal_to_sum_even(15) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(10) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(-12) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(13) == False\nassert     is_equal_to_sum_even(54) == True\nassert     is_equal_to_sum_even(35) == False\nassert     is_equal_to_sum_even(1235) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(15) == False\nassert     is_equal_to_sum_even(18) == False\n\nprint(\"Congratulations! All tests passed\")"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(special_factorial(5)"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef factorial(n):\n    \"\"\"Returns the factorial of n\"\"\"\n    pass\n\ndef brazilian_factorial(n):\n    \"\"\"Returns the brazilian factorial of n\"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n):\n    \"\"\"The function will receive an integer as input and should return true\n    if the number received is prime and false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1, 'factorial of 0 is 1'\nassert     special_factorial(1) == 1, 'factorial of 1 is 1'\nassert     special_factorial(2) == 2, 'factorial of 2 is 2'\nassert     special_factorial(3) == 6, 'factorial of 3 is 6'\nassert     special_factorial(4) == 24, 'factorial of 4 is 24'\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fix_spaces('The quick brown fox') == 'The_quick_brown_fox', \\\n        'wrong result for fix_spaces(\"The quick brown fox\")'\nassert     fix_spaces('The  brown fox') == 'The__brown_fox', \\\n        'wrong result for fix_spaces(\"The  brown fox\")'\nassert     fix_spaces('The   brown fox') == 'The___brown_fox', \\\n        'wrong result for fix_spaces(\"The   brown fox\")'\nassert     fix_spaces('The    brown fox') == 'The____brown_fox', \\\n        'wrong result for fix_spaces(\"The    brown fox\")'\nassert     fix_spaces('The     brown fox') == 'The_____brown_fox', \\\n        'wrong result for fix_spaces(\"The     brown fox\")'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint(\"All tests passed!\""
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"this is a test\") == \"this-is-a-test\"\nassert     fix_spaces(\"this  is  a test\") == \"this-is-a-test\"\nassert     fix_spaces(\"this is a test\") == \"this-is-a-test\"\nassert     fix_spaces(\"this  is  a   test\") == \"this-is-a-test\"\nassert     fix_spaces(\"this is a test\") == \"this-is-a-test\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('hello  world') == 'hello_-_world'\nassert     fix_spaces('hello   world') == 'hello_-world'\nassert     fix_spaces('hello    world') == 'hello_-_world'\nassert     fix_spaces('hello       world') == 'hello_-_world'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(fix_spaces('a b c  d'))\nprint(fix_spaces('a b c   d'))\nprint(fix_spaces('a b c  d  '))\nprint(fix_spaces('a b  c d'))\nprint(fix_spaces('a b   c d  '))\nprint(fix_spaces('a   b   c   d  '))\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fix_spaces(\"Hello World\") == \"Hello_World\"\nassert     fix_spaces(\"He   llo\") == \"He-llo\"\nassert     fix_spaces(\"   Hello\") == \"___Hello\"\nassert     fix_spaces(\"Helloo\") == \"Helloo\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     file_name_check('this.is.a.valid.file.name') == 'Yes', 'Wrong result'\nassert     file_name_check('this.is.an.invalid.file.name') == 'No', 'Wrong result'\nassert     file_name_check('file.name') == 'Yes', 'Wrong result'\nassert     file_name_check('name.txt') == 'Yes', 'Wrong result'\nassert     file_name_check('name.exe') == 'Yes', 'Wrong result'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     file_name_check('img.jpg')     == 'Yes'\nassert     file_name_check('F1.C.I.T')     == 'Yes'\nassert     file_name_check('F.C.I.T')     == 'No'\nassert     file_name_check('F.C.I.T.mp3')     == 'No'\nassert     file_name_check('F.C.I.T.')     == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     file_name_check('f.txt') == 'Yes'\nassert     file_name_check('F.txt') == 'Yes'\nassert     file_name_check('F.TXT') == 'Yes'\nassert     file_name_check('file1.txt') == 'Yes'\nassert     file_name_check('file1') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     file_name_check('Hello.txt') == 'Yes'\nassert     file_name_check('Hell0.txt') == 'Yes'\nassert     file_name_check('hello.txt') == 'Yes'\nassert     file_name_check('heLL0.txt') == 'Yes'\nassert     file_name_check('hell0.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nprint(file_name_check('Hello.txt'))\nassert file_name_check('Hello.txt') == 'Yes'\nassert file_name_check('Hllo.txt') == 'No'\nassert file_name_check('hello.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     file_name_check(\"file.exe\") == 'No', \"error\"\nassert     file_name_check(\"file.txt\") == 'Yes', \"error\"\nassert     file_name_check(\"file.dll\") == 'No', \"error\"\nassert     file_name_check(\"file\") == 'No', \"error\"\nassert     file_name_check(\"file..txt\") == 'No', \"error\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     file_name_check('file1.txt') == 'No', \\\n        'check: file_name_check: incorrect result for \\'file1.txt\\''\nassert     file_name_check('file1.txt.') == 'No', \\\n        'check: file_name_check: incorrect result for \\'file1.txt.\\''\nassert     file_name_check('file.exe') == 'No', \\\n        'check: file_name_check: incorrect result for \\'file.exe\\''\nassert     file_name_check('file.exe.') == 'No', \\\n        'check: file_name_check: incorrect result for \\'file.exe.\\''\nassert     file_name_check('file.exe.dll') == 'Yes', \\\n        'check: file_name_check: incorrect result for \\'file.exe.dll\\''\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     file_name_check('one.txt') == 'Yes', 'Wrong answer'\nassert     file_name_check('one.exe') == 'No', 'Wrong answer'\nassert     file_name_check('one.dll') == 'No', 'Wrong answer'\nassert     file_name_check('two.txt') == 'No', 'Wrong answer'\nassert     file_name_check('two.exe') == 'Yes', 'Wrong answer'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     file_name_check('test.txt') == 'No' \nassert     file_name_check('test.exe') == 'No' \nassert     file_name_check('test.dll') == 'No' \nassert     file_name_check('test_19.txt') == 'No' \nassert     file_name_check('a.exe') == 'Yes' \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     file_name_check('abc0.exe') == 'Yes'\nassert     file_name_check('abc1.exe') == 'Yes'\nassert     file_name_check('abc1.txt') == 'Yes'\nassert     file_name_check('abc2.dll') == 'Yes'\nassert     file_name_check('abc3.txt') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 0\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 320\nassert     sum_squares([5, 2, 3, 4, 1]) == 400\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) ==     55\nassert     sum_squares([2, 3, 4, 5, 6]) ==     81\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) ==     27 * 9\n\ndef product_of_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the product of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([3, 4, 5]) == 36\nassert     sum_squares([1, 2, 3]) == 0\nassert     sum_squares([3, 4, 5]) == 36\nassert     sum_squares([1, 2, 3]) == 0\nassert     sum_squares([1, 2, 3]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30, \"Should be 30\"\nassert     sum_squares([1,2,3]) == 12, \"Should be 12\"\n\ndef sum_squares2(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef sum_cubes(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n\n\n\ndef test_sum_cubes():\n    \"\"\"\n    This function will call sum_cubes function and \n    check if the output is correct or not.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\n        \"Are you kidding me? I haven't told you that I am kidding you.\") == \"I am kidding you.\"\nassert     words_in_sentence(\n        \"Are you kidding me? I have told you that I am kidding you.\") == \"Are you kidding me?\"\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(words_in_sentence(\"Are you kidding me? I haven't told you that I am kidding you.\"))\n\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    "
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"this is a sentence\") == 'is a a'\nassert     words_in_sentence(\"this is a not a sentence\") == 'is a not a'\nassert     words_in_sentence(\"this is a not a sentence\") == 'is a not a'\nassert     words_in_sentence(\"this is a not a sentence\") == 'is a not a'\nassert     words_in_sentence(\"this is a not a sentence\") == 'is a not a'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"primenumbersisprime\") == \"isprime isprime\", \\\n    \"wrong result for words_in_sentence('primenumbersisprime')\"\nassert     words_in_sentence(\"primenumbersareprime\") == \"areprime areprime\", \\\n    \"wrong result for words_in_sentence('primenumbersareprime')\"\nassert     words_in_sentence(\"primenumbersareprimeareprime\") == \"areprime areprime areprime\", \\\n    \"wrong result for words_in_sentence('primenumbersareprimeareprime')\"\nassert     words_in_sentence(\"primenumbersarenumbersareprimeareprime\") == \"areprime areprime areprime areprime\", \\\n    \"wrong result for words_in_sentence('primenumbersarenumbersareprimeareprime')\"\nassert     words_in_sentence(\"primenumbersarenotprimenumbers\") == \"arenotprimenumbers arenotprimenumbers\", \\\n    \"wrong result for words_in_sentence('primenumbersarenotprimenumbers')\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"Hello my name is Linda\") == \"Hello my name is Linda\", 'wrong result'\nassert     words_in_sentence(\"Do I have to turn it in now?\") == \"Do I have to turn it in now?\", 'wrong result'\nassert     words_in_sentence(\"I'm ready to go\") == \"I'm ready to go\", 'wrong result'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"Hi i am a student\") == \"Hi student\"\nassert     words_in_sentence(\"Hi i am a teacher\") == \"Hi teacher\"\nassert     words_in_sentence(\"Hi i am a researcher\") == \"Hi researcher\"\nassert     words_in_sentence(\"Hi i am a cat\") == \"Hi cat\"\nassert     words_in_sentence(\"Hi i am a dog\") == \"Hi dog\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"I love apples, apple are my favorite fruit\") == \"apple, fruit\", \"apple, fruit\"\nassert     words_in_sentence(\"Loves apples, apple are my favorite fruit\") == \"apple, fruit\", \"apple, fruit\"\nassert     words_in_sentence(\"I love apples, apple are my favorite fruit\") == \"apple, fruit\", \"apple, fruit\"\nassert     words_in_sentence(\"Apple are my favorite fruit\") == \"apple, fruit\", \"apple, fruit\"\nassert     words_in_sentence(\"Apple are my favorite fruit, apple are my favorite fruit\") == \"apple, fruit\", \"apple, fruit\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"I'm eating a burger!\") == 'burg! burger I'\nassert words_in_sentence(\"Suck it up, little chicken\") == 'little chicken'\nassert words_in_sentence(\"How about some cake?\") == 'cake'\nassert words_in_sentence(\"Hello world! It's me, Arthur!\") == 'world! me it'\nassert words_in_sentence(\"Are you still there?\") == 'are still"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"I like cats and dogs\") == \"like cat dog\"\nassert     words_in_sentence(\"I like dogs and cats\") == \"like dog cat\""
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_in_sentence('Prime number arithmetic') == 'Prime number arithmetic'\nassert     words_in_sentence('hello my name is Peter') == 'hello my name is Peter'\nassert     words_in_sentence('hello my name is Peter I am very cute') == 'hello my name is Peter I am very cute'\nassert     words_in_sentence('hello my name is Peter I am very cute') == 'hello my name is Peter I am very cute'\nassert     words_in_sentence('hello my name is Peter I am very cute I love to play football') == 'hello my name is Peter I am very cute I love to play football'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (simplify(\"6/8\", \"1/2\")) == False\nassert     (simplify(\"6/8\", \"2/4\")) == True\nassert     (simplify(\"3/5\", \"1/2\")) == False\nassert     (simplify(\"3/5\", \"1/4\")) == True\nassert     (simplify(\"1/3\", \"1/6\")) == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     simplify('2/3', '1/3') == '2/3'\nassert     simplify('2/3', '2/3') == '1'\nassert     simplify('2/3', '2/4') == '1/2'\nassert     simplify('1/3', '1/3') == '1'\nassert     simplify('1/3', '2/3') == '2/3'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     not simplify('6/7', '7/3')\nassert simplify('1/6', '6/6')\nassert     simplify('1/3', '6/6')\nassert not simplify('7/10', '10/3')\nassert simplify('6/6', '1/3')\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     simplify('1/3', '1') == '1/3'\nassert     simplify('1/3', '2') == '3/2'\nassert     simplify('1/3', '3') == '1/3'\nassert     simplify('1/3', '4') == '4/3'\nassert     simplify('1/3', '5') == '5/3'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     simplify(\"5/10\", \"1/3\") is False\nassert     simplify(\"3/10\", \"3/10\") is True\nassert     simplify(\"5/5\", \"1/3\") is True\nassert     simplify(\"3/10\", \"3/5\") is False\nassert     simplify(\"6/8\", \"2/3\") is True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     simplify(\"1/2\", \"3/4\") == False, \"Wrong answer\"\nassert     simplify(\"3/2\", \"3/4\") == True, \"Wrong answer\"\nassert     simplify(\"4/4\", \"3/2\") == True, \"Wrong answer\"\nassert     simplify(\"1/2\", \"1/2\") == True, \"Wrong answer\"\nassert     simplify(\"1/2\", \"1/3\") == False, \"Wrong answer\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     simplify(\"1/2\", \"1/3\") == True\nassert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"2/3\", \"1/3\") == False\nassert     simplify(\"2/3\", \"2/3\") == True\nassert     simplify(\"4/6\", \"1/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (simplify('3/8', '5/4') == False), \"3/8 * 5/4 = 15/8\"\nassert     (simplify('3/8', '1/4') == True), \"3/8 * 1/4 = 1/8\"\nassert     (simplify('4/3', '1/3') == False), \"4/3 * 1/3 = 1\"\nassert     (simplify('2/4', '2/3') == True), \"2/4 * 2/3 = 2/3\"\nprint(\"pass\")\n\ndef factorial(n):\n    \"\"\"Your task is to implement a function that calculates the factorial\n    of a given number n. The function returns the factorial of n.\n    Note: 0! = 1.\"\"\"\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (simplify(1, 3) == True)\nassert     (simplify(2, 3) == False)\nassert     (simplify('4/7', '2/3') == True)\nassert     (simplify('4/7', '1/3') == False)\nassert     (simplify('1/5', '1/3') == True)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]\nassert     order_by_points([1,2,4,3,5]) == [1,2,3,4,5]\nassert     order_by_points([3,2,6,5,4]) == [3,2,6,5,4]\nassert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]\nassert     order_by_points([0,2,3,4,5]) == [0,2,3,4,5]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nprint(order_by_points([7, 10, 2, 9, 13, 4]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     order_by_points([42, 38, 16, 12, 6, 5, 5, 6, 3, 42, 46]) == \\\n    [42, 38, 16, 12, 6, 5, 5, 6, 3, 42, 46]\nassert     order_by_points([23, 42, 43, 39, 10, 14, 19]) == \\\n    [10, 14, 19, 23, 39, 42, 43]\nassert     order_by_points([9, 9, 9, 9, 9, 9, 9]) == \\\n    [9, 9, 9, 9, 9, 9, 9]\nassert     order_by_points([]) == []\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]\nassert     order_by_points([10, 2, 36, 9, 5]) == [2, 5, 10, 9, 36]\nassert     order_by_points([0, 9, 2, 8, 5, 8]) == [0, 2, 5, 8, 9, 8]\n\n\ndef order_by_points_custom(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4] == order_by_points([25, 7, 9, 6, 4])\nassert     [1, 4, 3, 2, 5, 7] == order_by_points([25, 9, 5, 7, 3, 4])\n\ndef top_k_frequent_words(text, k):\n    \"\"\"\n    You are given an array of strings words and a string chars.\n    Return the list of all the words that can be formed \n    by combining any number of chars from chars.\n    You may return the answer in any order.\n    Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\n    Output: [\"cat\",\"hat\",\"tree\"]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     order_by_points([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 4, 3, 5]\nassert     order_by_points([5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5]\nassert     order_by_points([3, 4, 1, 2, 1, 0]) == [0, 1, 1, 2, 3, 4]\nassert     order_by_points([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 6, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     order_by_points([0, 0, 0]) == [0, 0, 0]\nassert     order_by_points([9, 2, 1, 8, 5, 2, 3, 5, 1]) == [1, 9, 2, 2, 8, 2, 5, 5, 3]\nassert     order_by_points([4, 5, 0, 1]) == [0, 4, 5, 1]\n\ndef order_by_points_better(nums):\n    \"\"\"\n    Better solution\n    \"\"\"\n    nums_dict = {}\n    for i, num in enumerate(nums):\n        s = sum(map(int, str(num)))\n        if s in nums_dict:\n            nums_dict[s].append(i)\n        else:\n            nums_dict[s] = [i]\n    nums_dict = dict(sorted(nums_dict.items()))\n    return [nums[i] for x in nums_dict.values() for i in x]\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10,11]) == 5\nassert     specialFilter([1,3,5,7,9]) == 5\nassert     specialFilter([1,3,5,7,9,11,12,13,14]) == 5\nassert     specialFilter([11,12,13,14]) == 4\nassert     specialFilter([1,3,5,7,9,11,13,15]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0, \"incorrect output for specialFilter([1,2,3,4,5,6,7,8,9,10])\"\nassert     specialFilter([1,3,5,7,9]) == 3, \"incorrect output for specialFilter([1,3,5,7,9])\"\nassert     specialFilter([1,3,5,7,9,10]) == 3, \"incorrect output for specialFilter([1,3,5,7,9,10])\"\nassert     specialFilter([1,3,5,7,9,10,11]) == 2, \"incorrect output for specialFilter([1,3,5,7,9,10,11])\"\nassert     specialFilter([1,3,5,7,9,10,11,12,13]) == 3, \"incorrect output for specialFilter([1,3,5,7,9,10,11,12,13])\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9]) == 3\nassert     specialFilter([1,2,3,4,5,6,7,8,10]) == 0\nassert     specialFilter([1,2,3,4,5,6,7,8,11]) == 4\n\ndef specialFilter1(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 2, 5, 8, 9, 12]) == 2\nassert     specialFilter([1, 5, 3, 8, 9, 10, 19]) == 6\nassert     specialFilter([11, 13, 14, 15, 16, 17, 18, 19]) == 4\nassert     specialFilter([5, 6, 9, 8, 7, 10, 11, 12]) == 2\nassert     specialFilter([3, 5, 6, 9, 8, 7, 10, 11, 12]) == 2\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     specialFilter([2, 7, 9, 5, 7, 9, 1, 3]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 6\nassert     specialFilter([7, 11, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 10\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     specialFilter([12, 345, 2, 6, 7896]) == 3\nassert     specialFilter([13, 5, 6, 7896, 19]) == 2\nassert     specialFilter([]) == 0\nassert     specialFilter([12, 5, 6, 7896]) == 1\nassert     specialFilter([12, 345, 2, 6, 7896, 19, 3, 5]) == 4\nprint('Check completed')"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 11]) == 6\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 11, 11]) == 7\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     specialFilter([12, 345, 67, 89, 909]) == 2, \"Should be 2\"\nassert     specialFilter([12, 345, 0, 89, 909]) == 4, \"Should be 4\"\nassert     specialFilter([0]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     specialFilter([19, 31, 42, 9, 19, 6, 25, 32, 33, 8]) == 4\nassert     specialFilter([10, 1, 3, 5, 7, 9]) == 3\nassert     specialFilter([11, 12, 13, 19, 20, 21]) == 6\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 13\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 14\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nprint(get_max_triples(1))\nprint(get_max_triples(2))\nprint(get_max_triples(3))\nprint(get_max_triples(4))\nprint(get_max_triples(5))"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_max_triples(3) == 3, \"Incorrect\"\nassert     get_max_triples(1) == 0, \"Incorrect\"\nassert     get_max_triples(2) == 2, \"Incorrect\"\nassert     get_max_triples(5) == 4, \"Incorrect\"\nassert     get_max_triples(6) == 5, \"Incorrect\"\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 4\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_max_triples(5) == 5\nassert     get_max_triples(3) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(6) == 7\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus'), 'error'\nassert     bf('Mercury', 'Earth') == ('Mercury', 'Earth'), 'error'\nassert     bf('Mercury', 'Mars') == ('Mars',), 'error'\nassert     bf('Earth', 'Jupiter') == ('Jupiter',), 'error'\nassert     bf('Mars', 'Pluto') == (), 'error'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Jupiter') == ('Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Jupiter') == ('Earth', 'Mars')\nassert     bf('Earth', 'Neptune') == ('Earth',)\nassert     bf('Earth', 'Mercury') == ()\nassert     bf('Mercury', 'Neptune') == ('Venus', 'Earth', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Earth') == ('Venus', 'Mars')\nassert     bf('Earth', 'Neptune') == ('Jupiter', 'Saturn')\nassert     bf('Earth', 'Uranus') == ('Neptune', 'Jupiter')\nassert     bf('Earth', 'Mercury') == ('Venus', 'Mars')\nassert     bf('Mercury', 'Uranus') == ('Venus', 'Earth')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     bf('mercury', 'jupiter') == ('jupiter','saturn', 'uranus', 'neptune')\nassert     bf('earth', 'pluto') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('earth', 'earth') == ()\nassert     bf('earth','mercury') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('mercury','mercury') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Earth') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert bf('Earth', 'Mercury') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert bf('Earth', 'Mars') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert bf('Mars', 'Earth') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert bf('Mercury', 'Neptune') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars') \nassert     bf('Earth', 'Neptune') == ('Neptune', 'Uranus', 'Saturn', 'Jupiter', 'Mars')\nassert     bf('Earth', 'Jupiter') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Mercury') == ('Mercury', 'Venus', 'Earth')\nassert     bf('Mars', 'Jupiter') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     bf('Venus', 'Earth') == ('Venus', 'Mercury', 'Mars'), 'error'\nassert     bf('Earth', 'Jupiter') == ('Earth', 'Mercury', 'Mars', 'Saturn', 'Uranus', 'Neptune'), 'error'\nassert     bf('Earth', 'Uranus') == ('Earth', 'Mercury', 'Mars', 'Jupiter', 'Saturn'), 'error'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     bf('MERCURY', 'EARTH') == ('EARTH', 'MERCURY')\nassert     bf('EARTH', 'MERCURY') == ('EARTH', 'MERCURY')\nassert     bf('EARTH', 'MERCURY') == ('EARTH', 'MERCURY')\nassert     bf('MERCURY', 'EARTH') == ('EARTH', 'MERCURY')\nassert     bf('MERCURY', 'MERCURY') == ('MERCURY', 'MERCURY')\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum(['ab', 'cd', 'efg', 'a', 'a']) == ['a', 'a', 'ab', 'cd', 'efg']\nassert     sorted_list_sum(['ab', 'cd', 'efg', 'a']) == ['a', 'ab', 'cd', 'efg']\nassert     sorted_list_sum(['ab', 'cd', 'efg', 'a', 'aaa', 'aaa']) == ['a', 'ab', 'cd', 'efg', 'aaa']\nassert     sorted_list_sum(['ab', 'cd', 'efg', 'a', 'aaa', 'aaa', 'ab', 'efg', 'aba']) == ['a', 'ab', 'ab', 'aba', 'aaa', 'efg']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['abc', '', 'xyz', '1234']) == ['abc', 'xyz', '1234']\nassert sorted_list_sum(['a', 'abc', '', '1234', 'bcd', 'ab']) == ['1234', 'abc', 'a', 'bcd', 'ab']\nassert sorted_list_sum(['abc', '12', 'ab', 'z', '12', '']) == ['12', 'abc', 'ab', 'z', '12']\nassert sorted_list_sum([]) == []\nassert sorted_list_sum(['ab', 'a', 'a']) == ['a']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"jack\", \"jill\", \"march\", \"rose\"]) == ['jill', 'jack','march']\nassert     sorted_list_sum([\"cat\", \"dog\", \"doy\", \"dace\"]) == ['cat', 'dog', 'dace']\nassert     sorted_list_sum([\"jack\", \"jill\", \"march\", \"rose\", \"rose\"]) == ['jack', 'jill','march', 'rose']\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"hello\", \"bob\", \"Hola\", \"world\"]) == [ \"hello\", \"bob\", \"world\"]\nassert     sorted_list_sum([\"hello\", \"hilda\", \"hi\", \"world\"]) == [\"hello\", \"hilda\", \"hi\"]\nassert     sorted_list_sum([\"hello\", \"ho\", \"world\"]) == [\"hello\", \"ho\", \"world\"]\nassert     sorted_list_sum([\"hello\", \"ho\", \"world\"]) == [\"hello\", \"ho\", \"world\"]\nassert     sorted_list_sum([\"hello\", \"bob\", \"hi\", \"world\"]) == [\"bob\", \"hello\", \"hi\", \"world\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([\"pra\"]) == [\"pra\"]\nassert     sorted_list_sum([\"pra\", \"ra\"]) == [\"ra\"]\nassert     sorted_list_sum([\"pra\", \"ra\", \"raa\"]) == [\"ra\", \"raa\"]\nassert     sorted_list_sum([\"pra\", \"ra\", \"raa\", \"raa\", \"aaa\"]) == [\"ra\", \"raa\", \"raa\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['abb', 'bb', 'a', 'b']) == \\\n        ['a', 'b'], 'incorrect'\nassert     sorted_list_sum(['a', 'a', 'bb', 'a', 'bb', 'bb']) == \\\n        ['a', 'a', 'bb', 'bb'], 'incorrect'\nassert     sorted_list_sum(['a', 'bb', 'bb', 'b', 'b', 'a']) == \\\n        ['a', 'bb', 'bb', 'b', 'b'], 'incorrect'\nassert     sorted_list_sum(['abb', 'a', 'b']) == \\\n        ['a', 'b'], 'incorrect'\nassert     sorted_list_sum(['', 'a', 'b']) == \\\n        ['a', 'b'], 'incorrect'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sorted_list_sum([\"abc\", \"cd\", \"a\"]) == sorted([\"abc\", \"cd\"])\nassert     sorted_list_sum([\"ab\", \"cde\", \"cf\", \"c\"]) == sorted([\"ab\", \"cde\"])\nassert     sorted_list_sum([\"abc\", \"de\", \"cf\"]) == sorted([\"abc\", \"de\"])\nassert     sorted_list_sum([\"abc\", \"de\", \"ab\", \"cd\", \"ef\", \"c\"]) == sorted([\"abc\", \"de\", \"cd\"])\n\ndef length_of_strings(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    and returns the sorted list of strings with the same length,\n    from shortest to the longest.\n    If two strings have the same length, sort the list by alphabetical order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"a\", \"aa\", \"acd\", \"bc\", \"b\"]) == ['acd', 'bc', 'a', 'aa']\nassert sorted_list_sum([\"a\", \"a\", \"b\", \"a\", \"c\"]) == ['a', 'a', 'a', 'b', 'c']\nassert sorted_list_sum([\"c\", \"bc\", \"b\", \"a\", \"c\"]) == ['bc', 'b', 'c', 'a', 'c']\nassert sorted_list_sum([\"c\", \"c\", \"b\", \"a\", \"c\"]) == ['c', 'c', 'b', 'a', 'c']\nassert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\"]) == ['a', 'a', 'a', 'a', 'a']\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(13, 1, 3) == 1\n\nprint(\"Correct output\")\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     x_or_y(5, \"a\", \"b\") == \"a\"\nassert     x_or_y(7, \"a\", \"b\") == \"b\"\n\nprint(\"Correct!\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     x_or_y(11, 1, 2) == 1\nassert     x_or_y(32, 4, 8) == 8\nassert     x_or_y(33, 5, 8) == 5\nassert     x_or_y(13, 9, 12) == 9\nassert     x_or_y(11, 12, 4) == 12\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     x_or_y(2, 2, 2) == 2, \"Wrong output\"\nassert     x_or_y(4, 4, 4) == 4, \"Wrong output\"\nassert     x_or_y(5, 5, 5) == 5, \"Wrong output\"\nassert     x_or_y(6, 6, 6) == 6, \"Wrong output\"\nassert     x_or_y(7, 7, 7) == 7, \"Wrong output\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     x_or_y(2, 2, 3) == 2\nassert     x_or_y(3, 2, 2) == 3\nassert     x_or_y(5, 2, 2) == 2\nassert     x_or_y(3, 2, 2) == 3\nassert     x_or_y(5, 5, 5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     x_or_y(2, 2, 3) == 2\nassert     x_or_y(5, 5, 5) == 5\nassert     x_or_y(5, 10, 5) == 10\nassert     x_or_y(6, 6, 6) == 6\nassert     x_or_y(7, 7, 7) == 7\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     double_the_difference([1, 2, 3]) == 1\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, -3, 2, 3]) == 3\nassert     double_the_difference([3, -3, 1]) == 0\nassert     double_the_difference([5, -2, 4]) == 16\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, 2, 3])     == 16\nassert     double_the_difference([1, -2, 3])     == 9\nassert     double_the_difference([])         == 0\nassert     double_the_difference([0.1, 2.3, -3.5])     == 0\nassert     double_the_difference([1, 2, 3, 4, 5])     == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \ndouble_the_difference([1,2,3,4,5]) ==\ndouble_the_difference([1,2,3,4,5,6]) ==\ndouble_the_difference([1,-1,3,4,5]) ==\ndouble_the_difference([1,2,3,4,5,-5]) ==\ndouble_the_difference([]) ==\ndouble_the_difference([0]) ==\ndouble_the_difference([0.0]) ==\ndouble_the_difference([0.1, 1.2, 2.3, 3.4, 4.5]) ==\ndouble_the_difference([0,1,2,3]) ==\ndouble_the_difference([0,-1,2,-3,4,5,6,7]) ==\ndouble_the_difference([0,2,4,6,8,10,12]) ==\ndouble_the_difference([0,-1,2,3,4,5,-6]) ==\ndouble_the_difference([0,1,2,3,4,-5,6]) ==\ndouble_the_difference([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) ==\ndouble_the_difference([0,-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) ==\ndouble_the_difference([0,-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]) ==\ndouble_the_difference([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,3"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     double_the_difference([1,2,3])     == 1 + 4 + 9 + 16\nassert     double_the_difference([1,2,3,4,5])     == 1 + 9 + 25 + 49 + 25\nassert     double_the_difference([])     == 0\nassert     double_the_difference([1,2,3,4,-1,1,4])     == 9 + 25 + 49\nassert     double_the_difference([0,0,0])     == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef test_double_the_difference():\n    assert double_the_difference([1, -2, 3]) == 14\n    assert double_the_difference([1, 2, 3]) == 0\n    assert double_the_difference([]) == 0\n    "
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 4\nassert     double_the_difference([0, 2, 3, 4, 5]) == 20\nassert     double_the_difference([]) == 0\nassert     double_the_difference([5, 2, 3, 4, 5]) == 4\nassert     double_the_difference([0, 2, 3, 4, 5]) == 20\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, -2, 3, 4])     == 16\nassert     double_the_difference([1, -2, 3, 4, 9]) == 65\nassert     double_the_difference([])         == 0\n\nprint('all tests passed.'"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 20\nassert     double_the_difference([-1, 0, 4, 3]) == 4\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0.7, 3, 5.2, 8.9, 1.6]) == 164.4\nassert     double_the_difference([1, 2.3, 5.8, -4, -0.8]) == 2.29\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [0,0] == compare([1,1],[1,1])\nassert     [1,1] == compare([1,2],[1,1])\nassert     [2,0] == compare([1,2],[1,3])\nassert     [2,1] == compare([1,1,2],[1,2])\nassert     [0,1] == compare([1,2,4,6,8],[1,2])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (compare([1, 2, 3], [1, 2, 3]) == [0, 0, 0]), \"Two equal lists should return 0\"\nassert     (compare([1, 2, 3], [1, 3, 3]) == [0, 1, 0]), \"One guess is wrong\"\nassert     (compare([1, 2, 3], [3, 1, 3]) == [1, 0, 1]), \"Two guesses are wrong\"\nassert     (compare([1, 2, 3], [1, 4, 3]) == [1, 1, 1]), \"One guess is wrong and two are wrong\"\nassert     (compare([1, 2, 3], [1, 2, 3]) == [0, 0, 0]), \"They guessed correctly\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     [0,1,2] == compare([1,2,3],[2,2,3]), \"Wrong answer for [1,2,3],[2,2,3]\"\nassert     [-1,0,2] == compare([1,2,3],[3,2,3]), \"Wrong answer for [1,2,3],[3,2,3]\"\nassert     [0,0,0] == compare([1,2,3],[3,3,3]), \"Wrong answer for [1,2,3],[3,3,3]\"\nassert     [-1,2,4] == compare([1,2,3],[3,3,1]), \"Wrong answer for [1,2,3],[3,3,1]\"\nassert     [0,3,6] == compare([1,3,2],[3,2,3]), \"Wrong answer for [1,3,2],[3,2,3]\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [2,0,0] == compare([0,0,2], [1,1,2])\nassert     [0,0,0] == compare([0,0,0], [1,1,2])\nassert     [0,1,1] == compare([1,0,2], [1,0,2])\nassert     [0,1,1] == compare([0,0,0], [1,0,2])\nassert     [1,0,0] == compare([0,0,1], [1,0,2])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (compare([3,1,0,2,0,1,3], [1,1,0,1,0,0,1]) == [0, 0, 1, 0, 1, 1, 1])\nassert     (compare([1,0,1,0,0,1,3], [1,0,1,0,0,1,3]) == [0, 0, 0, 0, 0, 0, 0])\nassert     (compare([0,0,1,0,0,1,3], [1,1,0,1,0,0,1]) == [0, 1, 1, 1, 1, 1, 1])\nassert     (compare([1,0,1,0,0,1,3], [1,0,1,0,0,1,3]) == [0, 0, 0, 0, 0, 0, 0])\nassert     (compare([1,1,1,0,1,0,1,3], [1,1,1,0,0,1,1,3]) == [0, 1, 1, 1, 1, 1, 1, 0])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (compare([1,3,4,5,2,6,7,8,9,10], [1,3,5,2,4,7,8,9,10,6])     == [0, 0, 1, 0, 1, 0, 0, 0, 0, 0] )\nassert     (compare([1,2,4,5,8,9,10,11,12,13,16,17,18,20,21,22,23,24,25,26,28,29,30,32,33,34,36,37,38,39,40,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])     == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\nassert     (compare([10,20,30,40,50,60,70,80,90,100], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (compare([1,2,3], [1,2,3]) == [0,0,0]), \"Failed\"\nassert     (compare([1,2,3], [1,2,4]) == [0,1,1]), \"Failed\"\nassert     (compare([1,2,3], [1,2,3]) == [0,0,0]), \"Failed\"\nassert     (compare([1,2,3], [1,2,3]) == [0,0,0]), \"Failed\"\nassert     (compare([1,2,3], [1,2,3]) == [0,0,0]), \"Failed\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['StuFfed', 'SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed', 'Cheese']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes', 'Cheese', 'Cheese']) == 'Slices.Cheese'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Wrong'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese', 'Wrong'\nassert     Strongest_Extension('Slices', ['Cheese', 'Slices']) == 'Slices.Cheese', 'Wrong'\nassert     Strongest_Extension('Slices', ['Slices', 'Cheese', 'StuFfed']) == 'Slices.Cheese', 'Wrong'\nassert     Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'Slices']) == 'Slices.Cheese', 'Wrong'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Slices']) == 'Slices.Slices'\nassert     Strongest_Extension('Slices', ['Slices', 'Cheese']) == 'Slices.Slices'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'SErviNGSliCes', 'Slices']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert         Strongest_Extension('Class', ['A', 'a', 'a', 'c']) == 'Class.a', 'incorrect'\nassert         Strongest_Extension('Class', ['a', 'A', 'aa', 'Aa']) == 'Class.Aa', 'incorrect'\nassert         Strongest_Extension('Class', ['A', 'aa', 'Aa', 'Aaa']) == 'Class.Aaa', 'incorrect'\nassert         Strongest_Extension('Class', ['a', 'a', 'c', 'aa', 'Aa', 'Aaa', 'Aaaa', 'aaaa']) == 'Class.aaaa', 'incorrect'\nassert         Strongest_Extension('Class', ['A', 'a', 'a', 'aa', 'Aa', 'Aaa', 'Aaaa', 'aaaa', 'bb']) == 'Class.bb', 'incorrect'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.Cheese'\nassert     Strongest_Extension('Crazy', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff']) == 'Crazy.Ee'\nassert     Strongest_Extension('Crazy', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff', 'AAa', 'BBb', 'CCc', 'DDd', 'EEe', 'FFf']) == 'Crazy.Ee'\nassert     Strongest_Extension('Crazy', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff', 'AAa', 'BBb', 'CCc', 'DDd', 'EEe', 'FFf', 'AAAa', 'BBBb', 'CCCc', 'DDDd', 'EEEE', 'FFFF']) == 'Crazy.Ee'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"Incorrect output\"\nassert     Strongest_Extension(\"Aircraft\", [\"Aeroplanes\", \"Airbus\", \"Airbus747\", \"AirbusA319\"]) == \"Aircraft.AirbusA319\", \"Incorrect output\"\nassert     Strongest_Extension(\"Sudoku\", [\"Sudoku2\", \"Sudoku22\", \"Sudoku23\"]) == \"Sudoku.Sudoku2\", \"Incorrect output\"\nassert     Strongest_Extension(\"AB\", [\"Aa\", \"Bb\", \"Aaa\"]) == \"AB.Aa\", \"Incorrect output\"\nassert     Strongest_Extension(\"X\", [\"X\", \"Xa\", \"Xaa\"]) == \"X.Xa\", \"Incorrect output\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"abba\", \"dog\") == True\nassert     cycpattern_check(\"abba\", \"cat\") == True\nassert     cycpattern_check(\"abba\", \"trololo\") == True\nassert     cycpattern_check(\"abba\", \"trola\") == False\nassert     cycpattern_check(\"abba\", \"\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"algorithm\", \"logarithm\") == False\nassert     cycpattern_check(\"algorithm\", \"algo\") == True\nassert     cycpattern_check(\"algorithm\", \"lgo\") == True\nassert     cycpattern_check(\"algorithm\", \"alg\") == True\nassert     cycpattern_check(\"algorithm\", \"log\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     cycpattern_check('a','a') == True \nassert     cycpattern_check('a','aba') == True\nassert     cycpattern_check('aaaaaa','aba') == True\nassert     cycpattern_check('aaaaaa','aa') == False\nassert     cycpattern_check('aaaaaa','abb') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"a\", \"a\") == True\nassert     cycpattern_check(\"bb\", \"a\") == False\nassert     cycpattern_check(\"bba\", \"aba\") == True\nassert     cycpattern_check(\"baa\", \"baba\") == True\nassert     cycpattern_check(\"bbaa\", \"aba\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     even_odd_count(23) == (1, 3)\nassert even_odd_count(8) == (0, 2)\nassert even_odd_count(5) == (0, 1)\nassert even_odd_count(84) == (0, 8)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_count(1234) == (4, 3)\nassert     even_odd_count(234) == (3, 1)\nassert     even_odd_count(4567) == (0, 2)\nassert     even_odd_count(7890) == (0, 5)\nassert     even_odd_count(12) == (2, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    \"\"\" Read a list of integers from standard input, and print a list of tuples that contains the number of even and odd digits respectively.\n    \"\"\"\n    num_cases = int(stdin.readline())\n    for case in range(1, num_cases + 1):\n        num = int(stdin.readline())\n        num_even_odd = even_odd_count(num)\n        print('Case #{}: {}'.format(case, num_even_odd))\n\nmain()\n\n\"\"\"\n2\n4747\n2\n5555\n1\n7777\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     even_odd_count(0) == (0,0)\nassert even_odd_count(1) == (0,1)\nassert even_odd_count(2) == (1,1)\nassert even_odd_count(3) == (1,2)\nassert even_odd_count(4) == (0,2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     even_odd_count(10) == (4, 2), \"Wrong answer\"\nassert     even_odd_count(100) == (24, 24), \"Wrong answer\"\nassert     even_odd_count(84) == (6, 12), \"Wrong answer\"\nassert     even_odd_count(120) == (12, 0), \"Wrong answer\"\nassert     even_odd_count(53) == (0, 5), \"Wrong answer\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     even_odd_count(23) == (1, 3), \"Wrong output\"\nassert     even_odd_count(456) == (3, 3), \"Wrong output\"\nassert     even_odd_count(888) == (0, 6), \"Wrong output\"\nassert     even_odd_count(77777777) == (7, 7), \"Wrong output\"\nassert     even_odd_count(123523) == (1, 3), \"Wrong output\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     even_odd_count(1234) == (2,3), \"not working\"\nassert     even_odd_count(1226) == (1,3), \"not working\"\nassert     even_odd_count(1000) == (0,4), \"not working\"\nassert     even_odd_count(9999) == (4,0), \"not working\"\n\nprint(\"even_odd_count() successfully passed all tests!\")\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_count(12) == (0, 1)\nassert     even_odd_count(100) == (2, 3)\nassert     even_odd_count(77) == (1, 6)\n\ndef sum_of_digits(num):\n    \"\"\"Given an integer. return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     even_odd_count(1296) == (6, 6)\nassert     even_odd_count(1212) == (2, 4)\nassert     even_odd_count(19) == (0, 2)\nassert     even_odd_count(114) == (2, 6)\nassert     even_odd_count(100) == (0, 0)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1000) == \"M\"\nassert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nprint(\"ALL TESTS PASSED\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(5) == 'V'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(9) == 'IX'\nassert     int_to_mini_roman(14) == 'XIV'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(6) == 'VI'\nassert     int_to_mini_roman(0) == ''\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(int_to_mini_roman(14))\n    print(int_to_mini_roman(8))\n    print(int_to_mini_roman(9))"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\nassert     int_to_mini_roman(14) == \"xl\"\nassert     int_to_mini_roman(3999) == \"mmcd\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle with two sides of equal length.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(1, 2, 3) == True, \"Not a right triangle\"\nassert     right_angle_triangle(1, 3, 2) == False, \"Not a right triangle\"\nassert     right_angle_triangle(3, 1, 2) == False, \"Not a right triangle\"\nassert     right_angle_triangle(3, 2, 1) == False, \"Not a right triangle\"\nassert     right_angle_triangle(2, 3, 1) == True, \"Not a right triangle\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(4, 4, 4) is True, \"Both sides are equal\"\nassert     right_angle_triangle(3, 4, 5) is False, \"Sides do not form a right angle\"\nassert     right_angle_triangle(3, 4, 4) is False, \"All sides are not equal\"\n\n\ndef check_in_triangle(a, b, c, p):\n    '''\n    Given three side lengths of a triangle and a test side. Return True if the\n    test side is inside the triangle, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 2, 5) == False\nassert     right_angle_triangle(6, 8, 10) == True\nassert     right_angle_triangle(10, 6, 8) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False, 'Test 1 Failed'\nassert     right_angle_triangle(5, 12, 13) == False, 'Test 2 Failed'\nassert     right_angle_triangle(1, 1, 2) == False, 'Test 3 Failed'\nassert     right_angle_triangle(5, 4, 7) == True, 'Test 4 Failed'\nassert     right_angle_triangle(4, 4, 8) == False, 'Test 5 Failed'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(5, 12, 13) == False\nassert     right_angle_triangle(8, 6, 10) == True\nassert     right_angle_triangle(10, 15, 20) == False\nassert     right_angle_triangle(2, 1, 1) == False\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (find_max(['macaroni', 'taco', 'carrot', 'apple']) == 'carrot'), 'Carrot should be returned'\nassert     (find_max(['macaroni', 'taco', 'carrot','macaroni']) =='macaroni'),'macaroni should be returned'\nassert     (find_max(['macaroni', 'taco', 'carrot', 'carrot']) == 'carrot'), 'Carrot should be returned'\nassert     (find_max(['macaroni', 'taco', 'carrot', 'apple']) == 'apple'), 'apple should be returned'\nassert     (find_max(['macaroni', 'taco', 'carrot', 'carrot']) =='macaroni'),'macaroni should be returned'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_max(['a', 'x', 'a', 'x', 'b', 'c', 'z']) == 'x', \"find_max doesn't work\"\nassert     find_max(['x', 'a', 'x', 'y', 'b', 'c', 'z']) == 'x', \"find_max doesn't work\"\nassert     find_max(['x', 'a', 'x', 'y', 'a', 'b', 'z']) == 'x', \"find_max doesn't work\"\nassert     find_max(['z', 'x', 'a', 'x', 'y', 'b', 'c']) == 'x', \"find_max doesn't work\"\nassert     find_max(['a', 'a', 'x', 'y', 'b', 'c', 'z']) == 'x', \"find_max doesn't work\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_max([\"rainbow\", \"computer\", \"science\", \"a\"]) == \"a\"\nassert     find_max([\"rainbow\", \"computer\", \"science\", \"aaaaaaaaaaaa\"]) == \"aaaaaaaaaaaa\"\nassert     find_max([\"a\", \"apple\", \"rainbow\", \"a\", \"apple\", \"apple\", \"apple\"]) == \"apple\"\n\nprint(\"OK\")\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_max([\"abcdefg\", \"abc\", \"abcd\", \"abc\", \"ab\", \"cde\", \"abcdefg\", \"fghij\"]) == \"abcdefg\"\nassert     find_max([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\"]) == \"c\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"f\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"d\", \"e\", \"f\"]) == \"f\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"d\", \"e\", \"f\"]) == \"f\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_max(['maya', 'coding', 'coding', 'coding', 'coding']) == 'coding', 'Should return coding'\nassert     find_max(['maya', 'coding', 'coding', 'coding', 'coding']) =='maya', 'Should return maya'\nassert     find_max(['maya', 'coding', 'coding', 'coding', 'coding']) == 'coding', 'Should return coding'\n\n\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_max(['abc', 'def', 'ghi']) == 'def'\nassert     find_max(['abc', 'abd', 'abf', 'abg']) == 'abf'\nassert     find_max(['abc', 'abc', 'abd', 'abd']) == 'abc'\nassert     find_max(['abc', 'abc', 'def', 'def']) == 'abc'\nassert     find_max(['aa', 'bb', 'cc', 'dd']) == 'cc'\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     eat(0, 0, 1) == [0, 1], \"eat returned wrong answer\"\nassert     eat(0, 0, 2) == [0, 0], \"eat returned wrong answer\"\nassert     eat(0, 1, 2) == [1, 0], \"eat returned wrong answer\"\nassert     eat(1, 2, 2) == [2, 0], \"eat returned wrong answer\"\nassert     eat(5, 2, 5) == [5, 0], \"eat returned wrong answer\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     eat(5, 11, 10) == [10, 1]\nassert     eat(1, 10, 10) == [10, 0]\nassert     eat(0, 10, 10) == [10, 0]\nassert     eat(10, 10, 10) == [10, 10]\nassert     eat(10, 10, 9) == [9, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 1, 0) == [0, 0]\nassert     eat(0, 2, 0) == [0, 0]\nassert     eat(0, 3, 0) == [0, 0]\nassert     eat(0, 4, 0) == [0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     eat(10, 20, 40) == [20, 40]\nassert     eat(100, 20, 100) == [120, 80]\nassert     eat(100, 100, 100) == [200, 0]\nassert     eat(100, 110, 100) == [110, 100]\nassert     eat(100, 0, 40) == [100, 40]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     eat(0, 0, 1) == [ 0, 1 ]\nassert     eat(1, 2, 3) == [ 1, 2 ]\nassert     eat(2, 3, 3) == [ 2, 3 ]\nassert     eat(10, 5, 10) == [ 10, 5 ]\nassert     eat(10, 10, 10) == [ 10, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     eat(0, 0, 10) == [0, 10]\nassert     eat(1, 1, 10) == [1, 9]\nassert     eat(2, 3, 10) == [5, 1]\nassert     eat(3, 4, 10) == [9, 0]\nassert     eat(3, 5, 10) == [10, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     eat(0, 0, 5) == [5, 0]\nassert     eat(2, 3, 2) == [4, 1]\nassert     eat(3, 5, 2) == [8, 0]\nassert     eat(0, 10, 5) == [5, 0]\nassert     eat(2, 4, 1) == [4, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     eat(0, 1, 2) == [ 1, 2 ]\nassert     eat(5, 2, 10) == [ 7, 2 ]\nassert     eat(0, 5, 0) == [ 0, 0 ]\nassert     eat(9, 0, 2) == [ 9, 0 ]\nassert     eat(9, 2, 0) == [ 9, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     eat(0, 2, 3) == [ 2, 0 ], 'Case 1'\nassert     eat(1, 2, 3) == [ 2, 0 ], 'Case 2'\nassert     eat(1, 2, 1) == [ 3, 0 ], 'Case 3'\nassert     eat(5, 2, 0) == [ 2, 0 ], 'Case 4'\nassert     eat(5, 2, 2) == [ 5, 2 ], 'Case 5'\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     do_algebra(['+', '*'], [3, 2, 5]) == 16\nassert     do_algebra(['+'], [5]) == 5\nassert     do_algebra(['+', '*'], [1, 2, 3, 4]) == 14\nassert     do_algebra(['-', '*'], [3, 2, 5]) == 8\nassert     do_algebra(['+', '*', '*', '+'], [3, 2, 5]) == 32\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '%', '**'], [1, 2, 3, 4, 5, 6]) == 1\nassert     do_algebra(['+', '-', '*', '//', '%', '**'], [3, 6, 9, 6, 5, 6]) == 11\nassert     do_algebra(['+', '-', '*', '//', '%', '**'], [1, 2, 3, 5, 4, 6]) == 12\nassert     do_algebra(['+', '-', '*', '//', '%', '**'], [1, 2, 3, 5, 4, 5]) == 12\nassert     do_algebra(['+', '-', '*', '//', '%', '**'], [1, 2, 3, 5, 4, 5]) == 12\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     do_algebra([\"+\"], [1, 2, 3]) == 6\nassert     do_algebra([\"+\"], [1, 2]) == 3\nassert     do_algebra([\"+\"], [2, 2, 2]) == 6\nassert     do_algebra([\"*\"], [2, 2, 2]) == 12\nassert     do_algebra([\"*\"], [1, 2, 3]) == 6\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     do_algebra([\"+\", \"+\", \"+\"], [5, 3, 8]) == 18, \"test case 1 failed\"\nassert     do_algebra([\"-\", \"+\", \"-\"], [1, 3, 6]) == 3, \"test case 2 failed\"\nassert     do_algebra
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     do_algebra([\"+\", \"+\"], [1, 2, 3]) == 6\nassert     do_algebra([\"-\", \"*\", \"+\"], [1, 2, 3, 4]) == 17\nassert     do_algebra([\"*\", \"+\"], [1, 2, 3]) == 11\nassert     do_algebra([\"-\", \"//\"], [2, 5]) == 0\nassert     do_algebra([\"//\", \"//\"], [2, 5]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     do_algebra([1, 2, 3], [2, 3, 4]) == 7\nassert     do_algebra([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 20\nassert     do_algebra([2, 2, 2, 2, 2], [4, 4, 4, 4, 4]) == 16\nassert     do_algebra([2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5040\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     do_algebra(\n    [\n        \"+\", \"+\", \"-\"\n    ],\n    [\n        3, 1, 2, 0\n    ]\n) == 2\nassert     do_algebra(\n    [\n        \"+\", \"+\", \"*\", \"+\"\n    ],\n    [\n        3, 1, 2, 0\n    ]\n) == 8\nassert     do_algebra(\n    [\n        \"+\", \"+\", \"-\"\n    ],\n    [\n        3, 1, 2\n    ]\n) == 2\nassert     do_algebra(\n    [\n        \"+\", \"+\", \"*\", \"+\", \"+\"\n    ],\n    [\n        3, 1, 2, 3, 2\n    ]\n) == 8\nassert     do_algebra(\n    [\n        \"+\", \"+\", \"-\"\n    ],\n    [\n        3, 1\n    ]\n) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (solve(\"tHaT\") == \"tHaT\")\nassert     (solve(\"aSTRp\") == \"Astrp\")\nassert     (solve(\"1e\") == \"Ie\")\nassert     (solve(\"a \") == \"a \")\nassert     (solve(\"1!c\") == \"1!c\")\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (solve('aAABbBcCdC') == 'AaAbBbBcCdC')\nassert     (solve('aAaAaA') == 'aAAaAA')\nassert     (solve('AaBbCcDdEe') == 'AaBbCcDdEe')\nassert     (solve('AaBaBb') == 'aABaBb')\nassert     (solve('Zz') == 'zZ')\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solve(\"a\") == \"A\"\nassert     solve(\"CamelCase\") == \"camelCASE\"\nassert     solve(\"is_this_a_Camel_Case?\") == \"IS_THIS_A_CAMEL_CASE?"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solve('HELLO world') == 'hELLO wORLD'\nassert     solve('hello World') == 'hELLO wORLD'\nassert     solve('hello World!') == 'hELLO wORLD!'\nassert     solve('HELLO WORLD!') == 'hELLO wORLD!'\nassert     solve('HELLO world!') == 'hELLO wORLD!'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solve('h3LL0 p1P 0') == '0P0 h3ll0'\nassert     solve('H3LL0 P1P 0') == '0P0 H3LL0'\nassert     solve('h3ll0 p1P 0') == '0P0 h3ll0'\nassert     solve('H3ll0 p1P 0') == '0P0 H3ll0'\n\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solve('NODAY') == 'NODAY'\nassert     solve('NODAY123') == 'NOdAY123'\nassert     solve('NODAY 123') == 'NODAY 123'\nassert     solve('NODAY 123.') == 'NODAY 123.'\nassert     solve('NODAY-123') == 'NODAY-123'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     solve(\"\") == \"\"\nassert     solve(\" \") == \" \"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"A\") == \"A\"\nassert     solve(\"aBc\") == \"AbC\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     solve(\"w3resource\") == \"w3RESOURCE\"\nassert     solve(\"w3resource\") == \"w3RESOURCE\"\nassert     solve(\"w3Resource\") == \"w3RESOURCE\"\nassert     solve(\"w3 resource\") == \"w3 RESOURCE\"\nassert     solve(\"w3\\n resource\") == \"w3\\n RESOURCE\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     solve(\"AaaAaa\") == \"aAAAaAA\"\nassert     solve(\"aAA\") == \"Aaa\"\nassert     solve(\"AaAa\") == \"aAAaA\"\nassert     solve(\"aaAA\") == \"aAaAa\"\nassert     solve(\"AaAa\") == \"aAaAa\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solve(\"ABCD\") == \"ABCD\"\nassert     solve(\"ab c\") == \"Ab c\"\nassert     solve(\"a b c d\") == \"a b c D\"\nassert     solve(\"/AB CD\\\\\") == \"/aB cD/"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('a') == '9e32935975c7c80c3afc8d0b2cfeb0b9'\nassert     string_to_md5('ab') == '8c6f1f2e4f6b2a9714aeedf55f94639f'\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"abc\") == \"900150983cd24fb0d6963f7d28e17f72\"\nassert     string_to_md5(\"message digest\") == \"f96b697d7cb7938d525a2f31aaf161d0\"\nassert     string_to_md5(\"abcdefghijklmnopqrstuvwxyz\") == \"c3fcd3d76192e4007dfb496cca67e13b\"\nassert     string_to_md5(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") == \"d174ab98d277d9f5a5611c2c9f419d9f\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('zZzZz') == 'f0175e6f1e9dd1358b8b2e4dcc62c8f1'\nassert     string_to_md5('zZz Zz') == 'f0175e6f1e9dd1358b8b2e4dcc62c8f1'\nassert     string_to_md5('zZz Zz Zz') == 'f0175e6f1e9dd1358b8b2e4dcc62c8f1'\nassert     string_to_md5('zZz Zz Zz Zz') == 'f0175e6f1e9dd1358b8b2e4dcc62c8f1'\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef md5_to_string(hash_text):\n    \"\"\"\n    Given a md5 hash 'hash_text', return its string equivalent.\n    If 'hash_text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nprint(string_to_md5(\"abc\"))\n\nassert\nprint(string_to_md5(\"\"))\n\nassert \nprint(string_to_md5(\"a\" * 1000 + \"b\" * 1000))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 3) == [2]\nassert     generate_integers(4, 9) == [4, 6, 8]\nassert     generate_integers(1, 17) == [2, 4, 6, 8, 10, 12, 14, 16]\nassert     generate_integers(20, 30) == [20, 22, 24, 26, 28]\nassert     generate_integers(10, 20) == [12, 14, 16, 18, 20]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\nassert     generate_integers(10, 100) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(200, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nprint(generate_integers(20, 36)"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     generate_integers(22, 27) == [2, 4, 6, 8, 10, 12]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\nassert     generate_integers(100, 1) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(1, 0) == []\nassert     generate_integers(0, 1) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     generate_integers(2, 4) == [2, 4]\nassert     generate_integers(2, 4) == [2, 4]\nassert     generate_integers(10, 16) == [10, 12, 14, 16]\nassert     generate_integers(1, 1) == [2]\nassert     generate_integers(10, 12) == [10, 12]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     generate_integers(45, 94) == [44, 52, 62, 82, 92]\nassert     generate_integers(35, 42) == [32, 36, 40]\nassert     generate_integers(10, 25) == [12, 16, 20, 24]\n\ndef generate_integers_iterative(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    ret = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     generate_integers(0,0) == [], \"generate_integers(0,0)!= []\"\nassert     generate_integers(2,5) == [2,4], \"generate_integers(2,5)!= [2,4]\"\nassert     generate_integers(0,1) == [], \"generate_integers(0,1)!= []\"\nassert     generate_integers(2,6) == [2,4,6], \"generate_integers(2,6)!= [2,4,6]\"\n\nprint(\"OK! test 1 passed\")\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     generate_integers(0, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(10, 10) == [2, 4, 6, 8]\nassert     generate_integers(10, 20) == [2, 4, 6, 8, 10, 12]\nassert     generate_integers(10, 30) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\n"
    }
]