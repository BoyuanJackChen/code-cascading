[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     has_close_elements([0, 1, 2, 3, 4], 1) is True\nassert     has_close_elements([0, 1, 2, 3, 4], 2) is False\nassert     has_close_elements([0, 1, 2, 3, 4], 4) is False\n\nassert     has_close_elements([0, 1, 2, 3, 4], 5) is False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3], 2) == False\nassert     has_close_elements([1, 2, 3], 0.1) == False\nassert     has_close_elements([1, 2, 3], 0.2) == True\nassert     has_close_elements([1, 2, 3], 1.9) == True\nassert     has_close_elements([1, 2, 3], 3.1) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == False, \"Wrong answer for a1\"\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == True, \"Wrong answer for a2\"\nassert     has_close_elements([1, 2, 3, 4, 5], 0) == True, \"Wrong answer for a3\"\nassert     has_close_elements([1, 2, 3, 4, 5], 6) == False, \"Wrong answer for a4\"\nassert     has_close_elements([1, 2, 3, 4, 5], 7) == False, \"Wrong answer for a5\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == False\nassert     has_close_elements([3, 2, 1, 4, 5], 2) == True\nassert     has_close_elements([0, 1, 2, 3, 4, 5, 6, 7], 2) == True\nassert     has_close_elements([0, 1, 2, 3, 4, 5, 6, 7], 3) == False\nassert     has_close_elements([0, 1, 2, 3, 4, 5, 6, 7], 0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert         has_close_elements([3, 3], 1) == False\nassert         has_close_elements([0, 0, 0], 1) == False\nassert         has_close_elements([3, 4, 5, 1, 2], 0.1) == False\nassert         has_close_elements([3, 4, 5, 1, 2], 0.01) == False\nassert         has_close_elements([3, 4, 5, 1, 2], 0.0005) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 0) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 0.5) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 6) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3], 0.5) == True, \"1\"\nassert     has_close_elements([0, 1, 2, 3], 1) == False, \"2\"\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 2) == False, \"3\"\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 0) == True, \"4\"\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 3) == True, \"5\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     has_close_elements([1, 2, 3, 5, 6, 7], 2) == True\nassert     has_close_elements([5, 6, 7], 2) == True\nassert     has_close_elements([5, 6, 7, 8], 2) == True\nassert     has_close_elements([5, 6, 7, 8, 1, 2, 3, 4], 2) == True\nassert     has_close_elements([2, 5, 6, 7, 8, 1, 2, 3, 4], 2) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 1) == False\nassert     has_close_elements([1, 2, 3, 4], 2) == False\nassert     has_close_elements([1, 2, 3, 4], 3) == False\nassert     has_close_elements([1, 2, 3, 4], 4) == False\nassert     has_close_elements([1, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.2) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.5) == False\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.4) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.1) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.6) == False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"(())()(()())\") == [ \"(()())\", \"(()())\", \"()\", \"()\" ]\nassert     separate_paren_groups(\"(())\") == [ \"(())\" ]\nassert     separate_paren_groups(\"(()())\") == [ \"(()())\", \"()\" ]\nassert     separate_paren_groups(\"()(())\") == [ \"()(())\", \"()\" ]\nassert     separate_paren_groups(\"((()()))\") == [ \"((()()))\", \"()\", \"()\", \"()\" ]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\")(\") == [\"()\"]\nassert     separate_paren_groups(\"(())\") == [\"()\"]\nassert     separate_paren_groups(\"()()(()(())())\") == [\"(())\", \"()()\", \"()(()(()))\"]\nassert     separate_paren_groups(\"()()\") == [\"()()\"]\nassert     separate_paren_groups(\"\") == []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     separate_paren_groups( '((a))' ) == [ 'a', '' ]\nassert     separate_paren_groups( '((a)b)' ) == [ 'a', 'b' ]\nassert     separate_paren_groups( '(a((b)c))' ) == [ 'a', 'bc', '' ]\nassert     separate_paren_groups( '((a)(b))' ) == [ 'a', 'b', '' ]\nassert     separate_paren_groups( '((a)(b))((c))' ) == [ 'a', 'b', 'c', '' ]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"()()\") == [\"()()\"]\nassert     separate_paren_groups(\"(()())(())\") == [\"(()())(())\", \"()()\"]\nassert     separate_paren_groups(\"(()())(()())\") == [\"(()())(()())\", \"(()())\"]\nassert     separate_paren_groups(\"()()()()(((())())())()())()()\") == [\"()()()()(((())())())())()()\", \"()\"]\nassert     separate_paren_groups(\"()()(())((()()))\") == [\"()()(())((()()))\", \"()()()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(1, 2) (3, 4) (5, 6)\") == [\"(1, 2)\", \"(3, 4)\", \"(5, 6)\"]\nassert     separate_paren_groups(\"(ab(cd)ef)\") == [\"ab(cd)\", \"ef\"]\nassert     separate_paren_groups(\"(ab(c(d))ef)\") == [\"ab(c(d))\", \"ef\"]\nassert     separate_paren_groups(\"(ab(c(d(e))f)g)\") == [\"ab(c(d(e))f)\", \"g\"]\nassert     separate_paren_groups(\"(ab(c(d(e(f))g))h)\") == [\"ab(c(d(e(f))g))\", \"h\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\")()(\") == ['()', '()', '()']\nassert     separate_paren_groups(\"(())()\") == ['()', '()', '()']\nassert     separate_paren_groups(\"((()())())\") == ['((()())())', '()', '()', '()', '()', '()']\nassert     separate_paren_groups(\"(((()((((((((((((((((((()))))))))))))))))))))\") == ['((((((((((((((((((((((()))))))))))))))))))))']\nassert     separate_paren_groups(\"(()((())))((()))(())\") == ['(())', '(())', '(())', '()', '(())', '(())', '()']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('(())()') == ['(())()', '()']\nassert     separate_paren_groups('(((x)))') == ['(((x)))']\nassert     separate_paren_groups('(((x)))') == ['(((x)))']\nassert     separate_paren_groups('(((x)))') == ['(((x)))']\nassert     separate_paren_groups('(((x)))') == ['(((x)))']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     separate_paren_groups('(())()(())') == \\\n        ['(())()', '(())(', '()()(', '()(())']\nassert     separate_paren_groups('(((())))') == \\\n        ['(((())))']\nassert     separate_paren_groups('(())((()()))') == \\\n        ['(())', '(())(', '()(())', '()()(', '(())(())']\nassert     separate_paren_groups('(())(())') == \\\n        ['(())', '(())', '()(())', '()()()']\nassert     separate_paren_groups('(())(())(()(()))') == \\\n        ['(())(())((())(())', '(())(())(())', '()(())(()(())', '()(())()(())', '()(())(())()', '()(())()()', '()(())()()(())(())', '()(())()()()', '()(())()(())(())']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"()()(())\") == [\"()\", \"()\", \"(())\"]\nassert     separate_paren_groups(\"(())(())(\") == [\"()\", \"()\", \"(())\"]\nassert     separate_paren_groups(\"(()()(())((())))(\") == [\"()\", \"()\", \"()\", \"(())(())(\", \"()\"]\nassert     separate_paren_groups(\"(()()()()()(()()))\") == [\"()\", \"()\", \"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"(()())(())()()(())()\") == [\"()\", \"()\", \"(())\", \"()\", \"()\", \"(()())(()())(\", \"()\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef extract_decimals(number: float) -> list:\n    \"\"\" Return the list of decimals (integers and fractions) of the given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert _____._____ is _____\nassert _____._____ is _____\n\ndef truncate_number(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef parse_float(number_string: str) -> float:\n    \"\"\" Given a string representing a number, parse it and return a floating\n    point number. \n\n    Raise ValueError if the number string cannot be parsed into a float.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     truncate_number(0.8) == 0\nassert     truncate_number(0.2) == 0.2\nassert     truncate_number(2.4) == 0\nassert     truncate_number(2.5) == 0.5\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Return True if the given number is prime and False otherwise.\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef read_number_as_decimal_from_console() -> float:\n    \"\"\" Read a positive number from the console.\n\n    The function will read a number from the console until it receives a\n    decimal point. It will then return a float number.\n\n    The function will raise a ValueError if it receives anything but a float,\n    an int, or a negative number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     truncate_number(123.456) == 0.456\nassert     truncate_number(1234.456) == 0.456\nassert     truncate_number(12345.345) == 345.345\nassert     truncate_number(123456.345) == 345.345\nassert     truncate_number(123456.3455) == 345.345\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef truncate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_zero([10, 5, -1, 1]) == False\nassert     below_zero([5, 1, 10, -1, 1, 1, 1, 1, 10]) == True\nassert     below_zero([5, -1, -1, 1, 10]) == False\n\n\ndef sum_of_two(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if there exists two operations, which sum is zero.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, 3, 4, 5, 6, -3, -4, -5, -6]) == True\nassert     below_zero([1, 2, 3, 4, 5, 6, -3, -4, -5, -6, 7, 8, 9, 10]) == False\nassert     below_zero([1, 2, 3, 4, 5, 6, -3, -4, -5, -6, 7, 8, 9, 10, 11, -5, -7, -8, -9]) == True\n\n\ndef check_balance(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance += operation\n        elif operation > 0:\n            balance -= operation\n    if balance < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\nassert     below_zero([1, 2, -3, 4, 5, 1, 2, -3, 4, 5]) == True\nassert     below_zero([1, -2, 3, 4, 5, 1, -2, 3, 4, 5]) == False\nassert     below_zero([]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_zero([1, 2, 3]) == False, \"one of tests below_zero(operations) failed\"\nassert     below_zero([1, 2, 3, 4, 5, -3, -2]) == True, \"one of tests below_zero(operations) failed\"\nassert     below_zero([1, 2, -3, -2]) == False, \"one of tests below_zero(operations) failed\"\n\n\ndef no_teen_sum(a: int, b: int, c: int) -> int:\n    \"\"\" You're given three integers, and you have to return the sum of\n    the three integers without using the + operator.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_zero([10, -10, -20, 10]) == True\nassert     below_zero([10, -10, 20, 10]) == False\nassert     below_zero([-10, -20, 10]) == True\nassert     below_zero([-10, -20, 10, -10, -20, 10]) == True\nassert     below_zero([10, -10, 20, 10, -10, -20, 10]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, -3, 4, 5]) == True\nassert     below_zero([1, 2, -5, 4, 5]) == True\n\nassert     below_zero([1, 2, 3, -4, 5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_zero([1,2,-3,4]) == True\nassert     below_zero([5,3,4,7,8,7,3,4,4,3]) == False\nassert     below_zero([1,2,3,4,5,6]) == False\n\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     1 == mean_absolute_deviation([1, 2, 3, 4, 5])\nassert     2 == mean_absolute_deviation([1, 1, 3, 4, 5])\nassert     1 == mean_absolute_deviation([1, 2, 3, 4, 4])\nassert     1 == mean_absolute_deviation([1, 2, 3, 4, 5, 5])\nassert     1.5 == mean_absolute_deviation([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([2, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([1, 2, 2, 3, 4]) == 0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef normalized_mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Normalized Mean Absolute\n    Deviation around the mean of this dataset.\n    Normalized Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    NMAD = average | x - x_mean | / standard_deviation\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     abs(mean_absolute_deviation([0, 1, 2, 3]) - 1.0) < 0.0001\nassert     abs(mean_absolute_deviation([0, 1, 2, 3, 4]) - 1.0) < 0.0001\nassert     abs(mean_absolute_deviation([3, 2, 1]) - 1.0) < 0.0001\nassert     abs(mean_absolute_deviation([3, 2, 1, 0]) - 1.0) < 0.0001\nassert     abs(mean_absolute_deviation([3, 2, 1, 0, -1]) - 1.0) < 0.0001\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     abs(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) - 3.0) < 0.01\nassert     abs(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) - 3.5) < 0.01\nassert     abs(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) - 4.0) < 0.01\nassert     abs(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) - 4.5) < 0.01\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate median of this dataset.\n    Median is the middle element when the dataset is sorted in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     round(mean_absolute_deviation([0.5, 2.5, 2.5, 3.5, 4.5]), 1) == 1.0\nassert     round(mean_absolute_deviation([0.5, 0.5, 0.5, 1.5, 1.5]), 1) == 0.5\nassert     round(mean_absolute_deviation([3.5, 2.5, 3.5, 2.5, 4.5]), 1) == 0.8\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation(numbers = [1.0, 2.0, 3.0]) ==     1.0\nassert     mean_absolute_deviation(numbers = [1.0, 2.0, 3.0, 4.0]) ==     1.5\nassert     mean_absolute_deviation(numbers = [1.0, 2.0, 3.0, 4.0, 5.0]) ==     2.0\nassert     mean_absolute_deviation(numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) ==     2.5\nassert     mean_absolute_deviation(numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) ==     3.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.1285714285714286\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5.1285714285714286\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5.1285714285714286\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 5.1285714285714286\n\ndef interquartile_range(numbers: List[float]) -> float:\n    \"\"\" Calculate interquartile range of a given dataset\n    Interquartile range is the difference between the upper and the lower quartiles.\n    It represents the spread of the distribution of the data:\n    IQR = Q3 - Q1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(intersperse([0,1,2,3], 0))\n    print(intersperse([0,1,2,3], 2))\n    print(intersperse([0,1,2,3], 3))\n    print(intersperse([0,1,2,3], 4))"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], 9) == [1, 9, 2, 9, 3, 9, 4, 9, 5, 9, 6, 9, 7, 9, 8, 9]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], 10) == [1, 10, 2, 10, 3, 10, 4, 10, 5, 10, 6, 10, 7, 10, 8, 10]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], 11) == [1, 11, 2, 11, 3, 11, 4, 11, 5, 11, 6, 11, 7, 11, 8, 11]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], 12) == [1, 12, 2, 12, 3, 12, 4, 12, 5, 12, 6, 12, 7, 12, 8, 12]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], 13) == [1, 13, 2, 13, 3, 13, 4, 13, 5, 13, 6, 13, 7, 13, 8, 13]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 0, 2, 1, 3, 1, 4, 1, 5, 1]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 3, 3, 0, 2, 3, 3, 4, 3, 5, 3]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 4, 4, 0, 2, 4, 4, 3, 4, 5, 4]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [1, 5, 5, 0, 2, 5, 5, 3, 5, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], delimeter=0) == [0, 1, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], delimeter=1) == [1, 0, 2, 0, 3, 0, 4, 0, 5]\nassert     intersperse([1, 2, 3, 4, 5], delimeter=2) == [1, 2, 0, 3, 0, 4, 0, 5]\nassert     intersperse([1, 2, 3, 4, 5], delimeter=3) == [1, 2, 3, 0, 4, 0, 5]\nassert     intersperse([1, 2, 3, 4, 5], delimeter=4) == [1, 2, 3, 4, 0, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(intersperse(numbers, 2))"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 3)     == [1, 3, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5, 6], 3)     == [1, 3, 2, 3, 4, 5, 6]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], 3)     == [1, 3, 2, 3, 4, 5, 6, 7, 8]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)     == [1, 3, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef intersperse_recursive(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef intersperse2(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    new_list: List[int] = []\n    \n    for i in range(len(numbers)-1):\n        new_list.append(numbers[i])\n        new_list.append(delimeter)\n    new_list.append(numbers[-1])\n    \n    return new_list\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3, 0], \"intersep(1, 2, 3)\"\nassert     intersperse([1, 2, 3], 1) == [1, 1, 0, 2, 1, 3, 1], \"intersep(1, 2, 3)\"\nassert     intersperse([1, 2, 3], 2) == [1, 2, 2, 0, 3, 2], \"intersep(1, 2, 3)\"\nassert     intersperse([1, 2, 3], 3) == [1, 3, 3, 0, 2, 3], \"intersep(1, 2, 3)\"\nassert     intersperse([1, 2, 3], 4) == [1, 4, 4, 0, 2, 4], \"intersep(1, 2, 3)\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef intersperse_test_1():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    delimeter = 11\n    expected = [1, 11, 2, 11, 3, 11, 4, 11, 5, 11, 6, 11, 7, 11, 8, 11, 9]\n    assert intersperse(numbers, delimeter) == expected\n\ndef intersperse_test_2():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    delimeter = 13\n    expected = [1, 13, 2, 13, 3, 13, 4, 13, 5, 13, 6, 13, 7, 13, 8, 13, 9]\n    assert intersperse(numbers, delimeter) == expected\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"()(())\") == [0, 1, 0]\nassert     parse_nested_parens(\"()()((()()))\") == [0, 1, 2, 3]\nassert     parse_nested_parens(\"(()(((()())())))(((()))())\") == [3, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(((x))())\") == [0, 2, 1, 1, 0]\nassert     parse_nested_parens(\"(((x)))\") == [0, 2, 1, 1]\nassert     parse_nested_parens(\"()())\") == [0, 0, 0, 0]\nassert     parse_nested_parens(\"((()))\") == [0, 1, 1]\nassert     parse_nested_parens(\"(((x)))(()))\") == [0, 2, 2, 1, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"()\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [1, 1]\nassert     parse_nested_parens(\"(()(()(()((((()()()))))))\") == [7, 7]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"()()(()())\") == [0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(((x))))\") == [1, 1, 0, 1]\nassert     parse_nested_parens(\"(((((((x))))))\") == [2, 2, 2, 1, 1, 0, 1]\nassert     parse_nested_parens(\"((((((((x))))))\") == [3, 3, 3, 3, 2, 2, 2, 1, 1, 0, 1]\nassert     parse_nested_parens(\"(((((((((x)))))))))\") == [4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 0, 1]\nassert     parse_nested_parens(\"((((((((((x)))))))))\") == [5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 0, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('((()))') == [2]\nassert     parse_nested_parens('(((()))') == [2]\nassert     parse_nested_parens('((((()))))') == [4]\nassert     parse_nested_parens('(((((((()))))))') == [6]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"((1+2))\")                 == [0, 0]\nassert     parse_nested_parens(\"((1+(2+3))+((1+2)+3))\")     == [0, 0, 0, 0]\nassert     parse_nested_parens(\"(1+(2+3)+(1+2)+(1+2)+3)\")     == [0, 0, 1, 1, 0]\nassert     parse_nested_parens(\"1+2+3+4+5+6+7\")         == [0, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens(\"1+2+3+4+5+6+7+8+9+10+11+12\")     == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(())\") == [1]\nassert     parse_nested_parens(\"(())()\") == [1, 2]\nassert     parse_nested_parens(\"((())())\") == [1, 2, 2]\nassert     parse_nested_parens(\"(((((())()())))\") == [1, 2, 3, 2, 3]\nassert     parse_nested_parens(\"(()(()()((())()(()))())\") == [3, 2, 3, 2, 3, 3, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"(((1, 2), 3, 4), 5)\") == [2, 3]\nassert     parse_nested_parens(\"((1, 2), 3, 4)\") == [2, 2]\nassert     parse_nested_parens(\"((1, 2, 3), 4, (5, 6, 7))\") == [3, 3, 3]\nassert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"(((((((1))))))\") == [10]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"(()())\") ==     2\nassert     parse_nested_parens(\"()()(()(()))\") ==     4\nassert     parse_nested_parens(\"(()(((((())())))))\") ==     8\n\n\n\ndef parse_nested_parens_stack(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\") == [\"a\", \"b\", \"c\"]\nassert filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"b\") == [\"b\", \"d\"]\nassert filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"c\") == [\"c\"]\nassert filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"d\") == [\"d\", \"e\"]\nassert filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"e\") == [\"e\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"flower\", \"flow\", \"flight\"], \"flow\") == [\"flow\", \"flight\"]\nassert     filter_by_substring([\"flow\", \"flight\", \"flight\"], \"flight\") == [\"flight\", \"flight\"]\nassert     filter_by_substring([\"flow\", \"flight\", \"flight\"], \"flighty\") == [\"flight\", \"flight\"]\nassert     filter_by_substring([\"flow\", \"flight\", \"flight\"], \"\"), [\"flow\", \"flight\", \"flight\"]\nassert     filter_by_substring([\"flow\", \"flight\", \"flight\"], \"f\"), [\"flow\", \"flight\", \"flight\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'], 'a') == ['a', 'a', 'a', 'a']\nassert     filter_by_substring(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'], 'b') == ['b', 'b', 'b', 'b']\nassert     filter_by_substring(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'], 'c') == ['c', 'c', 'c', 'c']\nassert     filter_by_substring(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'], 'd') == []\nassert     filter_by_substring(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'], 'd') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['hello', 'world', 'this', 'is', 'another', 'test'], 'world') == ['world']\nassert filter_by_substring(['hello', 'world', 'this', 'is', 'another', 'test'], 'hello') == ['hello']\nassert filter_by_substring(['hello', 'world', 'this', 'is', 'another', 'test'], 'here') == []\nassert filter_by_substring(['hello', 'world', 'this', 'is', 'another', 'test'], '') == ['hello', 'world', 'this', 'is', 'another', 'test']\nassert filter_by_substring(['hello', 'world', 'this', 'is', 'another', 'test'], 'x') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"toto\", \"titi\", \"tata\", \"tutu\", \"tete\"], \"toto\") == [\"toto\", \"toto\"]\nassert     filter_by_substring([\"toto\", \"titi\", \"tata\", \"tutu\", \"tete\"], \"titi\") == [\"titi\"]\nassert     filter_by_substring([\"toto\", \"titi\", \"tata\", \"tutu\", \"tete\"], \"tata\") == [\"tata\", \"tata\"]\nassert     filter_by_substring([\"toto\", \"titi\", \"tata\", \"tutu\", \"tete\"], \"tutu\") == [\"tutu\", \"tutu\"]\nassert     filter_by_substring([\"toto\", \"titi\", \"tata\", \"tutu\", \"tete\"], \"tete\") == [\"tete\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['abc', 'xyz', 'aba', '1221'], '12') == ['1221']\nassert     filter_by_substring(['abc', 'xyz', 'aba', '1221'], '1') == ['abc', 'xyz', '1221']\nassert     filter_by_substring(['abc', 'xyz', 'aba', '1221'], 'z') == ['xyz', '1221']\nassert     filter_by_substring(['abc', 'xyz', 'aba', '1221'], '2') == []\nassert     filter_by_substring(['abc', 'xyz', 'aba', '1221'], '') == ['abc', 'xyz', '1221', 'aba']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_substring(['some', 'words', 'that', 'have','substring', 'in'],'substring') == ['words', 'that', 'have','substring', 'in']\nassert     filter_by_substring(['some', 'words', 'that', 'have','substring', 'in'],'sub') == ['words', 'that', 'have','substring', 'in']\nassert     filter_by_substring(['some', 'words', 'that', 'have','substring', 'in'], 'w') == ['words', 'that', 'have','substring', 'in']\nassert     filter_by_substring(['some', 'words', 'that', 'have','substring', 'in'],'substring and words') == ['words', 'that', 'have','substring', 'in']\nassert     filter_by_substring(['some', 'words', 'that', 'have','substring', 'in'],'some substring') == ['words', 'that', 'have','substring', 'in']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_substring(['aa', 'b', '', 'ccc', 'dddddddd', 'ee', 'ff'], 'aa') == ['aa']\nassert     filter_by_substring(['aa', 'bb', '', 'ccc', 'dddddddd', 'ee', 'ff'], 'bb') == ['bb']\nassert     filter_by_substring(['aa', 'bb', '', 'ccc', 'dddddddd', 'ee', 'ff'], 'ee') == ['ee']\nassert     filter_by_substring(['aa', 'bb', '', 'ccc', 'dddddddd', 'ee', 'ff'], 'ff') == ['ff']\nassert     filter_by_substring(['aa', 'bb', '', 'ccc', 'dddddddd', 'ee', 'ff'], 'ccc') == ['ccc']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_substring(['cat', 'dog','mouse', 'elephant'], 'cat') == ['cat']\nassert     filter_by_substring(['cat', 'dog','mouse', 'elephant'], 'rat') == []\nassert     filter_by_substring(['cat', 'dog','mouse', 'elephant'], 'zoo') == []\nassert     filter_by_substring(['cat', 'dog','mouse', 'elephant'], '*') == ['cat', 'dog','mouse', 'elephant']\nassert     filter_by_substring(['cat', 'dog','mouse', 'elephant'], '***') == ['cat', 'dog','mouse', 'elephant']\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_product([2, 3, 4, 5]) == (15, 20)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\n\n\ndef count_positives_sum_negatives(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a count of positives numbers and a sum of negative\n    integers. If the list is empty, return a tuple consisting of 0 for both values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([2, 1, 4, 4, 2, 5, 1, 3]) == (15, 96)\n\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef consecutive_zeros(n: int) -> int:\n    \"\"\" Given a non-negative integer, you have to return the length of the longest substring that consists of the same number.\n    \"\"\"\n    pass\n\n\ndef end_zeros(num: int) -> int:\n    \"\"\" Given a positive integer, return the number of zeros at the end of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\n\ndef sum_product_for(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (numbers[0] + sum_product_for(numbers[1:]), numbers[0] * sum_product_for(numbers[1:]))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 1, 1]) == (3, 3)\nassert     sum_product([2, 2, 2]) == (6, 4)\nassert     sum_product([2, 2, 2, 1]) == (7, 6)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef double_sort(numbers: List[int]) -> List[int]:\n    \"\"\" For a given list of integers, return a list of all the integers sorted in ascending order.\n    Only integers, not floats, should be returned.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (10, 2) == sum_product([1,2,3,4,5])\nassert     (0, 1) == sum_product([])\nassert     (3, 6) == sum_product([1,2,3])\nassert     (0, 1) == sum_product([0,1,0])\nassert     (10, 2) == sum_product([1,2,3,4,5,6,7,8,9,10])\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\n\nassert     sum_product([1, 2, 3, -4]) == (1, 6)\nassert     sum_product([1, 2, -3, 4]) == (1, 6)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([5]) == [5]\nassert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([3, 2, 1]) == [3, 2, 1]\nassert     rolling_max([1, 3, 2]) == [1, 3, 2]\nassert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([2, 3, 4, 1]) == [2, 3, 4, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [6, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [7, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [4, 1, 2, 3, 3, 3, 3, 3, 4, 5, 5] == rolling_max([1, 2, 3, 4, 5])\nassert [1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 5] == rolling_max([1, 2, 3, 4, 5])\nassert [1, 2, 3, 3, 3, 3, 3, 3, 3, 4, 5] == rolling_max([1, 2, 3, 3, 3, 3, 3, 3, 4, 5])\nassert [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3] == rolling_max([1, 2, 3, 3, 3, 3, 3, 3, 3, 3])\nassert [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3] == rolling_max([1, 2, 3, 3, 3, 3, 3, 3, 3, 3])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 2]) == [1, 2]\nassert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 2]) == [2]\nassert     rolling_max([1, 1]) == [1, 1]\nassert     rolling_max([2, 1]) == [2, 2]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 3, 5, 7, 9, 4, 2, 6, 8, 3]) == [3, 5, 7, 9, 9, 7, 5, 4, 3, 3]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rolling_max([2, 4, 5, 4, 7, 6, 8, 3]) == [4, 4, 5, 5, 7, 7, 8, 8]\nassert     rolling_max([8, 7, 6, 5, 4, 3, 2, 1]) == [8, 7, 6, 6, 5, 4, 4, 4]\nassert     rolling_max([7, 2, 4, 6, 8, 5, 3, 1]) == [7, 7, 7, 6, 6, 6, 5, 5]\nassert     rolling_max([3, 4, 2, 1, 5]) == [4, 4, 4, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     rolling_max([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5]*40\nassert     rolling_max([0]) == [0]\nassert     rolling_max([]) == []\nassert     rolling_max([0, 0]) == [0, 0]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([1,4,2,5,3]) == [1,4,2,4,5]\nassert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     rolling_max([2,3,1,4,5]) == [2,3,3,4,5]\nassert     rolling_max([1,2,3,5,6,7,8,9]) == [1,2,3,5,6,7,8,9]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    print(is_palindrome('aabaa'))\n    print(is_palindrome('abba'))\n    print(make_palindrome('abba')"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     make_palindrome('banana') == 'babana'\nassert     make_palindrome('mango') =='mangom'\nassert     make_palindrome('abc') == 'abccba'\nassert     make_palindrome('ac') == 'acba'\n\n\ndef time_palindromes(strings: list) -> dict:\n    \"\"\" Print time of execution for all palindromes in the list. \"\"\"\n    result = {}\n    for string in strings:\n        result[string] = timeit.timeit(\n            stmt='is_palindrome(string)',\n            globals=globals(),\n            number=100\n        )\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"ba\") == \"abba\"\nassert     make_palindrome(\"aba\") == \"abba\"\nassert     make_palindrome(\"abab\") == \"abba\"\nassert     make_palindrome(\"abababab\") == \"abbaabbaab\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     make_palindrome('a') == 'aba'\nassert     make_palindrome('ab') == 'aba'\nassert     make_palindrome('bba') == 'bba'\nassert     make_palindrome('abb') == 'baab'\nassert     make_palindrome('abbc') == 'baab'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_palindrome(\"abba\") == \"abba\"\nassert     make_palindrome(\"aaab\") == \"abba\"\nassert     make_palindrome(\"acba\") == \"abba\"\nassert     make_palindrome(\"abbaabbabb\") == \"abbaabbabb\"\nassert     make_palindrome(\"aac\") == \"aacaa\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    s = \"racecar\"\n    assert is_palindrome(s)"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    string = input(\"Please, enter your string: \")\n    print(is_palindrome(string))\n    print(make_palindrome(string))\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"0\", \"1\") == \"1\"\nassert     string_xor(\"1\", \"1\") == \"0\"\nassert     string_xor(\"101010\", \"101010\") == \"0\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_xor(\"101010\", \"101011\") == \"111000\"\nassert     string_xor(\"111010\", \"111011\") == \"111000\"\nassert     string_xor(\"111110\", \"111111\") == \"111110\"\nassert     string_xor(\"111110\", \"111110\") == \"111110\"\nassert     string_xor(\"111010\", \"111011\") == \"111110\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef string_xor_part2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_xor('10110', '10110') == '10101'\nassert     string_xor('101', '101') == '010'\nassert     string_xor('101010', '101010') == '101100010'\n\nassert     string_xor('101010', '101101010') == '101101110'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nprint(string_xor('1111', '1111'))\nassert string_xor('1110', '1110') == '1100'\nassert string_xor('1100', '1100') == '1100'\nassert string_xor('1011', '1011') == '1010'\nassert string_xor('1010', '1010') == '1010'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_xor('11', '1') == '100'\nassert     string_xor('1010', '1011') == '1100'\nassert     string_xor('1010', '1011') == '1100'\nassert     string_xor('1010', '10111') == '1100'\nassert     string_xor('1010', '1011111') == '1100'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_xor(\"11\", \"1\") == \"10\"\nassert     string_xor(\"10111\", \"1010111\") == \"101010\"\nassert     string_xor(\"101111111\", \"1011101110111\") == \"1011101111111111111111111111\"\nassert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_xor(\"101010\", \"101010\") == \"010100\", \"Example #1\"\nassert     string_xor(\"11001100\", \"101010\") == \"11010110\", \"Example #2\"\nassert     string_xor(\"11111111\", \"11111111\") == \"11101111\", \"Example #3\"\nassert     string_xor(\"11111111\", \"11111111\") == \"11101111\", \"Example #4\"\nassert     string_xor(\"101101\", \"101101\") == \"1110010\", \"Example #5\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nstring_xor('11', '11') == '11'\nstring_xor('1100', '1101') == '1100'\nstring_xor('10010111', '10101011') == '11001100'\n\n\ndef find_xor_in_string(a: str) -> List[int]:\n    \"\"\" Find all XOR results of 1s and 0s in the string a, and return these as a list of ints.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_xor(\"11\", \"11\") == \"01\"\nassert     string_xor(\"101010\", \"101010\") == \"101010\"\nassert     string_xor(\"11101010\", \"11101010\") == \"101010\"\nassert     string_xor(\"1100110011001100110011001100110011\", \"1100110011001100110011001100110011\") == \"101101101101101101101101101101101\"\nassert     string_xor(\"11101010\", \"11101010\") == \"01\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     longest([\"a\", \"c\", \"c\"]) == \"c\"\nassert     longest([\"a\", \"b\", \"a\", \"c\", \"c\", \"d\"]) == \"c\"\nassert     longest([\"a\", \"b\", \"a\", \"c\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"a\", \"c\", \"c\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"a\", \"c\", \"c\", \"d\", \"e\", \"f\"]) == \"f\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nlongest([\"aaaa\", \"bb\", \"ccccc\"]) == \"ccccc\"\nassert longest([\"\",\"aaaa\",\"bb\",\"ccccc\"]) == \"ccccc\"\nassert longest([\"\",\"\",\"\",\"aaaa\",\"bb\",\"ccccc\"]) == \"aaaa\"\nassert longest([\"\",\"\",\"\"]) == None\nassert longest([\"\",\"\",\"aaaa\",\"bb\",\"ccccc\"]) == \"aaaa\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     longest(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) == 'abcd'\nassert     longest(['ab', 'a', 'abc', 'd', 'cd', 'bcd', 'abcd']) == 'abc'\nassert     longest(['ab', 'a', 'abc', 'd', 'cd', 'bcd', 'abcd']) == 'ab'\nassert     longest(['ab', 'a', 'abc', 'd', 'cd', 'bcd', 'abcd']) == 'ab'\nassert     longest(['ab', 'a', 'abc', 'd', 'cd', 'bcd', 'abcd']) == 'ab'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     longest([\"abc\", \"xyz\", \"aba\", \"1221\", \"krd\"]) == \"krd\"\nassert     longest([\"1234567890123456789012345678901234567890\", \"asd\", \"qwe\"]) == \"1234567890123456789012345678901234567890\"\nassert     longest([]) == None\n\ndef longest_v2(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     longest([\"w\", \"abcdef\", \"qw\", \"qwq\", \"qw\", \"qwq\", \"qwqw\", \"qwqwqw\"]) == \"abcdefqwqwqwqwqwqwqwqwqwqwq\"\nassert     longest([\"a\", \"abcdef\", \"qw\", \"qwq\", \"qwqw\", \"qwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwq"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     longest([\"a\", \"abc\", \"b\", \"c\"]) == \"abc\"\nassert longest([\"\", \"a\", \"\", \"b\"]) == \"a\"\nassert longest([]) is None\nassert longest([\"\", \"a\", \"\", \"b\", \"ab\", \"aba\"]) == \"ab\"\n\n\ndef only_vowels(s: str) -> str:\n    \"\"\" Return the string with only vowels, starting from the first character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef longest_list(strings: List[str]) -> List[str]:\n    \"\"\" Out of list of strings, return list of all longest strings.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     longest([\"abc\", \"abd\", \"abcd\"]) == \"abcd\"\nassert longest([\"abc\", \"abd\", \"abcd\", \"abc\"]) == \"abc\"\nassert longest([\"\", \"abc\", \"\"]) == \"abc\"\nassert longest([\"a\", \"b\", \"c\"]) == \"a\"\nassert longest([\"a\", \"b\", \"ab\", \"abd\", \"abcd\", \"abc\"]) == \"abcd\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     longest([\"abc\", \"aaa\", \"a\"]) == \"aaa\"\nassert     longest([\"a\", \"abc\", \"aaa\", \"a\"]) == \"abc\"\nassert     longest([\"a\", \"abc\", \"aaa\", \"a\", \"abc\", \"aaa\"]) == \"abc\"\nassert     longest([\"\", \"abc\", \"aaa\", \"a\"]) == \"abc\"\nassert     longest([\"abc\", \"aaa\", \"a\", \"\"]) == \"abc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (longest([\"abc\", \"xyz\", \"ab\", \"z\", \"a\", \"abcdef\"]) == \"abcdef\"), \"Wrong result for longest\"\nassert     (longest([\"a\", \"abc\", \"cba\", \"zzzzzz\", \"ababab\"]) == \"zzzzzz\"), \"Wrong result for longest\"\nassert     (longest([\"a\", \"abc\", \"cba\", \"zzzzzz\", \"ababab\", \"aaaaaaaa\", \"bbbbbbbbbb\"]) == \"aaaaaaaa\"), \"Wrong result for longest\"\nassert     (longest([]) == None), \"Wrong result for empty list\"\nassert     (longest([\"zzzzzzz\"]) == \"zzzzzzz\"), \"Wrong result for list with single element\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \ngreatest_common_divisor(2, 9) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(5, 6) == 1\ngreatest_common_divisor(7, 9) == 1\ngreatest_common_divisor(11, 3) == 3\ngreatest_common_divisor(2, 2) == 2\ngreatest_common_divisor(4, 4) == 4\ngreatest_common_divisor(9, 3) == 3\ngreatest_common_divisor(7, 9) == 1\ngreatest_common_divisor(8, 8) == 8\ngreatest_common_divisor(7, 8) == 1\ngreatest_common_divisor(10, 7) == 1\ngreatest_common_divisor(12, 6) == 6\ngreatest_common_divisor(11, 12) == 1\ngreatest_common_divisor(11, 12) == 1\ngreatest_common_divisor(1, 1) == 1\ngreatest_common_divisor(0, 1) == 1\ngreatest_common_divisor(1, 0) == 1\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(1, 10) == 1\ngreatest_common_divisor(2, 20) == 2\ngreatest_common_divisor(1, 100) == 1\ngreatest_common_divisor(2, 100) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(2, 0) == 1\ngreatest_common_divisor(8, 3) == 2\ngreatest_common_divisor(16, 6) == 4\ngreatest_common_divisor(16, 4) == 4\ngreatest_common_divisor(16, 2) == 4\ngreatest_common_divisor(16, 8) == 4\ngreatest_common_divisor(16, 16) == 16\ngreatest_common_divisor(16, 32) == 16\ngreatest_common_divisor(16, 32) == 16\ngreatest_common_divisor(16, 4) == 16\ngreatest_common_divisor(16, 8) == 16\ngreatest_common_divisor(16, 16) == 16\ngreatest_common_divisor(16, 32) == 16\ngreatest_common_divisor(32, 8) == 8\ngreatest_common_divisor(32, 16) == 8\ngreatest_common_divisor(32, 16) == 8\ngreatest_common_divisor(32, 32) == 32\ngreatest_common_divisor(32, 16) == 32\ngreatest_common_divisor(32, 4) == 32\ngreatest_common_divisor(32, 8) == 32\ngreatest_common_divisor(32, 16) == 32\ngreatest_common_divisor(32, 32) == 32\ngreatest_common_divisor(32, 64) == 32\ngreatest_common_divisor(32, 32) == 32\ngreatest_common_divisor(32, 64) == 32\ngreatest_common_divisor(32, 32) == 32\ngreatest_common_divisor(32, 64) == 32\ngreatest_common_divisor(64, 8) == 8\ngreatest_common_divisor(64, 16) == 8\ngreatest_common_divisor(64, 32) == 8\ngreatest_common_divisor(64, 64) == 64\ngreatest_common_divisor(64, 32) == 64\ngreatest_common_divisor(64, 16) == 64\ngreatest_common_divisor(64, 8) == 64\ngreatest_common_divisor(64, 64) == 64\ngreatest_common_divisor(64, 128) == 64\ngreatest_common_divisor(64, 64) == 6"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(6,     9) == 3\nassert     greatest_common_divisor(6,     12) == 6\nassert     greatest_common_divisor(9,     12) == 3\nassert     greatest_common_divisor(3,     12) == 3\nassert     greatest_common_divisor(0,     12) == 12\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(12, 17) == 1\nassert     greatest_common_divisor(17, 12) == 1\nassert     greatest_common_divisor(9, 17) == 1\nassert     greatest_common_divisor(17, 9) == 1\nassert     greatest_common_divisor(13, 17) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \ngreatest_common_divisor(2, 7) == 1\ngreatest_common_divisor(10, 20) == 10\ngreatest_common_divisor(7, 10) == 1\ngreatest_common_divisor(10, 20) == 10\ngreatest_common_divisor(1, 10) == 1\ngreatest_common_divisor(10, 1) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(0, 2) == 2\ngreatest_common_divisor(0, 1) == 1\ngreatest_common_divisor(1, 0) == 1\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 0) == 1\ngreatest_common_divisor(0, 1) == 1\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(0, 2) == 2\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(0, 2) == 2\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(0, 2) == 2\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 2) == 1\ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(4, 2) == "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \ngreatest_common_divisor(12, 15) == 3\ngreatest_common_divisor(15, 12) == 3\ngreatest_common_divisor(10, 15) == 5\ngreatest_common_divisor(15, 10) == 5\ngreatest_common_divisor(14, 10) == 2\ngreatest_common_divisor(13, 17) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(4, 6) == 2\nassert     greatest_common_divisor(5, 10) == 5\nassert     greatest_common_divisor(15, 15) == 15\nassert     greatest_common_divisor(15, 25) == 5\nassert     greatest_common_divisor(1, 15) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(5, 8) == 1\nassert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(4, 8) == greatest_common_divisor(8, 4)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(4, 6) == 2\nassert     greatest_common_divisor(6, 4) == 2\nassert     greatest_common_divisor(16, 10) == 4\nassert     greatest_common_divisor(5, 2) == 1\nassert     greatest_common_divisor(6, 7) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"pneumonoultramicroscopicsilicovolcanoconiosis\") == [\n    \"\",\n    \"p\",\n    \"pne\",\n    \"pneum\",\n    \"pneumon\",\n    \"pneumo\",\n    \"pneumonoult\",\n    \"pneumonoultrami\",\n    \"pneumonoultramicro\",\n    \"pneumonoultramicroscop\",\n    \"pneumonoultramicroscopi\",\n    \"pneumonoultramicroscopics\",\n    \"pneumonoultramicroscopicsil\",\n    \"pneumonoultramicroscopicsilic\",\n    \"pneumonoultramicroscopicsilico\",\n    \"pneumonoultramicroscopicsilicovol\",\n    \"pneumonoultramicroscopicsilicovolcan\",\n    \"pneumonoultramicroscopicsilicovolcanocon\",\n    \"pneumonoultramicroscopicsilicovolcanoconiosis\",\n]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"cba\") == [\"c\", \"cb\", \"cba\"]\nassert     all_prefixes(\"\") == []\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('ab') == ['', 'a', 'ab']\nassert     all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abcde') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde']\nassert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"abc\") == [\"\"]\nassert     all_prefixes(\"abcd\") == [\"\", \"a\", \"ab\", \"abc\", \"b\", \"bc\", \"bcd\", \"c\", \"cd\", \"d\"]\nassert     all_prefixes(\"abracadabra\") == [\"\", \"a\", \"ab\", \"abc\", \"abra\", \"abrac\", \"abracad\", \"abracadab\", \"abracadabra\"]\nassert     all_prefixes(\"\") == [\"\"]\n\n\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     all_prefixes('all') == ['a', 'all', '']\nassert     all_prefixes('taste') == ['a', 'taste', 'ta', 't','s', '','st']\nassert     all_prefixes('angel') == ['a', 'an', 'an', 'angel', '', '', '']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     all_prefixes('abracadabra') == [\n        '', 'a', 'ab', 'abr', 'abra', 'abrac', 'abracad', 'abracadab', 'abracadabra'\n    ], all_prefixes('abracadabra')\nassert     all_prefixes('def') == [\n        'd', 'de', 'def'\n    ], all_prefixes('def')\nassert     all_prefixes('ghi') == [\n        'g', 'gh', 'ghi'\n    ], all_prefixes('ghi')\nassert     all_prefixes('jkl') == [\n        'j', 'jl', 'jk', 'jkl'\n    ], all_prefixes('jkl')\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('abcx') == ['', 'a', 'ab', 'abc', 'abx', 'axc', 'xc']\nassert     all_prefixes('abcxbc') == ['', 'a', 'ab', 'abc', 'abx', 'axc', 'xbc', 'bcx', 'cx', 'cxb', 'xb', 'xbc', 'bcx', 'cx']\nassert     all_prefixes('abcxbcx') == ['', 'a', 'ab', 'abc', 'abx', 'axc', 'xbc', 'bcx', 'cx', 'cxb', 'xb', 'xbc', 'bcx', 'cxx', 'cxxb', 'xbcx', 'xbcxb', 'bcxb', 'cxb', 'cxbc', 'xbcxb', 'bcxbc', 'xbcxbc', 'bcxbcx', 'xbcxbcx', 'bcxbcx', 'cxbcx', 'cxbcxb', 'xbcxbcx', 'bcxbcxb', 'cxbcxb', 'cxbcxbc']\nassert     all_prefixes('abcxbcxbc') == ['', 'a', 'ab', 'abc', 'abx', 'axc', 'xbc', 'bcx', 'cx', 'cxb', 'xb', 'xbc', 'bcx', 'cxx', 'cxb', 'xb', 'xbc', 'bcx', 'cxx', 'cxxb', 'xbcx', 'xbcxb', 'bcxb', 'cxb', 'cxbc', 'xbcxb', 'bcxbc', 'cxbcx', 'xbcxbc', 'bcxbcx', 'cxbcxbc']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abracadabra') == ['a', 'ab', 'abc', 'abr', 'abra', 'ac', 'ad', 'adb', 'adbr', 'adbra', 'a', 'ad', 'adb', 'adbr', 'adbra']\nassert     all_prefixes('zophie') == ['z', 'zo', 'zop', 'zoe', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'z', 'zo', 'zop', 'zoe', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'z', 'zo', 'zop', 'zoe', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', 'zph', 'zpo', 'zoo', 'zp', "
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     all_prefixes('abracadabra') == ['a', 'ab', 'abr', 'abra', 'abrac', 'abracad', 'abracadab', 'abracadabra']\nassert     all_prefixes('abracadabraa') == ['a', 'ab', 'abr', 'abra', 'abrac', 'abracad', 'abracadab', 'abracadabra', 'abracadabraa']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"abc\") == ['', 'a', 'ab', 'abc']\nassert     all_prefixes(\"ababc\") == ['', 'a', 'ab', 'abc', 'abab', 'ababc']\nassert     all_prefixes(\"ababababc\") == ['', 'a', 'ab', 'abc', 'abab', 'ababc', 'ababab', 'abababc', 'abababab', 'ababababc']\n\ndef is_substring(substr: str, str: str) -> bool:\n    \"\"\" Return true iff substr is a substring of str\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(20) == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n\ndef number_to_string(n: int) -> str:\n    \"\"\" Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(9) == \"0 1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert         string_sequence(0) == \"0\"\nassert         string_sequence(1) == \"0 1\"\nassert         string_sequence(2) == \"0 1 2\"\nassert         string_sequence(3) == \"0 1 2 3\"\nassert         string_sequence(5) == \"0 1 2 3 4 5\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \" 0\"\nassert     string_sequence(2) == \" 0 1\"\nassert     string_sequence(3) == \" 0 1 2\"\nassert     string_sequence(4) == \" 0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef divisors(n: int) -> list:\n    \"\"\" Return a list of all the positive divisors of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(10) == \"0 10\"\nassert     string_sequence(15) == \"0 10 11 12 13 14\"\nassert     string_sequence(20) == \"0 10 11 12 13 14 15 16 17 18 19 20\"\nassert     string_sequence(30) == \"0 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\nprint(\"PASSED\")"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0 1'\nassert     string_sequence(2) == '0 1 2'\nassert     string_sequence(3) == '0 1 2 3'\nassert     string_sequence(4) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0 1'\nassert     string_sequence(2) == '0 1 2'\nassert     string_sequence(3) == '0 1 2 3'\nassert     string_sequence(4) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_sequence(0) == '0'\nassert string_sequence(1) == '0 1'\nassert string_sequence(2) == '0 1 2'\nassert string_sequence(3) == '0 1 2 3'\nassert string_sequence(4) == '0 1 2 3 4'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_distinct_characters('abcABC') == 3\nassert count_distinct_characters('abc') == 3\nassert count_distinct_characters('AABBCC') == 3\nassert count_distinct_characters('AABBCCGGGG') == 7\nassert count_distinct_characters('ABCDEABCDE') == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aBc\") == 3\nassert     count_distinct_characters(\"aAa\") == 2\n\ndef count_distinct_characters_with_dict(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        using a dictionary\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aAb\") == 2\nassert     count_distinct_characters(\"aAaAbbb\") == 3\n\ndef count_distinct_characters_slower(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n        Hint: use set data type\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"aa\") == 2\nassert     count_distinct_characters(\"aA\") == 2\nassert     count_distinct_characters(\"abcABC123\") == 6\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"abcabc\") == 3\nassert     count_distinct_characters(\"ABCabc\") == 3\nassert     count_distinct_characters(\"aabbc\") == 3\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"AAaa\") == 2\nassert     count_distinct_characters(\"AaA\") == 2\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aaaaaaaaaaa\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(string='aaa') == 3\nassert     count_distinct_characters(string='AAA') == 3\nassert     count_distinct_characters(string='aaAA') == 3\nassert     count_distinct_characters(string='aaaa') == 1\nassert     count_distinct_characters(string='aA') == 2\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_music('o oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| oo| "
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_music(\"ooooo.|...oo\") == [2, 2, 2, 2, 2, 2, 2, 1]\nassert     parse_music(\"o|...o|oo\") == [4, 2, 2, 2, 1]\nassert     parse_music(\"o|...o|oo\") == [4, 2, 2, 2, 1]\nassert     parse_music(\"oo\") == [2, 1]\nassert     parse_music(\"o|\") == [1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_music('.o|...|.o|o.') == [1, 2, 4, 2, 1, 4, 2, 1, 1, 1, 2, 1, 4, 2, 1]\nassert     parse_music('...|.o|.o|..o') == [1, 2, 4, 2, 1, 4, 4, 4, 4, 2, 1, 4, 4, 4, 4]\nassert     parse_music('o.o|.o|o..') == [2, 4, 2, 1, 1, 4, 2, 1, 1, 1, 1, 4, 2, 1]\nassert     parse_music('..o|o.o|o.o|..o') == [1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1]\nassert     parse_music('o|o|o|o|o|o|o.') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_music(\"1234o.567|\") == [4, 2, 4, 1, 2, 0, 0, 1, 2]\nassert     parse_music(\"1234o.567|\") == [4, 2, 4, 1, 2, 0, 0, 1, 2]\nassert     parse_music(\"1234o.567|\") == [4, 2, 4, 1, 2, 0, 0, 1, 2]\nassert     parse_music(\"1234o.567|\") == [4, 2, 4, 1, 2, 0, 0, 1, 2]\nassert     parse_music(\"1234o.567|\") == [4, 2, 4, 1, 2, 0, 0, 1, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_music('o o o o o o') == [4, 2, 1, 4, 1, 4, 1, 4, 1, 4, 1]\nassert     parse_music('o| o| o| o|') == [4, 2, 1, 4, 1, 4, 1, 4, 1, 4, 1]\nassert     parse_music('o. o. o. o') == [4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1]\nassert     parse_music('o o|.|.| o|..|') == [4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4]\nassert     parse_music('o o o| o o| o.| o| o..|') == [4, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_music('.o|...o|.o|o..|..o|.o.|.o.o.|.o.o.o.|.o.o.o.o|.o.o.o.o.|...o.o|...o.o|...o.o|.o.o.o.o.o.|.o.o.o.o.o.|.o.o.o.o.o.o.') == [2, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.o|...o|.o|o..|..o|.o.|.o.o.|.o.o.o.|.o.o.o.o.|...o.o|...o.o|...o.o|.o.o.o.o.o.|.o.o.o.o.o.o.') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.o|...o|.o|o..|..o|.o.|.o.o.|.o.o.o.|.o.o.o.o.|...o.o|...o.o|...o.o|.o.o.o.o.o.|.o.o.o.o.o.o.') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.o|...o|.o|o..|..o|.o.|.o.o.|.o.o.o.|.o.o.o.o.|...o.o|...o.o|...o.o|.o.o.o.o.o.|.o.o.o.o.o.o.') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('.o|...o|.o|o..|..o|.o.|.o.o.|.o.o.o.|.o.o.o.o.|...o.o|...o.o|...o.o|.o.o.o.o.o.|.o.o.o.o.o.o.') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_music('oo') == [4, 2, 2, 2]\nassert     parse_music('oo|oo') == [4, 2, 2, 2, 2, 2]\nassert     parse_music('o|.o|o|') == [2, 2, 1, 1, 1, 1]\nassert     parse_music('oo') == [4, 2, 2, 2]\nassert     parse_music('.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_music(\"o oo|.|oo\") == [4, 2, 4]\nassert     parse_music(\"oo|..|.|.oo\") == [4, 2, 4, 2, 4]\n\n\ndef merge_beats(beats: List[int]) -> List[int]:\n    \"\"\" Your task is to merge the list of integers into a single list, so that each element of this list\n    represents the total number of beats of the notes that come before it.\n\n    You should merge them in the following way:\n\n    if we have the following notes sequence: o o o o o o o\n    then the merged sequence should be: 4 4 4 4 4 4\n    \"\"\"\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_music('..|..|..|.o|..|..|..|..') == [1, 1, 1, 1, 1, 4, 2]\nassert     parse_music('o|..|..|..|o|.|..|..') == [4, 1, 1, 4, 1, 1, 1]\nassert     parse_music('o|..|..|.|o|..|..|..') == [4, 1, 1, 1, 4, 1, 1]\nassert     parse_music('o|..|..|.|o|..|..|..') == [4, 1, 1, 1, 4, 1, 1]\nassert     parse_music('o|..|..|..|o|.|o|..|..') == [4, 1, 1, 1, 1, 4, 1, 1]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     how_many_times(\"abcdabcdababcd\", \"ab\") == 6\nassert     how_many_times(\"abcdabcdababcd\", \"cd\") == 2\nassert     how_many_times(\"abcdabcdababcd\", \"\") == 10\nassert     how_many_times(\"aaaaaaaaaaaa\", \"aaaaa\") == 5\n\n\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     how_many_times('ababababab', 'ab') == 8\nassert     how_many_times('aababab', 'ab') == 4\nassert     how_many_times('', '') == 0\nassert     how_many_times('', 'a') == 0\nassert     how_many_times('ababababab', '') == 10\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     how_many_times('aba', 'a') == 2\nassert     how_many_times('aba', 'b') == 1\nassert     how_many_times('abcd', 'd') == 1\nassert     how_many_times('abcd', 'cd') == 1\nassert     how_many_times('abcd', 'bc') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     how_many_times(\"alacazam\", \"a\") == 3, \"Example #1\"\nassert     how_many_times(\"alacazam\", \"z\") == 1, \"Example #2\"\nassert     how_many_times(\"alacazam\", \"aa\") == 2, \"Example #3\"\nassert     how_many_times(\"alacazam\", \"az\") == 2, \"Example #4\"\nassert     how_many_times(\"alacazam\", \"ac\") == 1, \"Example #5\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     how_many_times('abab', 'a') == 3, \"Simple example\"\nassert     how_many_times('abab', 'b') == 2, \"Simple example\"\nassert     how_many_times('aaaaa', 'a') == 1, \"Simple example\"\nassert     how_many_times('aaaaa', 'b') == 0, \"Simple example\"\nassert     how_many_times('abab', 'ab') == 2, \"Repeating letters\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     how_many_times('aaaa', 'aa') == 0\nassert     how_many_times('aa', 'aa') == 1\nassert     how_many_times('aaabbb', 'aa') == 2\nassert     how_many_times('aaaa', 'b') == 0\nassert     how_many_times('abababa', 'aba') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     how_many_times('abcde', 'b') == 1\nassert     how_many_times('abcde', 'd') == 2\nassert     how_many_times('abcde', 'ee') == 0\nassert     how_many_times('abcde', 'c') == 1\nassert     how_many_times('abcde', 'a') == 2\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_numbers(\"four five nine three two one six seven\") == \"one two three four five six seven nine\"\nassert     sort_numbers(\"nine seven three four eight one six\") == \"one six three seven four eight\"\nassert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"eight seven five six four three two\") == \"two three four five six seven eight\"\nassert     sort_numbers(\"three five four six seven eight nine ten eleven twelve\") == \"three five four six seven eight nine ten eleven twelve\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n\n\ndef get_full_name(first_name: str, last_name: str) -> str:\n    \"\"\"Return a string of the full name (last name first).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_numbers('one nine two eight seven six five four three') == 'one nine two eight seven six five four three'\nassert     sort_numbers('zero nine one eight two seven six five four three') == 'zero nine one eight two seven six five four three'\nassert     sort_numbers('eight five six seven four three two one nine') == 'one nine two three four five six seven'\nassert     sort_numbers('nine eight one two three four five six seven') == 'one two three four five six seven eight'\nassert     sort_numbers('zero') == 'zero'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_numbers('9 10 3') == '3 10 9'\nassert     sort_numbers('9 10 3') == '3 10 9'\nassert     sort_numbers('3 10 9') == '3 10 9'\nassert     sort_numbers('3 3 3') == '3 3 3'\nassert     sort_numbers('3 0 3') == '0 3 3'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_numbers('nine one four seven two eleven eight three five six') == '0123456789'\nassert     sort_numbers('four three two one') == '1324'\nassert     sort_numbers('zero nine seven eight four six three two five one') == '0123456789'\nassert     sort_numbers('three five six two zero seven four eight nine one two') == '01245678912'\n\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \n\nif __name__ == \"__main__\":\n    print(\"Test example 1\")\n    print(sort_numbers('five one seven three two one'))\n    print(sort_numbers('seven ten three three'))\n    print(sort_numbers('ten one three nine')"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_numbers('zero nine one four three two') == 'zero one two three four'\nassert     sort_numbers('nine three eight five six two four') == 'two four three eight five six'\nassert     sort_numbers('nine three one eight five six two') == 'one two three six five eight'\n\n\ndef make_change(amount: int, denominations: List[int]) -> int:\n    \"\"\" Given an amount and a list of denominations, return the number of ways to make change for the amount\n    using the given denominations.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_numbers('9 8 7 6 5 4 3 2 1 0 -1') == \\\n        '0 1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('9 -8 7 6 -5 4 3 2 1 0') == \\\n        '-8 -1 0 1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('0') == '0'\nassert     sort_numbers('0 0') == '0 0'\nassert     sort_numbers('0 9 9') == '0 9 9'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_numbers('nine one zero two three four five six seven eight') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('four five three two one') == 'one two three four five'\nassert     sort_numbers('eight nine three four five six seven') == 'three four five six seven eight nine'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_numbers('eight one zero two three five six seven four') == '012396854'\nassert     sort_numbers('zero one two three four five six seven eight nine') == '01234567890'\nassert     sort_numbers('four five six seven three two one zero') == '01245678321'\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a string of space-delimited letters.\n    'Valid choices are 'a' and 'b'.\n    Return the string with letters sorted from lowest to highest\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_closest_elements([10, 20, 30, 40, 50, 20]) == (20, 50)\nassert     find_closest_elements([10, 20, 30, 40, 50, 10]) == (10, 40)\nassert     find_closest_elements([10, 20, 30, 40, 50, 10, 30]) == (10, 40)\nassert     find_closest_elements([10, 20, 30, 40, 50, 20, 30, 40, 50, 10, 30, 20, 40, 50]) == (20, 50)\n\n\ndef find_longest_sequence(numbers: List[float]) -> int:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return the longest sequence\n    (ordered by absolute magnitude) that can be obtained by deleting exactly one element from it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1, 1]) == (1, 1)\nassert     find_closest_elements([1, 2, 3, 4]) == (1, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([3, 4, 5, 6]) == (4, 6)\nassert     find_closest_elements([1, 3, 5, 7, 9]) == (1, 9)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_closest_elements([1, 1, 3, 6, 9]) == (1, 9), \"Incorrect output\"\nassert     find_closest_elements([1, 1, 3, 6, 9, 10, 12]) == (6, 12), \"Incorrect output\"\nassert     find_closest_elements([1, 1, 3, 6, 9, 10, 12, 2, 10, 6]) == (6, 10), \"Incorrect output\"\nassert     find_closest_elements([1, 1, 3, 6, 9, 10, 12, 2, 10, 6, 4]) == (6, 10), \"Incorrect output\"\nassert     find_closest_elements([1, 1, 3, 6, 9, 10, 12, 2, 10, 6, 4, 1]) == (6, 10), \"Incorrect output\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_closest_elements([0.25, 0.50, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75]) == \\\n    (1.0, 2.0)\nassert     find_closest_elements([3.0, 3.25, 3.5, 3.75, 4.0, 4.25, 4.5, 4.75, 5.0, 5.25, 5.5, 5.75, 6.0, 6.25, 6.5, 6.75]) == \\\n    (3.0, 6.0)\nassert     find_closest_elements([-0.25, -0.50, -0.75, -1.0, -1.25, -1.5, -1.75, -2.0, -2.25, -2.5, -2.75, -3.0, -3.25, -3.5, -3.75]) == \\\n    (-2.0, -0.25)\nassert     find_closest_elements([1.25, 1.5, 1.75, 2.25, 2.5, 2.75, 3.25, 3.5, 3.75, 4.25, 4.5, 4.75, 5.25, 5.5, 5.75, 6.25]) == \\\n    (1.5, 4.25)\n\n\ndef find_largest_product_of_3(numbers: List[float]) -> float:\n    \"\"\"\n    From a list of numbers, find the largest product of three numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_closest_elements([2, 7, 3, 5, 1]) == (1, 3)\nassert     find_closest_elements([2, 7, 3, 5, 1, 100]) == (1, 3)\nassert     find_closest_elements([2, 7, 3, 5, 1, 100, 300]) == (1, 3)\nassert     find_closest_elements([2, 7, 3, 5, 1, 100, 300, 444]) == (1, 3)\n\n\ndef is_list_permutation(l1: List[int], l2: List[int]) -> bool:\n    \"\"\" Assumes the lists are of same length. Return True if one of the lists is a permutation of the other.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef find_all_closest_elements(numbers: List[float]) -> List[Tuple[float, float]]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 3, 5, 7, 9]) == (1, 9)\nassert     find_closest_elements([1, 3, 5, 7, 9, 5, 7, 8, 9, 10]) == (1, 9)\nassert     find_closest_elements([1, 2, 3, 4, 5, -1]) == (1, 2)\nassert     find_closest_elements([1, 3, 5, -3, -5, -1]) == (-5, -3)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1.0, 2.0, 3.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 2.0, 2.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0]) == (1.0, 4.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (1.0, 5.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == (1.0, 6.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef find_greater_elements(numbers: List[float]) -> List[float]:\n    \"\"\" From a supplied list of numbers (of length at least two) find and return the largest element that is greater\n    than its nth neighbour in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1.0, 1.0, 3.0, 4.0, 5.0]) == (1.0, 4.0)\nassert     find_closest_elements([5.0, 5.0, 5.0, 5.0, 5.0]) == (5.0, 5.0)\nassert     find_closest_elements([1.0, 3.0, 2.0, 4.0, 5.0]) == (1.0, 3.0)\nassert     find_closest_elements([1.0, 3.0, 4.0, 5.0, 2.0]) == (1.0, 3.0)\nassert     find_closest_elements([3.0, 3.0, 3.0, 5.0, 5.0]) == (3.0, 5.0)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0, 1, 1]\nassert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1, 2, 3, 4]) == [0, 1, 1, 1]\nassert     rescale_to_unit([1, 2, -3]) == [0, 1, -1]\nassert     rescale_to_unit([0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    # rescale_to_unit([0, 0]) == [0, 0]\n    # rescale_to_unit([1, 1]) == [0, 0]\n    # rescale_to_unit([2, 3]) == [0, 0.5]\n    # rescale_to_unit([3, 2]) == [0.5, 0.5]\n    # rescale_to_unit([2, 2]) == [0.25, 0.75]\n    # rescale_to_unit([4, 1, 2]) == [0.25, 0.25, 0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([0, 0]) == [0, 0]\nassert rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0, 0, 0.8, 1]\nassert rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nassert rescale_to_unit([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 0.2, 0.4, 0.6, 0.8, 1, 1, 1, 1, 1, 1]\n\n\ndef normalize_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the mean is 0 and the variance is 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([0.5, 1.5]) == [0.25, 0.75]\nassert     rescale_to_unit([0.5, 2.5, 1.5]) == [0.25, 0.5, 0.75]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [0.0, 0.0, 0.0] == rescale_to_unit([3.0, 3.0, 3.0])\nassert     [0.2, 0.3, 0.4] == rescale_to_unit([2.0, 3.0, 4.0])\nassert     [0.4, 0.5, 0.6] == rescale_to_unit([0.4, 0.5, 0.6])\nassert     [0.0, 0.0, 1.0] == rescale_to_unit([0.0, 0.0, 0.0])\nassert     [1.0, 0.5, 0.25] == rescale_to_unit([1.0, 0.5, 0.25])\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([3, 4]) == [0.75, 0.5]\nassert rescale_to_unit([1, 2, 3, 4, 5]) == [0.25, 0.5, 0.75, 0.25, 0.0]\nassert rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0.25, 0.5, 0.75, 0.25, 0.5, 0.0]\nassert rescale_to_unit([1, 2, 3, 4, 5, 6, 7]) == [0.25, 0.5, 0.75, 0.25, 0.5, 0.75, 0.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef rescale_to_zero_one(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([2, 4, 6]) == [0.5, 1.0, 1.5]\nassert     rescale_to_unit([2, 4]) == [0.5, 1.0]\nassert     rescale_to_unit([2]) == [0.5]\nassert     rescale_to_unit([]) == []\n\n\ndef average(numbers: List[float]) -> float:\n    \"\"\" Given list of numbers, return the average\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1,2,3]) == [0,1,1.5]\nassert     rescale_to_unit([1,0]) == [0,1]\nassert     rescale_to_unit([1,1,1]) == [0,0,0]\nassert     rescale_to_unit([0,1,2]) == [0,0.5,1]\nassert     rescale_to_unit([1,2,3,4]) == [0,1,1.5,2]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([0, -1]) == [0, 1]\nassert     rescale_to_unit([1, 2, 3]) == [0, 1, 2]\nassert     rescale_to_unit([2, 3, 4, 1]) == [0, 1, 1, 1]\nassert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]\nassert     rescale_to_unit([1, 1, 1, 1, 1]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_integers(['5', 'a', 7, 'a', 3]) == [5, 7, 3]\nassert     filter_integers(['1', 0, 3, 5, '5']) == [1, 0, 3, 5]\nassert     filter_integers(['4', 'a', 'a', '5', '6']) == [4, 5, 6]\nassert     filter_integers([]) == []\n\n\ndef remove_redundant_strings(values: List[Any]) -> List[Any]:\n    \"\"\" Remove redundant strings from given list of strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 'a', 'b', 'c']) == [1, 2, 3, 4, 5]\nassert     filter_integers([1, 'a', 'b', 3, 4, 5]) == [1, 3, 4, 5]\nassert     filter_integers(['a', 'b', 'c', 1, 2, 3]) == []\n\nprint('filter_integers is correct')\n\ndef separate_positive_negative(values: List[int]) -> (List[int], List[int]):\n    \"\"\" Separate positive and negative values from given list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3, 'a', 'b', 5, 7, 2.0, 4, 6, None]) == [1, 2, 3, 5, 7]\nassert     filter_integers([1, 2, 3, 'a', 'b', 'c', 7, 2.0, 4, 6, None]) == [1, 2, 3, 7]\nassert     filter_integers([]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_integers([1,2,'3',4]) == [1,2,4]\nassert     filter_integers([1,2,3,4,5,6]) == [1,2,3,4,6]\nassert     filter_integers([1.3,2.4,3.5,4.6]) == []\nassert     filter_integers([1.3,2.4,'3.5',4.6]) == [1.3,2.4,4.6]\nassert     filter_integers([1,2,3,'4',5,6]) == [1,2,3,5,6]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_integers([\"0\", \"1\", \"2\", \"3\", \"4\"]) == [0, 1, 2, 3]\nassert     filter_integers([0, 1, 2, 3, 4]) == [0, 1, 2, 3]\nassert     filter_integers([]) == []\nassert     filter_integers([1, \"a\", 2, 3, 4]) == []\nassert     filter_integers([1, 1, 1, 2, 3, 4]) == [1, 1, 1, 2]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([1, 2, \"a\", 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([1, 2, 3, \"4\", 5]) == [1, 2, 3, 5]\nassert     filter_integers([]) == []\n\n\ndef process_dataset(ds_path: str) -> None:\n    \"\"\" Processed the dataset file in DS_PATH and saved the new file in ds_path\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [1, 2, 3, 4] == filter_integers([1, '2', 3, 4, 'a', 'b'])\nassert     [1, 2, 3, 4] == filter_integers([1, 2, 3, 4])\nassert     [1, 2, 3, 4] == filter_integers([1, 2, 3, 4, None, 'a', 'b'])\nassert     [] == filter_integers([None, 'a', 'b'])\nassert     [] == filter_integers([])\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_integers(['a', 2, 4, 6, 'c', 'd', 'a']) == \\\n        [2, 4, 6, 2, 2, 2]\n\nassert     filter_integers([1, 2, 'a', 'b', 4, 6, 'c', 'd', 'a']) == \\\n        [2, 4, 6]\n\nassert     filter_integers([1, 2, 'a', 'b', 4, 6, 'c', 'd', 'a']) == \\\n        [2, 4, 6]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [1, 2, 3, 4, 5] == filter_integers(\n    [1, \"2\", 3, 4, 5])\nassert     [] == filter_integers(\n    [1, \"2\", 3, 4, 5])\n\n\ndef filter_lists_of_integers(values: List[List[int]]) -> List[List[int]]:\n    \"\"\" Filter given list of lists of integers only for integers\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1, '2', 3, 4, 5, 6]) == [1, 3, 4, 5, 6]\nassert     filter_integers([1, 2, 3, '4', 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1, 2, 3, '4', 5, '6']) == [1, 2, 3, 4, 5, 6]\n\nprint('filter_integers success')\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     strlen('hello world') == 10\nassert strlen('helloworld') == 6\nassert strlen('aaaaaaa') == 5\nassert strlen('') == 0\nassert strlen(' ') == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strlen(\"dog\") == 3, \"incorrect length\"\nassert     strlen(\"hello\") == 5, \"incorrect length\"\nassert     strlen(\"\") == 0, \"incorrect length\"\nassert     strlen(\" \") == 1, \"incorrect length\"\n\ndef strcmp(str1: str, str2: str) -> int:\n    \"\"\" Compares two strings lexicographically\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abc \") == 3\nassert     strlen(\"abc  \") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     strlen(str('Hello')) == 5\nassert strlen(str('')) == 0\nassert strlen(str(2**1000)) == 1000\n\ndef substr(string: str, start_idx: int, num: int) -> str:\n    \"\"\" Return substring of given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     strlen(\"apple\") == 5\nassert     strlen(\"banana\") == 6\nassert     strlen(\"\") == 0\nassert     strlen(\"1\") == 1\nassert     strlen(\"2\") == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     strlen('kitten') == 9\nassert     strlen('Hello') == 5\nassert     strlen('') == 0\n\ndef substr(string: str, index: int, length: int) -> str:\n    \"\"\" Return substring from given string from given index to given length\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strlen('I am a string') == 14\nassert     strlen('I am a string') ==     strlen('I am a string')\nassert     strlen('') ==             0\nassert     strlen(1234567) ==         7\n\ndef substr(string: str, start_idx: int, num_chars: int) -> str:\n    \"\"\" Return substring of given length starting at given index\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('a') ==     1\nassert     strlen('') ==     0\nassert     strlen('abcd') ==     4\nassert     strlen('abcde') ==     5\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     strlen(\"string\") == 9\nassert     strlen(\"\") == 0\nassert     strlen(\"  \") == 2\nassert     strlen(\"  string \") == 9\nassert     strlen(\"string\\t\") == 9\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_divisor(7) == 7\nassert     largest_divisor(15) == 3\nassert     largest_divisor(6) == 6\nassert     largest_divisor(1) == 1\nassert     largest_divisor(0) == 0\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_divisor(7) == 1\nassert     largest_divisor(8) == 2\nassert     largest_divisor(11) == 1\nassert     largest_divisor(24) == 6\nassert     largest_divisor(125) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(4) == 1\nassert     largest_divisor(5) == 5\nassert     largest_divisor(6) == 1\nassert     largest_divisor(7) == 7\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_divisor(1)                 == 1\nassert     largest_divisor(2)                 == 1\nassert     largest_divisor(3)                 == 1\nassert     largest_divisor(4)                 == 2\nassert     largest_divisor(5)                 == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef test_largest_divisor():\n    assert largest_divisor(6) == 3\n    assert largest_divisor(8) == 4\n    assert largest_divisor(10) == 5\n    "
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(7) == 1\nassert     largest_divisor(10) == 5\n\ndef sum_divisors(n: int) -> int:\n    \"\"\"For a given number n, calculate the sum of divisors of n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_divisor(24) == 4\nassert     largest_divisor(25) == 5\nassert     largest_divisor(22) == 2\nassert     largest_divisor(8) == 4\nassert     largest_divisor(12) == 6\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\ndef num_triangular_perms(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    pass\n\n\ndef triangle_num_divisors(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    pass\n\n\ndef num_divisors(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    pass\n\n\ndef num_divisors_fast(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n[factorize(2), factorize(3), factorize(4), factorize(5), factorize(6), factorize(7), factorize(8)] == [\n    [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]]\nassert\n[factorize(4), factorize(5), factorize(6), factorize(7), factorize(8)] == [\n    [2, 2], [2, 2], [2, 2], [2, 1], [2, 2]]\nassert\n[factorize(9), factorize(10), factorize(11), factorize(12), factorize(13), factorize(14)] == [\n    [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1]]\nassert\n[factorize(15), factorize(16), factorize(17), factorize(18), factorize(19), factorize(20)] == [\n    [3, 1], [3, 2], [3, 1], [3, 1], [3, 1], [3, 1]]\nassert\n[factorize(54), factorize(55), factorize(56), factorize(57), factorize(58)] == [\n    [3, 2], [3, 2], [3, 1], [3, 2], [3, 1]]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1, 2, 2, 3, 3, 5, 5, 7, 7] == factorize(35)\nassert     [1, 2, 2, 3, 3, 5] == factorize(10)\nassert     [1, 7, 7, 8, 8, 8, 13] == factorize(8128)\n\n\ndef prime_numbers(n: int) -> List[int]:\n    \"\"\" Return list of first n prime numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (24 == factorize(1.027) * factorize(2.0) * factorize(3.0) * factorize(4.0))\nassert     (120 == factorize(1.03) * factorize(2.0) * factorize(3.0) * factorize(4.0))\nassert     (factorize(1.025) == [1, 2, 5, 2])\nassert     (factorize(1.0) == [1])\nassert     (factorize(2.0) == [2])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (216 == factorize(216))\nassert     (2 == factorize(2))\nassert     (2 == factorize(7))\nassert     (2 == factorize(8))\nassert     ([2, 2, 2, 3] == factorize(8*3))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [factorize(1)     == [1]]\nassert     [factorize(2)     == [2]]\nassert     [factorize(4)     == [2, 2]]\nassert     [factorize(5)     == [5]]\nassert     [factorize(12)     == [2, 2, 3]]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (factorize(24) == [2,2,2,3])\nassert     (factorize(120) == [2,2,3,5])\nassert     (factorize(30) == [3,5])\nassert     (factorize(60) == [2,2,3,5])\nassert     (factorize(201) == [101,101])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 1200\n    print(f\"All prime factors of {n} are: \", factorize(n))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     factorize(24) == [2, 2, 2, 3]\nassert     factorize(36) == [2, 2, 3, 3]\nassert     factorize(625) == [5, 5, 7, 7]\nassert     factorize(1) == [1]\nassert     factorize(6) == [1, 2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n\nif __name__ == \"__main__\":\n    input_number = 600851475143\n    print(factorize(input_number))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1, 1]) == [1]\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [2, 3, 4, 7, 9] == remove_duplicates([1, 2, 2, 3, 3, 4, 4, 7, 9])\nassert     [2, 3, 4, 7, 9] == remove_duplicates([2, 2, 3, 3, 4, 4, 7, 9])\nassert     [2, 3, 4, 7, 9] == remove_duplicates([2, 2, 2, 3, 3, 4, 4, 7, 9])\nassert     [2, 3, 4, 7, 9] == remove_duplicates([2, 2, 2, 3, 3, 4, 4, 7, 9, 9])\n\n\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [1, 2, 3] == remove_duplicates([1, 2, 3])\nassert     [1, 2, 3] == remove_duplicates([1, 2, 3, 2, 1])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 2, 3, 4, 1, 2])\nassert     [1, 2, 3] == remove_duplicates([1, 2, 2, 3])\nassert     [] == remove_duplicates([])\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], remove_duplicates([1, 2, 3, 4, 5])\nassert     remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3], remove_duplicates([1, 1, 2, 2, 3, 3])\nassert     remove_duplicates([1, 1, 2]) == [1, 2], remove_duplicates([1, 1, 2])\nassert     remove_duplicates([]) == [], remove_duplicates([])\n\n\ndef remove_element(numbers: List[int], value: int) -> List[int]:\n    \"\"\" Remove all elements from a list equal to value.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 3, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 2, 3, 3]) == [1, 2, 3]\n\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4, 5, 6, 6, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_duplicates([2, 3, 3, 3, 6, 9, 9]) == [2, 3, 6, 9]\nassert     remove_duplicates([2, 2, 2, 11]) == [2, 11]\nassert     remove_duplicates([2, 2, 11, 11, 11]) == [2, 11]\nassert     remove_duplicates([2, 2, 11, 11, 11, 11]) == [2, 11]\nassert     remove_duplicates([2, 2, 11, 11, 11, 11, 11]) == [2, 11]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 5]) == [1, 2, 3, 5]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1]) == [1]\n\n\ndef remove_element(numbers: List[int], value: int) -> List[int]:\n    \"\"\" From a list of integers, remove all elements equal to value.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 2]) == [1, 2]\nassert     remove_duplicates([1, 1]) == [1]\nassert     remove_duplicates([1, 1, 2]) == [1, 2]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     flip_case(\"HELLO WORLD\") == \"hELLO wORLD\"\nassert     flip_case(\"Hello World\") == \"hELLO wORLD\"\n\nassert     flip_case(\"123456789\") == \"123456789\"\nassert     flip_case(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     flip_case(\"HELLO WORLD\") == \"hELLO wORLD\"\nassert     flip_case(\"HELLO WORLD\") == \"hELLO WORLD\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     flip_case(\"lower\") == \"LOWER\"\nassert     flip_case(\"UPPER\") == \"lower\"\nassert     flip_case(\"hi\") == \"Hi\"\nassert     flip_case(\"HELLO\") == \"hELLO\"\nassert     flip_case(\"This Is Title Case\") == \"tHIS iS iS tITLE CaSe\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     flip_case(\"Python\") == \"PYTHON\"\nassert     flip_case(\"Python3.6\") == \"PYTHON3.6\"\nassert     flip_case(\"PYTHON\") == \"python\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"a\") == \"A\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     flip_case('') == ''\nassert     flip_case('a') == 'A'\nassert     flip_case('A') == 'a'\nassert     flip_case('ABC') == 'Abc'\nassert     flip_case('ABCDE') == 'AbCdE'\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     flip_case(None) is None, \"None argument cannot be passed to flip_case()\"\nassert     flip_case(\"\") == \"\", \"An empty string should return an empty string\"\nassert     flip_case(\"hello\") == \"hELLO\", \"String with lowercase characters should be flipped to uppercase\"\nassert     flip_case(\"HeLlO\") == \"hELLO\", \"String with uppercase characters should be flipped to lowercase\"\nassert     flip_case(\"Hi There\") == \"iTHERE\", \"String with mixed case characters should be flipped to mixed case\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     flip_case(string='abc') == 'ABC'\nassert     flip_case(string='abc123') == 'AbC123'\nassert     flip_case(string='abc123def') == 'aBc123DeF'\nassert     flip_case(string='123abc') == '123Abc'\nassert     flip_case(string='') == ''\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\ndef swap_case(string: str) -> str:\n    \"\"\" For a given string, swap the case of all characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    #>>> flip_case('a')\n    #'A'\n    #>>> flip_case('A')\n    #'a'\n    #>>> flip_case('aBc')\n    #'AbC'\n    #>>> flip_case('abC')\n    #'AbC'\n    #>>> flip_case('abc')\n    #'Abc'\n    #>>> flip_case('abc')\n    #'Abc'\n    #>>> flip_case('ABC')\n    #'Abc'\n    #>>> flip_case('ABC')\n    #'Abc'\n    #>>> flip_case('abc')\n    #'Abc'\n    #>>> flip_case('ABC')\n    #'Abc'\n    #>>> flip_case('ABC')\n    #'Abc'\n    #>>> flip_case('abc')\n    #'Abc'\n    #>>> flip_case('ABC')\n    #'Abc'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     concatenate(['a', 'b', 'c']) == 'abc'\nassert     concatenate(['', 'a', 'b', 'c']) == 'abc'\nassert     concatenate(['a', '', 'b', 'c']) == 'abc'\nassert     concatenate(['a', 'b', '', 'c']) == 'abc'\nassert     concatenate(['', '', '', 'a', 'b', 'c']) == 'abc'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     concatenate(['A', 'B', 'C']) == 'ABC'\nassert     concatenate(['A', 'B', 'C', 'D']) == 'ABCD'\nassert     concatenate(['A', 'B', 'C', 'D', 'E']) == 'ABCDE'\nassert     concatenate(['A', 'B', 'C', 'D', 'E', 'F']) == 'ABCDEF'\nassert     concatenate(['A', 'B', 'C', 'D', 'E', 'F', 'G']) == 'ABCDEFGH'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(concatenate([\"hello\", \"world\"]))\n    print(concatenate([\"hello\", \"world\", \"to\", \"the\", \"Moon\"]))\n    print(concatenate([\"hello\", \"world\", \"to\", \"the\", \"Moon\", \"from\", \"the\", \"Earth\"]))"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     concatenate(['abc']) == 'abc'\nassert     concatenate(['abc', '123']) == 'abc123'\nassert     concatenate(['abc', '123', 'xyz']) == 'abc123xyz'\nassert     concatenate(['abc', '123', 'xyz', '12']) == 'abc123xyz12'\nassert     concatenate(['abc', '123', 'xyz', '12', 'xyz']) == 'abc123xyz12xyz'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"\"]) == \"abcdefghi\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"123\"]) == \"123\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     concatenate(['one', 'two', 'three']) == 'onetwothree'\nassert     concatenate(['one', 'two', 'three', 'four']) == 'onetwothreethreefour'\nassert     concatenate(['one', 'two', 'three', 'four', 'five']) == 'onetwothreethreefourfive'\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Determine whether the string is palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\",     'incorrect'\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\",     'incorrect'\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"abcdefg\",     'incorrect'\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"c\") == [\"cherry\", \"coconut\"]\nassert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"b\") == [\"banana\"]\nassert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"a\") == [\"apple\", \"cherry\"]\nassert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"a\", True) == [\"apple\", \"cherry\", \"banana\", \"coconut\"]\nassert     filter_by_prefix([\"apple\", \"cherry\", \"banana\", \"coconut\"], \"z\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"date\"], \"a\") == [\"apple\", \"banana\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"date\"], \"ba\") == [\"banana\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"date\"], \"c\") == [\"cherry\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"date\"], \"d\") == [\"date\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"cherry\", \"date\"], \"a\") == [\"apple\", \"banana\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"h\") == [\"hello\", \"my\", \"name\"]\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"\") == [\"hello\", \"my\", \"name\"]\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"he\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello\") == [\"hello\", \"my\", \"name\"]\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there\") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello there \") == []\n    filter_by_prefix([\"hello\", \"my\", \"name\"], \"hello ther"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([\"bob\", \"bobcat\", \"car\", \"badger\"], \"bo\") == [\"bob\", \"bobcat\"]\nassert     filter_by_prefix([\"car\", \"badger\", \"dog\", \"cat\", \"horse\"], \"car\") == [\"car\", \"badger\", \"dog\", \"cat\", \"horse\"]\nassert     filter_by_prefix([\"car\", \"badger\", \"dog\", \"cat\", \"horse\"], \"car\") == [\"car\", \"badger\", \"dog\", \"cat\", \"horse\"]\nassert     filter_by_prefix([\"car\", \"badger\", \"dog\", \"cat\", \"horse\"], \"car\") == [\"car\", \"badger\", \"dog\", \"cat\", \"horse\"]\nassert     filter_by_prefix([\"car\", \"badger\", \"dog\", \"cat\", \"horse\"], \"car\") == [\"car\", \"badger\", \"dog\", \"cat\", \"horse\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"asdf\", \"asdfj\", \"asdfk\", \"asdfjkl\"], \"asdf\") == [\"asdf\", \"asdfj\", \"asdfk\"], \"test #1: Failed\"\nassert     filter_by_prefix([\"asdf\", \"asdfj\", \"asdfk\", \"asdfjkl\"], \"as\") == [\"asdf\", \"asdfj\", \"asdfjk\"], \"test #2: Failed\"\nassert     filter_by_prefix([\"asdf\", \"asdfj\", \"asdfk\", \"asdfjkl\"], \"asd\") == [\"asdf\", \"asdfj\", \"asdfk\"], \"test #3: Failed\"\nassert     filter_by_prefix([\"asdf\", \"asdfj\", \"asdfk\", \"asdfjkl\"], \"\") == [\"asdf\", \"asdfj\", \"asdfk\", \"asdfjkl\"], \"test #4: Failed\"\nassert     filter_by_prefix([\"\", \"asdf\", \"asdfj\", \"asdfk\", \"asdfjkl\"], \"asdf\") == [\"asdf\", \"asdfj\", \"asdfk\"], \"test #5: Failed\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_prefix(['aa', 'ab', 'a', 'ac'], 'a') == ['a', 'a', 'a', 'ac']\nassert     filter_by_prefix(['a', 'aa', 'b', 'c'], 'a') == ['a', 'aa']\nassert     filter_by_prefix(['a', 'aa', 'b', 'c'], 'aa') == ['aa', 'aa']\nassert     filter_by_prefix(['aa', 'ab', 'a', 'ac'], 'a') == ['a', 'a', 'a', 'ac']\nassert     filter_by_prefix(['aa', 'ab', 'a', 'ac'], 'aa') == ['aa', 'aa', 'aa']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"h\", \"hello\", \"hellow\"], \"he\") == [\"h\", \"hello\"]\nassert     filter_by_prefix([\"s\", \"world\", \"hello\"], \"he\") == []\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\"], \"he\") == [\"hello\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\"], \"hi\") == []\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\"], \"hello\") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['abc', 'xyz'], 'x') == ['xyz']\nassert filter_by_prefix(['abc', 'xyz', 'xxx'], 'x') == ['xyz', 'xxx']\nassert filter_by_prefix(['abc', 'xyz', 'xxx'], 'x') == ['xyz', 'xxx']\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"hello\", \"goodbye\", \"welcome\"], \"good\") == [\"goodbye\", \"welcome\"]\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"welcome\"], \"xyz\") == []\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"welcome\"], \"\") == [\"hello\", \"goodbye\", \"welcome\"]\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"welcome\"], \"hello\") == [\"hello\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if a given string is a palindrome.\n    \"\"\"\n    pass\n\ndef filter_palindromes(strings: List[str]) -> List[str]:\n    \"\"\" Filter a list of strings for palindromes only.\n    \"\"\"\n    pass\n\ndef count_words(sentence: str) -> int:\n    \"\"\" Count the number of words in a sentence.\n    \"\"\"\n    pass\n\ndef filter_sentences(sentences: List[str], min_length: int) -> List[str]:\n    \"\"\" Filter a list of sentences for strings of a minimum length.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_positive([0, -1, -2, -3, 4])     == [4]\nassert     get_positive([0, 1, 2, 3, 4])     == [1, 2, 3, 4]\nassert     get_positive([0, -2, -3, -4, -5])     == [0]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef get_positive_copy(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_positive([-5, 2, 3, -7, 8]) == [2, 3, 8]\nassert     get_positive([-5, -3, 1, 3, -7, 8]) == [1, 3, 8]\nassert     get_positive([]) == []\n\ndef get_positive_negative(l: list):\n    \"\"\"Return only positive and negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_positive([1, 2, 3]) == [1, 2, 3]\nassert     get_positive([-1, -2, 3]) == [-1, -2, 3]\nassert     get_positive([]) == []\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]\nassert     get_positive([-1,-2,0,3,5]) == [3,5]\nassert     get_positive([0,-1,0,3,0]) == [3]\nassert     get_positive([0,0,0,0]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef get_positive_copy(l: list):\n    \"\"\"Return a copy of the input list, with positive numbers removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_positive([1, 3, -1, 5]) == [1, 3, 5]\nassert     get_positive([2, 0, -1, 2, -1]) == [2, 2]\nassert     get_positive([]) == []\n\nassert     get_positive([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5] == get_positive([-2, -1, 0, 1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == get_positive([1, 2, 3, 4, 5])\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_positive([-1,0,-3,2]) == [2]\nassert     get_positive([1,2,3]) == [1,2,3]\nassert     get_positive([1,0,-3,2,-4,2,0]) == [1,2]\nassert     get_positive([-1,0,-3,2,0,1,2]) == [1,2,0]\nassert     get_positive([-1,0,-3,2,0,1,2,-3]) == [1,2,0,2]\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert not \nassert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_prime(5) == True\nassert     is_prime(6) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(66479258897) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_prime(4) == False\nassert is_prime(7) == True\nassert is_prime(9) == False\nassert is_prime(11) == True\nassert is_prime(12) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_prime(17) == True\nassert     is_prime(33) == True\nassert     is_prime(197) == True\nassert     is_prime(17) == True\nassert     is_prime(27) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime_fast(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_prime(5) == True\nassert     is_prime(9) == False\nassert     is_prime(1) == False\nassert     is_prime(23) == True\nassert     is_prime(6) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_prime(5)     == True\nassert     is_prime(12)     == False\nassert     is_prime(101)     == True\nassert     is_prime(201)     == False\nassert     is_prime(2)     == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef test_is_prime():\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(100) == False\n    "
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_prime(-2) == False, 'Error'\nassert     is_prime(-3) == False, 'Error'\nassert     is_prime(0) == False, 'Error'\nassert     is_prime(1) == False, 'Error'\nassert     is_prime(2) == True, 'Error'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef test_find_zero():\n    xs = [1, -2, 3, -4]\n    print(find_zero(xs))\n    xs = [-5, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(find_zero(xs))\n    xs = [-20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    print(find_zero(xs))\n    xs = [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(find_zero(xs))\n\ntest_find_zero()\n\n\ndef find_all_zeros(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_all_zeros finds all points on the polynomial where it is zero.\n    return a list of all x for which poly(x) = 0.\n    If there are many solutions, returns list of tuples where\n    each tuple has two elements.\n    For example,\n    x = [2, 4, 6, 8, 10,...]\n    x = [(2, 0), (4, 0), (6, 0), (8, 0), (10, 0),...]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_zero([2, 3, 4, 5]) == (1, 0)\nassert     find_zero([1, 2, 3, 4]) == (1, 0)\nassert     find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 0)\nassert     find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 0)\nassert     find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 0)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     math.isclose(poly([2, 3, 0, 1], 1.2), -4.08)\nassert     math.isclose(poly([3, 1, 0, 1], -3.5), 1.05)\nassert     math.isclose(poly([2, 1, 0, 1], 0.5), 0.09)\nassert     math.isclose(poly([1, 1, 0, 1], 1), 1)\nassert     math.isclose(poly([0, 1, 0, 1], 1), 1)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     poly([1, 1], 1) == 1\nassert     poly([0, 1], 1) == 0\nassert     poly([1, 2, 1], 1) == 0\nassert     poly([1, 2, 1, 1], 1) == 0\nassert     poly([1, 2, 1, 1, 1], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef interval_of_root(xs: list, min_x: float, max_x: float):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\n\ndef bisection_method(xs: list, min_x: float, max_x: float, error: float):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\n\ndef newton_method(xs: list, min_x: float, max_x: float, error: float):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\n\ndef secant_method(xs: list, min_x: float, max_x: float, error: float):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     poly([3,0,0,0,0], 0) == 3, \\\n        \"Your find_zero does not work for polynomial with coeffs 3,0,0,0,0 at x=0\"\nassert     poly([1,1,0,0,0,0], 0) == 1, \\\n        \"Your find_zero does not work for polynomial with coeffs 1,1,0,0,0,0 at x=0\"\n\nassert     poly([3,0,0,0,0], 0.1) == 3.1, \\\n        \"Your find_zero does not work for polynomial with coeffs 3,0,0,0,0 at x=0.1\"\nassert     poly([1,1,0,0,0,0], 0.1) == 1.1, \\\n        \"Your find_zero does not work for polynomial with coeffs 1,1,0,0,0,0 at x=0.1\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_zero([]) == 0\nassert     find_zero([0, 1]) == 1\nassert     find_zero([1, 2, 3]) == 3\nassert     find_zero([1, 2, -3]) == 0\nassert     find_zero([1, -2, -3, -4, -5]) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_zero([1, 1, 1]) == [-1, -1, -1]\nassert     find_zero([2, 1, 1]) == [-1, -1, -1]\nassert     find_zero([1, 0, 1]) == [-1, -1, -1]\nassert     find_zero([1, 1, -2]) == [-1, -1, -1]\nassert     find_zero([1, 1, 2, 3]) == [-1, -1, -1, -1]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_zero([0,1]) == [0]\nassert     find_zero([1]) ==     [0]\nassert     find_zero([1,0]) ==     [0]\nassert     find_zero([1,0,1]) ==     [0]\nassert     find_zero([1,1,1]) ==     [-1]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_third([3, 2, 6, 9, 1, 4, 10, 5, 7]) == [1, 2, 3, 4, 5, 6, 7, 9, 10]\nassert     sort_third([7, 2, 3, 10, 1, 9, 5, 6]) == [1, 2, 3, 5, 6, 7, 9, 10]\nassert     sort_third([3, 2, 6, 9, 1, 4, 10, 5]) == [1, 2, 3, 4, 5, 6, 9, 10]\nassert     sort_third([7, 2, 3, 10, 1, 9, 5]) == [1, 2, 3, 5, 7, 9, 10]\nassert     sort_third([3, 2, 6, 9, 1, 4, 10, 7, 5]) == [1, 2, 3, 4, 5, 6, 7, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_third([8, 4, 2, 3, 1, 6]) == [8, 4, 2, 1, 6, 3]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_third([3, 2, 1, 4, 5, 6, 7, 8]) == [3, 2, 1, 4, 5, 6, 7, 8]\nassert     sort_third([3, 2, 1, 4, 5, 6, 7, 8, 1]) == [3, 2, 1, 1, 4, 5, 6, 7, 8]\nassert     sort_third([3, 2, 1, 4, 5, 6, 7, 8, 1, 9, 10]) == [3, 2, 1, 4, 5, 6, 7, 8, 1, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_third([1, 2, 3]) == [1, 2, 3]\nassert     sort_third([1, 3, 2]) == [1, 2, 3]\nassert     sort_third([2, 1, 3]) == [1, 2, 3]\nassert     sort_third([3, 1, 2]) == [1, 2, 3]\nassert     sort_third([3, 2, 1]) == [1, 2, 3]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (sort_third([1, 3, 2, 6, 1, 1]) == [1, 1, 1, 2, 3, 6])\nassert     (sort_third([2, 4, 3, 2, 1, 1]) == [1, 1, 2, 2, 3, 4])\nassert     (sort_third([2, 4, 3, 2, 1, 0]) == [0, 1, 2, 2, 3, 4])\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_third([0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     sort_third([0, 3, 6, 9, 12, 15, 18, 21, 24, 27]) == [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]\nassert     sort_third([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([0, 3, 6, 9, 12, 15, 18, 21, 24, 27]) == [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    \n\ndef main():\n    l = [1, 6, 2, 5, 3, 7, 4, 9]\n    print(l)\n    print(sort_third(l))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 2, 4, 6]\nassert     sort_third([7, 3, 2, 1]) == [3, 2, 7, 1]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 3, 5, 7, 2, 9, 10, 6, 8, 4, 11, 12, 13]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5, 7, 2, 9, 10, 6, 8, 4, 11, 12, 13, 14, 15]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == [1, 3, 5, 7, 2, 9, 10, 6, 8, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_third([5, 3, 1, 6, 4]) == [1, 3, 5, 6, 4], \"incorrect\"\nassert     sort_third([5, 4, 3, 1, 6]) == [1, 3, 4, 5, 6], \"incorrect\"\nassert     sort_third([1, 6, 4, 3, 5]) == [1, 3, 4, 5, 6], \"incorrect\"\nassert     sort_third([4, 3, 6, 5, 1]) == [1, 3, 4, 5, 6], \"incorrect\"\nassert     sort_third([4, 1, 6, 3, 5]) == [1, 3, 4, 5, 6], \"incorrect\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef frequency(l: list):\n    \"\"\"Return dictionary with frequency of elements in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique([1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"unique\"\nassert     unique([1, 2, 3, 3, 2, 1]) == [1, 2, 3], \"unique\"\nassert     unique([1, 1, 2, 2, 3, 3]) == [1, 2, 3], \"unique\"\nassert     unique([1, 2, 1, 2, 3, 3]) == [1, 2, 3], \"unique\"\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"unique\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique([])     == []\nassert     unique([1,2,3,2]) == [1,2,3]\nassert     unique([1,2,3,3]) == [1,2,3]\nassert     unique([1,2,2,2,2,2,3,3,3,3]) == [1,2,3]\nassert     unique([1,2,2,2,2,2,3,3,3,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,4,5,5]) == [1,2,3,4,5], 'incorrect'\nassert     unique([1,2,3,4,5,1]) == [1,2,3,4,5], 'incorrect'\nassert     unique([1,2,3,1,2,3]) == [1,2,3], 'incorrect'\nassert     unique([1,2,3,4,5,6]) == [1,2,3,4,5,6], 'incorrect'\nassert     unique([1,2,3,4,5,6,1,3,2,1,6,3]) == [1,2,3,4,5,6], 'incorrect'\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique([1, 2, 3, 4, 4]) == [1, 2, 3, 4], \"Unique failed\"\nassert     unique([1, 2, 3, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4], \"Unique failed\"\nassert     unique([1]) == [1], \"Unique failed\"\nassert     unique([]) == [], \"Unique failed\"\n\ndef unique_ordered(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique([]) == []\nassert     unique([1, 1, 2, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 1, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique([1, 1, 2, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef count_equal(l: list):\n    \"\"\"Count the number of equal elements in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     unique([\"a\", \"a\", 1, 1, 1.0, \"a\"]) == [\"a\", 1, 1.0], \\\n        \"unique function returns wrong result\"\nassert     unique([]) == [], \"unique function returns wrong result\"\nassert     unique([1, 2, 3]) == [1, 2, 3], \"unique function returns wrong result\"\n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return sorted unique elements that appear in both lists\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef has_duplicate(l: list):\n    \"\"\"Return True if the list has duplicate elements\n    \"\"\"\n    pass\n\ndef has_duplicate_iter(l: list):\n    \"\"\"Return True if the list has duplicate elements\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([1,2,1]) == 2\nassert     max_element([0,1]) == 1\nassert     max_element([-1,1,0]) == 1\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     max_element([1, 2, 3]) == 3, \"Test 1\"\nassert     max_element([1, 3, 2]) == 3, \"Test 2\"\nassert     max_element([5, 6, 7, 8]) == 8, \"Test 3\"\nassert     max_element([7, 5, 7, 4]) == 7, \"Test 4\"\n\nprint(\"All tests passed!\""
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_element([\"a\", \"b\", \"c\"]) == \"c\", \"wrong\"\nassert     max_element([\"a\", \"b\", \"c\", \"d\"]) == \"d\", \"wrong\"\nassert     max_element([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"e\", \"wrong\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([0, 2, 3]) == 3\nassert     max_element([]) == None\nassert     max_element([-1, -2, -3]) == -1\nassert     max_element([-1.1, -2.2, -3.3]) == -1.1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_element([5, 9, 2, 7, 2, -1, 5]) == 9\nassert max_element([5, 9, 2, 7, 2, -1]) == 9\nassert max_element([-1, 5, 9, 2, 7, 2, -1]) == 9\nassert max_element([-1, -5, -9, -2, -7, -2, -1]) == -1\nassert max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_element([3, 2, 6]) == 6, \"Test 1\"\nassert     max_element([3, 3, 6]) == 6, \"Test 2\"\nassert     max_element([3, 3, -6]) == 3, \"Test 3\"\nassert     max_element([-3, -3, -6]) == -3, \"Test 4\"\nassert     max_element([3, -3, -6]) == 3, \"Test 5\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([4, 2, 3]) == 4\nassert     max_element([4, 5, 3]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     max_element([2, 1, 1]) == 2, \\\n        'Expected: {0}\\nActual: {1}'.format(2, max_element([2, 1, 1]))\nassert     max_element([1, 2, 3, 4]) == 4, \\\n        'Expected: {0}\\nActual: {1}'.format(4, max_element([1, 2, 3, 4]))\nassert     max_element([]) == None, \\\n        'Expected: {0}\\nActual: {1}'.format(None, max_element([]))\n\ndef max_in_window(l: list, w: int):\n    \"\"\"Return the maximum value in the window of size w\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(fizz_buzz(1))\nprint(fizz_buzz(13))\nprint(fizz_buzz(31))\nprint(fizz_buzz(1313))\nprint(fizz_buzz(11))\nprint(fizz_buzz(21))\nprint(fizz_buzz(1222))\nprint(fizz_buzz(7212))\nprint(fizz_buzz(2222))\nprint(fizz_buzz(4444))\nprint(fizz_buzz(333))\nprint(fizz_buzz(1111))\nprint(fizz_buzz(7777))\nprint(fizz_buzz(12))\nprint(fizz_buzz(0))\nprint(fizz_buzz(1))"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fizz_buzz(5) == 4\nassert     fizz_buzz(11) == 2\nassert     fizz_buzz(13) == 1\nassert     fizz_buzz(18) == 0\nassert     fizz_buzz(20) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef fizz_buzz_approx(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(31) == 5\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(98) == 0\nassert     fizz_buzz(15) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_even([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15]\nassert     sort_even([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16]\nassert     sort_even([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nassert     sort_even([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     sort_even([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([3,3,3,4,4,4,5,5,6,6,6]) == [3,3,3,4,4,4,5,5,6,6,6]\nassert     sort_even([3,3,3,3,3,3,3,3,3,3,3,3]) == [3,3,3,3,3,3,3,3,3,3,3,3]\nassert     sort_even([3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_even([10, 5, 0, 3, 2, 1, 7, -9, -1, 6, 4]) == [10, 5, 0, 3, 2, 1, 6, 4, 7, -9, -1]\nassert     sort_even([5, 10, 0, 3, 2, 1, 7, -9, -1, 6, 4]) == [-1, 0, 5, 2, 1, 3, 6, 4, 7, 10, -9]\nprint(\"Test passed!\")\n\ndef merge(l1: list, l2: list):\n    \"\"\"This function takes a list l1 and a list l2 and returns a list l3 such that\n    l3 is a merged list of l1 and l2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_even([1, 3, 5, 6, 2, 4]) == [1, 3, 6, 2, 5, 4], \"Wrong output for sort_even([1, 3, 5, 6, 2, 4])\"\nassert     sort_even([1, 3, 5, 6, 2, 4]) == [1, 3, 6, 2, 5, 4], \"Wrong output for sort_even([1, 3, 5, 6, 2, 4])\"\nassert     sort_even([1, 3, 5, 6, 2, 4]) == [1, 3, 6, 2, 5, 4], \"Wrong output for sort_even([1, 3, 5, 6, 2, 4])\"\nassert     sort_even([1, 3, 5, 6, 2, 4]) == [1, 3, 6, 2, 5, 4], \"Wrong output for sort_even([1, 3, 5, 6, 2, 4])\"\nassert     sort_even([1, 3, 5, 6, 2, 4]) == [1, 3, 6, 2, 5, 4], \"Wrong output for sort_even([1, 3, 5, 6, 2, 4])\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_even([2, 3, 4, 5]) == [2, 4, 3, 5]\nassert     sort_even([2, 3, 5, 4]) == [2, 3, 5, 4]\nassert     sort_even([1, 3, 5, 4]) == [1, 3, 5, 4]\nassert     sort_even([2, 3, 3, 4]) == [2, 3, 3, 4]\nassert     sort_even([1, 3, 5, 5, 4]) == [1, 3, 5, 5, 4]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_even([2,5,6,4,8,9,6,4]) == [2,6,4,6,8,9,4,5]\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_even([]) == []\n\n\ndef sort_even2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n\n    This function is not as efficient as sort_even, but uses no extra memory.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_even([1, 3, 2, 5, 9, 6, 8]) == [1, 3, 2, 5, 9, 6, 8], \\\n        \"wrong output for sort_even([1, 3, 2, 5, 9, 6, 8])\"\nassert     sort_even([6, 1, 3, 2, 5, 9, 8]) == [1, 3, 2, 5, 6, 8, 9], \\\n        \"wrong output for sort_even([6, 1, 3, 2, 5, 9, 8])\"\nassert     sort_even([2, 3, 5, 6, 1, 4, 8]) == [1, 2, 3, 5, 6, 4, 8], \\\n        \"wrong output for sort_even([2, 3, 5, 6, 1, 4, 8])\"\nassert     sort_even([3, 4, 5, 6, 1, 2, 8]) == [1, 2, 3, 4, 5, 6, 8], \\\n        \"wrong output for sort_even([3, 4, 5, 6, 1, 2, 8])\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\nassert     decode_cyclic(encode_cyclic(\"abcde\")) == \"cdeab\"\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_decode(s: str):\n    \"\"\"\n    takes as input string and returns encoded and decoded versions of the string.\n    \"\"\"\n    encoded = encode_cyclic(s)\n    decoded = decode_cyclic(encoded)\n    return encoded, decoded\n\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    Encodes s using vigenere cipher with key, returns encoded string.\n    \"\"\"\n    # store results in an array\n    result = []\n    # cycle through each character in the key\n    for k in key:\n        # cycle through each character in s\n        for c in s:\n            # check if the two characters are equal\n            if c == k:\n                # append character to result\n                result.append(c)\n                # break out of loop\n                break\n            else:\n                # append character to result\n                result.append(c)\n    return \"\".join(result)\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input a string encoded with encode_vigenere function and a key, returns decoded string.\n    \"\"\"\n    # store results in an array\n    result = []\n    # store key as a key_list\n    key_list = list(key)\n    # cycle through each character in s\n    for c in s:\n        # check if the two characters are equal\n        if c in key_list:\n            # remove character from key list\n            key_list.remove(c)\n            # append character to result\n            result.append(c)\n        else:\n            # append character to result\n            result.append(c)\n    return \"\".join(result)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic('abcdefg')) == 'abcdefg'\nassert     decode_cyclic(encode_cyclic('abcd')) == 'abcdefg'\nassert     decode_cyclic(encode_cyclic('abc')) == 'abcdefg'\nassert     decode_cyclic(encode_cyclic('abcdef')) == 'abcdefg'\nassert     decode_cyclic(encode_cyclic('abcdefg')) == 'abcdefg'\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"123456789\")) == \"123456789\"\nassert     decode_cyclic(encode_cyclic(\"python\")) == \"python\"\nassert     decode_cyclic(encode_cyclic(\"pytho0n\")) == \"python\"\nassert     decode_cyclic(encode_cyclic(\"long sentence\")) == \"long sentence\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef encode_add(s: str):\n    \"\"\"\n    returns encoded string by adding groups of 3 characters\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # pad group with character if it has less than 3.\n    groups = [group + group[:3 - len(group)] for group in groups]\n    return \"\".join(groups)\n\ndef decode_add(s: str):\n    \"\"\"\n    takes as input string encoded with encode_add function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    # test encode_cyclic\n    assert encode_cyclic(\"abc\") == \"bac\"\n    assert encode_cyclic(\"abcdef\") == \"bacd\"\n    assert encode_cyclic(\"a\" * 100) == \"\".join([chr(i) for i in range(3, 127)])\n    "
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef encode_compress(s: str):\n    \"\"\"\n    returns encoded string by shortening it by replacing each character with its 1-n encoding.\n    \"\"\"\n    # mapping each character to its 1-n encoding. \n    encodings = {chr(i): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)}\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 26): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 52): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    return \"\".join([encodings[ch] if ch in encodings else ch for ch in s])\n\n\ndef decode_compress(s: str):\n    \"\"\"\n    takes as input string encoded with encode_compress function. Returns decoded string.\n    \"\"\"\n    # mapping each character to its 1-n encoding. \n    encodings = {chr(i): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)}\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 26): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 52): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    return \"\".join([encodings[ch] if ch in encodings else ch for ch in s])\n\n\ndef encode_compress_naive(s: str):\n    \"\"\"\n    returns encoded string by shortening it by replacing each character with its 1-n encoding.\n    \"\"\"\n    # mapping each character to its 1-n encoding. \n    encodings = {chr(i): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)}\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 26): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 52): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 78): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    return \"\".join([encodings[ch] if ch in encodings else ch for ch in s])\n\n\ndef decode_compress_naive(s: str):\n    \"\"\"\n    takes as input string encoded with encode_compress_naive function. Returns decoded string.\n    \"\"\"\n    # mapping each character to its 1-n encoding. \n    encodings = {chr(i): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)}\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 26): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({chr(i + 52): chr(i + ord(\"A\")) for i in range(ord(\"A\"), ord(\"A\") + 26)})\n    # map each character to its 1-n encoding, and then to a single character.\n    encodings.update({ch"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decode_cyclic(encode_cyclic(s=\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(s=\"aaa\")) == \"aaa\"\nassert     decode_cyclic(encode_cyclic(s=\"aabb\")) == \"aabb\"\nassert     decode_cyclic(encode_cyclic(s=\"bac\")) == \"bac\"\nassert     decode_cyclic(encode_cyclic(s=\"abc\")) == \"abc\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(4) == 5\nassert     prime_fib(5) == 8\nassert     prime_fib(6) == 13\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_fib(0) == None\nassert     prime_fib(1) == None\nassert     prime_fib(2) == None\nassert     prime_fib(3) == None\nassert     prime_fib(4) == None\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 8\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prime_fib(3) == 5, \"wrong result\"\nassert     prime_fib(5) == 13, \"wrong result\"\nassert     prime_fib(7) == 19, \"wrong result\"\nprint('Correct!')"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 11\nassert     prime_fib(5) == 17\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prime_fib(0) == [2, 1]\nassert     prime_fib(1) == [3, 2]\nassert     prime_fib(2) == [5, 3]\nassert     prime_fib(3) == [7, 5]\nassert     prime_fib(4) == [13, 7]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"This is a module with tools for finding primes.\")"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_fib(0) == (0, 0)\nassert     prime_fib(1) == (1, 2)\nassert     prime_fib(2) == (1, 5)\nassert     prime_fib(3) == (1, 7)\nassert     prime_fib(4) == (1, 11)\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([-2, -1, 1, 2, 3, 4]) == True, \"Check the example\"\nassert     triples_sum_to_zero([-2, -1, 1, 2, 3, 1]) == False, \"Check the example\"\nassert     triples_sum_to_zero([0, 0, 0]) == True, \"Check the example\"\nassert     triples_sum_to_zero([0, 0, 0, 0]) == True, \"Check the example\"\nassert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False, \"Check the example\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-4, -4, 1, -4]) == True\nassert triples_sum_to_zero([2, 0, 1, 0]) == False\nassert triples_sum_to_zero([0, 0, 0, 0]) == False\nassert triples_sum_to_zero([0, 0, 0, 0, 0]) == False\nassert triples_sum_to_zero([1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([1,2,3]) == True, \"trivial case failed\"\nassert     triples_sum_to_zero([1,-2,3]) == True, \"negative case failed\"\nassert     triples_sum_to_zero([0,2,3]) == True, \"trivial case failed\"\nassert     triples_sum_to_zero([0,1,-2,3]) == True, \"negative case failed\"\nassert     triples_sum_to_zero([0,1,0]) == False, \"trivial case failed\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([2,2,2,2]) is False\nassert     triples_sum_to_zero([1,2,2,3]) is False\nassert     triples_sum_to_zero([-1,-2,1,2]) is False\nassert     triples_sum_to_zero([1,0,-1,0]) is False\nassert     triples_sum_to_zero([0,0,0,0]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([1,2,3,-1,2,3]) == True, \"Wrong answer!\"\nassert     triples_sum_to_zero([1,2,3,-1,2,3,-1]) == True, \"Wrong answer!\"\nassert     triples_sum_to_zero([1,2,3,-1,2,3,0]) == True, \"Wrong answer!\"\nassert     triples_sum_to_zero([0,1,2,3,4,5,6]) == False, \"Wrong answer!\"\nassert     triples_sum_to_zero([1,2,3,1,2,3]) == False, \"Wrong answer!\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1, 3, 6, 1, 3, 6]) == True, 'Error.'\nassert     triples_sum_to_zero([1, 3, 6, 1, 3]) == False, 'Error.'\nassert     triples_sum_to_zero([3, 0, 4, -5, -5, 1]) == True, 'Error.'\nassert     triples_sum_to_zero([3, 0, 4, -5, -5]) == False, 'Error.'\nassert     triples_sum_to_zero([1, 2, 3, -7, 6, 1, 2, 3, -7]) == True, 'Error.'\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef find_three_smallest(l: list) -> list:\n    \"\"\"\n    find_three_smallest takes a list of integers as an input.\n    it returns the three smallest values (if there are three or more values with\n    the same smallest value, return three smallest values) in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([1,2,-3]) == False\nassert     triples_sum_to_zero([1,1,-1,2]) == False\nassert     triples_sum_to_zero([-1,0,1,2,3]) == True\nassert     triples_sum_to_zero([0,1,0,2,3]) == True\nassert     triples_sum_to_zero([1,0,2,0,3]) == True\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     car_race_collision(2) == 2\nassert     car_race_collision(4) == 8\nassert     car_race_collision(6) == 16\nassert     car_race_collision(10) == 40\nassert     car_race_collision(20) == 320"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     car_race_collision(1) == 0\nassert car_race_collision(2) == 0\nassert car_race_collision(3) == 0\nassert car_race_collision(4) == 0\nassert car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     car_race_collision(5) == 0\nassert     car_race_collision(10) == 1\nassert     car_race_collision(100) == 3\nassert     car_race_collision(1000) == 5\nassert     car_race_collision(10000) == 26\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef colliding_cars(n: int, m: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of m cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     car_race_collision(3) == 0, 'error'\nassert     car_race_collision(2) == 1, 'error'\nassert     car_race_collision(5) == 3, 'error'\nassert     car_race_collision(8) == 5, 'error'\nassert     car_race_collision(9) == 8, 'error'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     car_race_collision(0) == 0, \"wrong result\"\nassert     car_race_collision(1) == 0, \"wrong result\"\nassert     car_race_collision(2) == 1, \"wrong result\"\nassert     car_race_collision(3) == 2, \"wrong result\"\nassert     car_race_collision(4) == 3, \"wrong result\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,0,3]) == [1,1,4]\nassert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 5, 3]) == [2, 6, 4]\nassert     incr_list([10, 9, 8]) == [11, 10, 9]\nassert     incr_list([0, 0, 0]) == [1, 1, 1]\n\ndef incr_list_with_add(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef del_list(l: list):\n    \"\"\"Return list with all elements removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (incr_list([1, 2, 3]) == [2, 3, 4])\nassert     (incr_list([]) == [])\nassert     (incr_list([1, 1, 1]) == [2, 2, 2])\n\ndef incr_elem(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     incr_list(incr_list([1, 2, 3])) == [2, 3, 4], 'incorrect'\nassert     incr_list([1, 2, 3]) == [2, 3, 4], 'incorrect'\nassert     incr_list([1, 2, 3]) == [2, 3, 4], 'incorrect'\nassert     incr_list([]) == [1], 'incorrect'\nassert     incr_list([1]) == [2], 'incorrect'\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef incr_list_test():\n    \"\"\"Test function for incr_list.\n    \"\"\"\n    assert incr_list([1, 2, 3]) == [2, 3, 4]\n    assert incr_list([]) == []\n    assert incr_list([1]) == [2]\n    "
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef first_n(l: list, n: int):\n    \"\"\"Return list with first n elements of l\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4]) == True\nassert     pairs_sum_to_zero([1,-2,3,4]) == True\nassert     pairs_sum_to_zero([1,-2,3,-4]) == False\nassert     pairs_sum_to_zero([]) == False\n\ndef list_sum(l):\n    \"\"\"\n    list_sum takes a list of integers as an input.\n    it returns the sum of the numbers in the list, or 0 if the list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"Empty list\"\nassert     pairs_sum_to_zero([1]) == False, \"One element\"\nassert     pairs_sum_to_zero([1,2]) == False, \"Two elements, one pair\"\nassert     pairs_sum_to_zero([1,2,3]) == False, \"Two distinct elements, but not a pair\"\nassert     pairs_sum_to_zero([1,2,3,1]) == True, \"Two distinct elements, one pair\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"Wrong answer\"\nassert     pairs_sum_to_zero([1]) == False, \"Wrong answer\"\nassert     pairs_sum_to_zero([1, 0]) == False, \"Wrong answer\"\nassert     pairs_sum_to_zero([1, -1]) == False, \"Wrong answer\"\nassert     pairs_sum_to_zero([1, 2]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1, -1, 3]) == True\nassert     pairs_sum_to_zero([1, 2, 3]) == False\nassert     pairs_sum_to_zero([2, 3, 1]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, -1, 0, 10]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([1, -3, 2, -2, 3]) == False\nassert     pairs_sum_to_zero([1, -3, 2, -2, 3, 1]) == True\nassert     pairs_sum_to_zero([1, -3, 2, -2, 3, -1]) == False\nassert     pairs_sum_to_zero([1, -3, 2, -2, 3, -2, 3, -1]) == True\nassert     pairs_sum_to_zero([1, -3, 2, -2, 3, 2, 3, -1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([-1, -1, 0, 1, 1, 0]) == True\nassert     pairs_sum_to_zero([-1, -1, 0, 1, 1, 0, -1]) == False\nassert     pairs_sum_to_zero([0, 0, 0, 0]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, -1]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, -1, -1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([1,0,-2,3]) == True\nassert     pairs_sum_to_zero([0,-1,1,0]) == False\nassert     pairs_sum_to_zero([0,0,0,0]) == False\nassert     pairs_sum_to_zero([0]) == False\n\ndef sum_of_digits(n):\n    \"\"\"\n    sum_of_digits takes a positive integer n as input.\n    it returns the sum of the digits in the decimal representation of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([-2,1,-1,1,0]) == True\nassert     pairs_sum_to_zero([1,0,2,-1,0,4]) == True\nassert     pairs_sum_to_zero([1,-1,1,0,2,0]) == False\nassert     pairs_sum_to_zero([-1,1,0,-2,0,4]) == False\n\n\ndef pairs_sum_to_zero_v2(l):\n    \"\"\"\n    pairs_sum_to_zero_v2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([0,1,2,4,5,-5,0]) == True\nassert     pairs_sum_to_zero([0,1,2,4,5,6,7]) == False\nassert     pairs_sum_to_zero([0,1,2,3,4,5,6,7,8,9]) == False\nassert     pairs_sum_to_zero([0,0,0,0,0,0]) == False\nassert     pairs_sum_to_zero([0,1,-1,1,0]) == True\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    # test change_base\n    #x = 1\n    #base = 3\n    #print(change_base(x, base))\n    #x = 125\n    #base = 5\n    #print(change_base(x, base))\n\nif __name__ == \"__main__\":\n    main()\n\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 8) == '155'\nassert     change_base(10, 16) == 'A'\n\nassert     change_base(10, 2) == change_base(10, 2)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     change_base(123, 2)         == \"1111011\"\nassert     change_base(123, 3)         == \"132\"\nassert     change_base(123, 8)         == \"123\"\nassert     change_base(123, 10)         == \"123\"\nassert     change_base(123, 16)         == \"3E\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef convert_from_decimal_base(x: int, base: int):\n    \"\"\"Change decimal base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     change_base(5, 2) == '101'\nassert     change_base(10, 2) == '1010'\nassert     change_base(5, 16) == '31'\nassert     change_base(10, 16) == 'a'\n\n\ndef change_base_v2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     change_base(1, 2) == '1'\nassert     change_base(100, 2) == '1100100'\nassert     change_base(100, 5) == '12100'\nassert     change_base(100, 8) == '1100100'\nassert     change_base(100, 10) == '100'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     change_base(0, 2) == \"0\"\nassert     change_base(2, 2) == \"10\"\nassert     change_base(4, 2) == \"100\"\nassert     change_base(16, 2) == \"10000\"\nassert     change_base(18, 2) == \"101010\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(12, 2) == '1100'\nassert     change_base(15, 2) == '1111'\nassert     change_base(9, 2) == '1001'\nassert     change_base(1234, 2) == '11010'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triangle_area(10,10) == 50, \"triangle area is wrong\"\nassert     triangle_area(3,4) == 6, \"triangle area is wrong\"\nprint(\"Passed the first test.\")\n\nassert     triangle_area(5,9) == 10.5, \"triangle area is wrong\"\nassert     triangle_area(4,10) == 14, \"triangle area is wrong\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triangle_area(5,2) == 10, 'triangle_area(5,2) == 10 failed'\nassert     triangle_area(3,5) == 3, 'triangle_area(3,5) == 3 failed'\nassert     triangle_area(5,3) == 12, 'triangle_area(5,3) == 12 failed'\n\ndef rectangle_area(a, b):\n    \"\"\"Given length of two sides of a rectangle return the area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triangle_area(3,5) == 7.75\nassert     triangle_area(6,10) == 30\n\ndef rectangle_area(a,b):\n    \"\"\"Given length of sides return the area for a rectangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     triangle_area(3, 5) == 6\nassert     triangle_area(5, 3) == 6\nassert     triangle_area(2, 2) == 3\nassert     triangle_area(4, 4) == 16\nprint('Problem 003 (10 points in total) solution: {}'.format(triangle_area(3, 5)))\n\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(3, 5) == 6\nassert     triangle_area(3, 8) == 27\nassert     triangle_area(4, 4) == 16\nprint('triangle_area PASSED')\n\ndef is_in_triangle(a, b, c, p):\n    \"\"\"Given lengths of the three sides of a triangle and a point, determine if\n    point is in triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triangle_area(3, 5) == 6, 'Area of a triangle with sides 3 and 5'\nassert     triangle_area(5, 3) == 6, 'Area of a triangle with sides 5 and 3'\nassert     triangle_area(5, 2) == 6.5, 'Area of a triangle with sides 5 and 2'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(3,2) == 3\nassert     triangle_area(5,4) == 9\nassert     triangle_area(7,7) == 21\nassert     triangle_area(2,4) == 4\nassert     triangle_area(5,3) == 12\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef rectangle_area(a, b):\n    \"\"\"Given length of a side and high return area for a rectangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (triangle_area(3, 2) == 3)\nassert     (triangle_area(7, 3) == 21)\nassert     (triangle_area(4, 10) == 50)\nassert     (triangle_area(2, 5) == 6.0)\nassert     (triangle_area(6, 10) == 60)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\nassert     fib4(5) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0, \"fib4(0) should be 0\"\nassert     fib4(1) == 0, \"fib4(1) should be 0\"\nassert     fib4(2) == 2, \"fib4(2) should be 2\"\nassert     fib4(3) == 0, \"fib4(3) should be 0\"\nassert     fib4(6) == 0, \"fib4(6) should be 0\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert fib4(1) == 0\nassert fib4(2) == 2\nassert fib4(3) == 0\nassert fib4(8) == 34\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(6) == 8\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 7\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     median([1,2,3,4,5]) == 3\nassert     median([2,2,2,2]) == 2\nassert     median([2,2,2,2,2]) == 2\nassert     median([2,2,2,2,2,2]) == 2\nassert     median([1,2,3,4,5,6]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     median([1,2,3,4,5]) == 3.5\nassert     median([1,2,3,4]) == 2.5\nassert     median([1,2,3]) == 2\nassert     median([1,2]) == 1.5\nassert     median([1]) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef mode(l: list):\n    \"\"\"Return the mode of the elements in the list l.\n    \"\"\"\n    pass\n\ndef variance(l: list):\n    \"\"\"Return the variance of the elements in the list l.\n    \"\"\"\n    pass\n\ndef standard_deviation(l: list):\n    \"\"\"Return the standard deviation of the elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     median([1, 2, 3]) == 2\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     median([]) == None\nassert     median([5, 6, 7]) == 7\nassert     median([4, 5, 6]) == 5.5\nassert     median([1, 3, 4, 5]) == 3.5\nassert     median([4, 3, 1, 2]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    \"\"\"Test median() functions.\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     median([5,4,3,2,1]) ==     3.5\nassert     median([5,4,3,2,1]) ==     3.5\nassert     median([1,2,3,4,5,6,7,8]) ==     3.5\nassert     median([1,2,3,4,5,6,7,8,9,10]) ==     5\nassert     median([5,4,3,2,1]) ==     3.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     median([\"a\", \"c\", \"f\"]) == \"c\", \"median('a','c','f') is incorrect\"\nassert     median([\"c\", \"a\", \"f\"]) == \"c\", \"median('c','a','f') is incorrect\"\nassert     median([\"c\", \"c\", \"a\"]) == \"c\", \"median('c','c','a') is incorrect\"\nassert     median([\"c\", \"c\", \"f\"]) == \"c\", \"median('c','c','f') is incorrect\"\nassert     median([\"f\", \"c\", \"a\"]) == \"c\", \"median('f','c','a') is incorrect\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_palindrome('asdfdsa') == True\nassert     is_palindrome('wasdwassa') == True\nassert     is_palindrome('Wasdwasdwa') == True\nassert     is_palindrome('Wasdwa') == False\nassert     is_palindrome('Wasdwassa') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_palindrome('bob') == False, \"bob is not a palindrome\"\nassert     is_palindrome('abba') == True, \"abba is not a palindrome\"\nassert     is_palindrome('a') == True, \"a is not a palindrome\"\nassert     is_palindrome('a a') == True, \"a a is not a palindrome\"\nassert     is_palindrome('aa') == False, \"aa is not a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_palindrome('abba') == True\nassert     is_palindrome('abcdcba') == True\nassert     is_palindrome('abac') == True\nassert     is_palindrome('abc') == False\nassert     is_palindrome('aba') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"\") is True, \"is_palindrome: Empty string\"\nassert     is_palindrome(\"aba\") is True, \"is_palindrome: Single character\"\nassert     is_palindrome(\"abba\") is True, \"is_palindrome: Palindrome\"\nassert     is_palindrome(\"abcba\") is True, \"is_palindrome: Palindrome\"\nassert     is_palindrome(\"abc\") is False, \"is_palindrome: Not a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_palindrome('') == True\nassert     is_palindrome('a') == True\nassert     is_palindrome('aa') == True\nassert     is_palindrome('aba') == True\nassert     is_palindrome('abba') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"I'm the best!\") == True, \"is_palindrome('I'm the best!')\"\nassert     is_palindrome(\"I am the best\") == False, \"is_palindrome('I am the best')\"\nassert     is_palindrome(\"I am the best!\") == False, \"is_palindrome('I am the best!')\"\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"anna\") == True, \"Not a palindrome\"\nassert     is_palindrome(\"walter\") == False, \"Not a palindrome\"\nassert     is_palindrome(\"dad\") == True, \"Not a palindrome\"\nassert     is_palindrome(\"madam\") == True, \"Not a palindrome\"\nassert     is_palindrome(\"abba\") == True, \"Not a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef char_histogram(text: str):\n    \"\"\"\n    Returns histogram with characters in string text\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"123454321\") == True\nassert     is_palindrome(\"1234321\") == True\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef modinv(a: int, m: int):\n    \"\"\"Return inverse of a modulo m.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef factorial(n: int):\n    \"\"\"Return n! (n! is 2^n modulo p).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     modp(2, 7) == 2\nassert     modp(0, 7) == 6\nassert     modp(5, 7) == 2\n\ndef modp_inv(a: int, n: int, p: int) -> int:\n    \"\"\"Return x such that (x * a) % n == 1, given (n, p).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     modp(2, 5) == 2\nassert modp(2, 16) == 8\nassert modp(2, 2) == 1\n\ndef apply_mask(mask: str, value: int):\n    \"\"\"Apply the mask to a value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Hello\")\n\n\n\nclass ModP:\n    \"\"\"A class that represents modular arithmetic.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     modp(3, 5) == 2\nassert     modp(9, 5) == 2\nassert     modp(0, 5) == 0\nassert     modp(3, -5) == 2\nassert     modp(9, -5) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n\nassert \nassert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     modp(5, 8) == modp(5, 8)\nassert     modp(5, 8) == 3\nassert     modp(5, 8) == 7\nassert     modp(5, 8) == modp(10, 8)\nassert     modp(5, 8) == modp(0, 8)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"barbados\")) == \"barbados\"\nassert     decode_shift(encode_shift(\"barb\")) == \"barb\"\nassert     decode_shift(encode_shift(\"barbados\") + encode_shift(\"barb\")) == \"barbab\"\nassert     decode_shift(encode_shift(\"barbab\")) == \"barbab\"\nassert     decode_shift(encode_shift(\"barbados\") + encode_shift(\"barb\")) == \"barbados\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"zyx\")) == \"zyx\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"xyz\")) == \"xyz\"\nassert     decode_shift(encode_shift(\"zab\")) == \"zab\"\nassert     decode_shift(encode_shift(\"aaa\")) == \"aaa\"\nassert     decode_shift(encode_shift(\"zzz\")) == \"zzz\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_shift(\"ztuuqzqzp\") == \"lzpzppzqz\"\nassert     decode_shift(\"ztuuqzqzp\") == \"lzpzppzqz\"\nassert     decode_shift(\"ztuuqzqzp\") == \"lzpzppzqz\"\nassert     decode_shift(\"ztuuqzqzp\") == \"lzpzppzqz\"\n\ndef get_random_string(length: int):\n    \"\"\"\n    returns random string of length length, containing uppercase and lowercase letters.\n    \"\"\"\n    return \"\".join(random.choices(string.ascii_letters, k = length))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_shift(encode_shift(\"a\")) == \"a\"\nassert     decode_shift(encode_shift(\"z\")) == \"z\"\nassert     decode_shift(encode_shift(\"thequickbrownfoxjumpsoverthelazydog\")) == \"thequickbrownfoxjumpsoverthelazydog\"\nassert     decode_shift(encode_shift(\"thedogjumpedoverthelazydog\")) == \"thedogjumpedoverthelazydog\"\nassert     decode_shift(encode_shift(\"zxyabcd\")) == \"zxyabcd\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef main():\n    s1 = \"dbdtadbc\"\n    s2 = \"wwsgd\"\n    s3 = \"zzzzzzzzzzzzzzzzzzz\"\n    s4 = \"yys\"\n    s5 = \"zzzzzzzzzzzzzzzzzzz\"\n\n    print(f\"S1: {s1}\")\n    print(f\"S2: {s2}\")\n    print(f\"S3: {s3}\")\n    print(f\"S4: {s4}\")\n    print(f\"S5: {s5}\")\n\n    print(\"\")\n\n    print(\"===================== Exercise 3 =====================\")\n    print(f\"Encode Shift: {encode_shift(s1)}\")\n    print(f\"Encode Shift: {encode_shift(s2)}\")\n    print(f\"Encode Shift: {encode_shift(s3)}\")\n    print(f\"Encode Shift: {encode_shift(s4)}\")\n    print(f\"Encode Shift: {encode_shift(s5)}\")\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decode_shift(encode_shift(\"test\")) == \"mjqqt\"\n\n\ndef encode_caesar(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 3 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 3 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_caesar(s: str):\n    \"\"\"\n    takes as input string encoded with encode_caesar function. Returns decoded string.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"sos\")) == \"sos\"\nassert     decode_shift(encode_shift(\"zas\")) == \"zas\"\nassert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"code\")) == \"code\"\n\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef test_decode_shift():\n    assert decode_shift(encode_shift(\"happy\")) == \"happy\"\n    assert decode_shift(encode_shift(\"Python\")) == \"Python\"\n\n\ndef encode_affine(s: str):\n    \"\"\"\n    returns encoded string by adding random numbers to every character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"h\")) == \"h\"\nassert     decode_shift(encode_shift(\"h\")) == \"h\"\nassert     decode_shift(encode_shift(\"hello\")) == \"hello\"\n\n\ndef encode_affine(s: str, a: int, b: int):\n    \"\"\"\n    returns encoded string by a (affine) encryption.\n    \"\"\"\n    return \"\".join([chr(((a * (ord(ch) - ord(\"a\")) + b) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"I have a cat and a mat.\") == \"hmt ym t\"\nassert     remove_vowels(\"I have a cat, dog and a mat.\") == \"hm t ym d m\"\nassert     remove_vowels(\"I have a cat, dog and a mat.\") == \"hm t ym d m\"\nassert     remove_vowels(\"I have a cat, dog and a mat.\") == \"hm t ym d m\"\n\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"ben,ed\") == \"b,e\"\nassert     remove_vowels(\"I have a cat\") == \" I have a cat\"\nassert     remove_vowels(\"My cat is cute\") == \"My cat is cute\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"aAb\") == \"aAb\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_vowels('This website is for losers LOL!') == 'Ths wbst s fr lsrs LL!'\nassert     remove_vowels('Come here, just leave me alone!') == 'Cm hre, jn lmns me alone!'\nassert     remove_vowels('I am your father!') == 'Im ysr fdr!'\nassert     remove_vowels('I swear an apple is not a vowel!') == 'I swvr an xtrn is not a vowel!'\n\nprint('tests passed')\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_vowels('Amazing') == 'Mamming'\nassert     remove_vowels('Generation') == 'Gneneration'\nassert     remove_vowels('Beautiful') == 'MbBeautiful'\n\ndef square_list(lst):\n    \"\"\"\n    square_list is a function that takes a list and returns a new list with the square of the elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_vowels(\"hello, world!\") == \"hll, wld!\", \"Not working for all cases\"\nassert     remove_vowels(\"hello, world!\") == \"hll, wld!\", \"Not working for all cases\"\nassert     remove_vowels(\"a, b, c\") == \"a, b, c\", \"Not working for all cases\"\nassert     remove_vowels(\"a, b, c\") == \"a, b, c\", \"Not working for all cases\"\nassert     remove_vowels(\"hello\") == \"hll\", \"Not working for all cases\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_vowels(\"abracadabra\") == \"braccadbr\", \"remove_vowels('abracadabra')\"\nassert     remove_vowels(\"arizona\") == \"mznaz\", \"remove_vowels('arizona')\"\nassert     remove_vowels(\"aeiou\") == \"\", \"remove_vowels('aeiou')\"\nassert     remove_vowels(\"\") == \"\", \"remove_vowels('')\"\nassert     remove_vowels(\"hello world\") == \"hll wrld\", \"remove_vowels('hello world')\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_vowels('I love Python') =='lv Pythn', \"Wrong answer\"\nassert     remove_vowels('I love and learn Python') =='lv Pythn', \"Wrong answer\"\nassert     remove_vowels('I love Python and Machine Learning') =='lv Pythn and Mchine Lrn', \"Wrong answer\"\nprint(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\""
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(x < t for x in l)\n\nassert \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_threshold([1, 3, 2, 6], 4) == True\nassert     below_threshold([1, 3, 2, 6], 5) == False\nassert     below_threshold([1, 3, 2, 6], 0) == False\nassert     below_threshold([1, 3, 2, 6], 1) == False\nassert     below_threshold([1, 3, 2, 6], 2) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_threshold([1, -3, 2], 4) == True\nassert     below_threshold([1, -3, 2], -1) == True\nassert     below_threshold([1, -3, 2], 1) == False\nassert     below_threshold([0], 1) == True\nassert     below_threshold([], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5], 2) == False\nassert     below_threshold([1, 2, 3, 4, 5], 0) == False\nassert     below_threshold([1, 2, 3, 4, 5], 6) == False\nassert     below_threshold([1, 2, 3, 4, 5], -6) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_threshold([1, 2, 3], 100) == False, 'error1'\nassert     below_threshold([-1, 2, 3], 2) == False, 'error2'\nassert     below_threshold([1, 2, 3], 1) == False, 'error3'\nassert     below_threshold([], 1) == False, 'error4'\nassert     below_threshold([1, 2, 3, 4], 0) == False, 'error5'\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef _assert_below_threshold(l: list, t: int):\n    \"\"\"Assert that all numbers in the list l are below threshold t.\n    \"\"\"\n    pass\n\ndef _assert_not_below_threshold(l: list, t: int):\n    \"\"\"Assert that all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([1, 2, 3, 4], 4) == False\nassert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8], 4) == True\nassert     below_threshold([], 4) == True\nassert     below_threshold([3, 4, 5, 6], 4) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_threshold([1, 2, 3], 4) == False, 'incorrect output'\nassert     below_threshold([1, 2, 3], 2) == True, 'incorrect output'\nassert     below_threshold([1, 2, 3], 0) == True, 'incorrect output'\nassert     below_threshold([1], 5) == False, 'incorrect output'\nassert     below_threshold([], 5) == False, 'incorrect output'\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add(1, 2) == 3\nassert     add(-1, -2) == -3\nassert     add(3, -2) == 1\nassert     add(3.2, -2) == 1.8\nassert     add(3, -2.1) == 1.9\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add(3, 4) == 7\nassert     add(-3, 4) == 1\nassert     add(3, -4) == -1\nassert     add(3, -4) == -1\nassert     add(3.4, 4) == 7.4\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef add_list(numbers: list):\n    \"\"\"Add numbers in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add(10, 15) == 25\nassert     add(15, 20) == 35\nassert     add(25, 30) == 50\nprint(\"add is correctly implemented\")\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide one number by another y / x\n    \"\"\"\n    pass\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    \"\"\"\n    pass\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef product(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     same_chars('', '') == True\nassert     same_chars('', 'a') == False\nassert     same_chars('a', '') == False\nassert     same_chars('aa', 'a') == False\nassert     same_chars('aa', 'aa') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     same_chars(\"apple\", \"pleap\") == True\nassert     same_chars(\"apple\", \"apple\") == True\nassert     same_chars(\"apple\", \"bapple\") == False\nassert     same_chars(\"apple\", \"bapple\") == False\nassert     same_chars(\"apple\", \"applpe\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     same_chars(s0=\"\",s1=\"\") == True\nassert     same_chars(s0=\"\",s1=\"a\") == False\nassert     same_chars(s0=\"a\",s1=\"\") == False\nassert     same_chars(s0=\"abc\",s1=\"a\") == False\nassert     same_chars(s0=\"abc\",s1=\"abc\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef get_diff_chars(s0: str, s1: str):\n    \"\"\"\n    Get the characters that appear only in s1\n    \"\"\"\n    pass\n\ndef get_chars(s: str):\n    \"\"\"\n    Return a set of characters that appears in the string.\n    \"\"\"\n    pass\n\ndef get_chars_count(s: str):\n    \"\"\"\n    Get the number of characters that appears in the string.\n    \"\"\"\n    pass\n\ndef is_prefix(prefix: str, s: str):\n    \"\"\"\n    Check if a string is the prefix of another string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     same_chars('hello', 'world') is False\nassert     same_chars('abcde', 'abcde') is True\nassert     same_chars('abcde', 'bcd') is False\nassert     same_chars('abcde', 'abc') is True\nassert     same_chars('abcde', 'a') is True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     same_chars(\"abc\", \"abc\")\nassert     same_chars(\"abc\", \"abd\")\nassert     not same_chars(\"abc\", \"a\")\nassert     not same_chars(\"abc\", \"ab\")\nassert     not same_chars(\"abc\", \"abcd\")\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     same_chars('word', 'word') is True\nassert     same_chars('word', 'worl') is False\nassert     same_chars('word', 'wor') is False\nassert     same_chars('', '') is True\nassert     same_chars('', 'word') is False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     same_chars(\"\", \"\")\nassert     same_chars(\"a\", \"\")\nassert     same_chars(\"\", \"a\")\nassert     same_chars(\"a\", \"b\")\nassert     same_chars(\"ab\", \"c\")\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     same_chars('aab', 'aabb')\nassert not same_chars('a', 'aaa')\nassert not same_chars('abcd', 'bad')\n\ndef is_palindromic(s: str):\n    \"\"\"\n    Check if a string is palindromic.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     same_chars('', '')\nassert     same_chars('a', 'a')\nassert     same_chars('a', 'A')\nassert     same_chars('a', 'b')\nassert     same_chars('z', 'z')\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef main():\n    n = int(input())\n    print(fib(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(5) == 5\nassert     fib(10) == 55\nassert     fib(20) == 6765\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing( \"<h1>hello\" )             == False\nassert     correct_bracketing( \"<h1>\" )                 == True\nassert     correct_bracketing( \"<h1><a>hello\" )         == False\nassert     correct_bracketing( \"<h1>hello<a>world</h1>\" )     == False\nassert     correct_bracketing( \"<h1>hello<a>world</a></h1>\" )     == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<html><head><title>Title</title></head></html>\") == False\nassert     correct_bracketing(\"<html><head><title>Title</title></head><body><h1>H1</h1><body></html>\") == True\nassert     correct_bracketing(\"<html><head><title>Title</title></head></html>\") == False\nassert     correct_bracketing(\"<html><head><title>Title</title></head><body><h1>H1<body></html>\") == False\nassert     correct_bracketing(\"<html><head><title>Title</title></head><body><h1>H1</body></html>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<><><>\") == False\nassert     correct_bracketing(\"<<<\") == False\nassert     correct_bracketing(\"<<<<\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<><><><><><><><><><><><>\") == False\nassert     correct_bracketing(\"<<>><><><><><><><><><><><>\") == True\nassert     correct_bracketing(\"<<>><<>><><><><><><><><><><>\") == False\nassert     correct_bracketing(\"<<>><<>><><><><><><><><><<><>\") == True\nassert     correct_bracketing(\"<<>><<>><><><><><><><><<><><><><<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<><\") == True\nassert     correct_bracketing(\"<<><\") == False\nassert     correct_bracketing(\"<><<><>\") == False\nassert     correct_bracketing(\"<><<><>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<<>>\")\nassert     not correct_bracketing(\"<\")\nassert     not correct_bracketing(\"<<\")\nassert     not correct_bracketing(\">\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef remove_spaces(s: str):\n    \"\"\"\n    returns a copy of s with all spaces removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<>\") == True, \"should return True for the input <>\"\nassert     correct_bracketing(\"<[>\") == False, \"should return False for the input <[>\"\nassert     correct_bracketing(\"<>\") == True, \"should return True for the input <> and <>\"\nassert     correct_bracketing(\"<[>\") == False, \"should return False for the input <[>\"\nassert     correct_bracketing(\"<]>\") == False, \"should return False for the input <]>\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<<\") == True\nassert     correct_bracketing(\"<<<<<<\") == True\nassert     correct_bracketing(\"<<<<<\") == False\nassert     correct_bracketing(\"<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<><><><><><><><><><><><><><><><><><><><><><>\") == True\nassert     correct_bracketing(\"<<<><><><><><><><><><><><><><><><><><><><><>\") == True\nassert     correct_bracketing(\"<>\") == False\nassert     correct_bracketing(\"<>><><><><><><><><><><><><><><><><><><><><><>\") == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef linear(l: list):\n    \"\"\"Return True is list elements are in a linear relationship.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1,2,3]) == True\nassert     monotonic([1,3,2]) == True\nassert     monotonic([2,3,1]) == True\nassert     monotonic([1,3,2,5,6,7]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef swap_around(l: list):\n    \"\"\"Swap first and last items of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     monotonic([1,2,3,4]) == True\nassert     monotonic([1,2,3,3]) == True\nassert     monotonic([1,2,3,2]) == True\nassert     monotonic([1,2,2,1]) == True\nassert     monotonic([1,1,2,3]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     monotonic([1,2,3,4,5]) == True\nassert     monotonic([5,4,3,2,1]) == True\nassert     monotonic([1,1,2,3,4]) == False\nassert     monotonic([1,2,3,3,4]) == False\nassert     monotonic([]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     monotonic([1, 2, 3, 4, 5])\nassert     monotonic([5, 4, 3, 2, 1])\nassert not monotonic([1, 5, 4, 3, 2])\nassert     monotonic([1, 2, 3, 3, 3])\nassert     not monotonic([3, 2, 3, 1, 2])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     common([], []) == []\nassert     common([1], []) == []\nassert     common([], [1]) == []\nassert     common([1], [2]) == []\nassert     common([1, 2], [2]) == [2]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     common(['a', 'b', 'c'], ['x', 'y', 'z']) == []\nassert     common(['a', 'b', 'c'], ['c', 'd', 'e']) == ['c']\nassert     common(['a', 'b', 'c'], ['c', 'd', 'e', 'f']) == ['c']\nassert     common(['a', 'b', 'c'], ['d', 'e', 'f']) == []\nassert     common([], ['d', 'e', 'f']) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \n\n\n\ndef remove(l1: list, l2: list):\n    \"\"\"Remove common elements between two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,4]) == [1, 2, 3, 4]\nassert     common([1,2,3], [1,2,3,4]) == [1, 2, 3]\nassert     common([1,2,3], []) == []\nassert     common([], [1,2,3,4]) == []\nassert     common([1,2], [1,2,3]) == [1, 2]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     set(common(['a', 'b', 'c', 'd'], ['b', 'c', 'd'])) == set(['b', 'c', 'd'])\nassert     set(common([], ['b', 'c', 'd'])) == set([])\nassert     set(common(['a', 'b', 'c', 'd'], ['a'])) == set(['a'])\nassert     set(common(['a', 'b', 'c', 'd'], ['b', 'c', 'd'])) == set(['b', 'c', 'd'])\nassert     set(common([], [])) == set([])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     common([], []) == []\nassert common([1], []) == []\nassert common([1, 2], []) == []\nassert common([1, 2], [2]) == [2]\nassert common([1, 2], [3]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     common([1, 2, 3, 4], [2, 3, 5, 6]) == [2, 3]\nassert     common([1, 2, 3, 4], [2, 4, 5, 6]) == [2, 4]\nassert     common([1, 2, 3, 4], [2, 4, 6, 7]) == [2]\nassert     common([1, 2, 3, 4], [2, 4, 5, 7]) == []\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(11) == 11\nassert     largest_prime_factor(14) == 2\nassert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(999) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(8) == 2, f\"Wrong result: {largest_prime_factor(8)}\"\nassert     largest_prime_factor(4) == 2, f\"Wrong result: {largest_prime_factor(4)}\"\nassert     largest_prime_factor(9) == 3, f\"Wrong result: {largest_prime_factor(9)}\"\nassert     largest_prime_factor(0) == 0, f\"Wrong result: {largest_prime_factor(0)}\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(1) is None\nassert     largest_prime_factor(2) is None\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(17) == 17\n\ndef largest_prime_factor_v2(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(37) == 37\nassert     largest_prime_factor(111) == 11\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(72) == 2\nassert     largest_prime_factor(9) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(123456) == 29\n\ndef main():\n    print(largest_prime_factor(600851475143))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(1524) == 2\nassert     largest_prime_factor(100) == 5\n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(24) == 2\nassert     largest_prime_factor(60) == 3\nassert     largest_prime_factor(78) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef test_sum_to_n():\n    assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert _____, _____\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 5050\nassert     sum_to_n(1_000) == 500500\nassert     sum_to_n(10_000) == 545454545\nassert     sum_to_n(10_000_000) == 76546546546\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing('(()()()())') == True\nassert     correct_bracketing('((()((()())))') == True\nassert     correct_bracketing('((()((()())))') == True\nassert     correct_bracketing('((())') == False\nassert     correct_bracketing('(()') == False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n\ndef first_check(brackets: str):\n    \"\"\" \n    brackets is a string of \"(\" and \")\".\n    return True if the string is a valid bracket sequence,\n    and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()()())\") == True\nassert     correct_bracketing(\"(()()())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef is_balanced(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if the bracketing is balanced.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"((()()()))\") == False\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\"())()(\") == False\nassert     correct_bracketing(\"(())((()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"(()()())\"        ) == True, \"Should be True\"\nassert     correct_bracketing(\"())(\"                ) == False, \"Should be False\"\nassert     correct_bracketing(\"(()\"                ) == False, \"Should be False\"\nassert     correct_bracketing(\"(()))\"            ) == False, \"Should be False\"\nassert     correct_bracketing(\"))(\"                ) == False, \"Should be False\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(())(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     correct_bracketing('(()())')\nassert not correct_bracketing('((())')\nassert not correct_bracketing('(()))')\nassert not correct_bracketing('(()))((())')\nassert not correct_bracketing(')()())')\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"\") == True, \\\n        \"should work with an empty string\"\nassert     correct_bracketing(\"()\") == True, \\\n        \"should work with a string with one pair of matching brackets\"\nassert     correct_bracketing(\"(\") == False, \\\n        \"should work with a string with one pair of unmatched brackets\"\nassert     correct_bracketing(\")(\") == False, \\\n        \"should work with a string with one pair of unmatched brackets\"\nassert     correct_bracketing(\"(())\") == True, \\\n        \"should work with a string with two pairs of matching brackets\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing('(())') == True, 'correct_bracketing is not correct'\nassert     correct_bracketing('(())((()())())') == True, 'correct_bracketing is not correct'\nassert     correct_bracketing('(()((())())(())') == True, 'correct_bracketing is not correct'\nassert     correct_bracketing('((()((())())(())') == False, 'correct_bracketing is not correct'\nassert     correct_bracketing(')()(') == False, 'correct_bracketing is not correct'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     derivative([]) == []\nassert     derivative([1]) == [0]\nassert     derivative([1, 1]) == [0, 2]\nassert     derivative([1, 2]) == [2]\nassert     derivative([2, 2, 1]) == [2, 2, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     derivative([1, 2, 3]) == [2, 3, 6]\nassert     derivative([0, 1, 2, 3]) == [1, 2, 6]\nassert     derivative([1, 2, 3, 4]) == [2, 6, 12]\n\ndef multiply(xs: list, ys: list):\n    \"\"\" xs and ys represent coefficients of polynomials.\n    Return product of two polynomials in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     derivative([1,2,3]) == [2, 3, 6]\nassert     derivative([0,1,2,3,4,5,6,7]) == [24, 12, 6, 2, 0, -2, -12, -24]\n\ndef newton_method(xs: list, eps: float):\n    \"\"\"\n    Return the root of the polynomial with coefficients xs with\n    the given accuracy.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     derivative([1, 1, 1, 1]) == [2, 2, 2, 2], \\\n          \"Your derivative does not work for [1, 1, 1, 1]\"\nassert     derivative([1, 1, 1, 1, 1]) == [3, 3, 3, 3, 3], \\\n          \"Your derivative does not work for [1, 1, 1, 1, 1]\"\nassert     derivative([1, 1, 1, 1, 1, 1]) == [4, 4, 4, 4, 4, 4], \\\n          \"Your derivative does not work for [1, 1, 1, 1, 1, 1]\"\nassert     derivative([1, 1, 1, 1, 1, 1, 1]) == [5, 5, 5, 5, 5, 5, 5], \\\n          \"Your derivative does not work for [1, 1, 1, 1, 1, 1, 1]\"\n\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n    \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(10) == 55\nassert fibfib(50) == 12586269025\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef test_fibfib():\n    for i in range(10):\n        assert fibfib(i) == i\n\ndef create_a_mapping(s: str, delimiter: str = None) -> dict:\n    \"\"\"Create a mapping from s\n    :param s: a string that has the format of '<str1>:<str2>;<str3>:<str4>...'\n    :param delimiter: the delimiter of s, if not specified, it is ':'\n    :return: a mapping from str to str\n    \"\"\"\n    pass\n\ndef test_create_a_mapping():\n    a_map = create_a_mapping('Hello:World;Foo:Bar')\n    "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef test_fibfib():\n    assert \n\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef fibfib2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef fibfib_with_memory(n: int):\n    \"\"\"Another version of fibfib, the only difference is that this function saves the intermediate results in a dictionary in memory.\n    \"\"\"\n    pass\n\n\ndef fibfib_with_memory_and_file(n: int):\n    \"\"\"Another version of fibfib, the only difference is that this function saves the intermediate results in a dictionary in memory and also writes them into a file.\n    \"\"\"\n    pass\n\n\ndef fibfib_with_stack(n: int):\n    \"\"\"Another version of fibfib, the only difference is that this function uses stack to memorize the intermediate results.\n    \"\"\"\n    pass\n\n\ndef fibfib_with_stack_and_file(n: int):\n    \"\"\"Another version of fibfib, the only difference is that this function uses stack to memorize the intermediate results and also writes them into a file.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\nassert     fibfib(5) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1\nassert fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     vowels_count(\"car\") == 3, 'wrong result for car'\nassert     vowels_count(\"cheesecake\") == 6, 'wrong result for cheesecake'\nassert     vowels_count(\"bbb\") == 0, 'wrong result for bbb'\nassert     vowels_count(\"x\") == 1, 'wrong result for x'\nassert     vowels_count(\"xyz\") == 0, 'wrong result for xyz'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     vowels_count(\"test\") == 4\nassert     vowels_count(\"testi\") == 4\nassert     vowels_count(\"testi y\") == 3\nassert     vowels_count(\"testi yy\") == 0\nassert     vowels_count(\"testi yy \") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     vowels_count('hello') == 2\nassert     vowels_count('world') == 1\nassert     vowels_count('yes') == 1\nassert     vowels_count('no') == 0\nassert     vowels_count('true') == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     vowels_count('foo') == 3, \"wrong result for 'foo'\"\nassert     vowels_count('bar') == 1, \"wrong result for 'bar'\"\nassert     vowels_count('hello') == 2, \"wrong result for 'hello'\"\nassert     vowels_count('me') == 0, \"wrong result for'me'\"\nassert     vowels_count('he') == 0, \"wrong result for 'he'\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     vowels_count('awesome') == 5\nassert     vowels_count('Python') == 4\nassert     vowels_count('yay') == 1\n\nif __name__ == '__main__':\n    print(FIX)\n    input('Tests passed, press ENTER to exit')"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     vowels_count('abcde') == 0\nassert     vowels_count('abcdea') == 1\nassert     vowels_count('abcdei') == 1\nassert     vowels_count('abcdey') == 2\n\nprint('The code ran Correctly'"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     vowels_count('') == 0, 'Error'\nassert     vowels_count('a') == 1, 'Error'\nassert     vowels_count('ae') == 2, 'Error'\nassert     vowels_count('aae') == 3, 'Error'\nassert     vowels_count('aee') == 3, 'Error'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     vowels_count('test') == 5\nassert     vowels_count('ioioioi') == 7\nassert     vowels_count('yyiioioi') == 7\nassert     vowels_count('yooouuuuu') == 9\nassert     vowels_count('yoooouuuu') == 8\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     vowels_count('') == 0\nassert     vowels_count('a') == 1\nassert     vowels_count('aa') == 2\nassert     vowels_count('aA') == 1\nassert     vowels_count('Aa') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     vowels_count(\"bar\")     == 0, \"bar: expected 0, got %d\" % vowels_count(\"bar\")\nassert     vowels_count(\"helicopter\")     == 0, \"helicopter: expected 0, got %d\" % vowels_count(\"helicopter\")\nassert     vowels_count(\"honey\")     == 3, \"honey: expected 3, got %d\" % vowels_count(\"honey\")\nassert     vowels_count(\"apple\")     == 2, \"apple: expected 2, got %d\" % vowels_count(\"apple\")\nassert     vowels_count(\"strawberry\")     == 4, \"strawberry: expected 4, got %d\" % vowels_count(\"strawberry\")\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (circular_shift(42, 1) == '4241')\nassert     (circular_shift(42, 2) == '2442')\nassert     (circular_shift(42, 3) == '1242')\nassert     (circular_shift(42, 4) == '1224')\nassert     (circular_shift(42, 0) == '42')\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     circular_shift(4567, 1) == '2468'\nassert     circular_shift(4567, 3) == '4367'\nassert     circular_shift(4567, 4) == '1234'\nassert     circular_shift(4567, 6) == '7856'\nassert     circular_shift(4567, 7) == '4567'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef repeating_key_xor(pt, key):\n    \"\"\"Return the XOR of pt with key.\n    For example, if pt = \"Burning 'em, if you ain't quick and nimble I go crazy when I hear a cymbal\"\n    and key = \"ICE\", the result is \"0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     circular_shift('123456789', 3) == '345678912'\nassert     circular_shift('123456789', 1) == '2345678912'\nassert     circular_shift('123456789', 10) == '987654321'\nassert     circular_shift('123456789', 0) == '123456789'\nassert     circular_shift('123456789', -3) == '891234567'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     circular_shift(42, 1) == \"24\"\nassert     circular_shift(42, 2) == \"2 4\"\nassert     circular_shift(42, 3) == \"42\"\nassert     circular_shift(42, 42) == \"2442\"\nassert     circular_shift(42, 43) == \"2442\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (circular_shift(1234, 1) == '4321')\nassert     (circular_shift(1234, 2) == '2341')\nassert     (circular_shift(1234, 3) == '1234')\nassert     (circular_shift(1234, 4) == '1243')\nassert     (circular_shift(1234, 0) == '1234')\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (circular_shift(42,1) == '41' and circular_shift(42,2) == '42') or\\\n        (circular_shift(42,1) == '42' and circular_shift(42,2) == '41')\nassert circular_shift(42,0) == '42'\nassert circular_shift(0,0) == '0'\n\ndef add_binary(a,b):\n    \"\"\"Return the sum of numbers a and b as a string.\"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     '3412' == circular_shift('1234', 1)\nassert     '4321234' == circular_shift('1234', 2)\nassert     '4321' == circular_shift('1234', 3)\nassert     '3412' == circular_shift('1234', -1)\nassert     '4321' == circular_shift('1234', -2)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     '235' == circular_shift(2354, 1)\nassert     '3542' == circular_shift(2354, 4)\nassert     '23' == circular_shift(23, 3)\nassert     '3' == circular_shift(23, 2)\nassert     '5432' == circular_shift(2354, 5)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (circular_shift(4567, 1) == '4671')\nassert     (circular_shift(4567, 2) == '3457')\nassert     (circular_shift(4567, 3) == '2347')\nassert     (circular_shift(4567, 4) == '1437')\nassert     (circular_shift(4567, 5) == '1237')\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digitSum('This is a test string 12345') == 65, 'Incorrect sum of digits'\nassert     digitSum('This is a test string 12345!') == 65, 'Incorrect sum of digits'\nassert     digitSum('This is a test string 12345!@#$') == 65, 'Incorrect sum of digits'\n\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digitSum(\"digitSumTest\") == \\\n        digitSum(\"DigitSumTest\") == 12\nassert     digitSum(\"\") == \\\n        digitSum(\"z\") == \\\n        digitSum(\"Z\") == \\\n        digitSum(\"7\") == \\\n        digitSum(\"a\") == \\\n        digitSum(\"A\") == 0\nassert     digitSum(\"B\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"c\") == \\\n        digitSum(\"d\") == \\\n        digitSum(\"D\") == \\\n        digitSum(\"e\") == \\\n        digitSum(\"E\") == \\\n        digitSum(\"F\") == \\\n        digitSum(\"f\") == \\\n        digitSum(\"f\") == \\\n        digitSum(\"z\") == \\\n        digitSum(\"z\") == \\\n        digitSum(\"Z\") == \\\n        digitSum(\"Z\") == \\\n        digitSum(\"7\") == \\\n        digitSum(\"7\") == \\\n        digitSum(\"7\") == \\\n        digitSum(\"a\") == \\\n        digitSum(\"a\") == \\\n        digitSum(\"a\") == \\\n        digitSum(\"A\") == \\\n        digitSum(\"A\") == \\\n        digitSum(\"A\") == \\\n        digitSum(\"B\") == \\\n        digitSum(\"B\") == \\\n        digitSum(\"B\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == \\\n        digitSum(\"b\") == "
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digitSum(\"12\") == 3, \"Error\"\nassert     digitSum(\"ABC\") == 9, \"Error\"\nassert     digitSum(\"ABc\") == 9, \"Error\"\nassert     digitSum(\"ABCs\") == 14, \"Error\"\nassert     digitSum(\"ABCD\") == 12, \"Error\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     digitSum(\"a\") == 97\nassert     digitSum(\"hello\") == 105\nassert     digitSum(\"A\") == 65\nassert     digitSum(\"\") == 0\nassert     digitSum(\"aA\") == 65+65\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digitSum(\"a\") == 97\nassert     digitSum(\"abc\") == 97 + 98 + 99\nassert     digitSum(\"a12\") == 97 + 98\nassert     digitSum(\"a1234\") == 97 + 98 + 99 + 123 + 124\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digitSum('abc') == 0\nassert     digitSum('abcd') == 36\nassert     digitSum('aBcDeFg') == 16\nassert     digitSum('T') == 66\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digitSum(\"a\") == 97\nassert     digitSum(\"ab\") == 111\nassert     digitSum(\"0123456789\") == 260\nassert     digitSum(\"abcdefgABCDEFG\") == 763\nassert     digitSum(\"\") == 0\nprint('passed')"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fruit_distribution('3 2',5) == 1, \"Test 1 failed\"\nassert     fruit_distribution('6 2',3) == 0, \"Test 2 failed\"\nassert     fruit_distribution('7 0',5) == 1, \"Test 3 failed\"\nassert     fruit_distribution('0 10',5) == 2, \"Test 4 failed\"\nassert     fruit_distribution('7 5',10) == 0, \"Test 5 failed\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"2 apples, 3 oranges\", 5) == 2, \"Example #1\"\nassert     fruit_distribution(\"0 apples, 10 oranges\", 7) == 1, \"Example #2\"\nassert     fruit_distribution(\"1 apple, 0 oranges\", 5) == 0, \"Example #3\"\nassert     fruit_distribution(\"1 apple, 0 oranges\", 5) == 0, \"Example #4\"\nassert     fruit_distribution(\"0 apples, 1 orange\", 4) == 0, \"Example #5\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fruit_distribution( '100/100/100', 100) == 10,'solution not complete'\nassert     fruit_distribution( '5/7/3', 10) == 2,'solution not complete'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"5050\", 3) == 1000\nassert     fruit_distribution(\"102030\", 2) == 0\nassert     fruit_distribution(\"123456\", 4) == 0\nassert     fruit_distribution(\"0\", 0) == 0\nassert     fruit_distribution(\"0\", 1) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fruit_distribution(\"1\", 1) == 1, \"Not correct\"\nassert fruit_distribution(\"1 2\", 3) == 0, \"Not correct\"\nassert fruit_distribution(\"0 1\", 2) == 2, \"Not correct\"\nassert fruit_distribution(\"0 5\", 5) == 2, \"Not correct\"\nassert fruit_distribution(\"1 2 3\", 4) == 1, \"Not correct\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fruit_distribution('6\\\\2', 4) == 2, \"Wrong output for input 6/2\"\nassert     fruit_distribution('4\\\\2', 4) == 1, \"Wrong output for input 4/2\"\nassert     fruit_distribution('3\\\\2', 4) == 0, \"Wrong output for input 3/2\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"2525100\", 100) == 5\nassert     fruit_distribution(\"1011000\", 11) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"apples, 3, oranges, 5, mangoes, 8\", 6) == 3\nassert     fruit_distribution(\"apples, 4, oranges, 5, mangoes, 7\", 8) == 0\n\nif __name__ == '__main__':\n    import re\n    s = input(\"Please enter the string that represents the total number of the apples and oranges and a total number of the fruits: \")\n    while True:\n        num = re.search(r'([0-9]+)', s)\n        if num:\n            num = int(num.group(1))\n            s = s[num:]\n            break\n        else:\n            s = input(\"Please enter the string that represents the total number of the apples and oranges and a total number of the fruits: \")\n\n    # remove the commas\n    s = s.replace(\",\", \"\")\n\n    # convert the string into a list of tokens\n    tokens = s.split()\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nassert pluck([]) == []\nassert pluck([1, 3]) == []\nassert pluck([1, 2, 3]) == [1, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pluck([1, 1, 2, 3, 4, 5])     ==     [2, 4], \"Test #1\"\nassert     pluck([1, 1, 2, 3, 4, 5])     ==     [2, 4], \"Test #2\"\nassert     pluck([0, 0, 2, 3, 4, 5])     ==     [0, 0], \"Test #3\"\nassert     pluck([1, 2, 3, 4, 5, 6])     ==     [2, 0], \"Test #4\"\nassert     pluck([0, 1, 2, 3, 4, 5])     ==     [0, 1], \"Test #5\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pluck( [ [2], [3, 4], [1, 6], [8], [6, 9] ] ) == [2, 0]\nassert     pluck( [ [2], [3, 4], [1, 6], [8], [6, 9, 10] ] ) == [2, 0]\nassert     pluck( [ [2], [3, 4], [1, 6], [8, 10], [6, 9, 10] ] ) == [2, 4]\nassert     pluck( [ [2], [3, 4], [1, 6], [8, 10], [6, 9, 10], [3] ] ) == [2, 4]\nassert     pluck( [ [2], [3, 4], [1, 6], [8, 10], [6, 9, 10], [3], [3] ] ) == [2, 4]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pluck([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [12, 4]\nassert     pluck([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [12, 4]\nassert     pluck([2, 3, 6, 8, 10, 12, 14, 16, 18, 20]) == [2, 3]\nassert     pluck([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [12, 4]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     pluck([]) == []\nassert     pluck([0]) == []\nassert     pluck([1]) == []\nassert     pluck([1, 2]) == []\nassert     pluck([1, 2, 3]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [2, 0] == pluck([1, 2, 0, 5, 0, 2, 1, 3, 1])\nassert     [1, 0] == pluck([1, 2, 0, 5, 0, 2, 1, 3, 1, 4, 1, 5, 0, 2, 1, 3, 1, 4, 1])\nassert     [0, 0] == pluck([0, 0, 1])\nassert     [0, 0, 0] == pluck([0, 0, 1, 1])\nassert     [] == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pluck([5, 4, 3, 2, 3, 2]) == [2, 3]\nassert     pluck([]) == []\nassert     pluck([1, 3, 5, 6, 4, 2]) == [2, 4]\nassert     pluck([1, 1, 1, 1, 1]) == []\nassert     pluck([2, 4, 3, 6, 8, 1]) == [1, 2]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pluck([1, 2, 4, 5, 6, 10, 20]) == [1, 1]\nassert     pluck([1, 3, 5, 7, 9, 10, 11]) == [3, 1]\nassert     pluck([3, 4, 6, 8, 10, 12]) == [4, 1]\nassert     pluck([3, 5, 6, 8, 10, 12]) == [6, 2]\nassert     pluck([3, 5, 6, 8, 10, 12, 14, 16]) == [8, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == []\nassert     pluck([1, 2, 3]) == []\nassert     pluck([1, 3, 6, 7]) == [3, 0]\nassert     pluck([1, 2, 2, 3]) == [2, 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == [1]\nassert     pluck([1,3]) == [1,2]\nassert     pluck([1,3,5]) == [1,2,4]\nassert     pluck([1,3,5,7]) == [1,2,4,6]\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     search([1,1,3,3,5,5,5,7,7,7]) == -1\nassert     search([1,1,3,3,5,5,5,7,7,7,7,9,9]) == 7\nassert     search([1,1,3,3,5,5,5,7,7,7,7,9,9,11]) == 11\nassert     search([1,1,3,3,5,5,5,7,7,7,7,9,9,11,11,13,13,13]) == -1\nassert     search([1,1,3,3,5,5,5,7,7,7,7,9,9,11,11,13,13,13,13,13]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     search([1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 7]) == 7 \nassert     search([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7]) == 7 \nassert     search([1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9]) == 8 \nassert     search([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9]) == -1 \nassert     search([1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9]) == -1 \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [1,1,1,2,2,2,2,3,3,4,4,5]\n    print(search(lst))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     search([1,2,4,5,6,8,8,8,8]) == 8\nassert     search([1,1,2,2,3,3,3,3]) == -1\nassert     search([1,1,1,2]) == -1\nassert     search([1,1,1,2,2]) == 2\nassert     search([1,2,2,3,4]) == 2\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # check the correctness of search\n    assert search([1,2,2,3,3,3,4,4,4,4]) == 4\n    assert search([2,2,2,3,3,3,4,4,4,4]) == 2\n    assert search([1,2,2,3,3,3,4,4,4,4]) == -1\n    "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     search([1,2,2,3,4,3,3,3]) == 3\nassert     search([5,2,3,3,3,3,3,3]) == 3\nassert     search([1,1,1]) == 1\nassert     search([1,1,1,2,2,3]) == -1\nassert     search([-1,1,-2]) == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     search([1, 2, 3, 4, 5, 1, 2, 3]) == 4\nassert     search([4, 3, 4, 5, 4, 5, 6]) == -1\nassert     search([2, 3, 5, 1, 3, 5, 3]) == 5\nassert     search([1, 5, 5, 5, 5, 5, 5]) == 5\nassert     search([5, 5, 5, 5, 5, 5, 5]) == 5\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef test_search():\n    assert search([1,2,3,3,3,3,4,4,5]) == 3\n    assert search([1,1,1]) == 1\n    assert search([1,2,3,4,5]) == -1\n    "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([0]) == [0]\nassert     strange_sort_list([0, 1]) == [0, 1]\nassert     strange_sort_list([0, 1, 1, 0]) == [0, 0, 1, 1]\nassert     strange_sort_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strange_sort_list([2, 1]) == [1, 2],'should be [1, 2]'\nassert     strange_sort_list([2, 3, 5, 1]) == [1, 2, 3, 5],'should be [1, 2, 3, 5]'\nassert     strange_sort_list([3, 5, 2, 1]) == [1, 2, 3, 5],'should be [1, 2, 3, 5]'\nassert     strange_sort_list([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6],'should be [1, 2, 3, 4, 5, 6]'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],'should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(strange_sort_list([5, 3, 1, 2, 6, 4]))"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \\\n        [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     strange_sort_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \\\n        [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     strange_sort_list([0]) == [0]\nassert     strange_sort_list([]) == []\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef strange_sort_tuple(tup):\n    '''\n    Given tuple of integers, return tuple in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1, 2, 3]) == [1, 2, 3]\nassert     strange_sort_list([3, 1, 2]) == [1, 2, 3]\nassert     strange_sort_list([3, 2, 1]) == [1, 2, 3]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triangle_area(4, 6, 7) == 13\nassert     triangle_area(2, 6, 7) == 7\nassert     triangle_area(2, 6, 6) == 3\nassert     triangle_area(2, 2, 7) == -1\n\ndef area_of_rectangle(a, b):\n    '''\n    Given the lengths of the sides of a rectangle. Return the area of the \n    rectangle rounded to 2 decimal points if the sides form a valid rectangle.\n    Otherwise return -1\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     round(triangle_area(3, 4, 5), 2) == 6.75\nassert     round(triangle_area(4, 3, 5), 2) == 6.75\nassert     triangle_area(3, 4, 10) == -1\nassert     triangle_area(3, 4, 4) == 4\nassert     triangle_area(3, 4, 7) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triangle_area(3, 4, 5) == 6\nassert     triangle_area(5, 5, 5) == 10\nassert     triangle_area(4, 5, 4) == 5\nassert     triangle_area(1, 1, 3) == 1\nassert     triangle_area(0, 1, 1) == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(3, 4, 5) == 6.0\nassert     triangle_area(1, 2, 3) == 1.0\nassert     triangle_area(3, 4, 10) == -1\nassert     triangle_area(3, 4, 0) == -1\nassert     triangle_area(3, 4, -1) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triangle_area(3, 2, 2) == 4.67\nassert     triangle_area(3, 2, 2.1) == 4.67\nassert     triangle_area(3, 2, 2.2) == -1\nassert     triangle_area(3, 2, 1.9) == 4.67\nassert     triangle_area(3, 2, 1.3) == 4.67\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triangle_area(5, 3, 7) == 12.75, f'test #1: expected 12.75 but received {triangle_area(5, 3, 7)}'\nassert     triangle_area(1, 2, 2) == 1.0, f'test #2: expected 1.0 but received {triangle_area(1, 2, 2)}'\nassert     triangle_area(1, 2, 4) == -1, f'test #3: expected -1 but received {triangle_area(1, 2, 4)}'\nassert     triangle_area(1, 2, 3) == 1.25, f'test #4: expected 1.25 but received {triangle_area(1, 2, 3)}'\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triangle_area(3, 4, 5) == 6.00\nassert     triangle_area(1, 1, 2) == 1.00\nassert     triangle_area(1, 2, 2) == -1\nassert     triangle_area(1, 3, 2) == 1.00\nassert     triangle_area(1, 1, 3) == -1\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     will_it_fly([10, 20, 30, 40], 80) == False\nassert     will_it_fly([10, 20, 30, 40], 120) == True\nassert     will_it_fly([100, 50, 60], 120) == False\n\nprint('Correct!'"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     will_it_fly([10, 20, 30, 40, 50], 100) == False\nassert     will_it_fly([10, 20, 30, 40, 50], 101) == False\nassert     will_it_fly([10, 20, 30, 40, 50], 79) == True\nassert     will_it_fly([10, 20, 30, 40, 50, 60], 79) == False\nassert     will_it_fly([10, 20, 30, 40, 50, 60], 79) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     will_it_fly([1, 2, 3], 6) == True\nassert     will_it_fly([1, 2, 3], 4) == False\nassert     will_it_fly([1, 2, 3, 4, 5], 16) == True\nassert     will_it_fly([1, 2, 3, 4, 5, 6], 20) == False\nassert     will_it_fly([1, 2, 3, 4, 5, 6, 7], 32) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     will_it_fly([],10) == True\nassert     will_it_fly([1, 2, 3, 4],10) == False\nassert     will_it_fly([],10) == True\nassert     will_it_fly([1, 2, 3, 4, 5],10) == True\nassert     will_it_fly([1, 2, 3, 4, 6],10) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     will_it_fly([], 20) == False\nassert will_it_fly([1, 2, 3], 20) == False\nassert will_it_fly([5, 2, 3], 20) == False\nassert will_it_fly([5, 2, 3], 10) == False\nassert will_it_fly([5, 2, 3], 5) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     will_it_fly([[1,1],2],5) == True, 'error'\nassert     will_it_fly([[1,1],2],4) == False, 'error'\nassert     will_it_fly([[1,1],2,2],4) == False, 'error'\nassert     will_it_fly([[1,1],2,2],6) == True, 'error'\nassert     will_it_fly([[1,1,1,1,1,1,1,1,1],2],6) == True, 'error'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     will_it_fly([1],1) == False\nassert will_it_fly([1,2],1) == False\nassert will_it_fly([1,2,3],1) == False\nassert will_it_fly([1,2,3],3) == True\nassert will_it_fly([2,1,3],3) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     will_it_fly([1,2,3,3],4) == False\nassert     will_it_fly([1,2,3,4,5],3) == True\nassert     will_it_fly([1,2,3,4,5],2) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     will_it_fly( [ 1, 2, 3, 4, 3, 2, 1 ], 9 ) == True, \"case 1\"\nassert     will_it_fly( [ 1, 2, 3, 4, 3, 2, 1 ], 8 ) == False, \"case 2\"\nassert     will_it_fly( [ 1, 2, 3, 4, 3, 2, 1 ], 7 ) == True, \"case 3\"\nassert     will_it_fly( [ 1, 2, 3, 4, 3, 2, 1 ], 6 ) == False, \"case 4\"\nassert     will_it_fly( [ 1, 2, 3, 4, 3, 2, 1 ], 5 ) == True, \"case 5\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     will_it_fly([1,2,2,3], 10) == True\nassert     will_it_fly([0,2,3], 10) == False\nassert     will_it_fly([1,2,3,1], 10) == True\nassert     will_it_fly([1,2,3,1], 12) == False\nassert     will_it_fly([1,2,3,1], 5) == True\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 3, 5, 5, 3]) == 1, \"Incorrect output\"\nassert     smallest_change([1, 2, 2, 5, 3]) == 2, \"Incorrect output\"\nassert     smallest_change([2, 2, 2, 2]) == 0, \"Incorrect output\"\nassert     smallest_change([1, 3, 4, 5]) == 0, \"Incorrect output\"\nassert     smallest_change([1, 3, 5, 2, 1]) == 2, \"Incorrect output\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     smallest_change([1, 4, 3, 2]) == 2\nassert     smallest_change([0, 1, 2, 3, 4, 5]) == 1\nassert     smallest_change([5, 5, 2, 1, 2]) == 0\nassert     smallest_change([1, 2, 1]) == 0\nassert     smallest_change([1, 1, 2, 2]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(f\"The smallest number of changes required to make the array palindromic is {smallest_change(arr)}\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     smallest_change([1, 2, 2, 3, 4]) == 1\nassert     smallest_change([1, 2, 3, 2, 3]) == 2\nassert     smallest_change([1, 2, 3, 3, 3]) == 0\nassert     smallest_change([1, 2, 1, 2, 3]) == 1\nassert     smallest_change([1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef test_smallest_change():\n    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert smallest_change(arr) == 1\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert smallest_change(arr) == 0\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 5]\n    assert smallest_change(arr) == 2\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8]\n    "
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 5, 9]) == 3, \"Wrong answer\"\nassert     smallest_change([4, 4, 2, 1]) == 0, \"Wrong answer\"\nassert     smallest_change([3, 6, 2, 3]) == 2, \"Wrong answer\"\nassert     smallest_change([1, 5, 9, 9]) == 0, \"Wrong answer\"\nassert     smallest_change([1, 5, 9, 9, 9, 9, 1]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     smallest_change([1, 4, 6, 3, 2, 1]) == 2, \"error\"\nassert     smallest_change([1, 4, 6, 3, 2, 1]) == 2, \"error\"\nassert     smallest_change([1, 4, 6, 3, 2, 1]) == 2, \"error\"\n\nassert     smallest_change([1, 5, 1, 5, 1]) == 0, \"error\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     smallest_change([1, 2, 3, 4, 2]) == 1\nassert     smallest_change([1, 1, 2, 3, 4]) == 0\nassert     smallest_change([1, 1, 2, 2, 2, 2, 2, 2, 1]) == 2\nassert     smallest_change([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1]) == 2\nassert     smallest_change([1, 2, 3, 4, 5, 2]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     smallest_change([1, 3, 5, 2, 2, 1, 1, 0]) == 2\nassert smallest_change([1, 3, 5, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]) == 2\nassert smallest_change([1, 3, 5, 2, 2, 1, 1, 0]) == 2\nassert smallest_change([1, 3, 5, 2, 2, 1, 1]) == 2\nassert smallest_change([1, 3, 5, 2, 2, 1, 1, 1]) == 3\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     total_match([\"abc\", \"abcd\"], [\"a\", \"b\", \"c\"]) == [\"abc\"]\nassert     total_match([\"xyz\", \"xy\", \"z\"], [\"x\", \"y\"]) == [\"xyz\"]\nassert     total_match([\"abc\", \"abcd\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"abcd\"]\nassert     total_match([\"xyz\", \"xy\", \"z\"], [\"x\", \"y\", \"z\"]) == [\"xyz\"]\nassert     total_match([\"abc\", \"abcd\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"abc\", \"abcd\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \ntotal_match([\"abcdefg\", \"abcd\"], [\"abcde\", \"abcdefg\"]) == [\"abcde\"]\nassert \ntotal_match([\"abcd\", \"abcde\"], [\"abcde\", \"abcdefg\"]) == [\"abcde\", \"abcdefg\"]\nassert \ntotal_match([\"abcdefg\", \"abcd\"], [\"abcde\", \"abcdefg\"]) == [\"abcdefg\"]\nassert \ntotal_match([\"abcdefg\", \"abcd\"], [\"abcdefg\", \"abcd\"]) == [\"abcdefg\"]\n\ndef zip_sum(lst1, lst2):\n    '''\n    Write a function that accepts two lists and returns a list that contains tuples \n    that are pairs of items from the lists, where the sum of the tuples is equal to \n    the sum of the items in the tuple. \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     total_match(['ABC', 'ABD', '12C', 'HI'], ['ABC', 'HI', 'ABD', '12C']) == ['ABC', 'ABD', '12C']\nassert     total_match(['ABC', 'HI', 'ABD', '12C'], ['ABC', 'HI', 'ABD', '12C']) == ['ABC', 'HI', 'ABD', '12C']\nassert     total_match(['ABC', 'HI', 'ABD', '12C'], ['ABC', 'HI', 'ABD', '12C', 'DE']) == ['ABC', 'HI', 'ABD', '12C']\nassert     total_match(['ABC', 'HI', 'ABD', '12C'], ['ABC', 'HI', 'ABD', '12C', 'DE', 'HE', 'HI']) == ['ABC', 'HI', 'ABD', '12C', 'DE', 'HE']\nassert     total_match(['ABC', 'HI', 'ABD', '12C'], ['ABC', 'HI', 'ABD', '12C', 'DE', 'HE', 'HI', 'HE']) == ['ABC', 'HI', 'ABD', '12C', 'DE', 'HE']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     total_match([\"aa\", \"bb\"], [\"ab\", \"bbc\", \"cd\"]) == [\"ab\", \"bbc\", \"cd\"]\nassert     total_match([\"aa\", \"bb\"], [\"ab\", \"bbc\"]) == [\"aa\"]\nassert     total_match([\"aa\", \"bb\"], [\"aab\", \"bbc\"]) == [\"aa\", \"bb\"]\nassert     total_match([\"aa\", \"bb\"], [\"aab\", \"bbc\", \"aad\"]) == [\"aa\", \"bb\"]\nassert     total_match([\"aa\", \"bb\"], [\"aab\", \"bbc\", \"aad\", \"aae\"]) == [\"aa\", \"bb\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     total_match(['a', 'f', 'a'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'f']\nassert     total_match(['a', 'b', 'a', 'a'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'a']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['c']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     total_match(['abc', 'cde', 'rst'], ['def', 'xyz', 'pqr']) ==     ['abc', 'cde']\nassert     total_match(['a', 'ab', 'abc'], ['b', 'bc', 'abc']) ==     ['a', 'ab']\nassert     total_match(['abcd', 'efgh', 'ijkl'], ['abcd', 'efgh', 'ijkl']) ==     ['abcd', 'efgh', 'ijkl']\n\ndef filter_strings(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    only strings from the first list that are substrings of any string in the second list.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     total_match(['hello', 'python', 'Java'], ['java', 'python', 'Java', 'hello']) == ['hello', 'Java']\nassert     total_match(['hello', 'python', 'Java'], ['hello', 'python', 'Java']) == ['hello', 'Java']\nassert     total_match(['hello', 'python', 'Java'], ['hello', 'python', 'hello']) == ['hello', 'hello']\n\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     total_match(['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz'], \n                    ['abcd', 'ijklmnopqrstuvwxyz']) == ['abcdefg', 'ijklmnopqrst']\nassert     total_match(['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz'], \n                    ['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz']) == ['abcdefg', 'ijklmnopqrst']\nassert     total_match(['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz'], \n                    ['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz', 'ijklmnopqrst']) == ['abcdefg', 'ijklmnopqrst']\nassert     total_match(['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz'], \n                    ['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz', 'ijklmnopqrst', 'ijklmnopqrst']) == ['abcdefg', 'ijklmnopqrst', 'ijklmnopqrst']\nassert     total_match(['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz'], \n                    ['abcdefg', 'abhijkl', 'ijklmnopqrst', 'abcdefghijklmnopqrstuvwxyz', 'ijklmnopqrst', 'ijklmnopqrst', 'abcdefg']) == ['abcdefg']\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(60) == False\nassert     is_multiply_prime(84) == False\nassert     is_multiply_prime(36) == True\nassert     is_multiply_prime(60) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(12) == True\nassert     is_multiply_prime(6) == False\nassert     is_multiply_prime(30) == False\nassert     is_multiply_prime(20) == True\nassert     is_multiply_prime(61) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(20) == True\nassert     is_multiply_prime(60) == True\nassert     is_multiply_prime(91) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(6) == False\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(7) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(60) == True\nassert     is_multiply_prime(20) == False\nassert     is_multiply_prime(42) == True\nassert     is_multiply_prime(37) == True\nassert     is_multiply_prime(44) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(33) == False, \"not False\"\nassert     is_multiply_prime(37) == True, \"not True\"\nassert     is_multiply_prime(39) == True, \"not True\"\nassert     is_multiply_prime(40) == False, \"not False\"\nassert     is_multiply_prime(42) == True, \"not True\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(3) == True, \"Test 1 Failed\"\nassert     is_multiply_prime(12) == False, \"Test 2 Failed\"\nassert     is_multiply_prime(6) == False, \"Test 3 Failed\"\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(5) == False\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(21) == True\nassert     is_multiply_prime(22) == False\nassert     is_multiply_prime(105) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(20) == True\nassert     is_multiply_prime(8) == True\nassert     is_multiply_prime(9) == False\nassert     is_multiply_prime(15) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef test_is_simple_power():\n    \"\"\"Your function should return True for all cases.\"\"\"\n    assert True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_simple_power(9,2) == True\nassert     is_simple_power(2,3) == False\nassert     is_simple_power(10,2) == False\nassert     is_simple_power(100,5) == True\nassert     is_simple_power(5,0) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_simple_power(1, 1) is True, \"1**1=1\"\nassert     is_simple_power(2, 1) is False, \"2**1!=2\"\nassert     is_simple_power(3, 1) is True, \"3**1=3\"\nassert     is_simple_power(27, 3) is True, \"27**3=27\"\nassert     is_simple_power(1, 2) is False, \"1**2!=1\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_simple_power(36, 2) == True\nassert     is_simple_power(13, 4) == True\nassert     is_simple_power(8, 3) == True\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(27, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(15, 3) == True\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 4) == True\nassert     is_simple_power(1, 10) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_simple_power(8, 2) == True\nassert     is_simple_power(9, 2) == False\nassert     is_simple_power(10, 2) == False\nassert     is_simple_power(81, 2) == True\nassert     is_simple_power(74, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_simple_power(2,2) == True\nassert     is_simple_power(3,2) == False\nassert     is_simple_power(8,2) == True\nassert     is_simple_power(8,3) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(25, 5) == True\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(10, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_simple_power(3125, 4) == True\nassert     is_simple_power(4, 4) == True\nassert     is_simple_power(1331, 4) == True\nassert     is_simple_power(14, 4) == False\nassert     is_simple_power(1, 1) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     iscube(1) == True\nassert     iscube(2**3) == True\nassert     iscube(3**3) == False\nassert     iscube(5**3) == True\nassert     iscube(9**3) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef is_prime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     iscube(1) == True\nassert     iscube(7) == True\nassert     iscube(3**3) == True\nassert     iscube(4**3) == True\nassert     iscube(3**4) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     iscube(1) == True\nassert     iscube(10) == False\nassert     iscube(32) == True\nassert     iscube(9) == False\nassert     iscube(27) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     iscube(1) == True\nassert     iscube(7) == False\nassert     iscube(8) == True\nassert     iscube(27) == True\nassert     iscube(32) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     iscube(1) == True, 'incorrect'\nassert     iscube(10) == False, 'incorrect'\nassert     iscube(27) == True, 'incorrect'\nassert     iscube(82) == True, 'incorrect'\nassert     iscube(8) == False, 'incorrect'\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert icsube(1) == True\nassert icsube(3) == True\nassert icsube(8) == True\nassert icsube(27) == True\nassert icsube(32) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     iscube(1) == False \nassert     iscube(4) == True\nassert     iscube(27) == True\nassert     iscube(0) == False\nassert     iscube(25) == False\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     hex_key(0) == 0\nassert     hex_key(A) == 1\nassert     hex_key(B) == 2\nassert     hex_key(C) == 3\nassert     hex_key(D) == 5\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     hex_key(\"0A\") == {'A': 2, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}, \"Wrong answer\"\nassert     hex_key(\"\") == {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}, \"Wrong answer\"\nassert     hex_key(\"123\") == {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}, \"Wrong answer\"\nassert     hex_key(\"12A\") == {'A': 2, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}, \"Wrong answer\"\nassert     hex_key(\"12F\") == {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 2}, \"Wrong answer\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     hex_key('F14') == 2\nassert     hex_key('D12') == 2\nassert     hex_key('E1E') == 4\nassert     hex_key('F2F') == 2\nassert     hex_key('F3F') == 3\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     hex_key( 'A') == 0\nassert     hex_key( 'E') == 0\nassert     hex_key( '1') == 0\nassert     hex_key( 'F') == 0\nassert     hex_key( '2') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     hex_key('') == 0, \"Wrong answer!\"\nassert hex_key('AABBCCDDEEFF') == 0, \"Wrong answer!\"\nassert hex_key('AABBCCDDEE') == 4, \"Wrong answer!\"\nassert hex_key('ABABABABACD') == 0, \"Wrong answer!\"\nassert hex_key('BABCEDEC') == 0, \"Wrong answer!\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     hex_key(\"\") == 0\nassert     hex_key(\"1\") == 0\nassert     hex_key(\"A\") == 0\nassert     hex_key(\"AAAA\") == 0\nassert     hex_key(\"2\") == 2\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     hex_key(\"0\") == 0\nassert     hex_key(\"1\") == 0\nassert     hex_key(\"2\") == 2\nassert     hex_key(\"3\") == 1\nassert     hex_key(\"4\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     hex_key(\"0\") == 0, \"wrong result for hex_key('0')\"\nassert     hex_key(\"D\") == 5, \"wrong result for hex_key('D')\"\nassert     hex_key(\"B\") == 11, \"wrong result for hex_key('B')\"\nassert     hex_key(\"A\") == 0, \"wrong result for hex_key('A')\"\nassert     hex_key(\"\") == 0, \"wrong result for hex_key('')\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     hex_key('F12A42E') ==     {'A': 2, 'B': 0, 'C': 0, 'D': 1, 'E': 3, 'F': 2}, 'incorrect result'\nassert hex_key('12AA') == {'A': 3, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}, 'incorrect result'\nassert hex_key('F') == {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 1}, 'incorrect result'\nassert hex_key('ABCDEF') == {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}, 'incorrect result'\nassert hex_key('1213') == {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 1}, 'incorrect result'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     hex_key('0') == 0\nassert     hex_key('1') == 0\nassert     hex_key('2') == 0\nassert     hex_key('3') == 0\nassert     hex_key('4') == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\nassert     decimal_to_binary(4) == 'db100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(10) == '1010'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(10) == 'db1010'\nassert     decimal_to_binary(17) == 'db11011'\nassert     decimal_to_binary(100) == 'db1100100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(7) == '0b11'\nassert     decimal_to_binary(8) == '0b1000'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string, which will be a binary number. Your task is to convert it to\n    decimal format. The function should return a number.\n\n    You will have to use your decimal_to_binary function from above to solve this task.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(3) == '0b11'\nassert     decimal_to_binary(4) == '0b100'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(1) == \"1db\"\nassert     decimal_to_binary(2) == \"10db\"\nassert     decimal_to_binary(3) == \"11db\"\nassert     decimal_to_binary(4) == \"100db\"\nassert     decimal_to_binary(5) == \"101db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == '101'\nassert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(128) == '10101'\nassert     decimal_to_binary(255) == '1011111'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(10) == 'db1010'\nassert     decimal_to_binary(100) == 'db1100'\nassert     decimal_to_binary(101) == 'db1101'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_happy('abcd') == True\nassert     is_happy('aabcdede') == True\nassert     is_happy('abcb') == False\nassert     is_happy('aabc') == False\nassert     is_happy('abc') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"abcba\") == False\nassert     is_happy(\"abcd\") == True\nassert     is_happy(\"aba\") == True\nassert     is_happy(\"abaab\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_happy(\"abc\") == True\nassert     is_happy(\"abca\") == False\nassert     is_happy(\"abcxyz\") == True\nassert     is_happy(\"abcdef\") == True\nassert     is_happy(\"aabbccddeeff\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_happy(\"a\") == False\nassert     is_happy(\"abcdef\") == True\nassert     is_happy(\"abbccddeef\") == False\nassert     is_happy(\"abcdefg\") == True\nassert     is_happy(\"aabbccddeef\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_happy('AbCdEfGh') == True, \"Wrong result for is_happy('AbCdEfGh')\"\nassert     is_happy('AbCdEf') == False, \"Wrong result for is_happy('AbCdEf')\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_happy('aba') == False\nassert     is_happy('abc') == False\nassert     is_happy('abcd') == False\nassert     is_happy('aabccc') == True\nassert     is_happy('abcdefghijklmnopqrstuvwxyz') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_happy(\"abc\") == False, \"Wrong\"\nassert     is_happy(\"abcd\") == True, \"Wrong\"\nassert     is_happy(\"abbcd\") == False, \"Wrong\"\nassert     is_happy(\"aabbcd\") == True, \"Wrong\"\nassert     is_happy(\"aabbccddeefghi\") == True, \"Wrong\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_happy('abc') == False\nassert     is_happy('abcba') == True\nassert     is_happy('abccba') == False\nassert     is_happy('abcaa') == True\nassert     is_happy('aabbcc') == False\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [\n    'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([1.0, 1.0, 0.7, 1.3, 1.0, 0.7, 1.3, 1.0, 0.7, 1.0, 0.7, 0.7, 0.0, 0.0]) == [\n    'C+', 'C', 'C-', 'D+', 'D', 'D-', 'D+', 'D+', 'D-', 'D-', 'E', 'E', 'E']\nassert     numerical_letter_grade([0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]) == [\n    'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0,4.0,4.0,4.0]) == [ \"A+\", \"A+\", \"A+\", \"A+\"]\nassert     numerical_letter_grade([3.7,3.7,3.7,3.7]) == [ \"A\", \"A\", \"A\", \"A\"]\nassert     numerical_letter_grade([3.3,3.3,3.3,3.3]) == [ \"A-\", \"A-\", \"A-\", \"A-\"]\nassert     numerical_letter_grade([3.0,3.0,3.0,3.0]) == [ \"B+\", \"B+\", \"B+\", \"B+\"]\nassert     numerical_letter_grade([2.7,2.7,2.7,2.7]) == [ \"B\", \"B\", \"B\", \"B\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4."
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([4.0, 3.7, 4.0, 4.0, 3.3]) == ['A+', 'A', 'A+', 'A+', 'B-']\nassert     numerical_letter_grade([4.0, 3.3, 4.0, 3.0, 2.7]) == ['A+', 'A-', 'A+', 'B+', 'B-']\nassert     numerical_letter_grade([4.0, 3.0, 4.0, 2.7, 2.3]) == ['A+', 'B+', 'B+', 'C-', 'C-']\nassert     numerical_letter_grade([4.0, 2.7, 4.0, 2.3, 2.0]) == ['A+', 'B+', 'B', 'C+', 'C']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 4.3, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['A+', 'A+', 'A+', 'A-', 'A-', 'B+', 'B-', 'B-', 'C+', 'C-', 'C-', 'D+', 'D-', 'E']\nassert     numerical_letter_grade([2.0, 2.7, 3.3, 3.7, 2.3, 2.0, 2.7, 3.0, 2.7, 3.0, 2.3, 1.7, 1.3, 1.0, 1.7, 0.0]) == \\\n        ['A-', 'A-', 'A-', 'B+', 'B-', 'C-', 'C-', 'C-', 'C-', 'C-', 'D+', 'D-', 'D-', 'D-', 'E']\nassert     numerical_letter_grade([2.7, 2.7, 3.3, 3.7, 2.3, 2.0, 2.7, 3.0, 2.7, 3.0, 2.3, 1.7, 1.3, 1.0, 1.7, 0.0]) == \\\n        ['B-', 'B-', 'B-', 'B-', 'B-', 'C-', 'C-', 'C-', 'C-', 'C-', 'D+', 'D-', 'D-', 'D-', 'E']\nassert     numerical_letter_grade([2.3, 2.3, 3.0, 3.7, 2.3, 2.0, 2.7, 3.0, 2.7, 3.0, 2.3, 1.7, 1.3, 1.0, 1.7, 0.0]) == \\\n        ['C-', 'C-', 'C-', 'C-', 'C-', 'D-', 'D-', 'D-', 'D-', 'D-', 'D+', 'D-', 'D-', 'D-', 'E']\nassert     numerical_letter_grade([1.7, 1.3, 1.0, 1.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == \\\n        ['F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\n\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) \\\n    == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Wrong numerical_letter_grade\"\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F'], \"Wrong numerical_letter_grade\"\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 1.0, 0.0, 0.0, 0.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F', 'E', 'E'], \"Wrong numerical_letter_grade\"\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0]) == [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F', 'E', 'E', 'E', 'E'], \"Wrong numerical_letter_grade\"\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([3.5, 3.2, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['B+', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'A+', 'A-', 'A-'], \"Check the correctness of your function.\"\nassert     numerical_letter_grade([3.2, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A-', 'A-', 'B+', 'B-', 'C+', 'C', 'C-', 'D+', 'D-', 'E'], \"Check the correctness of your function.\"\nassert     numerical_letter_grade([3.5, 3.2, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['B+', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'A+', 'A-', 'A-'], \"Check the correctness of your function.\"\nassert     numerical_letter_grade([3.2, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A-', 'A-', 'B+', 'B-', 'C+', 'C', 'C-', 'D+', 'D-', 'E', 'E', 'E', 'E'], \"Check the correctness of your function.\"\nassert     numerical_letter_grade([3.2, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A-', 'A-', 'B+', 'B-', 'C+', 'C', 'C-', 'D+', 'D-', 'E', 'E', 'E', 'E', 'E', 'E'], \"Check the correctness of your function.\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prime_length('1') is False\nassert     prime_length('2') is False\nassert     prime_length('3') is False\nassert     prime_length('4') is True\nassert     prime_length('12') is False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prime_length('prime') == False\nassert     prime_length('length') == True\nassert     prime_length('hello') == False\nassert     prime_length('l') == False\nassert     prime_length('hello world') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_length('Hello') == False\nassert     prime_length('987654321') == False\nassert     prime_length('12345') == False\nassert     prime_length('23') == True\nassert     prime_length('13') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_length('a') == False\nassert     prime_length('ab') == False\nassert     prime_length('ABC') == False\nassert     prime_length('ABCD') == False\nassert     prime_length('ABCDE') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prime_length(5) == False\nassert     prime_length(7) == True\nassert     prime_length(2) == True\nassert     prime_length(4) == False\nassert     prime_length(1) == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_length('asd') == False\nassert     prime_length('asdf') == False\nassert     prime_length('asdfgh') == False\nassert     prime_length('asdfghjk') == False\nassert     prime_length('asdfghjkl') == True\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 5\nassert     starts_one_ends(5) == 14\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 10\nassert     starts_one_ends(3) == 102\nassert     starts_one_ends(4) == 102\nassert     starts_one_ends(5) == 102\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     starts_one_ends(10) == 2\nassert     starts_one_ends(5) == 2\nassert     starts_one_ends(100) == 1\n\ndef starts_one_ends_2(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    start_one_count, end_one_count = 0, 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1':\n            start_one_count += 1\n        if str(i)[-1] == '1':\n            end_one_count += 1\n    return start_one_count + end_one_count\n\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 6\nassert     starts_one_ends(4) == 14\nassert     starts_one_ends(5) == 28\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     starts_one_ends(5) == 10\nassert     starts_one_ends(6) == 16\nassert     starts_one_ends(7) == 35\nassert     starts_one_ends(8) == 89\nassert     starts_one_ends(9) == 147\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 0,'should be 0'\nassert     starts_one_ends(2) == 2,'should be 2'\nassert     starts_one_ends(3) == 3,'should be 3'\nassert     starts_one_ends(4) == 4,'should be 4'\nassert     starts_one_ends(5) == 6,'should be 6'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 5\nassert     starts_one_ends(3) == 7\nassert     starts_one_ends(4) == 11\nassert     starts_one_ends(5) == 16\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 4\nassert     starts_one_ends(3) == 6\nassert     starts_one_ends(4) == 8\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    N = 12345\n    print(solve(N)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solve(5) == '101'\nassert     solve(1) == '1'\nassert     solve(10) == '1010'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint('1. test passed')"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\nassert     solve(5) == '101'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solve(25) == '100101'\nassert     solve(30) == '1111110'\nassert     solve(10) == '1010'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add([3,2,5,6]) == [6,4,4]\nassert     add([3,4]) == [4]\nassert     add([7]) == [7]\nassert     add([]) == []\nassert     add([0,1,2,3,4,5,6,7,8,9,10]) == [0,4,8,2,6,10,4,2,0,6,10]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 8, 6, 4, 2, 0]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10, 12]\nassert     add([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [12, 10, 8, 6, 4, 2, 0]\nassert     add([0]) == [0]\nassert     add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add([1,2,3,4,5,6]) == 16, add([1,2,3,4,5,6])\nassert     add([1,2,3,4,5,6,7,8,9,10]) == 90, add([1,2,3,4,5,6,7,8,9,10])\nassert     add([1,3,5,7,9]) == 32, add([1,3,5,7,9])\nassert     add([]) == 0, add([])\nassert     add([1,2,3,4,5,6,7,8,9,10,11]) == 110, add([1,2,3,4,5,6,7,8,9,10,11])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add([2, 3, 4, 5, 6, 7, 8]) == 14\nassert     add([2, 3, 4, 5, 6, 7]) == 12\nassert     add([2, 3, 4, 5, 6, 7, 8, 9]) == 20\nassert     add([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 30\nassert     add([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 42\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add([1,2,3])==[1, 3, 5], 'incorrect'\nassert     add([1,2,3,4,5,6])==[1, 3, 5, 7, 9], 'incorrect'\nassert     add([1,2,3,4,5,6,7,8,9,10])==[1, 3, 5, 7, 9, 13, 15, 17, 19], 'incorrect'\n\nprint('Correctness check Passed!')\n\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef reverse(lst):\n    \"\"\"Given a list of elements lst, modify it so that the even-indexed elements appear in reverse order and the odd-indexed elements appear in the original order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add([1,2,3,4,5]) == 20\nassert     add([0,-1,2]) == 0\nassert     add([-1,0,3]) == 2\nassert     add([0]) == 0\nassert     add([]) == 0\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add([0, 1, 2, 3]) == 4\nassert     add([0, 1, 3, 3]) == 4\nassert     add([0, 1, 3, 3, 5]) == 5\nassert     add([0, 1, 3, 3, 5, 6, 7, 8, 9]) == 10\nassert     add([0, 1, 3, 3, 5, 6, 7, 9]) == 10\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add([1,3,5,7]) == [1, 3, 7]\nassert add([1,2,3,4]) == [1, 2, 4]\nassert add([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert add([1,3,5,7,9]) == [1, 3, 7, 9]\nassert add([1,2,3,4,5,6]) == [1, 2, 4, 6]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) == 3\nassert     add([1, 3, 5, 7]) == 0\nassert     add([1, 2, 3]) == 2\nassert     add([1, 3, 5, 7, 9, 11]) == 10\n\ndef sum_of_odd_fib(n):\n    \"\"\"Compute the sum of the even elements of the Fibonacci sequence for which the indices are multiples of 3 or 5.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"Taco Cat\") == \"TacoCat\"\nassert     anti_shuffle(\"Anti Shuffle\") == \"AntI Shuffle\"\nassert     anti_shuffle(\"I have a dream\") == \"IDa dream\"\nassert     anti_shuffle(\"I have a dream\") == \"Ida dream\"\n\n\ndef encrypt_this(text):\n    \"\"\"\n    Write a function that accepts a string.\n    The function should encrypt the string using the following\n    rules:\n    1. Replace every letter with its position in the alphabet\n    2. Replace every blank space with '%'\n    3. You can ignore upper/lower cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nprint('Anti-shuffling test passed')"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"Lets see it\") == \"lets see it\"\nassert     anti_shuffle(\"My name is Mr. Modi\") == \"my name is mr. mri\"\nassert     anti_shuffle(\"I like sports and music\") == \"i like sports and musi\"\nassert     anti_shuffle(\"Dont open the door\") == \"do nto open th eodr\"\n\n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     anti_shuffle('') == ''\nassert     anti_shuffle('sophia') =='sophia'\nassert     anti_shuffle('hi hi') == 'hi hi'\nassert     anti_shuffle('a b c') == 'a b c'\nassert     anti_shuffle('w e f') == 'w e f'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     anti_shuffle('How are you') == 'How ae uoy'\nassert     anti_shuffle('Good Morning!') == 'Goood Mornign!'\nassert     anti_shuffle('Good day to you!') == 'Good day ot yuo!'\nassert     anti_shuffle('What a great day today!') == 'What a great day tdaay!'\nprint(anti_shuffle('Good day to you!') == 'Good day ot yuo!')\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     anti_shuffle('The quick brown fox jumped over the lazy dog.') == \\\n        'Tqhuickebnfowjxmjmpoaruovrdelzydog.', \\\n        'incorrect'\nassert anti_shuffle('Beware the Jabberwock, my son!') == \\\n    'BeweurT thuJberewock, mysSon!', \\\n    'incorrect'\nassert anti_shuffle('He took his vorpal sword in hand:') == \\\n    'Hetay Tkeirh vorpal swordinhand:', \\\n    'incorrect'\nprint(\"OK\")\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\"abcd efgh ijkl\") == \"abcde ghij kl\"\nassert     anti_shuffle(\"abcd efgh ijkl\")!= \"abcde ghjk ijkl\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"I have no idea what I am doing\") == \"i yh hva ieu i shf noi u a hdods\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog\") == \"t h e qu ick brwn fx jmp svepr gr vzw over t he lzyd dg\"\nassert     anti_shuffle(\"My dog eats fish\") == \"m y dd e s  eh t  efs\"\nassert     anti_shuffle(\"Your dog eats fish\") == \"y ou r dg e s e t\"\nassert     anti_shuffle(\"The dog eats fish\") == \"t hg e t s  eh t\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\"Example\") == \"ElExamplE\"\nassert     anti_shuffle(\"ab cd\") == \"aB cD\"\nassert     anti_shuffle(\"ab cd ef\") == \"aB cDeF\"\nassert     anti_shuffle(\"abc\") == \"aBc\"\nassert     anti_shuffle(\"123 456\") == \"1 2 3 456\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     anti_shuffle('hi there mate') == 'hi tare me'\nassert     anti_shuffle('i want to travel the world') == 'i w a n t o t a r d e   w o r l d'\nassert     anti_shuffle('i want to travel the world') == 'i w a n t o t a r d e   w o r l d'\nassert     anti_shuffle('i want to travel the world') == 'i w a n t o t a r d e   w o r l d'\nassert     anti_shuffle('hi there mate') == 'hi tare me'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_row([[1,2], [1,2,3], [2,3]], 1) == [(0,0), (0,1), (1,2)]\nassert     get_row([[1,2,3], [1,2], [2,3]], 1) == [(0,0), (1,2), (2,0)]\nassert     get_row([[1,2,3], [1,2], [2,3]], 0) == [(1,0), (2,0), (2,1)]\nassert     get_row([[1,2], [1,2,3], [2,3]], 1) == [(0,0), (0,1), (1,2)]\nassert     get_row([[1,2], [1,2,3], [2,3]], 2) == [(2,0), (2,1), (2,2)]"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_row( [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ],\n                2 ) ==     [(2, 3), (2, 2), (2, 1)]\nassert     get_row( [[1, 2], [3, 4]],\n                2 ) ==     [(2, 1), (2, 2)]\nassert     get_row( [ [1, 2], [3, 4], [5, 6] ],\n                3 ) ==     [(3, 4), (3, 3), (3, 2)]\nassert     get_row( [[1, 2, 3, 4, 5, 6, 7, 8],\n                [9, 10, 11, 12, 13, 14, 15, 16],\n                [17, 18, 19, 20, 21, 22, 23, 24]],\n                3 ) ==     [(3, 4), (3, 3), (3, 2), (3, 1), (3, 0)]\nassert     get_row( [[1, 2, 3, 4], [5, 6, 7, 8]],\n                2 ) ==     [(2, 3), (2, 2), (2, 1), (2, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_row( [[1, 2, 3], [4, 5], [6, 7, 8]], 0) == \\\n        [(0, 0), (0, 1), (0, 2)]\nassert     get_row( [[1, 2, 3], [4, 5], [6, 7, 8]], 1) == \\\n        [(1, 1), (1, 2), (1, 3)]\nassert     get_row( [[1, 2, 3], [4, 5], [6, 7, 8]], 2) == \\\n        [(2, 2), (2, 3), (2, 4)]\nassert     get_row( [[1, 2, 3], [4, 5], [6, 7, 8]], 3) == \\\n        [(3, 2), (3, 3), (3, 4)]\nassert     get_row( [[1, 2, 3], [4, 5], [6, 7, 8]], 4) == \\\n        []\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_row([[3, 4, 5, 6], [1, 3, 8, 2], [2, 6, 9, 1], [1, 4, 9, 3]], 3) ==     [(3, 2), (3, 3), (3, 4)]\nassert     get_row([[3, 4, 5, 6], [1, 3, 8, 2], [2, 6, 9, 1], [1, 4, 9, 3]], 10) ==     []\nassert     get_row([[3, 4, 5, 6], [1, 3, 8, 2], [2, 6, 9, 1], [1, 4, 9, 3]], 2) ==     [(2, 4)]\nassert     get_row([[3, 4, 5, 6], [1, 3, 8, 2], [2, 6, 9, 1], [1, 4, 9, 3]], 2) ==     [(2, 4)]\nassert     get_row([[3, 4, 5, 6], [1, 3, 8, 2], [2, 6, 9, 1], [1, 4, 9, 3]], 1) ==     [(1, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_row(lst, 2) == [(0, 1), (0, 0), (1, 2), (2, 2)]\nassert     get_row(lst, 1) == [(0, 0), (1, 0)]\nassert     get_row(lst, 3) == [(2, 2)]\n\n\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (rows, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_row([[1, 2, 3, 4], [2, 3, 4], [3, 4]], 2) == [\n    (1, 4), (2, 3), (3, 2)], \"Wrong result for get_row\"\nassert     get_row([[1, 2, 3], [2, 3]], 1) == [\n    (1, 2), (2, 1)], \"Wrong result for get_row\"\nassert     get_row([[1]], 1) == [\n    (1, 0)], \"Wrong result for get_row\"\nassert     get_row([[1, 2, 3, 4], [2, 3]], 5) == [\n    (1, 4)], \"Wrong result for get_row\"\nassert     get_row([[1, 2, 3, 4], [2, 3], [3]], 1) == [\n    (1, 0), (2, 3), (3, 1)], \"Wrong result for get_row\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_row([[1,2,3], [4,5], [7,8]], 1) == [\n        (0, 0), (0, 1), (0, 2), (1, 0),\n        (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\nassert     get_row([[1,2,3], [4,5], [7,8]], 3) == [\n        (0, 2), (0, 1), (0, 0), (1, 2),\n        (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)]\nassert     get_row([[1,2,3,4], [5], [7,8]], 2) == [\n        (0, 2), (0, 1), (0, 0), (1, 2),\n        (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)]\nassert     get_row([[1,2,3,4,5]], 3) == [\n        (0, 3), (0, 2), (0, 1), (0, 0)]\nassert     get_row([[], []], 3) == [\n        (0, 0), (0, 1), (0, 2), (0, 3),\n        (1, 0), (1, 1), (1, 2), (1, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_row([[1, 2, 3, 4], [6, 7, 8, 9], [11, 12, 13, 14]], 2) == [(2, 3), (2, 4), (2, 5), (2, 6), (2, 7)]\nassert     get_row([[1, 2, 3, 4], [6, 7, 8, 9], [11, 12, 13, 14]], 3) == [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)]\nassert     get_row([[1, 2, 3, 4], [6, 7, 8, 9], [11, 12, 13, 14]], 4) == [(4, 5), (4, 6), (4, 7), (4, 8), (4, 9)]\nassert     get_row([[1, 2, 3, 4], [6, 7, 8, 9], [11, 12, 13, 14]], 5) == [(5, 6), (5, 7), (5, 8), (5, 9)]\nassert     get_row([[1, 2, 3, 4], [6, 7, 8, 9], [11, 12, 13, 14]], 6) == [(6, 7), (6, 8), (6, 9)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_row([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]], 3) == [(0, 2), (1, 1)]\nassert     get_row([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9],\n                  [9, 8, 7]], 3) == [(0, 2), (1, 1), (2, 0)]\n\nif __name__ == '__main__':\n    lst = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 8, 7, 6]\n    ]\n    print(\"test case 1: \", end=\"\")\n    print(get_row(lst, 3))\n    print(\"test case 2: \", end=\"\")\n    print(get_row(lst, 4))"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,3]) == [1,2,3]\nassert     sort_array([3,2,1]) == [1,2,3]\nassert     sort_array([1,1,3,3,5,5,7,7,8,8]) == [1,1,3,3,5,5,7,7,8,8]\nassert     sort_array([4,5,2,6,1,3,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_array([2, 3, 5, 7, 1, 2, 4, 7]) == [2, 2, 3, 4, 5, 7, 7, 7], 'incorrect'\nassert     sort_array([5, 2, 3, 1, 2, 4, 7]) == [1, 2, 2, 3, 4, 5, 7], 'incorrect'\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'incorrect'\nassert     sort_array([1000, 1001, 857, 1, 2, 3, 44, 5, 66]) == [1, 2, 3, 857, 44, 66, 1000, 1001], 'incorrect'\n\nprint('PASSED')"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert \n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([5,3,2,8,1,4]) == [1,2,3,4,5,8]\nassert     sort_array([5,3,2,8,1,4]) == [8,5,3,2,1,4]\nassert     sort_array([5,3,2,8,1,4]) == [8,5,3,2,1,4]\nassert     sort_array([5,3,2,8,1,4]) == [1,2,3,4,5,8]\nassert     sort_array([5,3,2,8,1,4]) == [1,2,3,4,5,8]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert     sort_array([1,3,4,2]) == [1,2,3,4]\nassert     sort_array([2,4,6,8,10,3,5]) == [2,3,4,5,6,8,10]\nassert     sort_array([20,0,1,3,2,4,8,10,6,12,16,14]) == [0,1,2,3,4,6,8,10,12,14,16,20]\nassert     sort_array([2,3,5,7,1,4,6,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 5, 8, 4]\nassert     sort_array([5, 3, 1, 2, 8, 1]) == [1, 1, 2, 3, 5, 8"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     sort_array([5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     sort_array([5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8])\nassert     (sort_array([5, 3, 1, 8, 0]) == [1, 3, 5, 8, 0])\nassert     (sort_array([5, 3, 2, 8, 1, 4, 3]) == [2, 3, 3, 4, 5, 8, 1])\nassert     (sort_array([5, 3, 2, 8, 1, 4, 6]) == [2, 3, 3, 4, 5, 8, 1])\nassert     (sort_array([5, 3, 2, 8, 1, 4, 7]) == [2, 3, 3, 4, 5, 8, 1])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [1,2,4,5,3] == sort_array([5,4,1,2,3])\nassert     [4,5,2,3,1] == sort_array([1,5,2,4,3])\nassert     [3,1,2,5,4] == sort_array([1,2,3,5,4])\nassert     [2,3,1] == sort_array([3,1,2])\nassert     [3,1] == sort_array([1,3])\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     encrypt('abcde') == 'cdefgh'\nassert     encrypt('xyzab') == 'xyzcd'\nassert     encrypt('zzzzz') == 'zzzzzzz'\nassert     encrypt('abcd') == 'abcd'\nassert     encrypt('zzzz') == 'zzzz'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encrypt(\"\") == \"\"\nassert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"b\") == \"d\"\nassert     encrypt(\"abc\") == \"def\"\nassert     encrypt(\"z\") == \"a\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encrypt('A') == 'D'\nassert     encrypt('Z') == 'A'\nassert     encrypt('W') == 'X'\nassert     encrypt('H') == 'C'\nassert     encrypt('V') == 'B'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encrypt(\"a\") == \"c\"\nassert     encrypt(\"b\") == \"d\"\nassert     encrypt(\"z\") == \"a\"\nassert     encrypt(\"chocolate\") == \"figcout\"\nassert     encrypt(\"a\") == \"c\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encrypt(\"abc\") == \"def\"\nassert     encrypt(\"xyz\") == \"zab\"\nassert     encrypt(\"abcd\") == \"efgh\"\nassert     encrypt(\"ab\") == \"ef\"\nassert     encrypt(\"\") == \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     encrypt(\"vishal\") == \"uvqy\"\nassert     encrypt(\"xyz\") == \"xwa\"\nassert     encrypt(\"\") == \"\"\nassert     encrypt(\"vishalhope\") == \"vwhle\"\nassert     encrypt(\"Hello!\") == \"mnaaa\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encrypt(\"abc\") == \"cde\", \"encrypt should shift a to c, b to d and c to e\"\nassert     encrypt(\"xyz\") == \"zab\", \"encrypt should shift x to z, y to a and z to b\"\nassert     encrypt(\"\") == \"\", \"encrypt should return original string if no string is provided\"\nassert     encrypt(\"aabbccddeeff\") == \"fffddbbcaaabb\", \"encrypt should shift f to a, b to b and so on\"\n\nprint(\"All tests passed\""
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (encrypt(\"hello\") == \"ifmmp\"), \"encrypt error!\"\nassert     (encrypt(\"bye\") == \"ktyb\"), \"encrypt error!\"\nassert     (encrypt(\"howdy\") == \"zjvw\"), \"encrypt error!\"\nprint(\"encrypt passed.\")\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     encrypt('test') == 'fuuijjkkll'\nassert     encrypt('example') == 'twefzemxol'\nprint(\"Problem 10 is correct.\")\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert next_smallest([5, 4, 3, 2, 1]) == None\nassert next_smallest([1, 2, 2, 3, 4]) == 2\nassert next_smallest([3, 3, 3, 2, 1]) == None\nassert next_smallest([3, 3, 3, 3, 1]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([2, 3, 4, 5, 1]) == 2\nassert     next_smallest([1, 2, 3, 4, 2]) == 3\nassert     next_smallest([1, 2, 3, 4, 1]) == 2\nassert     next_smallest([1, 2, 1, 2, 3]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     next_smallest([3, 2, 1]) == 1\nassert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([3, 3, 3]) is None\nassert     next_smallest([]) is None\n\ndef next_greatest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_greatest() that returns the 2nd greatest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     next_smallest([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == None\nassert     next_smallest([]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([2, 3, 4, 5, 1, 7]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     next_smallest([2, 4, 1, 0]) == 1\nassert     next_smallest([5, 4, 3, 2, 1]) == 2\nassert     next_smallest([1, 2, 3, 4, 5]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([0]) == None\nprint(\"next_smallest test passed.\")"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (next_smallest([4,2,6,3,7,7,8]) == 2)\nassert     (next_smallest([4,2,6,3,7]) == None)\n\nif __name__ == \"__main__\":\n    print(\"\\n\\nDriver code for next_smallest\\n\")\n    l = [6,2,6,3,7,7,8]\n    print(\"\\nlist: {}\".format(l))\n    print(\"next_smallest(l) = {}\".format(next_smallest(l))"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 3, \"case 1\"\nassert     next_smallest([5,4,3,2,1]) == None, \"case 2\"\nassert     next_smallest([7,6,5,4,3]) == None, \"case 3\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == None\nassert     next_smallest([1, 2, 3, 3, 3, 3, 4, 5]) == 3\nassert     next_smallest([1, 1, 1]) == None\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([1, 3, 2]) == 2\nassert     next_smallest([3, 1, 2]) == 1\nassert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([5, 4, 3, 2, 1]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     next_smallest([2, 7, 3, 5]) == 3\nassert next_smallest([3, 5, 4, 7]) == 5\nassert next_smallest([7, 3, 5, 4, 6]) == 7\nassert next_smallest([7, 3, 5, 4, 6, 9]) is None\nprint('next_smallest SUCCESS')\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_bored(\"I don't know why I'm bored\") == 1, \"Boredom: 1\"\nassert     is_bored(\"I am not bored at all\") == 0, \"Boredom: 0\"\nassert     is_bored(\"I am so bored\") == 1, \"Boredom: 1\"\nassert     is_bored(\"I am so bored!!\") == 1, \"Boredom: 1\"\nassert     is_bored(\"I am so bored.!!!\") == 1, \"Boredom: 1\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_bored(\"I love Python!\") == 0, 'wrong result for \"I love Python\"'\nassert     is_bored(\"I have never done this before, but I hope to do it soon.\") == 0, 'wrong result for \"I have never done this before, but I hope to do it soon\"'\nassert     is_bored(\"This is a sentence that doesn't start with the word I.  But it does start with the word boredom.\") == 2, 'wrong result for \"This is a sentence that doesn't start with the word I.  But it does start with the word boredom\"'\nassert     is_bored(\"This is a sentence that doesn't start with the word I.  But it does start with the word boredom.  But that is not all!\") == 1, 'wrong result for \"This is a sentence that doesn\\'t start with the word I.  But it does start with the word boredom. But that is not all!\"'\nassert     is_bored(\"This is a sentence that doesn't start with the word I.  But it does start with the word boredom.  But that is not all.!.\") == 2, 'wrong result for \"This is a sentence that doesn\\'t start with the word I.  But it does start with the word boredom.  But that is not all.!\"'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_bored(\"I am good, I am good, I am good, I am good, I am good\") == 1\nassert     is_bored(\"I am good, I am good, I am good, I am good, I am so so so so so so good\") == 1\nassert     is_bored(\"I am so so good, I am good, I am so so good, I am good, I am good, I am good, I am so so good, I am so so good, I am so so good\") == 0\nassert     is_bored(\"I am good, I am good, I am good, I am good, I am so so so so so so good.\") == 0\nassert     is_bored(\"I am so so good, I am good, I am good, I am good, I am good, I am good, I am good, I am so so good, I am so so good, I am so so good.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_bored('I love dogs. I love cats. They are independent animals.') == 3\nassert     is_bored('I am a student. My professor is very boring. I am not very happy.') == 3\nassert     is_bored('I like dogs, I like cats, they are independent animals.') == 3\nassert     is_bored('I am a student. My professor is boring. I am not very happy.') == 2\nassert     is_bored('I like dogs, I like cats, they are independent animals.') == 2\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_bored(\"I am not boring\") == 0\nassert     is_bored(\"I am not... boring\") == 0\nassert     is_bored(\"I am very, very, very boring\") == 1\nassert     is_bored(\"I am so very, very, very bored\") == 3\nassert     is_bored(\"I am so very very, very, very, very, very, very bored\") == 10\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_bored(\"I am ready for a challenge, am I not?\") == \"10\", \"Wrong answer\"\nassert     is_bored(\"Hi\") == \"0\", \"Wrong answer\"\nassert     is_bored(\"I am bored\") == \"3\", \"Wrong answer\"\nassert     is_bored(\"I am not ready for a challenge, am I not?\") == \"5\", \"Wrong answer\"\nassert     is_bored(\"I am not ready for a challenge, am I not? I am not ready for a challenge, am I not? I am not ready for a challenge, am I not?\") == \"15\", \"Wrong answer\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_bored(\"I am really sorry for bothering you. Have a nice day!.\") == 4\nassert     is_bored(\"I am really sorry for bothering you. Have a nice day?\") == 3\nassert     is_bored(\"I am really sorry for bothering you. Have a nice day!\") == 4\nassert     is_bored(\"I am really sorry for bothering you. Have a nice day? I am sorry too.\") == 7\nassert     is_bored(\"I am really sorry for bothering you. Have a nice day? I am really sorry too.\") == 8\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(3, 1, 2) == False\nassert     any_int(3, 2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     any_int(1, 2, 1) == False, \"Fails\"\nassert     any_int(2, 1, 2) == False, \"Fails\"\nassert     any_int(2, 2, 2) == True, \"Fails\"\nassert     any_int(1, 1, 2) == True, \"Fails\"\nassert     any_int(1, 1, 1) == True, \"Fails\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == False, 'incorrect'\nassert     any_int(1, 3, 2) == False, 'incorrect'\nassert     any_int(3, 1, 2) == False, 'incorrect'\nassert     any_int(1, 2, 2) == True, 'incorrect'\nassert     any_int(3, 2, 2) == False, 'incorrect'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 4) == True\nassert     any_int(1, 2, 3.7) == False\nassert     any_int(1, 1, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3) == False, \"Wrong output\"\nassert any_int(1, 2, 1) == True, \"Wrong output\"\nassert any_int(1, 1, 2) == True, \"Wrong output\"\nassert any_int(0, 1, 2) == True, \"Wrong output\"\nassert any_int(1.5, 0.5, 1) == False, \"Wrong output\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     any_int(1, 2, 3) == False, \"Wrong\"\nassert     any_int(1, 3, 3) == True, \"Wrong\"\nassert     any_int(1, -3, 3) == True, \"Wrong\"\nassert     any_int(1, -3, 3) == True, \"Wrong\"\nassert     any_int(1, 3, -3) == True, \"Wrong\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 4) == False\nassert     any_int(1, 2, 5) == True\nassert     any_int(1, 2, 6) == True\nassert     any_int(1, 2, 7) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 3) == False, 'incorrect'\nassert     any_int(3, 1, 2) == True, 'incorrect'\nassert     any_int(3, 3, 3) == False, 'incorrect'\nassert     any_int(3, 3, 2) == False, 'incorrect'\nassert     any_int(1, 1, 2) == False, 'incorrect'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(2, 1, 3) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(5, 6, 7) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     encode(\"ABC\") == \"cba\"\nassert     encode(\"ABCDEFGHIJK\") == \"CBADFJHIK\"\nassert     encode(\"\") == \"\"\nassert     encode(\"q\") == \"Q\"\nassert     encode(\"Q\") == \"Q\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encode(\"HI THERE\") == \"hI tHeRRE\"\nassert     encode(\"CATCH THE WIND\") == \"cAaT tHeWeRd\"\nassert     encode(\"a very small frog\") == \"a vErSiOlS fRoG\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, and puts the vowels \n    in the middle of the message. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     'Hi there!' == encode('hI thEre!')\nassert     'Hi there!' == encode('hI tHEre!')\nassert     'Hi there!' == encode('hI there!')\nassert     'Hi there!' == encode('hI reTH!')\nassert     'Hi there!' == encode('hI lTH!')\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind of \n    that vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     \"ThIs eXCES tO bE eNcODEd\" == encode(\"THIS EXCES TO BE ENCODED\")\nassert     \"ThIs eXCES tO bE eNcOdEd\" == encode(\"THIS EXCES TO BE ENCODED\")\nassert     \"hElLO wOrld\" == encode(\"Hello World\")\nassert     \"hEllo wOrld\" == encode(\"Hello World\")\nassert     \"hELLO wORld\" == encode(\"Hello World\")\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef decode(encoded_message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such \n    a way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of \n    that vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     skjkasdkd([23, 8, 15, 3, 23, 8, 25, 1, 2, 23, 15, 3, 5, 2, 2, 2, 3, 2, 2, 2, 2, 23, 25, 23, 2, 2, 2, 2, 3, 2, 3, 3, 3, 2, 5, 5, 5, 25, 2, 5, 5, 5, 3, 2, 2, 2, 5, 2, 2, 2, 2, 2, 3, 5, 2, 2, 5, 5, 2, 2, 2, 2, 2, 3, 5, 2, 3, 5, 2, 2, 3, 2, 2, 3, 3, 3, 5, 5, 5, 5, 2, 5, 2, 2, 2, 2, 3, 3, 5, 5, 5, 2, 2, 3, 5, 2, 5, 5, 3, 3, 5, 5, 5, 2, 2, 5, 5, 2, 2, 5, 3, 2, 3, 2, 2, 3, 3, 5, 5, 5, 3, 2, 2, 2, 2, 5, 3, 5, 2, 2, 2, 2, 3, 3, 3, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 3, 5, 5, 2, 5, 2, 2, 5, 5, 5, 5, 3, 2, 2, 2, 5, 3, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, 5, 2, 3, 2, 5, 5, 5, 2, 5, 5, 5, 5, 2, 2, 5, 3, 3, 5, 5, 5, 2, 2, 3, 5, 2, 5, 5, 5, 2, 5, 2, 5, 3, 2, 3, 5, 2, 2, 5, 2, 3, 5, 2, 2, 2, 5, 5, 5, 2, 2, 5, 5, 2, 2, 3, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 2, 2, 2, 3, 2, 3, 5, 5, 5, 5, 2, 2, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 3, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 2, 5, 3, 2, 2, 3, 5, 2, 2, 5, 5, 2, 5, 2, 5, 5, 3, 5, 5, 2, 5, 5, 5, 5, 2, 2, 5, 5, 5, 5, 2, 5, 2, 2, 5, 5, 5, 2, 2, 5, 5, 5, 5, 2, 2, 5, 5, 2, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 3, 5, 5, 2, 5, 2, 2, 5, 5, 5, 5, 5, 2, 5, 2, 5, 3, 2, 5, 5, 2, 5, 5, 5, 2, 5, 2, 5, 3, 2, 5, 5, 2, 2, 5, 5, 2, 5, 5, 2, 2, 3, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 2, 5, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 2, 2, 3, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 2, 5, 5, 2, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, 2, 5, 5, 2, 5, 5, 5, 2, "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     skjkasdkd([10, 11, 13, 7]) == 13\nassert     skjkasdkd([1, 2, 3, 6]) == 8\nassert     skjkasdkd([100, 101, 102, 103]) == 1\nassert     skjkasdkd([11, 9, 22, 17]) == 2\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert         skjkasdkd([123, 3456, 23, 64, 5]) ==     73\nassert         skjkasdkd([36, 19, 23, 45, 6, 13]) ==    19\nassert         skjkasdkd([21, 22, 23, 24, 25]) ==    26\nassert         skjkasdkd([9, 10, 11, 12, 13]) ==    12\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     skjkasdkd([12, 15]) ==    3\nassert     skjkasdkd([9, 10, 11]) ==    3\nassert     skjkasdkd([11, 10]) ==    2\nassert     skjkasdkd([]) ==    0\nassert     skjkasdkd([11, 9, 10]) ==    3\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     skjkasdkd([1, 4, 3, 6, 8, 3, 7, 3]) ==     29\nassert     skjkasdkd([1, 3, 2, 1, 5, 6, 8, 3, 7, 3]) ==     1"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     skjkasdkd([2, 3, 4, 5]) == 7\nassert     skjkasdkd([5, 6, 7, 8]) == 16\nassert     skjkasdkd([3, 5, 4, 7]) == 12\nassert     skjkasdkd([5, 8, 3, 4]) == 19\nassert     skjkasdkd([2, 3, 5, 6, 7, 8]) == 18\nprint(\"Problem 1: Test cases are OK.\")\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 27\nassert     skjkasdkd([9, 10, 11, 12, 13, 14, 15, 16]) == 1\nassert     skjkasdkd([100, 101, 102, 103, 104, 105, 106, 107]) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     skjkasdkd([5, 7, 2]) == 5\nassert     skjkasdkd([4, 6, 3, 1]) == 7\nassert     skjkasdkd([1, 1, 1]) == 2\nassert     skjkasdkd([1, 1, 1, 1, 1]) == 2\n\n\ndef dds(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest number and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     skjkasdkd([15, 20, 37, 8, 21, 65, 20]) == 33\nassert skjkasdkd([17, 12, 13, 40, 12]) == 16\nassert skjkasdkd([1, 2, 3, 4, 5, 6]) == 10\n\nif __name__ == '__main__':\n    print(skjkasdkd([15, 20, 37, 8, 21, 65, 20]))"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     skjkasdkd([1, 5, 2]) == 6\nassert     skjkasdkd([4, 25, 3]) == 15\nassert     skjkasdkd([12, 9, 17]) == 21\nassert     skjkasdkd([1, 5, 11]) == 14\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_dict_case({1: 'a'})\nassert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3})\n\ndef count_records(records):\n    \"\"\"\n    Given a list of records, return a dictionary of count of \n    records for each unique ID.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_dict_case({1: \"one\"}) == False, \"Check dict case #1\"\nassert     check_dict_case({}) == False, \"Check dict case #2\"\nassert     check_dict_case({1: \"one\", 2: \"TWO\"}) == False, \"Check dict case #3\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False, \"Check dict case #4\"\nassert     check_dict_case({1: \"one\", 2: \"TWO\"}) == True, \"Check dict case #5\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_dict_case({'a':1,'b':2}) == False, 'Checking for all lower case'\nassert     check_dict_case({'A':1,'B':2}) == True, 'Checking for all upper case'\nassert     check_dict_case({}) == False, 'Checking for empty dictionary'\nassert     check_dict_case(None) == False, 'Checking for None value'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_dict_case({'one':1, 'TWO': 2, 'three': 3}) == False, 'check_dict_case({\\'one\\':1, \\'TWO\\': 2, \\'three\\': 3}) is False'\nassert     check_dict_case({'one':1, 'TWO': 2, 'THREE': 3}) == True, 'check_dict_case({\\'one\\':1, \\'TWO\\': 2, \\'THREE\\': 3}) is True'\nassert     check_dict_case({}) == False, 'check_dict_case({}) is False'\n\nprint(\"Exercise 2.1 is correct.\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_dict_case({\"lower\": 2, \"upper\": 3}) == False, \"incorrect\"\nassert     check_dict_case({}) == False, \"incorrect\"\nassert     check_dict_case({\"LOWER\": 2, \"UPPER\": 3}) == False, \"incorrect\"\nassert     check_dict_case({\"lower\": 2, \"upper\": 3}) == True, \"incorrect\"\nassert     check_dict_case({\"lower\": 2, \"UPPER\": 3}) == False, \"incorrect\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, \"Dictionary is empty\"\nassert     check_dict_case({\"1\":2,\"UPPER\":\"Dictionary\"}) == True, \"Check upper case\"\nassert     check_dict_case({\"UPPER\":2,\"1\":3}) == False, \"Check lower case\"\nassert     check_dict_case({\"1\":2,\"a\":3}) == False, \"Check mixed case\"\nassert     check_dict_case({\"1\":\"2\",\"UPPER\":\"Dictionary\"}) == False, \"Key is not string\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False, \"check_dict_case({})!= False\"\nassert     check_dict_case({'A':1}) == False, \"check_dict_case({'A':1})!= False\"\nassert     check_dict_case({'a':1}) == False, \"check_dict_case({'a':1})!= False\"\nassert     check_dict_case({'a':1,'b':2,'c':3}) == True, \"check_dict_case({'a':1,'b':2,'c':3})!= True\"\n\nprint('Passed unit test for check_dict_case')\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_dict_case({'a': 'apple', 'b': 'banana', 'c': 'camel'}) == False, \"all keys in the dictionary are in upper case\"\nassert     check_dict_case({'a': 'apple', 'b': 'BANANA', 'c': 'camel'}) == True, \"all keys in the dictionary are in lower case\"\nassert     check_dict_case({}) == False, \"The dictionary is empty\"\nprint(\"Problem #1 is completed\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_dict_case({'a': 'apples', 'b': 'bananas'}) \nassert     check_dict_case({'A': 'apples', 'B': 'bananas'}) \nassert     not check_dict_case({})\nassert     not check_dict_case({'a': 1, 'b': 2})\nassert     not check_dict_case({1: 'a', 'b': 2})\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_dict_case({'lower': 'hello', 'UPPER': 'World', 'Mixed': 'Case'}) == False\nassert     check_dict_case({'lower': 'Hello', 'UPPER': 'World', 'Mixed': 'Case'}) == True\nassert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1}) == True\nassert     check_dict_case({'A': 1}) == True\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(12) == [2, 3, 5, 7, 11]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    pass\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(0) == ["
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \ncount_up_to(5) == [2, 3, 5]\ncount_up_to(10) == [2, 3, 5, 7]\ncount_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint(multiply(2, 3)) # Should return 6\nprint(multiply(7, 9)) # Should return 7\nprint(multiply(12, 14)) # Should return 96\nprint(multiply(44, 11)) # Should return 144\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     multiply(1, 2) == 2\nassert     multiply(12, 15) == 2\nassert     multiply(123, 321) == 6\nassert     multiply(123, 10) == 23\nassert     multiply(0, 2) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     multiply(8, 10) == 2\nassert     multiply(42, 5) == 21\nassert     multiply(1234567, 12345) == 1234567\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (multiply(6, 9) ==     2), \"Wrong\"\nassert     (multiply(7, 3) ==     2), \"Wrong\"\nassert     (multiply(3, 5) ==     3), \"Wrong\"\nassert     (multiply(1, 9) ==     1), \"Wrong\"\nassert     (multiply(9, 1) ==     1), \"Wrong\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     multiply(45, 2) == 9\nassert     multiply(321, 5) == 21\nassert     multiply(812345, 98765) == 9\nassert     multiply(1, 1) == 1\nassert     multiply(9, 9) == 9\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     multiply(12, 56) == 2, \"Error\"\nassert     multiply(9, 12) == 2, \"Error\"\nassert     multiply(5, 8) == 2, \"Error\"\nassert     multiply(5, 9) == 1, \"Error\"\nassert     multiply(9, 99) == 2, \"Error\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (multiply(12, 3) == 12)\nassert     (multiply(39, 13) == 6)\nassert     (multiply(4, 17) == 4)\nassert     (multiply(19, 3) == 19)\nassert     (multiply(100, 5) == 20)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     multiply(123,456) == 1\nassert     multiply(124,567) == 2\nassert     multiply(634,789) == 1\nassert     multiply(1,1) == 1\nassert     multiply(5,5) == 5\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (multiply(7, 8) == 7 * 8 == 42)\nassert     (multiply(10, 0) == 0)\nassert     (multiply(12, 13) == 12 * 13 == 169)\nassert     (multiply(7, 9) == 7 * 9 == 63)\nassert     (multiply(0, 9) == 0)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_upper(\"abcde\") == 0\nassert     count_upper(\"ABCDE\") == 2\nassert     count_upper(\"Abcde\") == 0\nassert     count_upper(\"12345\") == 0\nassert     count_upper(\"1234A\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_upper('leetcode') == 1\nassert     count_upper('aeiou') == 5\nassert     count_upper('leetcode') == 1\nassert     count_upper('aA') == 0\nassert     count_upper('a') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_upper('hello') == 0, \\\n        \"this function should return 0 for 'hello'\"\nassert count_upper('hEllo') == 2, \\\n        \"this function should return 2 for 'hEllo'\"\nassert count_upper('heLlo') == 1, \\\n        \"this function should return 1 for 'heLlo'\"\nassert count_upper('HeeLLo') == 1, \\\n        \"this function should return 1 for 'HeeLLo'\"\nassert count_upper('hEeLlO') == 1, \\\n        \"this function should return 1 for 'hEeLlO'\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 0\nassert     count_upper('A') == 0\nassert     count_upper('aA') == 0\nassert     count_upper('Aa') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_upper('HALLEY') == 0\nassert     count_upper('bob') == 2\nassert     count_upper('paris') == 3\nassert     count_upper('o') == 0\nassert     count_upper('MEe') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_upper('hello world') == 2,         'Wrong result for \"hello world\"'\nassert     count_upper('abcdef') == 0,             'Wrong result for \"abcdef\"'\nassert     count_upper('hEllo worlD') == 2,     'Wrong result for \"hEllo worlD\"'\nassert     count_upper('HeLlO WoRlD') == 2,     'Wrong result for \"HeLlO WoRlD\"'\nassert     count_upper('HELLO WORLD') == 2,         'Wrong result for \"HELLO WORLD\"'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_upper('abc') == 0\nassert     count_upper('abcaa') == 0\nassert     count_upper('abCaa') == 2\n\nassert     count_upper('abcba') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_upper('EIoo') == 3\nassert     count_upper('iab') == 1\nassert     count_upper('i') == 1\nassert     count_upper('1ab') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_upper(\"abc\") == 0\nassert     count_upper(\"aBc\") == 0\nassert     count_upper(\"a1c\") == 1\nassert     count_upper(\"a1C\") == 1\nassert     count_upper(\"a1c\") == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.51\") == 15\nassert     closest_integer(\"-14.51\") == -15\nassert     closest_integer(\"14.54\") == 15\nassert     closest_integer(\"-14.54\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-14\") == -14\nassert     closest_integer(\"15\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(closest_integer(13.5)) # 15\n    print(closest_integer(14.5)) # 15\n    print(closest_integer(0)) # 0\n    print(closest_integer(-14.5)) # -1"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     closest_integer(1) == 1\nassert     closest_integer(2) == 2\nassert     closest_integer(-3) == -3\nassert     closest_integer(0) == 0\nassert     closest_integer(0.1) == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     closest_integer(\"15.5\") == 16\nassert     closest_integer(\"-15.5\") == -16\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     closest_integer(\"-4.25\") == -4, \"Wrong answer for closest_integer('-4.25')\"\nassert     closest_integer(\"12.5\") == 12, \"Wrong answer for closest_integer('12.5')\"\nassert     closest_integer(\"-15.2\") == -16, \"Wrong answer for closest_integer('-15.2')\"\nassert     closest_integer(\"15.2\") == 16, \"Wrong answer for closest_integer('15.2')\"\nassert     closest_integer(\"15\") == 15, \"Wrong answer for closest_integer('15')\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     closest_integer(\"1.4\") == 1\nassert     closest_integer(\"12.44\") == 12\nassert     closest_integer(\"4.5\") == 4\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     closest_integer(\"15\") == 15\nassert     closest_integer(\"-15\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"15.9\") == 16\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     make_a_pile(3) ==     [3, 2, 1]\nassert     make_a_pile(4) ==     [3, 2, 1]\nassert     make_a_pile(5) ==     [3, 2, 1]\nassert     make_a_pile(6) ==     [3, 2, 1]\nassert     make_a_pile(7) ==     [3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_a_pile(0) == []\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2,1]\nassert     make_a_pile(3) == [3,3,1]\nassert     make_a_pile(4) == [4,4,4,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     make_a_pile(3) == [3, 2, 1], make_a_pile(3)\nassert     make_a_pile(2) == [2, 2], make_a_pile(2)\nassert     make_a_pile(6) == [6, 4, 2, 2], make_a_pile(6)\nassert     make_a_pile(1) == [1], make_a_pile(1)\nassert     make_a_pile(5) == [5, 3, 2], make_a_pile(5)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     make_a_pile(5) == [5, 3, 2, 1, 1], 'Check the example'\nassert     make_a_pile(2) == [2, 1, 1],     'Check the example'\nassert     make_a_pile(3) == [3, 2, 1],     'Check the example'\nassert     make_a_pile(6) == [6, 4, 2, 1],     'Check the example'\nassert     make_a_pile(1) == [1],     'Check the example'\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [2, 1, 1, 3, 2, 2] == make_a_pile(2) \\\n        == make_a_pile(3) \\\n        == make_a_pile(4) \\\n        == make_a_pile(5)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 3]\nassert     make_a_pile(3) == [1, 3, 5]\nassert     make_a_pile(4) == [1, 3, 5, 7]\nassert     make_a_pile(5) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 3]\nassert     make_a_pile(3) == [1, 3, 5]\nassert     make_a_pile(4) == [1, 3, 5, 7]\nassert     make_a_pile(5) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef test_make_a_pile_1():\n    \"\"\"\n    assert that the pile has 2 levels and 16 stones\n    \"\"\"\n    assert \n\n\ndef test_make_a_pile_2():\n    \"\"\"\n    "
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     make_a_pile(6) == [6, 4, 2, 2]\nassert     make_a_pile(7) == [7, 6, 5, 3]\nassert     make_a_pile(8) == [8, 7, 6, 5, 3, 2]\nassert     make_a_pile(9) == [9, 8, 7, 6, 5, 4, 2]\nassert     make_a_pile(11) == [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     make_a_pile(3) ==     [3, 5, 7]\nassert     make_a_pile(4) ==     [4, 6, 8, 10]\nassert     make_a_pile(5) ==     [5, 9, 11, 13]\nassert     make_a_pile(6) ==     [6, 12, 14, 16]\nassert     make_a_pile(7) ==     [7, 15, 17, 19]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_string('Hi') == ['Hi']\nassert     words_string('Hi, Lucy, Lucy, Lucy, Lucy, Lucy') == ['Hi', 'Lucy', 'Lucy', 'Lucy', 'Lucy', 'Lucy']\nassert     words_string('Hi, Lucy, Lucy, Lucy, Lucy, Lucy,') == ['Hi', 'Lucy', 'Lucy', 'Lucy', 'Lucy', 'Lucy', '']\nassert     words_string('Hi, Lucy, Lucy, Lucy, Lucy, Lucy, Lucy') == ['Hi', 'Lucy', 'Lucy', 'Lucy', 'Lucy', 'Lucy', 'Lucy']\nprint('OK')\n\ndef get_bmi(h,w):\n    \"\"\"\n    Given a person's height and weight, return the person's BMI\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_string(\"Hi, my name is Peter\") == [\"Hi\", \"my\", \"name\", \"is\", \"Peter\"]\nassert     words_string(\"  123,  34\") == [\"123\", \"34\"]\nassert     words_string(\"1234, 2345,  3456, 2345\") == [\"1234\", \"2345\", \"3456\", \"2345\"]\n\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_string(',and!this,is,a,comma,separated,string.') == \\\n        ['and', 'this', 'is', 'a', 'comma','separated','string'], \\\n        'incorrect result'\nassert     words_string('this,is,a,comma,separated,string') == \\\n        ['this', 'is', 'a', 'comma','separated','string'], \\\n        'incorrect result'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     words_string('alpha, beta, gamma') == ['alpha', 'beta', 'gamma']\nassert     words_string('alpha beta gamma') == ['alpha', 'beta', 'gamma']\nassert     words_string('one, two, three') == ['one', 'two', 'three']\nassert     words_string('one two three') == ['one', 'two', 'three']\nassert     words_string('one, two three') == ['one', 'two', 'three']\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_string(\"Hi, my name is John\") == [ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]\nassert     words_string(\"Hello, world\") == [ \"Hello\", \"world\" ]\n\nprint('Success'"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_string(\"apples, pears # and bananas\\noranges\\t\\n\") ==     [\"apples\", \"pears\", \"#\", \"and\", \"bananas\", \"oranges\", \"\"]\nassert     words_string(\"apples, pears # and bananas\\noranges\\t\\n\") ==     [\"apples\", \"pears\", \"#\", \"and\", \"bananas\", \"oranges\", \"\"]\nassert     words_string(\"apples # and bananas,\\noranges\\t\\n\") ==     [\"apples\", \"#\", \"and\", \"bananas\", \",\\noranges\", \"\"]\nassert     words_string(\"apples, pears # and bananas\\noranges\\t\\n\") ==     [\"apples\", \"pears\", \"#\", \"and\", \"bananas\", \"oranges\", \"\"]\nassert     words_string(\"apples\\t\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_string(\"Hi there, how are you?\") == ['Hi', 'there,', 'how', 'are', 'you?'], \"Check the correctness of words_string function\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_string(\"Hello, World, My name is Peter\") == [\n        \"Hello\", \"World\", \"My\", \"name\", \"is\", \"Peter\"]\nassert words_string(\"Hello, World, My name is Peter\") == [\n        \"Hello\", \"World\", \"My\", \"name\", \"is\", \"Peter\"]\nassert words_string(\"Hello, World, My name is Peter\") == [\n        \"Hello\", \"World\", \"My\", \"name\", \"is\", \"Peter\"]\nassert words_string(\"Hello, World, My name is Peter\") == [\n        \"Hello\", \"World\", \"My\", \"name\", \"is\", \"Peter\"]\nassert words_string(\"Hello, World, My name is Peter\") == [\n        \"Hello\", \"World\", \"My\", \"name\", \"is\", \"Peter\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_string('This is a test, example') == ['This', 'is', 'a', 'test', 'example']\nassert words_string('And so is this example') == ['And','so', 'is', 'this', 'example']\nassert words_string('This and that is another example') == ['This', 'and', 'that', 'is', 'another', 'example']\nassert words_string('This and that is another example, again') == ['This', 'and', 'that', 'is', 'another', 'example', 'again']\nassert words_string('Yet another example') == ['Yet', 'another', 'example']\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     choose_num(10, 15) == 14\nassert     choose_num(0, 2) == -1\nassert     choose_num(20, 5) == 4\nassert     choose_num(2, 20) == -1\nassert     choose_num(-10, -1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     choose_num(3, 6) == 4, choose_num(3, 6)\nassert choose_num(1, 5) == -1, choose_num(1, 5)\nassert choose_num(100, 200) == -1, choose_num(100, 200)\nassert choose_num(2, 2) == -1, choose_num(2, 2)\nassert choose_num(3, 4) == 4, choose_num(3, 4)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     choose_num(1, 100) == 2\nassert     choose_num(100, 1) == -1\nassert     choose_num(1, 10) == 2\nassert     choose_num(10, 1) == 8\nassert     choose_num(10, 100) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     choose_num(1, 100) == 98\nassert     choose_num(1, 1) == -1\nassert     choose_num(1, 20) == 18\nassert     choose_num(1, 2) == 2\nassert     choose_num(100, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     choose_num(1, 100) == 104\nassert     choose_num(0, 100) == -1\nassert     choose_num(-1, 0) == -1\nassert     choose_num(0, 0) == -1\nassert     choose_num(1, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     choose_num(1, 101) == 100\nassert     choose_num(9, 101) == 100\nassert     choose_num(1, 12) == 8\nassert     choose_num(10, 12) == -1\nprint(\"Problem 01 (choose_num) is correct.\")\n\n\ndef choose_num_test():\n    \"\"\" test function for choose_num \"\"\"\n    test_cases = [[1, 101], [9, 101], [1, 12], [10, 12], [1, 8], [10, 8]]\n    for case in test_cases:\n        x = case[0]\n        y = case[1]\n        expected = case[2]\n        result = choose_num(x, y)\n        if result == expected:\n            print(\"For x = {}, y = {}, the result is correct:\".format(x, y), result)\n        else:\n            print(\"For x = {}, y = {}, the result is wrong:\".format(x, y), result)\nchoose_num_test()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     choose_num(3, 10) == 8\nassert     choose_num(10, 2) == -1\nassert     choose_num(15, 20) == -1\nassert     choose_num(0, 1) == -1\nassert     choose_num(1, 1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     choose_num(1, 4) == 4\nassert     choose_num(3, 10) == 8\nassert     choose_num(1, 4) == -1\nassert     choose_num(1, 4) == -1\n\n\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     choose_num(1, 10) == 8,     \"choose_num(1, 10) is incorrect\"\nassert     choose_num(10, 1) == -1,     \"choose_num(10, 1) is incorrect\"\nassert     choose_num(1, 1) == -1,     \"choose_num(1, 1) is incorrect\"\nassert     choose_num(5, 6) == 6,     \"choose_num(5, 6) is incorrect\"\nassert     choose_num(8, 8) == -1,     \"choose_num(8, 8) is incorrect\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     choose_num(-10, 10) == -1, \"Wrong\"\nassert     choose_num(10, 20) == -1, \"Wrong\"\nassert     choose_num(10, 8) == 8, \"Wrong\"\nassert     choose_num(10, 10) == -1, \"Wrong\"\nassert     choose_num(10, 11) == -1, \"Wrong\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 10) == 8\nassert     rounded_avg(1, 9) == 7\nassert     rounded_avg(1, 8) == 8\nassert     rounded_avg(1, 7) == 8\nassert     rounded_avg(1, 6) == 7\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rounded_avg(1, 5) == 3, f\"Incorrect result for 1,5\"\nassert     rounded_avg(4, 8) == 4, f\"Incorrect result for 4,8\"\nassert     rounded_avg(6, 4) == 4, f\"Incorrect result for 6,4\"\nassert     rounded_avg(6, 4) == 4, f\"Incorrect result for 6,4\"\nassert     rounded_avg(8, 1) == -1, f\"Incorrect result for 8,1\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nrounded_avg(1, 10) == 1\nrounded_avg(1, 2) == 0\nrounded_avg(1, 4) == 1\nrounded_avg(2, 5) == 2\nrounded_avg(10, 15) == 11\nrounded_avg(15, 17) == 16\nrounded_avg(4, 16) == 5\nrounded_avg(20, 40) == 28\nrounded_avg(41, 42) == 42\nrounded_avg(42, 42) == 42\nrounded_avg(0, -1) == -1\nrounded_avg(0, 0) == 0\nrounded_avg(0, 1) == 0\nrounded_avg(1, 1) == 1\nrounded_avg(1, 2) == 1\nrounded_avg(2, 2) == 2\nrounded_avg(2, 3) == 2\nrounded_avg(3, 4) == 2\nrounded_avg(4, 4) == 4\nrounded_avg(4, 5) == 4\nrounded_avg(5, 6) == 4\nrounded_avg(6, 7) == 4\nrounded_avg(7, 8) == 4\nrounded_avg(8, 9) == 4\nrounded_avg(9, 10) == 4\nrounded_avg(10, 11) == 4\nrounded_avg(11, 12) == 4\nrounded_avg(12, 13) == 4\nrounded_avg(13, 14) == 4\nrounded_avg(14, 15) == 4\nrounded_avg(15, 16) == 4\nrounded_avg(16, 17) == 4\nrounded_avg(17, 18) == 4\nrounded_avg(18, 19) == 4\nrounded_avg(19, 20) == 4\nrounded_avg(20, 21) == 4\nrounded_avg(21, 22) == 4\nrounded_avg(22, 23) == 4\nrounded_avg(23, 24) == 4\nrounded_avg(24, 25) == 4\nrounded_avg(25, 26) == 4\nrounded_avg(26, 27) == 4\nrounded_avg(27, 28) == 4\nrounded_avg(28, 29) == 4\nrounded_avg(29, 30) == 4\nrounded_avg(30, 31) == 4\nrounded_avg(31, 32) == 4\nrounded_avg(32, 33) == 4\nrounded_avg(33, 34) == 4\nrounded_avg(34, 35) == 4\nrounded_avg(35, 36) == 4\nrounded_avg(36, 37) == 4\nrounded_avg(37, 38) == 4\nrounded_avg(38, 39) == 4\nrounded_avg(39, 40) == 4\nrounded_avg(40, 41) == 4\nrounded_avg(41, 42) == 4\nrounded_avg(42, 43) == 4\nrounded_avg(43, 44) == 4\nrounded_avg(44, 45) == 4\nrounded_avg(45, 46) == 4\nrounded_avg(46, 47) == 4\nrounded_avg(47, 48) == 4\nrounded_avg(48, 49) == 4\nrounded_avg(49, 50) == 4\nrounded_avg(50, 51) == 4\nrounded_avg(51, 52) == 4\nrounded_avg(52, 53) == 4\nrounded_avg(53, 54) == 4\nrounded_avg(54, 55) == 4\nrounded_avg(55, 56) == 4\nrounded_avg(56, 57) == 4\nrounded_avg(57, 58) == 4\nrounded_avg(58, 59) == 4\nrounded_avg(59, 60) == 4\nrounded_avg(60, 61) == 4\nrounded_avg(61, 62) == 4\nrounded_avg(62, 63) == 4\nrounded_avg(63, 64) == 4\nrounded_avg(64, 65) == 4\nrounded_avg(65, 66) == 4\nrounded_avg(66, 67) == 4\nrounded_avg(67, 68) == 4\nrounded_avg(68, 69) == 4\nrounded_avg(69, 70) == 4\nrounde"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rounded_avg(1, 10) == '11'\nassert     rounded_avg(8, 10) == '10'\nassert     rounded_avg(1, 1) == '1'\nassert     rounded_avg(10, 11) == '11'\nassert     rounded_avg(10, 10) == '1'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     unique_digits([1, 11, 2, 13, 3, 14, 4]) == [1, 2, 3, 4, 11, 14]\nassert     unique_digits([12, 22, 13, 33, 43, 44]) == [12, 13, 22, 33, 43, 44]\nassert     unique_digits([12, 22, 13, 33, 43, 44, 55]) == [12, 13, 22, 33, 43, 44, 55]\n\ndef max_product(x):\n    \"\"\"Given a list of integers x, return a sorted list of all elements that \n    have the largest sum.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 7]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 7, 9]\nassert     unique_digits([2, 4, 6, 8, 1, 3, 5, 7, 9, 10]) == [1, 2, 3, 5, 7, 9]\nassert     unique_digits([1, 2, 2, 4, 6, 8, 1, 3, 5, 7, 9, 10]) == [1, 3, 5, 7, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique_digits([34,5,22,1,98,123,9,32]) == [1, 3, 5, 9]\nassert     unique_digits([34,5,22,1,98,123,9,3]) == [1, 3, 5, 9]\nassert     unique_digits([34,5,22,1,98,123,9,23]) == [1, 3, 5, 9, 23]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique_digits([1, 2, 3]) == [1, 2, 3]\nassert unique_digits([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert unique_digits([5, 10, 20, 10, 30, 20]) == [5, 10, 20, 30]\nassert unique_digits([1, 8, 7, 15, 35]) == [1, 7, 8, 15]\n\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nassert "
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique_digits([31, 73, 183]) == [31, 73]\nassert unique_digits([4, 7, 9]) == [4, 9]\nassert unique_digits([3, 6, 6, 2, 4]) == [6, 2, 4]\nassert unique_digits([0]) == [0]\nassert unique_digits([0, 4, 3, 6, 9, 8]) == [4, 6, 8]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique_digits([19, 2, 6, 42, 3]) == [6, 42]\nassert     unique_digits([1, 1, 2, 3, 4]) == [2, 4]\nassert     unique_digits([3, 3, 1, 1, 1]) == [1]\nassert     unique_digits([7, 9, 7, 7, 9]) == [7, 9]\nassert     unique_digits([9, 9, 8, 6, 5, 4]) == [4, 5, 6, 8, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     unique_digits([1234, 10, 50, 5, 33, 99, 102, 233]) == [10, 33, 50, 102]\nassert unique_digits([11, 33, 55, 77, 88, 2, 22, 99, 33]) == [11, 33, 55, 77, 88]\nassert unique_digits([54, 44, 33, 22, 11, 55, 22, 33, 99]) == [11, 22, 33]\nassert unique_digits([5, 20, 50, 55, 99, 123, 44]) == [5, 20, 50, 55, 99]\n\nif __name__ == \"__main__\":\n    print(unique_digits([1234, 10, 50, 5, 33, 99, 102, 233]))\n    print(unique_digits([11, 33, 55, 77, 88, 2, 22, 99, 33]))\n    print(unique_digits([54, 44, 33, 22, 11, 55, 22, 33, 99]))\n    print(unique_digits([5, 20, 50, 55, 99, 123, 44]))\n    print(unique_digits([5, 20, 50, 55, 99, 123, 44, 66, 22, 33, 33, 55, 77, 88, 99, 101, 102, 123, 333]))"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     by_length([8, 3, 1, 9, 4, 0]) == \"Zero, One, Three, Four, Two, Eight\"\nassert     by_length([2, 6, 4, 8, 0, 1]) == \"Zero, One, Two, Three, Four, Six\"\nassert     by_length([7, 9, 1, 4, 9, 9]) == \"One, Four, Seven, Nine, Two, Three"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     [1,2,3,4,5,6,7,8,9] == by_length([1,2,3,4,5,6,7,8,9])\nassert     [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == by_length([1,2,3,4,5,6,7,8,9])\nassert     [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"] == by_length([9,8,7,6,5,4,3,2,1])\nassert     [1,2,3,4,5,6,7,8,9] == by_length([1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     by_length([]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 9, 8, 7]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [str(n) for n in by_length(['5', '3', '2', '1'])] == ['Eight', 'Five', 'Three', 'Two']\nassert     [str(n) for n in by_length(['6', '0', '4', '5', '1', '7', '8', '9', '2'])] == ['Nine', 'Six', 'Five', 'Four', 'Seven', 'Two', 'Eight', 'Six', 'Five']\nassert     [str(n) for n in by_length(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])] == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Zero']\nassert     [str(n) for n in by_length([])] == []\n\ndef swap_first_last(arr):\n    \"\"\"\n    Given an array of integers, swap the first and last element of the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     by_length([9, 4, 3, 1, 5]) == \\\n        \"Five, Four, Three, One, Two\"\nassert     by_length([9, 8, 7, 6, 5]) == \\\n        \"Five, Six, Seven, Eight, Nine\"\nassert     by_length([1, 3, 5, 7, 9]) == \\\n        \"Nine, Seven, Five, Three, One\"\nassert     by_length([2, 3, 5, 7, 9]) == \\\n        \"Nine, Seven, Five, Three, Two\"\nassert     by_length([4, 6, 5, 7, 9]) == \\\n        \"Nine, Seven, Five, Four, Two\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     by_length([3, 4, 5, 7, 1, 9]) == ['Nine', 'Seven', 'Five', 'Four', 'Three', 'Two']\nassert     by_length([1, 2, 3, 4, 5]) == ['One', 'Two', 'Three', 'Four', 'Five']\nassert     by_length([9, 4, 5, 7, 1]) == ['Nine', 'Five', 'Seven', 'Four', 'One']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [8, 7, 6, 5, 4, 3, 2, 1, 9] == by_length([8, 7, 6, 5, 4, 3, 2, 1, 9])\nassert     [1, 7, 2, 6, 3, 5, 4, 8, 9] == by_length([1, 7, 2, 6, 3, 5, 4, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1] == by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     f(2) == [2, 2]\nassert     f(1) == [1, 1]\nassert     f(3) == [6, 3]\nassert     f(5) == [24, 15]\nassert     f(10) == [3628800, 37172800]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     f(1) == [1], \"Your code has some errors\"\nassert     f(2) == [1, 1], \"Your code has some errors\"\nassert     f(3) == [1, 2, 6], \"Your code has some errors\"\n\nassert     f(4) == [1, 2, 6, 24], \"Your code has some errors\"\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 1]\nassert     f(4) == [1, 1, 1, 2]\nassert     f(5) == [1, 1, 1, 2, 3]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(10) == (2, 8)\nassert even_odd_palindrome(1) == (0, 0)\nassert even_odd_palindrome(2) == (1, 1)\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(4) == (2, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(3) == (2, 0)\nassert     even_odd_palindrome(4) == (2, 2)\nassert     even_odd_palindrome(5) == (3, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test case 1\n    n = 2\n    ans = (0, 0)\n    res = even_odd_palindrome(n)\n    assert res == ans, f'Expected {ans} but got {res}'\n\n    # test case 2\n    n = 3\n    ans = (1, 0)\n    res = even_odd_palindrome(n)\n    assert res == ans, f'Expected {ans} but got {res}'\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (2, 2)\nassert     even_odd_palindrome(5) == (2, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    pas"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (2, 2, even_odd_palindrome(9))\nassert     (4, 3, even_odd_palindrome(100))\nassert     (0, 0, even_odd_palindrome(1))\nassert     (1, 1, even_odd_palindrome(10))\nassert     (2, 0, even_odd_palindrome(9))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(2) == (0, 1)\nassert even_odd_palindrome(3) == (0, 2)\nassert even_odd_palindrome(7) == (2, 4)\nassert     even_odd_palindrome(100) == (40, 60"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(2) == (1, 1), 'wrong result for n=2'\nassert     even_odd_palindrome(3) == (2, 0), 'wrong result for n=3'\nassert     even_odd_palindrome(4) == (1, 2), 'wrong result for n=4'\n\nif __name__ == '__main__':\n    print('The number of even and odd palindromes between (1, 10^3) is:', even_odd_palindrome(10))"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_nums([1,2,-3]) == 2\nassert     count_nums([]) == 0\nassert     count_nums([0,0,0,0,0]) == 0\nassert     count_nums([1,-1,0,1]) == 3\nassert     count_nums([-11,12,0,13,2,0,0,-10,0,12]) == 6\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0, \"wrong result\"\nassert     count_nums([1, 3, -4, 9, -5]) == 3, \"wrong result\"\nassert     count_nums([-1, -2, -3, -4, -5]) == 0, \"wrong result\"\nassert     count_nums([0, 0, 0, 0, 0]) == 5, \"wrong result\"\n\ndef reverse_arr(arr, start, end):\n    \"\"\"\n    Write a function reverse_arr which takes an array,\n    reverses its order from index start to end (inclusive)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_nums([]) == 0, \"Empty array\"\nassert     count_nums([1, 2, 3, 4]) == 0, \"all numbers <= 0\"\nassert     count_nums([-1, -2, -3, -4]) == 0, \"all numbers <= 0\"\nassert     count_nums([1, 2, 3, 4]) == 1, \"one number > 0\"\nassert     count_nums([-1, -2, -3, -4]) == 1, \"one number > 0\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_nums([-1, 1, 2]) == 1\nassert     count_nums([]) == 0\nassert     count_nums([2, 3, 4, -5, -6]) == 3\nassert     count_nums([1, 2, 3, -4, 5]) == 3\nassert     count_nums([5, -4, 3, 4, -1, -2]) == 4\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_nums([0, 1, 2, 3, 4, 5]) == 0\nassert     count_nums([0, 0, -1, -2, -3, -4]) == 2\nassert     count_nums([-1, -2, -3, -4, -5]) == 5\nassert     count_nums([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 4\nassert     count_nums([0, 0, 0, 0, 0, 0]) == 5\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1234, -1234, -1, -2]) == 1\nassert     count_nums([-1, -2, 0]) == 0\nassert     count_nums([-1234, -5678]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_nums([]) == 0, \"empty array\"\nassert     count_nums([1]) == 0, \"one element\"\nassert     count_nums([1, 2]) == 1, \"two elements\"\nassert     count_nums([-1, 1, 2]) == 2, \"three elements\"\nassert     count_nums([-1, -2, 1, 1, 2]) == 3, \"all elements are negative\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef check_if_sum_greater_than_n(arr):\n    \"\"\"\n    Write a function check_if_sum_greater_than_n which takes an array of\n    integers and returns the number of elements which has a sum of digits > n.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     move_one_ball([2, 1, 0, 3]) == True\nassert     move_one_ball([0, 1, 2, 3]) == False\nassert     move_one_ball([1, 2, 3, 4]) == True\nassert     move_one_ball([1, 3, 2, 4]) == True\nassert     move_one_ball([3, 4, 2, 1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     move_one_ball([1, 3, 5, 2, 4, 6]) == True\nassert     move_one_ball([1, 3, 2, 4, 5, 6]) == False\nassert     move_one_ball([2, 1, 3, 5, 4, 6]) == True\nassert     move_one_ball([2, 3, 4, 5, 6, 1]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     move_one_ball([2, 3, 1, 4]) == True\nassert     move_one_ball([1, 2, 3, 4]) == False\nassert     move_one_ball([1, 2, 3, 1, 4]) == True\nassert     move_one_ball([1, 2, 1, 3, 4, 4, 5, 6]) == True\nassert     move_one_ball([1, 2, 1, 3, 4, 4, 5, 6, 5]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     move_one_ball([1,2,3,4,5,6,7,8,9]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10]) == False\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10,11]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert     move_one_ball([]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     exchange([1,2,3,4],[1,3,5,7]) == 'YES'\nassert     exchange([1,3,5,7],[1,2,3,4]) == 'YES'\nassert     exchange([1,3,5,7],[1,2,4,7]) == 'YES'\nassert     exchange([1,3,5,7],[1,2,4,5]) == 'NO'\nassert     exchange([1,3,5,7],[1,2,4,6]) == 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     exchange([], []) == \"NO\"\nassert     exchange([2], [2]) == \"YES\"\nassert     exchange([3, 1], [2, 1]) == \"NO\"\nassert     exchange([1, 3], [2, 1]) == \"YES\"\nassert     exchange([1, 3, 5, 7, 9], [2, 4, 6, 8]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     exchange([1], [2, 3, 4, 5]) == \"NO\"\nassert     exchange([1, 2, 3], [1, 3, 5]) == \"YES\"\nassert     exchange([1, 3], [2, 4, 5]) == \"NO\"\nassert     exchange([1, 3], [1, 2, 4, 5]) == \"NO\"\nassert     exchange([1, 3], [2, 5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     exchange([1, 2], [3, 4, 5]) == \"NO\"\nassert     exchange([3, 5, 1, 2], [2, 3, 4]) == \"YES\"\nassert     exchange([6, 3, 5, 1, 2], [2, 3, 4]) == \"NO\"\nassert     exchange([1, 5, 3, 6], [3, 2, 1, 6]) == \"YES\"\nassert     exchange([2, 3, 4], [4, 3, 2]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     exchange([1], []) == \"YES\"\nassert     exchange([2], []) == \"NO\"\nassert     exchange([2,3], [4]) == \"YES\"\nassert     exchange([3,4], [2]) == \"YES\"\nassert     exchange([1,2,3,4,5], [2,4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     exchange([1, 2], [1, 3]) == \"YES\"\nassert     exchange([1, 2], [2, 3]) == \"NO\"\nassert     exchange([1, 2], [3, 4]) == \"YES\"\nassert     exchange([1, 2, 3], [1, 2, 3]) == \"YES\"\nassert     exchange([1, 2, 3], [1, 3, 5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     exchange([2, 3, 4, 5], [1, 4, 5, 6]) == \"YES\"\nassert     exchange([2, 3, 4, 5], [1, 4, 5, 6]) == \"YES\"\nassert     exchange([2, 3, 4, 5], [1, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 4, 5, 6], [2, 3, 4, 5]) == \"NO\"\nassert     exchange([2, 3, 4, 5], [1, 4, 5, 6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     exchange([1,2,3], [4,5,6]) == \"NO\"\nassert     exchange([1,2,3], [3,5,7]) == \"YES\"\nassert     exchange([2], [4,5,6]) == \"NO\"\nassert     exchange([2], [2,5,7]) == \"YES\"\nassert     exchange([2,4,6], [3,5,7]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     exchange([3, 4, 5, 6], [3, 4, 6, 5]) == \"YES\"\nassert     exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"NO\"\nassert     exchange([1, 3, 5, 7], [2, 6, 4, 8]) == \"YES\"\nassert     exchange([], []) == \"YES\"\nassert     exchange([1], [1]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     histogram(\"a b c\") == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram(\"abc\") == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram(\"abc b c\") == {'a': 1, 'b': 2, 'c': 2}\nassert     histogram(\"abc b c a b c\") == {'a': 2, 'b': 4, 'c': 3}\nassert     histogram(\"abc b c a b c a b c a\") == {'a': 3, 'b': 7, 'c': 4}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     histogram(\"abababab\") == {'a': 4, 'b': 3}\nassert     histogram(\"a\") == {'a': 1}\nassert     histogram(\"abcabcabc\") == {'a': 3, 'b': 2, 'c': 3}\nassert     histogram(\"a b c c a b c a b c c\") == {'a': 2, 'b': 2, 'c': 3}\nassert     histogram(\"a b c c a b b a a b c c\") == {'a': 3, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     {'a': 1, 'b': 1, 'c': 1} == histogram('aab')\nassert     {'a': 2, 'b': 1} == histogram('ba')\nassert     {'a': 1, 'b': 1, 'c': 1} == histogram('baca')\nassert     {'a': 1, 'b': 1, 'c': 1} == histogram('bacac')\nassert     {'a': 1, 'b': 1, 'c': 1, 'd': 1} == histogram('bacaca')\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     histogram(\"hello\") == {'e': 1, 'l': 1, 'o': 1, 'h': 1}\nassert     histogram(\"hello world\") == {'l': 2, 'o': 2, 'h': 1, 'e': 1, 'd': 1,'': 1, 'w': 1, 'r': 1, 'd': 1, 'o': 1}\nassert     histogram(\"hiiiiiiiiiiiiii\") == {'i': 9, 'h': 1}\nassert     histogram(\"hello world hello\") == {'l': 2, 'e': 2, 'h': 2}\nassert     histogram(\"hiii iiiiiiiiii\") == {'i': 9}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     histogram(\"ABCDE\") == {'A': 1, 'B': 1, 'C': 1, 'D': 1, 'E': 1}, \"histogram should return {'A': 1, 'B': 1, 'C': 1, 'D': 1, 'E': 1}\"\nassert     histogram(\"AAABBBCC\") == {'A': 3, 'B': 3, 'C': 3}, \"histogram should return {'A': 3, 'B': 3, 'C': 3}\"\nassert     histogram(\"ABABABAAB\") == {'A': 3, 'B': 3}, \"histogram should return {'A': 3, 'B': 3}\"\nassert     histogram(\"A\") == {'A': 1}, \"histogram should return {'A': 1}\"\nassert     histogram(\"\") == {}, \"histogram should return {}\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint(histogram(\"abccba\"))\nassert \nprint(histogram(\"aaaa\"))\nassert \nprint(histogram(\"abcbab\"))\nassert \nprint(histogram(\"a\"))\nassert \nprint(histogram(\"\"))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     histogram('abaaaabbbbcdef') == {'a': 4, 'b': 4, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert histogram('abca') == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert histogram('aaaabbbbbccc') == {'a': 4, 'b': 4, 'c': 2, 'd': 1, 'e': 1}\nassert histogram('a') == {'a': 1}\nassert histogram('aa') == {'a': 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef histogram_1(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     reverse_delete('abbaca', 'ab') == ('ca', True)\nassert     reverse_delete('abbaca', 'caba') == ('abbaca', True)\nassert     reverse_delete('abbaca', 'cb') == ('abbaca', True)\nassert     reverse_delete('abbaca', 'a') == ('cba', True)\nassert     reverse_delete('abbaca', 'aac') == ('cba', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     reverse_delete('abracadabra','a') == ('bracadabr', True)\nassert     reverse_delete('abracadabra','r') == ('abrackdab', True)\nassert     reverse_delete('abracadabra','d') == ('abrackcad', True)\nassert     reverse_delete('abracadabra','b') == ('abracadar', True)\nassert     reverse_delete('abracadabra','c') == ('abracadab', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     reverse_delete('abcdef', 'bcd') == ('acf', True)\nassert     reverse_delete('abc', 'c') == ('abc', True)\nassert     reverse_delete('abc', 'a') == ('b', False)\nassert     reverse_delete('a', 'a') == ('', False)\nassert     reverse_delete('ab', 'a') == ('b', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"abc\",\"\") == (\"abc\", True)\nassert     reverse_delete(\"abc\",\"abc\") == (\"abc\", True)\nassert     reverse_delete(\"abcba\",\"\") == (\"abcba\", True)\nassert     reverse_delete(\"abcba\",\"ab\") == (\"abcba\", True)\nassert     reverse_delete(\"abcba\",\"ba\") == (\"abcba\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     reverse_delete('abccabccc', 'ab') == ('aabcac',True)\nassert     reverse_delete('abccabccc', 'ac') == ('abccabc',False)\nassert     reverse_delete('abcdedcba', 'abc') == ('abdeddc',True)\nassert     reverse_delete('abcdedcba', 'bc') == ('abcdedda',False)\nassert     reverse_delete('abcdedcba', 'd') == ('abcecba',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     reverse_delete('aaabbccc','a') == ('ababcbccc', True)\nassert     reverse_delete('abcbba', 'b') == ('accba', True)\nassert     reverse_delete('abcbb', 'c') == ('abcb', True)\nassert     reverse_delete('abcbba', 'c') == ('abca', False)\nassert     reverse_delete('abcbba', 'bb') == ('abcb', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \nassert\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     reverse_delete('abracadabra', 'a') == ('bracadabra', False)\nassert     reverse_delete('abracadabra', 'r') == ('abacada', True)\nassert     reverse_delete('', 'a') == ('', True)\nassert     reverse_delete('abracadabra', 'd') == ('abracadabra', True)\nassert     reverse_delete('abracadabra', '') == ('abracadabra', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     reverse_delete(\"ababa\",\"ab\") == ('abab',True)\nassert     reverse_delete(\"abcba\",'abc') == ('abab',True)\nassert     reverse_delete(\"abababa\",\"ab\") == ('abcba',True)\nassert     reverse_delete(\"abcba\",\"a\") == ('bca',True)\nassert     reverse_delete(\"abcba\",\"b\") == ('abc',True)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     odd_count([\"34\", \"23\", \"78\", \"22\"]) == [2, 1, 4, 1], \"incorrect\"\nassert     odd_count([\"32\", \"23\", \"7\", \"2\"]) == [0, 1, 0, 0], \"incorrect\"\nassert     odd_count([\"12345\", \"2345\", \"345\", \"45\"]) == [0, 0, 3, 0], \"incorrect\"\n\nprint(\"all tests passed\""
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef odd_count_update(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    This function is like odd_count, but for each string, the number of odd\n    digits is only counted once, and only added to the count for the first\n    occurence of that string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     odd_count([\"a4c\",\"2\",\"a2a\"]) == [2,2,1]\nassert     odd_count([\"a4c\",\"2\",\"a2a\",\"\"]) == [2,2,1,0]\nassert     odd_count([\"a4c\",\"2\",\"a2a\",\"7\"]) == [2,2,1,0]\nassert     odd_count([\"a4c\",\"2\",\"a2a\",\"7a\"]) == [2,2,1,1]\nassert     odd_count([\"a4c\",\"2\",\"a2a\",\"7a\",\"\"]) == [2,2,1,1,0]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     odd_count([\"123\", \"67\", \"45\", \"2\", \"1\"]) == [1, 1, 1, 1, 3]\nassert     odd_count([\"543\", \"24\", \"34\"]) == [0, 1, 1]\nassert     odd_count([\"4\", \"5\"]) == [1, 1]\nassert     odd_count([]) == []\nassert     odd_count([\"111\", \"44\"]) == [1, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     odd_count([ \"12\" ]) == [1]\nassert     odd_count([ \"11\" ]) == [1]\nassert     odd_count([ \"111\" ]) == [1]\nassert     odd_count([ \"01\" ]) == [1]\nassert     odd_count([ \"21\" ]) == [1]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     odd_count([\"1456\", \"35\", \"1237\", \"8122\", \"3\"]) == [3, 4, 5, 1, 3]\nassert     odd_count([\"12\", \"34\", \"56\", \"78\", \"9\"]) == [1, 2, 1, 0, 2]\nassert     odd_count([\"111\", \"101\", \"1010\", \"10101\", \"101010\", \"10101010\", \"1010101010\"]) == [2, 2, 3, 3, 3, 2, 3]\nassert     odd_count([\"13\", \"1112\", \"555\"]) == [1, 3, 0]\nassert     odd_count([\"\"]) == []\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     odd_count([\"122\", \"1234\", \"4\"]) == [0, 2, 1], \"Wrong Answer!\"\nprint(\"Exercise 2 is correct.\")\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     odd_count([\"8123456789\", \"123456789\", \"123456789\"]) == [17, 17, 17]\nassert     odd_count([\"1212\", \"1616\", \"1616\"]) == [3, 0, 0]\nassert     odd_count([\"1212\", \"1616\", \"1616\"]) == [3, 0, 0]\nassert     odd_count([\"1212\", \"1616\", \"1616\"]) == [3, 0, 0]\nassert     odd_count([\"1a2b3c4\", \"1a2b3c4\", \"1a2b3c4\"]) == [2, 2, 2]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([3, 1, 1, 1, 0, 0, 0, 2, 3]) == 3\nassert     minSubArraySum([1, 0, 1, 1, 1, 0, 0, 1, 1]) == 3\nassert     minSubArraySum([1, 0, 1, 1, 1, 0, 0, 1, 1, 1]) == 2\nassert     minSubArraySum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, -2, 2]) == 0\nassert     minSubArraySum([3, 1, 2]) == 1\nassert     minSubArraySum([1, 2, 3]) == 1\nassert     minSubArraySum([2, -2, 2, -3, 2]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     minSubArraySum([-2, -1, -3, -4, -1, -2, 1, 5, 4]) == 1\nassert     minSubArraySum([-2, -1, -3, -4, -1, -2, -1, 5, 4]) == 0\nassert     minSubArraySum([1, -2, 4]) == 1\nassert     minSubArraySum([2, 1, 1, 2, 1, 1]) == 2\nassert     minSubArraySum([5, -3, 5]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    # nums = [7,1,2,3,1]\n    # nums = [2,3,1,2,4,3]\n    # nums = [1,2]\n    nums = [2,1,3,4,1]\n    # nums = [1,2,3,4,1,2]\n\n    print(minSubArraySum(nums))\n\n    \"\"\"\n    Example 1:\n    Input: nums = [1]\n    Output: 1\n    \"\"\"\n    \n    \"\"\"\n    Example 2:\n    Input: nums = [1,2]\n    Output: 3\n    Explanation: Subarray [2] has sum 3\n    \"\"\"\n\n    \"\"\"\n    Example 3:\n    Input: nums = [1,2,3]\n    Output: 6\n    Explanation: Subarray [1, 2] has sum 3\n    Subarray [3] has sum 3\n    Subarray [1, 3] has sum 6\n    \"\"\"\n    \n    \"\"\"\n    Example 4:\n    Input: nums = [1,4,3,2,6]\n    Output: 5\n    Explanation: Subarray [4,3,2] has sum 5\n    \"\"\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # given an array of integers, find the minimum sum of any non-empty sub-array\n    # nums = [12, 2, 1, 3, -7, 1, 2, 2, 4, 5, 6]\n    nums = [4, 3, -1, 0, 3, 2, -1, 2, -2, 2]\n    # print(minSubArraySum(nums))\n\n    print(minSubArraySum(nums))"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    pass"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     minSubArraySum([7,1,7,8,3,4,4]) == 16\nassert     minSubArraySum([2,3,1,2,4,3]) == 7\nassert     minSubArraySum([0]) == 0\nassert     minSubArraySum([0,2]) == 2\nassert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == -1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_fill([[1,0,0], [1,0,0], [1,0,0], [1,1,1]], 4) == 9\nassert     max_fill([[1,0,0,0,0,1,0,1,0,0], [0,0,1,0,0,0,0,1,0,0], [0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,1,1,0,0,0], [1,1,0,0,0,0,0,0,0,0], [0,0,1,0,0,0,0,0,1,0], [0,1,0,0,0,0,0,0,0,1], [0,0,0,0,1,0,0,1,0,0], [0,0,0,0,0,0,1,0,0,0], [1,1,0,1,0,0,0,1,0,0]], 1) == 16\nassert     max_fill([[1,0,0], [1,0,0], [1,0,0], [1,1,1]], 4) == 9\nassert     max_fill([[1,0,0,0,0,1,0,1,0,0], [0,0,1,0,0,0,0,1,0,0], [0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,1,1,0,0,0], [1,1,0,0,0,0,0,0,0,0], [0,0,1,0,0,0,0,0,1,0], [0,1,0,0,0,0,0,0,0,1], [0,0,0,0,1,0,0,1,0,0], [0,0,0,0,0,0,1,0,0,0], [1,1,0,1,0,0,0,1,0,0]], 1) == 16\nassert     max_fill([[1,0,0], [1,0,0], [1,0,0], [1,1,1]], 4) == 9\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0]], 2) == 1\nassert     max_fill([[1,0,1,0], [0,1,0,1], [0,1,0,1]], 2) == 2\nassert     max_fill([[0,1,0,1], [0,1,0,1], [0,1,0,1]], 2) == 0\nassert     max_fill([[0,0,0,0], [0,1,0,1], [0,1,0,1]], 2) == 0\nassert     max_fill([[1,0,1,0], [0,1,0,1], [0,1,0,1]], 1) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     max_fill( [[1,0,1,0,0],[0,1,0,1,0],[0,0,0,0,1],[0,0,0,0,0]], 3) == 10\nassert     max_fill( [[1,0,0,0,0,1,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,0,0,1,1],[1,0,0,1,0,0,0],[0,0,0,1,0,0,0]], 2) == 26\n\ndef test_max_fill():\n    assert     max_fill( [[1,0,1,0,0],[0,1,0,1,0],[0,0,0,0,1],[0,0,0,0,0]], 3) == 10\n    assert     max_fill( [[1,0,0,0,0,1,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,0,0,1,1],[1,0,0,1,0,0,0],[0,0,0,1,0,0,0]], 2) == 2"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_fill([[1,0],[1,0]], 1) == 5, \"test1\"\nassert     max_fill([[1,0,0,0,1],[1,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,1]], 1) == 3, \"test2\"\nassert     max_fill([[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], 1) == 2, \"test3\"\nassert     max_fill([[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]], 0) == 3, \"test4\"\nassert     max_fill([[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]], 0) == 1, \"test5\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_fill([[0, 1, 0, 0, 0], [1, 1, 1, 0, 1], [1, 0, 1, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0]], 1) == 1\nassert     max_fill([[1, 1, 0, 0, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1], [1, 1, 0, 1, 1]], 1) == 2\nassert     max_fill([[1, 1, 1, 0, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 1) == 4\n\nif __name__ == '__main__':\n    grid = []\n    for _ in range(int(input())):\n        grid.append(list(map(int, input().split())))\n\n    capacity = int(input())\n    print(max_fill(grid, capacity))"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_fill(grid = [[1,1]], capacity = 4) ==     2\nassert     max_fill(grid = [[1,0], [0,1]], capacity = 4) ==     1\nassert     max_fill(grid = [[1,1], [0,0]], capacity = 4) ==     2\nassert     max_fill(grid = [[1,1], [0,0]], capacity = 2) ==     "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_fill([[0,0,1],\n                  [1,0,0],\n                  [0,1,1]],\n                  1) == 7\nassert     max_fill([[0,0,1],\n                  [1,0,0],\n                  [0,1,1]],\n                  2) == 6\nassert     max_fill([[0,0,1],\n                  [1,0,0],\n                  [0,1,1]],\n                  3) == 6\nassert     max_fill([[0,0,1],\n                  [1,0,0],\n                  [0,1,1]],\n                  4) == 5\nassert     max_fill([[0,0,1],\n                  [1,0,0],\n                  [0,1,1]],\n                  5) == 5\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [12, 23, 34, 45, 56, 67] == sort_array([12, 34, 23, 45, 56, 67])\nassert     [4, 4, 4, 4, 4, 4] == sort_array([4, 4, 4, 4, 4, 4])\nassert     [1, 2, 3, 4, 5] == sort_array([5, 4, 3, 2, 1]"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([10,101,11,110,111,120,121]) == [101,110,111,120,121,110,10]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,4,8,3,5,6,7,9]\nassert     sort_array([32,321,32100,3210,321100,32110010,32111001,32111100,\n
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_sort_array([0, 1, 3, 5, 1, 2, 3, 4, 5]"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 4, 8, 3, 5, 6, 7]\nassert     sort_array([532, 614, 893, 342, 221]) == [532, 893, 342, 221, 614]\nassert     sort_array([845, 545, 7, 645, 975]) == [845, 7, 975, 545, 645]\nassert     sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nassert     sort_array([1111, 1110, 1109, 1108]) == [1109, 1108, 1111, 1110]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"error\"\nassert     sort_array([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9], \"error\"\nassert     sort_array([9,8,7,6,5,4,3,2,1,0,2,3,4,5,6,7,8]) == [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9], \"error\"\n\ndef test_sort_array():\n    assert sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7], \"error\"\n    "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_array([0,0,1,1,2,2,3,3,4,4]) == [0,0,1,1,2,2,3,3,4,4]\nassert     sort_array([9,7,8,1,2,3,5,6,0,1,1,3,4,5,7,8,9,6]) == [0,0,1,1,1,1,2,2,3,3,4,5,5,6,6,7,7,8,9,9]\nassert     sort_array([9,1,8,8,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     select_words(\"ab ca cd ef\", 0) == [], \"Wrong output for select_words('ab ca cd ef', 0)\"\nassert     select_words(\"ab ca cd ef\", 1) == [\"ab\", \"ca\"], \"Wrong output for select_words('ab ca cd ef', 1)\"\nassert     select_words(\"ab ca cd ef\", 2) == [\"ab\", \"cd\"], \"Wrong output for select_words('ab ca cd ef', 2)\"\nassert     select_words(\"ab ca cd ef\", 3) == [\"ab\", \"ef\"], \"Wrong output for select_words('ab ca cd ef', 3)\"\nassert     select_words(\"ab ca cd ef\", 4) == [\"ab\", \"ef\"], \"Wrong output for select_words('ab ca cd ef', 4)\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     select_words('abba', 2) == ['abba']\nassert     select_words('abba', 0) == []\nassert     select_words('abba', 3) == ['abb', 'a', 'ba']\nassert     select_words('abba', 1) == ['abba']\nassert     select_words('aaaa', 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     select_words(\"a b c d e f\", 3) == ['a', 'b', 'c', 'd']\nassert     select_words(\"aa bb cc dd ee ff\", 3) == ['aa', 'bb', 'ee']\nassert     select_words(\"a bb cc dd ee ff\", 0) == []\nassert     select_words(\"aaa bbb ccc dd eee ffff\", 3) == ['aaa', 'bbb', 'eee']\n\n\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     select_words('apav$9^-2', 1) == ['apav']\nassert     select_words('', 1) == []\nassert     select_words('cena', 0) == []\nassert     select_words('wzd', 1) == ['wzd']\nassert     select_words('wzd', 2) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     select_words(\"the quick brown fox jumps over the lazy dog\", 2) == \\\n           [\"quick\", \"brown\", \"jumps\"]\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 1) == \\\n           [\"quick\", \"brown\", \"jumps\", \"the\", \"the\", \"the\", \"the\", \"the\", \"the\"]\nassert     select_words(\"\", 1) == []\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 10) == []\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     select_words(\"\",1) == []\nassert     select_words(\"abc\",0) == [\"\"]\nassert     select_words(\"a\",1) == []\nassert     select_words(\"hello world\", 1) == [\"hello\"]\nassert     select_words(\"hello world\", 2) == [\"world\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     select_words(\"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\", 2) == [\"elit\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\"]\nassert     select_words(\"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\", 5) == []\nassert     select_words(\"\", 1) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"\", 3) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     select_words(\"everybody likes bananas\", 2) == [ 'everybody' ]\nassert     select_words(\"everybody likes bananas\", 3) == [ 'everybod' ]\nassert     select_words(\"everybody likes bananas\", 4) == [ 'everybody' ]\nassert     select_words(\"everybody likes bananas\", 10) == [ ]\nassert     select_words(\"\", 0) == [ ]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     select_words('asdf fasdf asdf asdf asdf asdf asdf asdf fasdf', 4) == ['asdf']\nassert     select_words('asdf fasdf asdf asdf asdf asdf asdf fasdf', 5) == ['asdf', 'fasdf']\nassert     select_words('asdf fasdf asdf asdf asdf asdf asdf fasdf', 6) == ['asdf', 'fasdf', 'asdf']\nassert     select_words('asdf fasdf asdf asdf asdf asdf asdf fasdf', 7) == ['asdf', 'fasdf', 'asdf']\nassert     select_words('asdf fasdf asdf asdf asdf asdf asdf fasdf', 8) == ['asdf', 'fasdf', 'asdf']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     select_words(\"abcc\", 2) == [\"ab\", \"ac\"] \nassert     select_words(\"abcc\", 1) == [\"a\", \"b\", \"c\"] \nassert     select_words(\"abcc\", 0) == [\"\"] \nassert     select_words(\"abcc\", 5) == [] \nassert     select_words(\"abcc\", 4) == [\"ab\", \"ac\"] \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('ssab') == 'a', \"WA FAILED: get_closest_vowel('ssab') == 'a'\"\nassert     get_closest_vowel('ffg') == 'e', \"WA FAILED: get_closest_vowel('ffg') == 'e'\"\nassert     get_closest_vowel('z') == '', \"WA FAILED: get_closest_vowel('z') == ''\"\nassert     get_closest_vowel('x') == '', \"WA FAILED: get_closest_vowel('x') == ''\"\nassert     get_closest_vowel('t') == '', \"WA FAILED: get_closest_vowel('t') == ''\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"book\") == \"o\"\nassert     get_closest_vowel(\"hello\") == \"\"\nassert     get_closest_vowel(\"hellokitty\") == \"o\"\nassert     get_closest_vowel(\"helloworld\") == \"o\"\nassert     get_closest_vowel(\"helo\") == \"e\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_closest_vowel('car') == 'e', \"car\"\nassert     get_closest_vowel('aAa') == '', \"aAa\"\nassert     get_closest_vowel('abBA') == '', \"abBA\"\nassert     get_closest_vowel('Sokrates') == '', \"Sokrates\"\nassert     get_closest_vowel('peek') == 'i', \"peek\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('aabcde') == 'e'\nassert     get_closest_vowel('aa') == ''\nassert     get_closest_vowel('z') == ''\nassert     get_closest_vowel('zpzpzp') == 'z'\nassert     get_closest_vowel('zp') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_closest_vowel('aac') == 'e', 'incorrect result for aac'\nassert     get_closest_vowel('abd') == 'e', 'incorrect result for abd'\nassert     get_closest_vowel('abbd') == 'a', 'incorrect result for abbd'\nassert     get_closest_vowel('abce') == '', 'incorrect result for abce'\nassert     get_closest_vowel('abcdef') == '', 'incorrect result for abcdef'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"b\") == \"\", \"get_closest_vowel should return empty string if it didn't find any vowel\"\nassert     get_closest_vowel(\"z\") == \"\", \"get_closest_vowel should return empty string if it didn't find any vowel\"\nassert get_closest_vowel(\"bbbbbbbbbb\") == \"b\", \"get_closest_vowel should return the vowel if it is closest to the beginning of the word\"\nassert get_closest_vowel(\"pba\") == \"a\", \"get_closest_vowel should return the first vowel if it is closest to the beginning of the word\"\nassert get_closest_vowel(\"bbbbbbbbbbbbbbb\") == \"\", \"get_closest_vowel should return empty string if it didn't find any vowel\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"aiooodi\") == \"u\"\nassert     get_closest_vowel(\"zoo\") == \"\"\nassert     get_closest_vowel(\"aaiooo\") == \"i\"\nassert     get_closest_vowel(\"oioioi\") == \"i\"\nassert     get_closest_vowel(\"yiiio\") == \"i\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('text') == ''\nassert     get_closest_vowel('fad') == ''\nassert     get_closest_vowel('efwefwe') == ''\nassert     get_closest_vowel('eefwee') == 'e'\nassert     get_closest_vowel('eeffewee') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"antidisestablishmentterianism\") == \"e\", \\\n        \"Error\"\nassert get_closest_vowel(\"helicopter\") == \"e\", \\\n        \"Error\"\nassert get_closest_vowel(\"kitten\") == \"i\", \\\n        \"Error\"\nassert get_closest_vowel(\"rhythm\") == \"y\", \\\n        \"Error\"\nassert get_closest_vowel(\"abracadabra\") == \"a\", \\\n        \"Error\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"artrartrt\") == \"r\", \"get_closest_vowel('artrartrt') == 'r' failed\"\nassert     get_closest_vowel(\"arxrt\") == \"\", \"get_closest_vowel('arxrt') == '' failed\"\nassert     get_closest_vowel(\"aaaxrrt\") == \"\", \"get_closest_vowel('aaaxrrt') == '' failed\"\nassert     get_closest_vowel(\"aaxrrt\") == \"\", \"get_closest_vowel('aaxrrt') == '' failed\"\nassert     get_closest_vowel(\"artrartrt\") == \"r\", \"get_closest_vowel('artrartrt') == 'r' failed\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     match_parens(['(', '(', ')', ')', ')', '(']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', '(', ')', '(']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', '(', '(', ')', '(', ')', '(']) == 'Yes'\nassert     match_parens(['(', '(', ')', '(', '(', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', '(', ')', '(', ')', ')', '(', ')', '(', ')', ')', ')', '(', '(', ')', ')', '(', ')', '(', ')', '(', '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', '(', ')', ')', ')', ')', '(', '(', ')', ')', ')', '(', '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', ')', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', ')', ')']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', '(', ')', '(', ')', ')', '(']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     match_parens(['()']) == 'Yes'\nassert     match_parens(['((()))']) == 'Yes'\nassert     match_parens(['(())','()()()']) == 'Yes'\nassert     match_parens(['((()))', '()()()']) == 'No'\nassert     match_parens(['((()))', '(()()()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     match_parens(['(())()', '(())()']) == 'Yes'\nassert     match_parens(['(()', '())']) == 'Yes'\nassert     match_parens(['(())', '(())']) == 'No'\nassert     match_parens(['(()()', '(())()']) == 'No'\nassert     match_parens(['(()())', '(()())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     match_parens(['(())', '())']) == 'Yes'\nassert     match_parens(['((())', '(())']) == 'Yes'\nassert     match_parens(['(()()', '()()']) == 'Yes'\nassert     match_parens(['(()()', '(())']) == 'No'\nassert     match_parens(['((()))', '(()())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     match_parens(['(()', '(())']) == 'Yes'\nassert     match_parens(['((()))', '(()())']) == 'Yes'\nassert     match_parens(['((()))', '(()())']) == 'Yes'\nassert     match_parens(['(((()))', '(()()))']) == 'No'\n\nprint('all tests passed.')"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     match_parens(['(())', '()']) == 'Yes', \\\n    \"There's a good string in the first test case.\"\nassert     match_parens(['(())', '()']) == 'Yes', \\\n    \"There's a good string in the second test case.\"\nassert     match_parens(['()(()', '()']) == 'Yes', \\\n    \"There's a good string in the third test case.\"\nassert     match_parens(['(())()', '()']) == 'Yes', \\\n    \"There's a good string in the fourth test case.\"\nassert     match_parens(['((()))', '()']) == 'Yes', \\\n    \"There's a good string in the fifth test case.\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     match_parens([\"(\", \")\"]) == \"Yes\"\nassert     match_parens([\"(\", \")\", \")\"]) == \"Yes\"\nassert     match_parens([\"(\", \"(\", \")\"]) == \"No\"\nassert     match_parens([\"(\", \")\", \")\", \")\"]) == \"No\"\nassert     match_parens([\"(\", \")\", \")\", \")\"]) == \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     match_parens(['(())()', '(())()']) == 'Yes'\nassert     match_parens(['()', '()']) == 'Yes'\nassert     match_parens(['(())', '((()))']) == 'Yes'\nassert     match_parens(['((()))', '()((()))']) == 'Yes'\nassert     match_parens(['((()))', '()((())']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     maximum([4,1,5,3,6,7,2,8], 3) == [6,7,8]\nassert     maximum([1,2,3,4], 2) == [4,3]\nassert     maximum([4,1,5,3,6,7,2,8], 4) == [5,6,7,8]\nassert     maximum([4,1,5,3,6,7,2,8], 6) == [4,5,6,7,8]\nassert     maximum([4,1,5,3,6,7,2,8], 8) == [4,5,6,7,8]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     maximum([], 1) == None\nassert     maximum([], 2) == None\nassert     maximum([2,1], 1) == None\nassert     maximum([2,1], 2) == [2]\nassert     maximum([1,2], 2) == [2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [6, 7, 8] == maximum([8, 7, 6], 2)\nassert     [6, 7, 8] == maximum([8, 7, 6], 3)\nassert     [7, 8] == maximum([8, 7, 6], 4)\nassert     [8] == maximum([8, 7, 6], 5)"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (maximum([4, 4, 4, 3, 2, 1], 3) == [4, 4, 4])\nassert     (maximum([4, 4, 4, 3, 2, 1], 4) == [4, 4, 4, 4])\nassert     (maximum([4, 4, 4, 3, 2, 1], 5) == [4, 4, 4, 4, 4])\nassert     (maximum([4, 4, 4, 3, 2, 1], 2) == [4, 4])\nassert     (maximum([4, 4, 4, 3, 2, 1], 6) == [4, 4, 4, 4, 4, 4])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1, 2, 5, 3, 1, 5, 8, 1]\n    k = 4\n    assert maximum(arr, k) == [5, 5, 5, 8]\n\n    arr = [1, 2, 3, 4, 1]\n    k = 3\n    assert maximum(arr, k) == [4, 4, 4]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     maximum([1, 3, 2, 6, -1, 4, 1, 2], 3) == [6, 6, 6]\nassert     maximum([1, 2, 3, 4, 0], 3) == [4, 4, 4]\nassert     maximum([1, 2, 3, 4, 0], 4) == [1, 2, 3, 4]\nassert     maximum([1, 2, 3, 4, 0], 5) == [1, 2, 3, 4]\nassert     maximum([1, 2, 3, 4, 0], 6) == [1, 2, 3, 4]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 3) == [4, 5, 5]\nassert maximum([1, 1, 2, 2, 3], 2) == [2, 2]\nassert maximum([1, 2, 3], 3) == [3, 3, 3]\nassert maximum([1, 2, 3, 4, 5, 5, 6], 4) == [5, 5, 5, 5]\nassert maximum([1, 2, 3, 4, 5, 6, 7], 6) == [6, 6, 6, 6, 6, 6]\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solution([1,2,3,4,5,6,7,8,9,10,11]) == 16\nassert     solution([9,8,7,6,5,4,3,2,1,10]) == 18\nassert     solution([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 16\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     solution([2, 7, 4, 15, 11]) == 3 \nassert     solution([2, 7, 4, 15, 11, 18]) == 5\nassert     solution([9, 9, 5, 1, 9, 9, 1, 9, 9, 5, 1]) == 8\nassert     solution([]) == 0\nassert     solution([2,7]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solution([1,2,3,4,5,6,7,8]) == 19\nassert     solution([1,3,5]) == 7\nassert     solution([6,5,4,3,2,1,7,9,8]) == 14\nassert     solution([9,7,8,5,6,3,4,1,2]) == 10\nassert     solution([9,8,7,6,5,4,3,2,1]) == 12\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6]) == 1\nassert     solution([2, 3, 4, 5, 6, 7]) == 10\nassert     solution([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\nassert     solution([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 36\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [5, 6, 2, 7, 3, 8, 4, 1]\n    print(\"Solution of the problem: \", solution(lst)"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add_elements([1,2,3,4,5], 2) == 9\nassert     add_elements([1,9,9,9], 1) == 9\nassert     add_elements([4,3,2,1], 2) == 7\nassert     add_elements([9,9,9,9], 4) == 9\nassert     add_elements([1,1,1,1], 3) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 19\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 19\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 21\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 21\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 24\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 3) == 9\nassert     add_elements([0, 1, 2, 3, 4], 2) == 2\nassert     add_elements([1, 2, 3, 4, 5, 6], 5) == 15\nassert     add_elements([1, 2, 3, 4, 5, 6], 3) == 9\nassert     add_elements([0], 1) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 3) == 6\nassert     add_elements([7, 8, 9, 1, 2], 4) == 10\nassert     add_elements([0, 0, 0, 0], 4) == 0\nassert     add_elements([], 3) == 0\nassert     add_elements([1234, 5678, 9012], 2) == 4730\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add_elements([1234], 1) == 1234\nassert     add_elements([1, 2, 3, 4, 5, 6], 4) == 13\nassert     add_elements([1234, 1, 2], 2) == 1234 + 1 + 2\nassert     add_elements([1234, 1, 2], 3) == 1234 + 1 + 2\nassert     add_elements([12345, 67890], 2) == 12345 + 67890\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add_elements([1,2,3,4,5], 1) == 9\nassert     add_elements([4,3,2,1,5], 2) == 8\nassert     add_elements([3,3,3,3,3], 3) == 9\nassert     add_elements([4,3,2,1,5], 4) == 7\nassert     add_elements([1,9,8,3,4,5], 2) == 13\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (add_elements([9, 9, 9, 9], 2) == 18)\nassert     (add_elements([9, 9, 9], 3) == 18)\nassert     (add_elements([1, 2, 3, 4, 5], 3) == 14)\nassert     (add_elements([1, 2, 3, 4, 5], 1) == 12)\nassert     (add_elements([1, 2, 3, 4, 5], 5) == 15)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add_elements([12, 15, 3, 7, 9], 2) == 32\nassert     add_elements([12, 15, 3, 7, 9], 2) == 32\nassert     add_elements([12, 15, 3, 7, 9], 2) == 32\nassert     add_elements([12, 15, 3, 7, 9], 2) == 32\nassert     add_elements([12, 15, 3, 7, 9], 2) == 32\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add_elements([99, 15, 20], 3) == 98\nassert     add_elements([1, 2, 3, 4, 5], 2) == 10\nassert     add_elements([1, 2, 3, 4, 5], 1) == 6\nassert     add_elements([1, 2, 3, 4, 5], 0) == 0\nassert     add_elements([1], 1) == 1\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1]         == get_odd_collatz(1)\nassert     [1, 2, 3, 10, 5, 16, 8, 4, 2, 1]     == get_odd_collatz(6)\nassert     [1, 2, 3, 10, 5, 16, 8, 4, 2, 1]     == get_odd_collatz(100)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1], \"wrong for input 1\"\nassert     get_odd_collatz(2) == [1, 3, 10, 5, 16, 8, 4, 2, 1], \"wrong for input 2\"\nassert     get_odd_collatz(3) == [1, 3, 10, 5, 16, 8, 4, 2, 1], \"wrong for input 3\"\nassert     get_odd_collatz(8) == [1, 3, 10, 5, 16, 8, 4, 2, 1], \"wrong for input 8\"\nassert     get_odd_collatz(9) == [1, 3, 10, 5, 16, 8, 4, 2, 1], \"wrong for input 9\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(10) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(20) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(0) == [], 'the input 0 should return an empty list'\nassert     get_odd_collatz(1) == [1], 'the input 1 should return [1]'\nassert     get_odd_collatz(2) == [1, 3, 10, 5], 'the input 2 should return [1, 3, 10, 5]'\nassert     get_odd_collatz(3) == [1, 3, 10, 5], 'the input 3 should return [1, 3, 10, 5]'\nassert     get_odd_collatz(4) == [1, 3, 10, 5], 'the input 4 should return [1, 3, 10, 5]'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [1] == get_odd_collatz(1)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(5)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(20)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(200)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(220)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [1] == get_odd_collatz(1)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(8)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(15)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(21)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(30)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    \n\ndef collatz(n):\n    \"\"\"\n    Given a positive integer n, return a list that has the even and odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1] == get_odd_collatz(1)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(10)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(2)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(4)\nassert     [1, 3, 10, 5, 16, 8, 4, 2, 1] == get_odd_collatz(6)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3, 10, 5]\nassert     get_odd_collatz(3) == [1, 3, 10, 5]\nassert     get_odd_collatz(4) == [1, 3, 10, 5]\nassert     get_odd_collatz(5) == [1, 3, 10, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(valid_date('12-25-2015'))\nassert not \nprint(valid_date('12-32-2015'))\nassert \nprint(valid_date('12-31-2015'))\nassert \nprint(valid_date('12-22-2015'))\nassert \nprint(valid_date('12-23-2015'))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     valid_date(\"12-15-2020\") == False, \"Incorrect output\"\nassert     valid_date(\"12-32-2020\") == False, \"Incorrect output\"\nassert     valid_date(\"12-02-2020\") == False, \"Incorrect output\"\nassert     valid_date(\"2-31-2020\") == False, \"Incorrect output\"\nassert     valid_date(\"01-02-2020\") == False, \"Incorrect output\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     valid_date('02-29-2020') == True\nassert     valid_date('12-02-2020') == False\nassert     valid_date('04-31-2020') == False\nassert     valid_date('10-31-2020') == False\nassert     valid_date('11-31-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     valid_date(\"1-3-2014\") == False\nassert     valid_date(\"1-1-2014\") == True\nassert     valid_date(\"1-2-2014\") == True\nassert     valid_date(\"2-2-2014\") == False\nassert     valid_date(\"2-29-2014\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     valid_date('02-29-2018') == True\nassert     valid_date('02-30-2018') == False\nassert     valid_date('02-31-2018') == False\nassert     valid_date('12-31-2018') == True\nassert     valid_date('01-31-2018') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     valid_date(\"01-02-2011\") == True\nassert     valid_date(\"12-02-2011\") == False\nassert     valid_date(\"02-03-2011\") == False\nassert     valid_date(\"11-02-2011\") == False\nassert     valid_date(\"01-01-2011\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     valid_date('03-31-2013') == False\nassert     valid_date('03-31-2020') == False\nassert     valid_date('03-02-2013') == True\nassert     valid_date('02-29-2013') == False\nassert     valid_date('02-29-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     valid_date(\"11-31-2017\") == True, \"This date is not valid.\"\nassert     valid_date(\"11-29-2017\") == True, \"This date is not valid.\"\nassert     valid_date(\"2-30-2017\") == False, \"This date is not valid.\"\nassert     valid_date(\"2-1-2017\") == True, \"This date is not valid.\"\nassert     valid_date(\"11-13-2017\") == True, \"This date is not valid.\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     valid_date('1-31-2019') == True\nassert     valid_date('1-31-2020') == True\nassert     valid_date('1-31-2021') == True\nassert     valid_date('12-32-2019') == False\nassert     valid_date('12-32-2020') == False\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     split_words('') == []\nassert     split_words('abc') == ['abc']\nassert     split_words(' abc') == ['abc']\nassert     split_words('abc ') == ['abc']\nassert     split_words('abc   ') == ['abc']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     split_words('') == []\nassert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello,world') == ['hello', 'world']\nassert     split_words('hello,world,') == ['hello', 'world', '']\nassert     split_words('hello,,,world') == ['hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     split_words('abc def') == ['abc', 'def']\nassert     split_words('abc,def') == ['abc', 'def']\nassert     split_words('abc def') == ['abc', 'def']\nassert     split_words('abc,def') == ['abc', 'def']\nassert     split_words('abc') == ['abc']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     split_words('') == []\nassert     split_words('abc') == ['abc']\nassert     split_words('abc,def') == ['abc', 'def']\nassert     split_words('abc,def,ghi') == ['abc', 'def', 'ghi']\nassert     split_words('abc,def,ghi, jkl') == ['abc', 'def', 'ghi', 'jkl']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     split_words(\"alpha bravo charlie\") == [\"alpha\", \"bravo\", \"charlie\"], \"All words splitted\"\nassert     split_words(\"alpha, bravo charlie\") == [\"alpha\", \"bravo\", \"charlie\"], \"Only commas splitted\"\nassert     split_words(\"alpha, bravo, charlie\") == [\"alpha\", \"bravo\", \"charlie\"], \"Only commas splitted\"\nassert     split_words(\"alpha, bravo, charlie, delta\") == [\"alpha\", \"bravo\", \"charlie\", \"delta\"], \"More than one commas splitted\"\nassert     split_words(\"alpha bravo charlie delta\") == [\"alpha\", \"bravo\", \"charlie\", \"delta\"], \"More than one commas splitted\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     split_words(\"split this sentence into words\") == [\"split\", \"this\", \"sentence\", \"into\", \"words\"]\nassert     split_words(\"a,b,c\") == [ \"a\", \"b\", \"c\" ]\nassert     split_words(\"\") == []\nassert     split_words(\"1234\") == []\nassert     split_words(\"a,b,c,d\") == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef is_palindrome(txt):\n    '''\n    Given a string, return True if it is a palindrome, False if not\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     split_words('split me') == ['split','me']\nassert     split_words('me, you') == ['me','you']\nassert     split_words('aaa, bbb, ccc') == ['aaa','bbb','ccc']\nassert     split_words('aaa, bbb, cc') == [0,0,2]\nassert     split_words(',') == [0]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef test_split_words(split_words):\n    txt = \"hello world, this is a split, words example\"\n    assert split_words(txt) == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"split\", \"words\", \"example\"]\n    txt = \"hello,world,this,is,a,split,words,example\"\n    assert split_words(txt) == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"split\", \"words\", \"example\"]\n    txt = \"I,love,leetcode\"\n    assert split_words(txt) == [\"I\", \"love\", \"leetcode\"]\n    txt = \"We,are,going,dance,mainly,because,we,can,do,it\"\n    "
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\ndef is_unique(lst):\n    '''\n    Given a list of numbers, return whether or not they are unique.\n    Use a dictionary to store the numbers.\n    '''\n    pass\n\n\ndef my_enumerate(lst):\n    '''\n    Given a list, return the elements in the list as a list of tuples,\n    where each tuple stores the index and value of the list element.\n    '''\n    pass\n\n\ndef my_list(iterable):\n    '''\n    Given an iterable, return the list of elements in the iterable.\n    '''\n    pass\n\n\ndef my_min(lst):\n    '''\n    Given a list of numbers, return the minimum number in the list.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 3, 2]) == True\nassert     is_sorted([1, 3, 2, 2, 4]) == True\nassert     is_sorted([1, 4, 2, 4]) == True\nassert     is_sorted([2, 1, 3]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_sorted([]) == True, \"Empty list should be sorted\"\nassert     is_sorted([1]) == True, \"Single element list should be sorted\"\nassert     is_sorted([1, 2]) == True, \"Two element list should be sorted\"\nassert     is_sorted([1, 2, 2]) == False, \"Duplicates should not be sorted\"\nassert     is_sorted([2, 1]) == False, \"Order of numbers does not matter\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True, \"Wrong answer for list [1,2,3,4,5]\"\nassert     is_sorted([3,4,5,1,2]) == True, \"Wrong answer for list [3,4,5,1,2]\"\nassert     is_sorted([1,2,3,5,4]) == False, \"Wrong answer for list [1,2,3,5,4]\"\nassert     is_sorted([3,5,4,1,2]) == False, \"Wrong answer for list [3,5,4,1,2]\"\nassert     is_sorted([]) == True, \"Wrong answer for an empty list\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_sorted([1, 2, 3, 4]) == True\nassert     is_sorted([3, 2, 1, 4]) == True\nassert     is_sorted([3, 3, 3, 4]) == True\nassert     is_sorted([1, 2, 3, 4, 5]) == False\nassert     is_sorted([-3, -2, -1, -4]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1, 1]) == False\nassert     is_sorted([1, 2]) == True\nassert     is_sorted([1, 2, 2]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 3, 2]) == True\nassert     is_sorted([2, 1, 3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([5, 4, 3, 2, 1]) == True\nassert     is_sorted([1, 2, 4, 5]) == False\nassert     is_sorted([1, 1, 1, 1, 1, 1]) == False\nassert     is_sorted([]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 2, 3]) == False\nassert     is_sorted([1, 2, 3, 2]) == False\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nintersection((1, 3), (2, 4)) == \"YES\"\nassert \nintersection((1, 3), (2, 2)) == \"NO\"\nassert \nintersection((0, 9), (2, 8)) == \"NO\"\nassert \nintersection((3, 5), (3, 5)) == \"YES\"\nassert \nintersection((2, 3), (2, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\", \"Both intervals don't intersect\"\nassert     intersection((1, 3), (2, 3)) == \"YES\", \"Intersection is a subinterval\"\nassert     intersection((1, 3), (2, 2)) == \"NO\", \"Intersection is a single point\"\nassert     intersection((1, 3), (1, 2)) == \"NO\", \"Intersection is an empty interval\"\nassert     intersection((1, 3), (3, 3)) == \"YES\", \"Intersection is a point\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersection( (1, 3), (2, 4) ) == \"YES\"\nassert     intersection( (2, 4), (1, 3) ) == \"YES\"\nassert     intersection( (1, 3), (1, 3) ) == \"YES\"\nassert     intersection( (2, 4), (3, 4) ) == \"YES\"\nassert     intersection( (1, 3), (3, 4) ) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((2, 3), (2, 4)) == \"YES\"\nassert     intersection((2, 3), (3, 5)) == \"NO\"\nassert     intersection((5, 7), (2, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersection([(1, 3), (2, 4)], [(3, 4), (5, 6)]) == \"NO\"\nassert     intersection([(1, 3), (2, 4)], [(3, 4), (5, 7)]) == \"YES\"\nassert     intersection([(1, 3), (2, 4)], [(4, 5), (5, 6)]) == \"NO\"\nassert     intersection([(1, 3), (2, 4)], [(3, 6), (5, 6)]) == \"YES\"\nassert     intersection([(1, 3), (2, 4)], [(3, 5), (5, 6)]) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersection((1, 2), (1, 2)) == 'YES'\nassert     intersection((1, 2), (2, 3)) == 'NO'\nassert     intersection((1, 3), (2, 4)) == 'NO'\nassert     intersection((1, 3), (2, 2)) == 'NO'\nassert     intersection((1, 3), (1, 3)) == 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == 'NO'\nassert     intersection((1, 3), (2, 2)) == 'YES'\nassert     intersection((1, 3), (1, 3)) == 'YES'\nassert     intersection((1, 3), (3, 3)) == 'NO'\nassert     intersection((1, 3), (4, 4)) == 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersection((1, 2), (1, 3)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((2, 4), (3, 4)) == \"YES\"\nassert     intersection((2, 4), (4, 8)) == \"YES\"\nassert     intersection((2, 4), (5, 8)) == \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prod_signs([1, 2, 3, -4, 5, 6, -7, 8]) == \n    sum_mag_prod([1, 2, 3, -4, 5, 6, -7, 8]) ==\n    -1 * 7 * 4 * -3 * 2\n\nassert     prod_signs([0]) == 0\nassert     prod_signs([]) == None\nassert     prod_signs([-1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prod_signs([]) == None, \"Check the size of your empty array!\"\nassert     prod_signs([1, 2, -3, 4, -5]) == 5, \"Check the correctness of your code!\"\nassert     prod_signs([0, 1, 2, -3, 4, -5]) == 7, \"Check the correctness of your code!\"\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prod_signs([1, 2, 3]) == (-1)**3 * 3\nassert     prod_signs([2, -3, 1, 0, -4]) == (1)**5 * (-1)**0 * 2\n\n\ndef prod_signs_brute(arr):\n    \"\"\"\n    You are given an array arr of integers.\n    You need to return sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    result = 0\n    if arr == []:\n        return None\n    for elem in arr:\n        sign = -1 if elem < 0 else 1\n        result += abs(elem) * sign\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prod_signs([1, -3, 4, 5, -6, 7, 8, -9, 10]) ==  -10 * -72\nassert     prod_signs([1, -2, 4, 5, -6, 7, 8, -9, 10]) ==  -8 * -50\nassert     prod_signs([1, 2, 4, 5, -6, 7, 8, -9, 10]) ==  -16 * -90\nassert     prod_signs([1, 2, 4, 5, -6, 7, 8, 9, 10]) ==  10 * -100\nassert     prod_signs([]) ==     None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prod_signs([1, -3, 4, 5]) == -4 * 5\nassert     prod_signs([1, -3, 4, 5, 2]) == -1 * 5 * 2\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prod_signs([1, 2, 3, 4]) == 10\nassert     prod_signs([1, -2, 3, -4]) == 10\nassert     prod_signs([1, 2, -3, 4]) == 7\nassert     prod_signs([-1, 2, -3, 4]) == 7\nassert     prod_signs([1, -2, 3, -4]) == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     prod_signs([1, -2, 3, 4, -5]) == 15\nassert     prod_signs([1, 2, 3, 4, 5]) == 1\nassert     prod_signs([-1, 2, -3, 4, -5]) == 15\nassert     prod_signs([]) is None\nassert     prod_signs([2]) == 2\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]],2) == [1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]],2) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]],3) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]],4) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]],4) == [1,1,1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef minPath2(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     minPath([\n            [1, 3, 2],\n            [2, 1, 1],\n            [3, 2, 1],\n        ], 2) == [1, 2]\n\nassert minPath([\n            [1, 1, 2, 3, 1],\n            [3, 1, 3, 2, 1],\n            [2, 3, 1, 2, 1],\n            [3, 2, 2, 3, 2],\n        ], 2) == [1, 2]\n\nassert minPath([\n            [1, 1, 2, 3, 1],\n            [3, 1, 3, 2, 1],\n            [2, 3, 1, 2, 1],\n            [3, 2, 2, 3, 2],\n        ], 3) == [1, 2, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     minPath(grid, k) == [1, 2, 3]\nassert     minPath(grid2, k) == [2, 1]\nassert     minPath(grid3, k) == [1, 2]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     minPath([\n            [1, 2],\n            [3, 4]\n        ], 1) == [1, 2, 3, 4]\nassert     minPath([\n            [1, 2],\n            [2, 1]\n        ], 1) == [1, 2]\nassert     minPath([\n            [1, 2],\n            [2, 1],\n            [2, 2]\n        ], 2) == [1, 2, 2, 2]\nassert     minPath([\n            [1, 2],\n            [2, 1],\n            [2, 2],\n            [3, 2]\n        ], 2) == [1, 2, 2, 2, 3, 2]\nassert     minPath([\n            [1, 2],\n            [2, 1],\n            [2, 2],\n            [3, 2],\n            [4, 1],\n            [4, 3]\n        ], 3) == [1, 2, 2, 2, 3, 2, 4, 1, 3, 2]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minPath([[1, 3, 6, 9], [2, 4, 5, 8]], 4) == [1, 2, 3, 4]\nassert     minPath([[1, 3, 6, 9], [2, 4, 5, 8]], 3) == [1, 2, 3]\nassert     minPath([[1, 3, 6, 9], [2, 4, 5, 8]], 5) == [1, 2, 3, 4, 5]\nassert     minPath([[1, 3, 6, 9], [2, 4, 5, 8]], 6) == [1, 2, 3, 4, 5, 6]\nassert     minPath([[1, 3, 6, 9], [2, 4, 5, 8]], 7) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [1,3,7]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,3,9]\nassert     minPath([[1,2,3,4],[4,5,6,7],[7,8,9,10]], 3) == [1,2,7,8]\nassert     minPath([[1,2,3,4],[4,5,6,7],[7,8,9,10]], 4) == [1,2,4,6,10]\nassert     minPath([[1,2,3,4],[4,5,6,7],[7,8,9,10]], 5) == [1,2,3,4,6,7,8,9,10]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     minPath(\n    [\n        [1, 3, 1],\n        [1, 5, 1],\n        [4, 2, 1]\n    ], 4) == [1, 1, 1, 1]\n\nassert     minPath(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 4) == [1, 2, 3, 6]\n\nassert     minPath(\n    [\n        [1, 2, 1, 1, 1],\n        [1, 2, 1, 2, 1],\n        [1, 2, 1, 2, 1],\n        [1, 2, 1, 2, 1],\n        [1, 2, 1, 2, 1]\n    ], 3) == [1, 1, 2, 1, 2]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     tri(3) == [3, 1, 4, 8]\nassert     tri(4) == [4, 2, 3, 8]\nassert     tri(5) == [5, 3, 4, 1, 8]\nassert     tri(6) == [6, 3, 4, 1, 8, 13]\nassert     tri(7) == [7, 3, 4, 1, 8, 13, 21]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     tri(0) == []\nassert tri(2) == [1, 2]\nassert tri(3) == [1, 2, 3]\nassert tri(4) == [1, 2, 3, 5]\nassert tri(5) == [1, 2, 3, 5, 8]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 8\nassert     tri(3) == 8\nassert     tri(5) == 15\nassert     tri(1) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 3\nassert     tri(3) == 3\nassert     tri(4) == 3\nassert     tri(5) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 8\nassert     tri(3) == 8\nassert     tri(5) == 13\nassert     tri(1) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     tri(0) == [], \"tri(0) should be []\"\nassert     tri(1) == [3], \"tri(1) should be [3]\"\nassert     tri(2) == [3, 1 + (2 / 2)], \"tri(2) should be [3, 1 + (2 / 2)]\"\nassert     tri(4) == [3, 1 + (2 / 2), 1 + (2 / 2) + 1], \"tri(4) should be [3, 1 + (2 / 2), 1 + (2 / 2) + 1]\"\nassert     tri(5) == [3, 1 + (2 / 2), 1 + (2 / 2) + 1, 1 + (2 / 2) + 1 + (2 / 2), 1 + (2 / 2) + 1 + (2 / 2) + 1], \"tri(5) should be [3, 1 + (2 / 2), 1 + (2 / 2) + 1, 1 + (2 / 2) + 1 + (2 / 2), 1 + (2 / 2) + 1 + (2 / 2) + 1]\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 3\nassert     tri(3) == 8\nassert     tri(5) == 1"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     tri(1) == 3, \"tri(1) failed\"\nassert     tri(2) == 1 + 2 / 2, \"tri(2) failed\"\nassert     tri(3) == 3 + 1 + 2, \"tri(3) failed\"\nassert     tri(4) == 1 + 2 + 3 + 3, \"tri(4) failed\"\nassert     tri(5) == 2 + 3 + 3 + 4, \"tri(5) failed\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     digits(10) ==     2\nassert     digits(21) ==     6\nassert     digits(123) ==     6\nassert     digits(42) ==     0\nassert     digits(98) ==     8\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     digits(39) == 32\nassert digits(457) == 729\nassert digits(132189) == 0\nassert digits(8) == 0\nassert digits(22) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(3) == 2\nassert     digits(4) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     digits(24) == 1\nassert     digits(13) == 1\nassert     digits(12) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digits(101) == 1\nassert     digits(100) == 0\nassert     digits(111) == 3\nassert     digits(10) == 0\nassert     digits(7) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digits(234) == 234\nassert     digits(981) == 7\nassert     digits(5) == 0\nassert     digits(345) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_nested(\"\") == False, \"error\"\nassert     is_nested(\"[]\") == True, \"error\"\nassert     is_nested(\"[[]\") == True, \"error\"\nassert     is_nested(\"[[]()]\") == True, \"error\"\nassert     is_nested(\"[]()[]\") == True, \"error\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_nested(\"[[[[[[[[[]]]]]]]]]\") == True\nassert     is_nested(\"[]\") == True\nassert     is_nested(\"[[[[[[[[[]]]]]]]]\") == True\nassert     is_nested(\"[[[[[[[[[]]]]]]]]]\") == False\nassert     is_nested(\"[[[[[[[[[]]]]]]]]]][[[[[[[[[[]]]]]]]]]][[[[[[[[[[]]]]]]]]]\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_nested('[()]()') == True, 'Incorrect'\nassert     is_nested('[(])') == False, 'Incorrect'\nassert     is_nested('[()]()(()())') == True, 'Incorrect'\nassert     is_nested('((())())') == True, 'Incorrect'\nassert     is_nested('[([])(((())())())])') == True, 'Incorrect'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_nested('[[][][]') == True\nassert     is_nested('[[][][]'] == True\nassert     is_nested('[[]]') == True\nassert     is_nested('[[]') == False\nassert     is_nested('[[]][[]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_nested('') == True\nassert     is_nested('[()]') == True\nassert     is_nested('[]{}') == True\nassert     is_nested('{}()') == True\nassert     is_nested('[{()}]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_nested('[()]') == True\nassert     is_nested('[[()]]') == True\nassert     is_nested('[[(])]') == False\nassert     is_nested('[[()]]') == True\nassert     is_nested('[[[]]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_nested(\"[()]\") == True\nassert     is_nested(\"[(]\") == False\nassert     is_nested(\"\") == True\nassert     is_nested(\"[()]()[()]\") == True\nassert     is_nested(\"[()]\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_nested('[[][]') == False\nassert     is_nested('[[][[]') == True\nassert     is_nested('[[[]') == True\nassert     is_nested('[[[]]]') == True\nassert     is_nested('[[[[]]]][]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_nested(\"(())\") == True, \"ERROR\"\nassert     is_nested(\"(((())\") == False, \"ERROR\"\nassert     is_nested(\"()()\") == True, \"ERROR\"\nassert     is_nested(\"(()()\") == True, \"ERROR\"\nassert     is_nested(\"((()())\") == True, \"ERROR\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_nested(\"[()]\") == True, \"Error on Case #1\"\nassert     is_nested(\"[(])\") == False, \"Error on Case #2\"\nassert     is_nested(\"[()]()\") == True, \"Error on Case #3\"\nassert     is_nested(\"[(])()\") == False, \"Error on Case #4\"\nassert     is_nested(\"[()]()[]\") == True, \"Error on Case #5\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_squares([2,3,4,5,6,7,8,9]) == 552\nassert     sum_squares([1,1,1,1]) == 1\nassert     sum_squares([-1,1,1,1]) == 0\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([4, 2, -3, -1]) == 29, \"sum_squares([4, 2, -3, -1]) == 29 failed\"\nassert     sum_squares([4, 4, -3, -1]) == 32, \"sum_squares([4, 4, -3, -1]) == 32 failed\"\nassert     sum_squares([4, 2, -3, -1, 2]) == 49, \"sum_squares([4, 2, -3, -1, 2]) == 49 failed\"\nassert     sum_squares([4, 2, -3, -1, 2, 5]) == 89, \"sum_squares([4, 2, -3, -1, 2, 5]) == 89 failed\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([4, 5, 1, -3, 2]) == 101\nassert     sum_squares([-5, 3, -4, 2]) == 116\nassert     sum_squares([-1.1, 2, 2, -5.1]) == 116\nassert     sum_squares([-1.1, 2.5, 2, -5.1]) == 113\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 30, \"1\"\nassert     sum_squares([0, 1, 2, 3]) == 10, \"2\"\nassert     sum_squares([-1, 1, 2, 3]) == 9, \"3\"\nassert     sum_squares([1, 2, -3]) == 7, \"4\"\nassert     sum_squares([]) == 0, \"5\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 81\nassert     sum_squares([-1, -2, -3, -4]) == 256\nassert     sum_squares([0]) == 0\nassert     sum_squares([1, 2, 3, 4, 5]) == 55\nassert     sum_squares([2, 4, 6, 8, 10]) == 55\nprint(\"Correct sum_squares\")\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_squares([10, 2, 4]) == 91\nassert     sum_squares([5, 6, 7]) == 36\nassert     sum_squares([]) == 0\n\nprint(\"all tests passed\")\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('s') == False, 'incorrect'\nassert     check_if_last_char_is_a_letter('s.') == True, 'incorrect'\nassert     check_if_last_char_is_a_letter('s..') == False, 'incorrect'\nassert     check_if_last_char_is_a_letter('.s') == False, 'incorrect'\nassert     check_if_last_char_is_a_letter('...') == True, 'incorrect'\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter(\"hello \") == False\nassert     check_if_last_char_is_a_letter(\"hello\") == False\nassert     check_if_last_char_is_a_letter(\"hello world\") == True\nassert     check_if_last_char_is_a_letter(\"my last char is z\") == True\nassert     check_if_last_char_is_a_letter(\"\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(\"string1\") == False, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"sting\") == False, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"string\") == True, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"st\") == False, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"tring\") == False, \"Wrong output\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == False, \"Wrong result\"\nassert     check_if_last_char_is_a_letter('ab abc') == False, \"Wrong result\"\nassert     check_if_last_char_is_a_letter('abc abc') == False, \"Wrong result\"\nassert     check_if_last_char_is_a_letter('abc abc b') == False, \"Wrong result\"\nassert     check_if_last_char_is_a_letter('ab abc b') == True, \"Wrong result\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == True\nassert     check_if_last_char_is_a_letter('ab ac') == False\nassert     check_if_last_char_is_a_letter('ab_ac') == False\nassert     check_if_last_char_is_a_letter('abc ') == True\nassert     check_if_last_char_is_a_letter('abcXY') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"word\") == True, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"wor\") == True, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"worl\") == True, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"word1\") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"word.\") == False, \"Fails\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('abcde') == True, \"Wrong answer\"\nassert     check_if_last_char_is_a_letter('a1c3d4') == False, \"Wrong answer\"\nassert     check_if_last_char_is_a_letter('abcde 1') == True, \"Wrong answer\"\nassert     check_if_last_char_is_a_letter('Hello world') == False, \"Wrong answer\"\nassert     check_if_last_char_is_a_letter('Hint: Use \\b operator') == False, \"Wrong answer\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"abdE12\") == True\nassert     check_if_last_char_is_a_letter(\"abdE12!\") == True\nassert     check_if_last_char_is_a_letter(\"abdE1\") == False\nassert     check_if_last_char_is_a_letter(\"123!@\") == False\nassert     check_if_last_char_is_a_letter(\"0A23\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"123\") == False\nassert     check_if_last_char_is_a_letter(\"4-2-\") == True\nassert     check_if_last_char_is_a_letter(\"6_9_3\") == False\nassert     check_if_last_char_is_a_letter(\"5\") == False\nassert     check_if_last_char_is_a_letter(\"-\") == False\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     can_arrange([1, 2, 3, 4]) == 2\nassert     can_arrange([1, 3, 2, 4]) == 2\nassert     can_arrange([1, 2, 4, 3]) == -1\nassert     can_arrange([1, 2, 3, 6]) == 2\nassert     can_arrange([1, 3, 2, 6]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     can_arrange([3, 4, 1, 6, 2]) == 3\nassert     can_arrange([1, 3, 5, 4]) == -1\nassert     can_arrange([3, 5, 1, 2]) == 2\nassert     can_arrange([3, 5, 1, 2, 6]) == 3\nassert     can_arrange([1, 2, 3]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     can_arrange([4, 6, 2, 9, 1, 3, 7, 8, 10]) == 5\nassert     can_arrange([4, 6, 2, 9, 1, 3, 7, 8, 10, 5, 10]) == 6\nassert     can_arrange([4, 6, 2, 9, 1, 3, 7, 8, 10, 5, 1]) == 8\nassert     can_arrange([4, 6, 2, 9, 1, 3, 7, 8, 10, 5, 8]) == 9\nassert     can_arrange([4, 6, 2, 9, 1, 3, 7, 8, 10, 5, 8, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     can_arrange([0, 1, 2, 3, 4, 5, 7, 8]) == 7\nassert     can_arrange([0, 1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert     can_arrange([2, 3, 4, 5, 6, 7, 8, 9]) == -1\nassert     can_arrange([]) == -1\nassert     can_arrange([0]) == -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([3, 2, 1]) == 1\nassert     can_arrange([2, 1, 3]) == 1\nassert     can_arrange([1, 3, 2]) == 1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     can_arrange([3,4,1,5]) == 2\nassert     can_arrange([1,2,3]) == -1\nassert     can_arrange([1,2,3,4]) == 0\nassert     can_arrange([2,1,5,7]) == 2\nassert     can_arrange([3,3,4,4]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     can_arrange([9, 4, 1, 7, 2]) == 2\nassert     can_arrange([4, 6, 7, 1, 3]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([1]) == 0\nassert     can_arrange([1, 2]) == 1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     can_arrange([1,3,4,2]) == 2\nassert     can_arrange([1,3,5,2]) == -1\nassert     can_arrange([5,2,3,4,1]) == 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     can_arrange([1, 2, 2, 3, 4]) == 3\nassert     can_arrange([5, 3, 1, 2, 2, 4, 6]) == 2\nassert     can_arrange([6, 5, 4, 3, 2, 1, 2]) == -1\nassert     can_arrange([1]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     can_arrange([1, 2, 3, 3]) == 3, 'incorrect'\nassert     can_arrange([1, 2, 3, 3, 4]) == -1, 'incorrect'\nassert     can_arrange([1, 2, 3, 3, 1]) == 4, 'incorrect'\nassert     can_arrange([1, 2, 3, 3, 4, 2]) == 3, 'incorrect'\nassert     can_arrange([1, 1, 3, 3, 4, 2]) == 3, 'incorrect'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, -3, 5, 7]) == (None, None)\nassert     largest_smallest_integers([-4, -3, -2, -1, 0, 1]) == (-1, 1)\nassert     largest_smallest_integers([8, 9, -5, -7, 1, 10, 6, -2]) == (9, 1)\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (largest_smallest_integers([1, 2, -3, 5, 0, -5, -3]) == (None, None)), \"Wrong result for the example input!\"\nassert (largest_smallest_integers([42, -1, -2, -3, -5, 0, 2, 3]) == (-1, 2)), \"Wrong result for the example input!\"\nassert (largest_smallest_integers([-3, -5, -2, 0, -1, -1, 0, 1, 2]) == (-5, 1)), \"Wrong result for the example input!\"\nassert (largest_smallest_integers([0]) == (None, None)), \"Wrong result for the example input!\"\nassert (largest_smallest_integers([42]) == (42, 42)), \"Wrong result for the example input!\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5]) == (None, None)\nassert     largest_smallest_integers([-1, -2, 3, -4, 5]) == (-1, 5)\nassert     largest_smallest_integers([-2, -2, -2, -4, 5]) == (-2, -2)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (None, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8]) == (None, 7)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1,2,3]) == (None, None)\nassert     largest_smallest_integers([-1,0,1,2,3]) == (-1, 1)\nassert     largest_smallest_integers([0,-1,1,2,3]) == (0, 1)\nassert     largest_smallest_integers([0,1,2,3,4]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4]) == (None, 1)\nassert     largest_smallest_integers([1, -2, 3, 0]) == (-2, None)\nassert     largest_smallest_integers([1, 2, 0, 4]) == (None, 1)\nassert     largest_smallest_integers([-2, -1, 0, -3]) == (-3, 0)\nassert     largest_smallest_integers([0, 0, 0, 0]) == (0, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3]) == (None, None)\nassert     largest_smallest_integers([-1, -2, -3]) == (-1, 1)\nassert     largest_smallest_integers([-3, -2, -1]) == (-1, 1)\nassert     largest_smallest_integers([-3, -2, 1]) == (-3, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([0, -1, 3, 1, 2]) == (None, 1)\nassert     largest_smallest_integers([0, -1, 3, 1, -2]) == (None, 1)\nassert     largest_smallest_integers([0, -1, -3, 1, 2]) == (None, 1)\nassert     largest_smallest_integers([0, 1, 3, 1, 2]) == (None, 1)\nassert     largest_smallest_integers([0, -3, 3, 1, 2]) == (-3, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-2, -1, 0, 1, 2, 3]) == (-1, 3)\nassert     largest_smallest_integers([0, 0, 0, 0, 0]) == (0, None)\nassert     largest_smallest_integers([-1, -3, -2, -5, -4]) == (-1, -5)\nassert     largest_smallest_integers([5, 5, 5, 5, 5]) == (5, 5)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (compare_one(2, 2.0) == 2.0)\nassert     (compare_one(2.0, 2) == 2.0)\nassert     (compare_one(\"2\", 2) == None)\nassert     (compare_one(\"2.0\", \"2\") == None)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    compare_one(1, 1) == 1\n    compare_one(1.1, 1) == 1.1\n    compare_one('1', '1') == 1\n    compare_one(1, '1') == None\n    compare_one('1', '1.1') == None\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two variables, and returns the larger one. If both are\n    the same, it should return None.\n    Note: If two variables are strings, they are assumed to be numbers and will be compared\n    by the function compare_one. If it is a string representing a real number, it will be\n    comapred by compare_one\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one('1', 1) == None\nassert     compare_one(1, '1') == None\nassert     compare_one(1.1, 1.1) == 1.1\nassert     compare_one(1.1, '1.1') == 1.1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1, 2) == 2\nassert     compare_one(\"1\", 2) == 2.0\nassert     compare_one(\"1\", \"2\") == 2.0\nassert     compare_one(\"1\", \"1\") == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1.5, 2.3) == 2.3\nassert     compare_one(1, 2) == 1\nassert     compare_one(\"10\", \"2\") == \"10\"\nassert     compare_one(\"10\", \"2\") == \"2\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the second largest variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (compare_one(3,3) == 3)\nassert     (compare_one(3.2,3) == 3)\nassert     (compare_one('3',3) == 3)\nassert     (compare_one(3,3.2) == 3.2)\nassert     (compare_one('3.2',3) == 3.2)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.0, 1) == 1.0\nassert     compare_one(\"1.0\", \"1\") == 1.0\nassert     compare_one(\"1\", \"1.0\") == 1.0\nassert     compare_one(\"1.0\", \"1\") == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare_one(1, 2) ==     2\nassert     compare_one(1, 1) ==     1\nassert     compare_one(2, 3) ==     3\nassert     compare_one(1.5, 2.5) ==    2.5\nassert     compare_one(\"2\", \"2\") ==     \"2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(14) == False\nassert     is_equal_to_sum_even(6) == True\n\nprint('is_equal_to_sum_even() is OK')\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(9) == True\nassert     is_equal_to_sum_even(13) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(12)\nassert     is_equal_to_sum_even(14)\nassert     not is_equal_to_sum_even(15)\nassert     is_equal_to_sum_even(4)\nassert     is_equal_to_sum_even(8)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(44) == True\nassert     is_equal_to_sum_even(84) == False\nassert     is_equal_to_sum_even(96) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(2.5) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(52) == False\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(8) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(36) == False, \"It is a perfect number\"\nassert     is_equal_to_sum_even(12) == True, \"It is a perfect number\"\nassert     is_equal_to_sum_even(30) == False, \"It is a perfect number\"\nassert     is_equal_to_sum_even(20) == True, \"It is a perfect number\"\nassert     is_equal_to_sum_even(80) == False, \"It is a perfect number\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(8) == True, \"is_equal_to_sum_even(8) returns \" + str(is_equal_to_sum_even(8))\nassert     is_equal_to_sum_even(12) == True, \"is_equal_to_sum_even(12) returns \" + str(is_equal_to_sum_even(12))\nassert     is_equal_to_sum_even(3) == False, \"is_equal_to_sum_even(3) returns \" + str(is_equal_to_sum_even(3))\nassert     is_equal_to_sum_even(9) == False, \"is_equal_to_sum_even(9) returns \" + str(is_equal_to_sum_even(9))\nassert     is_equal_to_sum_even(10) == False, \"is_equal_to_sum_even(10) returns \" + str(is_equal_to_sum_even(10))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(20) == True, \"This should work!\"\nassert     is_equal_to_sum_even(15) == False, \"This should also work!\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert _____\nassert _____\nassert _____\nassert _____\nassert _____\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert _____, 'Passei um n\u00famero negativo'\nassert _____, 'O retorno deveria ser 0'\nassert _____, 'Passei um n\u00famero inteiro'\nassert _____, 'O retorno deveria ser 0'\nassert _____, 'Passei um n\u00famero maior que 10'\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test the special_factorial function\n    assert special_factorial(2) == 2\n    assert special_factorial(3) == 6\n    assert special_factorial(4) == 24\n    "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fix_spaces('a b  c d') == 'a_b__c_d'\nassert     fix_spaces('a   b  c  d') == 'a___b__c___d'\nassert     fix_spaces('a   b   c   d') == 'a___b___c___d'\nassert     fix_spaces('a b   c d') == 'a_b__c_d'\nassert     fix_spaces('a   b   c   d') == 'a___b___c___d'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"i love you\") == \"i_love_you\"\nassert     fix_spaces(\"   this is a test string   \") == \"this_is_a_test_string\"\nassert     fix_spaces(\"i   love    you   \") == \"i-love-you-\"\nassert     fix_spaces(\"i   love   you   \") == \"i_love-you\"\nassert     fix_spaces(\"i   love   you   \") == \"i_love_you\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    text = \"This is a test of the emergency text system.\"\n    print(fix_spaces(text)"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fix_spaces('Hi') == 'Hi'\nassert     fix_spaces('Hi    there') == 'Hi-there'\nassert     fix_spaces('Hi     there') == 'Hi-there'\nassert     fix_spaces('Hi      there') == 'Hi-there'\nassert     fix_spaces('    Hi there     ') == '-Hi there'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n\ndef generate_url(url):\n    \"\"\"\n    Given a string url, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fix_spaces(\"The cat in the hat\") == \"The_cat_in_the_hat\"\nassert     fix_spaces(\"The    cat   in the   hat\") == \"The___cat___in_the___hat\"\nassert     fix_spaces(\"The cat in the   hat\") == \"The_cat_in_the_hat\"\nassert     fix_spaces(\"The cat in the   hat \") == \"The_cat_in_the_hat\"\nassert     fix_spaces(\"The cat in the hat \") == \"The_cat_in_the_hat\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     file_name_check('file.txt') == 'Yes','should return \"Yes\" if the file\\'s name is valid'\nassert     file_name_check('dont_think_this_file_is_real.exe') == 'Yes','should return \"Yes\" if the file\\'s name is valid'\nassert     file_name_check('dont_think_this_file_is_real.dll') == 'No','should return \"No\" if the file\\'s name is invalid'\nassert     file_name_check('file.exe') == 'No','should return \"No\" if the file\\'s name is invalid'\nassert     file_name_check('file.tM') == 'No','should return \"No\" if the file\\'s name is invalid'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     file_name_check('test_file_name_check.py') == 'Yes'\nassert     file_name_check('0test_file_name_check.py') == 'Yes'\nassert     file_name_check('test_file_name_check.exe') == 'No'\nassert     file_name_check('test_file_name_check.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     file_name_check('abc.txt') == 'Yes', 'check your code'\nassert     file_name_check('abc') == 'Yes', 'check your code'\nassert     file_name_check('abc123.txt') == 'Yes', 'check your code'\nassert     file_name_check('abc.exe') == 'Yes', 'check your code'\nassert     file_name_check('abc.dll') == 'Yes', 'check your code'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     file_name_check('python.exe') == 'Yes', 'Wrong answer'\nassert     file_name_check('python') == 'No', 'Wrong answer'\nassert     file_name_check('python.exe') == 'No', 'Wrong answer'\nassert     file_name_check('python.dll') == 'Yes', 'Wrong answer'\nassert     file_name_check('python.txt') == 'No', 'Wrong answer'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     file_name_check('123.txt') == 'Yes' \nassert     file_name_check('abc.exe') == 'Yes'\nassert     file_name_check('abc.dll') == 'Yes'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.txt.') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.exe.dll') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.exe.dll') == 'Yes'\nassert     file_name_check('abc.exe.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     file_name_check(\"numbers.txt\") == 'Yes'\nassert     file_name_check(\"numbers.exe\") == 'No'\nassert     file_name_check(\"numbers.\") == 'No'\nassert     file_name_check(\"numbers.\") == 'Yes'\nassert     file_name_check(\"numbers..txt\") == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     file_name_check('abc.txt') == 'No'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.dll') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.jpg') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     file_name_check('9.exe') == 'No', 'Wrong answer'\nassert     file_name_check('9.dll') == 'No', 'Wrong answer'\nassert     file_name_check('a.exe') == 'No', 'Wrong answer'\nassert     file_name_check('aa.txt') == 'No', 'Wrong answer'\nassert     file_name_check('9.txt') == 'Yes', 'Wrong answer'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     file_name_check('a') == 'No'\nassert     file_name_check('a.txt') == 'Yes'\nassert     file_name_check('file.txt') == 'Yes'\nassert     file_name_check('a123.txt') == 'No'\nassert     file_name_check('a.exe') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n    "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([1,5,3,8,4,4,5,0,1,8]) == 285\nassert     sum_squares([1,3,5,4,1]) == 13\nassert     sum_squares([3,4,3,2,6,7]) == 43\nprint(\"sum_squares check passed.\")\n\ndef sum_cubes(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([3, 6, 4, 2, 1, 5, 6]) == 91\nassert     sum_squares([3, 6, 4, 2, 1, 5, 6, 2, 3]) == 150\nassert     sum_squares([3, 6, 4, 2, 1, 5, 6, 2, 3, 1]) == 150\nassert     sum_squares([3, 6, 4, 2, 1, 5, 6, 2, 3, 1, 5, 6, 2, 3, 1, 2]) == 300\nassert     sum_squares([3, 6, 4, 2, 1, 5, 6, 2, 3, 1, 5, 6, 2, 3, 1, 2, 2]) == 300\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n\n\ndef remove_duplicates(lst):\n    \"\"\"\"\n    This function will take a list as input. The function shall remove all duplicates from the list. The function shall then return the \n    list with all duplicates removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sum_squares([0,1,2,3,4,5]) == 0\nassert     sum_squares([0,3,4,5,6,7,8,9]) == 65\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12]) == 763\n\ndef num_digits(n):\n    \"\"\"\"\n    This function will take an integer. The function shall return the number of digits in the integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert len(words_in_sentence('We are really pleased to meet you in our city')) == 4\n    assert words_in_sentence('This picture is an oil on canvas '\n                              'painting by Danish artist Anna '\n                              'Petersen between 1845 and 1910 year') == 4\n    assert words_in_sentence('5 plus 6 is') == 3\n    "
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_in_sentence('This is a sentence') == 'This is a sentence', \"Wrong result for 'This is a sentence'\"\nassert     words_in_sentence('I love dogs') == 'dogs love', \"Wrong result for 'I love dogs'\"\nassert     words_in_sentence('I like cats more than dogs') == 'cats I like more dogs', \"Wrong result for 'I like cats more than dogs'\"\nassert     words_in_sentence('I am') == 'I am', \"Wrong result for 'I am'\"\nassert     words_in_sentence('I have no money') == 'no money I have', \"Wrong result for 'I have no money'\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_in_sentence('I am happy') == 'happy','should return happy'\nassert     words_in_sentence('I am here') == 'here','should return here'\nassert     words_in_sentence('I am') == 'I','should return I'\nassert     words_in_sentence('am here') == 'here','should return here'\nassert     words_in_sentence('I am here') == 'I here','should return I here'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"Let's learn Python\") == \"Let's learn Python\"\nassert     words_in_sentence(\"This is my first program\") == \"This is my first program\"\nassert     words_in_sentence(\"I will have only'and only'one time\") == \"I will have only'and only'one time\"\nassert     words_in_sentence(\"I have heard about the famous Python\") == \"I have heard about the famous Python\"\nassert     words_in_sentence(\"The 'programming is not a race' said Jerry\") == \"The 'programming is not a race' said Jerry\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     words_in_sentence('i like apples') == 'i like apple'\nassert     words_in_sentence('i like apples and oranges') == 'i like apple and orange'\nassert     words_in_sentence('hello i like apples') == 'hello i like apple"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"We are equal no more and no less\") == \"We equal are more no less\"\nassert     words_in_sentence(\"We are not equal no more and no less\") == \"We equal are more no less\"\nassert     words_in_sentence(\"are we equal no more and no less\") == \"are we equal are more no less\"\n\nprint(\"OK\")\n\n\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"We are having a party\") == \"Party\"\nassert     words_in_sentence(\"You must construct a program\") == \"Program\"\nassert     words_in_sentence(\"Tell me what is the first name of the man who invented Python\") == \"Man\"\nassert     words_in_sentence(\"This is not the first line of code\") == \"This\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_in_sentence('') == ''\nassert     words_in_sentence('If you can keep your head when all about you are losing theirs and blaming it on you,') == 'If you can keep your head when all about you are losing theirs and blaming it on you,'\nassert     words_in_sentence('If you can trust yourself when all men doubt you, but make allowance for their doubting too;') == 'If you can trust yourself when all men doubt you, but make allowance for their doubting too,'\nassert     words_in_sentence('But make allowance for their doubting too;') == 'But make allowance for their doubting too'\nassert     words_in_sentence('If you can dream or be dreamy, you have the talent of programming.') == 'If you can dream or be dreamy, you have the talent of programming.'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"A prime number is a natural number greater than 1 that has no positive factors other than 1 and itself.\") == \"prime number is\"\nassert     words_in_sentence(\"2 is a prime number because it's only divisble by 1 and 2.\") == \"is a\"\nassert     words_in_sentence(\"3 is a prime number because it's only divisble by 1 and 3.\") == \"is a\"\nassert     words_in_sentence(\"5 is a prime number because it's only divisble by 1 and 5.\") == \"is a\"\nassert     words_in_sentence(\"13 is a prime number because it's only divisble by 1, 3 and 13.\") == \"is a\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"I love Python\") == \"love Python\"\nassert words_in_sentence(\"My uncle is kind\") == \"kind\"\nassert words_in_sentence(\"I bought a book from the English language\") == \"English language\"\nassert words_in_sentence(\"I bought a book from the country\") == \"country\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     simplify(\"5/25\", \"3/4\") == True\nassert     simplify(\"4/6\", \"1/3\") == True\nassert     simplify(\"4/6\", \"5/25\") == False\nassert     simplify(\"3/5\", \"2/5\") == False\nassert     simplify(\"-3/4\", \"3/4\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     simplify(\"2/3\", \"1/3\") == False\nassert     simplify(\"2/3\", \"2/3\") == True\nassert     simplify(\"2/3\", \"1/2\") == True\nassert     simplify(\"2/3\", \"1/1\") == True\nassert     simplify(\"1/2\", \"2/3\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (simplify('1/3', '1/2')) == False\nassert     (simplify('2/3', '1/2')) == False\nassert     (simplify('1/3', '2')) == False\nassert     (simplify('1/6', '1/3')) == False\nassert     (simplify('1/6', '4/3')) == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     simplify(x=\"2/4\", n=\"2\") == False\nassert     simplify(x=\"1/3\", n=\"2\") == True\nassert     simplify(x=\"1/3\", n=\"3\") == False\nassert     simplify(x=\"1/3\", n=\"1/2\") == False\nassert     simplify(x=\"1/3\", n=\"1/3\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (simplify(\"1/2\", \"3/4\") == True)\nassert     (simplify(\"4/4\", \"1/4\") == False)\nassert     (simplify(\"2/4\", \"2/4\") == True)\nassert     (simplify(\"-1/5\", \"2/5\") == False)\nassert     (simplify(\"1/4\", \"3/4\") == False)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     simplify('1/3', '1/3') == False\nassert     simplify('1/3', '3/1') == True\nassert     simplify('1/3', '5/3') == True\nassert     simplify('1/3', '1/2') == False\nassert     simplify('1/3', '1/5') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef test_simplify_function():\n    assert simplify('1/2', '1/4') == False\n    assert simplify('1/3', '1/3') == True\n    assert simplify('1/2', '1/3') == False\n    "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     simplify(\"4/5\", \"1/5\") is False\nassert     simplify(\"5/4\", \"1/4\") is True\nassert     simplify(\"4/5\", \"4/5\") is True\nassert     simplify(\"3/4\", \"1/4\") is False\nassert     simplify(\"0/3\", \"0/5\") is False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     simplify(\"2/4\", \"1/2\") == False, \"2/4 should not be simplified to 1/4\"\nassert     simplify(\"1/2\", \"3/4\") == True, \"1/2 should be simplified to 3/4\"\nassert     simplify(\"1/2\", \"1/2\") == True, \"1/2 should be simplified to 1/2\"\nassert     simplify(\"1/2\", \"1/4\") == False, \"1/2 should not be simplified to 1/4\"\nprint('simplify() test cases completed.')\n\n\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef digits_sum(n):\n    \"\"\"\n    Return sum of digits of the given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nprint('OK'"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef are_files_equal(file1, file2):\n    \"\"\"\n    Write a function which takes 2 filenames as input and\n    returns True if the contents of the files is equal,\n    False otherwise.\n    Note: files are assumed to contain ASCII text only.\n    \"\"\"\n    pass\n\n\ndef are_files_equal(file1, file2):\n    \"\"\"\n    Write a function which takes 2 filenames as input and\n    returns True if the contents of the files is equal,\n    False otherwise.\n    Note: files are assumed to contain ASCII text only.\n    \"\"\"\n    pass\n\n\ndef are_files_equal(file1, file2):\n    \"\"\"\n    Write a function which takes 2 filenames as input and\n    returns True if the contents of the files is equal,\n    False otherwise.\n    Note: files are assumed to contain ASCII text only.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     order_by_points([1, 9, 8, 2, 3, 7, 6, 4, 5, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([5, 2, 3, 4, 1, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([5, 1, 3, 4, 6, 2, 8, 9, 7, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([0, 9, 8, 2, 3, 7, 6, 4, 5, 1]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([5, 1, 3, 4, 6, 2, 8, 9, 7, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef test_order_by_points():\n    assert \n\n\ndef random_string(n):\n    \"\"\"\n    Generate a string with length n with random symbols.\n    \"\"\"\n    return \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     order_by_points([56, 79, 89, 100, 54, 89, 0, 1, 3, 56, 598, 789, 1, 10]) == [0, 1, 1, 3, 56, 56, 54, 56, 79, 89, 89, 100, 98, 789]\nassert     order_by_points([3, 5, 7, 1, 9, 8, 7, 5, 3, 2, 1, 5, 7, 8, 9, 1, 2, 9, 9, 9, 9, 9, 8, 1, 1, 1, 1, 1, 1]) == [1, 1, 2, 2, 3, 3, 3, 5, 5, 5, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]\n\nprint('All tests passed.')"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     order_by_points([1, 5, 12, 18, 22]) == [18, 22, 12, 1, 5]\nassert     order_by_points([12, 18, 22, 1, 5]) == [18, 22, 12, 1, 5]\nassert     order_by_points([12, 1, 18, 22, 5]) == [18, 22, 12, 1, 5]\nassert     order_by_points([12, 1, 5, 18, 22]) == [18, 22, 12, 1, 5]\nassert     order_by_points([12, 1, 22, 5, 18]) == [18, 22, 12, 1, 5]\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef specialFilter1(nums):\n    \"\"\"\n    \"\"\"\n    pass\n\ndef specialFilter2(nums):\n    \"\"\"\n    \"\"\"\n    pass\n\ndef specialFilter3(nums):\n    \"\"\"\n    \"\"\"\n    pass\n\ndef specialFilter4(nums):\n    \"\"\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 2\nassert     specialFilter([1, 3, 5, 7, 10]) == 0\nassert     specialFilter([1, 3, 5, 7, 11]) == 0\nassert     specialFilter([1, 3, 5, 7, 21]) == 1\nassert     specialFilter([1, 3, 5, 7, 22]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     specialFilter([123,1234,1235,1236,13,14]) == 1\nassert     specialFilter([12,23,14,25,345,12,10,1,3]) == 4\n\nprint(\"Test 1: \\n{}\".format(specialFilter([123,1234,1235,1236,13,14])))\nprint(\"Test 2: \\n{}\".format(specialFilter([12,23,14,25,345,12,10,1,3])))\n\nprint('\\n# Done!'"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     specialFilter([12, 2, 2, 1, 5, 8, 7, 6, 2, 4, 3]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 7, 9, 11, 20, 12]) == 8\nassert     specialFilter([2, 3, 1, 4, 5]) == 0\nassert     specialFilter([2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\nassert     specialFilter([2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, 'incorrect result'\nassert     specialFilter([12, 15, 30, 45, 55, 59, 63]) == 0, 'incorrect result'\nassert     specialFilter([12, 13, 30, 45, 55, 59, 63]) == 2, 'incorrect result'\nassert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 5, 'incorrect result'\n\nprint('Congratulations, you have completed your first assignment')"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 11, 32, 5, 50, 101, 10]) == 4\nassert     specialFilter([1, 3, 5, 7, 9]) == 2\nassert     specialFilter([1, 3, 5, 7, 9, 11]) == 0\nassert     specialFilter([1, 3, 5, 7, 9, 101]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 111]) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n    (get_max_triples(10) == 55)\n    \n    "
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 0\nassert     get_max_triples(5) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\nassert     get_max_triples(100) == 3172\nassert     get_max_triples(1) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 3\nassert     get_max_triples(6) == 1\nassert     get_max_triples(10) == 9\nassert     get_max_triples(23) == 22\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Get the input.\n    n = int(input())\n\n    # Get the result.\n    res = get_max_triples(n)\n\n    # Print the result.\n    print(res)"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_max_triples(0) == 0\nassert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus',), 'test failed'\nassert     bf('Earth', 'Neptune') == ('Earth', 'Neptune'), 'test failed'\nassert     bf('Earth', 'Moon') == ('Earth',), 'test failed'\nassert     bf('Neptune', 'Venus') == (), 'test failed'\nassert     bf('Earth', 'Earth') == (), 'test failed'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Earth') == ('Earth',)\nassert     bf('Venus', 'Mercury') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Uranus') == ('Uranus', 'Neptune', 'Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     bf('Uranus','Neptune') == ('Uranus','Neptune'), \\\n        'Expected Uranus and Neptune but got {} and {}'.format(bf('Uranus','Neptune'), \\\n                                                               (bf('Uranus','Neptune')))\nassert     bf('Earth','Venus') == ('Earth','Venus'), \\\n        'Expected Earth and Venus but got {} and {}'.format(bf('Earth','Venus'), \\\n                                                            bf('Earth','Venus'))\nassert     bf('Earth','Mars') == ('Earth','Mars'), \\\n        'Expected Earth and Mars but got {} and {}'.format(bf('Earth','Mars'), \\\n                                                            bf('Earth','Mars'))\nassert     bf('Earth','Mercury') == ('Earth','Mercury'), \\\n        'Expected Earth and Mercury but got {} and {}'.format(bf('Earth','Mercury'), \\\n                                                               bf('Earth','Mercury'))\nassert     bf('Earth','Jupiter') == ('Earth','Jupiter'), \\\n        'Expected Earth and Jupiter but got {} and {}'.format(bf('Earth','Jupiter'), \\\n                                                               bf('Earth','Jupiter'))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Venus', 'Mercury') == ('Mercury', 'Venus')\nassert     bf('Mercury', 'Moon') == ('Moon', 'Mercury')\nassert     bf('Venus', 'Moon') == ('Moon', 'Venus')\nassert     bf('Mercury', 'Mars') == ('Mars', 'Mercury')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     bf('Neptune', 'Mars') == ('Neptune', 'Uranus', 'Saturn', 'Jupiter', 'Earth', 'Mercury', 'Venus')\nassert     bf('Venus', 'Neptune') == ('Jupiter', 'Saturn', 'Uranus', 'Earth', 'Venus')\nassert     bf('Earth', 'Earth') == ()\nassert     bf('Earth', 'Jupiter') == ('Earth', 'Mercury', 'Venus')\nassert     bf('Earth', 'Venus') == ('Venus', 'Mercury', 'Jupiter')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Earth') == ('Venus', 'Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mercury') == ('Venus',)\nassert     bf('Jupiter', 'Mercury') == ()\nassert     bf('Earth', 'Uranus') == ('Earth', 'Jupiter', 'Saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     bf(\"Mercury\", \"Neptune\") == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\nassert     bf(\"Earth\", \"Jupiter\") == ('Saturn', 'Uranus', 'Neptune')\nassert     bf(\"Earth\", \"Pluto\") == tuple()\n\nprint(\"Done! Time to check it!\")"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars') \nassert     bf('Mars', 'Earth') == ('Earth',)\nassert     bf('Neptune', 'Earth') == ()\nassert     bf('Saturn', 'Neptune') == ('Saturn',)\nassert     bf('Venus', 'Earth') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     bf('Earth', 'Neptune') == ('Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Uranus') == ('Earth', 'Mars')\nassert     bf('Mercury', 'Neptune') == ('Venus', 'Mercury', 'Earth', 'Mars')\nassert     bf('Venus', 'Neptune') == ('Venus', 'Earth', 'Mars')\nassert     bf('Jupiter', 'Uranus') == ('Saturn', 'Jupiter', 'Uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     bf('Earth', 'Mars') == ('Jupiter', 'Neptune')\nassert     bf('Earth', 'Venus') == ('Mercury', 'Uranus')\nassert     bf('Earth', 'Venus') == ('Mercury', 'Uranus')\nassert     bf('Mars', 'Venus') == ('Jupiter', 'Uranus')\nassert     bf('Earth', 'Mars') == ('Jupiter', 'Neptune')\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([\"a\", \"d\"]) == [\"a\", \"d\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"abcd\"]) == [\"ab\", \"abcd\"]\nassert     sorted_list_sum([\"abc\", \"abd\", \"abcd\"]) == [\"abc\", \"abd\", \"abcd\"]\nassert     sorted_list_sum([\"abc\", \"ab\", \"abcd\"]) == [\"ab\", \"abc\", \"abcd\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\"f\", \"w\", \"o\", \"w\", \"t\"]) == [\"f\", \"w\", \"o\", \"t\"], \"Test #1: Failed\"\nassert     sorted_list_sum([\"f\", \"w\", \"w\", \"t\"]) == [\"f\", \"w\", \"w\", \"t\"], \"Test #2: Failed\"\nassert     sorted_list_sum([\"f\", \"f\", \"f\", \"w\", \"t\"]) == [\"f\", \"f\", \"f\", \"w\", \"t\"], \"Test #3: Failed\"\nassert     sorted_list_sum([\"f\", \"f\", \"f\", \"f\", \"t\"]) == [\"f\", \"f\", \"f\", \"f\", \"t\"], \"Test #4: Failed\"\nassert     sorted_list_sum([\"f\", \"w\", \"w\", \"w\", \"t\"]) == [\"f\", \"w\", \"w\", \"w\", \"t\"], \"Test #5: Failed\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['hello', 'hiiii', 'bye', 'byebye']) == ['hello', 'hiiii', 'bye', 'byebye']\nassert     sorted_list_sum(['hello', 'hiiii', 'hiiii', 'bye', 'byebye']) == ['hello', 'bye', 'byebye']\nassert     sorted_list_sum(['hello', 'hiiii', 'hiiii', 'hellohello', 'bye', 'byebye']) == ['hello', 'bye', 'byebye']\n\n\ndef main():\n    print(sorted_list_sum(['hello', 'hiiii', 'bye', 'byebye']))\n    print(sorted_list_sum(['hello', 'hiiii', 'hiiii', 'bye', 'byebye']))\n    print(sorted_list_sum(['hello', 'hiiii', 'hiiii', 'hellohello', 'bye', 'byebye']))\n\nmain("
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"abcde\"]) == [\"abcde\"]\nassert     sorted_list_sum([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\"]) == [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\"]\nassert     sorted_list_sum([\"a\", \"aa\", \"b\", \"bb\", \"c\", \"cc\", \"d\", \"dd\"]) == [\"a\", \"aa\", \"b\", \"bb\", \"c\", \"cc\", \"d\", \"dd\"]\nassert     sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\"]) == [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\"]\nassert     sorted_list_sum([\"a\", \"aa\", \"a\", \"a\", \"a\", \"b\", \"bb\", \"c\", \"cc\", \"d\", \"dd\"]) == [\"a\", \"aa\", \"a\", \"a\", \"a\", \"b\", \"bb\", \"c\", \"cc\", \"d\", \"dd\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['a', 'foo', 'bar', 'baz']) == ['foo', 'bar', 'baz']\nassert     sorted_list_sum(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     sorted_list_sum(['foo', 'bar', 'baz']) == ['foo', 'bar', 'baz']\nassert     sorted_list_sum(['foo', 'boo', 'baz']) == ['baz', 'boo']\nassert     sorted_list_sum(['foo', 'bar', 'baz', 'boo']) == ['bar', 'boo']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sorted_list_sum(['hello', 'new', 'world', 'house']) == ['hello', 'new', 'world'], 'incorrect'\nassert sorted_list_sum(['hello', 'new', 'world', 'house', 'goes']) == ['hello', 'new', 'world'], 'incorrect'\nassert sorted_list_sum(['hello', 'new', 'world', 'house', 'goes', 'is', 'a', 'example']) == ['hello', 'new', 'world', 'house', 'is', 'example'], 'incorrect'\n\nprint('The code ran Correctly')\n\n'''\n    The execution of this code, will produce:\n    The code ran Correctly\n    Note:\n    You can run this code using python3 by changing the text file extension from.py to.py3\n''"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sorted_list_sum([\"c\", \"a\", \"b\"]) == ['a', 'b']\nassert     sorted_list_sum([\"a\", \"b\", \"c\"]) == ['a', 'b', 'c']\nassert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == ['a', 'b', 'c', 'd', 'e']\nassert     sorted_list_sum([\"d\", \"b\", \"c\", \"a\"]) == ['a', 'b', 'c', 'd']\nassert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"test\"]) == [\"test\"]\nassert sorted_list_sum([\"test\", \"test\"]) == [\"test\"]\nassert sorted_list_sum([\"test\", \"test\", \"test\"]) == [\"test\"]\nassert sorted_list_sum([\"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"tes"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert xt_or_yt(6, 4, 3) == 4\nassert xt_or_yt(2, 4, 3) == 3\nassert xt_or_yt(9, 4, 3) == 4\nassert xt_or_yt(10, 4, 3) == 4\nassert xt_or_yt(4, 4, 3) == 4\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     x_or_y(2, 11, 33) == 11\nassert     x_or_y(9, 11, 33) == 33\nassert     x_or_y(17, 11, 33) == 33\n\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     x_or_y(7, 5, 6) == 5\nassert     x_or_y(7, 5, 5) == 7\nassert     x_or_y(7, 5, 3) == 5\nassert     x_or_y(7, 5, 1) == 7\nassert     x_or_y(7, 5, 2) == 7\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 4, 5) == 4\nassert     x_or_y(3, 5, 6) == 5\nassert     x_or_y(3, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     x_or_y(1, 1, 2) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(4, 1, 2) == 1\nassert     x_or_y(5, 1, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     x_or_y(101, 42, 101) == 42, \"Error in x_or_y\"\nassert     x_or_y(101, 42, 52) == 42, \"Error in x_or_y\"\nassert     x_or_y(101, 52, 101) == 52, \"Error in x_or_y\"\nassert     x_or_y(101, 101, 101) == 101, \"Error in x_or_y\"\nassert     x_or_y(101, 52, 52) == 52, \"Error in x_or_y\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     x_or_y(7, 9, 6) == 9\nassert     x_or_y(3, 7, 6) == 7\nassert     x_or_y(5, 9, 7) == 9\nassert     x_or_y(3, 3, 6) == 3\nassert     x_or_y(7, 3, 6) == 6\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     x_or_y(5, 11, 12) == 11\nassert     x_or_y(11, 11, 12) == 12\nassert     x_or_y(12, 11, 12) == 12\nassert     x_or_y(13, 11, 12) == 11\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     x_or_y(3, 7, 8) == 7\nassert     x_or_y(4, 8, 9) == 8\nassert     x_or_y(5, 6, 7) == 6\nassert     x_or_y(11, 7, 9) == 9\nassert     x_or_y(0, 1, 2) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint(double_the_difference([1, 2, 3]))\nprint(double_the_difference([1, 2, -3, 4]))\nprint(double_the_difference([-1, -2, 3]))\nprint(double_the_difference([-1, 2, 3]))\nprint(double_the_difference([-1, -2, -3, 4]))\nprint(double_the_difference([-1, 2, 3, 4]))\nprint(double_the_difference([1, 2, -3, 4]))\nprint(double_the_difference([1, 2, -3, -4]))"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     double_the_difference([0, 1, 2]) == 0\nassert     double_the_difference([1, 2, 3]) == 2\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0.1, 1.2, 2.3]) == 0\nassert     double_the_difference([-1, 1.1, 2.2, 3.3]) == 6\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     double_the_difference([])             == 0\nassert     double_the_difference([3])             == 0\nassert     double_the_difference([1, 2, 3])     == 3\nassert     double_the_difference([-1, 0, 2, 3])     == 4\nassert     double_the_difference([-2, 1, 2])     == 4\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     double_the_difference([1, 2, 3]) == 4\nassert     double_the_difference([0, 1, 2, 3, 4, 5]) == 30\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0.1, -1.2, 5.6, -3.8]) == 17.9\n\nprint(\"OK\""
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     double_the_difference([]) == 0, \"Error in the test cases\"\nassert     double_the_difference([-1, 3, 9, 2, 2, 4, 6, 3, 6, 3, 2]) == 16, \"Error in the test cases\"\nassert     double_the_difference([-1, 3, 9, 2, 2, 4, 6, 3, 6, 3, 2, 4]) == 10, \"Error in the test cases\"\nassert     double_the_difference([3, 9, 2, 2, 4, 6, 3, 6, 3, 2, 4, 5]) == 10, \"Error in the test cases\"\nassert     double_the_difference([-3, 9, 2, 2, 4, 6, 3, 6, 3, 2, 4, 5]) == 20, \"Error in the test cases\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5])     == 20, \"Wrong output\"\nassert     double_the_difference([0, -1, 2, 3])     == 8, \"Wrong output\"\nassert     double_the_difference([])                 == 0, \"Wrong output\"\nassert     double_the_difference([-5, -6])         == 0, \"Wrong output\"\nassert     double_the_difference([0, 1, 3, 5, 6]) == 0, \"Wrong output\"\nprint(\"Correctness check passed!\")\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     double_the_difference([1, 3, 5]) == 0, 'wrong result for [1, 3, 5]'\nassert     double_the_difference([1, 2, 3, 4]) == 10, 'wrong result for [1, 2, 3, 4]'\nassert     double_the_difference([]) == 0, 'wrong result for []'\nprint(\"Almost done! Time to review the lesson.\""
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (compare([0,0,0],[0,0,0]) == [0,0,0]), \"the result of the matches are 0\"\nassert     (compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]), \"the result of the matches are 0\"\nassert     (compare([3,2,1,0,4],[2,4,1,3,0]) == [0,0,0,1,1]), \"the result of the matches are 0\"\nassert     (compare([7,7,7,7,7],[7,7,7,7,7]) == [0,0,0,0,0]), \"the result of the matches are 0\"\nassert     (compare([0,1,0,2,1],[0,4,1,3,1]) == [0,1,0,0,1]), \"the result of the matches are 0\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     compare([6,6,5],[6,5,6]) == [0,1,0], \"Not quite\"\nassert     compare([6,5,5],[6,5,6]) == [0,1,0], \"Not quite\"\nassert     compare([6,7,5],[6,6,6]) == [0,2,0], \"Not quite\"\nassert     compare([7,6,8],[6,6,8]) == [0,2,0], \"Not quite\"\nassert     compare([7,8,6],[8,6,7]) == [1,0,0], \"Not quite\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (compare(['5', '0', '1', '1', '1'], ['0', '1', '1', '2', '0']) == [2, 1, 0, 0, 1]), \\\n        'compare should return [2, 1, 0, 0, 1]'\nassert     (compare(['10', '6', '5', '4', '2'], ['2', '3', '1', '4', '0']) == [1, 2, 1, 1, 1]), \\\n        'compare should return [1, 2, 1, 1, 1]'\n\nif __name__ == '__main__':\n    print(compare(['10', '6', '5', '4', '2'], ['2', '3', '1', '4', '0'])"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (\n            compare([200,130,120,250,170,420,250,250,170,450,450,450,450,450,450,450,450,450],\n                [420,420,420,420,420,220,420,420,420,420,420,420,420,420,420,420,420,420]) == [0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            )\n        )\n\nassert     (\n            compare([300,120,150,330,150,330,150,330,150,440,440,440,440,440,440,440,440,440],\n                [440,440,440,440,440,220,440,440,440,440,440,440,440,440,440,440,440,440]) == [0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            )\n        )\n\nassert     (\n            compare([150,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110],\n                [110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            )\n        )\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (compare([[80, 65, 42, 75, 77, 32, 96, 97, 26, 23, 39, 41, 20, 20, 19, 12, 13, 30, 41, 83],\n        [75, 65, 42, 75, 77, 32, 96, 97, 26, 23, 39, 41, 20, 20, 19, 12, 13, 30, 41, 83]], \n    [75, 96, 97, 26, 23, 41, 41, 83, 96, 32, 39, 20, 20, 20, 19, 12, 13, 30, 41, 75]) == \n        [[1, 2, 3, 1, 3, 4, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n), \"Check your code\"\n\nassert     (compare([[1, 2, 3, 1, 3, 4, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], \n    [1, 2, 3, 1, 3, 4, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0]) == \n        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n), \"Check your code\"\n\nassert     (compare([[1, 2, 3, 1, 3, 4, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], \n    [1, 2, 3, 4, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0]) == \n        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n), \"Check your code\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     compare([10, 3, 45, 6, 6], [10, 1, 3, 45, 4])     == [0, 1, 0, 0, 1] \nassert     compare([10, 3, 3, 4, 6], [4, 10, 3, 3, 6])     == [1, 1, 1, 0, 0] \nassert     compare([10, 3, 3, 6, 4], [10, 1, 3, 3, 6])     == [0, 1, 1, 0, 1] \nassert     compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])     == [0, 1, 1, 1, 1] \nassert     compare([1, 2, 3, 4, 5], [3, 2, 1, 4, 6])     == [0, 1, 0, 0, 1] \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [[0,    1],    [1,    0],    [2,    2]] == compare([10,2,3], [10,3,1]), \"Wrong answer\"\nassert     [[1,    1],    [1,    0],    [1,    1]] == compare([5,6,7], [5,7,7]), \"Wrong answer\"\nassert     [[1,    0],    [1,    0],    [0,    0]] == compare([1,2,3], [1,2,3]), \"Wrong answer\"\nassert     [[0,    1],    [0,    1],    [0,    1]] == compare([0,0,0], [0,0,0]), \"Wrong answer\"\nassert     [[10,    10],    [10,    10],    [10,    10]] == compare([10,10,10], [10,10,10]), \"Wrong answer\"\nprint('All tests are passed'"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     compare([\"2:0\",\"2:0\",\"2:0\",\"3:0\",\"3:0\",\"2:0\",\"3:0\",\"3:0\",\"2:0\"],[\"1:0\",\"0:1\",\"0:1\",\"0:0\",\"1:0\",\"1:0\",\"0:0\",\"0:0\",\"0:0\"]) == [8,1,1,0,0,0,0,0,0]\nassert     compare([\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"3:0\",\"3:0\",\"3:0\"],[\"1:0\",\"0:1\",\"0:1\",\"0:0\",\"1:0\",\"1:0\",\"0:0\",\"0:0\",\"0:0\"]) == [0,0,0,0,0,0,0,0,0]\nassert     compare([\"2:0\",\"3:0\",\"2:0\",\"2:0\",\"2:0\",\"3:0\",\"3:0\",\"3:0\",\"3:0\"],[\"1:0\",\"0:1\",\"0:1\",\"0:0\",\"1:0\",\"1:0\",\"0:0\",\"0:0\",\"0:0\"]) == [6,0,0,0,0,0,0,0,0]\nassert     compare([\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\"],[\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\"]) == [0,0,0,0,0,0,0,0,0]\nassert     compare([\"1:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\",\"2:0\"],[\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\",\"0:0\"]) == [0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     compare([0,2,3,6], [0,0,2,2]) == [0,2,0,0], \"Wrong answer\"\nassert     compare([1,2,3,6], [1,2,4,6]) == [0,1,0,0], \"Wrong answer\"\nassert     compare([0,2,3,6], [0,2,3,6]) == [0,0,0,0], \"Wrong answer\"\nprint(\"Correct!\")"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (compare([0, 1, 2, 3, 4], [1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1] \n        or compare([0, 1, 2, 3, 4], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n        or compare([0, 1, 2, 3, 4], [1, 2, 3, 4, 5]) == [0, 1, 1, 1, 1])\nassert     (compare([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) == [1, 1, 1, 1, 1] \n        or compare([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) == [0, 0, 0, 0, 0]\n        or compare([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) == [0, 1, 1, 1, 1])\nassert     (compare([2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1] \n        or compare([2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n        or compare([2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == [0, 1, 1, 1, 1])\nassert     (compare([3, 4, 5, 6, 7], [1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1] \n        or compare([3, 4, 5, 6, 7], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n        or compare([3, 4, 5, 6, 7], [1, 2, 3, 4, 5]) == [0, 1, 1, 1, 1])\nassert     (compare([4, 5, 6, 7, 8], [1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1] \n        or compare([4, 5, 6, 7, 8], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n        or compare([4, 5, 6, 7, 8], [1, 2, 3, 4, 5]) == [0, 1, 1, 1, 1])\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\")\nassert     (Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\")\nassert     (Strongest_Extension(\"Slices\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.Slices\")\nassert     (Strongest_Extension(\"Slices\", [\"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\")\nassert     (Strongest_Extension(\"Slices\", [\"Cheese\", \"StuFfed\", \"Slices\"]) == \"Slices.Cheese\")\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Plane', ['Plane.Slices', 'Plane.Cheese', 'Plane.Stufed']) == 'Plane.Plane'\nassert     Strongest_Extension('Plane', ['Plane.Slices', 'Plane.Cheese', 'Plane.Stufed', 'Plane.Slices']) == 'Plane.Slices'\nassert     Strongest_Extension('Plane', ['Plane.Slices', 'Plane.Slices', 'Plane.Cheese', 'Plane.Cheese']) == 'Plane.Cheese'\n\ndef format_input_to_nice_format(input_file):\n    \"\"\"You will be given the name of an input file in this format:\n    ClassName1.ExtensionName1.ExtensionName2.ExtensionName3\n    The input file will be in the same directory as your solution. \n    The input file will contain a list of classes and extensions to load. \n    You should return a dictionary of the classes and extensions \n    in this format:\n    {ClassName1: [ExtensionName1, ExtensionName2, ExtensionName3],...}\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"Oops, something is wrong\"\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese', \"Oops, something is wrong\"\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed']) == 'Slices.Cheese', \"Oops, something is wrong\"\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'Cheese', 'StuFfed']) == 'Slices.Cheese', \"Oops, something is wrong\"\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'Cheese']) == 'Slices.Cheese', \"Oops, something is wrong\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Apple\", [\"Apple\", \"Banana\"]) == \"Apple.Apple\"\nassert     Strongest_Extension(\"ASDFG\", [\"ASDF\", \"QWER\", \"ASDF\"]) == \"ASDF.ASDF\"\nassert     Strongest_Extension(\"Apple\", [\"Banana\", \"Apple\", \"AppleSlices\"]) == \"Apple.AppleSlices\"\nassert     Strongest_Extension(\"Apple\", [\"Banana\", \"Apple\", \"AppLeSlices\"]) == \"Apple.AppLeSlices\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert         Strongest_Extension(\"Slices\",     [\"SErviNGSlices\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSlices\"\nassert         Strongest_Extension(\"Husband\",     [\"Husband.Man\", \"Man.Woman\", \"Woman.Man\"]) == \"Husband.Man\"\nassert         Strongest_Extension(\"Planet\",     [\"Planet.Matter\", \"Matter.Life\", \"Life.Matter\"]) == \"Planet.Matter\"\nassert         Strongest_Extension(\"Moon\",         [\"Moon.Matter\", \"Matter.Life\", \"Life.Matter\"]) == \"Moon.Matter\"\nassert         Strongest_Extension(\"Satellites\",     [\"Satellites.Matter\", \"Satellites.Life\", \"Satellites.Matter\"]) == \"Satellites.Matter\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    Strongest_Extension(\"Slices\", [\"Cheese\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Slices.SErviNGSliCes\", \"Incorrect\"\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'SErviNGSliCes', 'StuFfed']) == \"Slices.SErviNGSliCes\", \"Incorrect\"\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'SErviNGSliCes', 'Cheese']) == \"Slices.Cheese\", \"Incorrect\"\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'Cheese', 'Cheese']) == \"Slices.Cheese\", \"Incorrect\"\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'SErviNGSliCes', 'SErviNGSliCes']) == \"Slices.SErviNGSliCes\", \"Incorrect\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])!= 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])!= 'Slices.Cheese'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'Cheese']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed']) == 'Slices.Cheese'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert         Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert         Strongest_Extension('FooBar', ['FooBar', 'BarFoo', 'BarBar']) == 'FooBar.BarFoo'\nassert         Strongest_Extension('FooBar', ['FooBar', 'BarFoo', 'BarBar', 'BarBarFoo']) == 'FooBar.BarBarFoo'\nassert         Strongest_Extension('FooBar', ['FooBar', 'BarFoo', 'BarBar', 'BarBarFoo', 'BarBarBar']) == 'FooBar.BarBarBar'\nassert         Strongest_Extension('FooBar', ['FooBar', 'BarFoo', 'BarBar', 'BarBarFoo', 'BarBarBar', 'BarBarBarFoo']) == 'FooBar.BarBarBarFoo'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     cycpattern_check('great', 'aterg') == False\nassert     cycpattern_check('great', 'rgter') == True\nassert     cycpattern_check('peon', 'eonp') == True\nassert     cycpattern_check('peon', 'onpe') == True\nassert     cycpattern_check('peon', 'opne') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     cycpattern_check('abcde','cdeab')     == True\nassert     cycpattern_check('abcde','abce')     == True\nassert     cycpattern_check('abcde','abcde')     == True\nassert     cycpattern_check('abcde','abd')     == True\nassert     cycpattern_check('abcde','cde')     == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     cycpattern_check(\"waterbottle\", \"erbottlewat\")\nassert not cycpattern_check(\"waterbottle\", \"erbottlew\")\nassert not cycpattern_check(\"waterbottle\", \"erbottle\")\nassert not cycpattern_check(\"erbottlewat\", \"erbottlew\")\nassert cycpattern_check(\"waterbottle\", \"terbottlew\")\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"abab\",\"ab\") == True\nassert     cycpattern_check(\"abc\",\"ab\") == False\nassert     cycpattern_check(\"aba\",\"a\") == True\nassert     cycpattern_check(\"abab\",\"bba\") == True\nassert     cycpattern_check(\"abab\",\"abb\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     cycpattern_check('cat', 'act') == True \nassert     cycpattern_check('cat', 'cat') == True \nassert     cycpattern_check('cat', 'tac') == True \nassert     cycpattern_check('cat', 'tca') == True \nassert     cycpattern_check('cat', 'tca') == True \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     even_odd_count(12345) == (3, 5), \"Wrong\"\nassert     even_odd_count(24) == (0, 4), \"Wrong\"\nassert     even_odd_count(35235) == (2, 4), \"Wrong\"\nassert     even_odd_count(34) == (0, 2), \"Wrong\"\n\nprint(\"ok\")\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert "
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     even_odd_count(234) == (3,5)\nassert     even_odd_count(34) == (0,2)\nassert     even_odd_count(12345678) == (7,5)\nprint(\"OK\")\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n    even_odd_count(12) == (1, 2)\n    even_odd_count(24) == (0, 4)\n    even_odd_count(345) == (2, 3)\n    even_odd_count(97987) == (3, 5)\n    even_odd_count(10) == (1, 0)\n    even_odd_count(11) == (0, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_count(1) == (0, 1)\nassert     even_odd_count(99) == (3, 2)\nassert     even_odd_count(2) == (1, 0)\nassert     even_odd_count(235) == (1, 4)\nassert     even_odd_count(54321) == (4, 5)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\nassert     int_to_mini_roman(10) == 'x'\nassert     int_to_mini_roman(15) == 'xxv'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(2) == 'II'\nassert int_to_mini_roman(3) == 'III'\nassert int_to_mini_roman(4) == 'IV'\nassert int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    assert int_to_mini_roman(1) == \"I\"\n    assert int_to_mini_roman(2) == \"II\"\n    assert int_to_mini_roman(3) == \"III\"\n    assert int_to_mini_roman(4) == \"IV\"\n    "
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert int_to_mini_roman(3) == \"iii\"\nassert int_to_mini_roman(4) == \"iv\"\nassert int_to_mini_roman(10) == \"x\"\nassert int_to_mini_roman(99) == \"lxix\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(2) == 'II', 'Test failed for int_to_mini_roman(2)'\nassert     int_to_mini_roman(7) == 'VII', 'Test failed for int_to_mini_roman(7)'\nassert     int_to_mini_roman(11) == 'XII', 'Test failed for int_to_mini_roman(11)'\nassert     int_to_mini_roman(49) == 'XLIX', 'Test failed for int_to_mini_roman(49)'\nassert     int_to_mini_roman(99) == 'XCIX', 'Test failed for int_to_mini_roman(99)'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(9) == \"IX\"\nassert     int_to_mini_roman(14) == \"XIV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(1000) == \"M\"\nassert     int_to_mini_roman(27) == \"XXVII\"\nassert     int_to_mini_roman(399) == \"CDXXXIX\"\nassert     int_to_mini_roman(3999) == \"MMMCMXCIX\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(50) == \"L\"\nassert     int_to_mini_roman(100) == \"C\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(1, 2, 3) == False\nassert     right_angle_triangle(5, 12, 13) == False\nassert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(5, 15, 7) == True\nassert     right_angle_triangle(18, 5, 2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(2, 2, 2) is True\nassert     right_angle_triangle(2, 3, 4) is False\nassert     right_angle_triangle(5, 6, 7) is False\nassert     right_angle_triangle(4, 4, 4) is True\nassert     right_angle_triangle(3, 4, 5) is True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(4, 4, 4) == True, 'Test failed'\nassert     right_angle_triangle(2, 2, 3) == False, 'Test failed'\nassert     right_angle_triangle(3, 4, 5) == True, 'Test failed'\nassert     right_angle_triangle(3, 4, 6) == False, 'Test failed'\nassert     right_angle_triangle(2, 3, 5) == True, 'Test failed'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(3, 3, 4) == Fals"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(3, 4, 7) == False\nassert     right_angle_triangle(3, 4, 6) == True\nassert     right_angle_triangle(3, 4, 6.1) == False\n\nprint(\"OK\")\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (find_max(['apple','mango', 'kiwi', 'watermelon']) == 'watermelon'), 'ERROR!'\nassert     (find_max(['apple', 'apple', 'kiwi','mango']) == 'apple'), 'ERROR!'\nassert     (find_max(['apple', 'kiwi','mango', 'kiwi']) =='mango'), 'ERROR!'\nassert     (find_max(['apple', 'apple', 'apple','mango']) == 'apple'), 'ERROR!'\nassert     (find_max(['apple', 'apple','mango','mango']) =='mango'), 'ERROR!'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_max([\"hello\", \"world\", \"hey\"]) == \"world\"\nassert     find_max([\"hey\", \"hello\", \"world\"]) == \"world\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"b\"]) == \"b\"\nassert     find_max([\"x\", \"y\", \"z\", \"x\", \"y\", \"z\"]) == \"z\"\nassert     find_max([\"w\", \"w\", \"x\", \"y\", \"z\"]) == \"w\"\nprint(\"all test cases passed!\")"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \n\nassert \nassert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_max(['aa', 'aaa', 'aaaa', 'aab', 'aac', 'aab', 'aab']) == 'aab'\nassert     find_max(['a', 'a', 'b', 'b', 'b', 'a', 'a', 'c', 'c', 'c', 'c']) == 'c'\nassert     find_max(['a', 'b', 'b', 'b', 'a', 'a', 'a', 'c', 'c', 'c', 'c']) == 'c'\nassert     find_max(['a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'c', 'c', 'c', 'c']) == 'c'\nassert     find_max(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj']) == 'iii'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_max([\"cat\", \"bat\", \"rat\"]) == \"bat\"\nassert     find_max([\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]) == \"pineapple\"\nassert     find_max([\"\",\"\",\"\"]) == \"\"\nassert     find_max([\"\",\"a\"]) == \"a\"\nassert     find_max([\"\",\"b\",\"a\",\"b\",\"b\",\"a\"]) == \"b\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_max([\"spam\", \"egg\", \"sausage\"]) == \"egg\"\nassert     find_max([\"this\", \"is\", \"a\", \"test\"]) == \"test\"\nassert     find_max([\"this\", \"is\", \"a\", \"test\", \"case\"]) == \"case\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_max([\"unique\", \"letters\", \"in\", \"this\", \"word\"]) == \"unique\"\nassert     find_max([\"another\", \"unique\", \"letters\", \"in\", \"this\", \"word\"]) == \"this\"\nassert     find_max([\"a\", \"unique\", \"letters\", \"in\", \"this\", \"word\"]) == \"letters\"\nassert     find_max([\"another\", \"unique\", \"letters\", \"in\", \"this\", \"word\", \"but\", \"in\", \"different\", \"order\"]) == \"another\"\nassert     find_max([\"unique\", \"letters\", \"in\", \"this\", \"word\", \"also\", \"unique\", \"letters\"]) == \"unique\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_max([\"sunshine\", \"sunshine\", \"sunshine\", \"cake\", \"cake\", \"lamp\", \"lamp\"]) == \"sunshine\"\nassert     find_max([\"pig\", \"pig\", \"pig\", \"dog\", \"dog\"]) == \"pig\"\nassert     find_max([\"pig\", \"pig\", \"pig\", \"dog\", \"bird\"]) == \"pig\"\nassert     find_max([\"cat\", \"dog\", \"cat\", \"mouse\", \"dog\", \"cat\"]) == \"cat\"\nassert     find_max([\"pig\", \"pig\", \"pig\", \"dog\", \"bird\", \"bird\"]) == \"pig\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_max(['reven', 'jedna', 'wiedn', 'i', 'dwu', 'trzy', 'qwaza', 'zdzisiaj', 'zwieci', 'w', 'testu']) == 'zdzisiaj'\nassert     find_max(['x', 'y', 'z', 'x', 'y', 'x', 'y', 'x', 'z', 'x', 'z']) == 'z'\nassert     find_max(['w', 'e', 'r', 't', 'o', 'n','s', 'h', 'i', 'n', 'g', 'f', 'o', 'r','s', 'e', 't', 'y']) == 'o'\nassert     find_max(['s', 'h', 'e', 'l', 'n','s', 'h', 'u', 'n', 'g', 'g', 'g', 'u', 'n', 'p', 'w', 'w', 'w', 't', 't', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'p', 'p', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'p', 'p', 'p', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'p', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'w', 'w', 'w', 'p', 'w', 'w', 'w', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'p', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w'"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (find_max([\"hello\", \"world\"]) == \"hello\"), \"Should return the string with maximum number of unique characters\"\nassert     (find_max([\"hello\", \"ello\", \"world\"]) == \"ello\"), \"Should return the string with maximum number of unique characters\"\nassert     (find_max([\"yellow\", \"blue\", \"green\"]) == \"blue\"), \"Should return the string with maximum number of unique characters\"\nassert     (find_max([\"ant\", \"mouse\", \"lion\"]) == \"ant\"), \"Should return the string with maximum number of unique characters\"\nprint(\"find_max function passed\")"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     eat(0, 0, 0) == [0, 0], \"eat failed to handle zero input\"\nassert     eat(1, 1, 1) == [1, 1], \"eat failed to handle one input\"\nassert     eat(1, 2, 3) == [2, 2], \"eat failed to handle one input\"\nassert     eat(1, 2, 5) == [3, 3], \"eat failed to handle one input\"\nassert     eat(5, 2, 5) == [7, 3], \"eat failed to handle one input\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     eat(5, 7, 12) == [ 7, 3]\nassert     eat(8, 14, 15) == [ 15, 0]\nassert     eat(4, 10, 5) == [ 9, 1]\nassert     eat(9, 11, 2) == [ 12, 0]\nassert     eat(0, 2, 10) == [ 10, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     eat(10, 20, 30) == [20, 30], \"this is not the correct output\"\nassert     eat(0, 0, 10) == [10, 10], \"this is not the correct output\"\nassert     eat(0, 0, 0) == [0, 0], \"this is not the correct output\"\nassert     eat(10, 20, 0) == [10, 0], \"this is not the correct output\"\nassert     eat(10, 20, 10) == [20, 10], \"this is not the correct output\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     eat(0, 3, 2) == [0, 2]\nassert     eat(1, 2, 2) == [1, 0]\nassert     eat(2, 2, 2) == [2, 0]\nassert     eat(3, 2, 2) == [3, 0]\nassert     eat(4, 2, 2) == [4, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 1, 0) == [0, 0]\nassert     eat(1, 1, 0) == [1, 0]\nassert     eat(1, 0, 1) == [1, 1]\nassert     eat(1, 0, 2) == [2, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     eat(0, 10, 20) == [0, 10]\nassert     eat(4, 7, 12) == [7, 4]\nassert     eat(1, 2, 3) == [3, 1]\nassert     eat(4, 5, 6) == [6, 0]\nassert     eat(2, 4, 6) == [6, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     eat(1, 1, 10) == [1, 0]\nassert     eat(1, 2, 10) == [1, 2]\nassert     eat(1, 2, 1) == [1, 0]\nassert     eat(1, 5, 2) == [1, 1]\nassert     eat(1, 5, 3) == [1, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     eat(0, 1, 2) == [1, 1]\nassert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 1, 0) == [0, 0]\nassert     eat(1, 0, 2) == [1, 0]\nassert     eat(2, 1, 2) == [3, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     eat(5, 7, 10) == [7, 3]\nassert     eat(3, 7, 10) == [7, 0]\nassert     eat(5, 7, 10) == [7, 3]\nassert     eat(5, 2, 10) == [2, 5]\nassert     eat(5, 0, 10) == [5, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     eat(0, 5, 10) == [5, 5]\nassert     eat(4, 5, 10) == [9, 5]\nassert     eat(5, 5, 10) == [10, 0]\nassert     eat(10, 5, 10) == [15, 0]\nassert     eat(10, 5, 100) == [110, -40]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     do_algebra([], []) == ''\nassert     do_algebra([], [1]) == ''\nassert     do_algebra([], [1, 2]) == ''\nassert     do_algebra([], [1, 2, 3]) == ''\nassert     do_algebra([], [1, 2, 3, 4]) == ''\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     do_algebra([], []) == []\nassert     do_algebra(['+'], [1]) == 1\nassert     do_algebra(['+'], [1, 2]) == 3\nassert     do_algebra(['+', '-'], [1, 2]) == 0\nassert     do_algebra(['+', '+'], [1, 2]) == 3\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     do_algebra([\"+\", \"+\", \"+\"], [2, 4, 6]) ==     10\nassert     do_algebra([\"*\", \"*\"], [2, 4, 6, 8, 10]) ==     64\nassert     do_algebra([\"+\", \"+\"], [2, 4, 6]) ==     10\nassert     do_algebra([\"*\", \"*\"], [2, 4, 6, 8, 10]) ==     64\nassert     do_algebra([\"+\", \"+\", \"*\"], [2, 4, 6]) ==     14\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     do_algebra([\"+\", \"+\"], [1, 2])     == 3\nassert     do_algebra([\"-\", \"+\"], [1, 2])     == 1\nassert     do_algebra([\"*\", \"+\"], [1, 2])     == 2\nassert     do_algebra([\"//\", \"+\"], [1, 2])     == 0\nassert     do_algebra([\"**\", \"+\"], [1, 2])     == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     do_algebra(['+'], [1]) == 2\nassert     do_algebra(['+'], [1, 2]) == 3\nassert     do_algebra(['*'], [1]) == 1\nassert     do_algebra(['*'], [1, 2]) == 2\nassert     do_algebra(['*'], [1, 2, 3]) == 6\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     do_algebra([\"+\", \"+\"], [1, 2]) == 4\nassert     do_algebra([\"*\", \"+\"], [2, 1]) == 3\nassert     do_algebra([\"+\", \"*\"], [1, 2]) == 5\nassert     do_algebra([\"-\", \"*\"], [1, 2]) == -3\nassert     do_algebra([\"+\", \"*\"], [2, 3]) == 6\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     do_algebra([], []) == 0\nassert     do_algebra(['+'], [1, 2]) == 3\nassert     do_algebra(['+', '*'], [1, 2, 3]) == 7\nassert     do_algebra(['+', '*'], [1, 2, 3, 4, 5]) == 15\nassert     do_algebra(['+', '*', '+', '*', '*', '*', '*'], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     do_algebra([\"+\",\"+\"], [1,2]) ==     3\nassert     do_algebra([\"+\"], [1,2]) ==     \"Incorrect input\"\nassert     do_algebra([\"+\"], [1]) ==     \"Incorrect input\"\nassert     do_algebra([\"+\"], []) ==     \"Incorrect input\"\nassert     do_algebra([\"+\",\"+\"], []) ==     \"Incorrect input\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     solve('The quick Brow Fox') == 'The Quick Brow Fox'\nassert     solve('the Quick Brow Fox') == 'THE QUICK BROW FOX'\nassert     solve('the Quick Brow Fox') == 'the Quick Brow Fox'\nassert     solve('THE QUICK BROW FOX') == 'THE Quick Brow Fox'\nassert     solve('THE QUICK BROW FOX') == 'the Quick Brow Fox"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     solve(\"1+1\") == \"1+1\"\nassert     solve(\"HELoo\") == \"hElLo\"\nassert     solve(\"heloo\") == \"helOO\"\nassert     solve(\"\") == \"\"\nassert     solve(\"a\") == \"a\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (solve(\"Abc\") == \"ABC\")\nassert     (solve(\"ab-c\") == \"aB-C\")\nassert     (solve(\"1234\") == \"4321\")\nassert     (solve(\"a1b c\") == \"A1b C\")\nassert     (solve(\"A1b c\") == \"A1b C\")\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solve('w3resource') == 'w3RESOURCE'\nassert     solve('leetcode') == 'leETcode'\nassert     solve('R') == 'r'\nassert     solve('1') == '1'\nassert     solve(' ') ==''\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solve(\"\") == \"\",     \"Empty string\"\nassert     solve(\"a\") == \"a\",     \"Single char\"\nassert     solve(\"A\") == \"a\",     \"Upper to lower\"\nassert     solve(\"1\") == \"1\",     \"Number\"\nassert     solve(\"A1\") == \"a1\",     \"Both number and letter\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     solve(\"A man, a plan, a canal: Panama\" ) == \"aMan, aPlan, aCanal: Panama\"\nassert     solve(\"I'm a little teapot\") == \"i'm a little potteT\"\nassert     solve(\"\") == \"\"\n\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     solve('A') == 'a'\nassert     solve('a') == 'A'\nassert     solve('Loot') == 'loTo'\nassert     solve('Hello world') == 'Hello woRLd'\nassert     solve('123') == '321'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     solve(\"here is t\") == \"here si esT\"\nassert     solve(\"here\") == \"here\"\nassert     solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (solve('') == '' and\n            solve(' ') =='' and\n            solve('Abc cDd') == 'AbC cDd' and\n            solve('AbC cDd') == 'ABC CDD' and\n            solve('AbC cDd') == 'ABC cdD' and\n            solve('abbc ddd') == 'abbc ddD' and\n            solve('aaaaaaaaaa') == 'aaaaaaaaaa' and\n            solve('ABAB abCd') == 'AbAb dCd'), 'wrong answer'\nprint('Success'"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_to_md5(string_to_md5(string_to_md5(string_to_md5('a')))) == string_to_md5('a')\nassert     string_to_md5(string_to_md5(string_to_md5(string_to_md5('z')))) == string_to_md5('a')\nassert     string_to_md5(string_to_md5(string_to_md5(string_to_md5('a' * 512)))) == string_to_md5('a' * 512)\nassert     string_to_md5(string_to_md5(string_to_md5(string_to_md5('a' * 512)) + 'b')) == string_to_md5('a' * 512 + 'b')\nassert     string_to_md5(string_to_md5(string_to_md5('a' * 512) + 'b')) == string_to_md5('a' * 512 + 'b')\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"a\") == \"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"\nassert     string_to_md5(\"ab\") == \"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"\nassert     string_to_md5(\"abc\") == \"ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\"\nassert     string_to_md5(\"\") is None\nassert     string_to_md5(\"abcde\") == \"e6a09ecbf726f63a51f3a8b5ddc2c2d91d9d34d8b0c8fa0a5ec66d9084e5e0e\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") is None\nassert     string_to_md5(\"abcd\") == \"8baf6b8af6b8b13fd73a8dab9d8c0f1e\"\nassert     string_to_md5(\"a\") == \"856dd5c5d16bb3d9a5f5727daf5b7545\"\nassert     string_to_md5(\"a\" * 7 + \"b\") == \"99a27f7ff4b6c7f5f6a6c6b0b6d39ef\"\nassert     string_to_md5(\"a\" * 8 + \"b\") == \"c3cbbfce898961fe88e12c7e2f8f4d1b\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     generate_integers(10, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(20, 10) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(20, 5) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(3, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(10, 3) == [2, 4, 6, 8, 10]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     generate_integers(16, 34) == [2, 4, 6, 8]\nassert     generate_integers(19, 35) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\nassert     generate_integers(0, 1) == []\nassert     generate_integers(42, 44) == [42, 44]\nassert     generate_integers(1, 1) == [1]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     generate_integers(20, 100) == [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n\nprint('tests passed'"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     generate_integers(13, 17) == [14, 16]\nassert     generate_integers(123, 456) == [124, 234, 456]\nassert     generate_integers(0, 2) == [0, 2]\nassert     generate_integers(1, 1) == [1]\nassert     generate_integers(0, -1) == [0, -2, -4]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     generate_integers(3, 8) == [4, 6]\nassert     generate_integers(12, 27) == [10, 12, 14, 16, 18, 20, 22, 24, 26]\nassert     generate_integers(24, 33) == [24, 26, 28, 30, 32]\nassert     generate_integers(0, 9) == [0, 2, 4, 6, 8]\nassert     generate_integers(10, 17) == [10, 12, 14, 16]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     generate_integers(2, 6) == [4, 6]\nassert     generate_integers(2, 5) == [4]\nassert     generate_integers(4, 9) == [4, 8]\nassert     generate_integers(4, 8) == [4, 8]\nassert     generate_integers(9, 13) == [12]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 2) == [2, 4, 6, 8, 0]\nassert     generate_integers(1, 5) == [2, 4, 6, 8]\nassert     generate_integers(3, 10) == [4, 6, 8, 0]\nassert     generate_integers(10, 33) == [12, 16, 20, 24, 28, 32]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert\nassert\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    }
]