[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 2, 3], 0) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3], 0.2) == False\nassert     has_close_elements([1, 2, 3], 0.3) == False\nassert     has_close_elements([1, 2, 3], 0.1) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.2) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.01) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 0.2)\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 1.0)\nassert not has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 3.0)\nassert has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 0.1)\nassert not has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5], 0.5)\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 3], 1)\nassert not has_close_elements([1, 2, 3], 2)\nassert not has_close_elements([1, 2, 3], 3)\nassert has_close_elements([1, 2, 3, 0.3], 1)\nassert has_close_elements([1, 2, 3, 0.3], 0.1)\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     has_close_elements([1, 2, 3], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 2) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 0.1) == False\n\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     has_close_elements([1,2,3], 1) == False, \"1. test failed\"\nassert has_close_elements([1,2,3], 1.1) == True, \"2. test failed\"\nassert has_close_elements([1,2,3], 1.8) == False, \"3. test failed\"\nassert has_close_elements([1,2,3], 2) == False, \"4. test failed\"\nassert has_close_elements([1,2,3], 3) == False, \"5. test failed\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 1.5) == True\nassert     has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 2.0) == False\nassert     has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0], 2.0) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     has_close_elements([1, 2, 3], 1) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 6) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.1) == False\nassert     has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.2) == True\nassert     has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.3) == True\n\nprint(has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.1))\nprint(has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.2))\nprint(has_close_elements([0.1, 0.4, 0.3, 0.5, 0.2], 0.3))\n\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 3) == False, 'Wrong answer for [1,2,3,4,5]'\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == True, 'Wrong answer for [1,2,3,4,5]'\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == True, 'Wrong answer for [1,2,3,4,5]'\nassert     has_close_elements([1, 2, 3, 4, 5], 0) == False, 'Wrong answer for [1,2,3,4,5]'\n\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('(1 + 2) * 3 + (4 * 5)') == ['(1 + 2)', '3', '(4 * 5)']\nassert     separate_paren_groups('1 + (2 * 3) + (4 * (5 + 6))') == ['1', '(2 * 3)', '(4 * (5 + 6))']\nassert     separate_paren_groups('(1 + 2) * 3') == ['(1 + 2)', '3']\nassert     separate_paren_groups('1 + (2 * 3) + (4 * (5 + 6))') == ['1', '(2 * 3)', '(4 * (5 + 6))']\nassert     separate_paren_groups('(((1 + 2)))') == ['(((1 + 2)))']\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"(())()\") == [\"(())\", \"()\"]\nassert     separate_paren_groups(\"((())()\") == [\"((())\", \"()\"]\nassert     separate_paren_groups(\"((()))\") == [\"((()))\", \"\"]\nassert     separate_paren_groups(\"(())()(()())()(())\") == [\"(())\", \"()\", \"(()())\", \"()\", \"(()())()\", \"()\"]\nassert     separate_paren_groups(\"(())((()())\") == [\"(())((()())\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(()())((()))\") == [\"(()())((()))\", \"()\", \"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"((()))\") == [\"((()))\"]\nassert     separate_paren_groups(\"()(())\") == [\"()\", \"(())\"]\nassert     separate_paren_groups(\"(()())\") == [\"(()())\"]\nassert     separate_paren_groups(\"((())())\") == [\"((())())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\n
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(hi) (hello)\") == [\"(hi)\", \"hello\"]\nassert     separate_paren_groups(\"(hi)(hello)\") == [\"(hi)\", \"(hello)\"]\nassert     separate_paren_groups(\"(hi) hello)\") == [\"(hi)\", \"hello)\"]\nassert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"hi()\") == [\"hi()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(hello) world)\") == [\"(hello)\", \"world)\", \")\"]\nassert     separate_paren_groups(\"\") == [\"\"]\nassert     separate_paren_groups(\"hello (world)\") == [\"hello \", \"(world)\", \" \"]\nassert     separate_paren_groups(\"((this is fun))\") == [\"((this is fun))\"]\nassert     separate_paren_groups(\"\") == [\"\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(())()(())\") == [\"(())()(())\", \"(())(())\"], \"Failed test for '()()()'\"\nassert     separate_paren_groups(\"()()\") == [\"()()\", \"()()\"], \"Failed test for '()()'\"\nassert     separate_paren_groups(\"(())()\") == [\"(())()\", \"(())\"], \"Failed test for '()()'\"\nassert     separate_paren_groups(\"(()())\") == [\"(())()\", \"(())\"], \"Failed test for '()()'\"\nassert     separate_paren_groups(\"(())(())\") == [\"(())()\", \"(())(())\"], \"Failed test for '()()'\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('(()())()') == ['(())()', '(()())']\nassert     separate_paren_groups('((()))') == ['((()))']\nassert     separate_paren_groups('()()()()()()()()()()()()') == ['()()()()()', '()()()()()', '(())', '()', '()']\nassert     separate_paren_groups('(())(()(()()))') == ['(())', '(()(()()))']\n\n\ndef evaluate_expression(expression: str) -> int:\n    \"\"\" This function takes a string containing a mathematical expression\n    as input and evaluates the expression and returns the result.\n    The result is an integer.\n    The operators can be one of the following: '+', '-', '*', '/', '^', '(', ')'.\n    The operands can be an integer, a parenthesis, or a mathematical operator.\n    The function does not support unary operators.\n    The function supports multiple levels of nested parentheses but they must be balanced.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"(())()\") == [\"(())()\", \"()\"]\nassert     separate_paren_groups(\"(((()())))\") == [\"(((()())))\", \"()\"]\nassert     separate_paren_groups(\"(((((((((((((((())))))))))())(()))()(())())())\") == [\"(((((((((((((((())))))))))())(()))()(())())())\", \"()\"]\nassert     separate_paren_groups(\"(((((((((((((((())))))))))())(()))()(())())())\") == [\"(((((((((((((((())))))))))())(()))()(())())())\", \"()\"]\nassert     separate_paren_groups(\"(((((((((((((((())))))))))())(()))()(())())())\") == [\"(((((((((((((((())))))))))())(()))()(())())())\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"( ( ( ( ( () ) ) ) ) )\") == [ \"( ( ( ( ( () ) ) ) ) )\", \"()\", \"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"( ( ( ( ( ( ) ) ) ) ) ) )\") == [\n    \"( ( ( ( ( ( ) ) ) ) ) )\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"( () )\") == [\"( () )\"]\nassert     separate_paren_groups(\"( ( ) )\") == [\"( ( ) )\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     truncate_number(123.456) == 0.456\nassert     truncate_number(123.456) == 0.456\nassert     truncate_number(123.456) == 0.456\nassert     truncate_number(1.2345) == 0.2345\nassert     truncate_number(1.2345) == 0.2345\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef round_number(number: float) -> int:\n    \"\"\"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef is_first_in_order(array: list, number: int) -> bool:\n    \"\"\" Given a sorted list of integers and an integer number, determine if\n    the number is the first integer of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     truncate_number(1.23) == 1.23\nassert     truncate_number(1.234) == 1.23\nassert     truncate_number(1.2345) == 1.23\nassert     truncate_number(1.23456) == 1.2345\nassert     truncate_number(1.234567) == 1.234567\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     truncate_number(1.5) == 0.5\nassert     truncate_number(-1.5) == -0.5\nassert     truncate_number(1.5) == 1.5\nassert     truncate_number(-1.5) == -1.5\nassert     truncate_number(1.7) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    truncate_number(0.0) == 0.0\nassert \n    truncate_number(1.0) == 0.0\nassert \n    truncate_number(1.9) == 0.9\nassert \n    truncate_number(0.1) == 0.1\nassert \n    truncate_number(1.1) == 0.1\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     truncate_number(0.1) == 0.0\nassert     truncate_number(0.99) == 0.0\nassert     truncate_number(-0.1) == 0.0\nassert     truncate_number(-0.99) == 0.0\nassert     truncate_number(-3.1) == -0.1\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     truncate_number(-1.9999999) == -1.9999999\nassert     truncate_number(-1.9999999) == -1\nassert     truncate_number(2.9999999) == 2.9999999\nassert     truncate_number(2.9999999) == 2\nassert     truncate_number(3.9999999) == 0.9999999\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     truncate_number(15.31) == 0.31\nassert     truncate_number(15.15) == 0.15\nassert     truncate_number(15.19) == 0.19\nassert     truncate_number(15.01) == 0.01\nassert     truncate_number(15.99) == 0.99\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_zero([5, 5, 5, 0, 5]) == True\nassert     below_zero([5, 5, 5, 0, 5, -5, -5, -5]) == True\nassert     below_zero([5, 5, 5, 0, 5, 5, 5, 0]) == False\nassert     below_zero([5, 5, -5, 0, 5]) == False\nassert     below_zero([0, 5, 5, 0, -5, -5, -5]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert below_zero([1, 2, 3, 4, -5]) == True\n\n\ndef find_min_max_sum_numbers(nums: List[int]) -> (int, int, int):\n    \"\"\" Given a list of integers, find three largest and three smallest values. \n    Return a list of four integers: the largest and the smallest numbers and their sum.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 1, 1, 1]) == False\nassert     below_zero([1, 1, 1, 1, 1, 1, 1]) == False\nassert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\nassert     below_zero([1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 1, 1, 1, 1]) == True\nassert     below_zero([1, 1, -1, 1, 1]) == True\nassert     below_zero([1, 1, -1, -1, 1]) == True\nassert     below_zero([1, 1, -1, 1, -1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_zero([5, 5, -5, 1, -5, 5, -5, -1]) == True\nassert     below_zero([5, 5, -5, 1, -5, 5, -5, 1]) == False\nassert     below_zero([5, -5, -5, 1, -5, 5, -5, 1]) == True\nassert     below_zero([5, -5, -5, 1, -5, 5, -5, 1, -5, 5, -5, 1]) == True\n\n\ndef dutch_national_flag_sort(arr: List[int]) -> None:\n    \"\"\" Dutch National Flag problem\n    We are given an unsorted array of unique elements. We need to sort it using the dutch flag algorithm\n    https://en.wikipedia.org/wiki/Dutch_national_flag_problem\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, 5, -1]) == True\n\n\ndef bank(operations: List[int]) -> int:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to compute the resulting balance of account after all\n    operations.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, -5]) == True\nassert     below_zero([1, -2, 3, 4, 5]) == True\nassert     below_zero([1, -2, 3, 4, -5]) == False\nassert     below_zero([1, -3, 3, 4, -5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     below_zero([1,2,3]) == False\nassert     below_zero([1,2,3,4,5]) == False\nassert     below_zero([1,2,-3,4,5]) == True\n\n\ndef find_index(number: int, numbers: List[int]) -> int:\n    \"\"\" Find the index of number in numbers. If number is not in the array, return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, -3, 4, 5, -7, 6]) == True\nassert     below_zero([1, -3, 4, 5, -3, 6]) == False\nassert     below_zero([1, -3, 4, 5, -7, 6, -4, 7]) == True\nassert     below_zero([1, -3, 4, 5, -3, 6, -4, 7, -5, 8]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False, 'too big int'\nassert below_zero([1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False, 'negative'\nassert below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False, 'just right'\nassert below_zero([1, 2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True, 'negative'\nassert below_zero([1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True, 'negative'\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and the median of this dataset:\n    MAD = median(| x - x_median |)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 1.0\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 0.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([-1, 4, -0.5]) == 1.25\nassert     mean_absolute_deviation([-1, 4, -0.5, 0, 1]) == 2.25\n\ndef normalized_mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the normalized mean absolute deviation\n    around the mean of this dataset.\n    Normalized Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    NMAD = MAD / x_std\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.0, \"Should be 2\"\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 5]) == 2.0, \"Should be 2\"\nassert     mean_absolute_deviation([1, 1, 1, 1, 1, 1]) == 0, \"Should be 0\"\nassert     mean_absolute_deviation([5, 4, 3, 2, 1]) == 1.0, \"Should be 1\"\nassert     mean_absolute_deviation([-3, -2, -1, 0, 1]) == 1.0, \"Should be 1\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.0)\nassert     (mean_absolute_deviation([3, 3, 3, 3, 3]) == 0.0)\nassert     (mean_absolute_deviation([3, 4, 5, 2, 3]) == 2.0)\nassert     (mean_absolute_deviation([0, 0, 0, 0, 0]) == 0.0)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     round(mean_absolute_deviation([1, 3, 5, 7]), 1) == 1.1\nassert     round(mean_absolute_deviation([1, 2, 3, 4]), 1) == 1.0\nassert     round(mean_absolute_deviation([1, 3, 3, 3]), 1) == 1.1\nassert     round(mean_absolute_deviation([1, 2, 3, 4, 6]), 1) == 1.2\nassert     round(mean_absolute_deviation([1, 2, 3, 4, 5]), 1) == 1.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 1, 1, 2, 3, 4, 5, 6, 7]) == 2.3, \"Should be 2.3\"\nassert     mean_absolute_deviation([2, 4, 6, 8, 10, 12, 14, 16, 18]) == 4.3, \"Should be 4.3\"\nassert     mean_absolute_deviation([6, 12, 18, 24, 30, 36, 42, 48, 54]) == 5.1, \"Should be 5.1\"\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.8, \"Should be 0.8\"\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median(| x - x_median |)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) ==     1.5\nassert     mean_absolute_deviation([5, 4, 3, 2, 1]) ==     1.5\n\ndef squared_mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the Mean Absolute Deviation\n    around the mean of this dataset, then squared it.\n    Squared Mean Absolute Deviation is the average squared difference between\n    each element and a centerpoint (mean in this case):\n    MAD = average(| x - x_mean |)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between\n    each element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([0]) == 0\nassert     mean_absolute_deviation([-1, -2, -3]) == 1\nassert     mean_absolute_deviation([0, -2, 2, -3]) == 1\nassert     mean_absolute_deviation([0, 1, 2, 3]) == 1\nassert     mean_absolute_deviation([-1, 1, 2, 3]) == 2\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    pass\n\nassert intersperse([1, 2, 3, 4, 5, 6], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     intersperse([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 2, 3, 4, 5, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 4) == [1, 4, 2, 4, 3, 4, 5, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 0) == [1, 2, 3, 4, 5, 6, 7]\nassert     intersperse([], 4) == []\nassert     intersperse([4, 5, 6, 7], 4) == [4, 4, 5, 6, 7]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersperse([], 4) == []\nassert     intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\nassert     intersperse([1, 2, 3, 4], 4) == [1, 4, 2, 4, 3, 4]\n\ndef compress(chars: List[str]) -> List[str]:\n    \"\"\" compress a string into a list of character strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     intersperse([1,2,3,4,5], 10) == [1, 10, 2, 10, 3, 10, 4, 10, 5, 10]\nassert     intersperse([1,2,3,4,5], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5, 1]\nassert     intersperse([1,2,3,4,5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0]\nassert     intersperse([], 10) == []\nassert     intersperse([1,2], 10) == [1, 10, 2, 10]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3, 0]\nassert     intersperse([1, 2, 3], 1) == [1, 1, 0, 2, 1, 3, 1]\nassert     intersperse([1, 2, 3], 2) == [1, 2, 2, 0, 3, 2]\nassert     intersperse([1, 2, 3], 3) == [1, 2, 3, 3, 0, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 2, 3, 4, 4, 0, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     intersperse([1, 2, 3, 4], 5) == [5, 1, 5, 2, 5, 3, 5, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5, 6], 7) == [7, 1, 7, 2, 7, 3, 7, 4, 7, 5, 7, 6, 7]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0]\nassert     intersperse([], 0) == []\nassert     intersperse([1], 0) == [1]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     intersperse([1,2,3],4) == [1,4,2,4,3,4]\nassert     intersperse([1,2,3],0) == [1,0,2,0,3,0]\nassert     intersperse([],4) == [4]\nassert     intersperse([1,4,3,2],5) == [1,5,4,5,3,5,2,5]\n\n\ndef intersperse_2(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Use extra space instead of delimeter\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(((((((())()))))))\") == [0, 0, 1, 2, 3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(((())))\") == [2, 1, 0]\nassert     parse_nested_parens(\"(((())())\") == [3, 2, 1, 0]\nassert     parse_nested_parens(\"()()()()\") == [0, 0, 0, 0]\nassert     parse_nested_parens(\"((())()\") == [2, 1, 0]\nassert     parse_nested_parens(\"()(())()\") == [1, 0, 1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"((())()())\") == [2, 2, 2]\nassert     parse_nested_parens(\"((()(()())))\") == [3, 3]\nassert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"(()())\") == [1, 1]\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(((())))\") == [1, 2, 2, 1]\nassert     parse_nested_parens(\"(()(()))\") == [1, 2, 1, 1]\nassert     parse_nested_parens(\"((()((()())))(((()()()))()))\") == [3, 3, 2, 2, 2, 1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(())\") == [0,1]\nassert     parse_nested_parens(\"(()()())\") == [0,1,2]\nassert     parse_nested_parens(\"((()())(()(())))\") == [0,1,2,2,2]\nassert     parse_nested_parens(\"((()())(()(())))\") == [0,1,2,2,2]\nassert     parse_nested_parens(\"(()(())(())())\") == [0,1,2,2,2]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(())\") == [0], \"one parentheses\"\nassert     parse_nested_parens(\"()()(())\") == [1, 1, 0], \"two parentheses\"\nassert     parse_nested_parens(\"(((()))((())))\") == [3, 2, 2, 1, 1, 0], \"three parentheses\"\nassert     parse_nested_parens(\"(((()())))\") == [3, 2, 1, 1, 0], \"four parentheses\"\nassert     parse_nested_parens(\"((((((((((((((())))))))))))))\") == [9], \"eight parentheses\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('((())())') == [2, 2, 2, 0, 0]\nassert     parse_nested_parens('((())())') == [3, 2, 2, 0, 0]\nassert     parse_nested_parens('()') == [0, 0]\nassert     parse_nested_parens('(()') == [1, 1]\nassert     parse_nested_parens('(())()') == [2, 1, 1, 1, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2, 1, 0]\nassert     parse_nested_parens(\"((()())(()))\") == [3, 2, 3, 2, 3, 1, 2]\nassert     parse_nested_parens(\"((()(()()))())\") == [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0]\n\n\ndef parse_2d_list(input_str: str) -> List[List[int]]:\n    \"\"\" Given a string representing a 2d list of integers, output a list of lists of integers representing the 2d list.\n    E.g. \"(1 2 3) (4 5 6) (7 8 9)\" should output [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"((())())\") == [1, 2]\nassert     parse_nested_parens(\"(()(()())())\") == [2, 3]\nassert     parse_nested_parens(\"((()(()())())())\") == [3, 4]\nassert     parse_nested_parens(\"()()(()())()(())()\") == [0, 0, 1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"((()))\")                 == [0,0,1,1]\nassert     parse_nested_parens(\"(((())))\")             == [0,0,0,2,0,1,0]\nassert     parse_nested_parens(\"(((((())))))\")         == [0,0,0,0,0,0,0,3,0,0,1,0,0]\nassert     parse_nested_parens(\"()()()()(((()((((()))()((()(()))))))))\")     == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with given prefix\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef get_squared_values(numbers: List[float]) -> List[float]:\n    \"\"\" Return the square of all values in input list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"abc\") == [\"abc\", \"ab\", \"cba\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"123\") == [\"123\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"123a\") == []\nassert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"1234\") == []\nassert     filter_by_substring([\"abc\", \"xyz\", \"123\", \"ab\", \"cba\"], \"\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_substring(['mama', 'papa', 'baby', 'dog'], 'o') == ['mama', 'papa', 'baby']\nassert     filter_by_substring(['mama', 'papa', 'baby', 'dog'], 'p') == ['papa', 'baby']\nassert     filter_by_substring(['mama', 'papa', 'baby', 'dog'], 'd') == ['dog']\nassert     filter_by_substring(['mama', 'papa', 'baby', 'dog'],'m') == ['mama']\nassert     filter_by_substring(['mama', 'papa', 'baby', 'dog'], 'a') == ['mama', 'papa', 'baby', 'dog']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['acc','baa','cdf','hello'], 'll') == ['acc','baa','hello']\nassert     filter_by_substring(['acc','baa','cdf','hello'],'') == ['acc','baa','cdf','hello']\nassert     filter_by_substring(['acc','baa','cdf','hello'], 'a') == ['acc','baa','cdf']\nassert     filter_by_substring(['acc','baa','cdf','hello'], 'baa') == ['baa']\nassert     filter_by_substring(['acc','baa','cdf','hello'], 'cc') == ['acc','baa','cdf','hello']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"1\", \"2\", \"3\", \"4\"], \"3\") == [\"3\"], \"case1: should return ['3']\"\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\"], \"11\") == [], \"case2: should return []\"\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\"], \"4\") == [\"4\"], \"case3: should return ['4']\"\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\"], \"21\") == [], \"case4: should return []\"\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], \"3\") == [\"3\", \"4\", \"5\"], \"case5: should return ['3', '4', '5']\"\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"abc\", \"def\", \"ghi\"], \"def\") == [\"def\"]\nassert filter_by_substring([\"abc\", \"def\", \"ghi\"], \"ghi\") == [\"ghi\"]\nassert filter_by_substring([\"abc\", \"def\", \"ghi\"], \"\") == [\"abc\", \"def\", \"ghi\"]\nassert filter_by_substring([\"abc\", \"def\", \"ghi\"], \"abcdef\") == [\"abc\", \"def\"]\nassert filter_by_substring([\"abc\", \"def\", \"ghi\"], \"cde\") == [\"abc\", \"def\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_substring(['one', 'two', 'three', 'four'], 'two') == ['two', 'four']\nassert filter_by_substring(['one', 'two', 'three', 'four'], 'two') == ['two', 'four']\nassert filter_by_substring(['one', 'two', 'three', 'four'], 'zero') == []\nassert filter_by_substring(['one', 'two', 'three', 'four'], '') == ['one', 'two', 'three', 'four']\nassert filter_by_substring(['one', 'two', 'three', 'four'], 'five') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"fish\", \"dog\", \"cat\"], \"f\") == [\"fish\"]\nassert     filter_by_substring([\"fish\", \"dog\", \"cat\"], \"dog\") == [\"dog\"]\nassert     filter_by_substring([\"fish\", \"dog\", \"cat\"], \"fish\") == [\"fish\"]\nassert     filter_by_substring([\"fish\", \"dog\", \"cat\"], \"xx\") == []\nassert     filter_by_substring([\"fish\", \"dog\", \"cat\"], \"\") == [\"fish\", \"dog\", \"cat\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"hello\", \"world\", \"earth\"], \"a\") == [\"hello\", \"world\"]\nassert     filter_by_substring([\"hello\", \"world\", \"earth\"], \"he\") == [\"hello\", \"world\"]\nassert     filter_by_substring([\"hello\", \"world\", \"earth\"], \"hello\") == [\"hello\", \"world\", \"earth\"]\nassert     filter_by_substring([\"hello\", \"world\", \"earth\"], \"x\") == []\nassert     filter_by_substring([\"hello\", \"world\", \"earth\"], \"\") == [\"hello\", \"world\", \"earth\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\ndef palindrome(word: str) -> bool:\n    \"\"\" For a given word, return True if the word is a palindrome (a palindrome is a word, that reads the same \n    from the beginning and from the end, e.g. \"kayak\")\n    \"\"\"\n    pass\n\n\ndef palindrome_sentence(sentence: str) -> bool:\n    \"\"\" For a given sentence, return True if all its words are palindromes\n    \"\"\"\n    pass\n\n\ndef reverse(number: int) -> int:\n    \"\"\" Reverse an integer number\n    \"\"\"\n    pass\n\n\ndef reverse_sentence(sentence: str) -> str:\n    \"\"\" Reverse a given sentence\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nprint(sum_product([0, 1, 2, 3, 4, 5]))"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef squares(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of the squares of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of the squares of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 0]) == (6, 6)\nassert     sum_product([]) == (0, 1)\n\nprint('sum_product is correct')\n\ndef count_smileys(arr: List[str]) -> int:\n    \"\"\" Given a list of strings, count the number of smiling faces in the list.\n    Return a number between 0 and 4, where:\n        0 means no smiling faces;\n        1 means one smiling face;\n        2 means 2 smiling faces;\n        3 means 3 smiling faces;\n        4 means 4 smiling faces.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return (sum, product)\n\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_product([3, 4, 5]) == (8, 15), \"Sum of the list numbers should be equal to 8\"\nassert     sum_product([3, 4, 5, 0]) == (8, 15), \"Sum of the list numbers should be equal to 8\"\nassert     sum_product([]) == (0, 1), \"Sum of an empty list should be equal to 0\"\n\n\ndef count_digits(n: int) -> int:\n    \"\"\" Return how many digits the integer n has.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef sum_product_alt(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef sum_of_squares(numbers: List[int]) -> int:\n    \"\"\" Return the sum of all the squares of the numbers in a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (sum_product([1, 2, 3, 4, 5]) == (15, 120)), 'Wrong solution'\nassert     (sum_product([1, 2, 3, -4, 5]) == (0, -40)), 'Wrong solution'\nassert     (sum_product([-1, -2, -3, -4, -5]) == (-15, -600)), 'Wrong solution'\nassert     (sum_product([]) == (0, 1)), 'Wrong solution'\n\ndef sum_product_unbounded(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert     rolling_max([10, 7, 8, 9, 4, 6, 5, 7, 8, 9, 10, 11, 12]) == [10, 10, 10, 9, 9, 8, 8, 8, 7, 6, 5, 5]\nassert     rolling_max([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef is_valid(parent_graph: List[List[int]], child: int) -> bool:\n    \"\"\" Check if a child vertex in a graph is valid.\n    A vertex is valid iff, it has not been visited, and is a parent of its parent.\n    \"\"\"\n    pass\n\n\ndef find_solution(parent_graph: List[List[int]],\n                  child: int) -> List[int]:\n    \"\"\"\n    Given a parent graph, and a child vertex, traverse the graph and find a valid path.\n    If such path does not exist, return an empty list.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef generate_candidates(candidates_array: List[int], window_size: int, window_position: int) -> List[int]:\n    \"\"\" Generate all the possible candidates which could be used to find the maximum of a window of size\n    window_size starting from position window_position.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert rolling_max([3, 4, 1, 5, 4, 3, 2, 6]) == [4, 4, 4, 4, 4, 5, 5, 6]\nassert \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"same\"\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"same\"\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"same\"\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"same\"\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"same\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 5, 3, 4, 5]) == [1, 5, 5, 4, 5]\nassert     rolling_max([5, 1, 2, 3, 4]) == [5, 5, 5, 5, 4]\nassert     rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]\n\n\ndef rolling_max_int(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i + 1]))\n    return max_numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nassert     rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     rolling_max([1, 3, 2, 1, 4]) == [1, 3, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"abaa\") == \"abaaba\"\nassert     make_palindrome(\"aa\") == \"aaa\"\nassert     make_palindrome(\"aaabaa\") == \"abaaba\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aa\") == \"aa\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_palindrome('taco cat') == 'tacocat','make_palindrome should return tacocat'\nassert     make_palindrome('tacocat') == 'taco cat','make_palindrome should return taco cat'\nassert     make_palindrome('tacocat') == 'taco cat','make_palindrome should return taco cat'\nassert     make_palindrome('taco cat') == 'taco cat','make_palindrome should return taco cat'\nassert     make_palindrome('taco cat') == 'taco cat','make_palindrome should return taco cat'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     make_palindrome('civic') == 'ivicc'\nassert     make_palindrome('ivicc') == 'civic'\nassert     make_palindrome('civicc') == 'civicc'\nassert     make_palindrome('abc') == 'abbc'\nassert     make_palindrome('abbc') == 'abc'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef main():\n    print('this is a solution for exercise:')\n    print('exercise 2.1')\n    print('firstly, test is_palindrome')\n    print(is_palindrome('amanaplanacanalpanama'))\n    print(is_palindrome('amanaplanacanalpandemonium'))\n    print(is_palindrome('a'))\n    print(is_palindrome('ab'))\n\n    print('\\n')\n    print('exercise 2.2')\n    print('firstly, test is_palindrome')\n    print(is_palindrome('amanaplanacanalpanama'))\n    print(is_palindrome('amanaplanacanalpandemonium'))\n    print(is_palindrome('a'))\n    print(is_palindrome('ab'))\n\n    print('\\n')\n    print('exercise 2.3')\n    print('firstly, test make_palindrome')\n    print(make_palindrome('amanaplanacanalpanama'))\n    print(make_palindrome('amanaplanacanalpandemonium'))\n    print(make_palindrome('a'))\n    print(make_palindrome('ab'))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_palindrome('abba') == True\nassert     is_palindrome('abbba') == True\nassert     is_palindrome('abbab') == True\nassert     is_palindrome('abb') == False\nassert     is_palindrome('a') == True\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('baa') == 'baa'\nassert     make_palindrome('baaac') == 'baaacbca'\nassert     make_palindrome('bacbaa') == 'baaabacba'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_xor('101010', '010101') == '101011'\nassert     string_xor('101010', '101011') == '100010'\n\ndef key_xor(key: str, msg: str) -> str:\n    \"\"\" XOR the input key with msg.\n    The key is a string consisting of only 1s and 0s.\n    The msg is a string consisting only of 1s and 0s.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_xor(\"10110\", \"10101\") == \"10111\"\nassert     string_xor(\"111111111111111111111111111111110\",\n                   \"111111111111111111111111111111110\") == \"10111111111111111111111111111111\"\nassert     string_xor(\"111111111111111111111111111111110\",\n                   \"111111111111111111111111111111110\") == \"10111111111111111111111111111111\"\nassert     string_xor(\"111111111111111111111111111111110\",\n                   \"111111111111111111111111111111110\") == \"10111111111111111111111111111111\"\nassert     string_xor(\"111111111111111111111111111111110\",\n                   \"111111111111111111111111111111110\") == \"10111111111111111111111111111111\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_xor('101010', '101010') == '101010'\nassert     string_xor('111111', '010101') == '111111'\nassert     string_xor('100101', '100101') == '110101'\nassert     string_xor('1010', '1010') == '1010'\n\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_xor('1100', '1110') == '1000'\nassert     string_xor('1010', '1011') == '1010'\nassert     string_xor('1010', '1010') == '1010'\nassert     string_xor('1011', '1010') == '1100'\nassert     string_xor('1101', '1110') == '1011'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    string_xor(a='10111110', b='10110110') == '10110101'\n    string_xor(a='10111110', b='10111110') == '10111110'\n    string_xor(a='10111110', b='10111110') == '10111110'\n    string_xor(a='10111110', b='10111110') == '10111110'\n    string_xor(a='10111110', b='10111110') == '10111110'\n\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"0\", \"1\") == \"1\"\nassert     string_xor(\"1\", \"1\") == \"0\"\nassert     string_xor(\"0\", \"0\") == \"0\"\n\ndef array_xor(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two lists a and b consisting of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_xor('101', '101') == '010'\nassert     string_xor('1010', '1011') == '1010'\nassert     string_xor('1010', '10110') == '1010'\n\ndef string_to_bits(a: str) -> List[int]:\n    \"\"\" Input is a string consisting of 1s and 0s.\n    Convert the input string into a list of integers. Each integer stands\n    for one bit of the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_xor('10110', '10110') == '10100', 'wrong result'\nassert     string_xor('10110', '10111') == '11110', 'wrong result'\nassert     string_xor('10110', '11110') == '10110', 'wrong result'\nassert     string_xor('10110', '11111') == '11010', 'wrong result'\nassert     string_xor('10110', '01110') == '11100', 'wrong result'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_xor('11', '1') == '10', \"1st example\"\nassert     string_xor('101010', '10101010') == '101010', \"2nd example\"\nassert     string_xor('1', '') == '1', \"3rd example\"\nassert     string_xor('101010', '10101010') == '10101110', \"4th example\"\nassert     string_xor('1111', '1111') == '0', \"5th example\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     longest([\"a\", \"abc\", \"d\", \"a\"]) == \"abc\"\nassert     longest([\"\", \"abc\", \"\", \"d\", \"a\"]) == \"abc\"\nassert     longest([\"a\", \"a\", \"a\"]) == \"a\"\nassert     longest([]) is None\nassert     longest([\"\", \"\"]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     longest([\"a\", \"b\", \"bbbbbbbbbbb\", \"aaa\"]) == \"bbbbbbbbbbb\", \"wrong output\"\nassert     longest([\"a\", \"b\", \"\", \"aaa\"]) == \"aaa\", \"wrong output\"\nassert     longest([\"\", \"\", \"\"]) == None, \"wrong output\"\nassert     longest([\"\", \"\"]) == None, \"wrong output\"\nassert     longest([]) == None, \"wrong output\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nprint(longest(['a', 'b', 'c', 'd', 'e']))\nprint(longest(['b', 'c', 'd', 'e']))\nprint(longest(['b', 'c', 'd', 'e', 'f']))\nprint(longest([]))\nprint(longest(['a']))\n\n\n\ndef longest_v2(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef add_zeros(number: str, length: int) -> str:\n    \"\"\" Given a number with at least length digits, adds zeros to the right of the number until\n    the length is reached.\n\n    >>> add_zeros('5', 2)\n    '05'\n    >>> add_zeros('5', 3)\n    '005'\n    >>> add_zeros('5', 4)\n    '500'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     longest(['a', 'abc', 'abcd', 'abcde']) == 'abcde'\nassert     longest(['ab', 'abc', 'abcd', 'abcde']) == 'ab'\nassert     longest(['a', 'ab', 'abc', 'abcd', 'abcde']) == 'ab'\nassert     longest(['abcd', 'abc', 'ab', 'abcde']) == 'abcd'\nassert     longest(['abcd', 'abcde', 'ab', 'abc', 'abce']) == 'abcde'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     longest([\"abc\", \"d\", \"efg\"]) == \"abc\"\nassert     longest([\"gh\", \"abcd\", \"qwerty\"]) == \"gh\"\nassert     longest([\"abcd\", \"abcd\", \"abcde\"]) == \"abcd\"\nassert     longest([\"abc\", \"abc\", \"abcde\"]) == \"abc\"\nassert     longest([\"\", \"\", \"abcd\"]) == \"abcd\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     longest([\"\", \"\", \"\"]) == None\nassert     longest([\"\"]) == None\nassert     longest([\"\", \"a\"]) == \"a\"\nassert     longest([\"a\", \"a\", \"b\"]) == \"b\"\nassert     longest([\"aaa\", \"aaaa\", \"aaaaa\"]) == \"aaaaa\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     longest([\"a\", \"as\", \"jfk\", \"dfk\"]) == \"jfk\"\nassert     longest([\"a\", \"as\", \"jfk\"]) == \"a\"\nassert     longest([\"as\", \"jfk\"]) == \"as\"\nassert     longest([\"a\", \"as\", \"jfk\", \"sdf\", \"dfk\"]) == \"sdf\"\nassert     longest([]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     longest([\"aaa\", \"bbb\", \"ccc\"]) == \"aaa\"\nassert     longest([\"a\", \"abc\", \"ab\"]) == \"abc\"\nassert     longest([\"a\", \"bc\", \"a\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"a\"]) == \"a\"\nassert     longest([\"ab\", \"ab\"]) == \"ab\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     longest(['', '']) == None\nassert     longest(['', '1']) == '1'\nassert     longest(['1', '2', '3']) == '3'\nassert     longest(['1', '2', '3', '4', '5', '6', '7']) == '7'\nassert     longest(['1', '2', '3', '4', '5', '6', '7', '8']) == '8'\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(6, 9) == 3\nassert     greatest_common_divisor(9, 6) == 3\nassert     greatest_common_divisor(8, 2) == 2\nassert     greatest_common_divisor(0, 1) == 1\nassert     greatest_common_divisor(1, 0) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(10, 6) == 2\nassert     greatest_common_divisor(3, 9) == 3\nassert     greatest_common_divisor(6, 12) == 6\nassert     greatest_common_divisor(9, 15) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \ngreatest_common_divisor(15, 15) == 15\ngreatest_common_divisor(12, 15) == 1\ngreatest_common_divisor(8, 15) == 1\ngreatest_common_divisor(3, 15) == 1\ngreatest_common_divisor(15, 8) == 1\ngreatest_common_divisor(0, 15) == 1\ngreatest_common_divisor(0, 8) == 1\ngreatest_common_divisor(15, 0) == 1\ngreatest_common_divisor(8, 0) == 1\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(12, 16) == 1\ngreatest_common_divisor(15, 16) == 1\ngreatest_common_divisor(16, 15) == 1\ngreatest_common_divisor(15, 12) == 1\ngreatest_common_divisor(24, 16) == 1\ngreatest_common_divisor(24, 18) == 1\ngreatest_common_divisor(24, 19) == 1\ngreatest_common_divisor(24, 20) == 1\ngreatest_common_divisor(24, 21) == 1\ngreatest_common_divisor(24, 22) == 1\ngreatest_common_divisor(24, 23) == 1\ngreatest_common_divisor(24, 24) == 1\ngreatest_common_divisor(8, 16) == 1\ngreatest_common_divisor(16, 8) == 1\ngreatest_common_divisor(8, 8) == 8\ngreatest_common_divisor(8, 9) == 1\ngreatest_common_divisor(8, 17) == 1\ngreatest_common_divisor(8, 18) == 1\ngreatest_common_divisor(8, 19) == 1\ngreatest_common_divisor(8, 20) == 1\ngreatest_common_divisor(8, 21) == 1\ngreatest_common_divisor(8, 22) == 1\ngreatest_common_divisor(8, 23) == 1\ngreatest_common_divisor(8, 24) == 1\ngreatest_common_divisor(8, 25) == 1\ngreatest_common_divisor(8, 26) == 1\ngreatest_common_divisor(8, 27) == 1\ngreatest_common_divisor(8, 28) == 1\ngreatest_common_divisor(8, 29) == 1\ngreatest_common_divisor(8, 30) == 1\ngreatest_common_divisor(8, 31) == 1\ngreatest_common_divisor(8, 32) == 1\ngreatest_common_divisor(8, 33) == 1\ngreatest_common_divisor(8, 34) == 1\ngreatest_common_divisor(8, 35) == 1\ngreatest_common_divisor(8, 36) == 1\ngreatest_common_divisor(8, 37) == 1\ngreatest_common_divisor(8, 38) == 1\ngreatest_common_divisor(8, 39) == 1\ngreatest_common_divisor(8, 40) == 1\ngreatest_common_divisor(8, 41) == 1\ngreatest_common_divisor(8, 42) == 1\ngreatest_common_divisor(8, 43) == 1\ngreatest_common_divisor(8, 44) == 1\ngreatest_common_divisor(8, 45) == 1\ngreatest_common_divisor(8, 46) == 1\ngreatest_common_divisor(8, 47) == 1\ngreatest_common_divisor(8, 48) == 1\ngreatest_common_divisor(8, 49) == 1\ngreatest_common_divisor(8, 50) == 1\ngreatest_common_divisor(8, 51) == 1\ngreatest_common_divisor(8, 52) == 1\ngreatest_common_divisor(8, 53) == 1\ngreatest_common_divisor(8, 54) == "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(54, 24) == 6\nassert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(2, 6) == 2\nassert     greatest_common_divisor(9, 15) == 3\nassert     greatest_common_divisor(20, 10) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(123, 654) == 3, greatest_common_divisor(123, 654)\nassert     greatest_common_divisor(1, 5) == 1, greatest_common_divisor(1, 5)\nassert     greatest_common_divisor(123, 654) == greatest_common_divisor(636, 996), greatest_common_divisor(123, 654)\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     all_prefixes('') == []\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('abc') == ['ab', 'a', 'abc']\nassert     all_prefixes('abcd') == ['ab', 'a', 'abcd']\nassert     all_prefixes('abcdefg') == ['ab', 'a', 'abcd', 'abfg', 'abefg', 'abef', 'abfgcd', 'abg', 'abc', 'abcd', 'abcde', 'abcdeg', 'abce', 'abcefg', 'abceg', 'abcdef', 'abcdefg']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"abc\") == ['', 'a', 'ab', 'abc']\nassert     all_prefixes(\"abcde\") == ['', 'a', 'ab', 'abc', 'abcd', 'abcde']\nassert     all_prefixes(\"\") == ['', '']\nassert     all_prefixes(\" \") == [' ','']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('ab') == ['', 'a', 'ab']\nassert     all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abcdx') == ['', 'a', 'ab', 'abc', 'abcd', 'abcdx']\nassert     all_prefixes('abcdex') == ['', 'a', 'ab', 'abc', 'abcd', 'abcdx', 'abcdex']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     all_prefixes('') == []\nassert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abcab') == ['a', 'ab', 'abc', 'abca', 'abcab']\nassert     all_prefixes('abcabc') == ['a', 'ab', 'abc', 'abca', 'abcab', 'abcabc']\nassert     all_prefixes('ab') == ['a', 'ab']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     all_prefixes('cab') == ['c', 'ca', 'cb']\nassert     all_prefixes('abc') == ['a', 'ab', 'abc']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abcdef\") == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     all_prefixes(\"pytho\") == ['', 'p', 'py', 'pyth', 'pyto', 'pytho']\nassert     all_prefixes(\"\") == ['']\n\ndef longest_prefix(string1: str, string2: str) -> str:\n    \"\"\"Return longest common prefix of two strings.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     all_prefixes('a') == ['a']\nassert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('') == []\nassert     all_prefixes('abb') == ['a', 'ab', 'abb']\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"\") == [\"\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\n\ndef longest_prefix(string: str) -> str:\n    \"\"\" Find longest prefix of input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert all_prefixes('ab') == ['', 'a', 'ab']\nassert all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd']\nassert all_prefixes('abcdx') == ['', 'a', 'ab', 'abc', 'abcd', 'abcdx']\nassert all_prefixes('abcde') == ['', 'a', 'ab', 'abc', 'abcd', 'abce', 'abcdx', 'abcde']\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(0) == '0'\nassert     string_sequence(-10) == '0'\nprint('string_sequence passes all tests')\n\ndef scramble_string(s: str) -> str:\n    \"\"\" Scramble string s and return new string where characters have been shuffled around\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(9) == '0 1 2 3 4 5 6 7 8'\nassert     string_sequence(1) == '0'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_sequence(0)             == \"0\"\nassert     string_sequence(1)             == \"0 1\"\nassert     string_sequence(2)             == \"0 1 2\"\nassert     string_sequence(3)             == \"0 1 2 3\"\nassert     string_sequence(4)             == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \nprint(\"String sequence:\", string_sequence(5))\n\ndef number_sequence(n: int) -> int:\n    \"\"\" Return a number starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \" 0\"\nassert     string_sequence(2) == \" 0 1\"\nassert     string_sequence(3) == \" 0 1 2\"\nassert     string_sequence(4) == \" 0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_sequence(2) == \"0 1\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n\n\ndef int_sequence(n: int) -> int:\n    \"\"\" Return a space-delimited string of numbers from 0 to n-1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\" \") == 1\nassert     count_distinct_characters(\"123123123123\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"aa\") == 2\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"aaBcaCAAA\") == 6\nassert     count_distinct_characters(\"aaA\") == 3\n\ndef count_anagrams(string: str) -> int:\n    \"\"\" Given a string, find out how many permutations of the string in anagrams does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"aBcde\") == 5\nassert     count_distinct_characters(\"aBcDe\") == 5\nassert     count_distinct_characters(\"aBcDe1\") == 6\nassert     count_distinct_characters(\"ABCde\") == 5\nassert     count_distinct_characters(\"ABCDe\") == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(string=\"aBcDe\") == 5\nassert     count_distinct_characters(string=\"abcDe\") == 4\nassert     count_distinct_characters(string=\"\") == 0\nassert     count_distinct_characters(string=\"aa\") == 2\nassert     count_distinct_characters(string=\"aA\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(string = \"abccc\") == 3\nassert     count_distinct_characters(string = \"ABCD\") == 4\nassert     count_distinct_characters(string = \"abcD\") == 4\nassert     count_distinct_characters(string = \"\") == 0\nassert     count_distinct_characters(string = \"aaa\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"\") == 0, \"Empty string\"\nassert     count_distinct_characters(\"a\") == 1, \"One character\"\nassert     count_distinct_characters(\"ab\") == 2, \"Two characters\"\nassert     count_distinct_characters(\"abc\") == 3, \"Three characters\"\nassert     count_distinct_characters(\"abBc\") == 3, \"Two case distinct characters\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"abcA\") == 3\nassert     count_distinct_characters(\"ABc\") == 3\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert\n\ndef has_palindrome(string: str) -> bool:\n    \"\"\" Find out whether this string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"abcABC\") == 3\nassert     count_distinct_characters(\"ABCabc\") == 4\nassert     count_distinct_characters(\"aAa\") == 2\nassert     count_distinct_characters(\"\") == 0\n\ndef has_unique_chars(string: str) -> bool:\n    \"\"\" Determine if string has all unique characters (in any case).\n        Return true if string has all unique characters, else false.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     parse_music('.|.|.|..|..|.|.|.|||.|.|.|.|') == [1, 2, 1, 1, 4, 4, 1, 1, 1, 1]\nassert     parse_music('.|.|.|..|..|.|.|.|||.|.|.|.|') == [1, 2, 1, 1, 4, 4, 1, 1, 1, 1]\nassert     parse_music('.|.|.|..|..|.|.|.|||.|.|.|.|') == [1, 2, 1, 1, 4, 4, 1, 1, 1, 1]\nassert     parse_music('.|.|.|..|..|.|.|.|||.|.|.|.|') == [1, 2, 1, 1, 4, 4, 1, 1, 1, 1]\nassert     parse_music('.|.|.|..|..|.|.|.|||.|.|.|.|') == [1, 2, 1, 1, 4, 4, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     parse_music(\"o|.|o|o|o|o|o|.|o|o|o|o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     parse_music(\"o|o|o|o|.|.|.|.|\") == [4, 4, 4, 4, 1, 1, 1, 1]\nassert parse_music(\".o|o|o|o|o|o|o|o|o|.|.|.|.|\") == [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1]\nassert parse_music(\"o|o|o|o|o|.o|o|.o|.|.o|.o|.o|o|o|o|o|.o|.|.o|.|.o|.o|.o|.o|.o|o|\") == [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1]\nassert parse_music(\"|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|."
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     parse_music('.|.|.|.|.|.|.|.') == [1, 1, 1, 1, 1, 1, 1], 'Wrong result for parse_music'\nassert     parse_music('.|..|..|..|..|.|.') == [1, 1, 1, 2, 1], 'Wrong result for parse_music'\nassert     parse_music('|||||||||') == [4, 4, 4, 4, 4], 'Wrong result for parse_music'\nassert     parse_music('o|.o|o.') == [2, 1, 1, 1, 2], 'Wrong result for parse_music'\nassert     parse_music('..|.|..|.|..|.|.') == [1, 1, 2, 1, 1, 1, 1], 'Wrong result for parse_music'\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     parse_music(\"o\") == [4]\nassert     parse_music(\"o|\") == [2]\nassert     parse_music(\"o.|\") == [1]\nassert     parse_music(\"oo\") == [4, 4]\nassert     parse_music(\"oo|\") == [2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     parse_music(\"o o o o o| o o o o'|.|.|.|.|.|.|.|.|.|\") == [4, 2, 1, 4, 1, 4, 1, 4]\nassert     parse_music(\".|.|.|.|.|.|.|.|.|.|\") == [4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music(\".|.|.|.|.|.|.|.|.|.|'\") == [4, 4, 4, 4, 4, 4, 4, 4, 4]\n\n\ndef parse_music_2(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last. This function is quite similar to parse_music from previous task. You only need to\n    change a variable, which can be named `part_of_a_note` to change the result of this function.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     parse_music('o|.|.|o|.|.|.|.|o|.|.|.|o|.|.|.|o|.|.|.|o|') == [4,2,4,4,2,4,2,4,2,4,2,4,2]\nassert     parse_music('o|...o|.|.|o|...o|.|.|o|...o|.|.|o|...o|.|.|o|...o|.|.|o|...o|.|.|o|...o|') == [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]\n\n\ndef get_nth_substring(string: str, n: int) -> str:\n    \"\"\" Input to this function is a string and an integer n. Your task is to return nth substring of this string.\n    If the string consists of only one character, return this character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     parse_music(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     parse_music(\"o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     parse_music('o|.|o|o|o|') == [4, 2, 4, 4, 4]\nassert     parse_music('oo') == [4, 4]\nassert     parse_music('oo|oo|oo') == [4, 4, 4, 2, 4, 4, 4]\nassert     parse_music('oo|oo|oo|oo') == [4, 4, 4, 2, 4, 4, 4, 4]\nassert     parse_music('.oo|.oo|.oo') == [2, 4, 4, 4, 2, 4, 4]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     how_many_times('python', 'th') == 1\nassert     how_many_times('python', 'o') == 2\nassert     how_many_times('python', 'n') == 1\nassert     how_many_times('python','m') == 0\n\ndef is_substr(string: str, substring: str) -> bool:\n    \"\"\" Find if the original string contains the given sub-string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     how_many_times('aaa', 'a') == 3\nassert     how_many_times('aaa', 'aa') == 2\nassert     how_many_times('aa', 'aa') == 1\nassert     how_many_times('aaa', 'aaa') == 1\nassert     how_many_times('aaa', '') == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     how_many_times(\"a\", \"a\") == 1\nassert     how_many_times(\"a\", \"aa\") == 1\nassert     how_many_times(\"a\", \"aaaaa\") == 1\nassert     how_many_times(\"aa\", \"a\") == 1\nassert     how_many_times(\"aa\", \"aa\") == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    print(how_many_times('hello', 'l'))\n    print(how_many_times('hello', 'll'))\n    print(how_many_times('hello', 'e'))\n    print(how_many_times('hello', 'll'))\n    print(how_many_times('hello', ''))\n    print(how_many_times('hello', 'hi'))\n    print(how_many_times('hello', 'lll'))\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     how_many_times(string='aaa', substring='aa') == 2, \"wrong result\"\nassert     how_many_times(string='aaa', substring='a') == 1, \"wrong result\"\nassert     how_many_times(string='aa', substring='a') == 1, \"wrong result\"\nassert     how_many_times(string='aa', substring='b') == 0, \"wrong result\"\nassert     how_many_times(string='', substring='') == 0, \"wrong result\"\nprint(\"how_many_times ok\")\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     how_many_times('this is a test', 'a') == 3\nassert     how_many_times('this is a test', 'is') == 2\nassert     how_many_times('this is a test', 'th') == 1\nassert     how_many_times('this is a test', 'thi') == 2\nassert     how_many_times('this is a test', 'thi is') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     how_many_times('astring','string') == 0\nassert     how_many_times('astring', 'ring') == 1\nassert     how_many_times('abcdabcdabcd', 'bc') == 4\nassert     how_many_times('abcdabcdabcd', 'd') == 3\nassert     how_many_times('abcdabcdabcd', 'cd') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef test_how_many_times():\n    assert how_many_times(string=\"abcd\", substring=\"\") == 0\n    assert how_many_times(string=\"aaaa\", substring=\"aa\") == 2\n    assert how_many_times(string=\"abcd\", substring=\"cd\") == 1\n    "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_numbers('one nine eight four five two') == 'one nine eight four five two'\nassert     sort_numbers('nine one three two') == 'one two three nine'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('nine eight three seven two one six five four') == 'one two three four five six seven eight nine'\nassert     sort_numbers('five five') == 'five five'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_numbers('9 7 3 8 5 2 6 4 1 0') == '012396852 4 3 7 5 8 9 6 2 6 4 1 0'\nassert     sort_numbers('9 7 3 8 5 2 6 4 1 0 11') == '012396852 4 3 7 5 8 9 6 2 6 4 1 0 11'\nassert     sort_numbers('4 7 3 8 5 2 6 4 1 0') == '01234764 0 4 1 2 3 4 5 6 7 8'\nassert     sort_numbers('4 7 3 8 5 2 6 4 1 0 11') == '01234764 0 4 1 2 3 4 5 6 7 8 11'\nassert     sort_numbers('0') == '0'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_numbers('2 8 9 4 5 3 1') == '1 2 3 4 5 8 9'\nassert     sort_numbers('3 9 5 6 8 0 4 2') == '0 2 3 4 5 6 8 9'\nassert     sort_numbers('0 3 4 5 6 7 8 9') == '0 3 4 5 6 7 8 9'\nassert     sort_numbers('5 7 8 9 0 3 4 1') == '1 2 3 4 5 7 8 9 0'\nassert     sort_numbers('1 3 5 7 9 0 4 8 2') == '0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_numbers('eight one five zero seven two six four') == '0 1 2 3 4 5 6 7 8'\nassert     sort_numbers('nine nine nine nine three three three') == '0 3 3 9 9 9 9'\nassert     sort_numbers('zero') == '0'\nassert     sort_numbers('two one') == '1 2'\n\n\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"five one two three four\") == \"one, two, three, five, four\"\nassert     sort_numbers(\"eight nine seven six five four\") == \"four, five, six, seven, eight, nine\"\nassert     sort_numbers(\"three five four one two\") == \"one, two, three, four, five\"\nassert     sort_numbers(\"six seven eight five four three\") == \"three, four, five, six, seven\"\n\ndef get_num_tens(number: int) -> int:\n    \"\"\" Given a number from 1 to 10, return the number of times that number is in the first tens place\n    E.g. get_num_tens(5) = 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_numbers('six five four three two one') == 'one two three four five six'\nassert     sort_numbers('nine eight seven six five four three two') == 'two three four five six seven eight nine'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a string of alphabets (capital or small)\n    Return the string with alphabets sorted in alphabetical order\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_numbers('2 5 6') == '2 5 6'\nassert     sort_numbers('2 3 5 6 7 9') == '2 3 5 6 7 9'\nassert     sort_numbers('1 9 3 4') == '1 3 3 4 9'\nassert     sort_numbers('9 7 2 3') == '2 3 3 7 9'\nassert     sort_numbers('6 3 5 4 2 9') == '2 3 4 5 6 9'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_numbers('9 7 3 5 4 2 0 1 8 7') == '012345789'\nassert     sort_numbers('9 7 3 5 4 2 1 0 1 8 7') == '012345789'\nassert     sort_numbers('9 7 3 5 4 2 1 0 7 8 7') == '012345789'\nassert     sort_numbers('9 7 3 5 4 2 1 0 8 7 7') == '012345789'\nassert     sort_numbers('9 7 3 5 4 2 1 7 8 7 7') == '012345789'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_numbers('zero one two three') == 'one two zero three'\nassert     sort_numbers('three two one') == 'one two three'\nassert     sort_numbers('two three one') == 'one two three'\nassert     sort_numbers('one three two') == 'one two three'\nassert     sort_numbers('three one two') == 'one two three'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_numbers(\"five nine three one two\") == \"one two three five nine\"\nassert     sort_numbers(\"eight one four three nine seven\") == \"one three four seven eight nine\"\nassert     sort_numbers(\"zero\") == \"zero\"\n\n\ndef sort_words(words: List[str]) -> List[str]:\n    \"\"\"\n    Input is a list of words.\n    Return the list with words sorted from shortest to longest\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [3.99999999, 3.9999999999999999] == find_closest_elements([1, 1, 1, 1])\nassert     [3.99999999, 3.9999999999999999] == find_closest_elements([1, 1, 1, 2])\nassert     [3.99999999, 3.9999999999999999] == find_closest_elements([1, 1, 2, 2])\nassert     [3.99999999, 3.9999999999999999] == find_closest_elements([2, 2, 2, 2])\nassert     [3.99999999, 3.9999999999999999] == find_closest_elements([2, 2, 2, 3])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_closest_elements([5.9, 10.7, 8.3, 5.7, 6.5, 5.4]) == (5.7, 6.5)\nassert     find_closest_elements([1.3, 6.5, 8.9, 3.6, 2.5]) == (3.6, 8.9)\nassert     find_closest_elements([5.2, 7.1, 5.7, 6.2, 5.1]) == (5.1, 7.1)\nassert     find_closest_elements([1.2, 5.1, 5.5, 2.8, 4.1, 7.2]) == (2.8, 4.1)\nassert     find_closest_elements([6.4, 2.1, 3.4, 3.5, 1.4, 4.8, 1.4]) == (1.4, 3.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5]) == (1.1, 5.5)\nassert     find_closest_elements([4.2, 5.3, 5.4, 5.5, 6.5, 7.8, 8.9]) == (4.2, 8.9)\nassert     find_closest_elements([0.2, 1.3, 2.0, 5.7, 6.2]) == (0.2, 2.0)\nassert     find_closest_elements([0.2, 1.3, 2.0, 5.7, 6.2, 4.5]) == (0.2, 4.5)\nassert     find_closest_elements([0.0, 2.1, 3.2, 5.4, 6.5]) == (0.0, 3.2)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (0, 0) == find_closest_elements([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0])\nassert     (0, 2) == find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0])\nassert     (-1, 4) == find_closest_elements([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0])\nassert     (-1, 3) == find_closest_elements([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0])\nassert     (0, 3) == find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_closest_elements([0.0, 1.0]) == (0.0, 1.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0]) == (0.0, 2.0)\nassert     find_closest_elements([1.0, 1.0, 3.0]) == (1.0, 1.0)\nassert     find_closest_elements([-1.0, -1.0]) == (-1.0, -1.0)\nassert     find_closest_elements([1.0, 1.0, 2.0, 3.0, 4.0, 5.0]) == (2.0, 3.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_closest_elements([0.0, 1.0, 2.0, 3.0]) == (0.0, 2.0)\nassert find_closest_elements([3.0, 1.0, 2.0, 3.0]) == (1.0, 3.0)\nassert find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0]) == (0.0, 1.0)\nassert find_closest_elements([-1.0, 0.0, 1.0, 2.0, 3.0]) == (-1.0, 2.0)\nassert find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) == (0.0, 3.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_closest_elements([10.0, 20.0, 30.0]) == (20.0, 30.0)\nassert     find_closest_elements([20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0]) == (20.0, 20.0)\nassert     find_closest_elements([20.0, 30.0, 40.0, 50.0, 60.0]) == (30.0, 40.0)\nassert     find_closest_elements([20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0]) == (30.0, 40.0)\nassert     find_closest_elements([20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 200.0, 400.0]) == (20.0, 40.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_closest_elements([3, 6, 1, 23, 7]) == (1, 23)\nassert     find_closest_elements([0, 2, 4, 6, 8]) == (0, 8)\nassert     find_closest_elements([1, 3, 5, 7, 9]) == (1, 9)\nassert     find_closest_elements([1, 3, 5, 7, 9, 2]) == (1, 9)\nassert     find_closest_elements([1, 3, 5, 7, 9, 2, 1]) == (1, 9)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_closest_elements([4, 8, 9, 12, 2]) == (8, 2)\nassert     find_closest_elements([4, 8, 9, 12, 2, 7, 11]) == (8, 2)\nassert     find_closest_elements([4, 8, 9, 12, 2, 7, 11, 16]) == (8, 2)\nassert     find_closest_elements([4, 8, 9, 12, 2, 7, 11, 16, 12]) == (8, 2)\nassert     find_closest_elements([4, 8, 9, 12, 2, 7, 11, 16, 12, 9]) == (8, 9)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     (find_closest_elements([0, 2, 2, 4, 5, 6, 7, 8]) == [2, 8])\nassert     (find_closest_elements([3, 1, 4, 1, 5, 9, 2, 6, 5, 9]) == [1, 9])\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 9])\n\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\" Return True if the text is a palindrome, False if it is not\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    numbers.sort()\n    x = numbers[-1] - numbers[0]\n    return [(x - x_) / x for x_ in numbers]\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    numbers.sort()\n    x = numbers[-1] - numbers[0]\n    return [(x - x_) / x for x_ in numbers]\n\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    numbers.sort()\n    x = numbers[-1] - numbers[0]\n    return [(x - x_) / x for x_ in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([1, 1, 1]) == [0, 0, 0]\nassert     rescale_to_unit([2, 3, 6]) == [0, 1, 1]\nassert     rescale_to_unit([0, 0, 0]) == [0, 0, 0]\nassert     rescale_to_unit([1, 2, 3]) == [0, 1, 1]\nassert     rescale_to_unit([2, 4, 8]) == [0, 0.5, 0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0, 1, 1/2, 1]\nassert     rescale_to_unit([5, 10, 15]) == [0, 1, 2/3]\nassert     rescale_to_unit([5, 10, 15, 20]) == [0, 1, 2/3, 4/5]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 10, 15, 20]) == [0, 1, 1/2, 1, 2/3, 2/5, 2/5, 3/5]\nassert     rescale_to_unit([5, 10, 15, 20, 25]) == [0, 1, 2/3, 4/5, 5/5]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (rescale_to_unit([1, 2, 3]) == [0.0, 0.5, 1.0])\nassert     (rescale_to_unit([2, 1, 3]) == [0.5, 0.25, 1.0])\nassert     (rescale_to_unit([4, 0, 2]) == [1.0, 0.0, 0.5])\n\nprint(rescale_to_unit([1, 2, 3]))\nprint(rescale_to_unit([2, 1, 3]))\nprint(rescale_to_unit([4, 0, 2]))\n\n\ndef rescale_to_unit_b(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    scaled = sorted(numbers)\n    range_of_values = scaled[-1] - scaled[0]\n    return [(n - scaled[0]) / range_of_values for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([0]) == [0]\nassert     rescale_to_unit([1]) == [1]\nassert     rescale_to_unit([-1]) == [-1]\nassert     rescale_to_unit([1,2]) == [0.5, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef normalize_vectors(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), normalize all the elements to lie on the unit circle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0.0, 0.5, 1.0]\nassert     rescale_to_unit([2, 1]) == [0.0, 0.5]\nassert     rescale_to_unit([0, 0]) == [0.0, 0.0]\nassert     rescale_to_unit([]) == []\nassert     rescale_to_unit([5, 4, 3, 2, 1]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([1, 2]) == [0, 1]\nassert     rescale_to_unit([2, 1]) == [1, 0]\nassert     rescale_to_unit([1, 2, 3]) == [0, 1, 2]\nassert     rescale_to_unit([2, 1, 3]) == [1, 0, 2]\nassert     rescale_to_unit([1, 2, 3, 4]) == [0, 1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1, 2, 3] == filter_integers([1, 2, 3])\nassert [] == filter_integers([1, 2, 3.4])\nassert [] == filter_integers([1, 2, '3'])\nassert [1, 2, 3] == filter_integers([1, 2, 3, True])\nassert [1, 2, 3] == filter_integers([1, 2, 3, True, False])\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_integers([\"string\", 5, 6.4, \"float\", \"\", 3, \"int\", 1, None, [], ()]) == \\\n        [5, 6, 3, 1]\n\ndef filter_odd_even(values: List[int]) -> List[int]:\n    \"\"\" Filter given list of integers only for odd and even\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_integers([0,1,'2',3,0,1,2,3,'4',5]) == [0,1,2,3]\nassert     filter_integers([0,1,2,3,0,1,2,3,4,5]) == [0,1,2,3,4,5]\nassert     filter_integers([0,1,'2',3,0,1,2,3,4,5,6]) == [0,1,2,3,4,5,6]\nassert     filter_integers([0,1,2,3,'2',0,1,2,3,4,5]) == [0,1,2,3,4,5]\nassert     filter_integers([0,1,2,3,0,1,2,3,4,5,6,7]) == [0,1,2,3,4,5,6,7]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_integers([10, 20, 30, \"abc\", 40, 50, 60]) == [10, 40, 60]\nassert     filter_integers([-10, -20, -30, -50, -40, -60]) == [-10, -50, -60]\nassert     filter_integers([10.1, 20.2, 30.3, 50.4, 40.5, 60.6]) == [10.1, 40.5, 60.6]\nassert     filter_integers([None, \"abc\", None, \"def\", None, None, None]) == [None, None, None, None]\n\ndef filter_integers_1(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    # TODO: implement this function\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert filter_integers([1, 3, 5, 7, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_integers([-5, -3, 1, 9, 4, 2, -7]) == [-5, -3, 1, 9, 4, 2]\nassert filter_integers([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, \"a\", \"b\", \"c\"]) == [1, 2, 3]\nassert     filter_integers([1, \"a\", \"b\", \"c\", 3]) == [1, 3]\nassert     filter_integers([1, 2, 3, 4, \"a\", \"b\", \"c\"]) == [1, 2, 3, 4]\nassert     filter_integers([]) == []\nassert     filter_integers([1, \"a\", \"b\", \"c\", 3, 3.4]) == [1, 3, 3.4]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 'a', 1.5, 2, '0', '1', '0.5', '2', None, 'x', 1, 1.5, 2, None, 'x']) == \\\n        [1, 1, 1, 2, 2]\nassert     filter_integers([1, 1, 2, 1.5, None]) == [1, 1, 2, 1.5]\n\n\ndef filter_integers_by_index(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 2, 3, 'a', 'b', 'c']) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, True, 'a', 'b', 'c']) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, False, 'a', 'b', 'c']) == [2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_integers(['1', '2', '3']) == [1, 2, 3]\nassert     filter_integers([]) == []\nassert     filter_integers([0, '1', 2, '3', '4', '5']) == [1, 2, 3, 4, 5]\nassert     filter_integers([0, '1', 2, '3', '4', '5', '6', '7', '8', '9', '10']) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([0, '1', 2, '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [1, 2, 3] == filter_integers(list(range(1, 4)))\nassert     [] == filter_integers([])\nassert     [] == filter_integers(list(range(2)))\n\nprint(\"filter_integers is OK\")\n\n\ndef filter_positive_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for positive integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef substr(string: str, start: int, count: int) -> str:\n    \"\"\" Return substring of the given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('') == 0\nassert     strlen(' ') == 1\nassert     strlen('abcdefghijklmnopqrstuvwxyz') == 26\nassert     strlen('a' * 100) == 100\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     strlen(\"abc\") == 3\nassert     strlen(\"\") == 0\nassert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\" \") == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     strlen(\"abcdefg\") == 7\nassert     strlen(\"\") == 0\nassert     strlen(\"abcdef\") == 6\n\ndef read_filename() -> str:\n    \"\"\" Prompt user to input a filename\n        return the filename\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef strstr(string: str, sub: str) -> int:\n    \"\"\" Return index of first occurrence of sub in string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    strlen('1234') == 4\n    strlen('') == 0\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"ab\") == 2\nassert     strlen(\"abc\") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strlen('hi') == 2\nassert strlen('i') == 1\nassert strlen('') == 0\n\ndef substr(string: str, start: int, n: int) -> str:\n    \"\"\" Return substring with start and length n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return 1 if string1 == string2, -1 if string1 < string2, 0 if string1 == string2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"\") == 0\n\ndef substr(string: str, start: int, len: int) -> str:\n    \"\"\" Return substring from given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(9) == 1\nassert     largest_divisor(10) == 5\nassert     largest_divisor(12) == 6\nassert     largest_divisor(14) == 7\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(8) == 2\nassert     largest_divisor(4) == 2\nassert     largest_divisor(8) == 2\nassert     largest_divisor(21) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_divisor(10) == 5\nassert     largest_divisor(23) == 11\nassert     largest_divisor(2387) == 47\n\ndef has_consecutive_digits(n: int) -> bool:\n    \"\"\" Given a number n, determine whether there exists consecutive digits in n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_divisor(8) == 2\nassert     largest_divisor(7) == 1\nassert     largest_divisor(9) == 3\nassert     largest_divisor(12) == 2\nassert     largest_divisor(6) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     largest_divisor(18) == 9\nassert     largest_divisor(12) == 6\nassert     largest_divisor(13) == 13\nassert     largest_divisor(25) == 5\n\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_divisor(4) == 4\nassert     largest_divisor(16) == 4\nassert     largest_divisor(1) == 1\nassert     largest_divisor(11) == 1\nassert     largest_divisor(27) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_divisor(12) == 6\nassert     largest_divisor(13) == 13\nassert     largest_divisor(9) == 3\nassert     largest_divisor(7) == 7\nassert     largest_divisor(1) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_divisor(15) == 3\nassert     largest_divisor(9) == 3\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_divisor(8) == 2\nassert     largest_divisor(10) == 5\n\ndef has_digit(n: int, d: int) -> bool:\n    \"\"\" Check if n has a digit d\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \nassert\n\nassert factorize(1) == [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [2, 3] == factorize(2*3)\nassert     [2, 2, 2] == factorize(2*2*2)\nassert     [7, 11] == factorize(7*11)\nassert     [179, 233, 463] == factorize(179*463*233)\nassert     [2, 3, 13, 29, 37, 71] == factorize(2*3*13*29*37*71)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     factorize(9) == [3, 3]\nassert     factorize(27) == [3, 3, 3]\nassert     factorize(1) == [1]\nassert     factorize(12) == [2, 2, 3]\nassert     factorize(17) == [17]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [2, 2, 3, 5, 5] == factorize(35)\nassert     [2, 11] == factorize(372)\nassert     [2, 2, 2, 3, 3] == factorize(36)\nassert     [] == factorize(8)\nassert     [] == factorize(0)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     ((factorize(6) == [2, 3] and factorize(7) == [7]) or \n        (factorize(6) == [2, 3, 3] and factorize(7) == [2, 2, 3]))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(4) == [2, 2]\nassert     factorize(6) == [2, 3]\nassert     factorize(24) == [2, 2, 2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (((24 & (24 >> 1)) >> 1) == 12)\nassert     (((24 & (24 >> 2)) >> 2) == 6)\nassert     (((24 & (24 >> 3)) >> 3) == 2)\nassert     (((24 & (24 >> 4)) >> 4) == 1)\nassert     (((24 & (24 >> 5)) >> 5) == 0)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef find_pythagorean_triplets(factors: List[int]):\n    \"\"\" Return list of Pythagorean triplets for which product equals to given product,\n    e.g. when factors=[a, b, c],\n    there should be a triplet (a, b, c) such that: a^2 + b^2 + c^2 == product\n    \"\"\"\n    pass"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     factorize(8) == [2, 2, 2]\nassert     factorize(9) == [3, 3]\nassert     factorize(45) == [3, 3, 5]\nassert     factorize(1) == [1]\nassert     factorize(2) == [2]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 1, 1, 1, 1]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7]) == [1, 2, 3, 4, 5, 6, 7, 7]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 7]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n\ndef remove_element(numbers: List[int], value: int) -> int:\n    \"\"\" Remove the first occurrence of a given integer from a list of numbers.\n    If the given integer does not exist in the list, return -1.\n    Keep order of remaining elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_duplicates([2, 2, 2, 2]) == [2]\nassert     remove_duplicates([2, 2, 2, 2, 2, 3]) == [2, 3]\nassert     remove_duplicates([2, 3, 3, 2, 3, 2, 4, 5, 2]) == [2, 3, 4, 5, 2]\nassert     remove_duplicates([2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]) == [2, 3, 4, 5]\nassert     remove_duplicates([2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1,2,3,4,5,6,7,8,9,9,9,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_duplicates([1,2,3,4,5,6,7,8,9,9,9,9,10,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     remove_duplicates([1,2,3,4,5,6,7,8,9,9,9,9,10,10,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_duplicates([1,2,3,4,5,6,7,8,9,10,10,10,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_duplicates([1,2,3,4,5,6,7,8,9,10,10,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 4]) == [1, 2, 4]\nassert     remove_duplicates([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4, 2, 2, 3, 2]) == [1, 2, 3, 4, 3, 2]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 1, 2, 3, 4]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3]) == [1, 2, 3]\n\n\ndef best_words(words: List[str]) -> List[str]:\n    \"\"\" Return words that are as long as possible in a given list of words.\n    >>> best_words(['one', 'two', 'three', 'four', 'five'])\n    ['five', 'one']\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4, 5, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [1, 1, 2, 3, 3, 4] == remove_duplicates([1, 1, 2, 3, 3, 4])\nassert     [1, 2, 3, 4] == remove_duplicates([1, 2, 2, 2, 4, 4])\nassert     [0, 0, 0, 0, 0] == remove_duplicates([0, 0, 0, 0, 0])\nassert     [0, 0, 1, 2, 3] == remove_duplicates([0, 0, 1, 1, 1, 2, 3])\n\n\ndef remove_element(numbers: List[int], value: int) -> List[int]:\n    \"\"\"\n    Remove element `value` from list `numbers`.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 1, 1, 2, 3, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n\ndef remove_element(numbers: List[int], value: int) -> List[int]:\n    \"\"\" Remove all occurrences of given value from list.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_duplicates([2, 2, 3, 3, 5]) == [2, 3, 5]\nassert     remove_duplicates([3, 3, 5]) == [3, 5]\nassert     remove_duplicates([3, 3, 5, 5, 5, 3, 3, 3]) == [3, 5]\n\n\ndef remove_duplicates_follow_up(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n\ndef contains_duplicate(numbers: List[int]) -> bool:\n    \"\"\" From a list of integers, return True if any number occurs more than once,\n    and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     flip_case('Hello') == 'hELLO'\nassert     flip_case('WHAT') == 'wHAT'\nassert     flip_case('hi') == 'HI'\nassert     flip_case('brONi') == 'BROni'\n\nprint(flip_case('Hello'))\nprint(flip_case('WHAT'))\nprint(flip_case('hi'))\nprint(flip_case('brONi'))"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     flip_case('') == ''\nassert     flip_case('A') == 'a'\nassert     flip_case('a') == 'A'\nassert     flip_case('Ab') == 'aB'\nassert     flip_case('Abcd') == 'Abcd'\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     flip_case(\"foobar\") == \"FoObAr\"\nassert     flip_case(\"fObAr\") == \"FoObAr\"\nassert     flip_case(\"FOOBAR\") == \"FoObAr\"\n\n\ndef main():\n    \"\"\" Test cases to test the flip_case() function.\"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\ndef multi_replace(string: str, old: str, new: str) -> str:\n    \"\"\" For a given string, replace all occurrences of old with new\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \n\ndef main():\n    print(flip_case(input()))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     flip_case(\"aAbBcC\") == \"AaBbCc\"\nassert     flip_case(\"aabcc\") == \"aAbBcC\"\nassert     flip_case(\"aabbcc\") == \"aabbcc\"\nassert     flip_case(\"AaBbccC\") == \"aAbBcC\"\nassert     flip_case(\"AaBbccC\") == \"aAbBcC\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     flip_case('LetsTestFlipcase') == 'letsTestFlipcase'\nassert     flip_case('FlipCaseTEST') == 'flipCaseTEST'\nassert     flip_case('AbCdEfG123') == 'aBcDeFg123'\nassert     flip_case('12345') == '12345'\nassert     flip_case('...') == '...'\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     flip_case('') == ''\nassert     flip_case('A') == 'a'\nassert     flip_case('aa') == 'AA'\nassert     flip_case('aAa') == 'AaA'\nassert     flip_case('aAAa') == 'aAAa'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     concatenate(['cat', 'dog']) == 'catdog', 'Expected catdog but received {}'.format(concatenate(['cat', 'dog']))\nassert     concatenate(['cat']) == 'cat', 'Expected cat but received {}'.format(concatenate(['cat']))\nassert     concatenate(['cat', 'dog', 'wolf']) == 'catdogwolf', 'Expected catdogwolf but received {}'.format(concatenate(['cat', 'dog', 'wolf']))\nassert     concatenate(['cat', 'dog', 'wolf']) == 'catdogwolf', 'Expected catdogwolf but received {}'.format(concatenate(['cat', 'dog', 'wolf']))\n\ndef count_adjacent_repeated_characters(string: str) -> int:\n    \"\"\" Given a string, count how many times the same character appears in a row.\n        For example, in the string 'Hello, world!', the character 'w' appears four times in a row.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nconcatenate([\"abc\", \"def\"]) == \"abcdef\"\nassert \nconcatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert \nconcatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcdd\"\nassert \nconcatenate([\"e\"]) == \"e\"\nassert \nconcatenate([\"e\", \"f\"]) == \"ef\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     concatenate([\"abc\"]) == \"abc\"\nassert     concatenate([\"abc\", \"def\"]) == \"abcdef\"\nassert     concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"jkl\"]) == \"abcdefghijkl\"\nassert     concatenate([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]) == \"abcdefghijklmno\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     concatenate([\"Hello\", \"world\"]) == \"Hello world\"\nassert     concatenate([\"racecar\", \"dance\", \"jump\"]) == \"racecar dance jump\"\nassert     concatenate([\"racecar\", \"dance\", \"\"]) == \"racecar dance \"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     concatenate([\"one\",\"two\",\"three\"]) == \"onetwothree\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\",\"\"]) == \"\"\nassert     concatenate([\"\",\"\",\"\"]) == \"\"\nassert     concatenate([\"one\",\"\"]) == \"one\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     concatenate(['a', 'b', 'c']) == 'abc'\nassert     concatenate(['a', 'b', 'c', 'd']) == 'abcd'\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f']) == 'abcdef'\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'abcdefg'\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Determine if the string is a palindrome (palindromic)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\", \"Trouble concatenating two strings\"\nassert     concatenate([\"T\", \"e\", \"s\", \"t\", \"i\", \"n\", \"g\"]) == \"Tetin\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\n\n\ndef concatenate_alt(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \"\"\"\n    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     concatenate([\"I\", \"am\", \"Julia\"])     == \"IamJulia\"\nassert     concatenate([\"A\", \"very\", \"long\", \"sentence\"])    == \"Averylongsentence\"\nassert     concatenate([\"A\", \"v\", \"l\", \"e\", \"r\", \"y\"])     == \"Avleveryr\"\nassert     concatenate([\"A\", \"\", \"long\", \"sentence\"])     == \"Alongsentence\"\nassert     concatenate([\"A\", \"verylong\", \"sentence\"])     == \"Averylongsentence\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     concatenate([\"abc\", \"def\"]) == \"abcdef\", \"case1\"\nassert     concatenate([\"abc\", \"\"]) == \"abc\", \"case2\"\nassert     concatenate([\"\", \"abc\"]) == \"abc\", \"case3\"\nassert     concatenate([\"\", \"\", \"abc\"]) == \"abc\", \"case4\"\nassert     concatenate([\"\", \"\", \"abc\", \"\"]) == \"abc\", \"case5\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     concatenate(['apple', 'banana', 'orange']) == 'applebananaorange'\nassert     concatenate(['cat', 'dog','mouse']) == 'catdogmouse'\n\ndef join(items: List[str], sep: str ='') -> str:\n    \"\"\" Join list of items into a single string with a separator\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef replace_in_string(string: str, old_str: str, new_str: str) -> str:\n    \"\"\" Replace the old string with the new string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"rain\", \"cozy\", \"puppy\", \"zoombies\"], \"p\") == [\"rain\", \"puppy\", \"puppy\"]\nassert     filter_by_prefix([\"sunny\", \"windy\", \"stormy\", \"rain\", \"tornado\"], \"s\") == [\"sunny\", \"windy\"]\n\n\ndef filter_by_prefix_with_key_func(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n        Notice the use of a key function.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['bob', 'Rob', 'Bob'], 'Bob') == ['Bob', 'Bob']\nassert     filter_by_prefix(['bob', 'Rob', 'Bob'], 'rob') == ['Rob', 'Bob']\nassert     filter_by_prefix(['bob', 'Rob', 'Bob'], 'bob') == ['bob', 'Bob']\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['bob','martha','michael', 'john', 'paul', 'julius', 'jenny', 'giampaolo','sandra', 'carl'], 'c') == ['carl']\nassert     filter_by_prefix(['bob','martha','michael', 'john', 'paul', 'julius', 'jenny', 'giampaolo','sandra', 'carl'], 'jac') == []\nassert     filter_by_prefix(['bob','martha','michael', 'john', 'paul', 'julius', 'jenny', 'giampaolo','sandra', 'carl'], 'j') == ['john', 'paul', 'julius', 'jenny', 'giampaolo']\nassert     filter_by_prefix(['bob','martha','michael', 'john', 'paul', 'julius', 'jenny', 'giampaolo','sandra', 'carl'], 'e') == ['bob','martha','michael','sandra', 'carl']\nassert     filter_by_prefix(['bob','martha','michael', 'john', 'paul', 'julius', 'jenny', 'giampaolo','sandra', 'carl'],'sandra') == ['sandra']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"], \"nom\") \\\n        == [\"nom\", \"nom\", \"nom\", \"nom\", \"adnom\", \"adnom\"]\nassert     filter_by_prefix([\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"], \"ad\") \\\n        == [\"adnom\", \"adnom\"]\nassert     filter_by_prefix([\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"], \"denom\") \\\n        == [\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"]\nassert     filter_by_prefix([\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"], \"adnom\") \\\n        == [\"adnom\", \"adnom\"]\nassert     filter_by_prefix([\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"], \"\") \\\n        == [\"nom\", \"nom\", \"denom\", \"denom\", \"adnom\", \"adnom\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"abc\", \"abd\", \"a\", \"ace\"], \"a\") == ['a', 'a', 'a', 'ace']\nassert     filter_by_prefix([\"abc\", \"abd\", \"a\", \"ace\"], \"c\") == ['abc', 'ace']\nassert     filter_by_prefix([\"abc\", \"abd\", \"a\", \"ace\"], \"b\") == ['abd', 'ace']\nassert     filter_by_prefix([\"abc\", \"abd\", \"a\", \"ace\"], \"z\") == []\nassert     filter_by_prefix([\"abc\", \"abd\", \"a\", \"ace\"], \"\") == ['abc', 'abd', 'a', 'ace']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"stripping\", \"detoxing\", \"stripping\", \"stripping\", \"stripping\", \"stripping\"], \"stri\") == ['stripping','stripping','stripping','stripping']\nassert filter_by_prefix([\"stripping\", \"detoxing\", \"stripping\", \"stripping\", \"stripping\", \"stripping\"], \"stria\") == []\nassert filter_by_prefix([\"stripping\", \"detoxing\", \"stripping\", \"stripping\", \"stripping\", \"stripping\"], \"strii\") == ['stripping','stripping','stripping']\nassert filter_by_prefix([\"stripping\", \"detoxing\", \"stripping\", \"stripping\", \"stripping\", \"stripping\"], \"strii\") == ['stripping','stripping','stripping']\nassert filter_by_prefix([\"stripping\", \"detoxing\", \"stripping\", \"stripping\", \"stripping\", \"stripping\"], \"striii\") == ['stripping','stripping']\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"airport\", \"banana\", \"carrot\", \"dog\"], \"a\") == [\"airport\", \"banana\"]\nassert     filter_by_prefix([\"airport\", \"banana\", \"carrot\", \"dog\"], \"c\") == [\"carrot\"]\nassert     filter_by_prefix([\"airport\", \"banana\", \"carrot\", \"dog\"], \"d\") == [\"dog\"]\nassert     filter_by_prefix([\"airport\", \"banana\", \"carrot\", \"dog\"], \"z\") == []\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"hello\", \"my\", \"friends\"], \"he\") == [\"hello\", \"friends\"]\nassert     filter_by_prefix([\"what\", \"is\", \"your\", \"name\"], \"wh\") == [\"what\", \"name\"]\n\n\ndef merge_two_sorted_lists(L1: List[int], L2: List[int]) -> List[int]:\n    \"\"\" Merge two sorted input lists into one sorted output list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\"], \"ab\") == [\"ab\", \"abcd\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\"], \"abc\") == [\"abc\", \"abcd\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\"], \"abcd\") == [\"abcd\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\"], \"xyz\") == []\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1, 3, -2, -7, 8, 10]) == [1, 3, 8, 10]\nassert     get_positive([-5, -3, -1, 0, 1, 3, 6]) == [1, 3, 6]\n\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_positive([1, 2, -3, 4, -5]) == [1, 2, 4]\nassert     get_positive([1, 2, -3, -4, 5]) == [1, 2, 5]\nassert     get_positive([]) == []\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_positive([]) == []\nassert get_positive([-1]) == []\nassert get_positive([1, 2, 3]) == [1, 2, 3]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_positive([3, -6, 5, -1, 0, 4]) == [3, 5, 4]\nassert     get_positive([-3, -6, -5, -1, 0, 4]) == [4]\nassert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef find_positive_number(l: list):\n    \"\"\"\n    Return the index of the first positive number in the list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([0,0,0]) == []\nassert     get_positive([1,-2,3]) == [1,3]\nassert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]\nassert     get_positive([-3,2,0,-2,1,2]) == [2,1]\nprint('Great!')\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef sum_non_negative(l: list):\n    \"\"\"Return the sum of all non-negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_positive([1, -2, 3, 4, -5, 6, 7]) == [1, 3, 4, 6, 7]\nassert     get_positive([1, 2, -3, 4, -5, 6, 7]) == [1, 2, 3, 4, 6, 7]\nassert     get_positive([1, 2, -3, -4, 5, 6, 7]) == [1, 2, 5, 6, 7]\nassert     get_positive([1, 2, -3, -4, -5, 6, 7]) == []\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_positive([0, -1, -2, 4, 5, -6, 7]) == [4, 5, 7]\nassert     get_positive([0, -1, -2, 4, 5, -6, 7, -8]) == [4, 5, 7, -8]\nassert     get_positive([0, -1, -2, 4, 5, -6, 7, -8, -9]) == [4, 5, 7, -8, -9]\nprint('get_positive is correct!')\n\ndef get_positive_again(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_positive([0, -1, 2, 3]) == [2, 3]\nassert     get_positive([]) == []\nassert     get_positive([1, -1, -2, -3]) == []\nassert     get_positive([1, 2, 3]) == [1, 2, 3]\n\ndef get_positive_and_negative(l: list):\n    \"\"\"Return all numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_positive([0, 1, 2, 3, -1, -2, -3]) == [1, 2, 3]\nassert     get_positive([-1, -2, -3]) == []\n\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(13) == True\nassert     is_prime(7) == False\nassert     is_prime(15) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef next_prime(n):\n    \"\"\"Return the smallest prime larger than a given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(5) == True\nassert     is_prime(7) == True\nassert     is_prime(1) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (is_prime(2))     == True\nassert     (is_prime(27))     == False\nassert     (is_prime(5))     == True\nassert     (is_prime(6))     == False\n\ndef primes(n):\n    \"\"\"Return a list of all prime numbers less than or equal to a given number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(11) == True\nassert     is_prime(15) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_prime(2) == True\nassert is_prime(10) == False\nassert is_prime(13) == True\nprint(\"You got this!\")\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_prime(4) == False\nassert     is_prime(7) == True\nassert     is_prime(3) == True\nassert     is_prime(47) == False\nassert     is_prime(7) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(9) == False\nassert     is_prime(10) == False\nassert     is_prime(99) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert ____, ____\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_zero([1.0]) == 0\nassert     find_zero([0.5, 1.0]) == -0.5\nassert     find_zero([0.5, -1.0]) == -0.5\nassert     find_zero([0.5, 0.1, 0.1, 0.5]) == -0.5\nassert     find_zero([1.0, 0.1, 0.1, 0.5]) == 0.5\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     poly([1, 2, 3, 4, 5], 1) == 5\nassert     poly([1, 2, 3, 4, 5], 5) == 13\nassert     poly([1, 2, 3, 4, 5], 0) == 0\nassert     poly([1, 2, 3, 4, 5], 10) == 27\nassert     poly([1, 2, 3, 4, 5], -1) == -5\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     poly([0, 1, -3, 2], 2) == 0\nassert     poly([0, 1, -3, 2], 3) == 0\nassert     poly([1, -3, 2], 1.5) == 0\nassert     poly([1, -3, 2], 1) == 0\nassert     poly([1, -3, 2], -1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     poly([0, 0], 1) == 0 and poly([0, 0, 0], 2) == 0, \"wrong in find_zero\"\nassert     poly([1], 1) == 1, \"wrong in find_zero\"\nassert     poly([1, 0, 0], 1) == 1, \"wrong in find_zero\"\nassert     poly([1, 2, 0], 1) == 1, \"wrong in find_zero\"\nassert     poly([1, 2, 0], 2) == 1, \"wrong in find_zero\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     poly([1, 1], 0.1) == 0\nassert     poly([1, 1, 1], 0.1) == 0\nassert     poly([1, 0, 1], 0.1) == 0\nassert     poly([1, 1, 0], 0.1) == 0\nassert     poly([1, 0, 1, 1], 0.1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_zero([1,0,3,-4]) == 1.5\nassert     find_zero([1,0,2,0]) == 2\nassert     find_zero([1,-1,2,-3,4]) == 1.5\nassert     find_zero([1,0,2,-2,3]) == -0.5\nassert     find_zero([1,-2,-3,2,4]) == -1.5\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     poly([0, 1, 0, 1], 1) == 0\nassert     poly([0, 1, 0, 1, 0, 1, 0, 1], 1) == 0\nassert     poly([0, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1], 1) == 0\nassert     poly([0, 1, 1, 1, 0, 1, 0, 1], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_zero([0, 2, -3]) == 0\nassert     find_zero([0, 0, -2]) == 0\nassert     find_zero([0, 0, 2]) == 2\nassert     find_zero([1, -2]) == 0\nassert     find_zero([1, 0]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     poly([-1, 0, 1], 0) == 0\nassert     poly([-1, 0, 1], -1) == -1\nassert     poly([1, 1, 0, 1], 0) == 0\nassert     poly([1, 1, 0, 1], 1) == 1\nassert     poly([1, 1, 0, 1], 2) == 2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_third([1, 4, 2, 6, 3, 1]) == [1, 1, 2, 3, 4, 6]\nassert     sort_third([4, 4, 4, 4, 4]) == [4, 4, 4, 4, 4]\nassert     sort_third([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert     sort_third([1, 2, 4, 6, 8]) == [1, 2, 4, 6, 8]\n\n\ndef apply_to_all(f):\n    \"\"\"Takes a function f and applies it to every item of a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef is_equal(l: list, l2: list):\n    \"\"\"This function takes two lists l and l2 and returns True if l and l2 are equal, and False otherwise.\"\"\"\n    pass\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_third([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]\nassert     sort_third([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_third([5, 4, 3, 1, 2]) == [1, 2, 3, 4, 5]\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_third([5, 1, 2, 4, 3]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_third([2, 4, 6, 8, 10, 3, 5, 7, 9]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_third([2, 4, 6, 8, 10, 3, 5, 7, 9, 1]) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\nassert     sort_third([]) == []\n\ndef sort_forth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_third([3, 2, 1]) == [1, 2, 3]\nassert     sort_third([4, 2, 4, 3, 4]) == [2, 4, 4, 3, 4]\nassert     sort_third([4, 2, 3, 4, 3]) == [2, 4, 4, 3, 3]\nassert     sort_third([2, 4, 4, 3, 4]) == [2, 4, 4, 3, 4]\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_third([6, 2, 3, 4, 1, 5]) == [1, 2, 3, 4, 5, 6], sort_third([6, 2, 3, 4, 1, 5])\nassert     sort_third([]) == [],                 sort_third([])\nassert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6], sort_third([1,2,3,4,5,6])\nassert     sort_third([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7], sort_third([1,2,3,4,5,6,7])\nassert     sort_third([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8], sort_third([1,2,3,4,5,6,7,8])\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef get_max_third(l: list):\n    \"\"\"This function takes a list l and returns the element with the highest value in the list of the indicies that are not divisible by three, while the element in the indicies that are divisible by three is equal to the element in the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     unique([1, 1, 2, 3, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1]) == [1]\nassert     unique([]) == []\n\ndef is_unique(l: list):\n    \"\"\" Return True if all items in the list are unique and False otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     unique([1,2,3,2,3,4,5]) == [1,2,3,4,5]\nassert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1,1]) == [1]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     unique([1, 2, 3, 4, 3, 2, 1]) == [1, 2, 3, 4], unique([1, 2, 3, 4, 3, 2, 1])\nassert unique([1, 2, 3, 4, 5, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert unique([]) == []\nassert unique([1]) == [1]\n\ndef intersection(a: list, b: list):\n    \"\"\"Return sorted list of elements that exist in both a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique([1,1,2,3,4,4]) == [1,2,3,4]\nassert     unique([1,1,2,3,4,2,2,3,4]) == [1,2,3,4]\n\ndef palindrome(string: str):\n    \"\"\"Return True if the given string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique([1,1,2,3,4,4]) == [1,2,3,4], \"unique() is not implemented correctly.\"\nassert     unique([]) == [], \"unique() is not implemented correctly.\"\nassert     unique(\"hello\") == [\"h\", \"e\", \"l\", \"o\"], \"unique() is not implemented correctly.\"\n\ndef min(l: list):\n    \"\"\"Return the minimum number in a list\n    \"\"\"\n    pass\n\ndef max(l: list):\n    \"\"\"Return the maximum number in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1,2]) == [1,2]\nassert     unique([1,1,2,2,3]) == [1,2,3]\nassert     unique([1,1,2,2,3,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1, 1]) == [1]\nassert     unique([1, 2]) == [1, 2]\nassert     unique([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5], \"Not working as expected\"\nassert     unique([1, 2, 3, 4, 5, 6, 7, 1, 2, 3]) == [1, 2, 3, 4, 5, 6, 7], \"Not working as expected\"\nassert     unique([1, 2, 1, 4, 1]) == [1, 2, 4], \"Not working as expected\"\nassert     unique([1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"Not working as expected\"\nprint(\"PASSED ALL TESTS\")"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     unique([1, 2, 3, 2, 1, 0]) == [0, 1, 2, 3]\nassert     unique([1, 2, 3, 2, 1, 0, 3, 1, 2, 3]) == [0, 1, 2, 3]\nassert     unique([1, 2, 3, 2, 1, 0, 3, 1, 2, 2, 3]) == [0, 1, 2, 3]\nassert     unique([1, 2, 3, 2, 1, 0, 3, 1, 2, 3, 2]) == [0, 1, 2, 3]\nassert     unique([1, 2, 3, 2, 1, 0, 3, 1, 2, 3, 2, 2, 3]) == [0, 1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef intersection(l: list, l2: list):\n    \"\"\"Return sorted unique intersection elements in two lists\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_element([1, 3, 5, 2]) == 5\nassert     max_element([1, 3, 5, 2, 99, 100, 1, 1, 3]) == 100\nassert     max_element([1, 3, 5, 2, 99, 100, 1, 1, 3, 20, 5]) == 20\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef second_max_element(l: list):\n    \"\"\"Return second maximum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nprint(max_element([1, 2, 3, 4]))\nassert max_element([1, 2, 3, 4]) == 4\nassert max_element([1, 2, 3, 4, 5, 6, 7]) == 7\nassert max_element([]) == None\nassert max_element([4, 2, 1]) == 4\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert max_element([-1, -2, -3, -4]) == -1\nassert max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_element(list(range(1, 7))) == 6\nassert     max_element(list(range(-5, 0))) == -5\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 5, 3, 4, 2]) == 5\nassert     max_element([2, 1, 5, 4, 3]) == 5\nassert     max_element([2, 3, 4, 1, 5]) == 5\nassert     max_element([2, 3, 4, 5, 1]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([5, 4, 3, 2, 1]) == 5\nassert     max_element([1, 2, -3, -1, 5]) == 5\nassert     max_element([]) == None\nassert     max_element([-1]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5, \"Error\"\nassert     max_element([10, -5, -2, 15]) == 15, \"Error\"\nassert     max_element([]) == None, \"Error\"\nprint(\"All tests passed\")"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_element([]) == None\nassert     max_element([10, 20, 30]) == 30\nassert     max_element([1, 5, 10, 5]) == 10\nassert     max_element([1, 20, -10, -20]) == 20\nassert     max_element([-10, -20, 1, 20, 1]) == 20\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    max_element([1, 2, -3, 4]) == 4\n    max_element([1, 2, 3]) == 3\n    max_element([1, -2, -3]) == -2\n    max_element([1]) == 1\n    max_element([]) == None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fizz_buzz(100) == 12\nassert     fizz_buzz(200) == 24\nassert     fizz_buzz(121) == 0\nassert     fizz_buzz(73) == 1\nassert     fizz_buzz(101) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fizz_buzz(11) == 0\nassert     fizz_buzz(13) == 0\nassert     fizz_buzz(17) == 1\nassert     fizz_buzz(45) == 2\nassert     fizz_buzz(37) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fizz_buzz(13) == 2\nassert     fizz_buzz(25) == 0\nassert     fizz_buzz(44) == 2\n\nprint(\"OK\")\n\n\nprint(\"#18\")\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fizz_buzz(10) == 0\nassert     fizz_buzz(110) == 0\nassert     fizz_buzz(112) == 0\nassert     fizz_buzz(1330) == 0\nassert     fizz_buzz(14) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef qsort(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sort_even([6, 3, 6, 2, 3, 1]) == [6, 3, 6, 2, 3, 1],         \"Wrong result for [6, 3, 6, 2, 3, 1]\"\nassert     sort_even([2, 4, 1, 3]) == [2, 4, 1, 3],                     \"Wrong result for [2, 4, 1, 3]\"\nassert     sort_even([6, 5, 7, 4, 3, 2, 1]) == [6, 5, 4, 7, 3, 2, 1],     \"Wrong result for [6, 5, 7, 4, 3, 2, 1]\"\nassert     sort_even([3, 2, 1]) == [2, 1, 3],                             \"Wrong result for [3, 2, 1]\"\nassert     sort_even([4, 3, 2, 1]) == [4, 3, 2, 1],                     \"Wrong result for [4, 3, 2, 1]\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_even([3, 5, 2, 8, 1, 4]) == [3, 2, 5, 1, 8, 4]\nassert     sort_even([3, 5, 2, 8, 1, 4, 7, 6]) == [3, 2, 5, 1, 8, 4, 6, 7]\nassert     sort_even([3, 5, 2, 8, 1, 4, 7, 6, 0, 9]) == [3, 2, 5, 1, 8, 4, 6, 7, 0, 9]\nassert     sort_even([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_even([2,3,1,2,2,4]) == [2,2,2,2,3,4], \"Check for the even sorted indices.\"\nassert     sort_even([4,4,3,3,3,2,2]) == [2,2,2,3,3,3,4], \"Check for the even sorted indices.\"\n\n\ndef even_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_even([1, 5, 6, 9, 2]) == [1, 5, 6, 9, 2]\nassert     sort_even([1, 5, 6, 9, 2, 8]) == [1, 5, 6, 9, 2, 8]\nassert     sort_even([1, 5, 6, 9, 2, 8, 7, 4]) == [1, 5, 6, 9, 2, 8, 7, 4]\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_even([4, 0, 2, 1, 5]) == [0, 2, 4, 1, 5]\nassert     sort_even([-2, 2, 2, 0, 1, -2, -2, 2]) == [-2, -2, 0, 0, 1, 2, 2, 2]\nassert     sort_even([3, 1, 2, 4, 5, 1, 2, 3, 4, 1, 0]) == [1, 2, 1, 2, 3, 4, 4, 3, 0, 1]\n\ndef sort_dictionary(d: dict):\n    \"\"\"This function takes a dictionary d and returns a dictionary d' such that\n    d' is identical to d in the keys and is sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8], \"Not working for [1,2,3,4,5,6,7,8]\"\nassert     sort_even([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9], \"Not working for [1,2,3,4,5,6,7,8,9]\"\nassert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], \"Not working for [1,2,3,4,5,6,7,8,9,10]\"\n\n\n\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_even(l1) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     sort_even(l2) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nprint('Test passed')\n\n\n\ndef print_board(l: list):\n    \"\"\"This function takes a list l and prints the list as a game board, using the following template\n    X    X    X\n    X    O    X\n    X    X    X\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [2, 4, 6, 8] == sort_even([6, 4, 2, 8]), 'wrong result for sort_even([6, 4, 2, 8])'\nassert     [0, 4, 6, 8] == sort_even([8, 4, 6, 0]), 'wrong result for sort_even([8, 4, 6, 0])'\nassert     [2, 4, 6, 8] == sort_even([6, 4, 2, 8]), 'wrong result for sort_even([6, 4, 2, 8])'\n\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decode_cyclic(encode_cyclic('foobar')) == 'barfoo','should decode cyclic'\n\n\n\n\ndef get_position(encoded_str: str, char: str):\n    \"\"\"\n    returns a position of a character in a string if it exists, otherwise returns None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\", \"encoding is not correct\"\nassert     decode_cyclic(encode_cyclic(\"aba\")) == \"aba\", \"encoding is not correct\"\nassert     decode_cyclic(encode_cyclic(\"aaaa\")) == \"aaaa\", \"encoding is not correct\"\nassert     decode_cyclic(encode_cyclic(\"ba\")) == \"ba\", \"encoding is not correct\"\nassert     decode_cyclic(encode_cyclic(\"baa\")) == \"baa\", \"encoding is not correct\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_cyclic(\"gvhgv\") == \"gvhgv\"\nassert     decode_cyclic(\"gvhgv\") == \"gvhgv\"\nassert     decode_cyclic(\"gvhgv\") == \"gvhgv\"\nassert     decode_cyclic(\"gvhgv\") == \"gvhgv\"\nassert     decode_cyclic(\"gvhgv\") == \"gvhgv\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"\n\ndef encode_first_char(s: str):\n    \"\"\"\n    returns encoded string, that has only first character of original string, for each word in original string.\n    \"\"\"\n    # split string to words. Each of length not less than 2\n    words = s.split(' ')\n    # enumerate words, append first character\n    return''.join(word[0] for word in words)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     \"abcdabcd\" == decode_cyclic(encode_cyclic(\"abcdabcd\"))\nassert     \"aaaaa\" == decode_cyclic(encode_cyclic(\"aaaaa\"))\nassert     \"abcd\" == decode_cyclic(encode_cyclic(\"abcd\"))\nassert     \"abc\" == decode_cyclic(encode_cyclic(\"abc\"))\nassert     \"ab\" == decode_cyclic(encode_cyclic(\"ab\"))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef encrypt(s: str) -> str:\n    \"\"\"\n    returns an encrypted version of string s using the code mapping.\n    \"\"\"\n    # your code here\n    pass\n\n\ndef decrypt(s: str) -> str:\n    \"\"\"\n    returns the decrypted version of the string s using the code mapping.\n    \"\"\"\n    # your code here\n    pass\n\n\ndef encode_vigenere(s: str, k: str) -> str:\n    \"\"\"\n    returns an encoded version of string s using the vigenere mapping.\n    \"\"\"\n    # your code here\n    pass\n\n\ndef decode_vigenere(s: str, k: str) -> str:\n    \"\"\"\n    returns the decrypted version of the string s using the vigenere mapping.\n    \"\"\"\n    # your code here\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decode_cyclic(encode_cyclic(a)) == a\nassert     decode_cyclic(encode_cyclic(b)) == b\nassert     decode_cyclic(encode_cyclic(c)) == c\nassert     decode_cyclic(encode_cyclic(d)) == d\nassert     decode_cyclic(encode_cyclic(e)) == e\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef encode_rolling(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_rolling(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rolling function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     prime_fib(1) == (2, 2)\nassert     prime_fib(2) == (3, 5)\nassert     prime_fib(3) == (5, 13)\nassert     prime_fib(4) == (13, 29)\nassert     prime_fib(5) == (29, 97)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_fib(4) == 13\nassert     prime_fib(8) == 109\nassert     prime_fib(10) == 104729\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime checks if n-th number is prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prime_fib(4) == 9, \"Error in prime_fib()\"\nassert     prime_fib(5) == 10, \"Error in prime_fib()\"\nassert     prime_fib(6) == 13, \"Error in prime_fib()\"\nassert     prime_fib(7) == 19, \"Error in prime_fib()\"\nassert     prime_fib(8) == 29, \"Error in prime_fib()\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prime_fib(0) == 0\nassert     prime_fib(1) == 2\nassert     prime_fib(2) == 5\nassert     prime_fib(3) == 8\nassert     prime_fib(4) == 13\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_fib(1) == 0\nassert     prime_fib(2) == 1\nassert     prime_fib(3) == 1\nassert     prime_fib(4) == 2\nassert     prime_fib(5) == 3\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prime_fib(3) == [5, 8]\nassert     prime_fib(7) == [13, 40, 93, 320]\nassert     prime_fib(9) == [31, 73, 265, 1879]\nassert     prime_fib(11) == [541, 1260, 3521, 12740]\nassert     prime_fib(13) == [104743, 59049, 47970, 134844, 54360, 240717, 92741]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    assert prime_fib(0) == False\n    assert prime_fib(1) == False\n    assert prime_fib(2) == True\n    assert prime_fib(3) == True\n    "
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1, -2, 1, 0, 5]) is True\nassert     triples_sum_to_zero([1, -1, 1, 0, 5]) is False\nassert     triples_sum_to_zero([1, 2, 1, 0, -5]) is False\nassert     triples_sum_to_zero([1, 2, 1, -3, 5]) is False\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, 6]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([1, 2, -1, 2, 1]) == False, \"Wrong output!\"\nassert     triples_sum_to_zero([0, 0, 0]) == True, \"Wrong output!\"\nassert     triples_sum_to_zero([1, 2, 3]) == False, \"Wrong output!\"\nassert     triples_sum_to_zero([0, 0, 0]) == False, \"Wrong output!\"\nassert     triples_sum_to_zero([-1, 2, 1, 2, 1]) == False, \"Wrong output!\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1, 2]) == False\nassert     triples_sum_to_zero([1, 2, 3]) == False\nassert     triples_sum_to_zero([0, 0, 0]) == False\nassert     triples_sum_to_zero([1, 2, 3, -1, 2]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([0, -1, 1, -2, 2, 3]) is False, \"Wrong answer\"\nassert     triples_sum_to_zero([0, 1, 2, 3, 1]) is True, \"Wrong answer\"\nassert     triples_sum_to_zero([1, 0, 2, 3, 1]) is True, \"Wrong answer\"\nassert     triples_sum_to_zero([0, 1, 1]) is False, \"Wrong answer\"\nassert     triples_sum_to_zero([]) is False, \"Wrong answer\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     triples_sum_to_zero([1, 2, 3, 0, 5]) == True\nassert     triples_sum_to_zero([1, 2, 3, -5, 5]) == True\nassert     triples_sum_to_zero([1, 2, 3, -5, 5, 1]) == False\nassert     triples_sum_to_zero([1, 2, 3, 0, 5, 1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([2, -2, 1, 0, 1, 2]) is False\nassert     triples_sum_to_zero([2, -2, 1, -2, 1, 2]) is True\nassert     triples_sum_to_zero([-2, 1, 2, 1, -2, 1]) is False\nassert     triples_sum_to_zero([]) is False\nassert     triples_sum_to_zero([0]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1]) == False\nassert     triples_sum_to_zero([0, -1, 2, -2, 1]) == True\nassert     triples_sum_to_zero([0, 1, 2, -3, 1]) == False\nassert     triples_sum_to_zero([0, 0, 2, 2, 2]) == False\nassert     triples_sum_to_zero([0, 0, -2, 2, 2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([0, 0, 0, 0]) == False, \"Case 1\"\nassert     triples_sum_to_zero([0, 0, 0, -1]) == True, \"Case 2\"\nassert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False, \"Case 3\"\nassert     triples_sum_to_zero([1, 2, 3, -1, 5]) == True, \"Case 4\"\nassert     triples_sum_to_zero([1, 2, 3, 0, 5]) == False, \"Case 5\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     car_race_collision(3) == 0, \"wrong result\"\nassert     car_race_collision(2) == 1, \"wrong result\"\nassert     car_race_collision(1) == 1, \"wrong result\"\nassert     car_race_collision(20) == 0, \"wrong result\"\nassert     car_race_collision(50) == 0, \"wrong result\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0, \"Wrong answer for car_race_collision(1)\"\nassert     car_race_collision(2) == 0, \"Wrong answer for car_race_collision(2)\"\nassert     car_race_collision(5) == 0, \"Wrong answer for car_race_collision(5)\"\nassert     car_race_collision(10) == 0, \"Wrong answer for car_race_collision(10)\"\nassert     car_race_collision(20) == 0, \"Wrong answer for car_race_collision(20)\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     car_race_collision(10) == 0\nassert     car_race_collision(1) == 1\nassert     car_race_collision(10**6) == 0\n\n\ndef car_race_collision_better(n: int):\n    \"\"\"\n    Similar to car_race_collision, except here, the cars are infinitely sturdy and\n    strong; as a result, they continue moving in their trajectory as if they did not\n    collide.  However, the speed of the left-to-right cars is increased, while the\n    speed of the right-to-left cars is decreased.  This will prevent them from\n    colliding with each other.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     car_race_collision(3) == 0\nassert     car_race_collision(5) == 0\nassert     car_race_collision(10) == 0\nassert     car_race_collision(20) == 0\nassert     car_race_collision(50) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     car_race_collision(3) == 6, \"Wrong answer for car_race_collision(3)\"\nassert     car_race_collision(4) == 12, \"Wrong answer for car_race_collision(4)\"\nassert     car_race_collision(5) == 20, \"Wrong answer for car_race_collision(5)\"\nassert     car_race_collision(6) == 48, \"Wrong answer for car_race_collision(6)\"\nassert     car_race_collision(7) == 88, \"Wrong answer for car_race_collision(7)\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     car_race_collision(0) == 1\nassert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     car_race_collision(1) == 0, \"car_race_collision(1) == 0\"\nassert     car_race_collision(2) == 0, \"car_race_collision(2) == 0\"\nassert     car_race_collision(3) == 0, \"car_race_collision(3) == 0\"\nassert     car_race_collision(4) == 0, \"car_race_collision(4) == 0\"\nassert     car_race_collision(5) == 0, \"car_race_collision(5) == 0\"\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list(incr_list([1, 2, 3])) == [2, 3, 4]\nassert     incr_list([1]) == [2]\nassert     incr_list([]) == []\nassert incr_list(incr_list([1, 2])) == [2, 3]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1, 2, 3, 4] == incr_list([1, 2, 3, 4])\nassert     [2, 3, 4, 5] == incr_list([1, 2, 3, 4])\nassert     [3, 4, 5, 6] == incr_list([1, 2, 3, 4])\nassert     [4, 5, 6, 7] == incr_list([1, 2, 3, 4])\nprint(\"All tests passed!\")\n\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef incr_list2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4], \"incr_list([1, 2, 3]) == [2, 3, 4]\"\nassert     incr_list([1, 3, 6]) == [2, 4, 7], \"incr_list([1, 3, 6]) == [2, 4, 7]\"\nassert     incr_list([-1, -2, -3]) == [-2, -3, -4], \"incr_list([-1, -2, -3]) == [-2, -3, -4]\"\nassert     incr_list([7, 7, 7]) == [8, 8, 8], \"incr_list([7, 7, 7]) == [8, 8, 8]\"\nassert     incr_list([0]) == [1], \"incr_list([0]) == [1]\"\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (incr_list([0, 10, 100, 1000]) == [1, 11, 101, 1001])\n\ndef incr_tuple(t: tuple):\n    \"\"\"Return tuple with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([10, 20, 30]) == [11, 21, 31]\nprint(\"Test incr_list: Ok\")\n\ndef incr_list_precision(l: list):\n    \"\"\"Return list with elements incremented by 1 with the precision of 1e-2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [1, 2, 3] == incr_list([1,2,3])\nassert     [2, 3, 4] == incr_list([1,2,3])\nassert     [2, 3, 4] == incr_list([1,2,3])\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,-1,5,6,7,8]) == True\nassert     pairs_sum_to_zero([1,2,3,4,-1,5,6,7,8,9,10]) == False\nassert     pairs_sum_to_zero([1,2,3,4,5,6]) == False\nassert     pairs_sum_to_zero([-1,0,1,2,3,4]) == True\nassert     pairs_sum_to_zero([-1,0,1,2,3,4,5]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([0, -1, 2, 3, 1]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([0, -1, 2, 1, 1]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([0]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([0, 1, 2, 3, -1, -4]) == True, \"Wrong output\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5, -5, -3]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 0, -5, -3]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, -5, -3]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1, -1, 2, 3, -2, 4, 5, -3, 5]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([1, -1, 2, 3, -2, 4, 5, -3, 5, 0]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([1, 0, -1, 2, 3, 0, 4, 5, -3, 5]) == True, \"Wrong output\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([]) == False, 'list is empty'\nassert pairs_sum_to_zero([1]) == False, 'list has one element'\nassert pairs_sum_to_zero([1,2]) == False, 'list has two elements'\nassert pairs_sum_to_zero([1,0]) == True, 'list has two elements that sum to zero'\nassert pairs_sum_to_zero([1,2,3]) == False, 'list has more than two elements'\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1, 3, 7, -3, 1, -7]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([1, 3, 7, -3, 1, -7, 0]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([1, 3, -7, 1, -7]) == True, \"Wrong output\"\nassert     pairs_sum_to_zero([-3, -3, -7, 3]) == False, \"Wrong output\"\nassert     pairs_sum_to_zero([1, 3, -7, 1, -7, 0]) == True, \"Wrong output\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([1,2,-3,4,-5,6,7,8,9,10]) == True, \"Wrong output\"\nassert pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,10]) == False, \"Wrong output\"\nassert pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12]) == False, \"Wrong output\"\nassert pairs_sum_to_zero([0,-1,2,3,4,5,6,7,8,9,10]) == False, \"Wrong output\"\n\ndef pairs_sum_to_zero_hashtable(l):\n    \"\"\"\n    pairs_sum_to_zero_hashtable takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    ht = {}\n    for i in l:\n        if ht.get(i):\n            return True\n        else:\n            ht[-i] = 1\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"Wrong output\"\nassert pairs_sum_to_zero([0, 1, 2, 3, 4]) == False, \"Wrong output\"\nassert pairs_sum_to_zero([1, -1, 2, 3, 4]) == True, \"Wrong output\"\nassert pairs_sum_to_zero([1, -2, 2, 3, 4]) == True, \"Wrong output\"\nassert pairs_sum_to_zero([1, 2, -2, 3, 4]) == True, \"Wrong output\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3]) == False, \"pairs_sum_to_zero(1, 2, 3) should be False\"\nassert     pairs_sum_to_zero([-1, 2, 3]) == False, \"pairs_sum_to_zero(-1, 2, 3) should be False\"\nassert     pairs_sum_to_zero([0, 2, 3]) == False, \"pairs_sum_to_zero(0, 2, 3) should be False\"\nassert     pairs_sum_to_zero([1, 2, 3, -1, 4]) == True, \"pairs_sum_to_zero(1, 2, 3, -1, 4) should be True\"\nassert     pairs_sum_to_zero([1, 2, 3, 0, 4]) == True, \"pairs_sum_to_zero(1, 2, 3, 0, 4) should be True\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     change_base(10, 2) == \"1010\", \"10 in base 2 should be 1010\"\nassert     change_base(10, 16) == \"A\", \"10 in base 16 should be A\"\nassert     change_base(10, 10) == \"10\", \"10 should be 10\"\nassert     change_base(10, 8) == \"10\", \"10 in base 8 should be 10\"\nassert     change_base(10, 2) == \"1010\", \"10 in base 2 should be 1010\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     change_base(10, 2) == \"1010\"\nassert     change_base(2, 16) == \"10\"\nassert     change_base(10, 16) == \"A\"\nassert     change_base(0, 10) == \"0\"\nassert     change_base(0, 2) == \"0\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     change_base(2, 2) == '10'\nassert     change_base(2, 10) == '2'\nassert     change_base(2, 16) == '10'\nassert     change_base(10, 2) == '1010'\nassert     change_base(10, 16) == 'A'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     change_base(101, 2) == \"101\"\nassert     change_base(101, 8) == \"65\"\nassert     change_base(101, 16) == \"a\"\nassert     change_base(101, 32) == \"1a\"\nassert     change_base(101, 10) == \"101\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 16) == 'A'\nassert     change_base(10, 8) == '1010'\nassert     change_base(10, 10) == '10'\nassert     change_base(10, 4) == '1010'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     change_base(1234, 8) == \"2021\"\nassert change_base(1234, 10) == \"1234\"\nassert     change_base(1234, 2) == \"101010\"\nassert change_base(1234, 4) == \"31\"\nassert change_base(1234, 16) == \"41C\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     change_base(34, 2) == '100010'\nassert     change_base(11, 4) == '1011'\nassert     change_base(1, 7) == '1'\nassert     change_base(0, 10) == '0'\nassert     change_base(4, 16) == '10'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert _____ == change_base(10, 10)\nassert _____ == change_base(10, 10)\nassert _____ == change_base(10, 10)\nassert _____ == change_base(10, 10)\nassert _____ == change_base(10, 10)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     change_base(100, 2) == \"1100100\"\nassert     change_base(100, 16) == \"64\"\nassert     change_base(100, 8) == \"1100\"\nassert     change_base(100, 10) == \"100\"\nassert     change_base(100, 2) == \"1100100\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     change_base(0, 2) == '0'\nassert     change_base(3, 2) == '11'\nassert     change_base(5, 2) == '101'\nassert     change_base(0b101, 2) == '5'\nassert     change_base(0o37, 2) == '27'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triangle_area(3,4) == 6, \"the area should be 6.\"\nassert     triangle_area(8,5) == 36, \"the area should be 36.\"\nassert     triangle_area(12,7) == 105, \"the area should be 105.\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     triangle_area(10, 10) == 50\nassert     triangle_area(3, 4) == 6\nassert     triangle_area(2, 2) == 4\nassert     triangle_area(3, 5) == 12\n\n\ndef triangle_area_check(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    if a > 0 and h > 0:\n        return a*h*0.5\n    else:\n        raise ValueError(\"a and h must be positive values\")\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     0.5 * a * h         == triangle_area(a, h)\nassert     0.5 * a * h * h     == triangle_area(a, h)\nassert     0.5 * a * h * h * h     == triangle_area(a, h)\n\ndef square_area(a):\n    \"\"\"Given side length return area for a square.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint(triangle_area(5, 2))\nassert \nprint(triangle_area(6, 10))\nassert \nprint(triangle_area(7, 7))\nassert \nprint(triangle_area(8, 12))\nassert \nprint(triangle_area(10, 10))\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(3,2) == 3, 'triangle_area error 1'\nassert     triangle_area(6,10) == 36, 'triangle_area error 2'\nassert     triangle_area(8,4) == 20, 'triangle_area error 3'\n\ndef pentagon_area(a):\n    \"\"\"Given length of a side and high return area for a pentagon.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     triangle_area(3,5) == 6.0, \"Not a valid triangle\"\nassert     triangle_area(3,4) == 4.0, \"Not a valid triangle\"\nassert     triangle_area(2,4) == 2.0, \"Not a valid triangle\"\nassert     triangle_area(1,2) == 1.0, \"Not a valid triangle\"\nassert     triangle_area(1,3) == 2.0, \"Not a valid triangle\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(\"ok\""
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     triangle_area(3,4) == 3, 1\nassert     triangle_area(3,5) == 6, 1\nassert     triangle_area(3,6) == 12, 1\nassert     triangle_area(3,7) == 19, 1\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given length of sides, return perimeter for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6)\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fib4(0)         == 0,         'incorrect fib4(0)'\nassert     fib4(1)         == 0,         'incorrect fib4(1)'\nassert     fib4(2)         == 2,         'incorrect fib4(2)'\nassert     fib4(3)         == 0,         'incorrect fib4(3)'\nassert     fib4(4)         == 0,         'incorrect fib4(4)'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"\\nFib4:\")\n    for i in range(11):\n        print(\"fib4({}) = {}\".format(i, fib4(i)))"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     median([5, 4, 3, 2, 1]) == 2.5\nassert     median([6, 4, 2, 5, 1]) == 3.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     median([1, 2, 3, 4]) == 3\nassert     median([1, 2, 3, 4, 5]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 5\n\ndef quartiles(l: list):\n    \"\"\"Return the first and third quartiles of the elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     median([1,2,3,4,5,6,7,8,9]) == 5.5\nassert     median([1,2,3,4,5,6,7,8,9,10]) == 5.5\nassert     median([0,1,2,3,4,5,6,7,8,9]) == 5.5\nassert     median([1,2,3,4,5,6,7,8,9,10,11,12]) == 5.5\nassert     median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 5.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     median([1, 2, 3, 4]) == 3, \"wrong median\"\nassert     median([1, 2, 3, 4, 5]) == 3.5, \"wrong median\"\nassert     median([2]) == 2, \"wrong median\"\nassert     median([1]) == 1, \"wrong median\"\nassert     median([1, 1, 2]) == 1.5, \"wrong median\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     median([1, 2, 3, 4]) == 3\nassert     median([1, 3, 2, 4]) == 2\nassert     median([1, 4, 2, 3]) == 2.5\nassert     median([1, 2, 4, 3]) == 2.5\nassert     median([1, 2, 3, 4]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     median( [1, 2, 3, 4, 5] ) == 3\nassert     median( [3, 1, 2, 5, 3] ) == 3\nassert     median( [1, 5, 3, 4, 2] ) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     median([]) == None\nassert     median([3]) == 3\nassert     median([3,4]) == 3.5\nassert     median([3,4,5]) == 4\nassert     median([3,4,5,6]) == 4.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     median([4,5,6]) == 5\nassert     median([4,5,3]) == 4.5\nassert     median([4,5,3,2]) == 4\nassert     median([4,5,3,2,1]) == 3.5\nassert     median([1,4,5,2,3]) == 2.5\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n    median([2, 3, 5, 7]) == 5\n    median([1, 2, 3, 4]) == 2.5\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_palindrome('aba') == True\nassert     is_palindrome('abba') == True\nassert     is_palindrome('abca') == False\nassert     is_palindrome('abcba') == True\nassert     is_palindrome('abbcba') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_palindrome('') == True, 'Empty string'\nassert     is_palindrome('a') == True, 'One symbol'\nassert     is_palindrome('aa') == True, 'Two symbols'\nassert     is_palindrome('aba') == True, 'Two symbols, even'\nassert     is_palindrome('abba') == True, 'Two symbols, even'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abab\") == True\nassert     is_palindrome(\"ab\") == False\nassert     is_palindrome(\"abc\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"a\") == False\nassert     is_palindrome(\"aa\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcba\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_palindrome('madam') == True\nassert     is_palindrome('sam') == True\nassert     is_palindrome('redivider') == True\nassert     is_palindrome('redivider') == True\nassert     is_palindrome('ab') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"a man a plan a canal Panama\") == True\nassert     is_palindrome(\"race a car\") == False\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"ab\") == False\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (reverse string)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     modp(0, 5) == 1\nassert     modp(1, 5) == 4\nassert     modp(2, 5) == 2\nassert     modp(3, 5) == 1\nassert     modp(4, 5) == 5\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     modp(2, 5) == 3\nassert     modp(2, 6) == 3\nassert     modp(7, 11) == 7\nassert     modp(6, 10) == 6\nassert     modp(7, 19) == 7\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     modp(0, 5) == 2\nassert     modp(1, 5) == 3\nassert     modp(2, 5) == 2\nassert     modp(3, 5) == 1\nassert     modp(4, 5) == 4\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef op(a: int, b: int, c: int):\n    \"\"\"Return a modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n modulo m (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef my_gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef invp(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert modp(4, 7) == 1\nassert modp(10, 11) == 1\nassert modp(14, 13) == 10\nassert modp(7, 16) == 7\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n\ndef encode_affine(s: str, a: int, b: int):\n    \"\"\"\n    returns encoded string by replacing every character with the character whose ord(ch) is a + b\n    \"\"\"\n    return \"\".join([chr(((ord(ch) * a + b) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_affine(s: str, a: int, b: int):\n    \"\"\"\n    takes as input string encoded with encode_affine function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pas"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"a\")) == \"a\"\nassert     decode_shift(encode_shift(\"b\")) == \"b\"\nassert     decode_shift(encode_shift(\"c\")) == \"c\"\nassert     decode_shift(encode_shift(\"d\")) == \"d\"\nassert     decode_shift(encode_shift(\"e\")) == \"e\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decode_shift(encode_shift(\"abcd\")) == \"abcd\"\nassert decode_shift(encode_shift(\"nopq\")) == \"nopq\"\nassert     decode_shift(encode_shift(\"xyz\")) == \"xyz\"\n\ndef find_decode_shift(s: str, s_length: int):\n    \"\"\"\n    takes as input string s, and returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"zab\")) == \"zab\"\nassert     decode_shift(encode_shift(\"qxw\")) == \"qxw\"\nassert     decode_shift(encode_shift(\"dfj\")) == \"dfj\"\nassert     decode_shift(encode_shift(\"dfe\")) == \"dfe\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decode_shift(encode_shift(\"lives\")) == \"stirs\"\nassert     decode_shift(encode_shift(\"lives\")) == \"stirs\"\nassert     decode_shift(encode_shift(\"lives\")) == \"stirs\"\n\nassert     decode_shift(\"qpsoe\") == \"jxhe\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decode_shift(encode_shift(\"Hello\")) == \"Hello\"\n\nprint(encode_shift(\"Hello\"))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"a\")) == \"a\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"z\")) == \"z\"\nassert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"o\")) == \"o\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decode_shift(encode_shift(\"why\")) == \"you\"\nassert     decode_shift(encode_shift(\"what\")) == \"whaaaaat\"\nassert     decode_shift(encode_shift(\"epp\")) == \"paip\"\nassert     decode_shift(encode_shift(\"epp\")) == \"paip\"\nassert     decode_shift(encode_shift(\"epp\")) == \"paip\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     \"hello\" == decode_shift(\"vrvhjlcpo\")\nassert     \"world\" == decode_shift(\"xkvnqziz\")\nassert     \"foo\" == decode_shift(\"nxqyqcnz\")\nassert     \"bar\" == decode_shift(\"nzqyqxnc\")\n\n\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef has_vowels(text):\n    \"\"\"\n    has_vowels returns True if text contains any vowels, otherwise it returns False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('world') == 'wrld'\nassert     remove_vowels('what?') == 'wht'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"hello world\") == \"hll wrld\"\nassert     remove_vowels(\"what do you want\") == \"wht do yot want\"\nassert     remove_vowels(\"a\") == \"\"\nassert     remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_vowels('I have never seen a smiling face') =='hv nvr snfr snf jct'\nassert     remove_vowels('It is not difficult to think') == 'it nvr difficult tn th knw'\nassert     remove_vowels('Happy Birthday!') == 'Hppy Bdy!'\n\ndef rotate_word(text):\n    \"\"\"\n    rotate_word is a function that takes string and returns a new string that has been rotated \n    a given number of times.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_vowels('this is a test') =='ths s tst'\nassert     remove_vowels('aeiou') == ''\nassert     remove_vowels('why try, shy fly?') =='wh tr y, s fr?'\nprint('tests passed')\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     remove_vowels(string_1)         == \"srt\"\nassert     remove_vowels(string_2)         == \"str\"\nassert     remove_vowels(string_3)         == \"sttr\"\nassert     remove_vowels(string_4)         == \"tst\"\nassert     remove_vowels(string_5)         == \"tr\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"I have never seen such kind of behaviour.\") == \"hv nvr sn cn fd  ck tk  ng tn  kd\"\nassert     remove_vowels(\"I have never seen such kind of behaviour.\") == \"hv nvr sn cn fd  ck tk  ng tn  kd\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"I have never seen such kind of behaviour.\") == \"hv nvr sn cn fd  ck tk  ng tn  kd\"\nassert     remove_vowels(\"I have never seen such kind of behaviour.\") == \"hv nvr sn cn fd  ck tk  ng tn  kd\"\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('AI for ALL') =='fr LL'\nassert     remove_vowels('Are you #1?') == 'R yr #1'\nassert     remove_vowels('Lets all be unique') == 'Lts ll ss uniq'\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     below_threshold([1, 2, 3, 4], 5) == True\nassert     below_threshold([1, 2, 3, 4], 3) == False\nassert     below_threshold([0], 1) == False\nassert     below_threshold([], 5) == False\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     below_threshold([1, 2, 3, 4], 1) == False\nassert     below_threshold([1, 2, 3, 4], 2) == True\nassert     below_threshold([1, 2, 3, 4], 3) == True\nassert     below_threshold([1, 2, 3, 4], 4) == True\nassert     below_threshold([1, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     below_threshold([], t = 10) == False, \"empty case is False\"\nassert     below_threshold([1,2,3,4,5], t = 10) == False, \"list below threshold is False\"\nassert     below_threshold([1,2,3,4,5], t = 0) == True, \"list below threshold is True\"\nassert     below_threshold([1,2,3,4,5], t = 8) == True, \"list below threshold is True\"\nassert     below_threshold([1,2,3,4,5], t = 9) == False, \"list below threshold is False\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     below_threshold([5,2,3,4], 5) == True\nassert     below_threshold([5,2,3,4], 2) == True\nassert     below_threshold([5,2,3,4], 0) == False\nassert     below_threshold([0], 0) == True\nassert     below_threshold([0], 1) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     below_threshold([0,2,4,7,9], 9) == True, \"Check the number\"\nassert     below_threshold([0,2,4,7,9], 10) == False, \"Check the number\"\nassert     below_threshold([0,2,4,7,9], 0) == False, \"Check the number\"\nassert     below_threshold([], 0) == True, \"Check the number\"\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert ______________\n\ndef scale_list(l: list, k: int) -> list:\n    \"\"\"Return a list of all numbers in l scaled by a factor k.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     below_threshold([1, 2, 3, 4], 3) == False\nassert     below_threshold([1, 2, 3, 4], 1) == True\n\ndef smaller_than_right(l: list):\n    \"\"\"Return True if the last element in the list is smaller than its\n    neighbor to its right. Return False otherwise.\n\n    >>> smaller_than_right([1, 2, 3, 4])\n    False\n    >>> smaller_than_right([1, 2, 2, 3])\n    False\n    >>> smaller_than_right([1, 2, 3, 3])\n    False\n    >>> smaller_than_right([1, 2, 3, 4])\n    True\n    \"\"\"\n    pass\n\ndef last_element(l: list):\n    \"\"\"Return the last element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     below_threshold([1, 2, 3], 2) == True\nassert     below_threshold([1, 2, 3], 3) == True\nassert     below_threshold([1, 2, 3], 4) == False\nassert     below_threshold([1, 2, 3], 0) == False\nassert     below_threshold([], 4) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add(2, 2) == 4\nassert     add(2, 2, 3) == 5\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef get_input(default_input=None):\n    \"\"\"Get user input from command line.\n\n    :param default_input: if not None, the default value of the user input\n    \"\"\"\n    return input(f\"{default_input}\")\n\n\nif __name__ == \"__main__\":\n    print(add(1, 2))"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     ( add(1, 1) == 2 )\nassert     ( add(10, 1) == 11 )\nassert     ( add(1, 11) == 12 )\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add(3, 4) == 7\nassert     add(3, -1) == 2\n\nprint(\"check passed\")\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x and return the result\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, 2) == 3\nassert     add(1, 2) == 3\nassert     add(1, 2) == 3\nassert     add(1, 2) == 3\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     same_chars(\"hello\", \"helo\")\nassert     same_chars(\"heeello\", \"helo\")\nassert     same_chars(\"heeeello\", \"helo\")\nassert     same_chars(\"helo\", \"heeeello\")\nassert     same_chars(\"hello\", \"hello\")\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     same_chars(\"foo\", \"bar\") == False\nassert     same_chars(\"foo\", \"foofoo\") == True\nassert     same_chars(\"bar\", \"foofoo\") == False\nassert     same_chars(\"foofoo\", \"foofoo\") == True\nassert     same_chars(\"foofoo\", \"bar\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef find_all(a: str, b: str) -> List[int]:\n    \"\"\"\n    Find all the index for the substring b in the string a.\n    \"\"\"\n    pass\n\ndef is_substring(a: str, b: str) -> bool:\n    \"\"\"\n    Check if the substring b is a substring of the string a.\n    \"\"\"\n    pass\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    pass\n\ndef find_largest_palindrome(s: str) -> str:\n    \"\"\"\n    Find the largest palindrome that is a substring of the given string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     same_chars(\"house\", \"computers\")\nassert not same_chars(\"house\", \"computers1\")\nassert not same_chars(\"house\", \"\")\nassert same_chars(\"house\", \"house\")\nassert not same_chars(\"aa\", \"bb\")\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     same_chars(    \"abcd\", \"abcde\") is True, \"Wrong result for equal strings\"\nassert     same_chars(\"AbcDe\", \"abcDe\") is False, \"Wrong result for equal strings\"\nassert     same_chars(\"abc\", \"abc\") is True, \"Wrong result for equal strings\"\nassert     same_chars(\"a\", \"\") is False, \"Wrong result for equal strings\"\nassert     same_chars(\"\", \"\") is True, \"Wrong result for equal strings\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     same_chars(\"apple\", \"pale\") == False, \"same_chars('apple', 'pale') == False\"\nassert     same_chars(\"pale\", \"pale\") == True, \"same_chars('pale', 'pale') == True\"\nassert     same_chars(\"pale\", \"bale\") == True, \"same_chars('pale', 'bale') == True\"\nassert     same_chars(\"pale\", \"bae\") == False, \"same_chars('pale', 'bae') == False\"\nassert     same_chars(\"pale\", \"pale\") == True, \"same_chars('pale', 'pale') == True\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     same_chars(\"bob\", \"jon\") == False, \"1\"\nassert     same_chars(\"Bob\", \"jon\") == False, \"2\"\nassert     same_chars(\"bob\", \"jon\") == False, \"3\"\nassert     same_chars(\"Bob\", \"jon\") == False, \"4\"\nassert     same_chars(\"bob\", \"jon\") == False, \"5\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     same_chars('', 'a') == False, 'wrong answer'\nassert     same_chars('a', 'a') == True, 'wrong answer'\nassert     same_chars('apple', 'a') == False, 'wrong answer'\nassert     same_chars('apple', 'pp') == False, 'wrong answer'\nassert     same_chars('apple', 'apple') == True, 'wrong answer'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     same_chars('', '') == True, 'Empty strings are the same'\nassert     same_chars('a', 'a') == True, 'Strings with one character are the same'\nassert     same_chars('a', 'b') == False, 'Strings with different characters are not the same'\nassert     same_chars('abc', 'abcd') == False, 'Strings with different length are not the same'\nassert     same_chars('abc', 'c') == False, 'Strings with a different character are not the same'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     same_chars('cat', 'dog') == False\nassert same_chars('cat', 'cat') == True\nassert same_chars('cat', 'a') == True\nassert same_chars('cat', 'cat') == True\nassert same_chars('cat', 'cater') == True\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert\nassert\n\nassert\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert _____\n\nassert __ == fib(0)\nassert __ == fib(1)\nassert __ == fib(2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     0 == fib(0)\nassert     1 == fib(1)\nassert     1 == fib(2)\nassert     2 == fib(3)\nassert     3 == fib(4)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nfor i in range(8):\n    assert fib(i) == result(i)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<div>\")\nassert     correct_bracketing(\"<div>\")\nassert     not correct_bracketing(\"<div>>\")\nassert     not correct_bracketing(\"<><>\")\nassert     correct_bracketing(\"<>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<><>><><\") == False\nassert     correct_bracketing(\"<><>\") == True\nassert     correct_bracketing(\"\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint('Done.'"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing( \"<(<[(({})]<><>)>\" ) == False\nassert     correct_bracketing( \"<[<(({})]]>>\" ) == False\nassert     correct_bracketing( \"<[<(({})]>>\" ) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<html>\")\nassert not correct_bracketing(\"<h>tml\")\nassert not correct_bracketing(\"<h>\")\nassert not correct_bracketing(\">\")\nassert not correct_bracketing(\"\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert not \nassert\nassert\n\ndef check_balanced_brackets(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing('<') == True\nassert     correct_bracketing('<><>') == True\nassert     correct_bracketing('<><><>') == True\nassert     correct_bracketing('<><><>') == True\nassert     correct_bracketing('<><><><><><><><><><><>') == True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing('<><') == True,'should be True'\nassert     correct_bracketing('<>') == False,'should be False'\nassert     correct_bracketing('<<') == False,'should be False'\nassert     correct_bracketing('<') == False,'should be False'\nassert     correct_bracketing('') == True,'should be True'\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert\nassert\n\nassert \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) is True\nassert     monotonic([5, 4, 3, 2, 1]) is False\nassert     monotonic([1, 2, 2, 3, 4]) is False\nassert     monotonic([1, 1, 2, 3, 4]) is True\nassert     monotonic([1, 3, 2, 4, 5]) is True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     monotonic([1,2,3,4,5])\nassert     monotonic([1,2,3,3,4])\nassert     monotonic([1,1,1,1,1])\nassert     not monotonic([1,2,3,4,5])\nassert     not monotonic([1,2,3,3,4])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) == True\nassert     monotonic([5, 4, 3, 2, 1]) == True\nassert     monotonic([1, 2, 2, 2, 2]) == True\nassert     monotonic([1, 1, 1, 1, 1]) == True\nassert     monotonic([1, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) == True\nassert     monotonic([1, 4, 5, 3, 2]) == True\nassert     monotonic([-1, -2, -3, -4, -5]) == True\nassert     monotonic([1, 3, 2, 4, 5]) == False\nassert     monotonic([5, 4, 3, 2, 1]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef triangle(l: list):\n    \"\"\"Return True if list contains a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     monotonic([])\nassert     monotonic([0])\nassert     not monotonic([0, 1, 2])\nassert     monotonic([0, 1, 2, 3])\nassert     not monotonic([0, 1, 2, 4])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     monotonic([]) is True\nassert     monotonic([0]) is True\nassert     monotonic([-1]) is True\nassert     monotonic([0,1]) is True\nassert     monotonic([0,-1]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    list2 = [2, 4, 6, 7, 8, 9, 10, 11]\n    print(f\"common: {common(list1, list2)}\""
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     set(common([\"a\", \"b\", \"c\", \"d\"], [\"c\", \"d\", \"e\"])) == set([\"c\", \"d\"]), \"Error\"\nassert     set(common([\"b\", \"c\", \"d\", \"e\"], [\"c\", \"d\", \"e\", \"f\"])) == set([\"c\", \"d\", \"e\"]), \"Error\"\nassert     set(common([\"c\", \"d\", \"e\", \"f\"], [\"c\", \"d\", \"e\", \"f\"])) == set([\"c\", \"d\", \"e\", \"f\"]), \"Error\"\nassert     set(common([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"c\", \"d\", \"e\", \"f\"])) == set([\"c\", \"d\", \"e\", \"f\"]), \"Error\"\nassert     set(common([], [])) == set([]), \"Error\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     common([], []) == []\nassert     common([1, 1], [1, 2]) == [1]\nassert     common([1, 2, 3], [1, 2, 4]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 4, 5]) == [1, 2]\n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef simple(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    pass"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     common([1,2,3,4], [2,4,6,8]) == [2,4]\nassert     common([1,2,3,4], [1,2,4,5]) == [1,2,4]\nassert     common([1,2,3,4], [2,3,4]) == [2,3,4]\nassert     common([1,2,3,4], [1,3,4,5]) == [1,3,4]\nassert     common([1,2,3,4], [1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     common([], [1, 2, 3, 4, 5, 6]) == []\nassert     common([1, 2, 3, 4, 5], []) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef common_2(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    This function uses numpy to speed up the process.\n    \"\"\"\n    pass\n\ndef common_3(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    This function uses pandas to speed up the process.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(f\"common({common([1, 2, 3, 4, 5], [6, 7, 8, 9])}) = {common([1, 2, 3, 4, 5], [6, 7, 8, 9])}\")\n    print(f\"common({common([1, 2, 3, 4, 5, 1, 2, 3], [1, 2, 3])}) = {common([1, 2, 3, 4, 5, 1, 2, 3], [1, 2, 3])}\")\n    print(f\"common({common([1, 2, 3, 4, 5, 1, 2, 3], [4, 5])}) = {common([1, 2, 3, 4, 5, 1, 2, 3], [4, 5])}\")\n    print(f\"common({common([1, 2, 3, 4, 5, 1, 2, 3], [1, 2, 3, 4, 5])}) = {common([1, 2, 3, 4, 5, 1, 2, 3], [1, 2, 3, 4, 5])}\")\n    print(f\"common({common([1, 2, 3, 4, 5, 1, 2, 3], [])}) = {common([1, 2, 3, 4, 5, 1, 2, 3], [])}\")\n    print(f\"common({common([], [1, 2, 3, 4, 5, 1, 2, 3])}) = {common([], [1, 2, 3, 4, 5, 1, 2, 3])}\")\n    print(f\"common({common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([1, 2], [])}, {common([], [])}) = {common([1, 2], [])}\")\n    print(f\"common({common([], [1, 2])}, {common([], [])}) = {common([], [1, 2])}\")\n    print(f\"common({common([], [1, 2])}, {common([], [])}) = {common([], [1, 2])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([1, 2], [])}, {common([], [])}) = {common([1, 2], [])}\")\n    print(f\"common({common([1, 2], [])}, {common([], [])}) = {common([1, 2], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([1], [])}, {common([], [])}) = {common([1], [])}\")\n    print(f\"common({common([1], [])}, {common([], [])}) = {common([1], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([1], [])}, {common([], [])}) = {common([1], [])}\")\n    print(f\"common({common([1], [])}, {common([], [])}) = {common([1], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], [])}\")\n    print(f\"common({common([], [])}, {common([], [])}) = {common([], "
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     common([1,2,3,4], [2,4,6]) == [2,4], \\\n        f\"common({[1,2,3,4]}, {[2,4,6]}) should be [2,4]\"\nassert     common([1,2,3,4], [2,4,6,8]) == [2,4], \\\n        f\"common({[1,2,3,4]}, {[2,4,6,8]}) should be [2,4]\"\nassert     common([1,2,3,4,5], [2,4,6,8]) == [], \\\n        f\"common({[1,2,3,4,5]}, {[2,4,6,8]}) should be []\"\n\nassert     common([1,2,3,4], [1,2,3]) == [1,2,3], \\\n        f\"common({[1,2,3,4]}, {[1,2,3]}) should be [1,2,3]\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'd', 'e']) == ['a']\nassert common(['a', 'b', 'c'], ['x', 'y', 'z']) == []\nassert common(['a', 'b', 'c', 'd'], ['a', 'b', 'e', 'f']) == ['a', 'b']\nassert common(['a', 'b', 'c', 'd'], ['a', 'b', 'e']) == ['a', 'b']\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(6) == 3, \"Error\"\nassert     largest_prime_factor(26) == 13, \"Error\"\nassert     largest_prime_factor(1234567890) == 9\nassert     largest_prime_factor(1347) == 11, \"Error\"\nassert     largest_prime_factor(14) == 2, \"Error\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(9) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(13195 * 39) == 29\nassert     largest_prime_factor(13195 * 39) == 29\nassert     largest_prime_factor(13195 * 391) == 29\nassert     largest_prime_factor(13195 * 393) == 29\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(54) == 54\nassert     largest_prime_factor(25) == 5\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(27) == 3\nassert     largest_prime_factor(1) == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(13195 * 13195) == 29\nassert     largest_prime_factor(13195 * 13195 * 13195) == 29\nassert     largest_prime_factor(13195 * 13195 * 13195 * 13195) == 29\nassert     largest_prime_factor(13195 * 13195 * 13195 * 13195 * 13195) == 29\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef prime_factors(n: int):\n    \"\"\"Return a set of the prime factors of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(13195*2) == 29\nassert     largest_prime_factor(13195*19) == 17\nassert     largest_prime_factor(13195*20) == 17\nassert     largest_prime_factor(13195*21) == 17\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(13195) == 29\nassert     largest_prime_factor(13195*28) == 29\nassert     largest_prime_factor(13195*28*29) == 29\nassert     largest_prime_factor(13195*28*29*19) == 29\nassert     largest_prime_factor(13195*28*29*19*23) == 23\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(101) == 101\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(7) == 7\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef sum_all_nums(n: int):\n    \"\"\"sum_all_nums is a function that sums all numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(20) == 260\nassert     sum_to_n(100) == 5050\n\ndef sum_to_n_lazy(n: int):\n    \"\"\"sum_to_n_lazy is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef factorial(n: int):\n    \"\"\"factorial is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") is True, \"(\"\nassert     correct_bracketing(\"(())\") is True, \"(())\"\nassert     correct_bracketing(\"())\") is False, \")\"\nassert     correct_bracketing(\"((()\") is False, \"(\"\nassert     correct_bracketing(\"())(\") is False, \"(\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"()\")\nassert     correct_bracketing(\"()()\")\nassert     correct_bracketing(\"(()()\")\nassert not correct_bracketing(\"())(\")\nassert     correct_bracketing(\"((()\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\")(()\") == False\nassert     correct_bracketing(\"((()\") == False\nassert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\"(())((()())())\") == True\nassert     correct_bracketing(\"(())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef remove_parentheses(brackets: str):\n    \"\"\" remove parentheses from brackets \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"\")         == True, \"Empty string\"\nassert     correct_bracketing(\"(\")         == False, \"Missing bracket ( should have been true\"\nassert     correct_bracketing(\")(\")         == False, \"Missing bracket ) should have been false\"\nassert     correct_bracketing(\"((())((())()))\")     == True, \"Wrongly nested brackets\"\nassert     correct_bracketing(\"(())(\")         == False, \"Missing bracket ) should have been false\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"()()\")\nassert     correct_bracketing(\"(()())\")\nassert     correct_bracketing(\"((()))\")\nassert     correct_bracketing(\"(()\")\nassert     correct_bracketing(\"(()))(\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \ncorrect_bracketing(\"(()())\") == True\nassert correct_bracketing(\"((()))\") == True\nassert correct_bracketing(\"((())\") == False\nassert correct_bracketing(\")\") == False\n\ndef balanced_brackets(brackets: str):\n    \"\"\" return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"(()())\")\nassert     correct_bracketing(\"())\")\nassert not correct_bracketing(\"(()\")\nassert not correct_bracketing(\")(()\")\nassert not correct_bracketing(\"())(\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\"(()))()\") == False\nassert     correct_bracketing(\"(((()())())\") == False\nassert     correct_bracketing(\"(())((()())()))\") == False\nassert     correct_bracketing(\")()\") == False\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef transform(xs: list, coeff: int):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    coeff is an integer such that 1 <= coeff <= len(xs)\n     Return a polynomial in the same form where xs[coeff - 1] is replaced by x ** coeff.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     derivative([]) == []\nassert     derivative([1, 1]) == [2]\nassert     derivative([1, 2, 4]) == [2, 3]\nassert     derivative([1, 0, 1]) == [2, 2]\nassert     derivative([2, 1, 2, 4]) == [3, 5, 7]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \n\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef find_polynomial(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Find polynomial (polynomial with degree 2) with the smallest value of function f(x)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     derivative([1, 0, 0, 0]) == [0, 1, 0, 0]\nassert     derivative([0, 1, 0, 0]) == [0, 0, 1, 0]\nassert     derivative([0, 0, 1, 0]) == [0, 0, 0, 1]\nassert     derivative([0, 0, 0, 1]) == [0, 0, 0, 0]\nassert     derivative([0, 0, 0, 0]) == [0, 0, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef secant_method(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    xs[1] + xs[2] * x + xs[3] * x^2 +....\n    xs[2] + xs[3] * x + xs[4] * x^2 +....\n    ...\n     xs[i] + xs[i+1] * x + xs[i+2] * x^2 +....\n     Return xs[i+1]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n\ndef get_derivative(p: Polynomial):\n    \"\"\" Return the derivative of a given polynomial p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef fibfib_test_case(n: int):\n    \"\"\"\n    In this test case we have:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(3) == 1\n    fibfib(4) == 2\n    fibfib(5) == 3\n    fibfib(6) == 5\n    fibfib(7) == 13\n    fibfib(8) == 21\n    fibfib(9) == 34\n    fibfib(10) == 55\n    fibfib(11) == 89\n    fibfib(12) == 144\n    fibfib(13) == 233\n    fibfib(14) == 377\n    fibfib(15) == 610\n    fibfib(16) == 987\n    fibfib(17) == 1597\n    fibfib(18) == 2584\n    fibfib(19) == 4181\n    fibfib(20) == 6765\n    fibfib(21) == 10946\n    fibfib(22) == 17711\n    fibfib(23) == 28657\n    fibfib(24) == 46368\n    fibfib(25) == 75025\n    fibfib(26) == 121393\n    fibfib(27) == 196418\n    fibfib(28) == 317811\n    fibfib(29) == 514229\n    fibfib(30) == 832040\n    fibfib(31) == 1346269\n    fibfib(32) == 2178309\n    fibfib(33) == 3524578\n    fibfib(34) == 5702887\n    fibfib(35) == 9227465\n    fibfib(36) == 14930352\n    fibfib(37) == 24157817\n    fibfib(38) == 39088169\n    fibfib(39) == 63245986\n    fibfib(40) == 102334155\n    fibfib(41) == 165580141\n    fibfib(42) == 267914296\n    fibfib(43) == 433494437\n    fibfib(44) == 701408733\n    fibfib(45) == 1134903170\n    fibfib(46) == 1836311903\n    fibfib(47) == 2971215073\n    fibfib(48) == 4807526976\n    fibfib(49) == 7778742049\n    fibfib(50) == 12586269025\n    fibfib(51) == 20365011074\n    fibfib(52) == 32951280099\n    fibfib(53) == 53316291173\n    fibfib(54) == 86267571272\n    fibfib(55) == 139583862445\n    fibfib(56) == 225851433717\n    fibfib(57) == 365435296162\n    fibfib(58) == 593496664894\n    fibfib(59) == 953748558753\n    fibfib(60) == 1548008755920\n    fibfib(61) == 2504730781961\n    fibfib(62) == 4052739537881\n    fibfib(63) == 6557470319842\n    fibfib(64) == 10610209857723\n    fibfib(65) == 17717794160047\n    fibfib(66) == 28159781749408\n    fibfib(67) == 4999792028864\n    fibfib(68) == 74039174437665\n    fibfib(69) == 125407614077364\n    fibfib(70) == 216269110163126\n    fibfib(71) == 3217105636946437\n    fibfib(72) == 498454011879264\n    fibfib(73) == "
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     vowels_count('abcde') == 0\nassert     vowels_count('aeiou') == 6\nassert     vowels_count('yay') == 2\nassert     vowels_count('yayy') == 1\nassert     vowels_count('xyz') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     vowels_count(\"apples\") == 3\nassert     vowels_count(\"octopi\") == 2\nassert     vowels_count(\"foo\") == 0\nassert     vowels_count(\"iiiiiiiiii\") == 12\nassert     vowels_count(\"yoo\") == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     vowels_count(\"abcde\") == 0, \"wring\"\nassert     vowels_count(\"abcdea\") == 1, \"wring\"\nassert     vowels_count(\"abcdeaa\") == 2, \"wring\"\nassert     vowels_count(\"abcdeaaa\") == 3, \"wring\"\nassert     vowels_count(\"abcdeaaaa\") == 4, \"wring\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     vowels_count('bee') == 2, 'bee'\nassert     vowels_count('bey') == 2, 'bey'\nassert     vowels_count('beyb') == 3, 'beyb'\nassert     vowels_count('beee') == 3, 'beee'\nassert     vowels_count('beeee') == 5, 'beeee'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     vowels_count(\"\") == 0, \"Empty string\"\nassert     vowels_count(\"a\") == 1, \"One vowel\"\nassert     vowels_count(\"aeiou\") == 5, \"There are 5 vowels in this string\"\nassert     vowels_count(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 0, \"No vowels in this string\"\nassert     vowels_count(\"abcdefghijklmnopqrstuvwxyz\") == 26, \"No vowels in this string\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     vowels_count('hello') == 2\nassert     vowels_count('deeplearning') == 4\nassert     vowels_count('aaligtng') == 0\nassert     vowels_count('thequickbrownfoxjumpsoverthelazydog') == 7\nassert     vowels_count('leetcode') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef test_vowels_count():\n    assert vowels_count('puppy') == 3, 'puppy'\n    assert vowels_count('i') == 1, 'i'\n    assert vowels_count('foobar') == 3, 'foobar'\n    "
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     vowels_count('happy') == 3\nassert     vowels_count('mad') == 2\nassert     vowels_count('abcdefg') == 0\nassert     vowels_count('yay') == 2\n\nprint(\"PASSED ALL TESTS!\")\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     str(circular_shift(42, 1)) == '24'\nassert     str(circular_shift(42, 2)) == '13'\nassert     str(circular_shift(42, 3)) == '12'\nassert     str(circular_shift(42, 5)) == '42'\nassert     str(circular_shift(42, 8)) == '42'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     \"3412\" == circular_shift(3412, 1)\nassert     \"1234\" == circular_shift(3412, 2)\nassert     \"123456789\" == circular_shift(3412, 9)\nassert     \"987654321\" == circular_shift(3412, 10)\nassert     \"23456789\" == circular_shift(3412, -1)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     '4321' == circular_shift('1234', 1)\nassert     '4321' == circular_shift('1234', 2)\nassert     '4321' == circular_shift('1234', 3)\nassert     '1234' == circular_shift('1234', 4)\nassert     '1234' == circular_shift('1234', 5)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     circular_shift('12345', 3) == '23456'\nassert     circular_shift('12345', -3) == '54321'\nassert     circular_shift('12345', 0) == '12345'\nassert     circular_shift('12345', 10) == '1234'\nassert     circular_shift('12345', 100) == '54321'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     '3412' == circular_shift('1234', 1)\nassert     '4321' == circular_shift('1234', 2)\nassert     '432' == circular_shift('1234', 3)\nassert     '1' == circular_shift('1234', 4)\nassert     '3412' == circular_shift('1234', -1)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     circular_shift(123,1)==\"132\", 'Wrong result'\nassert     circular_shift(123,2)==\"213\", 'Wrong result'\nassert     circular_shift(123,3)==\"231\", 'Wrong result'\nassert     circular_shift(123,-1)==\"321\", 'Wrong result'\nassert     circular_shift(123,-2)==\"312\", 'Wrong result'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (circular_shift(\"1234\", 1) == \"4321\"), \"Error\"\nassert     (circular_shift(\"1234\", 2) == \"2341\"), \"Error\"\nassert     (circular_shift(\"1234\", 3) == \"3412\"), \"Error\"\nassert     (circular_shift(\"1234\", 4) == \"1423\"), \"Error\"\nassert     (circular_shift(\"1234\", 0) == \"1234\"), \"Error\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     str(circular_shift(12345, 1)) == \"23451\"\nassert     str(circular_shift(12345, 2)) == \"34512\"\nassert     str(circular_shift(12345, 3)) == \"45123\"\nassert     str(circular_shift(12345, 4)) == \"512345\"\nassert     str(circular_shift(12345, 5)) == \"123455\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digitSum(\"asd5\") == 5\nassert     digitSum(\"a9.1\") == 9\nassert     digitSum(\"asd5\") == 5\nassert     digitSum(\"a9.1\") == 9\nassert     digitSum(\"asd5\") == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digitSum('a') == 97, digitSum('a')\nassert     digitSum('The') == 75, digitSum('The')\nassert     digitSum('The') == 75, digitSum('The')\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     digitSum(\"5\") == 5\nassert     digitSum(\"h\") == 104\nassert     digitSum(\"5F2\") == 18\nassert     digitSum(\"GFG\") == 106\nassert     digitSum(\"Zpk\") == 122\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     digitSum('ABC') == 48\nassert     digitSum('ABCBA') == 48 + 64 + 96\nassert     digitSum('1ABC1') == 48 + 64 + 96 + 64 + 96\nassert     digitSum('1A') == 32 + 64 + 96\nassert     digitSum('A') == 32 + 64 + 96\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digitSum(\"hello\") == 5\nassert     digitSum(\"+\") == 53\nassert     digitSum(\"++\") == 51\nassert     digitSum(\"+s\") == 53\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     digitSum(\"ABD12A345\") == 10\nassert     digitSum(\"\") == 0\nassert     digitSum(\"ABCD\") == 10\nassert     digitSum(\"ABD\") == 10\nassert     digitSum(\"ABD12A\") == 8\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"10:10:10\", 10) == \"3 mango\"\nassert     fruit_distribution(\"0:2:1\", 4) == \"2 orange\"\nassert     fruit_distribution(\"0:0:0\", 1) == \"0 mango\"\nassert     fruit_distribution(\"0:0:0\", 0) == \"0 apple\"\nassert     fruit_distribution(\"0:0:0\", 1) == \"0 mango\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"3x2\", 3) == 2, \"3x2 represents 3 apples and 2 oranges\"\nassert     fruit_distribution(\"2x2\", 1) == \"Impossible to distribute\", \"Impossible to distribute\"\nassert     fruit_distribution(\"3x2\", 2) == \"Impossible to distribute\", \"Impossible to distribute\"\nassert     fruit_distribution(\"5x2\", 5) == \"Impossible to distribute\", \"Impossible to distribute\"\nassert     fruit_distribution(\"1x1\", 3) == \"Impossible to distribute\", \"Impossible to distribute\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fruit_distribution('254032896', 8) == '7'\nassert fruit_distribution('254032896', 8)!= '6'\nprint('Passed all tests')\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     fruit_distribution('6 3', 7) == 1\nassert fruit_distribution('6 4', 7) == 0\nassert fruit_distribution('6 4', 8) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n    fruit_distribution(\"7 5\", \"2\") == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"1 1\", 2) == 1\nassert     fruit_distribution(\"0 1\", 0) == 0\nassert     fruit_distribution(\"-1 -1\", -2) == -1\nassert     fruit_distribution(\"1 -1\", 1) == 0\nassert     fruit_distribution(\"-1 2\", 1) == -1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     fruit_distribution('|5|','|1|') == 3\nassert     fruit_distribution('|5|','|3|') == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"apples, 1, oranges, 5, 5\", 1) == 3\nassert fruit_distribution(\"apples, 1, oranges, 5, 5\", 2) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"2 apples, 4 oranges\", 7) == 2\nassert     fruit_distribution(\"0 oranges, 0 apples\", 3) == 0\nassert     fruit_distribution(\"1 apple, 2 oranges\", 3) == 1\nassert     fruit_distribution(\"3 apples, 0 oranges\", 3) == 3\nassert     fruit_distribution(\"1 orange, 5 apples\", 3) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     fruit_distribution('2 apples, 4 oranges',7) == 5, \"Wrong output for apple_distribution('2 apples, 4 oranges',7) == 5\"\nassert     fruit_distribution('1 apple, 2 oranges',7) == 3, \"Wrong output for apple_distribution('1 apple, 2 oranges',7) == 3\"\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(fruit_distribution('1 apple, 2 oranges', 7))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [2, 0] == pluck([[0, 1, 2], [3, 4], [5, 6, 7]])\nassert     [1, 2] == pluck([[1, 2, 3], [4, 5], [6, 7, 8]])\nassert     [] == pluck([[1, 2, 3], [4, 5], [6, 7, 8], [9, 10]])\nassert     [] == pluck([[]])\nassert     [] == pluck([[3], [2], [0], [1]])"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == [1, 0]\nassert     pluck([1, 3]) == [1, 0]\nassert     pluck([1, 1, 2]) == [1, 0]\nassert     pluck([1, 1, 2, 3]) == [1, 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pluck([2, 6, 8, 7, 5, 8, 9, 0, 3, 6]) == [0, 3]\nassert     pluck([8, 6, 4, 2, 3, 6, 7, 6, 8, 9, 4]) == [6, 9]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8]) == []\nassert     pluck([7]) == [7]\nassert     pluck([0, 3, 8, 9, 4, 2, 6]) == [0, 2]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nassert "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     pluck([1, 3, 2, 4]) == [1, 1]\nassert     pluck([1, 3, 2, 4, 6]) == [4, 3]\nassert     pluck([1, 3, 2, 4, 6, 7, 8, 9, 10]) == [6, 3]\nassert     pluck([1, 3, 2, 4, 6, 7, 8, 9, 10, 20]) == [8, 3]\nassert     pluck([1, 3, 2, 4, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == [10, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [ 10, 2 ] == pluck([ 0, 1, 10, 2, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2, 30, 40, 50, 3, 2, 1, 2"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pluck([1, 3, 6, 2, 4]) == [2, 0]\nassert     pluck([1, 3, 6, 2, 4, 5]) == [2, 1]\nassert     pluck([1, 3, 6, 2, 4, 5, 7]) == []\nassert     pluck([1, 3, 6, 2, 4, 5, 7, 9]) == [2, 0]\nassert     pluck([1, 3, 6, 2, 4, 5, 7, 9, 8]) == [2, 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pluck([1,2,3,4,5,6]) == [ 2, 5 ]\nassert     pluck([1,3,5,7]) == [ ]\nassert     pluck([]) == []\nassert     pluck([1,3,5,7,8,9,2]) == [ 2, 6 ]\nassert     pluck([1,3,5,7,8,9,2,10]) == [ 2, 6 ]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     pluck([2,3,6,7,8,9,0,5,7,8]) == [0,7]\nassert     pluck([2,3,6,7,8,9,0,5,7,8,10,11]) == [0,7]\nassert     pluck([]) == []\nassert     pluck([1,3,5,6,7,8,9]) == []\nassert     pluck([2,4,6,7,8,9]) == []\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     search([1, 1, 1, 2, 1, 1, 3, 3, 3]) == 2\nassert search([1, 2, 2, 3, 3]) == 3\nassert search([1, 2, 1, 3, 1]) == 2\nassert search([1, 1, 1, 2, 1, 1, 1, 1, 3]) == 3\nassert search([1, 2, 3, 3, 3]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     search([1,2,2,1]) == 2\nassert     search([1,1,2,2,3,3,3,2,2,1]) == 3\nassert     search([1,1,2,2,3,3,3,2,2,1]) == 3\nassert     search([]) == -1\nassert     search([1,1,2,2,3,3,3,2,2,1]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     search([1,2,2,3,3,3,4,4,4,4]) == 4\nassert     search([0,0,1,1,1,2,2,3,3,3]) == -1\nassert     search([2,3,3,3,3]) == -1\nassert     search([2,2,2,2,2]) == -1\nassert     search([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nprint('greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself is', search([1, 2, 2, 3, 3, 3]))\nprint('greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself is', search([1, 2, 2, 3, 4, 4]))\nprint('greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself is', search([1, 2, 2, 3, 3, 3, 3, 4, 5, 6])"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef search2(lst):\n    '''\n    Use binary search to find the integer. The binary search will return the index of the first occurance \n    of the target value in the list. If the target value is not in the list, then the binary search will \n    return -1. \n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     search([1, 2, 1, 1, 3, 1, 1, 5]) == 3\nassert     search([1, 2, 1, 1, 3, 1, 1, 5]) == 5\nassert     search([1, 2, 1, 1, 3, 1, 1, 5]) == -1\nassert     search([2, 2, 2, 2, 3, 2, 2]) == 2\nassert     search([1, 2, 1, 1, 3, 1, 1, 5, 1]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert _____, _____\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     strange_sort_list([5, 3, 1, 2, 4]) == [1, 3, 2, 4, 5], 'WA-1'\nassert     strange_sort_list([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5], 'WA-2'\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'WA-3'\nassert     strange_sort_list([10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10], 'WA-4'\nassert     strange_sort_list([]) == [], 'WA-5'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     strange_sort_list([7,5,3,1]) == [1,3,5,7], \\\n        'Not a strange sorting list!'\nassert     strange_sort_list([7,1,3,5]) == [1,3,5,7], \\\n        'Not a strange sorting list!'\nassert     strange_sort_list([1,3,7,5]) == [1,3,5,7], \\\n        'Not a strange sorting list!'\nassert     strange_sort_list([7,7,7,7,7]) == [7,7,7,7,7], \\\n        'Not a strange sorting list!'\nassert     strange_sort_list([1,7,3,5,7]) == [1,3,5,7,7], \\\n        'Not a strange sorting list!'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3], 'wrong result'\nassert     strange_sort_list([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5], 'wrong result'\nassert     strange_sort_list([4, 3, 2, 1]) == [1, 2, 3, 4], 'wrong result'\n\nif __name__ == '__main__':\n    print('Example:')\n    print(strange_sort_list([1, 2, 3, 4, 5]))\n    print(strange_sort_list([5, 5, 5, 5, 5]))\n    print(strange_sort_list([4, 3, 2, 1]))\n\n    # These \""
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert _____\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3], \"Wrong answer\"\nassert     strange_sort_list([5, 3, 2, 4, 1]) == [1, 5, 2, 4, 3], \"Wrong answer\"\nassert     strange_sort_list([1]) == [1], \"Wrong answer\"\nassert     strange_sort_list([]) == [], \"Wrong answer\"\nassert     strange_sort_list([-5, -3, -2, -4, -1]) == [-5, -4, -3, -2, -1], \"Wrong answer\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     strange_sort_list([6, 4, 5, 3, 1, 2]) \nassert     strange_sort_list([6, 1, 2, 4, 3, 5]) \nassert     strange_sort_list([1, 2, 3, 4, 5, 6])\nassert     strange_sort_list([6, 5, 4, 3, 2, 1])\nassert     strange_sort_list([2, 1, 3, 4, 6, 5])\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4, 5) == 6.00\nassert     triangle_area(3, 4, 3) == -"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nprint('Testing triangle_area()...', end='')\nassert triangle_area(1, 1, 2) == 0.5\nassert triangle_area(1, 2, 3) == 4/3\nassert triangle_area(1, 1, 1) == 1\nassert triangle_area(1, 2, 2) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (triangle_area(3,4,5) == 6)\nassert     (triangle_area(3,5,4) == 6)\nassert     (triangle_area(3,6,5) == -1)\n\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     triangle_area(3, 4, 5) == 6\nassert     triangle_area(1, 1, 3) == 2\nassert     triangle_area(2, 3, 4) == -1\nassert     triangle_area(5, 5, 5) == -1\n\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     triangle_area(1, 1, 1) == 0.5, \"triangle_area(1, 1, 1) == 0.5\"\nassert     triangle_area(1, 1, 2) == 2, \"triangle_area(1, 1, 2) == 2\"\nassert     triangle_area(1, 2, 2) == 1, \"triangle_area(1, 2, 2) == 1\"\nassert     triangle_area(1, 2, 3) == 1, \"triangle_area(1, 2, 3) == 1\"\nassert     triangle_area(3, 2, 2) == 0.5, \"triangle_area(3, 2, 2) == 0.5\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\ndef area_of_triangle_method_two(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    pass\n\n\ndef is_pentagonal(x):\n    '''\n    A pentagonal number is a number in the form of 1st^3 + 5st^2 + 3st + 1\n    where s is the suffix for the number (1st, 2nd, 3rd, 4th, 5th)\n    Write a program that prompts the user to enter a pentagonal number and \n    checks whether it is a valid pentagonal number.\n    '''\n    pass\n\n\ndef is_pentagonal_method_two(x):\n    '''\n    A pentagonal number is a number in the form of 1st^3 + 5st^2 + 3st + 1\n    where s is the suffix for the number (1st, 2nd, 3rd, 4th, 5th)\n    Write a program that prompts the user to enter a pentagonal number and \n    checks whether it is a valid pentagonal number.\n    '''\n    pass\n\n\ndef is_hexagonal(x):\n    '''\n    A hexagonal number is a number in the form of 1st^3 + 2st^2 + 3st + 1\n    where s is the suffix for the number (1st, 2nd, 3rd, 4th, 5th)\n    Write a program that prompts the user to enter a hexagonal number and \n    checks whether it is a valid hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     abs(triangle_area(4, 3, 4) - 6.95) < 0.01\nassert     triangle_area(1, 2, 3) == 1.0\nassert     triangle_area(4, 3, 4) == 6.95\nassert     triangle_area(5, 8, 13) == 0.75\nassert     triangle_area(1, 1, 1) == 1.0\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     triangle_area(1, 1, 2) == 1.5\nassert     triangle_area(3, 3, 4) == 1.5\nassert     triangle_area(3, 4, 5) == 1.5\nassert     triangle_area(4, 3, 6) == 3.60\nassert     triangle_area(3, 7, 8) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     will_it_fly([],100) == False, \"wrong result\"\nassert     will_it_fly([10,10],100) == False, \"wrong result\"\nassert     will_it_fly([1,2,3,4,3,2,1],7) == True, \"wrong result\"\nassert     will_it_fly([10,10,1,1,1,1,1],7) == False, \"wrong result\"\nassert     will_it_fly([0,0,0],0) == False, \"wrong result\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], 100 ) == False, \"Wrong output\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], 10 ) == True, \"Wrong output\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], 15 ) == False, \"Wrong output\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], 8 ) == True, \"Wrong output\"\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], 20 ) == True, \"Wrong output\"\nprint(\"Almost there...\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     will_it_fly([1],1) == False\nassert     will_it_fly([1],100) == True\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10],100) == True\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10,11],100) == False\nassert     will_it_fly([1,2,3,4,5,6,7,8,9,10,11],101) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     will_it_fly([1,2,3], 5) == False, \"Case 1 failed\"\nassert     will_it_fly([1,2,3], 2) == True, \"Case 2 failed\"\nassert     will_it_fly([1,2,3], 5) == True, \"Case 3 failed\"\nassert     will_it_fly([1,2,3], 8) == True, \"Case 4 failed\"\nassert     will_it_fly([1,2,3], 4) == False, \"Case 5 failed\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     will_it_fly([1,2,3,4,5,6], 15) == True\nassert     will_it_fly([1,2,3,4,5], 15) == False\nassert     will_it_fly([1,2,3,4], 15) == True\nassert     will_it_fly([1,2,3], 15) == True\nassert     will_it_fly([1,2,3,4,5,6], 15) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     will_it_fly([1, 1, 1, 1], 2) == False\nassert     will_it_fly([1, 1, 1, 1, 1], 2) == False\nassert     will_it_fly([1, 1, 1, 1, 1], 5) == True\nassert     will_it_fly([1, 1, 1, 1, 1], 6) == False\nassert     will_it_fly([1, 1, 1, 1, 1], 4) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     will_it_fly([1, 2, 3], 2) == True\nassert     will_it_fly([1, 2, 3, 4], 2) == False\nassert     will_it_fly([1, 2, 3, 4], 3) == False\nassert     will_it_fly([1, 2, 3, 4], 1) == True\nassert     will_it_fly([1, 2, 3, 4], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     will_it_fly([],10) == False, 'empty list will not fly'\nassert     will_it_fly([1,2,3],10) == False,'short list will not fly'\nassert     will_it_fly([1,2,3,4,5,6,7],20) == False, 'long list will not fly'\nassert     will_it_fly([1,2,3,4,5,6,7],19) == True, 'long list with enough weight will fly'\nassert     will_it_fly([1,2,3,4,5,6,7],1) == True, 'weight of 1 will fly'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     will_it_fly(None, 10) == False, 'None will not fly'\nassert will_it_fly('', 10) == False, 'Empty list will not fly'\nassert will_it_fly(['a', 'a'], 10) == False, 'a list will not fly'\nassert will_it_fly([], 10) == False, 'Empty list will not fly'\nassert will_it_fly(['a', 'a', 'a'], 10) == True, 'a list will fly'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     will_it_fly([1,3,2,2,2], 4) == False\nassert     will_it_fly([1,1], 3) == False\nassert     will_it_fly([1,1,3,3,2,2,1], 3) == True\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n\nif __name__ == \"__main__\":\n    pas"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     smallest_change(['ab', 'cd', 'ef']) == 1\nassert     smallest_change(['ab', 'cd', 'ecb']) == 1\nassert     smallest_change(['ab', 'cb']) == 2\nassert     smallest_change(['ab', 'cd', 'ecb', 'ca']) == 2\nassert     smallest_change(['ab', 'cd', 'ecb', 'ca', 'dcb']) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     smallest_change([1, 3, 2, 1]) == 1\nassert     smallest_change([1, 2, 3, 2, 1]) == 2\nassert     smallest_change([3, 2, 1, 2, 3]) == 0\nassert     smallest_change([1, 2, 3, 2, 1, 2]) == 2\nassert     smallest_change([1, 2, 3, 2, 1, 2, 2, 2, 2]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3]) == 1\nassert     smallest_change([1, 2, 1, 2, 1, 3]) == 1\nassert     smallest_change([1, 2, 3, 2, 1]) == 0\nassert     smallest_change([1, 2, 3, 2, 1, 3]) == 0\nassert     smallest_change([1, 1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef palindrome_pairs(arr):\n    \"\"\"\n    Given an array arr of integers, for each index i in the array, check whether the number at index\n    i is a palindrome. If it is, return the index of its first occurrence (with i). If it is not a\n    palindrome, return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     smallest_change([\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]) == 1, \"WA :(\"\nassert     smallest_change([\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\",\"canada\"]) == 2, \"WA :(\"\nassert     smallest_change([\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\",\"canada\",\"dear\"]) == 0, \"WA :(\"\nassert     smallest_change([\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\",\"canada\",\"dear\",\"pop\"]) == 4, \"WA :(\"\nassert     smallest_change([\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\",\"canada\",\"dear\",\"pop\",\"canada\"]) == 1, \"WA :(\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     smallest_change([1,2,3,4,3,2,1]) == 1, \"bug in smallest_change\"\nassert     smallest_change([1,1,1]) == 0, \"bug in smallest_change\"\nassert     smallest_change([4, 3, 5, 4, 4]) == 0, \"bug in smallest_change\"\nassert     smallest_change([3,1,4,2,3]) == 2, \"bug in smallest_change\"\nassert     smallest_change([1,2,1]) == 1, \"bug in smallest_change\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     smallest_change([1, 2, 3, 1]) == 2\nassert     smallest_change([1, 2, 3, 4, 4, 3, 2, 1]) == 1\nassert     smallest_change([1, 1, 2, 3, 4, 4, 3, 2, 1]) == 0\nassert     smallest_change([1, 2, 3, 3, 3, 3, 2, 1]) == 0\nassert     smallest_change([3, 1, 4, 4, 3, 2, 1, 2, 3, 3]) == 1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\n\n'''\nWrite a function to check whether two strings are anagrams or not.\nTwo strings are called anagrams if one string can be obtained by rearranging the characters \nof another string. For example, the following two strings are called anagrams.\n\n'heart'\n'earth'\nHowever, the following two strings are not called anagrams.\n\n'earth'\n'heart'\n'''\n\ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    Two strings are called anagrams if one string can be obtained by rearranging the characters \n    of another string. For example, the following two strings are called anagrams.\n    \n    'heart'\n    'earth'\n    However, the following two strings are not called anagrams.\n    \n    'earth'\n    'heart'\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     total_match(['apple','money', 'winter'], ['water', 'potatoes', 'fire']) == ['apple','money']\nassert     total_match(['money','mug', 'winter'], ['water', 'potatoes', 'fire']) == ['money','mug']\nassert     total_match(['apple','money', 'winter'], ['water', 'potatoes', 'fire']) == ['apple','money', 'winter']\nassert     total_match(['money','mug', 'winter'], ['water', 'potatoes', 'fire']) == ['money','mug', 'winter']\nassert     total_match(['apple','money', 'winter'], ['water', 'potatoes', 'fire']) == ['apple','money', 'winter']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     total_match(['abc', 'abcd', 'abd'], ['ab', 'abc', 'abcd', 'abcde', 'abd']) == \\\n        ['ab', 'abc', 'abcd', 'abd']\nassert     total_match(['abc', 'abcd', 'abd'], ['ab', 'abc', 'abcd', 'abcde', 'abd']) == \\\n        ['abc', 'abcd', 'abd']\nassert     total_match(['abc', 'abcd', 'abd'], ['ab', 'abc', 'abcd', 'abcde', 'abd']) == \\\n        ['abc', 'abcd', 'abd']\nassert     total_match(['abc', 'abcd', 'abd'], ['ab', 'abc', 'abcd', 'abcde', 'abd']) == \\\n        ['abc', 'abcd', 'abd']\nassert     total_match(['abc', 'abcd', 'abd'], ['ab', 'abc', 'abcd', 'abcde', 'abd']) == \\\n        ['abc', 'abcd', 'abd']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     total_match(['a', 'c', 'b', 'd', 'h'], ['a', 'b', 'c', 'd', 'h']) == ['a', 'b', 'c']\nassert total_match(['a', 'c', 'b', 'd', 'h'], ['a', 'b', 'c', 'd', 'h', 'z']) == ['a', 'b', 'c']\nassert total_match(['a', 'c', 'b', 'd', 'h'], ['a', 'b', 'c', 'd', 'h', 'z', 'z']) == ['a', 'b', 'c', 'd', 'h']\n\n\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     total_match(['a', 'dd', 'xyz', 'apple'], ['apple', 'bcd', 'xyz', 'apple']) == ['apple']\nassert     total_match(['a', 'dd', 'xyz', 'apple'], ['apple', 'bcd', 'xyz', 'apple']) == ['apple']\nassert     total_match(['abc', 'def'], ['cde', 'efg']) == ['abc']\nassert     total_match(['abc', 'def'], ['def', 'abc']) == ['abc', 'def']\nassert     total_match(['abcd', 'efg', 'hij'], ['abc', 'def']) == ['abcd', 'efg']\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     total_match(['abc', 'abcd', 'ab'], ['abcde', 'ab']) == ['abc', 'ab'] \nassert     total_match(['abc', 'abcd', 'ab'], ['abcde', 'ab']) == ['abcde', 'ab'] \nassert     total_match(['abc', 'abcd', 'ab'], ['abcde', 'ab']) == ['abcde', 'ab']\nassert     total_match(['abc', 'abcd', 'ab'], ['abcde', 'ab']) == ['abcde', 'ab']\nassert     total_match(['abc', 'abcd', 'ab'], ['abcde', 'ab']) == ['abcde', 'ab']\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(12) == True\nassert     is_multiply_prime(18) == False\nassert     is_multiply_prime(21) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(0) == False\nassert     is_multiply_prime(6) == False\nassert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == False\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(60) == False\nassert     is_multiply_prime(18) == False\nassert     is_multiply_prime(21) == True\nassert     is_multiply_prime(7) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert\nprint(is_multiply_prime(60))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(60) == False\nassert     is_multiply_prime(18) == True\nassert     is_multiply_prime(20) == False\nassert     is_multiply_prime(24) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_simple_power(9, 3) == True\nassert     is_simple_power(24, 2) == True\nassert     is_simple_power(4, 2) == False\nassert     is_simple_power(3, 3) == False\n\n\ndef is_simple_power2(x, n):\n    \"\"\"\n    Returns true if x is a power of n and false in other cases.\n    \"\"\"\n    while x > 1:\n        if x % n == 0:\n            x /= n\n        else:\n            return False\n    return x == 1\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(81, 3) == True\nassert     is_simple_power(27, 3) == False\nassert     is_simple_power(81, 4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_simple_power(9, 2) == True, \"is_simple_power(9, 2) failed\"\nassert     is_simple_power(10, 2) == False, \"is_simple_power(10, 2) failed\"\nassert     is_simple_power(27, 3) == True, \"is_simple_power(27, 3) failed\"\nassert     is_simple_power(27, 4) == False, \"is_simple_power(27, 4) failed\"\n\nprint(\"You are awesome!\")"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_simple_power(2, 3) == False\nassert     is_simple_power(2, 4) == True\nassert     is_simple_power(2, 16) == False\nassert     is_simple_power(3, 5) == False\nassert     is_simple_power(2, 5) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(3, 2) == False\nassert     is_simple_power(8, 2) == True\nassert     is_simple_power(9, 2) == False\nassert     is_simple_power(5, 1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(25, 5) == False\nassert     is_simple_power(1023, 4) == True\nassert     is_simple_power(8, 4) == False\nassert     is_simple_power(81, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 4) == True\nassert     is_simple_power(3, 2) == True\nassert     is_simple_power(3, 4) == False\nassert     is_simple_power(0, 0) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_simple_power(32, 2) == True, \"T\"\nassert     is_simple_power(89, 2) == True, \"T\"\nassert     is_simple_power(54, 2) == False, \"F\"\nassert     is_simple_power(122, 2) == False, \"F\"\nassert     is_simple_power(7, 3) == True, \"T\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_simple_power(4,2) == True\nassert     is_simple_power(27,3) == True\nassert     is_simple_power(125,5) == True\nassert     is_simple_power(1,1) == True\nassert     is_simple_power(5,3) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     iscube(27) == True \nassert     iscube(16) == False \nassert     iscube(27**3) == True\nassert     iscube(27**3-1) == False\n\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a palindrome. \n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef iscube_test():\n    assert iscube(1) == True\n    assert iscube(0) == False\n    assert iscube(27) == True\n    "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_cube(1) == True, 'Error, case 1'\nassert     is_cube(2) == False, 'Error, case 2'\nassert     is_cube(9) == True, 'Error, case 3'\nassert     is_cube(27) == True, 'Error, case 4'\nassert     is_cube(35) == False, 'Error, case 5'\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     iscube(1) == True\nassert     iscube(0) == False\nassert     iscube(3) == True\nassert     iscube(9) == False\nassert     iscube(27) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     iscube(27) == True\nassert     iscube(27 * 27) == True\nassert     iscube(27 * 27 * 27) == True\nassert     iscube(0) == False\nassert     iscube(9) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     iscube(27) == True, 'incorrect'\nassert     iscube(64) == True, 'incorrect'\nassert     iscube(81) == True, 'incorrect'\nassert     iscube(9) == False, 'incorrect'\nassert     iscube(125) == False, 'incorrect'\nprint('Passed all tests.')"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     iscube(1) == True, \"Failed test 1\"\nassert     iscube(8) == True, \"Failed test 2\"\nassert     iscube(27) == True, \"Failed test 3\"\nassert     iscube(64) == True, \"Failed test 4\"\nassert     iscube(125) == False, \"Failed test 5\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     hex_key('') == 0, 'Wrong answer'\nassert     hex_key('A') == 0, 'Wrong answer'\nassert     hex_key('ABC') == 0, 'Wrong answer'\nassert     hex_key('ABCD') == 0, 'Wrong answer'\nassert     hex_key('ABCDEF') == 0, 'Wrong answer'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('A') == 0\nassert     hex_key('B') == 0\nassert     hex_key('C') == 0\nassert     hex_key('D') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     hex_key(\"5\") == \"7\"\nassert hex_key(\"F2\") == \"3\"\nassert hex_key(\"A\") == \"3\"\nassert hex_key(\"AA\") == \"7\"\nassert hex_key(\"\") == \"0\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     hex_key('0x0') == 0\nassert     hex_key('0x12345') == 1\nassert     hex_key('0xABCDEF') == 3\nassert     hex_key('0Xabcdef') == 3\nassert     hex_key('0X4b9d9997') == 3\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     hex_key(\"4E\") == 3, \"Wrong answer for hex_key('4E')\"\nassert     hex_key(\"2B\") == 1, \"Wrong answer for hex_key('2B')\"\nassert     hex_key(\"\") == 0, \"Wrong answer for hex_key('')\"\nassert     hex_key(\"4E5F\") == 2, \"Wrong answer for hex_key('4E5F')\"\nassert     hex_key(\"4F\") == 1, \"Wrong answer for hex_key('4F')\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     hex_key('0') == 6\nassert     hex_key('B') == 2\nassert     hex_key('D') == 3\nassert     hex_key('B') == 2\nassert     hex_key('F') == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     hex_key('ABCDEF') == (2,3,5,7,11,13)\nassert     hex_key('ABCD') == (2,3,5,7,11,13)\nassert     hex_key('AB') == (2,3,5,7,11,13)\nassert     hex_key('1111') == (2,3,5,7,11,13)\nassert     hex_key('1') == (2,3,5,7,11,13)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     hex_key(11211212) == 4\nassert     hex_key('1121212') == 4\nassert     hex_key('1121212F') == 3\nassert     hex_key('1121212S') == 4\nassert     hex_key('121212S') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     hex_key('') ==     (0, 0, 0, 0)\nassert     hex_key('0') ==     (0, 0, 0, 0)\nassert     hex_key('2') ==     (0, 0, 0, 0)\nassert     hex_key('ABCDEF') ==     (0, 0, 0, 0)\nassert     hex_key('AB12CD3EF') ==     (2, 2, 2, 2)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     hex_key('A3E9') ==     [4, 3, 2, 5, 7, 11]\nassert     hex_key('A7E9') ==     [7, 5, 3, 5, 11, 7]\nassert     hex_key('A0E9') ==     [8, 5, 4, 5, 11, 7]\nassert     hex_key('A2E9') ==     [2, 3, 5, 5, 11, 7]\nassert     hex_key('A3E') ==     [3, 2, 5, 7, 11]\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(-1) == '-1db'\nassert decimal_to_binary(0) == '0db'\nassert decimal_to_binary(1) == '1db'\nassert decimal_to_binary(2) == '10db'\nassert decimal_to_binary(9) == '1001db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(7) == \"111\"\nassert     decimal_to_binary(9) == \"1001\"\nassert     decimal_to_binary(10) == \"1010\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == \"0db\"\nassert     decimal_to_binary(1) == \"1db\"\nassert     decimal_to_binary(2) == \"10db\"\nassert     decimal_to_binary(7) == \"111db\"\nassert     decimal_to_binary(9) == \"1001db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(255) == '11111111'\nassert     decimal_to_binary(99) == '11101101'\nassert     decimal_to_binary(11) == '1011'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(0) == '0'\nprint('decimal_to_binary() is OK')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(1) == '101'\nassert     decimal_to_binary(2) == '110'\nassert     decimal_to_binary(3) == '111'\nassert     decimal_to_binary(7) == '111db0'\nassert     decimal_to_binary(15) == '1111db0db0'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == \"db01111111111db\"\nassert     decimal_to_binary(3) == \"db10111111db\"\nassert     decimal_to_binary(7) == \"db111db\"\nassert     decimal_to_binary(9) == \"db11110db\"\nassert     decimal_to_binary(18) == \"db111111111db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(30) == '101101101010'\n\ndef convert_binary_to_decimal(binary):\n    \"\"\"\n    You will be given a binary number and you must convert it to decimal.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef decimal_to_octal(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    octal format. The function should return a string, with each character representing a octal\n    number. Each character in the string will be '0' or '1', '2' or '3', '4' or '5', '6' or '7'.\n\n    There will be an extra couple of characters 'dto' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nprint(decimal_to_binary(3))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(73))\nprint(decimal_to_binary(847))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(50))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(9001))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(34))\nprint(decimal_t"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(10) == \"db10\"\nassert     decimal_to_binary(9) == \"db9\"\nassert     decimal_to_binary(99) == \"db99\"\nassert     decimal_to_binary(45) == \"db49\"\nassert     decimal_to_binary(21) == \"db101\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"abcdef\") == True\nassert     is_happy(\"abbcde\") == False\nassert     is_happy(\"aabcdde\") == False\nassert     is_happy(\"abcdeee\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_happy('abcbaba') == False\nassert     is_happy('abcabab') == True\nassert     is_happy('aabcabab') == True\nassert     is_happy('aabcaab') == False\nassert     is_happy('aaaa') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_happy('python') == True\nassert     is_happy('jython') == False\nassert     is_happy('python') == True\nassert     is_happy('sml') == False\nassert     is_happy('smiling') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_happy(\"abc\") == True, \"wrong result\"\nassert     is_happy(\"abcab\") == False, \"wrong result\"\nassert     is_happy(\"abcdef\") == False, \"wrong result\"\nassert     is_happy(\"aabcdef\") == True, \"wrong result\"\nassert     is_happy(\"abbccc\") == True, \"wrong result\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"abcdefg\") == False\nassert     is_happy(\"aabbcc\") == False\nassert     is_happy(\"xy\") == False\nassert     is_happy(\"abcd\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef is_valid(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is valid or not.\n    A string is valid if all its characters are the same.\n    Input Format\n    The first line contains an integer t, the number of test cases.\n    Each of the next t lines contains a string s.\n    Constraints\n    0 <= t <= 10^4\n    0 <= length of s <= 10^5\n    Output Format\n    For each string s, print YES if it is valid or NO if it is not.\n    \"\"\"\n    pass\n\n\n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_happy(\"aaa\") == True\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"aabbcc\") == True\nassert     is_happy(\"aabbccddeeff\") == True\nassert     is_happy(\"aabbccddeeffa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef test_is_happy():\n    assert \n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabbc\") == True\n    "
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade(['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0', '0.7', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0']) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']\nassert     numerical_letter_grade(['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0', '0.7', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0']) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\n\nprint(\"Now you can compare the performance of different students!\")"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0]) == ['A+']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A', 'A', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert numerical_letter_grade([3.3, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A', 'A', 'A', 'B', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert numerical_letter_grade([3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert numerical_letter_grade([2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4."
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == 'A+'\nassert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == 'A+'\nassert     numerical_letter_grade([3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]) == 'A'\nassert     numerical_letter_grade([3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]) == 'A-'\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]) == 'B+'\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4,4,4,4,4,4,4,4,4,4]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\nassert     numerical_letter_grade([3.7,4,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D']\nassert     numerical_letter_grade([3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3."
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade(    [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E', 'E', 'E']\nassert     numerical_letter_grade(    [3.9, 3.2, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E', 'E', 'E']\nassert     numerical_letter_grade(    [3.5, 2.6, 2.2, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E', 'E', 'E']\nassert     numerical_letter_grade(    [3.4, 3.0, 3.0, 2.6, 2.2, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E', 'E', 'E']\nassert     numerical_letter_grade(    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0])     == ['A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([3.7, 3.7, 3.7, 3.7, 3.7])     == ['A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([3.3, 3.3, 3.3, 3.3, 3.3])     == ['A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 3.0])     == ['B', 'B', 'B', 'B', 'B']\nassert     numerical_letter_grade([2.7, 2.7, 2.7, 2.7, 2.7])     == ['B', 'B', 'B', 'B', 'B']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.5, 3.1, 3.0, 2.8, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.5, 3.1, 3.0, 2.7, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.5, 3.1, 3.0, 2.7, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.5, 3.1, 3.0, 2.7, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n    prime_length('Dasd') == False\n    prime_length('abcdefg') == True\n    prime_length('abc') == True\n    prime_length('123456789') == False\n    prime_length('Dasd') == True\n    prime_length('12345678910111213141516171819') == False\n    prime_length('1') == True\n    prime_length('0') == False\n    prime_length('1') == True\n    prime_length('999') == False\n    prime_length('1000') == False\n    prime_length('10001') == True\n    prime_length('101010') == False\n    prime_length('101010') == True\n    prime_length('1') == True\n    prime_length('0') == False\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prime_length(\"asdf\") == False, \"this doesn't work with strings\"\nassert prime_length(29) == False, \"this doesn't work with numbers\"\nassert prime_length(23) == True, \"this doesn't work with numbers\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prime_length(\"alice\")\nassert not prime_length(\"bob\")\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prime_length(33) == False, \"This is not a prime number\"\nassert     prime_length(23) == True, \"This is a prime number\"\nassert     prime_length(10) == False, \"This is not a prime number\"\nassert     prime_length(9) == True, \"This is a prime number\"\n\n\ndef number_in_range(num):\n    \"\"\"Write a function that takes a number and returns True if the number is\n    in the range [12, 20]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prime_length(\"\") == False, \"Error\"\nassert     prime_length(\"hiiiiiiiii\") == False, \"Error\"\nassert     prime_length(\"12345\") == False, \"Error\"\nassert     prime_length(\"13\") == True, \"Error\"\nassert     prime_length(\"101\") == False, \"Error\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     prime_length('hello') == False, 'wrong output'\nassert     prime_length('77') == False, 'wrong output'\nassert     prime_length('777777') == False, 'wrong output'\nassert     prime_length('77777777') == False, 'wrong output'\nassert     prime_length('23') == False, 'wrong output'\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prime_length('matt') == False, 'incorrect'\nassert     prime_length('hassam') == True, 'incorrect'\nassert     prime_length('23') == False, 'incorrect'\nassert     prime_length('33') == True, 'incorrect'\nassert     prime_length('67') == True, 'incorrect'\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     prime_length('hello') == False\nassert     prime_length('apple') == True\nassert     prime_length('prime') == False\nassert     prime_length('2345') == True\nassert     prime_length('42424') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\n\ndef sum_of_squares(n):\n    \"\"\"Write a function that returns the sum of squares of all numbers from 1 to n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prime_length(\"hello\") == False, \"not a prime\"\nassert prime_length(\"45\") == True, \"is a prime\"\nassert prime_length(\"8\") == False, \"not a prime\"\nassert prime_length(\"12\") == False, \"not a prime\"\nassert prime_length(\"75\") == False, \"not a prime\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 47\nassert     starts_one_ends(3) == 114\nassert     starts_one_ends(4) == 309\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 8\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(5) == 2\nassert     starts_one_ends(19) == 4\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 10\nassert     starts_one_ends(3) == 12\nassert     starts_one_ends(4) == 20\nassert     starts_one_ends(5) == 20\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     starts_one_ends(4) == 0\nassert     starts_one_ends(5) == 1\nassert     starts_one_ends(6) == 1\nassert     starts_one_ends(7) == 2\nassert     starts_one_ends(8) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 3\nassert     starts_one_ends(5) == 6\nassert     starts_one_ends(6) == 8\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     starts_one_ends(1) ==     1\nassert     starts_one_ends(2) ==     2\nassert     starts_one_ends(3) ==     4\nassert     starts_one_ends(4) ==     8\n\ndef test_starts_one_ends():\n    \"\"\"\n    check the correctness of starts_one_ends\n    \"\"\"\n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (solve(123) == \"11101\")\nassert     (solve(0) == \"0\")\nassert     (solve(100) == \"1100\")\nassert     (solve(200) == \"1110\")\nassert     (solve(1000) == \"1110111\")\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    solve(123) == \"1101010\"\n    solve(456) == \"101100\"\n    solve(3) == \"11\"\n    solve(2) == \"10\"\n    solve(5) == \"101\"\n    solve(12) == \"1100\"\n    solve(0) == \"0\"\n    solve(1) == \"1\"\n    solve(10) == \"1010\"\n    solve(100) == \"1011010\"\n    solve(1000) == \"101101011100\"\n    solve(1002) == \"101101011100\"\n    solve(20) == \"1011010111001100\"\n    solve(0) == \"0\"\n    solve(0) == \"0\"\n    solve(10) == \"1010\"\n    solve(10) == \"1010\"\n    solve(1) == \"1\"\n    solve(2) == \"10\"\n    solve(11) == \"1011\"\n    solve(100) == \"1011010\"\n    solve(200) == \"101101101110\"\n    solve(700) == \"1011011011101111011100\"\n    solve(701) == \"1011011011101111011100\"\n    solve(9) == \"1001\"\n    solve(99) == \"10110111101110011110\"\n    solve(111) == \"101110111010\"\n    solve(999) == \"101111011101111011100\"\n    solve(1001) == \"101111011110111110\"\n    solve(0) == \"0\"\n    solve(1) == \"1\"\n    solve(10) == \"1010\"\n    solve(100) == \"1011010\"\n    solve(101) == \"10110101110\"\n    solve(1010) == \"10110101110\"\n    solve(10101) == \"1011010111101110\"\n    solve(101010) == \"101101011110111101110\"\n    solve(10110101010) == \"10110101111011110111101110\"\n    solve(2) == \"10\"\n    solve(20) == \"1011010111001100110011001100110011001100110011110\"\n    solve(100) == \"101101011110111101110011110\"\n    solve(1000) == \"101101011110111101111011110110110111101110011110\"\n    solve(10000) == \"1011010111101111011110111101101101101101111011110111001100110011001100110011001100110011110\"\n    solve(10001) == \"1011010111101111011110111101101101101101101111011110111101111011110111101110011110\"\n    solve(10110101010) == \"1011010111101111011110111101101101101101111011110111101111011110111101101110011110\"\n    solve(101101010110) == \"101101011110111101111011110110110110110111101111011110111101111011110110111101110\"\n    solve(10110101010) == \"1011010111101111011110111101101101101101111011110111101111011110111101101101110011110\"\n    solve(101101010) == \"101101011110111101111011110110110110110111101111011110111101111011110110111101110011110\"\n    solve(1011010111010) == \"10110101111011110111101111011011011011011110111101111011110111101111011011110111110\"\n    solve(10110101101010) == \"101101011110111101111011110110110110110111101111011110111101111011110110111101110011110\"\n    solve(10110101101101010) == \"10110101111011110111101111011011011011011110111101111011110111101111011011110111110\"\n    solve(10110101101101101010) == \"1011010111101111011110"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(8) == \"1000\"\nassert     solve(0) == \"0\"\nassert     solve(5) == \"101\"\nassert     solve(1) == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    if (len(argv) > 1 and argv[1] == \"--test\"):\n        cProfile.run(\"solve(int(argv[2]))\")\n    else:\n        solve(int(argv[1]))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solve(1) == '10'\nassert     solve(2) == '101010'\nassert     solve(3) == '101101101010'\nassert     solve(4) == '101101101101010'\nassert     solve(10) == '1010'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add([0, 1, 2, 3, 4, 5]) == [0, 2, 4]\nassert     add([0, 1, 2, 3]) == [0, 2]\nassert     add([2, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == [4, 8, 12]\nassert     add([0, 1, 2, 3, 4, 5]) == [0, 2, 4, 6]\nprint(\"Correctness of add Passed!\")\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef sub(lst):\n    \"\"\"Given a non-empty list of integers lst. subtract the odd elements that are at even indices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add([1, 2, 3, 4])         == [4, 2, 0, 0]\nassert     add([1, 3, 5])         == [1, 1, 1, 0]\nassert     add([2, 4, 6])         == [0, 0, 0, 0]\nassert     add([8, 9, 12, 16, 20, 21])     == [0, 0, 0, 0, 0, 0]\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add([1,2,3,4]) == None\nassert     add([1,3,5]) == None\nassert     add([1,2,3,5,6]) == None\nassert     add([1,2,3,6,7]) == None\nassert     add([1,2,3,7,8,9]) == None\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add([0,1,2,3,4,5,6,7,8]) == [0,2,4,6,8], \"Wrong answer\"\nassert     add([0,1,2,3,4,5,6,7,8,9]) == [2,4,6,8,10], \"Wrong answer\"\nassert     add([0,1,2,3,4,5,6,7,8,9,10]) == [4,8,12,16,20], \"Wrong answer\"\nassert     add([0,1,2,3,4,5,6,7,8,9,10,11]) == [2,4,6,8,10,12], \"Wrong answer\"\nassert     add([0,1,2,3,4,5,6,7,8,9,10,11,12]) == [4,8,12,16,20,24], \"Wrong answer\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (add([1,2,3,4]) == [4,2,0,0])\nassert     (add([1,2,3,4,5]) == [3,4,0,0,0])\nassert     (add([1,2,3,4,5,6]) == [2,4,6,0,0,0])\nassert     (add([1,2,3,4,5,6,7]) == [2,4,6,0,0,0,0])\nassert     (add([1,2,3,4,5,6,7,8]) == [2,4,6,8,0,0,0,0])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (add([8, 8, 8, 8, 8, 8]) == [0, 0, 0, 0, 0, 0]), add([8, 8, 8, 8, 8, 8])\nassert     (add([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 0, 0, 0]), add([1, 2, 3, 4, 5, 6])\nassert     (add([10, 15, 3, 6, 12, 20]) == [12, 0, 0, 0, 0, 0]), add([10, 15, 3, 6, 12, 20])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) ==     [1, 3, 5, 7]\nassert     add([2, 3, 4, 5, 6, 7]) ==     [2, 4, 6, 7]\nassert     add([3, 4, 5, 6, 7]) ==     [4, 6, 8]\nassert     add([4, 5, 6, 7]) ==     [4, 8]\nassert     add([5, 6, 7]) ==     [8]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) == 10, \"List example failed\"\nassert     add([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Even list example failed\"\nassert     add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 24, \"Odd list example failed\"\nassert     add([]) == None, \"Empty list example failed\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     anti_shuffle('This is string!') == 'TThs is strint!'\nassert     anti_shuffle('This is a sentence') == 'TThs is a senentence'\nassert     anti_shuffle('I have a dream') == 'I hva a drmae'\nassert     anti_shuffle('I have a dream') == 'I hva a drmae'\n\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     anti_shuffle('the quick brown fox jumped over the lazy dog') == 'the t kuick q rown bwown f ox jumpe d ver over th elzy dg'\nassert     anti_shuffle('4of Fo1r pe6ople g3ood th5e the2') == '4of Fo1r pe6ople g3ood th5e the2'\nassert     anti_shuffle('sentence') =='sentencce'\nassert     anti_shuffle('of the') == 'ofthe'\nassert     anti_shuffle('of t he') == 'oft he'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"Hey John how are you doing\") == \"Hey JOhn hwre araw ydoing\"\nassert     anti_shuffle(\"My name is John\") == \"My nAmE iS jOhn\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"abc\") == \"abc\"\nassert     anti_shuffle(\"123\") == \"123\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     anti_shuffle(shuffle('This is a test sentence')) == 'This is a test sen tence'\nassert anti_shuffle(shuffle('This is a test sentence.')) == 'Thi s i s a t es t en c e n t.'\nassert anti_shuffle(shuffle('This is a test sentence. ')) == 'This is a test sen tence. '\nassert anti_shuffle(shuffle('This is a test sentence..')) == 'Thi s i s a t es t en c e n t..'\nassert anti_shuffle(shuffle('This is a test sentence...')) == 'Thi s i s a t es t en c e n t...'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"aBcd efgh ijkl mnop qrst uvw xy z\") == \"ABCD EFGH IJKL MNOP QRST UVW XY Z\"\nassert     anti_shuffle(\" The quick brown fox jumps over the lazy dog\") == \"TIEH QCIK BROWN FOX JUMPS OVER TLAZY DOG\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     anti_shuffle(\"I am here\") == \"here am I\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog\") == \"The qicuk brown fox jummpes over the lazy dgo\"\nassert     anti_shuffle(\"I am here and there\") == \"here eam and there I am\"\nassert     anti_shuffle(\"abc def ghi\") == \"abc d ef g h i\"\nassert     anti_shuffle(\"I am here and there\") == \"here eam and there I am\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     anti_shuffle('My name is hello') == 'aHEMni ihllE'\nassert anti_shuffle('A quick brown fox jumps over the lazy dog.') == 'aHEMni ihllE qickA uickrBown fox jumSph oveer thlEzy doG.'\nassert anti_shuffle('Myself') == 'aHEMmi self'\n\n\ndef shuffle_count(sentence):\n    \"\"\"\n    Write a function that takes a sentence and returns an ordered version of it.\n    Ordered version of sentence, is a sentence where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    descending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"this is string example....wow!!!\") == \"tist hsis spijrog eexampl....wow!!!\"\nassert     anti_shuffle(\"welcome to Educative\") == \"emocleet ot ecnuacivt\"\nassert     anti_shuffle(\"python is easy\") == \"onh ths is yzzyx esy\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"a\") == \"a\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef sent_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns a randomly shuffled version of it.\n    For example, if the input is:\n    \u201cabc\u201d, then the output could be:\n    \u201ccab\u201d, \u201cacb\u201d, \u201cbac\u201d, \u201cbca\u201d, etc.\n    Hint: you need to do exactly the same thing as shuffle, but you have to make sure\n    that the output string is different from the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"hel5lo!!!!\") == \"hello!!!!\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"hello world!!!!!!!\") == \"hello world!!!!!\"\nassert     anti_shuffle(\"hello world!!!!!!!\") == \"hello world!!!!!\"\n\n\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 1) == [(1,0), (1,1), (1,2)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 4) == [(3,2), (3,1), (3,0)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 10) == []\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 0) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_row([[1, 2], [3, 4]], 1) == [(1, 0), (1, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 2) == [(1, 2), (1, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(1, 2), (1, 1)]\nassert     get_row([[1, 2], [3, 4]], 3) == []\nassert     get_row([], 2) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_row([[1, 1, 1, 1, 1],\n                  [1, 2, 2, 2, 1],\n                  [1, 2, 3, 2, 1],\n                  [1, 2, 2, 2, 1]], 2) == [(1, 3), (2, 1), (2, 2), (3, 1)]\nassert     get_row([[1, 1, 1, 1, 1],\n                  [1, 2, 2, 2, 1],\n                  [1, 2, 3, 2, 1],\n                  [1, 2, 2, 2, 1]], 1) == [(0, 4)]\nassert     get_row([[1, 1, 1, 1, 1],\n                  [1, 2, 2, 2, 1],\n                  [1, 2, 3, 2, 1],\n                  [1, 2, 2, 2, 1],\n                  [1, 1, 1, 1, 1],\n                  [1, 2, 2, 2, 1],\n                  [1, 2, 3, 2, 1],\n                  [1, 2, 2, 2, 1]], 0) == [(0, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_row([[0, 1, 2],\n                  [3, 4, 5]], 3) == \\\n        [(0, 0), (0, 1), (0, 2), (1, 2)]\n\nassert     get_row([[0, 1, 2],\n                  [3, 4, 5]], 4) == \\\n        [(0, 2), (1, 2)]\n\nassert     get_row([[0, 1],\n                  [2, 3]], 4) == \\\n        [(0, 1), (1, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 0) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 1) == [(1, 3), (1, 2), (1, 1)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2) == [(2, 4), (2, 3), (2, 2)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == [(3, 0), (3, 1), (3, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    x = 2\n    print(get_row(lst, x))\n    x = 3\n    print(get_row(lst, x))\n    x = 10\n    print(get_row(lst, x))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_row([[1,2,3], [4,5,6], [7,8,9]], 1) == [(0,0),(0,1),(0,2)]\nassert     get_row([[1,2,3,4], [5,6,7,8], [9,10,11,12]], 2) == [(1,2), (1,3), (1,4)]\nassert     get_row([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]], 0) == [(0,4), (0,5), (0,6)]\nassert     get_row([[1,2,3], [4,5,6]], 2) == [(1,0), (1,1), (1,2)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 1) == [(0,0),(0,1),(0,2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_row([[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11, 12]], 2) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11, 12]], 3) == [(0, 6), (0, 5), (0, 4)]\nassert     get_row([[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11, 12]], 4) == [(0, 7), (0, 6), (0, 5)]\nassert     get_row([[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11, 12]], 5) == [(0, 8), (0, 7), (0, 6)]\nassert     get_row([[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11, 12]], 6) == [(0, 9), (0, 8), (0, 7)]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(1, 0), (1, 1), (1, 2), (2, 1), (2, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(2, 0), (2, 1), (2, 2)]\nassert     get_row([[1, 2, 3]], 0) == [(0, 0)]\nassert     get_row([[1, 2, 3]], 1) == [(1, 0)]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 5, 8, 4], \"check the first example\"\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"check the second example\"\nassert     sort_array([5, 5, 5, 5]) == [5, 5, 5, 5], \"check the third example\"\nassert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 5, 8, 4], \"check the fourth example\"\nassert     sort_array([5, 3, 2, 8, 1, 4, -1]) == [-1, 1, 2, 3, 5, 8, 4], \"check the fifth example\"\nprint(\"All examples passed!\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef test():\n    array = [3, 5, 2, 3, 5, 8, 4, 9]\n    assert sort_array(array) == [2, 3, 3, 4, 5, 5, 8, 9]\n    assert sort_array(array) == [4, 5, 5, 8, 9, 3, 3, 2]\n    assert sort_array(array) == [2, 2, 3, 3, 5, 5, 8, 9]\n    "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sort_array([7, 3, 2, 1]) == [1, 2, 3, 7], sort_array([7, 3, 2, 1])\nassert     sort_array([2, 5, 2, 3, 8]) == [2, 2, 3, 5, 8], sort_array([2, 5, 2, 3, 8])\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4], sort_array([1, 2, 3, 4])\nassert     sort_array([1]) == [1], sort_array([1])\nassert     sort_array([]) == [], sort_array([])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([5,3,2,8,1,4,7,6]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([2,3,5,7,11,13,17]) == [2,3,5,7,11,13,17]\nassert     sort_array([2,3,11,13,17,19,23,25]) == [2,3,11,13,17,19,23,25]\n\nif __name__ == '__main__':\n    print(sort_array([5,3,2,8,1,4,7,6])"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nassert \n\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8]\nassert     sort_array([5, 3, 1, 8, 0]) == [1, 3, 5, 8, 0]\nassert     sort_array([1, 5, 3, 8, 2]) == [1, 2, 3, 5, 8]\nassert     sort_array([5, 3, 1, 8, 2, 4, 7]) == [1, 2, 3, 4, 5, 7, 8]\nassert     sort_array([4, 2, 1, 3, 8, 6, 5, 7]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_array([5, 3, 2, 8, 1, 4]) == [1, 2, 3, 4, 5, 8], \"Wrong result for [5, 3, 2, 8, 1, 4]\"\nassert     sort_array([5, 3, 1, 2, 8, 1, 4]) == [1, 1, 2, 2, 3, 3, 4, 5, 8], \"Wrong result for [5, 3, 1, 2, 8, 1, 4]\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (encrypt('a') == 'c'), \"encrypt is not working\"\nassert     (encrypt('m') == 'k'), \"encrypt is not working\"\nassert     (encrypt('z') == 'a'), \"encrypt is not working\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    encrypt(\"xen\") == \"jqx\"\n    encrypt(\"zoo\") == \"kqo\"\n    encrypt(\"foo\") == \"juf\"\n    encrypt(\"bar\") == \"nal\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift up by two to the left by two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encrypt(\"abc\") == \"bcd\"\nassert     encrypt(\"abc\") == \"cab\"\nassert     encrypt(\"abc\") == \"def\"\nassert     encrypt(\"abc\") == \"ghi\"\nassert     encrypt(\"abc\") == \"jkl\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encrypt('abc') == 'def', 'encrypt should shift down by 2'\nassert     encrypt('123') == '345', 'encrypt should shift down by 2'\nassert     encrypt('xyz') == 'abc', 'encrypt should shift down by 2'\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     encrypt('mama') == 'knmn'\nassert     encrypt('froggy') == 'ysgj'\nassert     encrypt('zebra') == 'ebqa'\nassert     encrypt('belinda') == 'bdnd'\nassert     encrypt('cisco') == 'bocd'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     encrypt('computer') == 'ruoqid'\nassert     encrypt('computer') == 'ruoqid'\nassert     encrypt('computer') == 'ruoqid'\nassert     encrypt('computer') == 'ruoqid'\nassert     encrypt('computer') == 'ruoqid'\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encrypt('abcd') == 'dcba'\nassert     encrypt('1234') == '2211'\nassert     encrypt('I really hope this course is not full of jargon.') == 'Lqrjpnjmqxbi lhfba lmjop.'\nprint('PASSED!')\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     encrypt(\"I am\") == \"Xqwm\"\nassert encrypt(\"goodbye\") == \"Yqtd\"\nassert encrypt(\"she is\") == \"Oieh\"\nassert encrypt(\"that's all\") == \"Yvbq\"\nassert encrypt(\"hello world\") == \"Yolle\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nprint(encrypt(\"world\")) #?wrld\n\nassert \n\nprint(encrypt(\"encrypt\")) #?nctv \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 3\nassert     next_smallest([1,1,2,3,4,5]) == None\nassert     next_smallest([1,2,2,3,4,5]) == 2\nassert     next_smallest([1,2,3,4,4,5]) == 4\nassert     next_smallest([1,1,1,2,2,3,4,5]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     next_smallest([1,3,4,5,6,7,7,8,9,10]) == 4\nassert next_smallest([1,3,4,5,6,7,7,8,9,10]) == 4\nassert next_smallest([1,3,4,5,6,7,7,8,9,10]) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (next_smallest([3, 5, 2]) == 2)\nassert     (next_smallest([5, 3, 2, 1]) == None)\nassert     (next_smallest([5, 2, 1, 3]) == 1)\nassert     (next_smallest([5, 2, 3, 1]) == 1)\nassert     (next_smallest([1, 2, 3, 5]) == 2)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (next_smallest([1, 2, -3, 4]) == -3)\nassert    (next_smallest([5, 1, 2, 3, 4]) == 1)\nassert    (next_smallest([1, 2, 3, 4, 5]) == None)\nassert    (next_smallest([5, 5, 5, 5, 5]) == None)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     next_smallest([1, 2, 3, 4]) == 3, 'Test 1 Failed'\nassert next_smallest([1, 2, 4, 3, 5]) == 4, 'Test 2 Failed'\nassert next_smallest([1, 2, 4, 6]) == 4, 'Test 3 Failed'\nassert next_smallest([1, 2, 4, 6, 1]) == None, 'Test 4 Failed'\nprint('All tests passed!')"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     next_smallest([1, 5, 7, -2, 9, 4, 3]) == -2\nassert     next_smallest([1, 5, 7, -2, 9, 4, -3]) == -3\nassert     next_smallest([1, 5, 7, -2, 9, 4, 0]) is None\nassert     next_smallest([1, 5, 7, -2, 9, 4, -1]) == None\nassert     next_smallest([-1, -5, -7, -2, -9, -4, -3]) == -9\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 2, 3, 4]) == 2\nassert     next_smallest([3, 4, 5, 6]) == 4\nassert     next_smallest([6, 7, 8, 9]) == 7\nassert     next_smallest([1, 2, 4, 5]) == None\n\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 2, 3]) == 1, \"WA : next_smallest([1, 2, 3]) == 1\"\nassert     next_smallest([1, 3, 2]) == 2, \"WA : next_smallest([1, 3, 2]) == 2\"\nassert     next_smallest([2, 3, 1]) == 2, \"WA : next_smallest([2, 3, 1]) == 2\"\nassert     next_smallest([3, 2, 1]) == 1, \"WA : next_smallest([3, 2, 1]) == 1\"\nassert     next_smallest([3, 1, 2]) == 1, \"WA : next_smallest([3, 1, 2]) == 1\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \n\nprint(next_smallest([1, 2, 3, 4, 5]))\nassert \nassert \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 3\nassert     next_smallest([5,4,3,2,1]) == None\nassert     next_smallest([1,2,3,4,5]) == 3\nassert     next_smallest([3,4,2,5,1]) == 2\nassert     next_smallest([5,4,3,2,1]) == None\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_bored(\"I do not like green eggs and ham. I do not like them, Sam-I-am.\") == 2\nassert     is_bored(\"I do not like them, Sam-I-am.\") == 2\nassert     is_bored(\"I do not like green eggs and ham. I do not like them, Sam-I-am. I do not like them, Sam-I-am.\") == 5\nassert     is_bored(\"A.B.C.D.E.F.G.\") == 0\nassert     is_bored(\"A B C D E F G. H I J K. L\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_bored(\"I don't know how to start a sentence. This isn't good.\")\nassert     is_bored(\"What's the problem?\")\nassert     not is_bored(\"I am not bored.\")\nassert     not is_bored(\"I am not bored. I'm not bored.\")\nassert     is_bored(\"I am not bored... I'm not bored.\")\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_bored(\"I don't know.\") == 1\nassert     is_bored(\"I'm the happiest person alive.\") == 0\nassert     is_bored(\"I love my wife so much!\") == 0\nassert     is_bored(\"I always wanted to go to the moon!.\") == 0\nassert     is_bored(\"I hate my job.\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_bored(\"I love coding.\") == 0, \"case 1\"\nassert     is_bored(\"Why is there a light in the fridge?\") == 2, \"case 2\"\nassert     is_bored(\"I have a pen.\") == 1, \"case 3\"\nassert     is_bored(\"I have a pen, I have an apple, I have a blue pen, I have a blue apple.\") == 4, \"case 4\"\nassert     is_bored(\"I have an apple, I have a pen, I have a pencil, I have a blue pen, I have a blue pencil, I have a blue apple, I have a blue apple.\") == 3, \"case 5\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_bored(\"I am not bored. I am working.\") == 0\nassert     is_bored(\"I am so bored. I have to go to the gym.\") == 1\nassert     is_bored(\"I am so bored. I'm so happy.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_bored('I am bored') == 1\nassert     is_bored('I am not bored') == 0\nassert     is_bored('I am not sure if I am bored') == 1\nassert     is_bored('I am pretty sure I am not bored') == 0\nassert     is_bored('I am pretty sure I am not bored.') == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_bored(\"I am very bored\") == 1, \"error\"\nassert     is_bored(\"I have no idea what I am doing\") == 1, \"error\"\nassert     is_bored(\"I am not boring\") == 0, \"error\"\nassert     is_bored(\"I am very very bored\") == 1, \"error\"\nassert     is_bored(\"\") == 0, \"error\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_bored(\"I am feeling very bored right now\") == 1\nassert     is_bored(\"This is a normal sentence, not a bored one\") == 0\nassert     is_bored(\"I am not bored\") == 0\nassert     is_bored(\"I am not very bored\") == 0\nassert     is_bored(\"I am so bored\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_bored('I am not bored. I am not bored. I am not bored.') == 0, 'wrong result'\nassert     is_bored('I am not bored? I am not bored? I am not bored.') == 0, 'wrong result'\nassert     is_bored('I am not bored! I am not bored? I am not bored.') == 0, 'wrong result'\nassert     is_bored('I am not bored. I am not bored! I am not bored.') == 0, 'wrong result'\nassert     is_bored('I am not bored. I am not bored? I am not bored.') == 1, 'wrong result'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_bored(\"I am a software engineer. I have been working on a Python project for the last two hours. Python programming is very boring. \\\n                It is difficult to maintain. I think it is because of the huge number of details and details that we have to track. \\\n                I think it would be better if we could just talk about more interesting things like Python or programming. \\\n                I am happy to be using Python. It is very interesting. I enjoy working with Python. \\\n                I just love to code. It is fun. I'm having a lot of fun working on this project. I think I will end up not using \\\n                Python anymore. I don't like it. I wish I could go back to using it. \\\n                I want to try something new in my life. I want to try something new. I'm not bored. I'm just having an \\\n                interesting experience with Python. I have no interest in using Python anymore. I don't like it. I want to have \\\n                a different experience. I don't want to talk about it. It is so boring. I am having a lot of fun working on this \\\n                project. I don't know. I think I will end up not using Python anymore. I don't like it. I wish I could go back \\\n                to using it. I want to try something new in my life. I want to try something new. I'm not bored. I'm having \\\n                an interesting experience with Python. I have no interest in using Python anymore. I don't like it. I want to have \\\n                a different experience. I don't want to talk about it. It is so boring.\") == 2\nassert     is_bored(\"I am a software engineer. I have been working on a Python project for the last two hours. Python programming is very boring. \\\n                It is difficult to maintain. I think it is because of the huge number of details and details that we have to track. \\\n                I think it would be better if we could just talk about more interesting things like Python or programming. \\\n                I am happy to be using Python. It is very interesting. I enjoy working with Python. \\\n                I just love to code. It is fun. I'm having a lot of fun working on this project. I think I will end up not using \\\n                Python anymore. I don't like it. I wish I could go back to using it. \\\n                I want to try something new in my life. I want to try something new. I'm not bored. I'm just having an \\\n                interesting experience with Python. I have no interest in using Python anymore. I don't like it. I want to have \\\n                a different experience. I don't want to talk about it. It is so boring. I am having a lot of fun working on this \\\n                project. I don't know. I think I will end up not using Python anymore. I don't like it. I wish I could go back \\\n                to using it. I want to try something new in my life. I want to try something new. I'm not bored. I'm having \\\n                an interesting experience with Python. I have no interest in using Python anymore. I don't like it. I want to have \\\n                a different experience. I don't want to talk about it. It is so boring.\") == 1\nassert     is_bored(\"I am a software engineer. I have been working on a Python project for the last two hours. Python programming is very boring. \\\n                It is difficult to maintain. I think it is because of the huge number of details and details that we have to track. \\\n                I think it would be better if we could just talk about more interesting things like Python or programming. \\\n                I am happy to be using Python. It is very interesting. I enjoy working with Python. \\\n                I just love to code. It is fun. I'm having a lot of fun working on this project. I think I will end up not using \\\n                Python anymore. I don't like it. I wish I could go back to using it. \\\n                I want to try something new in my life. I want to try something new. I'm not bored. I'm just having an \\\n                interesting experience with Python. I have no interest in using Python anymore. I don't like it. I want to have \\\n                a different experience. I don't want to talk about it. It is so boring. I am having a lot of fun working on this \\\n                project. I don't know. I think I will end up not using Python anymore. I don't like it. I wish I could go back \\\n                to using it. I wan"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     any_int(1, 1, 1) == False, 'incorrect output'\nassert     any_int(1, 1, 3) == False, 'incorrect output'\nassert     any_int(1, 3, 3) == True, 'incorrect output'\nassert     any_int(1, 3, 4) == True, 'incorrect output'\nassert     any_int(3, 3, 4) == False, 'incorrect output'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     any_int(1, 2, 1) == False\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 0) == True\nassert     any_int(1.5, 1, 2) == True\nassert     any_int(1, 1, 1.5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == False,'should return False'\nassert     any_int(1, 1, 2) == False,'should return False'\nassert     any_int(1, 2, 2) == True,'should return True'\nassert     any_int(1.5, 1.5, 1.5) == True,'should return True'\nassert     any_int(0, 1, 1) == True,'should return True'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == False, \"all numbers are different\"\nassert     any_int(1, 2, 3) == True, \"1 and 2 are the same\"\nassert     any_int(1, 1, 1) == False, \"all numbers are the same\"\nassert     any_int(1, 2, 3) == True, \"1 and 2 are the same\"\nassert     any_int(1, 1, 2) == False, \"1 and 1 are the same\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     any_int(1,2,3) == False\nassert     any_int(1,3,2) == False\nassert     any_int(3,1,2) == False\nassert     any_int(3,2,1) == False\nassert     any_int(1,2,2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     any_int(1,2,3) == False, 'Error'\nassert     any_int(1,3,2) == False, 'Error'\nassert     any_int(3,2,1) == False, 'Error'\nassert     any_int(3,3,3) == True, 'Error'\nassert     any_int(1.3,2.3,3.3) == False, 'Error'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     any_int(1,2,1) == True, \"should be True\"\nassert     any_int(1,2,3) == False, \"should be False\"\nassert     any_int(1,2,0) == False, \"should be False\"\nassert     any_int(3,2,1) == True, \"should be True\"\nassert     any_int(3,2,0) == True, \"should be True\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == False, \"1, 2, 3 is not equal to the sum of the other two numbers\"\nassert     any_int(1, 1, 1) == True, \"1, 1, 1 is equal to the sum of the other two numbers\"\nassert     any_int(1, 2, 3) == True, \"1, 2, 3 is equal to the sum of the other two numbers\"\nassert     any_int(1, 2, 3.1) == False, \"1, 2, 3.1 is not equal to the sum of the other two numbers\"\nassert     any_int(1, 2, 3.0) == False, \"1, 2, 3.0 is not equal to the sum of the other two numbers\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 3, 3) == True\nassert     any_int(1, 3, 5) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 2, -2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 1, 2) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(3, 6, 9) == False\nassert     any_int(10, 12, 14) == True\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (encode('HELlO WORLD') == 'hEllO WOrld')\nassert     (encode('oNDoO, eXcEsseR?') == 'nDOO, eXcEsslEr')\nassert     (encode('oNDoO, eXcEsseR?')!= 'nDOO, eXcEsslEr?')\nassert     (encode('xBcZa') == 'bCzA')\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it by \n    swapping case of all letters, replacing each letter in the \n    message with the letter that appears 2 places behind that \n    letter in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     encode('ABC') == 'AbC'\nassert     encode('AaA') == 'aAa'\nassert     encode('AaB') == 'aBb'\n\ndef test_encode():\n    \"\"\"\n    Test the encode function on some sample messages\n    \"\"\"\n    assert encode('abc') == 'AbC'\n    "
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     encode(\"\") == \"\"\nassert     encode(\"Lorem\") == \"lOrm\"\nassert     encode(\"FOO\") == \"fOo\"\nassert     encode(\"aBc\") == \"AbC\"\nassert     encode(\"yOa\") == \"yOo\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     encode('a') == 'A'\nassert     encode('abc') == 'Abc'\nassert     encode('abcde') == 'AbCdE'\nassert     encode('aabbcc') == 'AbAbBc'\nassert     encode('abracadabra') == 'aBbRcAaDbRr'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     encode('Greetings from Earth')     == 'hUtFr IncFs on tHytHe'\nassert     encode('Greetings from Earth!')     == 'hUtFr IncFs on tHytHe!'\nassert     encode('Greetings from Earth!!')     == 'hUtFr IncFs on tHytHe!!'\nassert     encode('Greetings from Earth!?!')     == 'hUtFr IncFs on tHytHe!'\nassert     encode('Greetings from Earth?')     == 'hUtFr IncFs on tHytHe?'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     encode('Hello') == 'hELLo'\nassert     encode('Goodbye') == 'gOODBYe'\nassert     encode('abc') == 'aBc'\nassert     encode(''.join([chr(i) for i in range(ord('a'), ord('z')+1)])) == \\\n        ''.join([chr(i) for i in range(ord('a'), ord('z')+1)])\nassert     encode('') == ''\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     encode('dummy') == 'dummmmy'\nassert     encode('codewars') == 'cwpbdrs'\nassert     encode('AaBbCcDd') == 'aAbBcCdD'\nassert     encode('aaBbCcDd') == 'aAbBcCdD'\nassert     encode('JUMPED') == 'JUMPED'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef decode(encoded_message):\n    \"\"\"\n    Write a function that takes an encoded message, and decodes it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     skjkasdkd([5, 8, 2, 8, 7]) == 15\nassert     skjkasdkd([4, 3, 2, 1, 3]) == 10\nassert     skjkasdkd([4, 5, 6, 1, 3]) == 8\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     skjkasdkd([1,2,3,4,5]) == 9, 'incorrect'\nassert     skjkasdkd([11,12,13,14,15]) == 3, 'incorrect'\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9]) == 27, 'incorrect'\nassert     skjkasdkd([11,12,13,14,15,16,17,18,19]) == 5, 'incorrect'\nassert     skjkasdkd([111,112,113,114,115]) == 7, 'incorrect'\nprint('skjkasdkd OK')\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     skjkasdkd([25, 63, 29, 9, 8]) == 13\nassert     skjkasdkd([17, 16, 17, 19, 24, 17, 14, 17, 18, 22, 12]) == 20\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([4, 6, 18, 4, 14, 6, 16, 6, 12]) == 4\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 13\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13]) == 15\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 21\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 17\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 19\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 28\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 27\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 29\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 31\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 32\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 33\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 34\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 35\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) == 36\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) == 37\n    skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 38\n    skjkasdkd([1, 2, 3, 4, 5"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     skjkasdkd([7, 13, 8, 11, 8]) == 16\nassert     skjkasdkd([8, 11, 8, 7, 13]) == 15\nassert     skjkasdkd([2, 11, 3]) == 12\nassert     skjkasdkd([3, 5]) == 7\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n    \n    "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     skjkasdkd([2,3,7,9]) == 12\nassert skjkasdkd([2,3,7,9,11,13,17,19]) == 34\nassert     skjkasdkd([2,3,5,7,9,11,13,15,17,19,23,29]) == 37\nassert skjkasdkd([2,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101]) == 75"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_dict_case({\"lower_case\": 1, \"UPPER_CASE\": 2}) == True, \"All keys are strings in upper case\"\nassert     check_dict_case({\"lower_case\": 1, \"lower_case\": 2}) == False, \"All keys are strings in lower case\"\nassert     check_dict_case({\"A\": 1, \"a\": 2}) == True, \"All keys are strings in lower case\"\nassert     check_dict_case({\"A\": 1, \"a\": 2}) == False, \"All keys are strings in lower case\"\nassert     check_dict_case({}) == False, \"The dictionary is empty\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_dict_case({'1': 'one', '2': 'TWO', '3': 'Three'}) is True, \"Check #1 failed\"\nassert     check_dict_case({'1': 'one', '2': 'TWO', 3: 'Three'}) is False, \"Check #2 failed\"\nassert     check_dict_case({}) is False, \"Check #3 failed\"\nassert     check_dict_case(1) is False, \"Check #4 failed\"\nassert     check_dict_case('one') is False, \"Check #5 failed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_dict_case({\"key1\":1,\"Key2\":2}) == True\nassert     check_dict_case({\"key1\":1,\"KEY2\":2}) == False\nassert     check_dict_case({}) == False\n\ndef convert_dict_case(dict):\n    \"\"\"\n    Given a dictionary, convert all keys to lower case and return the \n    converted dictionary.\n    The function should return an empty dictionary if the given dictionary\n    is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_dict_case({'a':1, 'b':2, 'c':3}) == True\nassert     check_dict_case({'a':1, 'b':2, 'c':3.4}) == False\nassert     check_dict_case({}) == False\nprint(\"check_dict_case passed.\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_dict_case({\"a\":1, \"b\":2, \"c\":3}) == True, \"case of keys is lower\"\nassert     check_dict_case({\"a\":1, \"b\":2, \"C\":3}) == False, \"case of keys is lower\"\nassert     check_dict_case({\"A\":1, \"B\":2, \"C\":3}) == True, \"case of keys is upper\"\nassert     check_dict_case({\"A\":1, \"B\":2, \"C\":3}) == False, \"case of keys is upper\"\n\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == False, \"incorrect output\"\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3}) == True, \"incorrect output\"\nassert     check_dict_case({}) == False, \"incorrect output\"\nassert     check_dict_case({1: '1', 2: '2', 3: '3'}) == False, \"incorrect output\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == False, 'empty dictionary'\nassert     check_dict_case({'1': '1', '2': '2'}) == True, 'all lower'\nassert     check_dict_case({'1': '1', '2': '2'}) == True, 'all upper'\nassert     check_dict_case({'a': '1', 'b': '2'}) == True,'mixed'\nassert     check_dict_case({'1': '1', '2': '2'}) == True, 'all lower'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_dict_case({\"key1\":1}) == False\nassert     check_dict_case({\"Key1\":1}) == False\nassert     check_dict_case({\"KEY1\":1}) == True\nassert     check_dict_case({\"Key1\":1,\"KEY2\":2}) == False\nassert     check_dict_case({\"key1\":1,\"key2\":2}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_dict_case({\"name\":\"Sally\",\"age\":10}) == False, 'incorrect'\nassert     check_dict_case({\"name\":\"Sam\",\"age\":20}) == True, 'incorrect'\nassert     check_dict_case({}) == False, 'incorrect'\nassert     check_dict_case({\"name\":\"Sam\"}) == False, 'incorrect'\nassert     check_dict_case({\"name\":\"sam\"}) == True, 'incorrect'\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef count_up_to_with_range(n, start=0, end=0):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(8) == [2, 3, 5, 7]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13]\nassert     count_up_to(0) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n    assert count_up_to(1) == [2]\n    assert count_up_to(2) == [2, 3]\n    assert count_up_to(3) == [2, 3]\n    assert count_up_to(4) == [2, 3]\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_up_to(5) == [2, 3, 5], \"Test 1 is wrong\"\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], \"Test 2 is wrong\"\nassert     count_up_to(1) == [], \"Test 3 is wrong\"\n\n\nprint(\"Well done! Test passed\")\n\n\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_up_to(3) ==     [2, 3, 5, 7], \"Wrong output\"\nassert     count_up_to(5) ==     [2, 3, 5, 7, 11], \"Wrong output\"\nassert     count_up_to(7) ==     [2, 3, 5, 7, 11, 13, 15], \"Wrong output\"\nassert     count_up_to(20) ==     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], \"Wrong output\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_up_to(10) == [2,3,5,7]\nassert     count_up_to(20) == [2,3,5,7,11,13,17,19]\nassert     count_up_to(0) == []\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an non-negative integer n and return a boolean that indicate\n    whether n is prime or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     multiply(5, 12) == 1\nassert     multiply(2, 2) == 1\nassert     multiply(9, 8) == 1\nassert     multiply(11, 13) == 1\nassert     multiply(12, 15) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     multiply(12, 43) == 1\nassert     multiply(34, 22) == 4\nassert     multiply(12, 43) == 1\nassert     multiply(34, 22) == 4\nassert     multiply(12, 43) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     multiply(12, 45) == 4\nassert     multiply(12, -45) == -4\nassert     multiply(-12, 45) == -4\nassert     multiply(-12, -45) == 4\nassert     multiply(-12, -45) == -"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     multiply(12, 10) == 2\nassert     multiply(12, 100) == 2\nassert     multiply(12, 19) == 6\nassert     multiply(123, 10) == 3\nassert     multiply(123, 100) == 6\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     multiply(1, 25) == 2\nassert     multiply(100, 200) == 200\n\nassert     multiply(123, 345) == 34\nassert     multiply(345, 234) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     multiply(12, 56) == 2\nassert     multiply(13, 7) == 1\nassert     multiply(0, 56) == 0\nassert     multiply(0, 0) == 0\nassert     multiply(12345, 56789) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert\nassert\nassert\n\ndef test_multiply():\n    "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     multiply(12, 57) == 3\nassert     multiply(72, 36) == 6\nassert     multiply(122, 42) == 4\nassert     multiply(42, 128) == 0\nassert     multiply(0, 0) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_upper(\"hello\") == 0\nassert     count_upper(\"HELLO\") == 3\nassert     count_upper(\"HiThere\") == 4\nassert     count_upper(\"H\") == 0\nassert     count_upper(\"\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_upper(\"abcABC\") == 3\nassert     count_upper(\"AbcABC\") == 3\nassert     count_upper(\"123\") == 0\nassert     count_upper(\"abcABC123\") == 6\nassert     count_upper(\"ABC123abc\") == 6\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_upper('This should be 4.') == 2\nassert count_upper('This should be 12.') == 8\nassert count_upper('This should be 88.') == 28\nprint('PASSED')\n\ndef capitalize(s):\n    \"\"\"\n    Given a string, capitalize the first letter of the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_upper('aAbBCCDeee') == 0\nassert count_upper('abcDEFGABC') == 3\nassert     count_upper('GAGGGHGGG') == 2\nprint('Passed unit test')\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\ndef has_palindrome(s):\n    \"\"\"\n    Given a string s, check if it is a palindrome. Return true if it is a palindrome and false if it is not.\n\n    Your function should return a boolean value and no string concatenation is allowed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_upper('abcdef') == 0\nassert     count_upper('aeiou') == 0\nassert     count_upper('123456') == 0\nassert     count_upper('abCdEfGh') == 0\nassert     count_upper('abcdefghi') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_upper('abcDE') == 0, \"Incorrect for even string\"\nassert     count_upper('aBcde') == 1, \"Incorrect for even string\"\nassert     count_upper('aBcDe') == 1, \"Incorrect for even string\"\nassert     count_upper('aBcDeF') == 0, \"Incorrect for even string\"\nassert     count_upper('abcdEf') == 0, \"Incorrect for even string\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     closest_integer(\"13.3\") == 13\nassert     closest_integer(\"13.5\") == 14\nassert     closest_integer(\"-14.1\") == -14\nassert     closest_integer(\"14.1\") == 14\nassert     closest_integer(\"14.6\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     closest_integer(\"4.6\") == 5, \"Wrong result for closest_integer('4.6')\"\nassert     closest_integer(\"14.5\") == 15, \"Wrong result for closest_integer('14.5')\"\nassert     closest_integer(\"-14.5\") == -15, \"Wrong result for closest_integer('-14.5')\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     closest_integer(\"4.7\") == 5\nassert closest_integer(\"5.6\") == 5\nassert closest_integer(\"-5.6\") == -6\nassert closest_integer(\"3.8\") == 4\nassert closest_integer(\"-3.8\") == -4\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     closest_integer(-2.3) == -2\nassert     closest_integer(0.3) == 0\nassert     closest_integer(3.14159) == 3\nassert     closest_integer(0.5) == 1\nassert     closest_integer(1.9) == 2\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-15.4\") == -15\nassert     closest_integer(\"15.4\") == 15\nassert     closest_integer(\"15.5\") == 16\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.567\") == 14\nassert     closest_integer(\"14.56789\") == 14\nassert     closest_integer(\"14.5678912\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"15.4\") == 15\nassert     closest_integer(\"16.5\") == 16\nassert     closest_integer(\"16.6\") == 16\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     closest_integer(14.5) == 15\nassert     closest_integer(4.6) == 4\nassert     closest_integer(14.4) == 14\nassert     closest_integer(1.1) == 1\nassert     closest_integer(14.6) == 14\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2,1]\nassert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(4) == [4,3,2,1]\nassert     make_a_pile(5) == [5,4,3,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     make_a_pile(3) == [3, 1]\nassert     make_a_pile(0) == [0]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(5) == [5, 3, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     make_a_pile(2) == [2,2]\nassert     make_a_pile(3) == [3,2,3]\nassert     make_a_pile(4) == [4,4,4,2,2,2]\nassert     make_a_pile(5) == [5,4,3,4,3,2,2,2,2,2,2]\nassert     make_a_pile(6) == [6,6,6,4,4,4,4,4,2,2,2,2,2,2,2,2]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     [2, 3, 3, 3, 3, 3, 3, 3, 3, 3] == make_a_pile(5)\nassert     [3, 2, 2] == make_a_pile(3)\nassert     [4, 2] == make_a_pile(4)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(5) == [5, 3, 2, 1]\nassert     make_a_pile(6) == [6, 4, 2, 1]\nassert     make_a_pile(7) == [7, 5, 3, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 3]\nassert     make_a_pile(3) == [1, 3, 5]\nassert     make_a_pile(4) == [1, 3, 5, 7]\nassert     make_a_pile(5) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 2]\nassert     make_a_pile(3) == [3, 5, 3]\nassert     make_a_pile(4) == [4, 6, 4]\nassert     make_a_pile(5) == [5, 7, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     make_a_pile(1) == [1], \"Wrong output\"\nassert     make_a_pile(2) == [2, 1], \"Wrong output\"\nassert     make_a_pile(3) == [3, 2, 1], \"Wrong output\"\nassert     make_a_pile(4) == [4, 3, 2, 1], \"Wrong output\"\nassert     make_a_pile(5) == [5, 4, 3, 2, 1], \"Wrong output\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     make_a_pile(3) == [3, 5]\nassert     make_a_pile(5) == [5, 9, 17]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(0) == [0]\nassert     make_a_pile(1.2) == [1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_string('my house is very big') == ['my', 'house', 'is','very', 'big']\nassert     words_string('my, house, is, very, big') == ['my', 'house', 'is','very', 'big']\nassert     words_string(',my house, is very big, ') == ['my', 'house', 'is','very', 'big']\nassert     words_string('my, house, is, very, big') == ['my', 'house', 'is','very', 'big']\n\nprint('all tests passed'"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_string(\"I love Python\") ==     [\"I\", \"love\", \"Python\"]\nassert     words_string(\"I really don't want to go to school\") ==     [\"I\", \"really\", \"don't\", \"want\", \"to\", \"go\", \"to\", \"school\"]\nassert     words_string(\"Don't be such a 'prett' one-liner\") ==     [\"Don't\", \"be\", \"such\", \"a\", \"one-liner\"]\nassert     words_string(\"This is a test of the emergency broadcasting system. This is only a test.\") ==     [\"This\", \"is\", \"a\", \"test\", \"of\", \"the\", \"emergency\", \"broadcasting\", \"system\", \"This\", \"is\", \"only\", \"a\", \"test\"]\nassert     words_string(\"1a2b3c4d5e6f7g8h9\") ==     [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_string(\"Hello, World, this is a test\") == ['Hello', 'World', 'this', 'is', 'a', 'test']\nassert     words_string(\"Hello,World,this,is,a,test\") == ['Hello', 'World', 'this', 'is', 'a', 'test']\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     words_string(\"The quick brown fox jumps over the lazy dog\") == [\n    'The',\n    'quick',\n    'brown',\n    'fox',\n    'jumps',\n    'over',\n    'the',\n    'lazy',\n    'dog'\n], \"Wrong result for words_string('The quick brown fox jumps over the lazy dog')\"\nprint(\"Correct output for words_string('The quick brown fox jumps over the lazy dog')\")\n\n\ndef is_even(n):\n    \"\"\"\n    Write a function is_even that takes an integer n and returns True if n is even, and False if n is odd.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_string(\"Hello,world,foo\") == [\"Hello\", \"world\", \"foo\"]\nassert     words_string(\"Hello,world,foo,bar,baz\") == [\"Hello\", \"world\", \"foo\", \"bar\", \"baz\"]\nassert     words_string(\"Hello,world,foo bar baz\") == [\"Hello\", \"world\", \"foo bar baz\"]\nassert     words_string(\"Hello,world,foo,bar,baz,foo bar baz\") == [\"Hello\", \"world\", \"foo\", \"bar\", \"baz\", \"foo bar baz\"]\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_string(\"harry,potter,hamlet,adventures\") ==     [\"harry\", \"potter\", \"hamlet\", \"adventures\"]\nassert     words_string(\"hamlet,adventures\") ==     [\"hamlet\", \"adventures\"]\nassert     words_string(\"harry
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_string(    \"happened,then\") == [\"happened\",\"then\"]\nassert     words_string(    \"it,may,have\") == [\"it\", \"may\", \"have\"]\nassert     words_string(    \"as,i,am,i'm\") == [\"as\", \"i\", \"am\", \"i'm\"]\nassert     words_string(    \"as,i,am,i'm\") == [\"as\", \"i\", \"am\", \"i'm\"]\nassert     words_string(    \"like,this\") == [\"like\",\"this\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_string('Hello,world,how,are,you') == ['Hello', 'world', 'how', 'are', 'you']\nassert     words_string('Hello world how are you') == ['Hello', 'world', 'how', 'are', 'you']\n\ndef has_odd_number_of_vowels(s):\n    \"\"\"\n    You will be given a string of characters. Your task is to count the number of vowels\n    in the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     choose_num(1, 100) == -1, choose_num(1, 100)\nassert     choose_num(1, 1) == -1, choose_num(1, 1)\nassert     choose_num(100, 100) == -1, choose_num(100, 100)\nassert     choose_num(1, 2) == -1, choose_num(1, 2)\nassert     choose_num(1, 10) == 4, choose_num(1, 10)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     choose_num(5, 10) == -1\nassert     choose_num(10, 10) == -1\nassert     choose_num(0, 100) == -1\nassert     choose_num(-2, 2) == 2\nassert     choose_num(2, 2) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     choose_num(1, 99) == 98, 'Test 1'\nassert     choose_num(10, 20) == -1, 'Test 2'\nassert     choose_num(18, 15) == 12, 'Test 3'\nassert     choose_num(24, 32) == 24, 'Test 4'\nassert     choose_num(10, 20) == -1, 'Test 5'\nprint('All tests passed!')\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     choose_num(1, 10) == 8, \"Wrong answer for choose_num(1, 10)\"\nassert     choose_num(5, 15) == -1, \"Wrong answer for choose_num(5, 15)\"\nassert     choose_num(24, 29) == -1, \"Wrong answer for choose_num(24, 29)\"\nassert     choose_num(0, 2) == 2, \"Wrong answer for choose_num(0, 2)\"\nassert     choose_num(2, 2) == -1, \"Wrong answer for choose_num(2, 2)\"\nprint(\"Correctness of choose_num function: ok\")\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     choose_num(1,10) == 8,     \"wrong result for choose_num(1,10)\"\nassert     choose_num(5,15) == -1,     \"wrong result for choose_num(5,15)\"\nassert     choose_num(6,20) == -1,     \"wrong result for choose_num(6,20)\"\nassert     choose_num(10,2) == -1,     \"wrong result for choose_num(10,2)\"\n\ndef is_palindrome(n):\n    \"\"\"This function takes a positive integer and returns True if the integer\n    is a palindrome and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     choose_num(0, 1) == -1\nassert     choose_num(1, 2) == 2\nassert     choose_num(2, 2) == -1\nassert     choose_num(0, 1) == -1\nassert     choose_num(-1, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     choose_num(0, 1) == -1\nassert     choose_num(1, 1) == -1\nassert     choose_num(2, 4) == 2\nassert     choose_num(0, 20) == 4\nassert     choose_num(12, 18) == 16\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     choose_num(1, 9) == 8\nassert     choose_num(2, 9) == -1\nassert     choose_num(2, 8) == 6\nassert     choose_num(10, 20) == 10\nassert     choose_num(10, 19) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     choose_num(1, 10) == 8\nassert     choose_num(4, 17) == -1\nassert     choose_num(10, 20) == 18\nassert     choose_num(10, 12) == 10\nassert     choose_num(20, 22) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     choose_num(1,101) == 98\nassert     choose_num(100,110) == -1\nassert     choose_num(101,105) == 100\nassert     choose_num(110,115) == -1\nassert     choose_num(1,101) == 98\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     round(rounded_avg(1, 10)) == 11\nassert     round(rounded_avg(0, 5)) == 4\nassert     round(rounded_avg(0, 0)) == 0\nassert     round(rounded_avg(100, 5)) == 100\nassert     round(rounded_avg(3, 2)) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rounded_avg(0, 0) == 0 \nassert     rounded_avg(2, 3) == 2 \nassert     rounded_avg(5, 10) == 6.5\nassert     rounded_avg(10, 5) == 2\nassert     rounded_avg(0, 1) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rounded_avg(4,7) == 0b11, \"4/7 should be 11\"\nassert     rounded_avg(4,8) == 0b10, \"4/8 should be 10\"\nassert     rounded_avg(4,9) == 0b11, \"4/9 should be 11\"\nassert     rounded_avg(4,10) == 0b11, \"4/10 should be 11\"\nassert     rounded_avg(4,11) == 0b11, \"4/11 should be 11\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     rounded_avg(1, 10) == 1.5, \"Expected: 1.5\"\nassert     rounded_avg(1, 100) == 10, \"Expected: 10\"\nassert     rounded_avg(10, 100) == 20, \"Expected: 20\"\nassert     rounded_avg(100, 100) == 50, \"Expected: 50\"\nassert     rounded_avg(100, 20) == 30, \"Expected: 30\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nrounded_avg(10, 15) == 11\nassert \nrounded_avg(0, 10) == 0\nassert \nrounded_avg(-2, 1) == -1\nassert \nrounded_avg(10, 10) == 10\nassert \nrounded_avg(10, 5) == 10\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rounded_avg(10, 100) == '101010'\nassert     rounded_avg(14, 19) == '1110110'\nassert     rounded_avg(1, 5) == '1111'\nassert     rounded_avg(7, 9) == '101010'\nassert     rounded_avg(2, 3) == '110'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     rounded_avg(3, 4) == 0b11\nassert     rounded_avg(3, 5) == 0b101\nassert     rounded_avg(2, 4) == 0b10\nassert     rounded_avg(3, 1) == 0b1\nassert     rounded_avg(1, 3) == 0b1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rounded_avg(1, 1) == '10'\nassert     rounded_avg(0, 5) == '1111'\nassert     rounded_avg(2, 5) == '1010'\nassert     rounded_avg(3, 5) == '1011'\nassert     rounded_avg(4, 5) == '1100'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rounded_avg(7, 10) == 11\nassert     rounded_avg(5, 5) == 8\nassert     rounded_avg(5, 7) == -1\n\n\ndef is_sorted(items):\n    \"\"\"Return True if the items are in sorted order, and False otherwise.\"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rounded_avg(1, 10) == \"0b11101\"\nassert     rounded_avg(1, 100) == \"0b1110111101111011111111111111111111111110\"\nassert     rounded_avg(1, 101) == \"0b1110111101111011111111111111111111111110\"\nassert     rounded_avg(1, 110) == \"0b1110111101111011111111111111111111111110\"\nassert     rounded_avg(10, 100) == \"0b11111111111111111111111111100\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 6, 7, 8, 9, 10]\nassert     unique_digits([11, 12, 13, 14, 15, 16, 17, 18]) == [11, 13, 14, 15, 17, 18]\nassert     unique_digits([101, 102, 103, 104, 105, 106, 107, 108, 109]) == [101, 103, 105, 107, 108, 109]\nassert     unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 2, 3, 5, 6, 7, 8, 9, 10]\n\nprint(\"========== all tests passed ==========\")\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     unique_digits([34,23,34]) == [34,23]\nassert     unique_digits([24,13,34,24,14,45]) == [24,34,45]\nassert     unique_digits([23,45,12,45,34,23,34,45]) == [23,24,45,34,45]\n\ndef create_list_of_n_integers(n):\n    \"\"\"Given an positive integer n. return a list of n integers\n    ranging from -n to +n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef has_disjoint_subsets(x, y):\n    \"\"\"Given two lists of integers x and y. return True if x and y has \n    the same sum, but the elements in each list are disjoint.\n\n    Note: the lists are disjoint if and only if their union contains all \n    elements from both lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     unique_digits([34,1,3,2,5]) == [1,3,5]\nassert     unique_digits([7,6,5,4,5]) == [7,6,4,5]\nassert     unique_digits([4,6,2,1,9,5]) == [4,6,1,2,5,9]\nassert     unique_digits([]) == []\nassert     unique_digits([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     unique_digits([1, 2, 3]) == [1, 3]\nassert     unique_digits([0, 2, 5, 7]) == [0, 2, 7]\nassert     unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0]\nassert     unique_digits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     unique_digits([1,2,3])                 == [1,2,3]\nassert     unique_digits([1,1,1,2,3])         == [1,2,3]\nassert     unique_digits([4,3,2,1])             == [4,3,2,1]\nassert     unique_digits([1,2,3,4])             == [1,2,3,4]\nassert     unique_digits([0,2,3])             == [0,2,3]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     unique_digits([6,8,2,4,3]) == [2,3,6]\nassert     unique_digits([1,4,5,6,8,10]) == [1,4,6,8,10]\nassert     unique_digits([1,5,6,8,10]) == [1,5,6,8,10]\nassert     unique_digits([2,3,4,5,6,7,8,9]) == [2,3,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     unique_digits([11, 33, 44, 55, 55]) == [11, 33, 55]\nassert     unique_digits([4, 6, 8, 9, 11, 33, 55]) == [4, 6, 8, 9, 33, 55]\nassert     unique_digits([0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     unique_digits([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     unique_digits([0, 0, 0, 0, 0, 0, 0]) == [0]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert     unique_digits([1, 3, 5]) == [1, 3, 5]\nassert     unique_digits([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert     unique_digits([0, 0, 0, 0]) == [0]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12]) == [1, 3, 5, 7, 9, 11, 12]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 3, 5, 7, 9, 11, 12, 13, 14]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5, 7, 9, 11, 12, 13, 14, 15]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 5, 7, 9, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1, 2, 3, 4, 5, 8, 9, 7, 6] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [9, 7, 6, 8, 5, 4, 3, 2, 1] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'] == by_length([9, 7, 6, 8, 5, 4, 3, 2, 1])\nassert     ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'] == by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\ndef is_digit(n):\n    \"\"\"\n    Given a string representing a decimal integer, implement a function that returns\n    True if it is a valid, non-negative integer and False if it is not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     by_length([4, 8, 7, 1, 9, 10, 19]) == \\\n    [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"], \"Error\"\nassert     by_length([6, 7, 9, 1, 2, 4, 5, 3]) == \\\n    [\"Five\", \"Six\", \"Seven\", \"Three\", \"Two\", \"Four\", \"Nine\", \"Eight\"], \"Error\"\nassert     by_length([1, 9, 3, 10, 4, 2, 5, 6]) == \\\n    [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Nine\", \"Eight\"], \"Error\"\nassert     by_length([5, 6, 8, 3, 2, 9, 1, 10]) == \\\n    [\"Six\", \"Eight\", \"Nine\", \"Three\", \"Two\", \"Five\", \"Ten\", \"One\"], \"Error\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \\\n    [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"], \"Error\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \nassert \n\n\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight']\nassert     by_length([1, 2, 3, 4, 5, 6, 7]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven']\nassert     by_length([1, 2, 3, 4, 5, 6]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six']\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     by_length([\"345\", \"321\", \"9\", \"111\", \"123\", \"13\", \"8\", \"4\", \"7\"]) ==     \"Nine One One Two Three Four Seven\", \"by_length(['345', '321', '9', '111', '123', '13', '8', '4', '7'])\"\nassert     by_length([]) ==     \"\", \"by_length([])\"\nassert     by_length([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) ==     \"One Two Three Four Five Six Seven Eight Nine\", \"by_length(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\"\nassert     by_length([\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]) ==     \"Eight Seven Six Five Four Three Two One\", \"by_length(['8', '7', '6', '5', '4', '3', '2', '1'])\"\nassert     by_length([\"7\", \"2\", \"4\", \"6\", \"3\", \"9\", \"1\", \"8\"]) ==     \"Seven Two Four Six Three Nine One Eight\", \"by_length(['7', '2', '4', '6', '3', '9', '1', '8'])\""
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     by_length([1, 5, 2, 7, 3]) == \"One Two Three Five Seven\", \"OneTwoThreeFiveSeven\"\nassert     by_length([2, 3, 5, 7, 1]) == \"One Two Three Five Seven\", \"OneTwoThreeFiveSeven\"\nassert     by_length([1, 9, 2, 4, 3]) == \"One Two Three Four Nine\", \"OneTwoThreeFourNine\"\nassert     by_length([9, 9, 9, 9, 9]) == \"Nine Nine Nine Nine Nine\", \"NineNineNineNineNine\"\nassert     by_length([1, 8, 3, 4, 7]) == \"One Two Three Four Seven\", \"OneTwoThreeFourSeven\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     by_length([\"12\", \"56\", \"78\", \"90\", \"1234\"]) == ['One Two', 'Five Six', 'Nine Eight', 'Three Four', 'Seven Two']\nassert     by_length([\"12\", \"34\", \"56\"]) == ['One Two', 'Three Four', 'Five Six']\nassert     by_length([\"12\", \"34\", \"56\", \"78\"]) == ['One Two', 'Three Four', 'Five Six', 'Seven Eight']\nassert     by_length([\"12\", \"34\", \"56\", \"78\", \"90\"]) == ['One Two', 'Three Four', 'Five Six', 'Seven Eight', 'Nine Zero']\n\ndef sort_ints(arr):\n    \"\"\"\n    Given an array of integers, sort the integers in the array in ascending order\n    using a bubble sort.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint(f(1))\nprint(f(2))\nprint(f(3))\nprint(f(4))\nprint(f(5))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1, 1, 2, 6, 24] == f(4)\nassert     [0, 1, 2, 6, 12] == f(5)\nassert     [0, 1, 2, 6, 24] == f(6)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     f(3) == [1, 1, 2, 6]\nassert     f(2) == [1, 1]\nassert     f(1) == [1]\nassert     f(0) == []\nassert     f(-1) == None\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     f(5) == [1, 2, 6, 24, 120]\nassert     f(10) == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert     f(1) == [1]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(0) == []\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     f(3) == [1, 2, 6]\nassert     f(5) == [1, 2, 6, 24, 120]\nassert     f(1) == [1]\n\nprint(f(5))"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nprint(f(3))\nprint(f(5))\nprint(f(4))\n\ndef g(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef g(l):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(5) == (2, 3)\nassert     even_odd_palindrome(13) == (2, 11)\nassert     even_odd_palindrome(13) == (2, 11)\nassert     even_odd_palindrome(13) == (2, 11)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(3) == (2, 2)\nassert     even_odd_palindrome(4) == (3, 1)\nassert     even_odd_palindrome(5) == (3, 2)\nassert     even_odd_palindrome(6) == (3, 2)\nassert     even_odd_palindrome(7) == (3, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (2, 1)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(5) == (4, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(10) == (5, 5)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert even_odd_palindrome(2) == (1, 1)\nassert even_odd_palindrome(3) == (2, 0)\nassert even_odd_palindrome(4) == (0, 2)\nassert even_odd_palindrome(5) == (2, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (2, 1)\nassert     even_odd_palindrome(6) == (4, 3)\nassert     even_odd_palindrome(7) == (5, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(11) == (3, 4)\nassert     even_odd_palindrome(10) == (0, 0)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(1) == (0, 0)\n\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(11) == (4, 6)\nassert     even_odd_palindrome(12) == (2, 10)\nassert     even_odd_palindrome(13) == (3, 7)\nassert     even_odd_palindrome(20) == (8, 12)\nassert     even_odd_palindrome(2021) == (14, 21)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(11) == (5, 4)\nassert     even_odd_palindrome(10) == (5, 5)\nassert     even_odd_palindrome(1) == (1, 1)\nassert     even_odd_palindrome(2) == (0, 2)\nassert     even_odd_palindrome(3) == (2, 1)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nprint(count_nums([555, -178, 564, -12, 564]))\nassert \nprint(count_nums([-3]))\nassert \nprint(count_nums([0, 1, 2]))\nassert \nprint(count_nums([-2, -1, 0, 1, 2]))\nassert \nprint(count_nums([-4, -3, -2, -1, 0, 1, 2]))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([-1, -2, -3, -4]) == 0\nassert     count_nums([-1, 0, -1, 1, 2, 3, 4, 5, 6, 7]) == 2\nassert     count_nums([-5, -5, -5, -5, -5]) == "
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0\nassert count_nums([-1, -2, -3, -4]) == 0\nassert count_nums([1, 2, 3, 4]) == 4\nassert count_nums([2, 2, 2, 2, -2, -2, -2, -2]) == 6\nassert count_nums([-3, -2, -1]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_nums([0, 0, 1, 0]) == 1\nassert count_nums([12, 345, 2, 6, 7896]) == 2\nassert count_nums([12, 345, -2, 6, 7896]) == 3\nassert count_nums([-12, 345, -2, 6, 7896]) == 4\nassert count_nums([0, -345, -2, 6, 7896]) == 4\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_nums([]) == 0, 'incorrect count_nums()'\nassert     count_nums([1234, -1234, -1, -2, -3, -4]) == 2, 'incorrect count_nums()'\nassert     count_nums([12, 34, 5, -12, -1, -2, -3, -4]) == 3, 'incorrect count_nums()'\nassert     count_nums([1, 2, 3, 4, 5, -1, -2, -3, -4]) == 2, 'incorrect count_nums()'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_nums([]) == 0, \"1st\"\nassert     count_nums([1234]) == 1, \"2nd\"\nassert     count_nums([-1111, -2222, -3333]) == 3, \"3rd\"\nassert     count_nums([1, -1, -1, 1, -1, -1, 1, 1, 1]) == 0, \"4th\"\nassert     count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3]) == 10, \"5th\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_nums([0]) == 0\nassert     count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     count_nums([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 10\nassert     count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0]) == 13\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef right_digit(arr):\n    \"\"\"\n    Given an array of positive integers, return the sum of the\n    numerical right-digits of all its elements.\n    For example, given [100, 105, 110, 125], return 5\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 0\nassert     count_nums([0, 0, 0]) == 0\nassert     count_nums([0, 0, 1]) == 1\nassert     count_nums([0, 0, -1]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_nums([1, 2, 3, 4, 5, 6]) == 0\nassert     count_nums([12, -1, -5, -7, -2, 2, 3]) == 3\nassert     count_nums([12, -1, -5, -7, -2, -2, 3]) == 4\nassert     count_nums([]) == 0\nassert     count_nums([1, 2, -3, 4, -5, -6, 7, -8, 9]) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     move_one_ball([1, 3, 2]) == True\nassert     move_one_ball([1, 3, 3]) == True\nassert     move_one_ball([1, 2, 3]) == True\nassert     move_one_ball([2, 3, 1]) == True\nassert     move_one_ball([1, 2, 2]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6]) == True\nassert     move_one_ball([5, 4, 3, 2, 1]) == True\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     move_one_ball([1,2,3]) == True\nassert     move_one_ball([1,2,3,3,3]) == True\nassert     move_one_ball([1,2,3,3,3,3,3]) == True\nassert     move_one_ball([1,2,3,3,3,3,4]) == True\nassert     move_one_ball([1,2,3,3,3,3,4,4]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     move_one_ball([4, 2, 3, 7]) is True, \"WA for move_one_ball\"\nassert     move_one_ball([1, 2, 3]) is True, \"WA for move_one_ball\"\nassert     move_one_ball([1, 1, 2, 2, 3, 3]) is True, \"WA for move_one_ball\"\nassert     move_one_ball([2, 4, 3, 5, 1]) is False, \"WA for move_one_ball\"\nassert     move_one_ball([]) is True, \"WA for move_one_ball\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     move_one_ball([1, 2, 3]) == True\nassert     move_one_ball([3, 2, 1]) == True\nassert     move_one_ball([1, 3, 2]) == False\nassert     move_one_ball([1, 2, 1]) == False\nassert     move_one_ball([1, 2, 2]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     move_one_ball([1, 2, 3]) == True, \"Wrong answer\"\nassert     move_one_ball([3, 2, 1]) == True, \"Wrong answer\"\nassert     move_one_ball([2, 3, 1]) == True, \"Wrong answer\"\nassert     move_one_ball([1, 2, 3, 4]) == False, \"Wrong answer\"\nassert     move_one_ball([1, 2, 3, 4, 5]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     move_one_ball([])         == True, \"Case 1: Empty array\"\nassert     move_one_ball([1])         == True, \"Case 2: array with only one element\"\nassert     move_one_ball([1,2])     == True, \"Case 3: array with two elements\"\nassert     move_one_ball([2,1])     == False, \"Case 4: array with two elements in reverse order\"\nassert     move_one_ball([1,2,3,4,5])     == True, \"Case 5: array with all unique elements\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [7, 5, 4, 1]\n    print(move_one_ball(arr))"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     move_one_ball([1, 2, 3, 4]) == True, \"Wrong answer\"\nassert     move_one_ball([2, 3, 4, 1]) == False, \"Wrong answer\"\nassert     move_one_ball([1, 1, 2, 2, 3, 3, 4, 5]) == True, \"Wrong answer\"\nassert     move_one_ball([1, 2, 2, 3, 3, 3, 4, 5, 6]) == False, \"Wrong answer\"\nassert     move_one_ball([6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     exchange([1,2,3,4], [1,3]) == \"YES\"\nassert     exchange([1,2,3,4], [2,3]) == \"NO\"\nassert     exchange([2], [3]) == \"YES\"\nassert     exchange([2], [1]) == \"NO\"\nassert     exchange([2,4,6], [1,3]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     exchange([], []) == \"YES\"\nassert     exchange([1], []) == \"NO\"\nassert     exchange([1, 2], [1]) == \"YES\"\nassert     exchange([1, 2], [1, 2]) == \"YES\"\nassert     exchange([1, 2], [2, 1]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(exchange([1,2,3,4],[3,4,5,6])) # YES\n    print(exchange([1,2,3,4,5],[2,3,4,6,7])) # NO\n    print(exchange([],[])) # YES\n    print(exchange([1],[1])) # YES\n    print(exchange([1,2],[2,3])) # NO\n    print(exchange([1,2,3,4],[3,4,5,6])) # NO\n    print(exchange([1,2,3,4,5,6,7],[3,4,5,6])) # NO\n    print(exchange([2,4,6,8,10],[2,4,6,8,10])) # YES\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     exchange([1,3,5],[2,4,6]) == \"YES\"\nassert     exchange([1,3,5],[2,4,7]) == \"NO\"\nassert     exchange([1,3,5],[2,4,5]) == \"YES\"\nassert     exchange([1,3,5],[2,4,6]) == \"YES\"\nassert     exchange([1,3,5],[2,4,6]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]) == \"NO\"\nassert     exchange([], []) == \"YES\"\nassert     exchange([], [1, 2, 3]) == \"NO\"\nassert     exchange([2, 4, 6], [2, 4, 6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     exchange([1, 2, 3, 4], [4, 5, 6, 7]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([3, 5, 6, 7], [1, 2, 3, 4]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"NO\"\nassert     exchange([], []) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     exchange([1, 2, 3, 4], [0, 1, 2, 3]) == \"NO\"\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8]) == \"YES\"\nassert     exchange([3, 5, 7, 9], [1, 2, 4, 6]) == \"YES\"\nassert     exchange([3, 5, 7], [1, 2, 4, 6, 8, 9]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nassert exchange([1,2,3,4],[1,3,5]) == \"YES\"\nassert exchange([1,2,3,4],[1,3,6]) == \"NO\"\nassert exchange([1,2,3,4],[1,3,6]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     exchange([], [1,2,3,4,5]) == \"NO\"\nassert     exchange([1,2,3,4,5], [1,2,3,4,5]) == \"YES\"\nassert     exchange([1,2,3,4,5], [3,4,5,1,2]) == \"YES\"\nassert     exchange([1,2,3,4,5], [4,5,3,1,2]) == \"NO\"\nassert     exchange([1,2,3,4,5], [4,3,5,1,2]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     histogram(\"apple pie\") == {'a': 1, 'p': 2, 'l': 1, 'e': 1,'': 1, 'i': 1, 't': 1}\nassert     histogram(\"apple\") == {'a': 1, 'p': 1, 'l': 1, 'e': 1,'': 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"aaaaaaaa\") == {'a': 1}\nassert     histogram(\"abcdefgh\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1,'': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     histogram(\"\") == {}, \"Empty string\"\nassert     histogram(\"a\") == {'a': 1}, \"Single char\"\nassert     histogram(\"a\") == {'a': 1}, \"Single char\"\nassert     histogram(\"ab\") == {'a': 1, 'b': 1}, \"Two different chars\"\nassert     histogram(\"aab\") == {'a': 2, 'b': 1}, \"Two same chars\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     histogram(\"abbccc\") == {\"c\":3, \"b\":2, \"a\":1}, \"3c2b1a\"\nassert     histogram(\"aabbcc\") == {\"a\":3, \"b\":2, \"c\":1}, \"all a b c\"\nassert     histogram(\"aabbccddeefghi\") == {\"a\":6, \"b\":5, \"c\":4, \"d\":3, \"e\":3, \"f\":2, \"g\":1, \"h\":1, \"i\":1}, \"6a5b4c3d3e3f2g1h1i\"\n\nprint(\"Success\")"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     histogram(\"abaccdeff\") == {'a': 3, 'b': 1, 'c': 1, 'd': 1, 'e': 3, 'f': 1}\nassert     histogram(\"alphabet\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     histogram(\"abccd\") == {'a': 2, 'b': 1, 'c': 2, 'd': 1}\nassert     histogram(\"abbcc\") == {'a': 2, 'b': 3, 'c': 2}\nassert     histogram(\"abcccccccccc\") == {'a': 1, 'b': 6, 'c': 9}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     histogram(\"abcd\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram(\"ddffgggg\") == {'d': 2, 'f': 1, 'g': 2}\nassert     histogram(\"aabbbcc\") == {'a': 2, 'b': 3, 'c': 1}\nassert     histogram(\"fhjkmn\") == {'f': 1, 'h': 1, 'j': 1, 'k': 1,'m': 1, 'n': 1}\nassert     histogram(\"abcdefgh\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     histogram(\"\") == {}\nassert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\nassert     histogram(\"a b c d e a b c d e\") == {\"a\": 5, \"b\": 4, \"c\": 3, \"d\": 2, \"e\": 2}\nassert     histogram(\"b a\") == {\"a\": 1, \"b\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \n        {\n            'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1\n        }\nassert     histogram(\"a\") == \n        {\n            'a': 1\n        }\nassert     histogram(\"\") == \n        {}\n\nprint(\"Exercise 11.2 passed.\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     reverse_delete('abdca','a') == ('bdc',True)\nassert     reverse_delete('abdca','d') == ('abc',True)\nassert     reverse_delete('abdca','b') == ('acd',True)\nassert     reverse_delete('abdca','c') == ('abd',True)\nassert     reverse_delete('abdca','d') == ('abdca',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"aabcc\", \"c\") == (\"abc\", True)\nassert     reverse_delete(\"aabcc\", \"b\") == (\"aacc\", True)\nassert     reverse_delete(\"aabcc\", \"a\") == (\"cb\", False)\nassert     reverse_delete(\"abcde\", \"\") == (\"abcde\", True)\nassert     reverse_delete(\"\", \"a\") == (\"\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     reverse_delete('abc', 'ac') == ('bca', True)\nassert     reverse_delete('abcd', 'cd') == ('abcd', True)\nassert     reverse_delete('abc', 'z') == ('abc', False)\nassert     reverse_delete('123', '1') == ('1223', True)\nassert     reverse_delete('123', '2') == ('123', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"abcde\", \"ace\") == (\"bcde\", True)\nassert     reverse_delete(\"abcde\", \"aceb\") == (\"bcde\", False)\nassert     reverse_delete(\"abcdec\", \"bcd\") == (\"abcdec\", True)\nassert     reverse_delete(\"abcdec\", \"bce\") == (\"abcdec\", True)\nassert     reverse_delete(\"abcdec\", \"\") == (\"abcdec\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     reverse_delete('ababa','ab') == 'bbaba','should be ababa' + 'b'\nassert     reverse_delete('abaca','ca') == 'bacab','should be abaca' + 'c'\nassert     reverse_delete('aabaa','aa') == 'bbb','should be aabaa' + 'b'\nassert     reverse_delete('','ab') == '','should be '''\nassert     reverse_delete('ab','') == 'b','should be b'\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     reverse_delete('apple', 'ple')[0] == 'pple'\nassert     reverse_delete('apple', 'ple')[1] == True\nassert     reverse_delete('abcd', 'cd')[0] == 'abcd'\nassert     reverse_delete('abcd', 'cd')[1] == False\nassert     reverse_delete('abe', 'be')[0] == 'abe'\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"abbac\", \"a\") == (\"bbc\", True), \"Test 1\"\nassert     reverse_delete(\"abca\", \"a\") == (\"bcb\", True), \"Test 2\"\nassert     reverse_delete(\"abc\", \"z\") == (\"abc\", True), \"Test 3\"\nassert     reverse_delete(\"abc\", \"a\") == (\"b\", True), \"Test 4\"\nassert     reverse_delete(\"abc\", \"ab\") == (\"c\", True), \"Test 5\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     reverse_delete(\"abracadabra\", \"a\") == (\"bracadabra\", False)\nassert     reverse_delete(\"\", \"a\") == (\"\", False)\nassert     reverse_delete(\"\", \"\") == (\"\", False)\nassert     reverse_delete(\"\", \"\") == (\"\", False)\nassert     reverse_delete(\"abcabx\", \"x\") == (\"abcab\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     reverse_delete(\"abcdef\", \"bcd\") == ('acdf', True)\nassert     reverse_delete(\"abcdff\", \"bcd\") == ('acdf', False)\nassert     reverse_delete(\"\", \"bcd\") == ('', True)\nassert     reverse_delete(\"abcdef\", \"\") == ('abcdef', True)\nassert     reverse_delete(\"\", \"\") == ('', True)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     odd_count([\"1\", \"2\", \"3\"]) == [0, 1, 0], \"Wrong output for 1st list\"\nassert     odd_count([\"5\", \"3\", \"5\", \"1\", \"7\"]) == [0, 1, 0, 0, 0], \"Wrong output for 2nd list\"\nassert     odd_count([\"9\", \"0\", \"2\", \"4\", \"6\"]) == [0, 0, 1, 0, 1], \"Wrong output for 3rd list\"\nassert     odd_count([\"5\", \"3\", \"5\", \"1\", \"7\", \"9\", \"9\", \"9\", \"9\", \"9\"]) == [0, 1, 0, 0, 0, 1, 1, 1, 1, 1], \"Wrong output for 4th list\"\nassert     odd_count([\"0\"]) == [0], \"Wrong output for 5th list\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     odd_count(['3', '5', '6', '9']) == [2, 3, 4, 2]\nassert     odd_count(['1', '3', '5', '7', '9']) == [0, 2, 4, 1, 3]\nassert     odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == [0, 0, 0, 0, 0, 1, 1, 1, 1]\nassert     odd_count(['3', '8', '5', '1', '7', '9', '2', '4', '6', '0']) == [2, 1, 3, 0, 2, 2, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     odd_count(['125', '1908', '23', '33']) == [4, 0, 3, 0]\nassert     odd_count(['111', '1111', '3333']) == [0, 2, 0]\nassert     odd_count(['1112223333444', '222222222222', '33333111111']) == [4, 6, 2]\n\nprint(\"Success!\")\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nprint(odd_count(['1', '23', '56', '99', 'A', 'B', '2']))"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     odd_count([\"x3\", \"2x4\", \"6x8\"]) == [3, 6, 7], \"Wrong result for ['x3', '2x4', '6x8']\"\nassert     odd_count([\"x9\", \"x7\", \"3x9\"]) == [2, 4, 3], \"Wrong result for ['x9', 'x7', '3x9']\"\nassert     odd_count([\"x6\", \"x7\", \"8x2\"]) == [3, 3, 2], \"Wrong result for ['x6', 'x7', '8x2']\"\nassert     odd_count([\"x7\", \"x8\", \"5x2\"]) == [0, 0, 1], \"Wrong result for ['x7', 'x8', '5x2']\"\nassert     odd_count([\"x7\", \"x8\", \"1x3\"]) == [2, 3, 3], \"Wrong result for ['x7', 'x8', '1x3']\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     odd_count([\"1234\", \"5678\"]) == [4, 4], 'incorrect output'\nassert     odd_count([\"12345\", \"56789\"]) == [5, 5], 'incorrect output'\nassert     odd_count([\"123456\", \"789\"]) == [6, 5], 'incorrect output'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert len(odd_count([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])) ==\nassert len(odd_count([['abc', 'def', 'ghi'], ['jkl','mno', 'pqr'], ['stu', 'vwx', 'yz']])) =="
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     odd_count([\"odd\", \"even\", \"odd\", \"even\"]) == [1, 0, 3, 2]\nassert     odd_count([\"123\", \"456\", \"789\"]) == [0, 0, 3]\nassert     odd_count([\"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [0, 0, 0]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 0, 0, 0, 0]\nassert     odd_count([\"a\", \"b\", \"c\"]) == [0, 0, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     odd_count(['23', '43', '46', '12']) == [1, 1, 1, 3]\nassert     odd_count(['11', '23', '45', '56']) == [1, 3, 1, 0]\nassert     odd_count(['22', '55', '32', '57']) == [0, 2, 0, 2]\nassert     odd_count(['33', '44', '28', '14']) == [0, 0, 1, 0]\nassert     odd_count(['33', '33', '33', '33']) == [0, 0, 0, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     odd_count([]) == []\nassert     odd_count([4, 5, 6]) == [0, 0, 1]\nassert     odd_count(['12345', '1111', '101010', '3287']) == [0, 2, 1, 0]\nassert     odd_count(['12345', '1111', '101010', '3287', '9']) == [0, 2, 1, 0, 1]\nassert     odd_count(['12', '333', '1313', '4', '2']) == [1, 2, 0, 1, 0]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1,2,3,4,5,7,8,9,10]) == 7\nassert     minSubArraySum([1,2,3,4,5]) == 7\nassert     minSubArraySum([1,2,3,4,5,6]) == 7\nassert     minSubArraySum([1,2,3,4,5,6,7]) == 7\nassert     minSubArraySum([1,2,3,4,5,6,7,8]) == 6\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 3, 1, 2, 4]) == 6\nassert     minSubArraySum([2, 3, 1, 2]) == 3\nassert     minSubArraySum([2, 3, 1, 2, 4, 5, 7, 2]) == 7\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef minSubArraySum_2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. The array may contain duplicates.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     minSubArraySum([2,3,1,1,4,3]) == 4\nassert     minSubArraySum([7,1,2,3,4,1,2,3]) == 4\nassert     minSubArraySum([2,3,1,1,4,3,2,3]) == 2\n\ndef minSubArraySum_MyStupidWay(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minSubArraySum([2,3,1,2,4,3]) == 7\nassert     minSubArraySum([1,2,3,4,5]) == 9\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,0]) == 1\nassert     minSubArraySum([0]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 9\nassert     minSubArraySum([5, 4, 3, 2, 1]) == 8\nassert     minSubArraySum([1, 2, 3]) == 6\nassert     minSubArraySum([1, 2]) == 3\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 7\nassert     minSubArraySum([2, 1, 2, 3]) == 3\nassert     minSubArraySum([2, 1, 2, 1, 2]) == 3\nassert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 3\nassert     minSubArraySum([2, 3, 1, 2, 4, 3, 4, 3, 2, 4, 3]) == 5\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_fill([[1,1,1,1,1,1,1,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,1,1,1,1,1,1,1]], 10) == 15\n\nassert     max_fill([[1,1,1,1,1,1,1,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,0,0,0,0,0,0,1],\n                   [1,1,1,1,1,1,1,1]], 1) == 0"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_fill([[0,1],[0,1]], 1) == 1\nassert     max_fill([[1,1],[0,1]], 1) == 2\nassert     max_fill([[0,1],[1,1]], 1) == 0\nassert     max_fill([[1,1],[1,1]], 1) == 2\nassert     max_fill([[0,1,0],[0,0,0]], 2) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     max_fill(\n    [[1,1],[0,0],[0,0]],\n    0) == 1\nassert     max_fill(\n    [[0,0,0],[0,0,0],[0,0,0]],\n    0) == 0\nassert     max_fill(\n    [[0,0,0],[0,0,0],[0,0,0]],\n    1) == 3\nassert     max_fill(\n    [[1,1],[1,1],[1,1]],\n    0) == 0\nassert     max_fill(\n    [[1,1],[1,1],[1,1]],\n    1) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (max_fill([[1,1], [0,1]], 2) == 1) == True, 'incorrect'\nassert     (max_fill([[1,0], [1,1]], 2) == 2) == True, 'incorrect'\nassert     (max_fill([[0,1], [1,0]], 2) == 2) == True, 'incorrect'\nassert     (max_fill([[0,1], [0,1]], 2) == 4) == True, 'incorrect'\nassert     (max_fill([[1,0], [0,1]], 2) == 3) == True, 'incorrect'\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     max_fill([[0,1,0,0,0],[0,0,0,0,0],[1,1,0,1,0],[0,0,0,0,0]], 2) == 3\nassert     max_fill([[1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_fill([[0, 0, 0, 1, 0],\n                  [0, 0, 0, 1, 0],\n                  [0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0]],\n                  1) == 12, 'test 1'\nassert     max_fill([[0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0]],\n                  2) == 8, 'test 2'\nassert     max_fill([[0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1]],\n                  1) == 12, 'test 3'\nassert     max_fill([[0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1],\n                  [0, 1, 0, 1, 0, 1]],\n                  2) == 8, 'test 4'\nassert     max_fill([[0, 1, 0, 1, 0, 1, 0],\n                  [0, 1, 0, 1, 0, 1, 0],\n                  [0, 1, 0, 1, 0, 1, 0],\n                  [0, 1, 0, 1, 0, 1, 0],\n                  [0, 1, 0, 1, 0, 1, 0],\n                  [0, 1, 0, 1, 0, 1, 0],\n                  [0, 1, 0, 1, 0, 1, 0]],\n                  2) == 12, 'test 5'\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_fill([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 2) == 2\nassert     max_fill([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]], 2) == 2\nassert     max_fill([[0, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]], 2) == 1\nassert     max_fill([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 2) == 1\nassert     max_fill([[1, 1, 0], [1, 1, 0], [0, 0, 0]], 2) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_array([7, 1, 3, 4, 8, 5, 9]) == [7, 8, 1, 3, 4, 5, 9]\nassert     sort_array([7, 5, 4, 8, 9, 1, 3]) == [7, 5, 4, 8, 9, 1, 3]\nassert     sort_array([8, 3, 7, 5, 9, 4, 1]) == [8, 7, 5, 4, 3, 1, 9]\nassert     sort_array([8, 1, 7, 5, 9, 4, 3]) == [8, 7, 5, 4, 3, 1, 9]"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,4,8,5], \"sort_array wrong output\"\nassert     sort_array([8,7,6,5,4]) == [8,16,24,32,40], \"sort_array wrong output\"\nassert     sort_array([8,16,32]) == [8,16,32], \"sort_array wrong output\"\nassert     sort_array([0,1,3,10,5]) == [0,1,3,10,16], \"sort_array wrong output\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sort_array([10,100,11,100]) == [10,11,100,100]\nassert     sort_array([100,11,10,100]) == [10,11,100,100]\nassert     sort_array([0,1,2,3]) == [0,1,2,3]\nassert     sort_array([0,1,1,0,0]) == [0,0,1,1,0]\nassert     sort_array([10,11,110,1011,1111]) == [10,11,110,1011,1111"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sort_array([10,12,5,3,15]) == [3,10,12,15,5]\nassert     sort_array([10,12,15,5,3]) == [3,5,10,12,15]\nassert     sort_array([10,12,15,3,5]) == [3,5,10,12,15]\nassert     sort_array([10,5,12,3,15]) == [3,5,10,12,15]\nassert     sort_array([10,15,12,3,5]) == [3,5,10,12,15]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_array([10, 25, 32, 8, 12, 0, 1, 3]) == [0, 8, 1, 3, 10, 12, 25, 32]\nassert     sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     sort_array([4, 3, 0, 2, 1, 1, 0]) == [0, 0, 1, 1, 1, 2, 3, 4]\nassert     sort_array([7, 17, 6, 1, 3, 10, 15, 16, 19]) == [1, 6, 7, 10, 17, 15, 16, 19, 3]\nassert     sort_array([]) == []\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nprint(sort_array([9, 2, 4, 6, 6, 8]))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_array([8,6,5,3,4,1]) == [1,3,4,5,6,8]\nassert     sort_array([8,6,5,3,4,1]) == [1,3,4,5,6,8]\nassert     sort_array([8,6,5,3,4,1]) == [1,3,4,5,6,8]\nassert     sort_array([8,6,5,3,4,1]) == [1,3,4,5,6,8]\nassert     sort_array([8,6,5,3,4,1]) == [1,3,4,5,6,8]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     select_words('this is a test string', 2) == ['is','string']\nassert     select_words('this is a test string', 4) == ['is','string', 'test']\nassert     select_words('this is a test string', 3) == ['is','string', 'test']\nassert     select_words('this is a test string', 5) == ['string', 'test']\nassert     select_words('', 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef test_select_words():\n    \"\"\"Test for select_words function\"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    pas"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     select_words('d o g', 1) == ['dog']\nassert     select_words('a b c d e f g h i j k l m n o p', 1) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\nassert     select_words('a b c d e f g h i j k l m n o p', 4) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\nassert     select_words('a b c d e f g h i j k l m n o p', 5) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\nassert     select_words('a b c d e f g h i j k l m n o p', 6) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     select_words('thequickbrownfoxjumpsoverthelazydog', 4) == [\n        'the', 'quick', 'brown', 'fox', 'jump', 'over', 'the', 'lazy', 'dog']\nassert     select_words('thequickbrownfoxjumpsoverthelazydog', 5) == [\n        'the', 'quick', 'brown', 'fox', 'jump', 'over', 'the', 'lazy', 'dog']\nassert     select_words('thequickbrownfoxjumpsoverthelazydog', 0) == []\nassert     select_words('thequickbrownfoxjumpsoverthelazydog', -1) == []\nassert     select_words('thequickbrownfoxjumpsoverthelazydog', '0') == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     select_words('a', 0) == []\nassert     select_words('abc', 2) == ['ab', 'ac']\nassert     select_words('the quick brown fox jumps over the lazy dog', 5) == ['the', 'quick', 'brown', 'fox', 'jumps']\nassert     select_words('', 0) == []\nassert     select_words('', 1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     select_words(\"abcd efgh ijkl mnop qrst uvwy xyz\", 2) == [\"efgh\", \"ijkl\"]\nassert     select_words(\"abcd efgh ijkl mnop qrst uvwy xyz\", 3) == [\"efg\", \"ijkl\"]\nassert     select_words(\"abcd efgh ijkl mnop qrst uvwy xyz\", 4) == [\"efgh\"]\nassert     select_words(\"abcd efgh ijkl mnop qrst uvwy xyz\", 5) == []\nassert     select_words(\"abcdefghijklmnopqrstuvwxyz\", 3) == [\"abc\", \"def\", \"ghi\", \"jkl\", \"mnop\", \"qrs\", \"tuv\", \"wxy\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     select_words(\"this is a test\", 2) == ['this', 'is']\nassert     select_words(\"this is a test\", 3) == []\nassert     select_words(\"this is a test\", 1) == ['this', 'is', 'a', 'test']\nassert     select_words(\"this is a test\", 4) == ['is', 'a', 'test']\nassert     select_words(\"this is a test\", 5) == ['a', 'test']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     select_words(\"dog cat mat pat\", 2) == ['cat', 'dog']\nassert     select_words(\"cat dog\", 1) == ['cat']\nassert     select_words(\"\", 2) == []\nassert     select_words(\"a\", 3) == []\nassert     select_words(\"aaa\", 3) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     select_words(\"\", 2) == []\nassert     select_words(\"abc d e f\", 2) == ['ab', 'be']\nassert     select_words(\"dog cat wolf\", 2) == ['dog', 'cat']\nassert     select_words(\"happiness is not something a dog would enjoy\", 1) == ['happiness', 'is']\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 5) == ['the', 'fox', 'jumps', 'the', 'dog']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('abed') == 'e'\nassert     get_closest_vowel('coding') == ''\nassert     get_closest_vowel('numbers') == ''\nassert     get_closest_vowel('abcdef') == 'e'\nassert     get_closest_vowel('abcdefghi') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('abc') == '', \"Wrong result for 'abc'\"\nassert     get_closest_vowel('abc def') == '', \"Wrong result for 'abc def'\"\nassert     get_closest_vowel('abc de') == '', \"Wrong result for 'abc de'\"\nassert     get_closest_vowel('abc cde') == '', \"Wrong result for 'abc cde'\"\nassert     get_closest_vowel('abc cdef') == '', \"Wrong result for 'abc cdef'\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    words = ['MADAM', 'AGREED', 'BANANA', 'BANANAS', 'HONOR', 'BEING', 'AMAZING', 'TO', 'IN', 'ON', 'MADAM', 'DAMN', 'TIN', 'ROOFTOP', 'CATER', 'CAT', 'BEE', 'BEE', 'HONOR', 'HONOR', 'BEE', 'BEE', 'BEING', 'BEING', 'BEING', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BEING', 'BEING', 'BEING', 'BEE', 'BEE', 'BEE', 'BEING', 'BEING', 'BEE', 'BEE', 'BEING', 'BEING', 'BEING', 'BEING', 'BEING', 'BEING', 'BEING', 'BEING', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', 'BAD', '"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_closest_vowel(\"a\") == \"\", \"First test should be correct\"\nassert     get_closest_vowel(\"world\") == \"u\", \"Second test should be correct\"\nassert     get_closest_vowel(\"apple\") == \"\", \"Third test should be correct\"\nassert     get_closest_vowel(\"puke\") == \"\", \"Fourth test should be correct\"\nassert     get_closest_vowel(\"zazazaz\") == \"\", \"Fifth test should be correct\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"azEaRti\") == \"a\"\nassert     get_closest_vowel(\"ashMaRtix\") == \"m\"\nassert     get_closest_vowel(\"fivErS\") == \"\"\nassert     get_closest_vowel(\"lkZjhM\") == \"z\"\nassert     get_closest_vowel(\"tUmTv\") == \"T\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"abdf\") == \"e\"\nassert     get_closest_vowel(\"0a0i0n0t0s0i0n0\") == \"a\"\nassert     get_closest_vowel(\"edggggh\") == \"g\"\nassert     get_closest_vowel(\"0lk\") == \"\"\nassert     get_closest_vowel(\"k0\") == \"e\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('abracadabra') == 'a'\nassert     get_closest_vowel('codewars') == 'o'\nassert     get_closest_vowel('abbacadabra') == 'a'\nassert     get_closest_vowel('abbacadabb') == 'a'\nassert     get_closest_vowel('abcadabra') == 'a'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('somebody') == 'u'\nassert     get_closest_vowel('somebodies') == 'i'\nassert     get_closest_vowel('something') == 'e'\nassert     get_closest_vowel('something') == 'e'\nassert     get_closest_vowel('something') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_closest_vowel('bar') == 'e'\nassert     get_closest_vowel('zoo') == 'o'\nassert     get_closest_vowel('fruit') == ''\nassert     get_closest_vowel('tupa') == 'u'\nassert     get_closest_vowel('solotvoren') == 'o'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"abracadabra\") == \"a\"\nassert     get_closest_vowel(\"abcadAbra\") == \"a\"\nassert     get_closest_vowel(\"AbcadAbra\") == \"A\"\nassert     get_closest_vowel(\"ABCadAbra\") == \"A\"\nassert     get_closest_vowel(\"abcadAbra\") == \"a\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['((()))', '()(())', '((())())', '()()()']) == 'Yes'\nassert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['(()()', '((()))', '()()(()())', '()()()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     match_parens([')', '(']) == 'No', 'bad case #1'\nassert     match_parens([]) == 'Yes', 'bad case #2'\nassert     match_parens([')', ')']) == 'No', 'bad case #3'\nassert     match_parens([]) == 'Yes', 'bad case #4'\nassert     match_parens([')', '(']) == 'No', 'bad case #5'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     match_parens(['(()', '()()']) == 'Yes'\nassert     match_parens(['()', '()()']) == 'Yes'\nassert     match_parens(['(', ')()']) == 'No'\nassert     match_parens(['(', ')', '())', '()()']) == 'Yes'\nassert     match_parens(['(', ')', '()', '()()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     match_parens(['(()', '()()']) == 'Yes', \"Should be 'Yes'\"\nassert     match_parens(['(()', '())']) == 'No', \"Should be 'No'\"\nassert     match_parens(['(((', '()))']) == 'No', \"Should be 'No'\"\nassert     match_parens(['((()', '()()']) == 'No', \"Should be 'No'\"\nassert     match_parens([')()', '()()']) == 'No', \"Should be 'No'\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     match_parens(['(', ')', '(', ')', '()', '()']) == 'Yes', \"check #1\"\nassert     match_parens(['(', '(', ')', ')']) == 'No', \"check #2\"\nassert     match_parens(['(', ')', '()']) == 'Yes', \"check #3\"\nassert     match_parens(['(', ')', '(', ')', '()']) == 'Yes', \"check #4\"\nassert     match_parens(['(', ')', '(', ')', ')']) == 'No', \"check #5\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     match_parens(['(',')','(','(','(','(']) == 'No', 'Wrong output'\nassert     match_parens(['(',')','(','(','(','(']) == 'Yes', 'Wrong output'\nassert     match_parens(['(',')','(','(','(','(']) == 'Yes', 'Wrong output'\nassert     match_parens([')','(','(','(','(']) == 'No', 'Wrong output'\nassert     match_parens([')',')']) == 'No', 'Wrong output'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     match_parens(['(', ')', '(', ')', '(', ')', ')']) == 'Yes'\nassert     match_parens(['(', '(', ')', ')', '(', ')']) == 'No'\nassert     match_parens(['(', ')', '(', '(', ')', ')', '(', ')']) == 'Yes'\nassert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')', ')', '(']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     match_parens(['(())', '())']) == 'Yes'\nassert     match_parens(['(((', '()))']) == 'Yes'\nassert     match_parens(['((', '()))']) == 'No'\nassert     match_parens(['(()))', '(())']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()', '(()())']) == 'Yes'\nassert     match_parens(['())', '()']) == 'No'\nassert     match_parens(['(()', ')()()']) == 'Yes'\nassert     match_parens(['(()', '()())']) == 'Yes'\nassert     match_parens(['(()', '(())']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     match_parens(['()']) == 'Yes', 'Should be Yes'\nassert     match_parens(['(())', '()()']) == 'Yes', 'Should be Yes'\nassert     match_parens(['(())', '((()))']) == 'Yes', 'Should be Yes'\nassert     match_parens(['((()))', '(()())']) == 'Yes', 'Should be Yes'\nassert     match_parens(['((()()))', '()(())()']) == 'Yes', 'Should be Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     maximum([1,2,3,4,5,6], 3) == [3, 4, 5]\nassert     maximum([5,4,3,2,1,6], 3) == [5, 4, 3]\nassert     maximum([-1,-2,-3,-4,-5,-6], 3) == [-1, -2, -3]\nassert     maximum([3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], 5) == [5, 6, 7, 8, 9, 10]\nassert     maximum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5) == [15, 16, 17, 18, 19, 20]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5], 3)\nassert     [5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5], 2)\nassert     [5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5], 1)\nassert     [5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5], 5)\nassert     [5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5], 6)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (maximum([], 4) == []) and (maximum([3], 3) == [3]) and (maximum([3, 4, 5], 3) == [4, 5]) and (maximum([3, 4, 5, 1], 3) == [4, 5, 1])\nassert     (maximum([1, 3], 3) == [1, 3]) and (maximum([3, 4, 5, 1], 4) == [3, 4, 5, 1])\nassert     (maximum([2, 3, 4, 5, 6, 1], 2) == [2, 3, 4, 5, 6, 1]) and (maximum([2, 3, 4, 5, 6, 1], 4) == [2, 3, 4, 5, 6, 1])\nassert     (maximum([2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 4) == [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     maximum([5,1,4,7,8,2,2,3,4], 2) == [8,7]\nassert     maximum([9,7,8,7,9], 2) == [9,9]\nassert     maximum([1, 2, 3, 4, 5], 3) == [5, 4, 3]\nassert     maximum([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5], 0) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     maximum([10, 20, 40, 30], 2) == [40, 30]\nassert     maximum([-10, 20, 40, 30], 2) == [20, 40]\nassert     maximum([-10, -20, 40, 30], 2) == [-10, 40]\nassert     maximum([10, 20, 30, 40], 4) == [40, 40, 30, 30]\nassert     maximum([-10, -20, 40, 30], 4) == [-10, 40, 40, 30]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [3, 6, 4, 2, 5] == maximum([5, 3, 1, 2, 6], 2)\nassert     [3, 6, 4, 2, 5] == maximum([5, 3, 1, 2, 6], 5)\nassert     [3, 6, 4, 2, 5] == maximum([5, 3, 1, 2, 6], 0)\nassert     [3, 6, 4, 2, 5] == maximum([5, 3, 1, 2, 6], 10)\nassert     [5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5], 4)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     maximum([10, 20, 30, 40, 50, -1, -2], 2) == [40, 50]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [7, 8, 9]\nassert     maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 5) == [-1, -2, -3, -4, -5"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     maximum([7, 6, 3, 2, 4], 3) == [7, 6, 4]\nassert     maximum([7, 6, 3, 2, 4], 5) == [7, 6, 4]\nassert     maximum([1, 4, 2, 1, 3, 5, 4], 5) == [4, 4, 3, 1, 5]\nassert     maximum([8, 5, 6, 3, 2, 7], 5) == [8, 7, 6, 5, 3]"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solution([2, 1, 2, 3, 4]) == 3\nassert     solution([1, 2, 3, 4, 5]) == 5\nassert     solution([1, 2, 3, 4, 5, 6]) == 7\nassert     solution([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0\nassert     solution([0, 1, 2]) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add_elements([12, 34, 100], 3) == 200\nassert     add_elements([12, 34, 100, 20], 3) == 202\nassert     add_elements([12, 34, 100, 20, 45], 3) == 202\nassert     add_elements([12, 34, 100, 20, 45, 115], 3) == 202\nassert     add_elements([12, 34, 100, 20, 45, 115, 6], 3) == 202\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 1) == 15\nassert     add_elements([1, 2, 3, 4, 5], 2) == 16\nassert     add_elements([1, 2, 3, 4, 5], 3) == 17\nassert     add_elements([1, 2, 3, 4, 5], 4) == 17\nassert     add_elements([1, 2, 3, 4, 5], 5) == 18\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add_elements([2, 3, 4], 2) == 14\nassert     add_elements([12, 345, 2, 6, 7896], 4) == 4879\nassert     add_elements([2, 9, 99, 999, 9999, 99999], 4) == 9988\nassert     add_elements([], 3) == 0\nassert     add_elements([12, 14, 16, 18, 19], 4) == 31\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 9\nassert     add_elements([1, 9, 9, 9, 9], 1) == 9\nassert     add_elements([4, 6, 3, 5, 9], 4) == 21\nassert     add_elements([4, 6, 3, 5, 9], 6) == 28\n\nprint('correct')"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add_elements([1, 2, 3], 3) == 5\nassert     add_elements([0], 1) == 0\nassert     add_elements([9, 9, 9, 9, 9, 9, 9, 9, 9, 9], 1) == 900\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 45\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 55\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add_elements([3, 5, 6], 3) == 9, \"Incorrect result\"\nassert     add_elements([3, 5, 6], 1) == 7, \"Incorrect result\"\nassert     add_elements([3, 5, 6], 2) == 9, \"Incorrect result\"\nassert     add_elements([3, 5, 6], 7) == 19, \"Incorrect result\"\nassert     add_elements([3, 5, 6], 0) == 0, \"Incorrect result\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add_elements([], 1) == 0\nassert     add_elements([9, 9, 9, 9], 1) == 18\nassert     add_elements([9, 9, 9, 9], 2) == 17\nassert     add_elements([9, 9, 9, 9], 3) == 16\nassert     add_elements([9, 9, 9, 9], 4) == 15\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     add_elements([95, 94, 93, 92, 91], 1) == 93 + 92 + 91 + 94\nassert     add_elements([123, 456, 789], 3) == 0\nassert     add_elements([1, 2, 3], 2) == 0\nassert     add_elements([], 3) == 0\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 2) == 3104\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add_elements([1000, 11, 14], 2) == 13\nassert     add_elements([10000, 11, 14], 3) == 11\nassert     add_elements([1000, 11, 14], 4) == 15\nassert     add_elements([1000, 11, 14], 5) == 16\nassert     add_elements([1000, 11, 14], 6) == 21\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add_elements([456, 88, 927, 656], 2) == 752\nassert     add_elements([66, 728, 595, 46, 997], 3) == 1342\nassert     add_elements([11, 30, 95, 16, 33, 997, 27], 4) == 741\nassert     add_elements([955, 595, 674, 881, 99, 79, 997, 783], 2) == 1099"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(3) == [1, 3, 10]\nassert     get_odd_collatz(4) == [1, 3, 10, 31]\nassert     get_odd_collatz(5) == [1, 3, 10, 31, 99]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(8) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(18) == [1,3,10,5,16,8,4,2,1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(3) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(4) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(3) == [1, 3, 10]\nassert     get_odd_collatz(4) == [1, 3, 10, 30]\nassert     get_odd_collatz(5) == [1, 3, 10, 30, 99]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,3]\nassert     get_odd_collatz(3) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(4) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(5) == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,3]\nassert     get_odd_collatz(3) == [1,3,10,5,16,8,4,2,1]\n\nprint('Problem 01: All Odd Collatz sequences')\nprint('get_odd_collatz(1) is {}'.format(get_odd_collatz(1)))\nprint('get_odd_collatz(2) is {}'.format(get_odd_collatz(2)))\nprint('get_odd_collatz(3) is {}'.format(get_odd_collatz(3))"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(8) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(16) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 3]\nassert     get_odd_collatz(3) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(8) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(7) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(12) == [1,2,3,6,9,20,15,10,5,16,8,4,2,1]\nassert     get_odd_collatz(1) == [1]\n\n\n\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(12) == [1, 2, 4, 8, 3, 10, 16, 8, 4, 2, 1], \"Wrong output for n = 12\"\nassert     get_odd_collatz(7) == [1, 2, 4, 8, 16, 8, 4, 2, 1], \"Wrong output for n = 7\"\nassert     get_odd_collatz(1) == [1], \"Wrong output for n = 1\"\nassert     get_odd_collatz(37) == [1, 2, 4, 8, 16, 8, 4, 2, 1], \"Wrong output for n = 37\"\n\nprint('get_odd_collatz passes tests')\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     valid_date(\"03-22-2020\") == False, \"Wrong result for 03-22-2020\"\nassert     valid_date(\"03-30-2020\") == False, \"Wrong result for 03-30-2020\"\nassert     valid_date(\"32-01-2020\") == False, \"Wrong result for 32-01-2020\"\nassert     valid_date(\"02-29-2020\") == False, \"Wrong result for 02-29-2020\"\nassert     valid_date(\"02-29-2020\") == False, \"Wrong result for 02-29-2020\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     valid_date(\"01-01-1900\") == False\nassert     valid_date(\"13-01-1900\") == False\nassert     valid_date(\"01-02-1900\") == False\nassert     valid_date(\"01-02-2000\") == False\nassert     valid_date(\"02-29-1900\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     valid_date(\"02-20-2020\") == False, \"Wrong answer\"\nassert     valid_date(\"02-12-2020\") == True, \"Wrong answer\"\nassert     valid_date(\"12-02-2020\") == True, \"Wrong answer\"\nassert     valid_date(\"12-13-2020\") == False, \"Wrong answer\"\nassert     valid_date(\"02-01-2020\") == False, \"Wrong answer\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     valid_date(\"\") == False, \"Dates are not empty\"\nassert     valid_date(\"11-22-2020\") == False, \"More than 31 days in month\"\nassert     valid_date(\"11-13-2020\") == False, \"Less than 1 day in month\"\nassert     valid_date(\"12-13-2020\") == False, \"Less than 1 day in month\"\nassert     valid_date(\"02-30-2020\") == False, \"More than 30 days in month\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef _days_in_month(month, year):\n    \"\"\"You have to write a function which will return the number of days in a month and year.\n    The input argument is the month number and year.\n    You have to use the following format for your code.\n    \"\"\"\n    pass\n\ndef days_in_month(month, year):\n    \"\"\"You have to write a function which will return the number of days in a month and year.\n    The input argument is the month number and year.\n    You have to use the following format for your code.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     valid_date(\"10-10-2015\") == False, \"Wrong result\"\nassert     valid_date(\"1-31-2015\") == False, \"Wrong result\"\nassert     valid_date(\"1-31-2014\") == False, \"Wrong result\"\nassert     valid_date(\"2-31-2014\") == False, \"Wrong result\"\nassert     valid_date(\"1-31-2100\") == False, \"Wrong result\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     valid_date('12-29-2020') == False\nassert     valid_date('12-29-2020') == False\nassert     valid_date('12-31-2020') == False\nassert     valid_date('12-29-2019') == True\nassert     valid_date('11-31-2020') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     split_words('hello world') == ['hello', 'world'], split_words('hello world')\nassert     split_words('hi') == ['hi'], split_words('hi')\nassert     split_words('') == [], split_words('')\nassert     split_words('h') == ['h'], split_words('h')\n\ndef max_sum_subarray(arr):\n    '''\n    Given a list of numbers, return the maximum sum of any contiguous sublist of that list.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     split_words('Good muffins cost $3.88\\nin New York.  Please buy me\\ntwo of them.\\nThanks.') ==\n        ['Good','muffins', 'cost', '$3.88', 'in', 'New', 'York', '.', 'Please', 'buy','me', 'two', 'of', 'them', '.', 'Thanks', '.']\nassert     split_words('\"Where\\'s my moo-cow?\"\\nThe cow jumped over the moon.') ==\n        ['\"Where\\'s my moo-cow?\"', 'The cow jumped over the moon.']\nassert     split_words('Hello world!\\nHello world!\\n\\nHello world!') ==\n        ['Hello', 'world!', 'Hello', 'world!', '', 'Hello', 'world!']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef get_word_count(txt):\n    '''\n    Given a string of words, return a dictionary of words and their frequencies.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     split_words(    'The cat is lazy') == ['The', 'cat', 'is', 'lazy']\nassert     split_words(    'The cat is lazy is') == ['The', 'cat', 'is', 'lazy', 'is']\nassert     split_words(    'The, cat, is, lazy') == ['The', 'cat', 'is', 'lazy']\nassert     split_words(    'The cat, is, lazy') == ['The', 'cat', 'is', 'lazy']\nassert     split_words(    'The cat, is, lazy, is') == ['The', 'cat', 'is', 'lazy', 'is']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef find_differences(s1, s2):\n    '''\n    Given 2 strings, return a list of differences between the 2 strings (in the form of (char_1, char_2))\n    if a char_1 is in s1 but not s2, return (char_1, None)\n    if a char_1 is in s2 but not s1, return (None, char_1)\n    if a char_1 is in both, return (char_1, char_2)\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     split_words('test, text') == ['test', 'text']\nassert     split_words('abc, def, ghi') == ['abc', 'def', 'ghi']\nassert     split_words('abc') == ['abc']\nassert     split_words('abc def') == ['abc', 'def']\nassert     split_words('abc def ghi') == ['abc', 'def', 'ghi']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     split_words('hi there') == ['hi', 'there']\nassert     split_words('hi_there') == ['hi', '_there']\nassert     split_words('_there') == ['_', 'there']\nassert     split_words('_there_') == ['_', 'there_']\nassert     split_words(',there') == ['', 'there']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     split_words(\"abc\") == ['abc']\nassert     split_words(\"abc  abc\") == ['abc', 'abc']\nassert     split_words(\"abc   abc  abc   abc\") == ['abc', 'abc', 'abc', 'abc']\nassert     split_words(\"abcdefghijklmnopqrstuvwxyz\") == ['abcdefghijklmnopqrstuvwxyz']\nassert     split_words(\"4 5 6\") == ['4', '5', '6']\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef char_with_odd_count(txt):\n    '''\n    Given a string of words, return the number of characters that have odd count in the string\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     split_words('This is a string') == ['This', 'is', 'a','string']\nassert     split_words('no whitespace here') == ['no', 'whitespace', 'here']\nassert     split_words('One, two, \"three\", \\t\\tfour') == ['One', 'two', '\"three\"', 'four']\nassert     split_words('One, two, \"three\", \\t\\tfour, \\nfive') == ['One', 'two', '\"three\"', 'four', 'five']\nassert     split_words('I love Python') == ['I', 'love', 'Python']\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 5, 4]) == False\nassert     is_sorted([1, 2, 2, 2, 3]) == False\nassert     is_sorted([1, 2, 3, 3, 4, 5]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1,2,3]) == True\nassert     is_sorted([3,2,1]) == False\nassert     is_sorted([1,1,1,1]) == False\nassert     is_sorted([3,3,1,2]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_sorted([1,2,3,4,5,6,7]) == True\nassert     is_sorted([1,2,3,4,5,6,7,7]) == True\nassert     is_sorted([1,2,3,4,5,6,7,7,7]) == False\nassert     is_sorted([1,2,3,4,5,6,7,7,7,7,8]) == False\nassert     is_sorted([1,2,3,4,5,6,7,7,7,7,7,7]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef check_sorted(lst):\n    '''\n    check if a list is sorted in ascending order\n    return a tuple of two elements: 1. boolean: True if list is sorted\n    in ascending order and False otherwise. 2. a sorted list with duplicates\n    removed.\n    '''\n    pass\n\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 5, 6, 7, 7, 9]\n    assert check_sorted(lst) == (True, [1, 2, 3, 4, 5, 6, 7, 9])\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([5,4,3,2,1]) == True\nassert     is_sorted([5,4,3,2,1,4,3]) == False\nassert     is_sorted([5,4,3,2,1,4,3,1]) == False\nassert     is_sorted([5,4,3,2,1,4,3,1,5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef test_is_sorted_list_is_sorted():\n    '''\n    Check if is_sorted returns True if list is sorted\n    '''\n    pass\n\ndef test_is_sorted_list_is_sorted_2():\n    '''\n    Check if is_sorted returns True if list is sorted\n    '''\n    pass\n\ndef test_is_sorted_list_is_sorted_3():\n    '''\n    Check if is_sorted returns True if list is sorted\n    '''\n    pass\n\ndef test_is_sorted_list_is_sorted_4():\n    '''\n    Check if is_sorted returns True if list is sorted\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,2]) == True\nassert     is_sorted([2,1]) == True\nassert     is_sorted([1,2,3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 5, 4]) == True\nassert     is_sorted([4, 3, 2, 1]) == False\nassert     is_sorted([4, 5, 1, 2, 3]) == False\nassert     is_sorted([1, 2, 3, 2, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 2]) == False\nassert     is_sorted([1, 2, 3, 4]) == True\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     intersection((1,3), (2,4)) == 'NO'\nassert     intersection((1,3), (3,5)) == 'YES'\nassert     intersection((1,3), (3,4)) == 'NO'\nassert     intersection((1,3), (4,5)) == 'NO'\nassert     intersection((1,3), (5,6)) == 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 2)) == \"NO\"\nassert     intersection((1, 3), (3, 4)) == \"NO\"\nassert     intersection((0, 5), (2, 3)) == \"YES\"\nassert     intersection((0, 5), (2, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 2)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((2, 4), (3, 4)) == \"YES\"\nassert     intersection((3, 5), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 2), (1, 2)) == \"YES\"\nassert     intersection((1, 2), (2, 2)) == \"YES\"\nassert     intersection((0, 2), (1, 2)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == 'NO', \"intersection of (1, 3) and (2, 4) is NO\"\nassert     intersection((1, 3), (2, 2)) == 'NO', \"intersection of (1, 3) and (2, 2) is NO\"\nassert     intersection((1, 3), (4, 6)) == 'NO', \"intersection of (1, 3) and (4, 6) is NO\"\nassert     intersection((1, 2), (3, 4)) == 'NO', \"intersection of (1, 2) and (3, 4) is NO\"\nassert     intersection((1, 2), (3, 3)) == 'YES', \"intersection of (1, 2) and (3, 3) is YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((1, 2), (1, 3)) == \"YES\"\nassert     intersection((2, 5), (3, 5)) == \"YES\"\nassert     intersection((-3, -2), (-2, -1)) == \"YES\"\nassert     intersection((-1, 0), (0, 1)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     intersection( (1, 2), (2, 3) ) == (2, 2), 'no intersection'\nassert     intersection( (1, 3), (2, 4) ) == (2, 2), 'no intersection'\nassert     intersection( (1, 2), (5, 6) ) == (1, 1), 'no intersection'\nassert     intersection( (1, 2), (1, 2) ) == (1, 1), 'no intersection'\nassert     intersection( (1, 2), (2, 4) ) == (2, 2), 'intersection'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     intersection((1, 2), (2, 3)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 2)) == \"YES\"\n\ndef is_prime(number):\n    \"\"\"You are given a number that is less than or equal to 10\n    Check whether this number is a prime number.\n    A prime number is an integer greater than 1 that is not a product of two smaller integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([2, -3, 4, -5]) == 30\nassert     prod_signs([-5, 4, -3, 2]) == 30\nassert     prod_signs([-3, 5, -5, 2]) == 30\nassert     prod_signs([-2, -4, -6]) == -72\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     prod_signs([]) is None\nassert     prod_signs([1, 2]) == 0\nassert     prod_signs([1, -2]) == 2\nassert     prod_signs([1, 2, -3, 4, 5]) == 0\nassert     prod_signs([-1, 2, -3, 4, 5]) == 6\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     prod_signs([-1, -2, -3]) == -9\nassert     prod_signs([]) == None\nassert     prod_signs([1]) == 1\nassert     prod_signs([1, 2]) == 1\nassert     prod_signs([1, -2]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([-1]) == 1\nassert     prod_signs([1]) == 1\nassert     prod_signs([1, -1]) == -1\nassert     prod_signs([-1, 1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     prod_signs([1, 2, 3]) == 5 * (1 * -1 + -1 * 1 + 1 * 1)\nassert     prod_signs([-1, 2, 3]) == 5 * (-1 * -1 + 1 * 1 + 1 * 1)\nassert     prod_signs([-1, -2, 3]) == 5 * (-1 * 1 + 1 * -1 + 1 * 1)\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     prod_signs([1, -1, 2, 3]) == (-1 * 1 * 1 * -1) + (1 * -1 * 2 * 3) == -3 + 6 == 9\nassert     prod_signs([-1, 2, 3]) == -1 * -1 * 2 * 3 == 3\nassert     prod_signs([]) == None\nassert     prod_signs([0]) == 0\nassert     prod_signs([2]) == 2\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    grid = [[1,2,3],[4,5,6],[7,8,9]]\n    k = 3\n    print(minPath(grid, k))\n    "
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     minPath([[1, 1, 3, 2, 4],\n                  [1, 1, 2, 3, 3],\n                  [3, 3, 2, 3, 3],\n                  [2, 4, 3, 3, 3]], 4) == [1, 2, 3, 3]\nassert     minPath([[1, 2, 3, 4],\n                  [1, 2, 3, 4],\n                  [1, 2, 3, 4],\n                  [1, 2, 3, 4]], 4) == [1, 2, 3, 4]\nassert     minPath([[2, 1, 4, 3],\n                  [2, 1, 4, 3],\n                  [2, 1, 4, 3],\n                  [2, 1, 4, 3]], 4) == [1, 2, 3, 4]\nassert     minPath([[1, 3, 1, 4],\n                  [1, 3, 1, 4],\n                  [1, 3, 1, 4],\n                  [1, 3, 1, 4]], 4) == [1, 3, 1, 4]\nassert     minPath([[1, 1, 4, 2, 5],\n                  [1, 1, 3, 2, 5],\n                  [1, 1, 2, 3, 5],\n                  [1, 1, 2, 3, 4],\n                  [1, 1, 2, 3, 5]], 6) == [1, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     minPath([[3, 9, 5, 6, 3, 2, 1], [8, 5, 2, 6, 9, 3, 7], \n                [4, 3, 7, 5, 8, 1, 2], [2, 1, 6, 5, 4, 3, 9], \n                [1, 2, 3, 4, 7, 8, 6], [5, 4, 2, 1, 6, 9, 7], \n                [6, 7, 8, 9, 3, 4, 5]], 4) == [1, 2, 3, 4, 7, 8, 6]\n\nassert     minPath([[3, 9, 5, 6, 3, 2, 1], [8, 5, 2, 6, 9, 3, 7], \n                [4, 3, 7, 5, 8, 1, 2], [2, 1, 6, 5, 4, 3, 9], \n                [1, 2, 3, 4, 7, 8, 6], [5, 4, 2, 1, 6, 9, 7], \n                [6, 7, 8, 9, 3, 4, 5]], 8) == [1, 2, 3, 4, 7, 8, 6]\n\nassert     minPath([[3, 9, 5, 6, 3, 2, 1], [8, 5, 2, 6, 9, 3, 7], \n                [4, 3, 7, 5, 8, 1, 2], [2, 1, 6, 5, 4, 3, 9], \n                [1, 2, 3, 4, 7, 8, 6], [5, 4, 2, 1, 6, 9, 7], \n                [6, 7, 8, 9, 3, 4, 5]], 3) == [2, 1, 6, 5, 4, 3, 9]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     minPath([[1, 3, 5], [2, 4, 6]], 2) == [2, 1]\nassert     minPath([[1, 3, 5], [2, 4, 6]], 3) == [2, 4, 6, 5, 1]\nassert     minPath([[1, 3, 5], [2, 4, 6]], 4) == [2, 4, 6, 5, 1]\n\nif __name__ == '__main__':\n    print(minPath([[1, 3, 5], [2, 4, 6]], 2))\n    print(minPath([[1, 3, 5], [2, 4, 6]], 3))\n    print(minPath([[1, 3, 5], [2, 4, 6]], 4)"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     minPath(\n[[ 1, 2, 5, 1, 1],\n [ 4, 1, 1, 1, 1],\n [ 1, 1, 1, 4, 1]],\n1) == [1]\nassert     minPath(\n[[ 1, 2, 5, 1, 1],\n [ 4, 1, 1, 1, 1],\n [ 1, 1, 1, 4, 1]],\n2) == [1, 1]\nassert     minPath(\n[[ 1, 2, 5, 1, 1],\n [ 4, 1, 1, 1, 1],\n [ 1, 1, 1, 4, 1]],\n3) == [1, 1, 1]\nassert     minPath(\n[[ 1, 2, 5, 1, 1],\n [ 4, 1, 1, 1, 1],\n [ 1, 1, 1, 4, 1]],\n4) == [1, 1, 4]\nassert     minPath(\n[[ 1, 2, 5, 1, 1],\n [ 4, 1, 1, 1, 1],\n [ 1, 1, 1, 4, 1]],\n5) == [1, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     minPath(    [\n                            [1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]\n                        ], 1) == [1, 2, 3]\nassert     minPath(    [\n                            [1, 3, 3],\n                            [2, 4, 6],\n                            [8, 9, 9]\n                        ], 2) == [1, 3, 4, 6, 9]\nassert     minPath(    [\n                            [1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]\n                        ], 3) == [1, 2, 3, 4, 5, 6, 8, 9]\nassert     minPath(    [\n                            [1, 2, 3, 4],\n                            [5, 6, 7, 8],\n                            [9, 10, 11, 12]\n                        ], 4) == [1, 2, 3, 4, 5, 6, 7, 8, 11, 12]\nassert     minPath(    [\n                            [1, 2, 3, 4, 5],\n                            [6, 7, 8, 9, 10],\n                            [11, 12, 13, 14, 15]\n                        ], 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     minPath([[1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16]], \n                 3) == [1, 3, 4, 8, 12, 16]\n\nassert     minPath([[1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16]], \n                 4) == [1, 2, 3, 4, 8, 12, 16]\n\nassert     minPath([[1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16]], \n                 5) == [1, 2, 3, 4, 8, 12, 16]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     minPath([[1, 2], [3, 4]], 2) == [1, 2, 4]\nassert     minPath([[1, 4, 3], [2, 5, 2], [1, 2, 1]], 2) == [1, 3, 4]\nassert     minPath([[1, 4, 3], [2, 5, 2], [1, 2, 1]], 3) == [1, 4, 5]\nassert     minPath([[1, 4, 3], [2, 5, 2], [1, 2, 1]], 4) == [1, 4, 5]\nassert     minPath([[1, 4, 3], [2, 5, 2], [1, 2, 1]], 5) == [1, 2, 3, 2, 5]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [1, 3, 2, 2, 2] == minPath([[3, 6, 2, 7], \n    [6, 9, 2, 3], \n    [2, 7, 0, 4]], 2)\nassert     [1, 3, 2, 2, 2] == minPath([[1, 2, 3, 4], \n    [5, 6, 7, 8], \n    [9, 10, 11, 12]], 4)\nassert     [1, 3, 2, 2, 2] == minPath([[1, 2, 3, 4], \n    [5, 6, 7, 8], \n    [9, 10, 11, 12]], 2)\nassert     [1, 2, 3, 4, 5] == minPath([[1, 2, 3, 4], \n    [5, 6, 7, 8], \n    [9, 10, 11, 12]], 4)\nassert     [1, 3, 2, 2, 2] == minPath([[1, 3, 3, 4], \n    [5, 6, 7, 8], \n    [9, 10, 11, 12]], 4)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     minPath([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]],\n                  3) == [1, 2, 3]\nassert     minPath([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]],\n                  2) == [1, 2]\nassert     minPath([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]],\n                  1) == [1]\nassert     minPath([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]],\n                  1) == [1]\nassert     minPath([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]],\n                  2) == [1, 2]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 3\nassert     tri(3) == 8\nassert     tri(7) == 28\nassert     tri(15) == 4"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 2\nassert     tri(4) == 3\nassert     tri(3) == 8\nassert     tri(5) == 13\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     tri(1)     == [3]\nassert     tri(2)     == [1, 3, 1]\nassert     tri(3)     == [1, 3, 3, 1]\nassert     tri(4)     == [1, 3, 3, 1, 4]\nassert     tri(5)     == [1, 3, 3, 1, 4, 8"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 8\nassert     tri(3) == 8\nassert     tri(5) == 28\nassert     tri(1) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 8\nassert     tri(3) == 34\nassert     tri(4) == 44\nassert     tri(5) == 74\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     tri(1)                 ==     [3]\nassert     tri(2)                 ==     [3, 1]\nassert     tri(3)                 ==     [3, 1, 1]\nassert     tri(4)                 ==     [3, 1, 1, 2]\nassert     tri(5)                 ==     [3, 1, 1, 2, 5]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 2\nassert     tri(3) == 8\nassert     tri(4) == 3\nassert     tri(5) == 14\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(tri(2))\n    print(tri(4))\n    print(tri(3))\n    print(tri(5))\n    print(tri(6))\n    print(tri(7))\n    print(tri(8))\n    print(tri(9))"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 2\nassert     tri(3) == 8\nassert     tri(4) == 3\nassert     tri(5) == 11\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     digits(8) == 0\nassert digits(9) == 1\nassert digits(10) == 2\nassert digits(237) == 3\nassert digits(25) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     digits(812398775) == 779\nassert     digits(9875) == 0\nassert     digits(123456789) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     digits(1234) == 4\nassert     digits(9) == 0\nassert     digits(20) == 0\nassert     digits(13) == 1\nassert     digits(3) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime(n):\n    \"\"\"\n    check whether n is prime or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     digits(189) == 9\nassert digits(4545) == 16\nassert digits(92) == 1\nassert digits(18) == 0\nassert digits(3245) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     digits(918273645) == 15\nassert digits(9123789) == 12\n\ndef is_palindrome(n):\n    \"\"\"Given an integer, return True if it's palindrome.\n    Otherwise, return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nassert digits(2) == 2\nassert digits(3) == 6\nassert digits(4) == 4\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_nested(\"[foo]\") == True\nassert     is_nested(\"[foo(bar)](baz)\") == True\nassert     is_nested(\"[foo(bar)](baz)(blim)\") == True\nassert     is_nested(\"[foo(bar)](baz)blim\") == False\nassert     is_nested(\"[foo(bar(baz)blim)\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_nested('[()]') == True, 'Test 1'\nassert     is_nested('()[]{}') == True, 'Test 2'\nassert     is_nested('([{}])()') == True, 'Test 3'\nassert     is_nested('({[()]})') == True, 'Test 4'\nassert     is_nested('((((((((()))))))') == True, 'Test 5'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_nested('[]') == True, \"wrong result\"\nassert     is_nested('[[]') == True, \"wrong result\"\nassert     is_nested('[[]()') == True, \"wrong result\"\nassert     is_nested('[[]()[]]') == True, \"wrong result\"\nassert     is_nested('[[]()') == False, \"wrong result\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_nested('[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]') == True\nassert     is_nested('[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]') == False\nassert     is_nested('[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]') == True\nassert     is_nested('[][[[[[[[[[[[[[[[[]]]]]]]]]]]]]]][]') == True\nassert     is_nested('[][[[[[[[[[[[[[[[[]]]]]]]]]]]]]]][][]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_nested(\"\") == False, \"Empty string\"\nassert     is_nested(\"[\") == False, \"Single bracket\"\nassert     is_nested(\"[]\") == True, \"Empty string with nested brackets\"\nassert     is_nested(\"[[]\") == True, \"Non-empty string with nested brackets\"\nassert     is_nested(\"[[]([[]])]\") == True, \"Non-empty string with nested brackets\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_nested(\"[[]]\") == True\nassert     is_nested(\"[(]\") == False\nassert     is_nested(\"[()]{]{[()]()}\") == True\nassert     is_nested(\"[(]\") == False\nassert     is_nested(\"[()]{[()]()}\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_nested('[[[[[[[[[[[[[[[])]]]]]]]]]]]') == True\nassert     is_nested('[[[[[[[[[[[[[[[[]]]]]]]]]]]]]') == False\nassert     is_nested('[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]') == False\nassert     is_nested('[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]') == True\nassert     is_nested('[{{}]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_nested('([])') == True\nassert     is_nested('([[]])') == True\nassert     is_nested('([])[]({})') == True\nassert     is_nested('(([]))') == True\nassert     is_nested('[[](){{}}]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_nested('[()]') == True,'should be True'\nassert     is_nested('[(])') == False,'should be False'\nassert     is_nested('(([]){()})') == True,'should be True'\nassert     is_nested('[)([][])]') == False,'should be False'\nassert     is_nested('[([])]') == True,'should be True'\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sum_squares([2, 5, 6]) == \"The input list does not have even numbers to square.\"\nassert     sum_squares([3, 4, 5]) == \"The input list does not have even numbers to square.\"\nassert     sum_squares([3, 4, 5, 6, 7, 8]) == \"The input list has even numbers to square.\"\n\nprint(\"All the tests passed!\")"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_squares([0,1,2,3]) == 6\nassert     sum_squares([-2, -3, 4]) == 10\nassert     sum_squares([4, 2, 2, 2, 2]) == 26\nassert     sum_squares([0, 0, 0, 0, 0]) == 0\nassert     sum_squares([0, -2, -3, 4]) == 10\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\nprint(\"All tests passed!\""
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 289\nassert sum_squares([1, 2, 3]) == 14\nassert sum_squares([1]) == 1\nassert sum_squares([]) == 0\nassert sum_squares([0]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == 385\nassert     sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 385\nassert     sum_squares([-5, -4, -3, -2, -1]) == 304\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4]) == 36\nassert     sum_squares([3,4,5,6,7]) == 145\nassert     sum_squares([-5,2,3,4]) == 29\nassert     sum_squares([3,-2,3,4]) == 43\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sum_squares([4, 5, 8]) == 30, \"must be 30\"\nassert     sum_squares([2, 5, 7]) == 58, \"must be 58\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 36,     \"sum_squares\"\nassert     sum_squares([0, 1, 2, 3, 4]) == 36,     \"sum_squares\"\nassert     sum_squares([-1, -2, -3, -4]) == 36,     \"sum_squares\"\nassert     sum_squares([-1, 2, 3, 4]) == 36,     \"sum_squares\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello world\") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"A nice day isn't it.\") == True, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"Python 101: Introduction.\") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"99 elephants in a [cage]\") == False, \"Fails\"\nassert     check_if_last_char_is_a_letter(\"\u00da\u00cc\u00cf\u00c8\u00d9\u00ca\u00ce\u00cf\u00ec\") == True, \"Fails\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter(\n    \"A man, a plan, a canal -- Panama\"\n    ) == False, \"Wrong result for check_if_last_char_is_a_letter\"\nassert     check_if_last_char_is_a_letter(\n    \"Panama\"\n    ) == True, \"Wrong result for check_if_last_char_is_a_letter\"\nprint(\"The second test passed!\")\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(\"asdzxc\") == False\nassert     check_if_last_char_is_a_letter(\"asdzxc \") == True\nassert     check_if_last_char_is_a_letter(\"asdzxc a\") == False\nassert     check_if_last_char_is_a_letter(\"asdzxc a \") == True\nassert     check_if_last_char_is_a_letter(\"asdzxc a \") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"abcd\") == False, \"Wrong result for 'abcd'\"\nassert     check_if_last_char_is_a_letter(\"ABCD\") == False, \"Wrong result for 'ABCD'\"\nassert     check_if_last_char_is_a_letter(\"ab c\") == False, \"Wrong result for 'ab c'\"\nassert     check_if_last_char_is_a_letter(\"abcd \") == False, \"Wrong result for 'abcd '\"\nassert     check_if_last_char_is_a_letter(\"abcd   \") == False, \"Wrong result for 'abcd   '\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('int_a') == True\nassert     check_if_last_char_is_a_letter('int a') == True\nassert     check_if_last_char_is_a_letter('int a ') == False\nassert     check_if_last_char_is_a_letter('  ') == True\nassert     check_if_last_char_is_a_letter('!') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"hello\") == False, \"Incorrect output\"\nassert     check_if_last_char_is_a_letter(\"a word\") == True, \"Incorrect output\"\nassert     check_if_last_char_is_a_letter(\"Last char is a letter\") == False, \"Incorrect output\"\nassert     check_if_last_char_is_a_letter(\"Last char is a letter \") == True, \"Incorrect output\"\nassert     check_if_last_char_is_a_letter(\"  \") == True, \"Incorrect output\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter(\"hello, world!\") == True, \"Wrong result for check_if_last_char_is_a_letter\"\nassert     check_if_last_char_is_a_letter(\"one two 3\") == False, \"Wrong result for check_if_last_char_is_a_letter\"\nassert     check_if_last_char_is_a_letter(\"my_arbitrary_string\") == False, \"Wrong result for check_if_last_char_is_a_letter\"\nassert     check_if_last_char_is_a_letter(\"1 2 3\") == False, \"Wrong result for check_if_last_char_is_a_letter\"\n\ndef get_number_of_words_in_string(txt):\n    '''\n    Create a function that returns the number of words in a given text.\n    '''\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"apple\") == False\nassert     check_if_last_char_is_a_letter(\"zoo!\") == True\nassert     check_if_last_char_is_a_letter(\"9zoo\") == False\nassert     check_if_last_char_is_a_letter(\"\") == False\nassert     check_if_last_char_is_a_letter(\"zoo\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"I am ready\") == True, \"WRONG\"\nassert     check_if_last_char_is_a_letter(\"!\") == True, \"WRONG\"\nassert     check_if_last_char_is_a_letter(\"I have a dream\") == False, \"WRONG\"\nassert     check_if_last_char_is_a_letter(\"dreamer\") == False, \"WRONG\"\nassert     check_if_last_char_is_a_letter(\"sleep\") == False, \"WRONG\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"salt\") == True, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"saltn\") == False, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"saltn \") == True, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"salt n\") == True, \"Wrong output\"\nassert     check_if_last_char_is_a_letter(\"\") == False, \"Wrong output\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     can_arrange([4, 3, 10, 9, 8]) == 3\nassert     can_arrange([4, 3, 10, 9, 4]) == -1\nassert     can_arrange([3, 1, 10, 9, 4]) == 2\nassert     can_arrange([1, 1, 10, 9, 4]) == -1\nassert     can_arrange([10, 9, 8, 7, 6]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     can_arrange([1,2,3,3,2,1]) == 4\nassert     can_arrange([1,1,2,3]) == 2\nassert     can_arrange([1,1,1,1]) == -1\nassert     can_arrange([1,1,1,2]) == 2\nassert     can_arrange([1,1,2,1]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([-2, -3, 4, -1]) == 2\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 2, \"incorrect\"\nassert     can_arrange([5, 4, 3, 2, 1]) == 4, \"incorrect\"\nassert     can_arrange([1, 2, 3, 4, 3]) == 3, \"incorrect\"\nassert     can_arrange([1, 2, 3, 4, 5]) == -1, \"incorrect\"\nassert     can_arrange([5, 4, 3, 2, 1]) == -1, \"incorrect\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     can_arrange([3, 4, 1, 2]) == 2\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([3, 1, 3]) == 2\nassert     can_arrange([3, 1, 4]) == 0\nassert     can_arrange([3, 1, 4, 3]) == 1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 2, 3, 4, 6, 7, 8]) == 5, \"Error on list [1, 2, 3, 4, 6, 7, 8]\"\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1, \"Error on list [1, 2, 3, 4, 5, 6, 7]\"\nassert     can_arrange([1, 2, 3, 4, 7, 6, 5]) == 4, \"Error on list [1, 2, 3, 4, 7, 6, 5]\"\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1, \"Error on list [1, 2, 3, 4, 5, 6, 7, 8]\"\nassert     can_arrange([1, 2, 3, 4, 5, 7, 6]) == 3, \"Error on list [1, 2, 3, 4, 5, 7, 6]\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([1]) == 0\nassert     can_arrange([1, 3]) == 1\nassert     can_arrange([1, 3, 2]) == 1\nassert     can_arrange([1, 2, 3]) == 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     can_arrange([1, 3, 2, 5, 7, 6, 9, 8, 10, 12]) == 9, \"Error\"\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1, \"Error\"\nassert     can_arrange([0, 2, 3, 1, 2, 5, 7, 6, 9, 8, 10, 12]) == 9, \"Error\"\n\nprint(\"Congratulations, you've passed all the tests!\""
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([-3, 0, 4, -1, 2]) == (2, 4)\nassert     largest_smallest_integers([3, 4, -1, 1]) == (-1, 1)\nassert     largest_smallest_integers([7, 8, 9, 11, -1, -3]) == (7, -3)\nassert     largest_smallest_integers([1, 4, -8, -3, 2, -9]) == (-9, 2)\nassert     largest_smallest_integers([-2, -4, -6, -1, 0, -6]) == (-6, 0)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([7, 1, 2, -2, 3, -3, 4, -4, 5]) == (-2, 5)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (None, None)\nassert     largest_smallest_integers([-7, -1, -2, -3]) == (-7, 1)\n\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([1, 2, 3, -4, -5, 6]) == (None, 1)\nassert     largest_smallest_integers([0, -1, -2, -3]) == (-1, 0)\nassert     largest_smallest_integers([0, 1, 2, 3]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, 2, 3, -4, -5, -6, -7]) == (-1, 8)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([0, -1, -2, -3, -4, -5, -6, -7, -8]) == (-8, 1)\nprint('Exercise 92 is correct.')\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([-34, -2, -1, -9, -7, -6, -5, -4, -3]) == (-9, 1)\nassert largest_smallest_integers([-2, 3, 4, 5, 6, 7, 8, 9]) == (None, 8)\nassert largest_smallest_integers([42]) == (None, None)\nassert largest_smallest_integers([42, 3]) == (None, None)\nassert largest_smallest_integers([3, 42]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([1, 2, 3]) == (-1, 3)\nassert     largest_smallest_integers([-1, -2, -3]) == (1, -3)\nassert     largest_smallest_integers([0, 0, 0]) == (0, 0)\nassert     largest_smallest_integers([-1, -2, -3, -4]) == (1, -4)\nassert     largest_smallest_integers([]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5, -6, -2, -4, -1]) == (None, 2)\nassert     largest_smallest_integers([1, -2, 3, 4, 5, -6, -2, -4, -1]) == (-6, 1)\nassert     largest_smallest_integers([1, -2, 3, 4, 5, -6, -2, -4, 1]) == (None, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -2, -4, -1]) == (-6, 1)\nassert     largest_smallest_integers([-1, 2, -3, 4, 5, -6, -2, -4, -1]) == (-6, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, 2, 3]) == (None, 1)\nassert     largest_smallest_integers([0, -1, -2]) == (-1, 0)\nassert     largest_smallest_integers([5, 4, -1, 2, 1, -5, -2]) == (None, -1)\nassert     largest_smallest_integers([1, 2, 3, 4, -1]) == (-1, 1)\nassert     largest_smallest_integers([0, 0, 0, 0, 0, 0, 0]) == (0, 0)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     compare_one(10,20) == 20\nassert     compare_one(10,10) == 10\nassert     compare_one(10.5,20) == 20\nassert     compare_one(10.5,10.5) == 10.5\nassert     compare_one(\"10.5\",20) == 20\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (compare_one(100, 1) == \"100\"), \"Fails to distinguish integers from floats\"\nassert     (compare_one(1, 1) == \"1\"), \"Fails to distinguish integers from floats\"\nassert     (compare_one(1.0, 1) == \"1.0\"), \"Fails to distinguish integers from floats\"\nassert     (compare_one(1.0, 1.0) == \"1.0\"), \"Fails to distinguish integers from floats\"\nassert     (compare_one(1.0, \"1.0\") == \"1.0\"), \"Fails to distinguish integers from floats\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     compare_one(1, 3) == 3\nassert     compare_one(1, 1) == 1\nassert     compare_one(1, 3.0) == 3.0\nassert     compare_one(1.0, 3) == 3\nassert     compare_one(1.0, 1.0) == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (compare_one(1, 0.5) == None)\nassert     (compare_one(1.0, 0.5) == 1.0)\nassert     (compare_one(1, 1) == 1)\nassert     (compare_one(1.5, 1.0) == 1.5)\nassert     (compare_one('1', '2') == None)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.0, 1) == 1.0\nassert     compare_one(1.0, 1) == 1.0\nassert     compare_one(1, 1.0) == 1.0\nassert     compare_one(1, 1.0) == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef compare_two(a, b, c):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (compare_one(1, 2) == 2)\nassert     (compare_one(1, 1) == 1)\nassert     (compare_one(\"1\", \"2\") == 2)\nassert     (compare_one(\"1\", \"1\") == 1)\nassert     (compare_one(1.5, 3) == 3)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1, 1.1) == 1.1\nassert     compare_one(\"1.1\", 1.1) == 1.1\nassert     compare_one(\"1.1\", \"1.1\") == \"1.1\"\nassert     compare_one(1, \"1.1\") == 1.1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1.1, 2.2) == 2.2\nassert     compare_one(\"1.1\", \"2.2\") == 2.2\nassert     compare_one(1.1, \"2.2\") == 2.2\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare_one(7, 4.5) == 7\nassert     compare_one('5', 4.5) == 5\nassert     compare_one(4.5, '5') == 5\nassert     compare_one('4.5', '5') == 5\nassert     compare_one('5', '5') == '5'\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(12) == True, \"is_equal_to_sum_even(12) is not returning True\"\nassert     is_equal_to_sum_even(28) == True, \"is_equal_to_sum_even(28) is not returning True\"\nassert     is_equal_to_sum_even(14) == False, \"is_equal_to_sum_even(14) is not returning False\"\nassert     is_equal_to_sum_even(35) == False, \"is_equal_to_sum_even(35) is not returning False\"\nprint('Passed all tests...'"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(10) == True, \"Test failed\"\nassert     is_equal_to_sum_even(12) == False, \"Test failed\"\nassert     is_equal_to_sum_even(14) == True, \"Test failed\"\nassert     is_equal_to_sum_even(17) == False, \"Test failed\"\nassert     is_equal_to_sum_even(22) == True, \"Test failed\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(14) == True\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(18) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(3) == False\nassert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(15) == True\nassert     is_equal_to_sum_even(0) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef test_is_equal_to_sum_odd():\n    \"\"\" Test for is_equal_to_sum_odd\"\"\"\n    assert is_equal_to_sum_odd(2) == True\n    assert is_equal_to_sum_odd(3) == False\n    assert is_equal_to_sum_odd(4) == True\n    "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(16) == False\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(16) is True\nassert     is_equal_to_sum_even(32) is False\nassert     is_equal_to_sum_even(40) is True\nassert     is_equal_to_sum_even(42) is False\nassert     is_equal_to_sum_even(44) is False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(12) == True, 'Not working'\nassert     is_equal_to_sum_even(15) == False, 'Not working'\nassert     is_equal_to_sum_even(2) == False, 'Not working'\nassert     is_equal_to_sum_even(4) == True, 'Not working'\nassert     is_equal_to_sum_even(10) == False, 'Not working'\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(20) == False\nassert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(46) == True\nassert     is_equal_to_sum_even(51) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(24) == False\nassert     is_equal_to_sum_even(24) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nprint('OK')"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert ____ == ____, \"test is failed\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    \n\"\"\"\nGiven a string text, find all its ocurrences in text\n\"\"\"\ndef find_all_occurrences(text):\n    \"\"\"\n    Given a string text, \n    return a list of tuples with each element of the list having two elements \n    first element is index of the starting position of the string, second element is index of the ending position of the string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     fix_spaces('meeting at 16 january at 16pm') =='meeting_at_16_january_at_16pm'\nassert     fix_spaces('meeting at 16 january at 16:15pm') =='meeting_at_16_january_at_16_15pm'\nassert     fix_spaces('meeting at 16 january at 16:15:15pm') =='meeting_at_16_january_at_16_15_15pm'\nassert     fix_spaces('meeting at 16 january at 16:15:15pm') =='meeting_at_16_january_at_16_15_15pm'\nassert     fix_spaces('meeting at 16 january at 16:15:15pm') =='meeting_at_16_january_at_16_15_15pm'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef find_punct(text):\n    \"\"\"\n    Given a string text, return a list of all characters that are punctuation marks.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     fix_spaces(\"This is a test\") == \"This_is_a_test\", \"wrong answer\"\nassert     fix_spaces(\"tHis  iS  a  tEsT\") == \"tHis_iS_a_tEsT\", \"wrong answer\"\nassert     fix_spaces(\"He is       here\") == \"He_is_here\", \"wrong answer\"\nassert     fix_spaces(\"He   is       here\") == \"He_is_here\", \"wrong answer\"\nassert     fix_spaces(\" He is here\") == \"He_is_here\", \"wrong answer\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     file_name_check(\"mac.exe\") == \"Yes\"\nassert     file_name_check(\"mac.txt\") == \"Yes\"\nassert     file_name_check(\"1mac.exe\") == \"Yes\"\nassert     file_name_check(\"mac.dll\") == \"Yes\"\nassert     file_name_check(\"mac.txt.exe\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     file_name_check('my_file.txt') == 'Yes'\nassert     file_name_check('my_file.exe') == 'Yes'\nassert     file_name_check('my_file.dll') == 'Yes'\nassert     file_name_check('my_file.pdf') == 'No'\nassert     file_name_check('my_file.doc') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     file_name_check('test1.exe') == 'Yes'\nassert     file_name_check('test.txt') == 'Yes'\nassert     file_name_check('test') == 'No'\nassert     file_name_check('test0.exe') == 'No'\nassert     file_name_check('test.exe.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     file_name_check('1.txt') == 'Yes', '1.txt is not valid'\nassert     file_name_check('1_txt') == 'No', '1_txt is not valid'\nassert     file_name_check('0txt') == 'No', '0txt is not valid'\nassert     file_name_check('A1.txt') == 'Yes', 'A1.txt is not valid'\nassert     file_name_check('A1_txt') == 'No', 'A1_txt is not valid'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     file_name_check(\"library.doc\") == \"No\"\nassert     file_name_check(\"librairy.doc\") == \"No\"\nassert     file_name_check(\"library.dll\") == \"Yes\"\nassert     file_name_check(\"librairy.dll\") == \"Yes\"\nassert     file_name_check(\"library.txt\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     file_name_check('program.c') == 'Yes', \"Check the first example\"\nassert     file_name_check('1program.c') == 'No', \"Check the second example\"\nassert     file_name_check('example.exe') == 'Yes', \"Check the third example\"\nassert     file_name_check('ex_program.c') == 'No', \"Check the forth example\"\nassert     file_name_check('te_program.c') == 'No', \"Check the fifth example\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     file_name_check('abc.exe') == 'Yes', \"Error\"\nassert     file_name_check('abc.txt') == 'Yes', \"Error\"\nassert     file_name_check('abc.dll') == 'Yes', \"Error\"\nassert     file_name_check('abc.doc') == 'No', \"Error\"\nassert     file_name_check('abc..txt') == 'No', \"Error\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     file_name_check('name.txt') == 'Yes'\nassert     file_name_check('example.exe') == 'Yes'\nassert     file_name_check('name.dll') == 'Yes'\nassert     file_name_check('1name.txt') == 'No'\nassert     file_name_check('name.py') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abcd.txt') == 'Yes'\nassert     file_name_check('abcde.dll') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.exe.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     file_name_check('some_file.exe') == 'No' \nassert     file_name_check('some_file.dll') == 'No' \nassert     file_name_check('some_file.txt') == 'Yes' \nassert     file_name_check('0_some_file.dll') == 'No' \nassert     file_name_check('some_file.exe.exe') == 'No' \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sum_squares([4, 5, 6, 3, 4])     == 81\nassert     sum_squares([2, 3, 6, 7, 9])     == 87\nassert     sum_squares([5, 9, 12, 20, 0])     == 400\nassert     sum_squares([0, 10, 20, -2, -20])     == 80\nassert     sum_squares([4])     == 16\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5,6]) == [1,16,25,36,49,64]\nassert     sum_squares([3,4,5]) == [9,12,15]\nassert     sum_squares([3,4,5,1]) == [9,12,15,1]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     sum_squares([3, 5, 6]) == 36\nassert     sum_squares([3, 5, 6, 7]) == 92\nassert     sum_squares([3, 5, 6, 7, 8]) == 216\nassert     sum_squares([3, 5, 6, 7, 8, 9]) == 456\n\nprint(\"sum_squares() is OK\")\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sum_squares([0, 1, 2, 3]) == 9, \"sum_squares error\"\nassert     sum_squares([0, 1, 2, 3, 4, 5]) == 37, \"sum_squares error\"\nassert     sum_squares([0, 0, 0]) == 0, \"sum_squares error\"\nassert     sum_squares([0, 0, 3, 1]) == 12, \"sum_squares error\"\nassert     sum_squares([0, 0, 0, 2, 0]) == 4, \"sum_squares error\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\ndef square_sum(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\ndef sum_cubes(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nprint(sum_squares([1, 3, 5, 7]))\nassert \nprint(sum_squares([-3, 4, 9, 16, 11]))\nassert \nprint(sum_squares([]))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"it is a beautiful day today\") == \"it is a beautiful day today\"\nassert     words_in_sentence(\"that is the best day of my life\") == \"is the best day of my life\"\nassert     words_in_sentence(\"it is an ugly day today\") == \"it is an ugly day today\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"i am very happy\") == \"am very happy\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"Hello world\") == \"world\"\nassert     words_in_sentence(\"Some words are here\") == \"Some words are here\"\nassert     words_in_sentence(\"Some words are here and here\") == \"here and here\"\nassert     words_in_sentence(\"A B C D E F\") == \"A B C D E F\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     words_in_sentence('') == ''\nassert     words_in_sentence('word') == 'word'\nassert     words_in_sentence('words') == 'words'\nassert     words_in_sentence('four score and seven years ago') == 'four score and seven years ago'\nassert     words_in_sentence('four score and seven years ago, what a great'\\\n                        'year for the party') == 'four score and seven years ago, what a great year for the party'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     words_in_sentence('') == ''\nassert     words_in_sentence('a a a') == 'a a a'\nassert     words_in_sentence('i i i i') == 'i i i i'\nassert     words_in_sentence('abc def ghi jkl') == 'abc def ghi jkl'\nassert     words_in_sentence('123 456 789 abc') == '4 5'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     words_in_sentence('this is a test') == 'this is a test'\nassert     words_in_sentence('this is a test sentence') == 'this is a test'\nassert     words_in_sentence('this is a test test test') == 'this is a test'\nassert     words_in_sentence('this is a test test test test') == 'this is a test'\nassert     words_in_sentence('this is a test test test test test') == 'this is a test'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     words_in_sentence('this is a test string') == 'test string'\nassert     words_in_sentence('this is a test string for prime') == 'test string for prime'\nassert     words_in_sentence('this is a test string for prime') == 'test string for prime'\nassert     words_in_sentence('this is a test string for prime for prime') == 'test string for prime for prime'\n\n\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     words_in_sentence('This is an example sentence') == 'This is an example'\nassert     words_in_sentence('I really like fish') == 'fish really like I'\nassert     words_in_sentence('I really like wine') == 'wine I really like'\n\nprint('Success'"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"Hello, this is a test sentence.\") == \"Hello, this is a test sentence.\"\nassert     words_in_sentence(\"Sentence of words.\") == \"Sentence of words.\"\nassert     words_in_sentence(\"Hello, this is a test sentence. The length of the sentence is 21.\") == \"Hello, this is a test sentence.\"\nassert     words_in_sentence(\"Hello, this is a test sentence. The length of the sentence is 21, not prime.\") == \"Hello, this is a test sentence.\"\nassert     words_in_sentence(\"Hello, this is a test sentence. The length of the sentence is 21, and it is not prime.\") == \"Hello, this is a test sentence.\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"Hey there mate, it\u2019s nice to finally meet you!\") == \"Hey there mate it\u2019s nice to finally meet you!\"\nassert     words_in_sentence(\"Today is a nice day!\") == \"Today is a nice day!\"\nassert     words_in_sentence(\"No primes here!\") == \"No primes here!\"\nassert     words_in_sentence(\"1 2 3 4 5 6 7 8 9 10 11\") == \"1 2 3 4 5 6 7 8 9 10 11\"\nassert     words_in_sentence(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     simplify( '1/4', '3/4') == False\nassert     simplify( '1/4', '1/2') == True\nassert     simplify( '1/4', '1/4') == True\nassert     simplify( '1/4', '1/8') == False\n\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     simplify(\"3/4\", \"1/2\")\nassert not simplify(\"3/4\", \"1/4\")\nassert     simplify(\"1/2\", \"4/5\")\nassert     simplify(\"1/2\", \"4/6\")\nassert not simplify(\"1/2\", \"4/7\")\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef fraction_add(x, y):\n    \"\"\"Your task is to implement a function that adds two fractions. You are\n    given two fractions as string representations.\n    The first fraction is x and the second fraction is y.\n    You can assume that x and y are valid fraction representations, and do not have zero as denominator.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     simplify(\"1/2\", \"1/4\") == False\nassert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/8\") == True\nassert     simplify(\"1/8\", \"1/8\") == True\nassert     simplify(\"1/8\", \"1/2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     simplify('1/2', '1/2') == True\nassert     simplify('1/4', '1/4') == True\nassert     simplify('1/3', '1/6') == False\nassert     simplify('2/4', '1/4') == True\nassert     simplify('2/4', '2/4') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     simplify(\"12/13\", \"23/25\") == False\nassert     simplify(\"12/13\", \"13/12\") == True\nassert     simplify(\"12/13\", \"1/1\") == True\nassert     simplify(\"12/13\", \"3/7\") == True\nassert     simplify(\"12/13\", \"3/13\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\n\ndef test_simplify():\n    \"\"\"\n    >>> test_simplify()\n    True\n    \"\"\"\n    assert simplify(\"1/4\", \"2\") == \"1/2\"\n    assert simplify(\"1/3\", \"1\") == \"1/3\"\n    assert simplify(\"1/3\", \"3\") == \"1\"\n    "
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     simplify(\"1/2\", \"1/4\") == False\nassert     simplify(\"2/4\", \"1/4\") == False\nassert     simplify(\"1/4\", \"1/4\") == True\nassert     simplify(\"3/4\", \"1/4\") == True\nassert     simplify(\"1/4\", \"1/2\") == False\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     order_by_points([1, 5, 4, 3, 2]) == [4, 2, 3, 1, 5]\nassert     order_by_points([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     order_by_points([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]\nassert     order_by_points([1, 2, 3, 4, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 4, 3, 5, 2, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     order_by_points([25, 98, 100, 70, 88]) == [25, 98, 88, 70, 100]\nassert     order_by_points([90, 73, 10, 16, 56]) == [10, 16, 73, 56, 90]\nassert     order_by_points([5, 8, 10, 32]) == [5, 8, 10, 32]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Example:')\n    print(order_by_points([125, 228, 12, 54, 39, 178]))\n\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert order_by_points([125, 228, 12, 54, 39, 178]) == [125, 228, 39, 54, 178, 12], \"Already sorted\"\n    "
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     order_by_points([12, 11, 13, 5, 6]) == [11, 5, 12, 13, 6]\nassert     order_by_points([8, 9, 1, 2]) == [9, 8, 2, 1]\nassert     order_by_points([0, 2, 3, 9]) == [0, 2, 3, 9]\nassert     order_by_points([0, 9, 2, 3, 9]) == [0, 9, 2, 3, 9]\nassert     order_by_points([9, 9, 9, 9, 9]) == [9, 9, 9, 9, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef main():\n    l = [3, 4, 5, 2, 7, 3, 1]\n    print(order_by_points(l))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\nassert     order_by_points([1, 2, 3]) == [1, 2, 3]\nassert     order_by_points([6, 8, 1, 2, 3]) == [1, 2, 3, 6, 8]\nassert     order_by_points([7, 2, 5, 9, 1, 8, 4, 2]) == [1, 2, 2, 4, 5, 7, 8, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef test_order_by_points():\n    \"\"\"\n    >>> test_order_by_points()\n    >>> \n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    assert [1, 2, 3, 4, 5, 6, 7, 8] == order_by_points(nums)\n\n    nums = [1, 5, 9, 13, 2, 6, 7, 8]\n    assert [1, 2, 6, 5, 9, 7, 13, 8] == order_by_points(nums)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7]) == 2 \nassert     specialFilter([22, 32, 33, 35, 54, 36, 25]) == 2 \nassert     specialFilter([22, 32, 33, 35, 54, 36, 25, 1]) == 4 \nassert     specialFilter([33, 36, 37, 38, 39, 40, 41, 42]) == 0 \nassert     specialFilter([9, 10, 11, 12, 13, 14, 15, 16]) == 0 \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    "
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     specialFilter([1, 2, 3, 4]) == 1, \"Wrong answer\"\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Wrong answer\"\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 9]) == 1, \"Wrong answer\"\nassert     specialFilter([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1, \"Wrong answer\"\nassert     specialFilter([0, 2, 4, 6, 8, 10, 12]) == 2, \"Wrong answer\"\nprint(\"Success\""
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     specialFilter([11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, "
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     specialFilter([12, 15, 20, 14, 14]) == 2\nassert     specialFilter([12, 15, 20, 14, 12]) == 0\nassert     specialFilter([12, 15, 20, 14, 13]) == 1\nassert     specialFilter([1, 3, 5, 7, 9]) == 2\nassert     specialFilter([1, 3, 5, 7, 10]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     specialFilter([1,2,3,4,5,6,9,10,14,15]) == 5\nassert     specialFilter([14,15,16,17,18,19,20]) == 0\nassert     specialFilter([13,14,15,16,17,18,19,20]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 11]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 11, 12]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     specialFilter([]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 3\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 21]) == 4\nassert     specialFilter([11, 21, 3, 4, 5, 6, 7, 8, 10]) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 5\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_max_triples(0) == 0\nassert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 0\nassert     get_max_triples(5) == 4\nassert     get_max_triples(6) == 4\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 5\nassert     get_max_triples(5) == 10\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_max_triples(5) == 9,     get_max_triples(5)\nassert     get_max_triples(5) == 9,     get_max_triples(5)\nassert     get_max_triples(6) == 13,    get_max_triples(6)\nassert     get_max_triples(7) == 18,    get_max_triples(7)\nassert     get_max_triples(8) == 32,    get_max_triples(8)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_max_triples(5) == 2\nassert     get_max_triples(12) == 11\nassert     get_max_triples(1000) == 1077\nassert     get_max_triples(100000) == 92581\nassert     get_max_triples(1000000) == 242982\nprint('great job!')\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     bf('Jupiter', 'Neptune') == ('Jupiter', 'Mars', 'Uranus', 'Venus')\nassert     bf('Earth', 'Earth') == ('Earth', )\nassert     bf('Earth', 'Jupiter') == ('Earth', 'Jupiter', 'Neptune', 'Saturn')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars', 'Venus', 'Venus')\nassert     bf('Earth', 'Mercury') == ('Earth', 'Mercury', 'Venus', 'Venus')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Venus')             == ('Venus', 'Mercury')\nassert     bf('Earth', 'Moon')                 == ('Moon', 'Earth')\nassert     bf('Earth', 'Neptune')             == ('Neptune', 'Earth')\nassert     bf('Mercury', 'Earth')             == ('Earth', 'Mercury')\nassert     bf('Mercury', 'Jupiter')             == ('Jupiter', 'Mercury')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus')                 == ('Venus', 'Earth', 'Mars')\nassert     bf('Mars', 'Jupiter')                 == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Neptune')                 == ()\nassert     bf('Earth', 'Uranus')                 == ('Uranus', 'Neptune')\nassert     bf('Earth', 'Venus')                 == ('Venus', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Neptune') == ('Neptune',)\nassert     bf('Mercury', 'Neptune') == ()\nassert     bf('Jupiter', 'Neptune') == ()\nassert     bf('Earth', 'Earth') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars')\nassert bf('Earth', 'Jupiter') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert bf('Mars', 'Earth') == ()\n\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef bf_test():\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    for planet1 in planets:\n        for planet2 in planets:\n            if planet1!= planet2:\n                print(bf(planet1, planet2))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Mercury') == ('Venus', 'Earth', 'Mars')\nassert     bf('Mercury', 'Uranus') == ('Uranus', 'Earth', 'Venus')\nassert     bf('Venus', 'Earth') == ('Earth', 'Venus', 'Mars')\nassert     bf('Earth', 'Uranus') == ('Uranus', 'Earth', 'Venus')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Jupiter') == ('Mercury', 'Venus', 'Earth', 'Mars')\nassert     bf('Earth', 'Neptune') == ('Earth', 'Jupiter', 'Saturn', 'Uranus')\nassert     bf('Earth', 'Earth') == ()\nassert     bf('Neptune', 'Neptune') == ()\n\nprint('tests passed')\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     bf(\"Mercury\", \"Earth\") == (\"Earth\", \"Mercury\")\nassert     bf(\"Venus\", \"Mercury\") == ()\nassert     bf(\"Earth\", \"Uranus\") == (\"Earth\", \"Uranus\")\nassert     bf(\"Earth\", \"Neptune\") == (\"Earth\", \"Neptune\")\nassert     bf(\"Mercury\", \"Pluto\") == ()\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['a']) == ['a']\nassert sorted_list_sum(['a', 'ab', 'abc']) == ['a', 'ab', 'abc']\nassert sorted_list_sum(['a', 'abc', 'abd']) == ['a', 'ab', 'abc']\nassert sorted_list_sum(['a', 'abd', 'abc']) == ['a', 'ab', 'abc']\nassert sorted_list_sum(['a', 'abc', 'abd', 'abde']) == ['a', 'ab', 'abc']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum(['a', 'a', 'b']) == ['a', 'b']\nassert     sorted_list_sum(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     sorted_list_sum(['a', 'a', 'a', 'b']) == ['a', 'b']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'b']) == ['a', 'b']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([\"a\", \"ab\"]) == [\"a\", \"ab\"]\nassert     sorted_list_sum([\"b\", \"a\", \"bbbb\", \"bbbbb\"]) == [\"a\", \"b\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"ac\", \"ad\", \"b\", \"bb\"]) == [\"a\", \"ab\", \"ac\", \"ad\", \"b\", \"bb\"]\nassert     sorted_list_sum([\"a\", \"a\", \"b\", \"ab\", \"ac\", \"ad\", \"bb\", \"bb\", \"bc\"]) == [\"a\", \"ab\", \"ac\", \"ad\", \"b\", \"bc\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"asdf\", \"as\", \"assdf\", \"ass\"]) == [\"asdf\", \"ass\"]\nassert     sorted_list_sum([\"asdf\", \"sadf\", \"sadf\", \"sdfsd\", \"asdf\"]) == [\"asdf\", \"sadf\", \"sdfsd\"]\nassert     sorted_list_sum([\"asdf\", \"sadf\", \"asdf\", \"sadf\", \"sdfsd\", \"asdf\", \"asdf\", \"sadf\"]) == [\"asdf\", \"sadf\", \"sdfsd\", \"asdf\"]\nassert     sorted_list_sum([\"asdf\", \"as\", \"assdf\", \"ass\", \"asdff\", \"asdf\", \"asd\", \"assdf\"]) == [\"asdf\", \"as\", \"assdf\", \"ass\", \"asdff\"]\nassert     sorted_list_sum([\"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\", \"sdf\"]) == [\"sdf\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([\"python\", \"is\", \"an\", \"awesome\", \"programming\", \"language\"]) \\\n            == ['an', 'awesome', 'programming', 'python', 'language'], \\\n            \"sorted_list_sum returns a wrong value\"\nassert     sorted_list_sum([\"python\", \"is\", \"an\", \"awesome\", \"programming\", \"language\"]) \\\n            == ['an', 'awesome', 'programming', 'python', 'language'], \\\n            \"sorted_list_sum returns a wrong value\"\nassert     sorted_list_sum([\"hello\", \"world\"]) \\\n            == ['hello', 'world'], \\\n            \"sorted_list_sum returns a wrong value\"\nassert     sorted_list_sum([\"\"]) \\\n            == [], \\\n            \"sorted_list_sum returns a wrong value\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['aaa', 'ddd', 'eee', 'bbb']) ==     ['aaa', 'bbb']\nassert sorted_list_sum(['aaa', 'ddd', 'eee', 'bbb', 'ccc']) ==     ['aaa', 'bbb', 'ccc']\nassert sorted_list_sum(['aaa', 'ddd', 'eee', 'bbb', 'aaa']) ==     ['aaa', 'aaa']\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sorted_list_sum(['hello', 'ab', 'cdef']) ==     ['ab', 'hello', 'cdef'],     'sorted_list_sum wrong output'\nassert     sorted_list_sum(['hello', 'c', 'ab', 'cdef']) ==     ['ab', 'c', 'hello', 'cdef'],     'sorted_list_sum wrong output'\nassert     sorted_list_sum(['hello', 'ab', 'c', 'cdef']) ==     ['ab', 'c', 'hello', 'cdef'],     'sorted_list_sum wrong output'\nassert     sorted_list_sum(['a', 'ab', 'hello', 'cdef']) ==     ['ab', 'a', 'hello', 'cdef'],     'sorted_list_sum wrong output'\nassert     sorted_list_sum(['hello', 'hello', 'cdef', 'hello', 'hello', 'hello']) ==     ['hello', 'hello', 'hello', 'cdef', 'hello', 'hello'],     'sorted_list_sum wrong output'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef test_sorted_list_sum():\n    assert "
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"123\", \"44\", \"6\", \"14\"]) == \\\n        ['44', '6', '14']\nassert sorted_list_sum([\"123\", \"44\", \"6\", \"14\", \"15\"]) == \\\n        ['44', '6', '14', '15']\nassert sorted_list_sum([\"124\", \"14\", \"44\", \"6\"]) == \\\n        ['44', '6', '14']\nassert sorted_list_sum([\"1\", \"12\", \"2\", \"3\", \"3\"]) == \\\n        ['12', '3', '1', '3']\nassert sorted_list_sum([\"44\", \"12\", \"0\", \"44\", \"11\"]) == \\\n        ['44', '12', '11', '0', '44']\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 10, 20) == 10\nassert     x_or_y(3, 10, 20) == 20\nassert     x_or_y(1, 10, 20) == 20\nassert     x_or_y(7, 10, 20) == 10\nassert     x_or_y(11, 10, 20) == 20\nprint(\"x_or_y seems to pass tests\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     x_or_y(5, 5, 6) == 5\nassert     x_or_y(5, 6, 5) == 6\nassert     x_or_y(5, 5, 5) == 5\nassert     x_or_y(5, 3, 5) == 5\nassert     x_or_y(5, 5, 5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert xt_or_yt(3, 5, 8) == 8\nassert xt_or_yt(9, 5, 8) == 5\n\ndef even(n):\n    \"\"\"A simple function which returns True if n is even, and False\n    otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert xt(0, 0, 1) == 0\nassert xt(1, 0, 1) == 1\nassert xt(2, 0, 1) == 0\nassert xt(3, 0, 1) == 1\nassert xt(4, 0, 1) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     x_or_y(5, 8, 9) == 8\nassert     x_or_y(11, 8, 9) == 9\nassert     x_or_y(4, 8, 9) == 8\nassert     x_or_y(2, 8, 9) == 8\nassert     x_or_y(3, 8, 9) == 9\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert xt_or_yt(3, 5, 6) == 3\nassert xt_or_yt(2, 7, 8) == 7\nassert xt_or_yt(1, 5, 6) == 5\nassert xt_or_yt(0, 7, 8) == 8\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(4, 2, 3) == 2\nassert     x_or_y(5, 4, 2) == 4\nassert     x_or_y(6, 6, 7) == 6\nassert     x_or_y(5, 7, 4) == 7\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     x_or_y(2,1,2) == 1\nassert     x_or_y(5,1,2) == 2\nassert     x_or_y(9,1,2) == 1\n\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, -3, 2, -1, 7]) == 50\nassert     double_the_difference([-2, 5, -8, -4, -9]) == 271\nassert     double_the_difference([]) == 0\n\nprint(\"Passed\")\n\nprint(double_the_difference([1, -3, 2, -1, 7]))\nprint(double_the_difference([-2, 5, -8, -4, -9]))\nprint(double_the_difference([]))"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8]) == 99, 'incorrect'\nassert     double_the_difference([1, -2, 3, 4, 5, 6, 7, 8]) == 99, 'incorrect'\nassert     double_the_difference([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0, 'incorrect'\nassert     double_the_difference([-1, 1, 2, 3, 4, 5, 6, 7, 8]) == 99, 'incorrect'\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0, 'incorrect'\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 441\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 10, -8, -4, -2]) == 441\nassert     double_the_difference([]) == 0\nassert     double_the_difference([5, 2, 1]) == 0\nassert     double_the_difference([-5, -2, -1]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \ndouble_the_difference([1,2,3]) == 14\nassert\ndouble_the_difference([1,-2,3]) == 8\nassert\ndouble_the_difference([]) == 0\nassert\ndouble_the_difference([-1,-2,3]) == 4\nassert\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     double_the_difference([]) == 0, \"Sum of squares of odd numbers in an empty list is 0\"\nassert     double_the_difference([1]) == 0, \"Sum of squares of odd numbers in a list of 1 is 0\"\nassert     double_the_difference([2]) == 1, \"Sum of squares of odd numbers in a list of 1 is 0\"\nassert     double_the_difference([2, 2]) == 2, \"Sum of squares of odd numbers in a list of 1 is 0\"\nassert     double_the_difference([-1, 2, 3]) == 0, \"Sum of squares of odd numbers in a list of 1 is 0\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert \n\nif __name__ == '__main__':\n    lst = [1,2,3]\n    print(double_the_difference(lst))\n    lst = [1,2,3,-1]\n    print(double_the_difference(lst))\n    lst = []\n    print(double_the_difference(lst)"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 13\nassert     double_the_difference([1, 2, 3, 4, 6]) == 13\nassert     double_the_difference([1, -2, 3, 4, 5]) == 0\nassert     double_the_difference([1, 2, 3, -4, 5]) == 13\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (compare(game=[8,1,7,3], guess=[5,6,9,8]) == [0,1,0,1])\nassert     (compare(game=[6,5,4,4], guess=[7,3,6,4]) == [1,0,0,0])\nassert     (compare(game=[5,6,6,5], guess=[7,6,5,4]) == [0,1,0,1])\nassert     (compare(game=[1,2,3,4], guess=[5,5,6,6]) == [0,0,0,0])\nassert     (compare(game=[1,2,3,4], guess=[5,6,7,8]) == [1,0,0,0])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (compare(game = [5, 3, 4, 1, 5], guess = [1, 2, 3, 4, 5]) == [0, 1, 1, 0, 0])\nassert     (compare(game = [4, 1, 5, 2, 3], guess = [1, 2, 3, 4, 5]) == [1, 0, 1, 0, 1])\nassert     (compare(game = [4, 1, 3, 2, 5], guess = [1, 2, 3, 4, 5]) == [1, 1, 0, 0, 0])\nassert     (compare(game = [4, 2, 3, 1, 5], guess = [1, 2, 3, 4, 5]) == [1, 1, 0, 1, 1])\nassert     (compare(game = [4, 2, 1, 3, 5], guess = [1, 2, 3, 4, 5]) == [1, 1, 1, 1, 0])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (compare([50, 100, 120], [20, 100, 120]) == [10, 0, 0])\nassert     (compare([50, 100, 120], [70, 110, 120]) == [0, 20, 0])\nassert     (compare([50, 100, 120], [90, 110, 120]) == [0, 10, 0])\nassert     (compare([50, 100, 120], [0, 120, 140]) == [50, 0, 0])\nassert     (compare([0, 50, 100], [0, 100, 120]) == [0, 0, 20])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (compare([3,2,1,0], [3,2,0,2]) == [0,1,0,0]).all()\nassert     (compare([0,1,2,3], [3,2,0,1]) == [0,2,0,1]).all()\nassert     (compare([1,1,0,0], [2,1,1,1]) == [0,0,0,2]).all()\nassert     (compare([1,1,1,0], [2,1,1,1]) == [1,1,2,0]).all()\nassert     (compare([1,1,1,0], [1,0,1,1]) == [1,2,1,0]).all()\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     compare(\n    [5, 0, 3, 6, 9], \n    [0, 5, 3, 6, 9]) == [0, 0, 3, 0, 0], \"Case 1\"\nassert     compare(\n    [5, 1, 3, 7, 9], \n    [5, 1, 3, 7, 9]) == [0, 0, 0, 0, 0], \"Case 2\"\nassert     compare(\n    [1, 2, 3, 6, 9], \n    [1, 2, 3, 6, 9]) == [0, 0, 0, 0, 0], \"Case 3\"\nassert     compare(\n    [1, 3, 7, 8, 10], \n    [1, 3, 7, 8, 10]) == [0, 0, 0, 0, 0], \"Case 4\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     compare(game = [5, 7, 2, 3], guess = [5, 7, 1, 3]) == [0, 1, 1, 0], \"Wrong result for compare\"\nassert     compare(game = [1, 3], guess = [2, 3]) == [1, 0], \"Wrong result for compare\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     compare(game = [10, 5, 20, 20, 4, 5, 2, 25, 1],guess = [20, 20, 6, 4, 25, 20, 20, 1, 8]) == [0, 1, 1, 0, 0, 1, 2, 0, 0], \"Test #1\"\nassert     compare(game = [7, 3, 21, 16, 14, 6, 9, 20, 18, 11],guess = [20, 18, 14, 12, 8, 5, 19, 7, 16, 3]) == [0, 1, 1, 0, 1, 1, 1, 1, 1, 1], \"Test #2\"\nassert     compare(game = [4, 21, 18, 1, 14, 18, 20, 8, 19, 12],guess = [18, 17, 20, 16, 19, 13, 17, 12, 14, 6]) == [0, 1, 1, 0, 1, 1, 1, 1, 1, 0], \"Test #3\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     [0, 1, 2, 1, 0, 2] == compare([50,70,20,10,30,20], [30, 10, 20, 20, 10, 20]), \\\n        \"Incorrect solution for compare\"\nprint(\"Correct solution for compare\")\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     compare(game = [5, 10, 15, 20, 25, 30],guess = [5, 20, 15, 25, 30, 40])         == [0, 0, 0, 0, 0, 0], 'Wrong result'\nassert     compare(game = [5, 10, 15, 20, 25, 30],guess = [5, 10, 15, 25, 30, 40])         == [0, 0, 0, 0, 0, 0], 'Wrong result'\nassert     compare(game = [5, 10, 15, 20, 25, 30],guess = [4, 10, 15, 25, 30, 40])         == [0, 0, 0, 0, 0, 0], 'Wrong result'\nassert     compare(game = [5, 10, 15, 20, 25, 30],guess = [0, 0, 0, 0, 0, 0])             == [0, 0, 0, 0, 0, 0], 'Wrong result'\nassert     compare(game = [5, 10, 15, 20, 25, 30],guess = [1, 2, 3, 4, 5, 6])             == [5, 5, 5, 5, 5, 5], 'Wrong result'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese.SErviNGSliCes\"\nassert     Strongest_Extension(\"Cheese\", [\"Cheese\", \"SErviNGSliCes\", \"StuFfed\"]) == \"Cheese.SErviNGSliCes\"\nassert     Strongest_Extension(\"Cheese\", [\"Cheese\", \"StuFfed\"]) == \"Cheese.StuFfed\"\nassert     Strongest_Extension(\"Cheese\", [\"Cheese\", \"Cheese\"]) == \"Cheese.Cheese\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Chess', ['Chess', 'Chess2']) == 'Chess.Chess2'\nassert     Strongest_Extension('Chess', ['Chess', 'Chess2', 'Chess3']) == 'Chess.Chess2'\nassert     Strongest_Extension('Chess', ['Chess', 'Chess2', 'Chess3', 'Chess4']) == 'Chess.Chess2'\nassert     Strongest_Extension('Chess', ['Chess', 'Chess2', 'Chess3', 'Chess4', 'Chess5']) == 'Chess.Chess2'\nassert     Strongest_Extension('Chess', ['Chess', 'Chess2', 'Chess3', 'Chess4', 'Chess5', 'Chess6']) == 'Chess.Chess2'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Slices', 'Cheese', 'StuFfed']) == 'Slices.Slices'\nassert     Strongest_Extension('Slices', ['Cheese', 'Slices', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Slices', 'Cheese', 'StuFfed']) == 'Slices.Slices'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'SErviNGSliCes', 'StuFfed']) == \"Slices.Cheese\"\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", ['Cheese', 'StuFfed', 'SErviNGSliCes']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'StuFfed', 'Cheese']) == \"Slices.Cheese\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert         Strongest_Extension(\"MyClass\", ['a', 'b', 'c']) == \"MyClass.a\"\nassert         Strongest_Extension(\"MyClass\", ['a', 'aa', 'ab']) == \"MyClass.a\"\nassert         Strongest_Extension(\"MyClass\", ['a', 'a', 'b']) == \"MyClass.a\"\nassert         Strongest_Extension(\"MyClass\", ['A', 'a', 'b']) == \"MyClass.A\"\nassert         Strongest_Extension(\"MyClass\", ['a', 'A', 'b']) == \"MyClass.a\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'Smomthing']) == 'Slices.StuFfed'\n\n\ndef main():\n    \"\"\"A simple test script for the function Strongest_Extension\n    \"\"\"\n    print('Testing Strongest_Extension')\n    print('===========================')\n    print('The strongest extension is: {}'.format(Strongest_Extension('Slices', \n                                    ['SErviNGSliCes', 'Cheese', 'StuFfed'])))\n    print('The strongest extension is: {}'.format(Strongest_Extension('Slices', \n                                    ['Cheese', 'StuFfed'])))\n    print('The strongest extension is: {}'.format(Strongest_Extension('Slices', \n                                    ['Cheese', 'StuFfed', 'Smomthing'])))\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Encryption', ['AES', 'RSA', 'DES']) == 'Encryption.AES'\nassert     Strongest_Extension('Ping', ['Ping', 'Pong', 'Pang']) == 'Ping.Pong'\nassert     Strongest_Extension('IoT', ['IoT', 'STC', 'GPS']) == 'IoT.GPS'\nassert     Strongest_Extension('Wifi', ['WiFi', 'WIFI']) == 'Wifi.WIFI'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     Strongest_Extension('Cheese', ['Cheese', 'Sausage', 'Salmon']) == 'Cheese.Cheese', 'Cheese.Cheese is not the strongest extension'\nassert     Strongest_Extension('Slices', ['Slices', 'Pizza', 'Pie']) == 'Slices.Slices', 'Slices.Slices is not the strongest extension'\nassert     Strongest_Extension('Pizza', ['Pizza', 'Pie']) == 'Pizza.Pizza', 'Pizza.Pizza is not the strongest extension'\nassert     Strongest_Extension('Cheese', ['Cheese', 'Sausage', 'Salmon', 'Muffin']) == 'Cheese.Salmon', 'Cheese.Salmon is not the strongest extension'\nassert     Strongest_Extension('Chicken', ['Chicken', 'Steak', 'Meatball', 'Tikka Masala', 'Stir Fry']) == 'Chicken.Tikka Masala', 'Chicken.Tikka Masala is not the strongest extension'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'Cheese']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheese']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheese', 'Cheese']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     cycpattern_check('code', 'deoc') == True\nassert     cycpattern_check('code', 'doc') == False\nassert     cycpattern_check('code', 'doc') == False\n\n\n\ndef is_permutation(a, b):\n    \"\"\"You are given 2 strings. You need to return True if the strings are permutations of each other\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     cycpattern_check('waterbottle', 'erbottlewat') == True\nassert     cycpattern_check('waterbottle', 'erbottlewta') == True\nassert     cycpattern_check('waterbottle', 'erbottlewor') == False\nassert     cycpattern_check('waterbottle', 'erbottle') == False\nassert     cycpattern_check('waterbottle', 'erbottlewer') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     cycpattern_check( \"waterbottle\", \"erbottlewat\") == True\nassert     cycpattern_check( \"onetimepad\", \"pon onit oepat\") == True\nassert     cycpattern_check( \"computer\", \"conputer\") == True\nassert     cycpattern_check( \"hoops\", \"ops hoop\") == True\nassert     cycpattern_check( \"abc\", \"abc\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"cabbage\",\"bacdage\") == True, \"WRONG RESULT\"\nassert     cycpattern_check(\"kitten\", \"kiten\") == False, \"WRONG RESULT\"\nassert     cycpattern_check(\"lint\", \"intl\") == True, \"WRONG RESULT\"\nassert     cycpattern_check(\"abcd\", \"abcd\") == True, \"WRONG RESULT\"\nassert     cycpattern_check(\"abcd\", \"acbd\") == False, \"WRONG RESULT\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (cycpattern_check(\"cc\", \"abc\") == True)\nassert     (cycpattern_check(\"abc\", \"abc\") == True)\nassert     (cycpattern_check(\"ccc\", \"abc\") == True)\nassert     (cycpattern_check(\"xyz\", \"abc\") == False)\nassert     (cycpattern_check(\"ccccccccc\", \"abc\") == True)\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     cycpattern_check('hi','hi') == True\nassert     cycpattern_check('hi','hello') == False\nassert     cycpattern_check('hi','bye') == True\nassert     cycpattern_check('hi','a') == False\nassert     cycpattern_check('abcde','ab') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     cycpattern_check('waterbottle', 'erbottlewat') == True\nassert     cycpattern_check('foo', 'bar') == False\nassert     cycpattern_check('foo', 'fo') == True\nassert     cycpattern_check('foo', 'foofoo') == True\nassert     cycpattern_check('foo', 'barbar') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"abdca\", \"cab\") == True\nassert     cycpattern_check(\"ccc\", \"abc\") == False\nassert     cycpattern_check(\"bcb\", \"bcb\") == True\nassert     cycpattern_check(\"bcbc\", \"bcbc\") == True\nassert     cycpattern_check(\"bcbc\", \"bcba\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     cycpattern_check('algorithm', 'patg') == True\nassert     cycpattern_check('algorithm', 'alg') == False\nassert     cycpattern_check('algorithm', 'lgo') == False\nassert     cycpattern_check('algorithm', 'algs') == True\nassert     cycpattern_check('algorithm', 'algos') == False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     even_odd_count(25) == (3,5)\nassert     even_odd_count(1) == (1,0)\nassert     even_odd_count(0) == (0,0)\nassert     even_odd_count(12345) == (3,5)\nassert     even_odd_count(1233) == (3,5)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     even_odd_count(3) == (1, 2)\nassert     even_odd_count(4) == (0, 4)\nassert     even_odd_count(11) == (2, 5)\n\ndef sum_unique_digits(num):\n    \"\"\"Given an integer, return the sum of the unique digits of that integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     even_odd_count(121) == (3, 7)\nassert     even_odd_count(150) == (4, 5)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(-1) == (0, 0)\nassert     even_odd_count(-10) == (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \nprint('even_odd_count() OK')\n\ndef even_odd_sum(num):\n    \"\"\"Given an integer. return the sum of even and odd digits respectively.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nprint(even_odd_count(1572))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     even_odd_count(0) == (1, 0)\nassert     even_odd_count(1) == (0, 1)\nassert     even_odd_count(23) == (2, 1)\nassert     even_odd_count(28) == (1, 3)\nassert     even_odd_count(32) == (2, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     even_odd_count(13) == (1,3)\nassert     even_odd_count(42) == (0,2)\nassert     even_odd_count(12) == (1,3)\n\nprint(\"Tests passed!\")\n\ndef is_palin_perm(num):\n    \"\"\"Given an integer, return True if it's permutation of a palindrome, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     even_odd_count(2) == (1,0)\nassert     even_odd_count(11) == (2,1)\nassert     even_odd_count(100) == (0,3)\nassert     even_odd_count(104) == (2,3)\nassert     even_odd_count(1000) == (0,5)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(9) == 'IX'\nassert     int_to_mini_roman(27) == 'XXVII'\nassert     int_to_mini_roman(48) == 'XLVIII'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(3) == 'III'\nassert int_to_mini_roman(4) == 'IV'\nassert int_to_mini_roman(5) == 'V'\nassert int_to_mini_roman(6) == 'VI'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(2) == 'II'\nassert int_to_mini_roman(3) == 'III'\nassert int_to_mini_roman(4) == 'IV'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False, 'incorrect'\nassert     right_angle_triangle(5, 12, 13) == True, 'incorrect'\nassert     right_angle_triangle(1, 1, 1) == True, 'incorrect'\nassert     right_angle_triangle(5, 4, 2) == True, 'incorrect'\nassert     right_angle_triangle(5, 5, 5) == True, 'incorrect'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, 'Check the case of three sides'\nassert     right_angle_triangle(2, 3, 4) == False, 'Check the case of four sides'\nassert     right_angle_triangle(2, 3, 4) == False, 'Check the case of four sides'\n\ndef find_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Find the side which has\n    the right angle.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(4, 4, 4) == True\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(6, 6, 8) == False\nassert     right_angle_triangle(6, 12, 6) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\nprint('PASSED: right_angle_triangle()')\n\n\ndef inequality_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    inequality of the triangle holds, False otherwise.\n    The inequality of a triangle is defined as all sides having one length less \n    than the other two.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(3, 4, 5) is True, \"Right-angle triangle (3, 4, 5)\"\nassert     right_angle_triangle(2, 2, 5) is False, \"Not a right-angle triangle (2, 2, 5)\"\nassert     right_angle_triangle(4, 3, 4) is True, \"Right-angle triangle (4, 3, 4)\"\nassert     right_angle_triangle(6, 5, 7) is False, \"Not a right-angle triangle (6, 5, 7)\"\nassert     right_angle_triangle(4, 5, 7) is False, \"Not a right-angle triangle (4, 5, 7)\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, 'Wrong Answer!'\nassert     right_angle_triangle(1, 2, 2) == False, 'Wrong Answer!'\nassert     right_angle_triangle(3, 4, 6) == False, 'Wrong Answer!'\n\nprint('You are all set to go!')"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(4, 3, 5) == False\nassert     right_angle_triangle(4, 3, 6) == True\nassert     right_angle_triangle(4, 3, 7) == False\nassert     right_angle_triangle(4, 3, 8) == True\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_max(['apple', 'pear', 'kiwi', 'apple', 'banana', 'kiwi']) == 'apple', 'incorrect result for find_max'\nassert     find_max(['apple', 'pear', 'kiwi', 'kiwi', 'banana', 'kiwi']) == 'kiwi', 'incorrect result for find_max'\nassert     find_max(['apple', 'apple', 'apple', 'kiwi', 'banana', 'kiwi']) == 'apple', 'incorrect result for find_max'\n\n\ndef unique_word(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_max([\"apple\", \"onion\", \"carrot\"]) == \"apple\"\nassert     find_max([\"apple\", \"onion\", \"carrot\", \"apple\", \"apple\", \"apple\"]) == \"carrot\"\nassert     find_max([\"apple\", \"onion\", \"carrot\", \"apple\", \"apple\", \"apple\", \"onion\", \"onion\", \"onion\", \"onion\"]) == \"onion\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_max([\"hello\", \"world\", \"lo\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"lo\", \"hello\"]) == \"lo\"\nassert     find_max([\"hello\", \"world\", \"lo\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"lo\", \"hello\"]) == \"world\"\nassert     find_max([\"hello\", \"world\", \"lo\", \"hello\"]) == \"hello\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_max([\"aba\",\"aa\",\"ad\",\"vcd\",\"aba\"]) == \"aba\"\nassert     find_max([\"aaa\",\"aaa\",\"aa\",\"aaaaa\"]) == \"aaaaa\"\nassert     find_max([\"zaa\",\"zb\",\"za\",\"zab\",\"zca\",\"zza\"]) == \"zab\"\nassert     find_max([\"zaa\",\"zab\",\"zca\",\"zab\",\"za\",\"zca\",\"zza\"]) == \"zab\"\nassert     find_max([\"ab\",\"a\",\"abc\",\"abcd\",\"abcde\"]) == \"abcd\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_max(['test', 'get', 'of','some']) =='some'\nassert     find_max(['test', 'get', 'of','some']) == 'test'\nassert     find_max(['test', 'get', 'of','some']) == 'of'\nassert     find_max(['test', 'get', 'of','some']) == 'get'\nassert     find_max(['test', 'get', 'of','some']) == 'test'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_max([\"abcd\", \"qwe\", \"qwerty\", \"asdfgh\", \"asd\", \"zxcvb\"]) == \"qwerty\"\nassert find_max([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\"]) == \"z\"\n\nprint(\"Exercise 5.5.2: done.\")"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_max(['foo', 'bar', 'bar', 'foobar']) == 'bar'\nassert     find_max(['foo', 'bar', 'bar', 'foobar', 'abc', 'foobaz']) == 'foobar'\nassert     find_max(['foo', 'bar', 'bar', 'foobar', 'abc', 'foobaz', 'zebra', 'cheetah', 'foofoo']) == 'foobar'\nassert     find_max(['foo', 'bar', 'bar', 'foobar', 'abc', 'foobaz', 'zebra', 'cheetah', 'foofoo', 'foofoo']) == 'foofoo'\nprint(\"find_max is ok.\")"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_max(['hello', 'goodbye', 'python', 'algorithms']) == 'algorithms'\nassert     find_max(['algorithms', 'hello', 'goodbye', 'python']) == 'algorithms'\nassert     find_max(['algorithms', 'hello', 'goodbye', 'python', 'algorithms']) == 'algorithms'\nassert     find_max(['algorithms', 'hello', 'python']) == 'algorithms'\nassert     find_max(['algorithms', 'hello', 'python', 'algorithms', 'hello', 'python']) == 'algorithms'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_max([\"abc\", \"hello\", \"yolo\", \"yay\", \"yas\", \"yolo\"]) == \"yolo\", \"wrong answer\"\nassert     find_max([\"yas\", \"yolo\", \"yolo\", \"hello\", \"abc\"]) == \"yolo\", \"wrong answer\"\nassert     find_max([\"abc\", \"yolo\", \"yolo\", \"hello\", \"abc\"]) == \"abc\", \"wrong answer\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     eat(0, 1, 10) == [1, 10]\nassert     eat(2, 2, 10) == [5, 6]\nassert     eat(3, 3, 10) == [8, 0]\nassert     eat(4, 4, 10) == [10, 0]\nassert     eat(5, 5, 10) == [10, 5]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     eat(0, 5, 10) == [5, 5]\nassert     eat(5, 10, 10) == [10, 5]\nassert     eat(10, 5, 10) == [15, 0]\nassert     eat(8, 3, 10) == [8, 3]\nassert     eat(8, 3, 10) == [8, 3]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     eat(10, 6, 7) == [6, 0]\nassert     eat(5, 7, 7) == [7, 0]\nassert     eat(4, 6, 2) == [6, 2]\nassert     eat(6, 7, 7) == [7, 0]\nassert     eat(7, 5, 2) == [5, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 0, 1) == [1, 1]\nassert     eat(1, 2, 2) == [3, 1]\nassert     eat(1, 2, 4) == [5, 1]\nassert     eat(1, 2, 1) == [2, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     eat(0, 1, 1) == [1, 1]\nassert     eat(1, 2, 2) == [3, 2]\nassert     eat(2, 2, 2) == [4, 1]\nassert     eat(2, 3, 1) == [3, 1]\nassert     eat(3, 3, 2) == [5, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     eat(2, 3, 2) == [3, 1]\nassert     eat(8, 11, 7) == [10, 2]\nassert     eat(1, 0, 2) == [2, 0]\nassert     eat(10, 2, 8) == [12, 0]\nassert     eat(3, 5, 2) == [5, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     eat(0, 0, 1) == [0, 1]\nassert     eat(0, 1, 1) == [0, 0]\nassert     eat(1, 1, 1) == [0, 0]\nassert     eat(1, 2, 1) == [0, 0]\nassert     eat(2, 2, 1) == [0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     eat(6, 1, 4) == [6, 0]\nassert     eat(3, 4, 2) == [6, 0]\nassert     eat(1, 5, 5) == [6, 1]\nassert     eat(2, 6, 6) == [8, 2]\nassert     eat(3, 10, 3) == [12, 0]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\nprint(do_algebra([1,2,3], [1,1]))\nassert\n\nprint(do_algebra([1,2,3,4,5], [1,1,1,1,1]))\nassert\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     do_algebra([1,2], [1,2]) == 3\nassert     do_algebra([1,2,3], [1,2]) == 7\nassert     do_algebra([3,2,1], [1,2]) == 7\nassert     do_algebra([4,5], [3,2,1]) == 17\nassert     do_algebra([2,4,6,8], [2,4,6,8]) == 48\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     do_algebra(['+'], [2,3]) == 5\nassert     do_algebra(['-'], [2,3]) == -1\nassert     do_algebra(['+', '+'], [1,1,1]) == 3\nassert     do_algebra(['+', '*'], [1,1,1]) == 3\nassert     do_algebra(['+', '*', '-'], [2,2,2]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     do_algebra([\"+\"], [2, 3]) == 5, \"2 + 3 is 5\"\nassert     do_algebra([\"+\", \"-\", \"*\"], [2, 3, 4]) == 7, \"2 + 3 + 4 is 7\"\nassert     do_algebra([\"*\", \"//\", \"-\"], [2, 3, 4]) == 4, \"2 * 3 // 4 is 4\"\nassert     do_algebra([\"-\", \"//\", \"-\"], [2, 3, 4]) == 0, \"2 - 3 // 4 is 0\"\nassert     do_algebra([\"+\", \"//\", \"-\"], [2, 3, 4]) == 1, \"2 + 3 // 4 is 1\"\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     do_algebra([\"+\",\"*\"],[1,2,3,4]) == [4,6,8,12]\nassert     do_algebra([\"+\",\"*\",\"*\"],[1,2,3,4]) == [4,6,8,12]\nassert     do_algebra([\"+\",\"+\",\"+\"],[1,2,3,4]) == [4,4,4]\nassert     do_algebra([\"+\",\"-\",\"*\",\"*\",\"*\",\"*\",\"*\",\"*\",\"*\",\"*\"],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [2,1,4,6,9,16,16,16,32,32]\nassert     do_algebra([\"+\",\"*\"],[0]) == [0]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     do_algebra(['+', '*'], [1, 2]) == 3\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5]) == 2\nassert     do_algebra(['+', '*', '**'], [1, 2, 3, 4, 5]) == 32\nassert     do_algebra(['+', '-', '*', '**'], [1, 2, 3, 4, 5]) == -34\nassert     do_algebra(['+', '*', '**', '//'], [1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     do_algebra(['+', '+', '+'], [3, 4, 5]) == 12\nassert     do_algebra(['+', '+', '+', '+'], [5, 6, 3, 4]) == 15\nassert     do_algebra(['-', '-', '-', '-'], [1, 2, 3, 4]) == -8\nassert     do_algebra(['-', '-', '-', '-'], [2, 5, 7, 9]) == -19\nassert     do_algebra(['*', '*', '*', '*'], [2, 2, 2, 2]) == 16\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     do_algebra([\"+\"], [3, 4]) == 7\nassert     do_algebra([\"-\", \"*\"], [5, 3]) == 10\nassert     do_algebra([\"*\", \"/\", \"^\"], [3, 4]) == 81\nassert     do_algebra([\"+\", \"*\", \"/\", \"^\"], [5, 3, 4, 2]) == 64\nassert     do_algebra([\"+\", \"+\"], [3, 4, 5]) == 12\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     solve(\"\") == \"\", \"Empty string\"\nassert     solve(\"A\") == \"a\", \"One symbol\"\nassert     solve(\"Ab\") == \"bA\", \"Two symbols\"\nassert     solve(\"aBc  d\") == \"aBc d\", \"Symbols\"\nassert     solve(\"Ab1CD2\") == \"CD2AB1\", \"All symbols\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (solve(\"a\") == \"A\"\n         and solve(\"aa\") == \"AA\"\n         and solve(\"Aa\") == \"aA\"\n         and solve(\"aBc\") == \"AbC\"\n         and solve(\"a1b2\") == \"A1B2\"\n         and solve(\"\") == \"\")\n\nprint(\"Success\")\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     solve('a.bc') == 'A.BC'\nassert     solve('a.') == 'A.'\nassert     solve('abcdef') == 'abcdef'\nassert     solve('ab') == 'AB'\nassert     solve('ab.') == 'AB.'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     (solve(\"Welcome to Python 101: Strings & Lists\") == \"wECoMmE tO Pythn 101: strings & lists\"), \"Case changes\"\nassert     (solve(\"To be or not to be\") == \"TOBEORNOTTOBE\"), \"Palindromes\"\nassert     (solve(\"123\") == \"321\"), \"Digits\"\nassert     (solve(\"\") == \"\"), \"Empty string\"\nassert     (solve(\"aBcd\") == \"Abcd\"), \"Uppercase and lowercase letters\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     solve('hackerhappy') == 'CAKEPHAY', 'wrong result for \"hackerhappy\"'\nassert     solve('Hackerhappy') == 'hACKERHAPPY', 'wrong result for \"Hackerhappy\"'\nassert     solve('hackerhappyy') == 'hackerhappyy', 'wrong result for \"hackerhappyy\"'\nassert     solve('hAkcer HAPPY') == 'HaCKEr HAPPY', 'wrong result for \"hAkcer HAPPY\"'\nassert     solve('12345') == '12345', 'wrong result for \"12345\"'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     solve(\"FooBar\") == \"foobar\"\nassert     solve(\"fooBar\") == \"foobar\"\nassert     solve(\"barBAZ\") == \"bazBaR\"\nassert     solve(\"bar\") == \"bar\"\nassert     solve(\"\") == \"bar\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     solve('HELLO WORLD') == 'hELLO wORLD'\nassert     solve('hello world') == 'hELLO wORLD'\nassert     solve('hello world') == 'hELLO wORLD'\nassert     solve('HELlo wORlD') == 'hELLO wORLD'\nassert     solve('HELLO WORLD WORLD') == 'hELLO wORLD wORLD'\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef generate_list_md5(input_list):\n    \"\"\"\n    Given a list of strings 'input_list', generate its md5 hash equivalent list of strings.\n    If 'input_list' is an empty list, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     string_to_md5(\"a string\") == \"f20a7a2b5c6f14e11b7a3fbe5b8ca0e5\"\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"abc\") == \"f20a7a2b5c6f14e11b7a3fbe5b8ca0e5\"\nassert     string_to_md5([\"a\", \"list\"]) == None\nassert     string_to_md5(\"hello\") == \"f20a7a2b5c6f14e11b7a3fbe5b8ca0e5\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given an md5 hash'md5_hash' (a string), return its string equivalent.\n    If'md5_hash' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"A\") == \"c8b8b8b4a9b4a984a9fb0d0e0d6b6b6\"\nassert     string_to_md5(\"AB\") == \"83de0e3d3a0b3d9dca14c4a7bfebf2ce\"\nassert     string_to_md5(\"ABC\") == \"c97cdb1a4b28c240b40b6c5c0b3c4d9d\"\nassert     string_to_md5(\"ABCD\") == \"f35e4c90f90a4b1a1b9c9d9f18e6b6b6\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \nassert string_to_md5('abcd') == 'e10adc3949ba59abbe56e057f20f883e'\nassert string_to_md5('') == None\nassert string_to_md5(string_to_md5('abcd')) == None\nassert string_to_md5('abcd') == string_to_md5(string_to_md5('abcd'))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"abc\")!= None\nassert     string_to_md5(\"abc\") == \"fcb7d2c84f589d3bbbab9937d6b8df55\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     generate_integers(1111, 1111) == [2, 4, 6]\nassert     generate_integers(101, 2111) == [2, 4, 6, 8, 10, 12]\nassert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(10, 1) == [2, 4, 6, 8]\nassert     generate_integers(10, 0) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     generate_integers(0, 0) == []\nassert     generate_integers(1, 5) == [2, 4]\nassert     generate_integers(1, 9) == [2, 4, 6, 8]\nassert     generate_integers(0, 2) == [2]\nassert     generate_integers(3, 7) == [4, 6]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     generate_integers(45, 67) == [44, 46, 48, 50, 52, 54, 56, 58]\nassert     generate_integers(67, 78) == [66, 68, 70, 72, 74, 76, 78]\nassert     generate_integers(24, 94) == [24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78]\nassert     generate_integers(12, 36) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\nassert     generate_integers(22, 12) == [22, 24, 26, 28, 30, 32, 34, 36]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    Run the unit tests.\n    \"\"\"\n    print('Test 1: generate_integers(1, 10)')\n    print(generate_integers(1, 10))\n\n    print('Test 2: generate_integers(1, 100)')\n    print(generate_integers(1, 100))\n\n    print('Test 3: generate_integers(100, 10)')\n    print(generate_integers(100, 10))\n\n    print('Test 4: generate_integers(100, 100)')\n    print(generate_integers(100, 100))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(generate_integers(1, 10))\n    print(generate_integers(9, 20)"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef is_divisible(a, b):\n    \"\"\"\n    Given two integers a and b, return True if a is divisible by b,\n    False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     generate_integers(12, 17) == [8, 10, 12]\nassert     generate_integers(13, 19) == [10, 14]\nassert     generate_integers(18, 20) == [10, 12, 14, 16, 18]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    integers = []\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     generate_integers(10, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], \\\n        'incorrect output'\nassert     generate_integers(1, 10) == [2, 4, 6, 8, 10], \\\n        'incorrect output'\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98], \\\n        'incorrect output'\n\nprint('correct!'"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    }
]